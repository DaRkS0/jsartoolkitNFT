(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ARToolkitNFT"] = factory();
	else
		root["ARToolkitNFT"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/artoolkitNFT_ES6_wasm.js":
/*!****************************************!*\
  !*** ./build/artoolkitNFT_ES6_wasm.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __filename = "/index.js";
var __dirname = "/";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!=="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=__webpack_require__(/*! path */ "?f955").dirname(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=__webpack_require__(/*! fs */ "?4dea");if(!nodePath)nodePath=__webpack_require__(/*! path */ "?f955");filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",abort);quit_=function(status){process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)}}readBinary=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs}else if(typeof arguments!="undefined"){arguments_=arguments}if(typeof quit==="function"){quit_=function(status){quit(status)}}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=function(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var STACK_ALIGN=16;function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;return Math.ceil(size/factor)*factor}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime=Module["noExitRuntime"]||true;if(typeof WebAssembly!=="object"){abort("no native wasm support detected")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else{var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||268435456;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";err(what);ABORT=true;EXITSTATUS=1;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix="file://";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile="data:application/octet-stream;base64,";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmMemory=Module["asm"]["Y"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module["asm"]["ba"];removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiatedSource(output){receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}var tempDouble;var tempI64;var ASM_CONSTS={64092:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=$a[i++];markerInfo["found"]=1;markerInfo["pose"][0]=$a[i++];markerInfo["pose"][1]=$a[i++];markerInfo["pose"][2]=$a[i++];markerInfo["pose"][3]=$a[i++];markerInfo["pose"][4]=$a[i++];markerInfo["pose"][5]=$a[i++];markerInfo["pose"][6]=$a[i++];markerInfo["pose"][7]=$a[i++];markerInfo["pose"][8]=$a[i++];markerInfo["pose"][9]=$a[i++];markerInfo["pose"][10]=$a[i++];markerInfo["pose"][11]=$a[i++]},64798:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=-1;markerInfo["found"]=0;markerInfo["pose"][0]=0;markerInfo["pose"][1]=0;markerInfo["pose"][2]=0;markerInfo["pose"][3]=0;markerInfo["pose"][4]=0;markerInfo["pose"][5]=0;markerInfo["pose"][6]=0;markerInfo["pose"][7]=0;markerInfo["pose"][8]=0;markerInfo["pose"][9]=0;markerInfo["pose"][10]=0;markerInfo["pose"][11]=0},65427:function($0,$1,$2,$3,$4,$5){if(!artoolkitNFT["frameMalloc"]){artoolkitNFT["frameMalloc"]={}}var frameMalloc=artoolkitNFT["frameMalloc"];frameMalloc["framepointer"]=$1;frameMalloc["framesize"]=$2;frameMalloc["camera"]=$3;frameMalloc["transform"]=$4;frameMalloc["videoLumaPointer"]=$5}};function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function ___localtime_r(a0,a1){return _localtime_r(a0,a1)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};function getRandomDevice(){if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=__webpack_require__(/*! crypto */ "?deb7");return function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}return function(){abort("randomDevice")}}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){var alignedSize=alignMemory(size,16384);var ptr=_malloc(alignedSize);while(size<alignedSize)HEAP8[ptr+size++]=0;return ptr}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){if(address!==0){throw new FS.ErrnoError(28)}if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}}}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,address,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path,allowEmpty){if(path[0]==="/"){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=varargs?SYSCALLS.get():0;var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var structRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}};return errorClass}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function __embind_finalize_value_object(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(function(field){return field.getterReturnType}).concat(fieldRecords.map(function(field){return field.setterArgumentType}));whenDependentTypesAreResolved([structType],fieldTypes,function(fieldTypes){var fields={};fieldRecords.forEach(function(field,i){var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:function(ptr){return getterReturnType["fromWireType"](getter(getterContext,ptr))},write:function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors)}}});return[{name:reg.name,"fromWireType":function(ptr){var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv},"toWireType":function(destructors,o){for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError('Missing field:  "'+fieldName+'"')}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return!!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}var finalizationGroup=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}}function attachFinalizer(handle){if("undefined"===typeof FinalizationGroup){attachFinalizer=function(handle){return handle};return handle}finalizationGroup=new FinalizationGroup(function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;if(!$$.ptr){console.warn("object already deleted: "+$$.ptr)}else{releaseClassHandle($$)}}});attachFinalizer=function(handle){finalizationGroup.register(handle,handle.$$,handle.$$);return handle};detachFinalizer=function(handle){finalizationGroup.unregister(handle.$$)};return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle["delete"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.indexOf("j")!=-1){return dynCallLegacy(sig,ptr,args)}return wasmTable.get(ptr).apply(null,args)}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i]}return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.indexOf("j")!=-1){return getDynCaller(signature,rawFunction)}return wasmTable.get(rawFunction)}var fp=makeDynCaller();if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor];var destructors=[];whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1))}destructors.length=0;args.length=argCount;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1])}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr)};return[]});return[]})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type["fromWireType"](value);return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv},"toWireType":function(destructors,value){return __emval_register(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name.indexOf("unsigned")!=-1;registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return isUnsignedType?value>>>0:value|0},"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join("")}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)}}else{getLength=function(){return value.length}}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16};shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32};shift=2}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value==="string")){throwBindingError("Cannot pass non-string to C++ string type "+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}})}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType))}return impl}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return __emval_register(v)}function _abort(){abort()}function _emscripten_asm_const_int(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)}function _longjmp(env,value){_setThrew(env,value||1);throw"longjmp"}function _emscripten_longjmp(a0,a1){return _longjmp(a0,a1)}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":lang,"_":getExecutableName()};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+"="+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){try{var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _environ_sizes_get(penviron_count,penviron_buf_size){try{var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _exit(status){exit(status)}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _getTempRet0(){return getTempRet0()|0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _setTempRet0($i){setTempRet0($i|0)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr,buf){readAsmConstArgsArray.length=0;var ch;buf>>=2;while(ch=HEAPU8[sigPtr++]){var double=ch<105;if(double&&buf&1)buf++;readAsmConstArgsArray.push(double?HEAPF64[buf++>>1]:HEAP32[buf]);++buf}return readAsmConstArgsArray}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();InternalError=Module["InternalError"]=extendError(Error,"InternalError");embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={"j":___cxa_allocate_exception,"i":___cxa_throw,"K":___localtime_r,"q":___sys_fcntl64,"M":___sys_ioctl,"N":___sys_open,"T":__embind_finalize_value_object,"P":__embind_register_bool,"x":__embind_register_class,"v":__embind_register_class_constructor,"g":__embind_register_class_function,"w":__embind_register_constant,"O":__embind_register_emval,"s":__embind_register_float,"e":__embind_register_function,"h":__embind_register_integer,"f":__embind_register_memory_view,"t":__embind_register_std_string,"n":__embind_register_std_wstring,"V":__embind_register_value_object,"U":__embind_register_value_object_field,"Q":__embind_register_void,"R":__emval_decref,"S":__emval_incref,"u":__emval_take_value,"a":_abort,"o":_emscripten_asm_const_int,"k":_emscripten_longjmp,"F":_emscripten_memcpy_big,"G":_emscripten_resize_heap,"I":_environ_get,"J":_environ_sizes_get,"b":_exit,"r":_fd_close,"L":_fd_read,"E":_fd_seek,"p":_fd_write,"d":_getTempRet0,"y":_gettimeofday,"A":invoke_ii,"B":invoke_iii,"X":invoke_iiii,"l":invoke_vi,"C":invoke_vii,"D":invoke_viii,"m":invoke_viiii,"c":_setTempRet0,"W":_strftime,"H":_strftime_l,"z":_time};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["Z"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["_"]).apply(null,arguments)};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["$"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["aa"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return(___getTypeName=Module["___getTypeName"]=Module["asm"]["ca"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=function(){return(___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=Module["asm"]["da"]).apply(null,arguments)};var __get_tzname=Module["__get_tzname"]=function(){return(__get_tzname=Module["__get_tzname"]=Module["asm"]["ea"]).apply(null,arguments)};var __get_daylight=Module["__get_daylight"]=function(){return(__get_daylight=Module["__get_daylight"]=Module["asm"]["fa"]).apply(null,arguments)};var __get_timezone=Module["__get_timezone"]=function(){return(__get_timezone=Module["__get_timezone"]=Module["asm"]["ga"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["ha"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["ia"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["ja"]).apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){return(dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["ka"]).apply(null,arguments)};var dynCall_viijii=Module["dynCall_viijii"]=function(){return(dynCall_viijii=Module["dynCall_viijii"]=Module["asm"]["la"]).apply(null,arguments)};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){return(dynCall_iiiiij=Module["dynCall_iiiiij"]=Module["asm"]["ma"]).apply(null,arguments)};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){return(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=Module["asm"]["na"]).apply(null,arguments)};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){return(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=Module["asm"]["oa"]).apply(null,arguments)};function invoke_ii(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}Module["FS"]=FS;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime){}else{EXITSTATUS=status;exitRuntime();if(Module["onExit"])Module["onExit"](status);ABORT=true}quit_(status,new ExitStatus(status))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();


  return Module.ready
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./src/ARControllerNFT.ts":
/*!********************************!*\
  !*** ./src/ARControllerNFT.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARControllerNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var ARControllerNFT = /*#__PURE__*/function () {
  function ARControllerNFT(width, height, cameraParam, options) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, ARControllerNFT);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "options", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "id", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "width", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "height", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "image", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "orientation", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "cameraParam", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "cameraId", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "cameraLoaded", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "artoolkitNFT", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "listeners", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "nftMarkers", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "transform_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "marker_transform_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "transformGL_RH", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "videoWidth", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "videoHeight", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "videoSize", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "framepointer", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "framesize", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "dataHeap", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "videoLuma", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "camera_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "videoLumaPointer", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "canvas", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "ctx", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "nftMarkerFound", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "nftMarkerFoundTime", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "nftMarkerCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "defaultMarkerWidth", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "_bwpointer", void 0);

    this.options = _objectSpread(_objectSpread({}, {
      canvas: null,
      orientation: 'landscape'
    }), options);
    this.id = -1;
    this.width = width;
    this.height = height;
    this.image;
    this.orientation = this.options.orientation;
    this.cameraParam = cameraParam;
    this.cameraId = -1;
    this.cameraLoaded = false;
    this.artoolkitNFT;
    this.listeners = {};
    this.nftMarkers = {};
    this.transform_mat = new Float64Array(16);
    this.transformGL_RH = new Float64Array(16);
    this.marker_transform_mat = null;
    this.videoWidth = width;
    this.videoHeight = height;
    this.videoSize = this.videoWidth * this.videoHeight;
    this.framepointer = null;
    this.framesize = null;
    this.dataHeap = null;
    this.videoLuma = null;
    this.camera_mat = null;
    this.videoLumaPointer = null;

    if (this.options.canvas) {
      this.canvas = this.options.canvas;
    } else if (typeof document !== 'undefined') {
      this.canvas = document.createElement('canvas');
    }

    if (this.canvas) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.ctx = this.canvas.getContext('2d');
    } else {
      console.warn('No canvas available');
    }

    this.nftMarkerFound = false;
    this.nftMarkerFoundTime = 0;
    this.nftMarkerCount = 0;
    this._bwpointer = null;
    this.defaultMarkerWidth = 1;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(ARControllerNFT, [{
    key: "process",
    value: function process(image) {
      var result = this.detectMarker(image);

      if (result != 0) {
        console.error('[ARControllerNFT]', 'detectMarker error:', result);
      }

      var k, o;

      for (k in this.nftMarkers) {
        o = this.converter().nftMarkers[k];
        o.inPrevious = o.inCurrent;
        o.inCurrent = false;
      }

      var nftMarkerCount = this.nftMarkerCount;
      this.detectNFTMarker();
      var MARKER_LOST_TIME = 200;

      for (var i = 0; i < nftMarkerCount; i++) {
        var nftMarkerInfo = this.getNFTMarker(i);
        var markerType = _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__.default.NFT_MARKER;

        if (nftMarkerInfo.found) {
          this.nftMarkerFound = i;
          this.nftMarkerFoundTime = Date.now();
          var visible = this.trackNFTMarkerId(i);
          visible.matrix.set(nftMarkerInfo.pose);
          visible.inCurrent = true;
          this.transMatToGLMat(visible.matrix, this.transform_mat);
          this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);
          this.dispatchEvent({
            name: 'getNFTMarker',
            target: this,
            data: {
              index: i,
              type: markerType,
              marker: nftMarkerInfo,
              matrix: this.transform_mat,
              matrixGL_RH: this.transformGL_RH
            }
          });
        } else if (self.nftMarkerFound === i) {
          if (Date.now() - this.nftMarkerFoundTime > MARKER_LOST_TIME) {
            this.nftMarkerFound = false;
            this.dispatchEvent({
              name: 'lostNFTMarker',
              target: this,
              data: {
                index: i,
                type: markerType,
                marker: nftMarkerInfo,
                matrix: this.transform_mat,
                matrixGL_RH: this.transformGL_RH
              }
            });
          }

          ;
        }
      }
    }
  }, {
    key: "detectNFTMarker",
    value: function detectNFTMarker() {
      this.artoolkitNFT.detectNFTMarker(this.id);
    }
  }, {
    key: "trackNFTMarkerId",
    value: function trackNFTMarkerId(id, markerWidth) {
      var obj = this.converter().nftMarkers[id];

      if (!obj) {
        this.converter().nftMarkers[id] = obj = {
          inPrevious: false,
          inCurrent: false,
          matrix: new Float64Array(12),
          matrixGL_RH: new Float64Array(12),
          markerWidth: markerWidth || this.defaultMarkerWidth
        };
      }

      if (markerWidth) {
        obj.markerWidth = markerWidth;
      }

      return obj;
    }
  }, {
    key: "detectMarker",
    value: function detectMarker(image) {
      if (this._copyImageToHeap(image)) {
        return this.artoolkitNFT.detectMarker(this.id);
      }

      return -99;
    }
  }, {
    key: "getNFTMarker",
    value: function getNFTMarker(markerIndex) {
      if (0 === this.artoolkitNFT.getNFTMarker(this.id, markerIndex)) {
        return this.artoolkitNFT.NFTMarkerInfo;
      }
    }
  }, {
    key: "getNFTData",
    value: function getNFTData() {
      return this.artoolkitNFT.getNFTData(this.id);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      if (!this.converter().listeners[name]) {
        this.converter().listeners[name] = [];
      }

      this.converter().listeners[name].push(callback);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(name, callback) {
      if (this.converter().listeners[name]) {
        var index = this.converter().listeners[name].indexOf(callback);

        if (index > -1) {
          this.converter().listeners[name].splice(index, 1);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      var listeners = this.converter().listeners[event.name];

      if (listeners) {
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].call(this, event);
        }
      }
    }
  }, {
    key: "debugSetup",
    value: function debugSetup() {
      if (typeof document === 'undefined') {
        console.log('debugSetup() currently only supports Browser environments');
        return;
      }

      document.body.appendChild(this.canvas);
      this.setDebugMode(true);
      this._bwpointer = this.getProcessingImage();
    }
  }, {
    key: "transMatToGLMat",
    value: function transMatToGLMat(transMat, glMat, scale) {
      if (glMat == undefined) {
        glMat = new Float64Array(16);
      }

      glMat[0 + 0 * 4] = transMat[0];
      glMat[0 + 1 * 4] = transMat[1];
      glMat[0 + 2 * 4] = transMat[2];
      glMat[0 + 3 * 4] = transMat[3];
      glMat[1 + 0 * 4] = transMat[4];
      glMat[1 + 1 * 4] = transMat[5];
      glMat[1 + 2 * 4] = transMat[6];
      glMat[1 + 3 * 4] = transMat[7];
      glMat[2 + 0 * 4] = transMat[8];
      glMat[2 + 1 * 4] = transMat[9];
      glMat[2 + 2 * 4] = transMat[10];
      glMat[2 + 3 * 4] = transMat[11];
      glMat[3 + 0 * 4] = 0.0;
      glMat[3 + 1 * 4] = 0.0;
      glMat[3 + 2 * 4] = 0.0;
      glMat[3 + 3 * 4] = 1.0;

      if (scale != undefined && scale !== 0.0) {
        glMat[12] *= scale;
        glMat[13] *= scale;
        glMat[14] *= scale;
      }

      return glMat;
    }
  }, {
    key: "arglCameraViewRHf",
    value: function arglCameraViewRHf(glMatrix, glRhMatrix, scale) {
      var m_modelview;

      if (glRhMatrix == undefined) {
        m_modelview = new Float64Array(16);
      } else {
        m_modelview = glRhMatrix;
      }

      m_modelview[0] = glMatrix[0];
      m_modelview[4] = glMatrix[4];
      m_modelview[8] = glMatrix[8];
      m_modelview[12] = glMatrix[12];
      m_modelview[1] = -glMatrix[1];
      m_modelview[5] = -glMatrix[5];
      m_modelview[9] = -glMatrix[9];
      m_modelview[13] = -glMatrix[13];
      m_modelview[2] = -glMatrix[2];
      m_modelview[6] = -glMatrix[6];
      m_modelview[10] = -glMatrix[10];
      m_modelview[14] = -glMatrix[14];
      m_modelview[3] = 0;
      m_modelview[7] = 0;
      m_modelview[11] = 0;
      m_modelview[15] = 1;

      if (scale != undefined && scale !== 0.0) {
        m_modelview[12] *= scale;
        m_modelview[13] *= scale;
        m_modelview[14] *= scale;
      }

      glRhMatrix = m_modelview;
      return glRhMatrix;
    }
  }, {
    key: "getTransformationMatrix",
    value: function getTransformationMatrix() {
      return this.transform_mat;
    }
  }, {
    key: "getCameraMatrix",
    value: function getCameraMatrix() {
      return this.camera_mat;
    }
  }, {
    key: "setDebugMode",
    value: function setDebugMode(mode) {
      return this.artoolkitNFT.setDebugMode(this.id, mode);
    }
  }, {
    key: "getDebugMode",
    value: function getDebugMode() {
      return this.artoolkitNFT.getDebugMode(this.id);
    }
  }, {
    key: "getProcessingImage",
    value: function getProcessingImage() {
      return this.artoolkitNFT.getProcessingImage(this.id);
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(mode) {
      return this.artoolkitNFT.setLogLevel(mode);
    }
  }, {
    key: "getLogLevel",
    value: function getLogLevel() {
      return this.artoolkitNFT.getLogLevel();
    }
  }, {
    key: "setProjectionNearPlane",
    value: function setProjectionNearPlane(value) {
      return this.artoolkitNFT.setProjectionNearPlane(this.id, value);
    }
  }, {
    key: "getProjectionNearPlane",
    value: function getProjectionNearPlane() {
      return this.artoolkitNFT.getProjectionNearPlane(this.id);
    }
  }, {
    key: "setProjectionFarPlane",
    value: function setProjectionFarPlane(value) {
      return this.artoolkitNFT.setProjectionFarPlane(this.id, value);
    }
  }, {
    key: "getProjectionFarPlane",
    value: function getProjectionFarPlane() {
      return this.artoolkitNFT.getProjectionFarPlane(this.id);
    }
  }, {
    key: "setThresholdMode",
    value: function setThresholdMode(mode) {
      return this.artoolkitNFT.setThresholdMode(this.id, mode);
    }
  }, {
    key: "getThresholdMode",
    value: function getThresholdMode() {
      return this.artoolkitNFT.getThresholdMode(this.id);
    }
  }, {
    key: "setThreshold",
    value: function setThreshold(threshold) {
      return this.artoolkitNFT.setThreshold(this.id, threshold);
    }
  }, {
    key: "getThreshold",
    value: function getThreshold() {
      return this.artoolkitNFT.getThreshold(this.id);
    }
  }, {
    key: "loadNFTMarker",
    value: function () {
      var _loadNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee(urlOrData) {
        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.artoolkitNFT.addNFTMarker(this.id, urlOrData);

              case 2:
                nft = _context.sent;
                this.nftMarkerCount = nft.id + 1;
                return _context.abrupt("return", nft);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadNFTMarker(_x) {
        return _loadNFTMarker.apply(this, arguments);
      }

      return loadNFTMarker;
    }()
  }, {
    key: "loadNFTMarker2",
    value: function () {
      var _loadNFTMarker2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData) {
        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, urlOrData);

              case 2:
                nft = _context2.sent;
                return _context2.abrupt("return", nft);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadNFTMarker2(_x2) {
        return _loadNFTMarker2.apply(this, arguments);
      }

      return loadNFTMarker2;
    }()
  }, {
    key: "setImageProcMode",
    value: function setImageProcMode(mode) {
      return this.artoolkitNFT.setImageProcMode(this.id, mode);
    }
  }, {
    key: "getImageProcMode",
    value: function getImageProcMode() {
      return this.artoolkitNFT.getImageProcMode(this.id);
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {
        var _this = this;

        var params;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__.default().init();

              case 2:
                this.artoolkitNFT = _context3.sent;
                console.log('[ARControllerNFT]', 'ARToolkitNFT initialized');
                _context3.next = 6;
                return this.artoolkitNFT.loadCamera(this.cameraParam);

              case 6:
                this.cameraId = _context3.sent;
                console.log('[ARControllerNFT]', 'Camera params loaded with ID', this.cameraId);
                this.id = this.artoolkitNFT.setup(this.width, this.height, this.cameraId);
                console.log('[ARControllerNFT]', 'Got ID from setup', this.id);

                this._initNFT();

                params = this.artoolkitNFT.frameMalloc;
                this.framepointer = params.framepointer;
                this.framesize = params.framesize;
                this.videoLumaPointer = params.videoLumaPointer;
                this.dataHeap = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.framepointer, this.framesize);
                this.videoLuma = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.videoLumaPointer, this.framesize / 4);
                this.camera_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.camera, 16);
                this.marker_transform_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.transform, 12);
                this.setProjectionNearPlane(0.1);
                this.setProjectionFarPlane(1000);
                setTimeout(function () {
                  _this.dispatchEvent({
                    name: 'load',
                    target: _this
                  });
                }, 1);
                return _context3.abrupt("return", this);

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _initialize() {
        return _initialize2.apply(this, arguments);
      }

      return _initialize;
    }()
  }, {
    key: "_initNFT",
    value: function _initNFT() {
      this.artoolkitNFT.setupAR2(this.id);
    }
  }, {
    key: "_copyImageToHeap",
    value: function _copyImageToHeap(sourceImage) {
      if (!sourceImage) {
        sourceImage = this.image;
      }

      var data;

      if (sourceImage.data) {
        data = sourceImage.data;
      } else {
        this.ctx.save();

        if (this.orientation === 'portrait') {
          this.ctx.translate(this.canvas.width, 0);
          this.ctx.rotate(Math.PI / 2);
          this.ctx.drawImage(sourceImage, 0, 0, this.canvas.height, this.canvas.width);
        } else {
          this.ctx.drawImage(sourceImage, 0, 0, this.canvas.width, this.canvas.height);
        }

        this.ctx.restore();
        var imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        data = imageData.data;
      }

      if (this.videoLuma) {
        var q = 0;

        for (var p = 0; p < this.videoSize; p++) {
          var r = data[q + 0],
              g = data[q + 1],
              b = data[q + 2];
          this.videoLuma[p] = r + r + r + b + g + g + g + g >> 3;
          q += 4;
        }
      }

      if (this.dataHeap) {
        this.dataHeap.set(data);
        return true;
      }

      return false;
    }
  }], [{
    key: "initWithDimensions",
    value: function () {
      var _initWithDimensions = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(width, height, cameraParam, options) {
        var arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                arControllerNFT = new ARControllerNFT(width, height, cameraParam, options);
                _context4.next = 3;
                return arControllerNFT._initialize();

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function initWithDimensions(_x3, _x4, _x5, _x6) {
        return _initWithDimensions.apply(this, arguments);
      }

      return initWithDimensions;
    }()
  }, {
    key: "initWithImage",
    value: function () {
      var _initWithImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(image, cameraParam, options) {
        var width, height, arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                width = image.videoWidth || image.width;
                height = image.videoHeight || image.height;
                arControllerNFT = new ARControllerNFT(width, height, cameraParam, options);
                arControllerNFT.image = image;
                _context5.next = 6;
                return arControllerNFT._initialize();

              case 6:
                return _context5.abrupt("return", _context5.sent);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function initWithImage(_x7, _x8, _x9) {
        return _initWithImage.apply(this, arguments);
      }

      return initWithImage;
    }()
  }]);

  return ARControllerNFT;
}();



/***/ }),

/***/ "./src/ARToolkitNFT.ts":
/*!*****************************!*\
  !*** ./src/ARToolkitNFT.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ModuleLoader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ModuleLoader */ "./src/ModuleLoader.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");







var UNKNOWN_MARKER = -1;
var NFT_MARKER = 0;

var ARToolkitNFT = /*#__PURE__*/function () {
  function ARToolkitNFT() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, ARToolkitNFT);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "instance", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "markerNFTCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "cameraCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "version", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setup", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "teardown", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setupAR2", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setDebugMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getDebugMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getProcessingImage", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "detectMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "detectNFTMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getNFTMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getNFTData", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setLogLevel", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getLogLevel", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "frameMalloc", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "NFTMarkerInfo", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setProjectionNearPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getProjectionNearPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setProjectionFarPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getProjectionFarPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setThresholdMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getThresholdMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setThreshold", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getThreshold", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "setImageProcMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.default)(this, "getImageProcMode", void 0);

    this.instance;
    this.markerNFTCount = 0;
    this.cameraCount = 0;
    this.version = '0.9.1';
    console.info('ARToolkitNFT ', this.version);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(ARToolkitNFT, [{
    key: "init",
    value: function () {
      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee() {
        var runtime, scope;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _ModuleLoader__WEBPACK_IMPORTED_MODULE_5__.default.init.catch(function (err) {
                  console.log(err);
                  return Promise.reject(err);
                }).then(function (resolve) {
                  return resolve;
                });

              case 2:
                runtime = _context.sent;
                this.instance = runtime.instance;

                this._decorate();

                scope = typeof window !== 'undefined' ? window : __webpack_require__.g;
                scope.artoolkitNFT = this;
                return _context.abrupt("return", this);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "_decorate",
    value: function _decorate() {
      var _this = this;

      ['setup', 'teardown', 'setupAR2', 'setLogLevel', 'getLogLevel', 'setDebugMode', 'getDebugMode', 'getProcessingImage', 'detectMarker', 'detectNFTMarker', 'getNFTMarker', 'getNFTData', 'frameMalloc', 'NFTMarkerInfo', 'setProjectionNearPlane', 'getProjectionNearPlane', 'setProjectionFarPlane', 'getProjectionFarPlane', 'setThresholdMode', 'getThresholdMode', 'setThreshold', 'getThreshold', 'setImageProcMode', 'getImageProcMode', 'StringList'].forEach(function (method) {
        _this.converter()[method] = _this.instance[method];
      });

      for (var co in this.instance) {
        if (co.match(/^AR/)) {
          this.converter()[co] = this.instance[co];
        }
      }
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "loadCamera",
    value: function () {
      var _loadCamera = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData) {
        var target, data;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                target = '/camera_param_' + this.cameraCount++;

                if (!(urlOrData instanceof Uint8Array)) {
                  _context2.next = 5;
                  break;
                }

                data = urlOrData;
                _context2.next = 14;
                break;

              case 5:
                _context2.prev = 5;
                _context2.next = 8;
                return _Utils__WEBPACK_IMPORTED_MODULE_6__.default.fetchRemoteData(urlOrData);

              case 8:
                data = _context2.sent;
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](5);
                throw _context2.t0;

              case 14:
                this._storeDataFile(data, target);

                return _context2.abrupt("return", this.instance._loadCamera(target));

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 11]]);
      }));

      function loadCamera(_x) {
        return _loadCamera.apply(this, arguments);
      }

      return loadCamera;
    }()
  }, {
    key: "addNFTMarker",
    value: function () {
      var _addNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(arId, url) {
        var _this2 = this;

        var targetPrefix, extensions, storeMarker, promises;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                targetPrefix = '/markerNFT_' + this.markerNFTCount++;
                extensions = ['fset', 'iset', 'fset3'];

                storeMarker = /*#__PURE__*/function () {
                  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3(ext) {
                    var fullUrl, target, data;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            fullUrl = url + '.' + ext;
                            target = targetPrefix + '.' + ext;
                            _context3.next = 4;
                            return _Utils__WEBPACK_IMPORTED_MODULE_6__.default.fetchRemoteData(fullUrl);

                          case 4:
                            data = _context3.sent;

                            _this2._storeDataFile(data, target);

                          case 6:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));

                  return function storeMarker(_x4) {
                    return _ref.apply(this, arguments);
                  };
                }();

                promises = extensions.map(storeMarker, this);
                _context4.next = 6;
                return Promise.all(promises);

              case 6:
                return _context4.abrupt("return", this.instance._addNFTMarker(arId, targetPrefix));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function addNFTMarker(_x2, _x3) {
        return _addNFTMarker.apply(this, arguments);
      }

      return addNFTMarker;
    }()
  }, {
    key: "addNFTMarkers",
    value: function () {
      var _addNFTMarkers = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee6(arId, urls) {
        var _this3 = this;

        var targetPrefix, extensions, out, prefixes, vec, _loop, i;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee6$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                targetPrefix = '/markerNFT_' + this.markerNFTCount++;
                extensions = ['fset', 'iset', 'fset3'];
                prefixes = [];
                _loop = /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _loop() {
                  var url, storeMarker, promises;
                  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _loop$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          console.log('inside for cycle');
                          url = urls[i];
                          console.log(url);

                          storeMarker = /*#__PURE__*/function () {
                            var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(ext) {
                              var fullUrl, target, data, markerIds, _i;

                              return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {
                                while (1) {
                                  switch (_context5.prev = _context5.next) {
                                    case 0:
                                      fullUrl = url + '.' + ext;
                                      target = targetPrefix + '.' + ext;
                                      _context5.next = 4;
                                      return _Utils__WEBPACK_IMPORTED_MODULE_6__.default.fetchRemoteData(fullUrl);

                                    case 4:
                                      data = _context5.sent;

                                      _this3._storeDataFile(data, target);

                                      vec = new _this3.instance.StringList();
                                      console.log(vec);
                                      markerIds = [];

                                      for (_i = 0; _i < prefixes.length; _i++) {
                                        vec.push_back(prefixes[_i]);
                                      }

                                      prefixes.push(targetPrefix);
                                      console.log(vec);

                                    case 12:
                                    case "end":
                                      return _context5.stop();
                                  }
                                }
                              }, _callee5);
                            }));

                            return function storeMarker(_x7) {
                              return _ref2.apply(this, arguments);
                            };
                          }();

                          promises = extensions.map(storeMarker, _this3);
                          _context6.next = 7;
                          return Promise.all(promises);

                        case 7:
                          out = _this3.instance._addNFTMarkers(arId, vec);

                        case 8:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _loop);
                });
                i = 0;

              case 5:
                if (!(i < urls.length)) {
                  _context7.next = 10;
                  break;
                }

                return _context7.delegateYield(_loop(), "t0", 7);

              case 7:
                i++;
                _context7.next = 5;
                break;

              case 10:
                return _context7.abrupt("return", out);

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee6, this);
      }));

      function addNFTMarkers(_x5, _x6) {
        return _addNFTMarkers.apply(this, arguments);
      }

      return addNFTMarkers;
    }()
  }, {
    key: "_storeDataFile",
    value: function _storeDataFile(data, target) {
      this.instance.FS.writeFile(target, data, {
        encoding: 'binary'
      });
    }
  }], [{
    key: "UNKNOWN_MARKER",
    get: function get() {
      return UNKNOWN_MARKER;
    }
  }, {
    key: "NFT_MARKER",
    get: function get() {
      return NFT_MARKER;
    }
  }]);

  return ARToolkitNFT;
}();



/***/ }),

/***/ "./src/ModuleLoader.ts":
/*!*****************************!*\
  !*** ./src/ModuleLoader.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../build/artoolkitNFT_ES6_wasm */ "./build/artoolkitNFT_ES6_wasm.js");

var ModuleLoader = {
  init: new Promise(function (resolve) {
    (0,_build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_0__.default)({
      onRuntimeInitialized: function onRuntimeInitialized() {
        resolve({
          instance: this
        });
      }
    });
  })
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModuleLoader);

/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Utils)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);






var Utils = /*#__PURE__*/function () {
  function Utils() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, Utils);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(Utils, null, [{
    key: "fetchRemoteData",
    value: function () {
      var _fetchRemoteData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(url) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: 'arraybuffer'
                });

              case 3:
                response = _context.sent;
                return _context.abrupt("return", new Uint8Array(response.data));

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                throw _context.t0;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));

      function fetchRemoteData(_x) {
        return _fetchRemoteData.apply(this, arguments);
      }

      return fetchRemoteData;
    }()
  }, {
    key: "fetchRemoteDataCallback",
    value: function () {
      var _fetchRemoteDataCallback = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(url, callback) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: 'arraybuffer'
                }).then(function (response) {
                  var data = new Uint8Array(response.data);
                  console.log(data);
                  callback(response);
                });

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", response);

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                throw _context2.t0;

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 7]]);
      }));

      function fetchRemoteDataCallback(_x2, _x3) {
        return _fetchRemoteDataCallback.apply(this, arguments);
      }

      return fetchRemoteDataCallback;
    }()
  }, {
    key: "string2Uint8Data",
    value: function string2Uint8Data(string) {
      var data = new Uint8Array(string.length);

      for (var i = 0; i < data.length; i++) {
        data[i] = string.charCodeAt(i) & 0xff;
      }

      return data;
    }
  }]);

  return Utils;
}();



/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "?deb7":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4dea":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f955":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");
/* harmony import */ var _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ARControllerNFT */ "./src/ARControllerNFT.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ARToolkitNFT: _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__.default,
  ARControllerNFT: _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__.default
});
})();

__webpack_exports__ = __webpack_exports__.default;
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL2J1aWxkL2FydG9vbGtpdE5GVF9FUzZfd2FzbS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9zcmMvQVJDb250cm9sbGVyTkZULnRzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL3NyYy9BUlRvb2xraXRORlQudHMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vc3JjL01vZHVsZUxvYWRlci50cyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9zcmMvVXRpbHMudHMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvaWdub3JlZHwvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvd2ViYXJraXQtb3JnL2pzYXJ0b29sa2l0TkZUL2J1aWxkfGNyeXB0byIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvaWdub3JlZHwvaG9tZS93YWx0ZXIva2Fsd2FsdC1naXRodWIvd2ViYXJraXQtb3JnL2pzYXJ0b29sa2l0TkZUL2J1aWxkfGZzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC9pZ25vcmVkfC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi93ZWJhcmtpdC1vcmcvanNhcnRvb2xraXRORlQvYnVpbGR8cGF0aCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0FSVG9vbGtpdE5GVC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPOzs7Ozs7Ozs7Ozs7Ozs7OztBQ1RBO0FBQ0E7QUFDQSxNQUFNLElBQWlDLDZCQUE2QixVQUFVO0FBQzlFO0FBQ0E7QUFDQTs7QUFFQSxpREFBaUQsMkNBQTJDLHFEQUFxRCw0QkFBNEIsMEJBQTBCLEVBQUUsdUJBQXVCLFFBQVEsbUJBQW1CLCtCQUEr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QUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLENBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsQ0FBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLENBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsQ0FBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLENBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsQ0FBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLEVBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsRUFBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLEdBQW5CO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsR0FBbkI7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixHQUFuQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLEdBQW5COztBQUVBLFVBQUksS0FBSyxJQUFJ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LE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQyxrQkFBa0I7QUFDbkQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsS0FBMEIsb0JBQW9CLENBQUU7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQzN1QkEsZTs7Ozs7Ozs7OztBQ0FBLGU7Ozs7Ozs7Ozs7QUNBQSxlOzs7Ozs7VUNBQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsZ0NBQWdDLFlBQVk7V0FDNUM7V0FDQSxFOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0Esd0NBQXdDLHlDQUF5QztXQUNqRjtXQUNBO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEVBQUU7V0FDRjtXQUNBO1dBQ0EsQ0FBQyxJOzs7OztXQ1BELHdGOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHNEQUFzRCxrQkFBa0I7V0FDeEU7V0FDQSwrQ0FBK0MsY0FBYztXQUM3RCxFOzs7Ozs7Ozs7Ozs7Ozs7OztBQzZCQTtBQUNBO0FBRUEsaUVBQWU7QUFDYixjQUFZLEVBQVosa0RBRGE7QUFDQyxpQkFBZSxFQUFmLHFEQUFlO0FBRGhCLENBQWYsRSIsImZpbGUiOiJBUlRvb2xraXRORlQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJBUlRvb2xraXRORlRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiQVJUb29sa2l0TkZUXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIlxudmFyIE1vZHVsZSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSAndW5kZWZpbmVkJykgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgcmV0dXJuIChcbmZ1bmN0aW9uKE1vZHVsZSkge1xuICBNb2R1bGUgPSBNb2R1bGUgfHwge307XG5cbnZhciBNb2R1bGU9dHlwZW9mIE1vZHVsZSE9PVwidW5kZWZpbmVkXCI/TW9kdWxlOnt9O3ZhciByZWFkeVByb21pc2VSZXNvbHZlLHJlYWR5UHJvbWlzZVJlamVjdDtNb2R1bGVbXCJyZWFkeVwiXT1uZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7cmVhZHlQcm9taXNlUmVzb2x2ZT1yZXNvbHZlO3JlYWR5UHJvbWlzZVJlamVjdD1yZWplY3R9KTt2YXIgbW9kdWxlT3ZlcnJpZGVzPXt9O3ZhciBrZXk7Zm9yKGtleSBpbiBNb2R1bGUpe2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShrZXkpKXttb2R1bGVPdmVycmlkZXNba2V5XT1Nb2R1bGVba2V5XX19dmFyIGFyZ3VtZW50c189W107dmFyIHRoaXNQcm9ncmFtPVwiLi90aGlzLnByb2dyYW1cIjt2YXIgcXVpdF89ZnVuY3Rpb24oc3RhdHVzLHRvVGhyb3cpe3Rocm93IHRvVGhyb3d9O3ZhciBFTlZJUk9OTUVOVF9JU19XRUI9ZmFsc2U7dmFyIEVOVklST05NRU5UX0lTX1dPUktFUj1mYWxzZTt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT1mYWxzZTt2YXIgRU5WSVJPTk1FTlRfSVNfU0hFTEw9ZmFsc2U7RU5WSVJPTk1FTlRfSVNfV0VCPXR5cGVvZiB3aW5kb3c9PT1cIm9iamVjdFwiO0VOVklST05NRU5UX0lTX1dPUktFUj10eXBlb2YgaW1wb3J0U2NyaXB0cz09PVwiZnVuY3Rpb25cIjtFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPT09XCJzdHJpbmdcIjtFTlZJUk9OTUVOVF9JU19TSEVMTD0hRU5WSVJPTk1FTlRfSVNfV0VCJiYhRU5WSVJPTk1FTlRfSVNfTk9ERSYmIUVOVklST05NRU5UX0lTX1dPUktFUjt2YXIgc2NyaXB0RGlyZWN0b3J5PVwiXCI7ZnVuY3Rpb24gbG9jYXRlRmlsZShwYXRoKXtpZihNb2R1bGVbXCJsb2NhdGVGaWxlXCJdKXtyZXR1cm4gTW9kdWxlW1wibG9jYXRlRmlsZVwiXShwYXRoLHNjcmlwdERpcmVjdG9yeSl9cmV0dXJuIHNjcmlwdERpcmVjdG9yeStwYXRofXZhciByZWFkXyxyZWFkQXN5bmMscmVhZEJpbmFyeSxzZXRXaW5kb3dUaXRsZTt2YXIgbm9kZUZTO3ZhciBub2RlUGF0aDtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3NjcmlwdERpcmVjdG9yeT1yZXF1aXJlKFwicGF0aFwiKS5kaXJuYW1lKHNjcmlwdERpcmVjdG9yeSkrXCIvXCJ9ZWxzZXtzY3JpcHREaXJlY3Rvcnk9X19kaXJuYW1lK1wiL1wifXJlYWRfPWZ1bmN0aW9uIHNoZWxsX3JlYWQoZmlsZW5hbWUsYmluYXJ5KXt2YXIgcmV0PXRyeVBhcnNlQXNEYXRhVVJJKGZpbGVuYW1lKTtpZihyZXQpe3JldHVybiBiaW5hcnk/cmV0OnJldC50b1N0cmluZygpfWlmKCFub2RlRlMpbm9kZUZTPXJlcXVpcmUoXCJmc1wiKTtpZighbm9kZVBhdGgpbm9kZVBhdGg9cmVxdWlyZShcInBhdGhcIik7ZmlsZW5hbWU9bm9kZVBhdGhbXCJub3JtYWxpemVcIl0oZmlsZW5hbWUpO3JldHVybiBub2RlRlNbXCJyZWFkRmlsZVN5bmNcIl0oZmlsZW5hbWUsYmluYXJ5P251bGw6XCJ1dGY4XCIpfTtyZWFkQmluYXJ5PWZ1bmN0aW9uIHJlYWRCaW5hcnkoZmlsZW5hbWUpe3ZhciByZXQ9cmVhZF8oZmlsZW5hbWUsdHJ1ZSk7aWYoIXJldC5idWZmZXIpe3JldD1uZXcgVWludDhBcnJheShyZXQpfWFzc2VydChyZXQuYnVmZmVyKTtyZXR1cm4gcmV0fTtpZihwcm9jZXNzW1wiYXJndlwiXS5sZW5ndGg+MSl7dGhpc1Byb2dyYW09cHJvY2Vzc1tcImFyZ3ZcIl1bMV0ucmVwbGFjZSgvXFxcXC9nLFwiL1wiKX1hcmd1bWVudHNfPXByb2Nlc3NbXCJhcmd2XCJdLnNsaWNlKDIpO3Byb2Nlc3NbXCJvblwiXShcInVuY2F1Z2h0RXhjZXB0aW9uXCIsZnVuY3Rpb24oZXgpe2lmKCEoZXggaW5zdGFuY2VvZiBFeGl0U3RhdHVzKSl7dGhyb3cgZXh9fSk7cHJvY2Vzc1tcIm9uXCJdKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsYWJvcnQpO3F1aXRfPWZ1bmN0aW9uKHN0YXR1cyl7cHJvY2Vzc1tcImV4aXRcIl0oc3RhdHVzKX07TW9kdWxlW1wiaW5zcGVjdFwiXT1mdW5jdGlvbigpe3JldHVyblwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIn19ZWxzZSBpZihFTlZJUk9OTUVOVF9JU19TSEVMTCl7aWYodHlwZW9mIHJlYWQhPVwidW5kZWZpbmVkXCIpe3JlYWRfPWZ1bmN0aW9uIHNoZWxsX3JlYWQoZil7dmFyIGRhdGE9dHJ5UGFyc2VBc0RhdGFVUkkoZik7aWYoZGF0YSl7cmV0dXJuIGludEFycmF5VG9TdHJpbmcoZGF0YSl9cmV0dXJuIHJlYWQoZil9fXJlYWRCaW5hcnk9ZnVuY3Rpb24gcmVhZEJpbmFyeShmKXt2YXIgZGF0YTtkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKGYpO2lmKGRhdGEpe3JldHVybiBkYXRhfWlmKHR5cGVvZiByZWFkYnVmZmVyPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihmKSl9ZGF0YT1yZWFkKGYsXCJiaW5hcnlcIik7YXNzZXJ0KHR5cGVvZiBkYXRhPT09XCJvYmplY3RcIik7cmV0dXJuIGRhdGF9O2lmKHR5cGVvZiBzY3JpcHRBcmdzIT1cInVuZGVmaW5lZFwiKXthcmd1bWVudHNfPXNjcmlwdEFyZ3N9ZWxzZSBpZih0eXBlb2YgYXJndW1lbnRzIT1cInVuZGVmaW5lZFwiKXthcmd1bWVudHNfPWFyZ3VtZW50c31pZih0eXBlb2YgcXVpdD09PVwiZnVuY3Rpb25cIil7cXVpdF89ZnVuY3Rpb24oc3RhdHVzKXtxdWl0KHN0YXR1cyl9fWlmKHR5cGVvZiBwcmludCE9PVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjb25zb2xlPT09XCJ1bmRlZmluZWRcIiljb25zb2xlPXt9O2NvbnNvbGUubG9nPXByaW50O2NvbnNvbGUud2Fybj1jb25zb2xlLmVycm9yPXR5cGVvZiBwcmludEVyciE9PVwidW5kZWZpbmVkXCI/cHJpbnRFcnI6cHJpbnR9fWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpe2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7c2NyaXB0RGlyZWN0b3J5PXNlbGYubG9jYXRpb24uaHJlZn1lbHNlIGlmKHR5cGVvZiBkb2N1bWVudCE9PVwidW5kZWZpbmVkXCImJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQpe3NjcmlwdERpcmVjdG9yeT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31pZihfc2NyaXB0RGlyKXtzY3JpcHREaXJlY3Rvcnk9X3NjcmlwdERpcn1pZihzY3JpcHREaXJlY3RvcnkuaW5kZXhPZihcImJsb2I6XCIpIT09MCl7c2NyaXB0RGlyZWN0b3J5PXNjcmlwdERpcmVjdG9yeS5zdWJzdHIoMCxzY3JpcHREaXJlY3RvcnkubGFzdEluZGV4T2YoXCIvXCIpKzEpfWVsc2V7c2NyaXB0RGlyZWN0b3J5PVwiXCJ9e3JlYWRfPWZ1bmN0aW9uKHVybCl7dHJ5e3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIuc2VuZChudWxsKTtyZXR1cm4geGhyLnJlc3BvbnNlVGV4dH1jYXRjaChlcnIpe3ZhciBkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKHVybCk7aWYoZGF0YSl7cmV0dXJuIGludEFycmF5VG9TdHJpbmcoZGF0YSl9dGhyb3cgZXJyfX07aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtyZWFkQmluYXJ5PWZ1bmN0aW9uKHVybCl7dHJ5e3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKX1jYXRjaChlcnIpe3ZhciBkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKHVybCk7aWYoZGF0YSl7cmV0dXJuIGRhdGF9dGhyb3cgZXJyfX19cmVhZEFzeW5jPWZ1bmN0aW9uKHVybCxvbmxvYWQsb25lcnJvcil7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsdHJ1ZSk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7eGhyLm9ubG9hZD1mdW5jdGlvbigpe2lmKHhoci5zdGF0dXM9PTIwMHx8eGhyLnN0YXR1cz09MCYmeGhyLnJlc3BvbnNlKXtvbmxvYWQoeGhyLnJlc3BvbnNlKTtyZXR1cm59dmFyIGRhdGE9dHJ5UGFyc2VBc0RhdGFVUkkodXJsKTtpZihkYXRhKXtvbmxvYWQoZGF0YS5idWZmZXIpO3JldHVybn1vbmVycm9yKCl9O3hoci5vbmVycm9yPW9uZXJyb3I7eGhyLnNlbmQobnVsbCl9fXNldFdpbmRvd1RpdGxlPWZ1bmN0aW9uKHRpdGxlKXtkb2N1bWVudC50aXRsZT10aXRsZX19ZWxzZXt9dmFyIG91dD1Nb2R1bGVbXCJwcmludFwiXXx8Y29uc29sZS5sb2cuYmluZChjb25zb2xlKTt2YXIgZXJyPU1vZHVsZVtcInByaW50RXJyXCJdfHxjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtmb3Ioa2V5IGluIG1vZHVsZU92ZXJyaWRlcyl7aWYobW9kdWxlT3ZlcnJpZGVzLmhhc093blByb3BlcnR5KGtleSkpe01vZHVsZVtrZXldPW1vZHVsZU92ZXJyaWRlc1trZXldfX1tb2R1bGVPdmVycmlkZXM9bnVsbDtpZihNb2R1bGVbXCJhcmd1bWVudHNcIl0pYXJndW1lbnRzXz1Nb2R1bGVbXCJhcmd1bWVudHNcIl07aWYoTW9kdWxlW1widGhpc1Byb2dyYW1cIl0pdGhpc1Byb2dyYW09TW9kdWxlW1widGhpc1Byb2dyYW1cIl07aWYoTW9kdWxlW1wicXVpdFwiXSlxdWl0Xz1Nb2R1bGVbXCJxdWl0XCJdO3ZhciBTVEFDS19BTElHTj0xNjtmdW5jdGlvbiBhbGlnbk1lbW9yeShzaXplLGZhY3Rvcil7aWYoIWZhY3RvcilmYWN0b3I9U1RBQ0tfQUxJR047cmV0dXJuIE1hdGguY2VpbChzaXplL2ZhY3RvcikqZmFjdG9yfXZhciB0ZW1wUmV0MD0wO3ZhciBzZXRUZW1wUmV0MD1mdW5jdGlvbih2YWx1ZSl7dGVtcFJldDA9dmFsdWV9O3ZhciBnZXRUZW1wUmV0MD1mdW5jdGlvbigpe3JldHVybiB0ZW1wUmV0MH07dmFyIHdhc21CaW5hcnk7aWYoTW9kdWxlW1wid2FzbUJpbmFyeVwiXSl3YXNtQmluYXJ5PU1vZHVsZVtcIndhc21CaW5hcnlcIl07dmFyIG5vRXhpdFJ1bnRpbWU9TW9kdWxlW1wibm9FeGl0UnVudGltZVwiXXx8dHJ1ZTtpZih0eXBlb2YgV2ViQXNzZW1ibHkhPT1cIm9iamVjdFwiKXthYm9ydChcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIil9dmFyIHdhc21NZW1vcnk7dmFyIEFCT1JUPWZhbHNlO3ZhciBFWElUU1RBVFVTO2Z1bmN0aW9uIGFzc2VydChjb25kaXRpb24sdGV4dCl7aWYoIWNvbmRpdGlvbil7YWJvcnQoXCJBc3NlcnRpb24gZmFpbGVkOiBcIit0ZXh0KX19dmFyIFVURjhEZWNvZGVyPXR5cGVvZiBUZXh0RGVjb2RlciE9PVwidW5kZWZpbmVkXCI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp1bmRlZmluZWQ7ZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcoaGVhcCxpZHgsbWF4Qnl0ZXNUb1JlYWQpe3ZhciBlbmRJZHg9aWR4K21heEJ5dGVzVG9SZWFkO3ZhciBlbmRQdHI9aWR4O3doaWxlKGhlYXBbZW5kUHRyXSYmIShlbmRQdHI+PWVuZElkeCkpKytlbmRQdHI7aWYoZW5kUHRyLWlkeD4xNiYmaGVhcC5zdWJhcnJheSYmVVRGOERlY29kZXIpe3JldHVybiBVVEY4RGVjb2Rlci5kZWNvZGUoaGVhcC5zdWJhcnJheShpZHgsZW5kUHRyKSl9ZWxzZXt2YXIgc3RyPVwiXCI7d2hpbGUoaWR4PGVuZFB0cil7dmFyIHUwPWhlYXBbaWR4KytdO2lmKCEodTAmMTI4KSl7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKTtjb250aW51ZX12YXIgdTE9aGVhcFtpZHgrK10mNjM7aWYoKHUwJjIyNCk9PTE5Mil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCYzMSk8PDZ8dTEpO2NvbnRpbnVlfXZhciB1Mj1oZWFwW2lkeCsrXSY2MztpZigodTAmMjQwKT09MjI0KXt1MD0odTAmMTUpPDwxMnx1MTw8Nnx1Mn1lbHNle3UwPSh1MCY3KTw8MTh8dTE8PDEyfHUyPDw2fGhlYXBbaWR4KytdJjYzfWlmKHUwPDY1NTM2KXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodTApfWVsc2V7dmFyIGNoPXUwLTY1NTM2O3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxjaD4+MTAsNTYzMjB8Y2gmMTAyMyl9fX1yZXR1cm4gc3RyfWZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3JldHVybiBwdHI/VVRGOEFycmF5VG9TdHJpbmcoSEVBUFU4LHB0cixtYXhCeXRlc1RvUmVhZCk6XCJcIn1mdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsaGVhcCxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKXtpZighKG1heEJ5dGVzVG9Xcml0ZT4wKSlyZXR1cm4gMDt2YXIgc3RhcnRJZHg9b3V0SWR4O3ZhciBlbmRJZHg9b3V0SWR4K21heEJ5dGVzVG9Xcml0ZS0xO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl7dmFyIHUxPXN0ci5jaGFyQ29kZUF0KCsraSk7dT02NTUzNisoKHUmMTAyMyk8PDEwKXx1MSYxMDIzfWlmKHU8PTEyNyl7aWYob3V0SWR4Pj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109dX1lbHNlIGlmKHU8PTIwNDcpe2lmKG91dElkeCsxPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MTkyfHU+PjY7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZSBpZih1PD02NTUzNSl7aWYob3V0SWR4KzI+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0yMjR8dT4+MTI7aGVhcFtvdXRJZHgrK109MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9ZWxzZXtpZihvdXRJZHgrMz49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTI0MHx1Pj4xODtoZWFwW291dElkeCsrXT0xMjh8dT4+MTImNjM7aGVhcFtvdXRJZHgrK109MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrK109MTI4fHUmNjN9fWhlYXBbb3V0SWR4XT0wO3JldHVybiBvdXRJZHgtc3RhcnRJZHh9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtyZXR1cm4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLEhFQVBVOCxvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKX1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIHU9c3RyLmNoYXJDb2RlQXQoaSk7aWYodT49NTUyOTYmJnU8PTU3MzQzKXU9NjU1MzYrKCh1JjEwMjMpPDwxMCl8c3RyLmNoYXJDb2RlQXQoKytpKSYxMDIzO2lmKHU8PTEyNykrK2xlbjtlbHNlIGlmKHU8PTIwNDcpbGVuKz0yO2Vsc2UgaWYodTw9NjU1MzUpbGVuKz0zO2Vsc2UgbGVuKz00fXJldHVybiBsZW59dmFyIFVURjE2RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPT1cInVuZGVmaW5lZFwiP25ldyBUZXh0RGVjb2RlcihcInV0Zi0xNmxlXCIpOnVuZGVmaW5lZDtmdW5jdGlvbiBVVEYxNlRvU3RyaW5nKHB0cixtYXhCeXRlc1RvUmVhZCl7dmFyIGVuZFB0cj1wdHI7dmFyIGlkeD1lbmRQdHI+PjE7dmFyIG1heElkeD1pZHgrbWF4Qnl0ZXNUb1JlYWQvMjt3aGlsZSghKGlkeD49bWF4SWR4KSYmSEVBUFUxNltpZHhdKSsraWR4O2VuZFB0cj1pZHg8PDE7aWYoZW5kUHRyLXB0cj4zMiYmVVRGMTZEZWNvZGVyKXtyZXR1cm4gVVRGMTZEZWNvZGVyLmRlY29kZShIRUFQVTguc3ViYXJyYXkocHRyLGVuZFB0cikpfWVsc2V7dmFyIHN0cj1cIlwiO2Zvcih2YXIgaT0wOyEoaT49bWF4Qnl0ZXNUb1JlYWQvMik7KytpKXt2YXIgY29kZVVuaXQ9SEVBUDE2W3B0citpKjI+PjFdO2lmKGNvZGVVbml0PT0wKWJyZWFrO3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZShjb2RlVW5pdCl9cmV0dXJuIHN0cn19ZnVuY3Rpb24gc3RyaW5nVG9VVEYxNihzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7aWYobWF4Qnl0ZXNUb1dyaXRlPT09dW5kZWZpbmVkKXttYXhCeXRlc1RvV3JpdGU9MjE0NzQ4MzY0N31pZihtYXhCeXRlc1RvV3JpdGU8MilyZXR1cm4gMDttYXhCeXRlc1RvV3JpdGUtPTI7dmFyIHN0YXJ0UHRyPW91dFB0cjt2YXIgbnVtQ2hhcnNUb1dyaXRlPW1heEJ5dGVzVG9Xcml0ZTxzdHIubGVuZ3RoKjI/bWF4Qnl0ZXNUb1dyaXRlLzI6c3RyLmxlbmd0aDtmb3IodmFyIGk9MDtpPG51bUNoYXJzVG9Xcml0ZTsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtIRUFQMTZbb3V0UHRyPj4xXT1jb2RlVW5pdDtvdXRQdHIrPTJ9SEVBUDE2W291dFB0cj4+MV09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMTYoc3RyKXtyZXR1cm4gc3RyLmxlbmd0aCoyfWZ1bmN0aW9uIFVURjMyVG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXt2YXIgaT0wO3ZhciBzdHI9XCJcIjt3aGlsZSghKGk+PW1heEJ5dGVzVG9SZWFkLzQpKXt2YXIgdXRmMzI9SEVBUDMyW3B0citpKjQ+PjJdO2lmKHV0ZjMyPT0wKWJyZWFrOysraTtpZih1dGYzMj49NjU1MzYpe3ZhciBjaD11dGYzMi02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfWVsc2V7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHV0ZjMyKX19cmV0dXJuIHN0cn1mdW5jdGlvbiBzdHJpbmdUb1VURjMyKHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtpZihtYXhCeXRlc1RvV3JpdGU9PT11bmRlZmluZWQpe21heEJ5dGVzVG9Xcml0ZT0yMTQ3NDgzNjQ3fWlmKG1heEJ5dGVzVG9Xcml0ZTw0KXJldHVybiAwO3ZhciBzdGFydFB0cj1vdXRQdHI7dmFyIGVuZFB0cj1zdGFydFB0cittYXhCeXRlc1RvV3JpdGUtNDtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgY29kZVVuaXQ9c3RyLmNoYXJDb2RlQXQoaSk7aWYoY29kZVVuaXQ+PTU1Mjk2JiZjb2RlVW5pdDw9NTczNDMpe3ZhciB0cmFpbFN1cnJvZ2F0ZT1zdHIuY2hhckNvZGVBdCgrK2kpO2NvZGVVbml0PTY1NTM2KygoY29kZVVuaXQmMTAyMyk8PDEwKXx0cmFpbFN1cnJvZ2F0ZSYxMDIzfUhFQVAzMltvdXRQdHI+PjJdPWNvZGVVbml0O291dFB0cis9NDtpZihvdXRQdHIrND5lbmRQdHIpYnJlYWt9SEVBUDMyW291dFB0cj4+Ml09MDtyZXR1cm4gb3V0UHRyLXN0YXJ0UHRyfWZ1bmN0aW9uIGxlbmd0aEJ5dGVzVVRGMzIoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKSsraTtsZW4rPTR9cmV0dXJuIGxlbn1mdW5jdGlvbiBhbGxvY2F0ZVVURjgoc3RyKXt2YXIgc2l6ZT1sZW5ndGhCeXRlc1VURjgoc3RyKSsxO3ZhciByZXQ9X21hbGxvYyhzaXplKTtpZihyZXQpc3RyaW5nVG9VVEY4QXJyYXkoc3RyLEhFQVA4LHJldCxzaXplKTtyZXR1cm4gcmV0fWZ1bmN0aW9uIHdyaXRlQXJyYXlUb01lbW9yeShhcnJheSxidWZmZXIpe0hFQVA4LnNldChhcnJheSxidWZmZXIpfWZ1bmN0aW9uIHdyaXRlQXNjaWlUb01lbW9yeShzdHIsYnVmZmVyLGRvbnRBZGROdWxsKXtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXtIRUFQOFtidWZmZXIrKz4+MF09c3RyLmNoYXJDb2RlQXQoaSl9aWYoIWRvbnRBZGROdWxsKUhFQVA4W2J1ZmZlcj4+MF09MH1mdW5jdGlvbiBhbGlnblVwKHgsbXVsdGlwbGUpe2lmKHglbXVsdGlwbGU+MCl7eCs9bXVsdGlwbGUteCVtdWx0aXBsZX1yZXR1cm4geH12YXIgYnVmZmVyLEhFQVA4LEhFQVBVOCxIRUFQMTYsSEVBUFUxNixIRUFQMzIsSEVBUFUzMixIRUFQRjMyLEhFQVBGNjQ7ZnVuY3Rpb24gdXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3MoYnVmKXtidWZmZXI9YnVmO01vZHVsZVtcIkhFQVA4XCJdPUhFQVA4PW5ldyBJbnQ4QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQMTZcIl09SEVBUDE2PW5ldyBJbnQxNkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUDMyXCJdPUhFQVAzMj1uZXcgSW50MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBVOFwiXT1IRUFQVTg9bmV3IFVpbnQ4QXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQVTE2XCJdPUhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUFUzMlwiXT1IRUFQVTMyPW5ldyBVaW50MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBGMzJcIl09SEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUEY2NFwiXT1IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoYnVmKX12YXIgSU5JVElBTF9NRU1PUlk9TW9kdWxlW1wiSU5JVElBTF9NRU1PUllcIl18fDI2ODQzNTQ1Njt2YXIgd2FzbVRhYmxlO3ZhciBfX0FUUFJFUlVOX189W107dmFyIF9fQVRJTklUX189W107dmFyIF9fQVRNQUlOX189W107dmFyIF9fQVRQT1NUUlVOX189W107dmFyIHJ1bnRpbWVJbml0aWFsaXplZD1mYWxzZTt2YXIgcnVudGltZUV4aXRlZD1mYWxzZTtfX0FUSU5JVF9fLnB1c2goe2Z1bmM6ZnVuY3Rpb24oKXtfX193YXNtX2NhbGxfY3RvcnMoKX19KTtmdW5jdGlvbiBwcmVSdW4oKXtpZihNb2R1bGVbXCJwcmVSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwcmVSdW5cIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwcmVSdW5cIl09W01vZHVsZVtcInByZVJ1blwiXV07d2hpbGUoTW9kdWxlW1wicHJlUnVuXCJdLmxlbmd0aCl7YWRkT25QcmVSdW4oTW9kdWxlW1wicHJlUnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUFJFUlVOX18pfWZ1bmN0aW9uIGluaXRSdW50aW1lKCl7cnVudGltZUluaXRpYWxpemVkPXRydWU7aWYoIU1vZHVsZVtcIm5vRlNJbml0XCJdJiYhRlMuaW5pdC5pbml0aWFsaXplZClGUy5pbml0KCk7VFRZLmluaXQoKTtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKX1mdW5jdGlvbiBwcmVNYWluKCl7RlMuaWdub3JlUGVybWlzc2lvbnM9ZmFsc2U7Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVE1BSU5fXyl9ZnVuY3Rpb24gZXhpdFJ1bnRpbWUoKXtydW50aW1lRXhpdGVkPXRydWV9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKE1vZHVsZVtcInBvc3RSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwb3N0UnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicG9zdFJ1blwiXT1bTW9kdWxlW1wicG9zdFJ1blwiXV07d2hpbGUoTW9kdWxlW1wicG9zdFJ1blwiXS5sZW5ndGgpe2FkZE9uUG9zdFJ1bihNb2R1bGVbXCJwb3N0UnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKX1mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYil7X19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKX12YXIgcnVuRGVwZW5kZW5jaWVzPTA7dmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGw7dmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2Z1bmN0aW9uIGdldFVuaXF1ZVJ1bkRlcGVuZGVuY3koaWQpe3JldHVybiBpZH1mdW5jdGlvbiBhZGRSdW5EZXBlbmRlbmN5KGlkKXtydW5EZXBlbmRlbmNpZXMrKztpZihNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKXtNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKHJ1bkRlcGVuZGVuY2llcyl9fWZ1bmN0aW9uIHJlbW92ZVJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcy0tO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX1pZihydW5EZXBlbmRlbmNpZXM9PTApe2lmKHJ1bkRlcGVuZGVuY3lXYXRjaGVyIT09bnVsbCl7Y2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7cnVuRGVwZW5kZW5jeVdhdGNoZXI9bnVsbH1pZihkZXBlbmRlbmNpZXNGdWxmaWxsZWQpe3ZhciBjYWxsYmFjaz1kZXBlbmRlbmNpZXNGdWxmaWxsZWQ7ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPW51bGw7Y2FsbGJhY2soKX19fU1vZHVsZVtcInByZWxvYWRlZEltYWdlc1wiXT17fTtNb2R1bGVbXCJwcmVsb2FkZWRBdWRpb3NcIl09e307ZnVuY3Rpb24gYWJvcnQod2hhdCl7aWYoTW9kdWxlW1wib25BYm9ydFwiXSl7TW9kdWxlW1wib25BYm9ydFwiXSh3aGF0KX13aGF0Kz1cIlwiO2Vycih3aGF0KTtBQk9SVD10cnVlO0VYSVRTVEFUVVM9MTt3aGF0PVwiYWJvcnQoXCIrd2hhdCtcIikuIEJ1aWxkIHdpdGggLXMgQVNTRVJUSU9OUz0xIGZvciBtb3JlIGluZm8uXCI7dmFyIGU9bmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcih3aGF0KTtyZWFkeVByb21pc2VSZWplY3QoZSk7dGhyb3cgZX1mdW5jdGlvbiBoYXNQcmVmaXgoc3RyLHByZWZpeCl7cmV0dXJuIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aD9zdHIuc3RhcnRzV2l0aChwcmVmaXgpOnN0ci5pbmRleE9mKHByZWZpeCk9PT0wfXZhciBkYXRhVVJJUHJlZml4PVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO2Z1bmN0aW9uIGlzRGF0YVVSSShmaWxlbmFtZSl7cmV0dXJuIGhhc1ByZWZpeChmaWxlbmFtZSxkYXRhVVJJUHJlZml4KX12YXIgZmlsZVVSSVByZWZpeD1cImZpbGU6Ly9cIjtmdW5jdGlvbiBpc0ZpbGVVUkkoZmlsZW5hbWUpe3JldHVybiBoYXNQcmVmaXgoZmlsZW5hbWUsZmlsZVVSSVByZWZpeCl9dmFyIHdhc21CaW5hcnlGaWxlPVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LEFHRnpiUUVBQUFBQjdBZDBZQUYvQUdBQmZ3Ri9ZQUovZndCZ0FuOS9BWDlnQTM5L2Z3Ri9ZQU4vZjM4QVlBUi9mMzkvQUdBRmYzOS9mMzhBWUFWL2YzOS9md0YvWUFSL2YzOS9BWDlnQm45L2YzOS9md0YvWUFBQVlBWi9mMzkvZjM4QVlBZC9mMzkvZjM5L0FHQUlmMzkvZjM5L2YzOEJmMkFBQVg5Z0IzOS9mMzkvZjM4QmYyQUJmUUY5WUFKOWZRRjlZQXAvZjM5L2YzOS9mMzkvQUdBRmYzNStmbjRBWUFOL2ZuOEJmbUFCZkFGOFlBaC9mMzkvZjM5L2Z3QmdBbjk4QUdBRmYzOS9mMzRCZjJBRGYzOS9BWDFnQVg4QmZHQUpmMzkvZjM5L2YzOS9BWDlnQ245L2YzOS9mMzkvZjM4QmYyQUVmMzkvZndGK1lBUi9mbjUvQUdBTWYzOS9mMzkvZjM5L2YzOS9BWDlnQjM5L2YzOS9mbjRCZjJBR2YzOS9mMzUrQVg5Z0JYOTlmWDkvQVg5Z0FYOEJmV0FDZjM4QmZXQUNmMzhCZkdBUGYzOS9mMzkvZjM5L2YzOS9mMzkvQUdBTmYzOS9mMzk5ZlgxOWZYMTlmUUJnQlg5L2ZuOS9BR0FEZjM5OUFHQUZmMzk5Zlg4QVlBTi9mM3dBWUFOL2ZuOEFZQVYvZlgxOWZRQmdCbjk4Zkg5L2Z3QmdDMzkvZjM5L2YzOS9mMzkvQVg5Z0VYOS9mMzkvZjM5L2YzMTlmWDE5ZlgxOUFYOWdCWDkvZjM5OEFYOWdBMzkvZlFGL1lBWi9mMzE5ZjM4QmYyQUdmM3gvZjM5L0FYOWdBbjUvQVg5Z0FuOS9BWDVnQVh3QmZXQUVmMzkvZndGOVlBTi9mWDBCZldBQ2ZIOEJmR0FKZjM5L2YzOS9mMzkvQUdBTmYzOS9mMzkvZjM5L2YzOS9md0JnRVg5L2YzOS9mMzkvZjMxOWZYMTlmWDE5QUdBR2YzOS9mMzk5QUdBSWYzOS9mMzk5ZlgwQVlBbC9mMzkvZjMxOWZYMEFZQVIvZjM5OUFHQUZmMzkvZlgwQVlBZC9mMzk5ZlgxL0FHQURmMzkrQUdBR2YzOTlmMzEvQUdBQ2YzNEFZQU4vZm40QVlBSi9mUUJnQTM5OWZRQmdCSDk5Zlg4QVlBUi9mSHgvQUdBQmZRRi9ZQXgvZjM5L2YzOS9mMzkvZkg4QmYyQU9mMzkvZjM5L2YzOS9mM3gvZjM4QmYyQVRmMzkvZjM5L2YzOS9mSDkvZjM5L2YzOS9md0YvWUF4L2YzOS9mMzkvZjMxL2YzOEJmMkFIZjM5L2YzeC9md0YvWUFWL2YzMTlmd0YvWUFSL2ZuOS9BWDlnQW45OUFYOWdCWDk5ZlgxOUFYOWdCbjk5ZlgxOWZ3Ri9ZQU4vZkh3QmYyQURmbjkvQVg5Z0FuNStBWDlnQTM1K2ZnRi9ZQVIrZm41K0FYOWdBbjEvQVg5Z0FueC9BWDlnQW54OEFYOWdBWDhCZm1BRWYzOS9mZ0YrWUFWL2YzOS9md0Y5WUFkL2YzOS9mMzkvQVgxZ0IzOS9mMzkvZjMwQmZXQUdmMzkvZjM5OUFYMWdCbjkvZjM5OWZRRjlZQVIvZjM5OUFYMWdBMzkvZlFGOVlBVi9mWDEvZndGOVlBSitmZ0Y5WUFKOWZ3RjlZQU45ZlgwQmZXQUVmWDE5ZlFGOVlBTi9mMzhCZkdBQ2ZuNEJmR0FDZkh3QmZHQURmSHgvQVh4Z0EzeDhmQUY4WUFaOGZIeDhmSHdCZkFLdEFqSUJZUUZoQUFzQllRRmlBQUFCWVFGakFBQUJZUUZrQUE4QllRRmxBQXdCWVFGbUFBVUJZUUZuQUJjQllRRm9BQWNCWVFGcEFBVUJZUUZxQUFFQllRRnJBQUlCWVFGc0FBSUJZUUZ0QUFjQllRRnVBQVVCWVFGdkFBUUJZUUZ3QUFrQllRRnhBQVFCWVFGeUFBRUJZUUZ6QUFVQllRRjBBQUlCWVFGMUFBTUJZUUYyQUF3QllRRjNBQ3dCWVFGNEFEMEJZUUY1QUFNQllRRjZBQUVCWVFGQkFBTUJZUUZDQUFRQllRRkRBQVVCWVFGRUFBWUJZUUZGQUFnQllRRkdBQVFCWVFGSEFBRUJZUUZJQUFnQllRRkpBQU1CWVFGS0FBTUJZUUZMQUFNQllRRk1BQWtCWVFGTkFBUUJZUUZPQUFRQllRRlBBQUlCWVFGUUFBY0JZUUZSQUFJQllRRlNBQUFCWVFGVEFBQUJZUUZVQUFBQllRRlZBQk1CWVFGV0FBd0JZUUZYQUFrQllRRllBQWtEcWcrb0R3TUFBUUFEQVFZQkFRUURBUUVFQXdJQkFRQUFBVG9CQWdJQkF3TUJBUU1DQWdFUGFTUUJCUU1BQVJRREFna0JBQVVQQWdBRUFRRUpBd01CQXhFREFBRWpBd01BQUFzQkFRRUFBd01FQWdNREFnRUJBUU1GQVFFQ0NBWURBd0FDQVFNREN4OENDQU1CQWdFREFnRUJCd0Z0QXdFREZBRWFBZ0lFQVFRQ0FnSUZCQUFEQVFBQkF3SUJBZ0lFQkFGSUF3TUJBQU1EUndFNE9Db0VBQUVCQWdvSkN3SUlDQWtCR0NNQ0dnRVNBQUVCRGc0S0JnVUZDQVVFQlFFQkF3UlNBd0E3QVFJQ0FnRUJCZ0VHQkVJcUFBTURCUU1DQVFFQkFRRUFBZ0VCQUFFQkFnSURYQUVEQ1FNUkF3UUJBQUVEQWdJQkJBSUVCQVVBQXdFREJBQUJCZ01FQWdJRkF3TUFIUUVkQVFNQkFRSWZOZ1ZOQWhJRkJBRUpBd0VDQlFVQ0FnTUFBUklDS3dRQkJRTUJBUUFGQXdVMEFBRUJBd053Y1FBWUNXUmpCUVFBSlFVS0FSSUNBQU1DQ1FVREJVNERBZ0FDQXdBQ0FnSUNBbWdEQlFRQkFnVUNBd2NDQWdJQ0FnRUJBZ0lOQkEwREVBTVFBUU1BQVFNT0FnSUJBd0VCQWcwQ0NRRXRGZ0VHREFNQkFuTUhjZ01HUXdNQ0F3UUdCUUFCQVFBQUFRRUNBZ0VQQWdFQ0F3RUZBUUVCYkFNQUJBRUNIQmNDQUFJSkF5c0RBQUVBQUFBQ0FnSUFBZ2tEQkFNQkF3RUVEQVVHQlFFSEJRRUJCQWdBQWdBQUJDQUhBQVFnQndZZUFnQUFEQUVBQVFFQkFRRUNBZ052RkFZSEVBUUJDUUVCRmdVQkJBSUFBUUlCSmdzRUF3RUNBQUFDQ1FBQUFnSUFBUUVQQWdJQ0FnSUJBUUFBQVFVdkNnRUFBQUlDQWdBQUF5VUFKQUlkQWdFREFRSUFNd01DQVQ4UUJnNEdBQUFNQXdRQkFnRUNEQUVBQkFBQ0FBRUNBQU1DQUFJRER3TUFBd0VBQWdZQ0JnUUdBQUlDQWdBQkFnQUNBd01DQXdFQ0FnQUNBQVVCQlFBQ0F3UUNBVlFFQUFNRkJCQUVBZ0lKQWdJQkFRSUNBQUlDQUFJQ0FBQVNFUkVDQUU4QUFnSUJBQUVCQlFFQ0FRQUNDUUlBQXdVS0F3QUVBUUFBQXdFQUZBSURCZ01IRndVWEJBQUVBQUlGQUFNUEFGY0JBUUFEQVFnT0FRRUFBUUlDQUFBQkFnVUFCQ2NUSnhNQkF3RUJBakFDQXdFQ0FRVUNNQUlDQWd3QUJ3d01Bd2NNREFNTkJBTUREUUFBQ2dBRUJnTnVHaDRKQ2drZUNRSUZIbUVCQ1FGVEFBTUJBd0VCQWdBQkFRRUROQUVCQXdBQkFRRUdLUVFCQUFFREFBME9Bd01BQUFFRkJRRURCQm9KRkdwYkJRRUtCZ1JGQmpjR0h4UUdCUVlCQ0RzREFBVmdFVjFlQ0JFUkFBQUFBQUFBQ3dJQkNBQUNCZ0FKQUFBSkFRQUFCQWtCQWdZRkJRVWJBZ1lDQlFJQ0FnY0NBQUlBQWdjQUFBVW1MQUVDQlFNUEF3UURCQVFEQ1FzRUN3VUFBQUFBQ3dBQkN3UUxCUUFBQVFVQUFnc0FBVXdMQ3dzTEN3c0RDd3NMQ3dRQkFRSUJBUWdEQVFJQkFoc1lHeGdGQlFJR0FRQUJEd0FDQkFFQkJnTUNMd0FBR3dBQUFBVUNBd0FDQXdBREFnSUNBZ0k2TGdJeEJRVUZNUVVFUGdZQUFnWUdCUVlhQlVGS1ZpZ0RCZ1l1QUFNSUFRRUJBUUVCQkFFREF3TURBd01FQXdNREF6d0dSaHhuQUFNY0Rna0pPVkVDQWdZQ0JRSURBZ0lDQmdNRUJRTUdCZ1lDQlFZREJnSUVDZ1FvREFJRENRUUpBd2dDQWdZRUFnQUNDUUlDQWdVRkJRRUNBZ2NRQkFJREF3Y0RBZ2NCQWdJQUFBTUFBZ01DQWd3SEFBRUdBZ2dFQWdJQUFBWUVBQUlBQUFRQ0FnQUFBQUFBQXdJQ0JnQUZCd01GQlFJRkFnSUFCQVVBQWdRTkF3RUNTeEVHQ2tBQ0J3QUdBZ0lFQVFRQ0FnZ0NDUU1DQVFBQUFnSUNCZ2dBQUFBQ0JnY0hBd01DVUFrRUFnSWtCUUVDQWdNR0VBa0RDQUlDQmdRQkJBSUVBZ0lKQXdKbUFnSUdCQVVDQXdJRk13ME5EUUlDQWtRWEFnTUVFQU1EQWdBQ0JRSUNBZ0lRQWdJQUJBSUJBd1VDV0FnQ0FRRUNBMThJQ0FnSUNBb0NBZ01HQWdrQ0FRTURCZ01LQWdFREF3TUlIUndRRFFnQUR3RmFGZ01NREF3SEJ3b0hBd1FEQmdJR0JnUUVBQUFCQ3dBQkFRSUNBd1VGQlFVRkJRSUNBZ0lDQkFRQ0FBUUVBZ1VBQUFrQkFnTUNBQUVBQVFBQkFBRUFBUUlBQVFBQkFBRUFDd0VBQWdzQkFBc0JBQXNCQUFJTEFRQUxBUUlDQWdJQ0FnRUJBQUFFQXdnS0Rnb09CQWdLRGdvT0FRa0lBUUVJQ2dRT0NBNEFDQWdFQ1FRREJBTUFDQVFKQkFNRUF3a0pDUVFBQUFJQUR3QUFBQU1QQ3dzTEN3WUdEQXdLSVFvaEFnSUVCUUFBRUJNUUJBVUFFQk1RQ0F3UUVBWUhCd2NNQmdjSEJ3Y0hCdzRLQ2dvS0NnWUhCd2NNQmdjSEJ3Y0hCdzRLQ2dvS0NnSUNDQ0l5R1FnWkNBZ0lJaklaQ0JrSUNBTUtDQW9JQ2dnS0NBb0lDQW9JQ2dnS0Nnb0lDZ2dLQ0FvSUNnZ0lDZ2dLQ0FvS0JBQUdDQVFHQ0FZRkpnUWxDQWtFRHdRakFnQUNBd01DQ2dRQkJBQUVBUU1EQkFBTkFBUURCQUlUQVFNRUFnTUJBUUlEQXdFQkFpQUFBZ3NBQ3dBTEJBUUNPVWtERHc4UEJBc0JCQVFFQkFNRU53ME1BUlVCQWdFQ05RRTJXUU1WQUFVRUF3UXRDQUVTQVJZUkZoWUFFbXNCQlFFREFBTVBBUXNMQ3dFTEN3c0xWUXNMQ3dzTEN3c0xDd1VJQVFNREF3TURBQUFKQ1FvS0FBZ0lBQUFBQUFBQUFBWUlCZ1lDQUFNREFRTUFBd0FDQXdNREF3TUlBd0FBQUFBQUJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQncwTkRRSUNCZ1lHQmdZQ0NBQU5BQWNIQndjSEJ3SUhCd2NBRFFZTkJnQUFCZ0FHQmdJQUFBWUdCZ1lHQWdBQUJnQUJBQUVCQVFBREJBUUJBUUVCQXdBRkFRQUdBQUFBQUFJQUFnQUFBUUlDRUFObFlnd0hDQVFEQkFrREJnVUNDUUVEQ0FnRUJ3RndBZFlFMWdRRkJ3RUJnQ0NBZ0FJR0NRRi9BVUdBc2NRQ0N3ZHJFd0ZaQWdBQldnQzVCQUZmQURvQkpBQXpBbUZoQUk0T0FtSmhBUUFDWTJFQXBBNENaR0VBb0FjQ1pXRUEzZzBDWm1FQTNRMENaMkVBM0EwQ2FHRUFnQXNDYVdFQS93b0NhbUVBMkEwQ2EyRUEvZ29DYkdFQS9Rb0NiV0VBL0FvQ2JtRUErd29DYjJFQStnb0ppZ2tCQUVFQkM5VUV4UTZzQi9jTnRRKzJEOFVQdEE4NHNRK3lENjRQZ3dUY0Nxd0Z1Z25iQTRFSzNBT0hDb0FLL3duNEFWcXpDYklKelFOYXFBaW5DTTBEV3FVSXBBak5BNTBJbkFqN0I1RUlsZ2lNQ0lzSWp3ajhCNWNJbVFpVUNJSUkvd2VBQ0pNSWtnaUtDSWtJaUFpSENJUUlnd2lHQ0lVSS9nZjlCKzRIN1FmSkJPc0g2UWRYNVFmakIrRUg0QWZKQktJQ3lRTkQyZ2ZZQjlZSDFRZlVCOU1IMGdmUkI5QUh6d2RhemdmTkI4d0h5d2ZLQjhrSHlBZThCTFFIc3dlN0JMb0UxUSs4Qk5NUDBnKzdCTG9FMEEvSEQvSUJyUS9FRDhNUHdnL0JEOEFQdncrK0Q3MFB1ZytxQjdnUHR3K3JENm9QcVErb0Q2Y1Bvdy95QWFJUG9RK2dENThQbmcrZEQ1c1BtZytaRDVnUDhnR1hENVlQbEErVEQ1SVBrUStRRC9JQmpnK05ENHdQaWcrSkQ0Z1BodytHRDRVUGd3K0NELzhPL2c3OUR2d08rdzc1RHZnTzl3NzJEdElPN2c3dkR2QU84UTd5RHZNTzlBN3NEdXNPNmc3cER1Z081dzdtRHVVTzVBN2pEdUlPNFE3Z0R0OE8zZzdkRHR3TzJ3N2FEdGtPMkE3WER0WU83UTcxRHRVTzFBN1FEczhPemc3TURzc095ZzdKRHNnT3hnN0VEc01Pd2c3QkRxY0J3QTYrRHIwT3ZBNjZEcmNPdGc2MERyTUVzZzZ4RHJBT3J3NnVEcTBPckE2eUJKd0M4Z0dxRHFrT3FBNm5EcVlPcFE2UER2WU40ZzM3RGU4TitRM3hEZkFOcHdIc0RlUU56dzJlQlBJR3pRM29CdWNHNWdhbkFhY0J1QTNNRGNzTnlnMjBEYWtEblFUdEJzZ042QWJuQnVZR3B3R25BYklOeHczR0RjVU5zQTJwQS9JR3hBM3JCdVVHdFEycEE4TU53ZzN0QnI4TjZ3YmxCckVOcVFPK0RiME51UTJZQTdNTm1BT29BNXdFNHdiaUJxZ0RuQVRqQnVJR3BRT1lCTm9HMlFhbEE1Z0UyZ2JaQnA4RXFnM2tBdW9HNUFMcUJqUHlBWmdNbFF6YkM5Y0wxQXZSQzgwTHlndklDOFlMeEF2QkM3OEx2UXU3QzdrTGpRYWJESllNaXdhSkRJZ01od3lHRElVTWl3V0VESU1NZ2d5U0JvQU0vd3Y5Qy9vTCtRdW5BZmNMOVF1RUJ1Y0w1UXZrQytNTDRRdmZDNE1HNWd2ZEN2VUs0Z3ZnQzk0TCtBRmFXcFFNa3d5U0RKRU1rQXlQREk0TWpReUxCWXdNaXd5S0RGcUpCb2tHaVFUdUErNERnUXp1QTFyMEMvSUxpUVNuQWFjQjhBdklCRnJ1Qyt3TGlRU25BYWNCNmd2SUJGcGErQUZhblEyY0Rac04rQUZhbWcyWkRaY05XcFlObFEyVERaRU54Z2JHQm80TmpBMktEWWdOaGcxYWhRMkVEWUlOZ0EyOUJyMEcvUXo3RFBrTTl3ejFERnJ6RFBJTThRendETzhNN2d6dERPd01XdXNNNmd6cERPZ001d3ptRE9VTTVBejRBVnJIQk9FTTRBemZETjRNM1F6Y0ROMEwxZ3ZRQzhBTHZBdkpDOFVMK0FGYXh3VFBETTRNelF6TURNc015Z3phQzlNTHpBdStDN29MeHd2Q0M0WUVnUWE5RElZRWdRYThERnFiQTVzRHVRRzVBYmtCcWdhbkFmY0I5d0ZhbXdPYkE3a0J1UUc1QWFvR3B3SDNBZmNCV3BvRG1nTzVBYmtCdVFHcEJxY0I5d0gzQVZxYUE1b0R1UUc1QWJrQnFRYW5BZmNCOXdGYXVReTNERnF6RExFTVdxb01xUXhhcUF5bkRGcVdCcVlNbUFOYWxnYWxESmdEK1FXWUMva0YydzM0QVZxWEM1WUw3Z3FWQy9nQld2SUI4Z0dVQzFxVEM0VUxpQXVTQzFxR0M0a0xrUXRhaHd1TEM0OExXbzBMQ3B5ZEdxZ1BEZ0FnQUNBQklBRVFpUUVRL0FzTHpBd0JCMzhDUUNBQVJRMEFJQUJCQ0dzaUF5QUFRUVJyS0FJQUlnRkJlSEVpQUdvaEJRSkFJQUZCQVhFTkFDQUJRUU54UlEwQklBTWdBeWdDQUNJQmF5SURRYUN0QkNnQ0FFa05BU0FBSUFGcUlRQWdBMEdrclFRb0FnQkhCRUFnQVVIL0FVMEVRQ0FES0FJSUlnSWdBVUVEZGlJRVFRTjBRYml0QkdwR0dpQUNJQU1vQWd3aUFVWUVRRUdRclFSQmtLMEVLQUlBUVg0Z0JIZHhOZ0lBREFNTElBSWdBVFlDRENBQklBSTJBZ2dNQWdzZ0F5Z0NHQ0VHQWtBZ0F5QURLQUlNSWdGSEJFQWdBeWdDQ0NJQ0lBRTJBZ3dnQVNBQ05nSUlEQUVMQWtBZ0EwRVVhaUlDS0FJQUlnUU5BQ0FEUVJCcUlnSW9BZ0FpQkEwQVFRQWhBUXdCQ3dOQUlBSWhCeUFFSWdGQkZHb2lBaWdDQUNJRURRQWdBVUVRYWlFQ0lBRW9BaEFpQkEwQUN5QUhRUUEyQWdBTElBWkZEUUVDUUNBRElBTW9BaHdpQWtFQ2RFSEFyd1JxSWdRb0FnQkdCRUFnQkNBQk5nSUFJQUVOQVVHVXJRUkJsSzBFS0FJQVFYNGdBbmR4TmdJQURBTUxJQVpCRUVFVUlBWW9BaEFnQTBZYmFpQUJOZ0lBSUFGRkRRSUxJQUVnQmpZQ0dDQURLQUlRSWdJRVFDQUJJQUkyQWhBZ0FpQUJOZ0lZQ3lBREtBSVVJZ0pGRFFFZ0FTQUNOZ0lVSUFJZ0FUWUNHQXdCQ3lBRktBSUVJZ0ZCQTNGQkEwY05BRUdZclFRZ0FEWUNBQ0FGSUFGQmZuRTJBZ1FnQXlBQVFRRnlOZ0lFSUFBZ0Eyb2dBRFlDQUE4TElBTWdCVThOQUNBRktBSUVJZ0ZCQVhGRkRRQUNRQ0FCUVFKeFJRUkFJQVZCcUswRUtBSUFSZ1JBUWFpdEJDQUROZ0lBUVp5dEJFR2NyUVFvQWdBZ0FHb2lBRFlDQUNBRElBQkJBWEkyQWdRZ0EwR2tyUVFvQWdCSERRTkJtSzBFUVFBMkFnQkJwSzBFUVFBMkFnQVBDeUFGUWFTdEJDZ0NBRVlFUUVHa3JRUWdBellDQUVHWXJRUkJtSzBFS0FJQUlBQnFJZ0EyQWdBZ0F5QUFRUUZ5TmdJRUlBQWdBMm9nQURZQ0FBOExJQUZCZUhFZ0FHb2hBQUpBSUFGQi93Rk5CRUFnQlNnQ0NDSUNJQUZCQTNZaUJFRURkRUc0clFScVJob2dBaUFGS0FJTUlnRkdCRUJCa0swRVFaQ3RCQ2dDQUVGK0lBUjNjVFlDQUF3Q0N5QUNJQUUyQWd3Z0FTQUNOZ0lJREFFTElBVW9BaGdoQmdKQUlBVWdCU2dDRENJQlJ3UkFJQVVvQWdnaUFrR2dyUVFvQWdCSkdpQUNJQUUyQWd3Z0FTQUNOZ0lJREFFTEFrQWdCVUVVYWlJQ0tBSUFJZ1FOQUNBRlFSQnFJZ0lvQWdBaUJBMEFRUUFoQVF3QkN3TkFJQUloQnlBRUlnRkJGR29pQWlnQ0FDSUVEUUFnQVVFUWFpRUNJQUVvQWhBaUJBMEFDeUFIUVFBMkFnQUxJQVpGRFFBQ1FDQUZJQVVvQWh3aUFrRUNkRUhBcndScUlnUW9BZ0JHQkVBZ0JDQUJOZ0lBSUFFTkFVR1VyUVJCbEswRUtBSUFRWDRnQW5keE5nSUFEQUlMSUFaQkVFRVVJQVlvQWhBZ0JVWWJhaUFCTmdJQUlBRkZEUUVMSUFFZ0JqWUNHQ0FGS0FJUUlnSUVRQ0FCSUFJMkFoQWdBaUFCTmdJWUN5QUZLQUlVSWdKRkRRQWdBU0FDTmdJVUlBSWdBVFlDR0FzZ0F5QUFRUUZ5TmdJRUlBQWdBMm9nQURZQ0FDQURRYVN0QkNnQ0FFY05BVUdZclFRZ0FEWUNBQThMSUFVZ0FVRitjVFlDQkNBRElBQkJBWEkyQWdRZ0FDQURhaUFBTmdJQUN5QUFRZjhCVFFSQUlBQkJBM1lpQVVFRGRFRzRyUVJxSVFBQ2YwR1FyUVFvQWdBaUFrRUJJQUYwSWdGeFJRUkFRWkN0QkNBQklBSnlOZ0lBSUFBTUFRc2dBQ2dDQ0FzaEFpQUFJQU0yQWdnZ0FpQUROZ0lNSUFNZ0FEWUNEQ0FESUFJMkFnZ1BDMEVmSVFJZ0EwSUFOd0lRSUFCQi8vLy9CMDBFUUNBQVFRaDJJZ0VnQVVHQS9qOXFRUkIyUVFoeElnRjBJZ0lnQWtHQTRCOXFRUkIyUVFSeElnSjBJZ1FnQkVHQWdBOXFRUkIyUVFKeElnUjBRUTkySUFFZ0FuSWdCSEpySWdGQkFYUWdBQ0FCUVJWcWRrRUJjWEpCSEdvaEFnc2dBeUFDTmdJY0lBSkJBblJCd0s4RWFpRUJBa0FDUUFKQVFaU3RCQ2dDQUNJRVFRRWdBblFpQjNGRkJFQkJsSzBFSUFRZ0IzSTJBZ0FnQVNBRE5nSUFJQU1nQVRZQ0dBd0JDeUFBUVFCQkdTQUNRUUYyYXlBQ1FSOUdHM1FoQWlBQktBSUFJUUVEUUNBQklnUW9BZ1JCZUhFZ0FFWU5BaUFDUVIxMklRRWdBa0VCZENFQ0lBUWdBVUVFY1dvaUIwRVFhaWdDQUNJQkRRQUxJQWNnQXpZQ0VDQURJQVEyQWhnTElBTWdBellDRENBRElBTTJBZ2dNQVFzZ0JDZ0NDQ0lBSUFNMkFnd2dCQ0FETmdJSUlBTkJBRFlDR0NBRElBUTJBZ3dnQXlBQU5nSUlDMEd3clFSQnNLMEVLQUlBUVFGcklnQkJmeUFBR3pZQ0FBc0xCd0FnQUVFSWFnc0tBQ0FBUVEwUkFRQWFDOGdCQVFaL0l3QkJJR3NpQWlRQUFrQWdBa0VZYWlBQUVLWURJZ1F0QUFCRkRRQWdBQ0FBS0FJQVFReHJLQUlBYWlnQ0JCb2dBa0VRYWlBQUlBQW9BZ0JCREdzb0FnQnFFRW9nQWtFUWFrR3NuUVFReGdFaEF5QUNRUkJxRUVRZ0FrRUlhaUFBRVB3RElRVWdBQ0FBS0FJQVFReHJLQUlBYWlJR0VPa0ZJUWNnQWlBRElBVW9BZ0FnQmlBSElBRWdBeWdDQUNnQ0VCRUlBRFlDRUNBQ1FSQnFFUHNEUlEwQUlBQWdBQ2dDQUVFTWF5Z0NBR3BCQlJDekFnc2dCQkRqQWlBQ1FTQnFKQUFnQUFzVkFDQUFFSnNCQkVBZ0FDZ0NCQThMSUFBdEFBc0xQZ0FqQUVFUWF5SUFKQUFDUUNBQ1JRMEFRYWp2QXlnQ0FDQUJTZzBBSUFJdEFBQkZEUUFnQUNBRE5nSU1JQUVnQWlBREVLSU9DeUFBUVJCcUpBQUxId0VCZnlBQUVKc0JCRUFnQUNnQ0FDRUJJQUFRalFJYUlBRVFNd3NnQUF1YkxnRU1meU1BUVJCcklnd2tBQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUFRZlFCVFFSQVFaQ3RCQ2dDQUNJRlFSQWdBRUVMYWtGNGNTQUFRUXRKR3lJSVFRTjJJZ0oySWdGQkEzRUVRQ0FCUVg5elFRRnhJQUpxSWdOQkEzUWlBVUhBclFScUtBSUFJZ1JCQ0dvaEFBSkFJQVFvQWdnaUFpQUJRYml0QkdvaUFVWUVRRUdRclFRZ0JVRitJQU4zY1RZQ0FBd0JDeUFDSUFFMkFnd2dBU0FDTmdJSUN5QUVJQU5CQTNRaUFVRURjallDQkNBQklBUnFJZ0VnQVNnQ0JFRUJjallDQkF3TkN5QUlRWml0QkNnQ0FDSUtUUTBCSUFFRVFBSkFRUUlnQW5RaUFFRUFJQUJyY2lBQklBSjBjU0lBUVFBZ0FHdHhRUUZySWdBZ0FFRU1ka0VRY1NJQ2RpSUJRUVYyUVFoeElnQWdBbklnQVNBQWRpSUJRUUoyUVFSeElnQnlJQUVnQUhZaUFVRUJka0VDY1NJQWNpQUJJQUIySWdGQkFYWkJBWEVpQUhJZ0FTQUFkbW9pQTBFRGRDSUFRY0N0Qkdvb0FnQWlCQ2dDQ0NJQklBQkJ1SzBFYWlJQVJnUkFRWkN0QkNBRlFYNGdBM2R4SWdVMkFnQU1BUXNnQVNBQU5nSU1JQUFnQVRZQ0NBc2dCRUVJYWlFQUlBUWdDRUVEY2pZQ0JDQUVJQWhxSWdJZ0EwRURkQ0lCSUFocklnTkJBWEkyQWdRZ0FTQUVhaUFETmdJQUlBb0VRQ0FLUVFOMklnRkJBM1JCdUswRWFpRUhRYVN0QkNnQ0FDRUVBbjhnQlVFQklBRjBJZ0Z4UlFSQVFaQ3RCQ0FCSUFWeU5nSUFJQWNNQVFzZ0J5Z0NDQXNoQVNBSElBUTJBZ2dnQVNBRU5nSU1JQVFnQnpZQ0RDQUVJQUUyQWdnTFFhU3RCQ0FDTmdJQVFaaXRCQ0FETmdJQURBMExRWlN0QkNnQ0FDSUdSUTBCSUFaQkFDQUdhM0ZCQVdzaUFDQUFRUXgyUVJCeElnSjJJZ0ZCQlhaQkNIRWlBQ0FDY2lBQklBQjJJZ0ZCQW5aQkJIRWlBSElnQVNBQWRpSUJRUUYyUVFKeElnQnlJQUVnQUhZaUFVRUJka0VCY1NJQWNpQUJJQUIyYWtFQ2RFSEFyd1JxS0FJQUlnRW9BZ1JCZUhFZ0NHc2hBeUFCSVFJRFFBSkFJQUlvQWhBaUFFVUVRQ0FDS0FJVUlnQkZEUUVMSUFBb0FnUkJlSEVnQ0dzaUFpQURJQUlnQTBraUFoc2hBeUFBSUFFZ0Foc2hBU0FBSVFJTUFRc0xJQUVnQ0dvaUNTQUJUUTBDSUFFb0FoZ2hDeUFCSUFFb0Fnd2lCRWNFUUNBQktBSUlJZ0JCb0swRUtBSUFTUm9nQUNBRU5nSU1JQVFnQURZQ0NBd01DeUFCUVJScUlnSW9BZ0FpQUVVRVFDQUJLQUlRSWdCRkRRUWdBVUVRYWlFQ0N3TkFJQUloQnlBQUlnUkJGR29pQWlnQ0FDSUFEUUFnQkVFUWFpRUNJQVFvQWhBaUFBMEFDeUFIUVFBMkFnQU1Dd3RCZnlFSUlBQkJ2MzlMRFFBZ0FFRUxhaUlBUVhoeElRaEJsSzBFS0FJQUlnbEZEUUJCSHlFRlFRQWdDR3NoQXdKQUFrQUNRQUovSUFoQi8vLy9CMDBFUUNBQVFRaDJJZ0FnQUVHQS9qOXFRUkIyUVFoeElnSjBJZ0FnQUVHQTRCOXFRUkIyUVFSeElnRjBJZ0FnQUVHQWdBOXFRUkIyUVFKeElnQjBRUTkySUFFZ0FuSWdBSEpySWdCQkFYUWdDQ0FBUVJWcWRrRUJjWEpCSEdvaEJRc2dCVUVDZEVIQXJ3UnFLQUlBSWdKRkN3UkFRUUFoQUF3QkMwRUFJUUFnQ0VFQVFSa2dCVUVCZG1zZ0JVRWZSaHQwSVFFRFFBSkFJQUlvQWdSQmVIRWdDR3NpQnlBRFR3MEFJQUloQkNBSElnTU5BRUVBSVFNZ0FpRUFEQU1MSUFBZ0FpZ0NGQ0lISUFjZ0FpQUJRUjEyUVFSeGFpZ0NFQ0lDUmhzZ0FDQUhHeUVBSUFGQkFYUWhBU0FDRFFBTEN5QUFJQVJ5UlFSQVFRSWdCWFFpQUVFQUlBQnJjaUFKY1NJQVJRMERJQUJCQUNBQWEzRkJBV3NpQUNBQVFReDJRUkJ4SWdKMklnRkJCWFpCQ0hFaUFDQUNjaUFCSUFCMklnRkJBblpCQkhFaUFISWdBU0FBZGlJQlFRRjJRUUp4SWdCeUlBRWdBSFlpQVVFQmRrRUJjU0lBY2lBQklBQjJha0VDZEVIQXJ3UnFLQUlBSVFBTElBQkZEUUVMQTBBZ0FDZ0NCRUY0Y1NBSWF5SUJJQU5KSVFJZ0FTQURJQUliSVFNZ0FDQUVJQUliSVFRZ0FDZ0NFQ0lCQkg4Z0FRVWdBQ2dDRkFzaUFBMEFDd3NnQkVVTkFDQURRWml0QkNnQ0FDQUlhMDhOQUNBRUlBaHFJZ1lnQkUwTkFTQUVLQUlZSVFVZ0JDQUVLQUlNSWdGSEJFQWdCQ2dDQ0NJQVFhQ3RCQ2dDQUVrYUlBQWdBVFlDRENBQklBQTJBZ2dNQ2dzZ0JFRVVhaUlDS0FJQUlnQkZCRUFnQkNnQ0VDSUFSUTBFSUFSQkVHb2hBZ3NEUUNBQ0lRY2dBQ0lCUVJScUlnSW9BZ0FpQUEwQUlBRkJFR29oQWlBQktBSVFJZ0FOQUFzZ0IwRUFOZ0lBREFrTElBaEJtSzBFS0FJQUlnSk5CRUJCcEswRUtBSUFJUU1DUUNBQ0lBaHJJZ0ZCRUU4RVFFR1lyUVFnQVRZQ0FFR2tyUVFnQXlBSWFpSUFOZ0lBSUFBZ0FVRUJjallDQkNBQ0lBTnFJQUUyQWdBZ0F5QUlRUU55TmdJRURBRUxRYVN0QkVFQU5nSUFRWml0QkVFQU5nSUFJQU1nQWtFRGNqWUNCQ0FDSUFOcUlnQWdBQ2dDQkVFQmNqWUNCQXNnQTBFSWFpRUFEQXNMSUFoQm5LMEVLQUlBSWdaSkJFQkJuSzBFSUFZZ0NHc2lBVFlDQUVHb3JRUkJxSzBFS0FJQUlnSWdDR29pQURZQ0FDQUFJQUZCQVhJMkFnUWdBaUFJUVFOeU5nSUVJQUpCQ0dvaEFBd0xDMEVBSVFBZ0NFRXZhaUlKQW45QjZMQUVLQUlBQkVCQjhMQUVLQUlBREFFTFFmU3dCRUovTndJQVFleXdCRUtBb0lDQWdJQUVOd0lBUWVpd0JDQU1RUXhxUVhCeFFkaXExYW9GY3pZQ0FFSDhzQVJCQURZQ0FFSE1zQVJCQURZQ0FFR0FJQXNpQVdvaUJVRUFJQUZySWdkeElnSWdDRTBOQ2tISXNBUW9BZ0FpQkFSQVFjQ3dCQ2dDQUNJRElBSnFJZ0VnQTAwZ0FTQUVTM0lOQ3d0QnpMQUVMUUFBUVFSeERRVUNRQUpBUWFpdEJDZ0NBQ0lEQkVCQjBMQUVJUUFEUUNBRElBQW9BZ0FpQVU4RVFDQUJJQUFvQWdScUlBTkxEUU1MSUFBb0FnZ2lBQTBBQ3d0QkFCQ09BaUlCUVg5R0RRWWdBaUVGUWV5d0JDZ0NBQ0lEUVFGcklnQWdBWEVFUUNBQ0lBRnJJQUFnQVdwQkFDQURhM0ZxSVFVTElBVWdDRTBnQlVIKy8vLy9CMHR5RFFaQnlMQUVLQUlBSWdRRVFFSEFzQVFvQWdBaUF5QUZhaUlBSUFOTklBQWdCRXR5RFFjTElBVVFqZ0lpQUNBQlJ3MEJEQWdMSUFVZ0Jtc2dCM0VpQlVIKy8vLy9CMHNOQlNBRkVJNENJZ0VnQUNnQ0FDQUFLQUlFYWtZTkJDQUJJUUFMSUFCQmYwWWdDRUV3YWlBRlRYSkZCRUJCOExBRUtBSUFJZ0VnQ1NBRmEycEJBQ0FCYTNFaUFVSCsvLy8vQjBzRVFDQUFJUUVNQ0FzZ0FSQ09Ba0YvUndSQUlBRWdCV29oQlNBQUlRRU1DQXRCQUNBRmF4Q09BaG9NQlFzZ0FDSUJRWDlIRFFZTUJBc0FDMEVBSVFRTUJ3dEJBQ0VCREFVTElBRkJmMGNOQWd0QnpMQUVRY3l3QkNnQ0FFRUVjallDQUFzZ0FrSCsvLy8vQjBzTkFTQUNFSTRDSWdGQkFCQ09BaUlBVHlBQlFYOUdjaUFBUVg5R2NnMEJJQUFnQVdzaUJTQUlRU2hxVFEwQkMwSEFzQVJCd0xBRUtBSUFJQVZxSWdBMkFnQkJ4TEFFS0FJQUlBQkpCRUJCeExBRUlBQTJBZ0FMQWtBQ1FBSkFRYWl0QkNnQ0FDSUhCRUJCMExBRUlRQURRQ0FCSUFBb0FnQWlBeUFBS0FJRUlnSnFSZzBDSUFBb0FnZ2lBQTBBQ3d3Q0MwR2dyUVFvQWdBaUFFRUFJQUFnQVUwYlJRUkFRYUN0QkNBQk5nSUFDMEVBSVFCQjFMQUVJQVUyQWdCQjBMQUVJQUUyQWdCQnNLMEVRWDgyQWdCQnRLMEVRZWl3QkNnQ0FEWUNBRUhjc0FSQkFEWUNBQU5BSUFCQkEzUWlBMEhBclFScUlBTkJ1SzBFYWlJQ05nSUFJQU5CeEswRWFpQUNOZ0lBSUFCQkFXb2lBRUVnUncwQUMwR2NyUVFnQlVFb2F5SURRWGdnQVd0QkIzRkJBQ0FCUVFocVFRZHhHeUlBYXlJQ05nSUFRYWl0QkNBQUlBRnFJZ0EyQWdBZ0FDQUNRUUZ5TmdJRUlBRWdBMnBCS0RZQ0JFR3NyUVJCK0xBRUtBSUFOZ0lBREFJTElBRWdCMDBnQXlBSFMzSU5BQ0FBS0FJTVFRaHhEUUFnQUNBQ0lBVnFOZ0lFUWFpdEJDQUhRWGdnQjJ0QkIzRkJBQ0FIUVFocVFRZHhHeUlBYWlJQ05nSUFRWnl0QkVHY3JRUW9BZ0FnQldvaUFTQUFheUlBTmdJQUlBSWdBRUVCY2pZQ0JDQUJJQWRxUVNnMkFnUkJySzBFUWZpd0JDZ0NBRFlDQUF3QkMwR2dyUVFvQWdBZ0FVc0VRRUdnclFRZ0FUWUNBQXNnQVNBRmFpRUNRZEN3QkNFQUFrQUNRQUpBQWtBQ1FBSkFBMEFnQWlBQUtBSUFSd1JBSUFBb0FnZ2lBQTBCREFJTEN5QUFMUUFNUVFoeFJRMEJDMEhRc0FRaEFBTkFJQWNnQUNnQ0FDSUNUd1JBSUFJZ0FDZ0NCR29pQkNBSFN3MERDeUFBS0FJSUlRQU1BQXNBQ3lBQUlBRTJBZ0FnQUNBQUtBSUVJQVZxTmdJRUlBRkJlQ0FCYTBFSGNVRUFJQUZCQ0dwQkIzRWJhaUlKSUFoQkEzSTJBZ1FnQWtGNElBSnJRUWR4UVFBZ0FrRUlha0VIY1J0cUlnVWdDV3NnQ0dzaEFpQUlJQWxxSVFZZ0JTQUhSZ1JBUWFpdEJDQUdOZ0lBUVp5dEJFR2NyUVFvQWdBZ0Ftb2lBRFlDQUNBR0lBQkJBWEkyQWdRTUF3c2dCVUdrclFRb0FnQkdCRUJCcEswRUlBWTJBZ0JCbUswRVFaaXRCQ2dDQUNBQ2FpSUFOZ0lBSUFZZ0FFRUJjallDQkNBQUlBWnFJQUEyQWdBTUF3c2dCU2dDQkNJQVFRTnhRUUZHQkVBZ0FFRjRjU0VIQWtBZ0FFSC9BVTBFUUNBRktBSUlJZ01nQUVFRGRpSUFRUU4wUWJpdEJHcEdHaUFESUFVb0Fnd2lBVVlFUUVHUXJRUkJrSzBFS0FJQVFYNGdBSGR4TmdJQURBSUxJQU1nQVRZQ0RDQUJJQU0yQWdnTUFRc2dCU2dDR0NFSUFrQWdCU0FGS0FJTUlnRkhCRUFnQlNnQ0NDSUFJQUUyQWd3Z0FTQUFOZ0lJREFFTEFrQWdCVUVVYWlJQUtBSUFJZ01OQUNBRlFSQnFJZ0FvQWdBaUF3MEFRUUFoQVF3QkN3TkFJQUFoQkNBRElnRkJGR29pQUNnQ0FDSUREUUFnQVVFUWFpRUFJQUVvQWhBaUF3MEFDeUFFUVFBMkFnQUxJQWhGRFFBQ1FDQUZJQVVvQWh3aUEwRUNkRUhBcndScUlnQW9BZ0JHQkVBZ0FDQUJOZ0lBSUFFTkFVR1VyUVJCbEswRUtBSUFRWDRnQTNkeE5nSUFEQUlMSUFoQkVFRVVJQWdvQWhBZ0JVWWJhaUFCTmdJQUlBRkZEUUVMSUFFZ0NEWUNHQ0FGS0FJUUlnQUVRQ0FCSUFBMkFoQWdBQ0FCTmdJWUN5QUZLQUlVSWdCRkRRQWdBU0FBTmdJVUlBQWdBVFlDR0FzZ0JTQUhhaUVGSUFJZ0Iyb2hBZ3NnQlNBRktBSUVRWDV4TmdJRUlBWWdBa0VCY2pZQ0JDQUNJQVpxSUFJMkFnQWdBa0gvQVUwRVFDQUNRUU4ySWdCQkEzUkJ1SzBFYWlFQ0FuOUJrSzBFS0FJQUlnRkJBU0FBZENJQWNVVUVRRUdRclFRZ0FDQUJjallDQUNBQ0RBRUxJQUlvQWdnTElRQWdBaUFHTmdJSUlBQWdCallDRENBR0lBSTJBZ3dnQmlBQU5nSUlEQU1MUVI4aEFDQUNRZi8vL3dkTkJFQWdBa0VJZGlJQUlBQkJnUDQvYWtFUWRrRUljU0lEZENJQUlBQkJnT0FmYWtFUWRrRUVjU0lCZENJQUlBQkJnSUFQYWtFUWRrRUNjU0lBZEVFUGRpQUJJQU55SUFCeWF5SUFRUUYwSUFJZ0FFRVZhblpCQVhGeVFSeHFJUUFMSUFZZ0FEWUNIQ0FHUWdBM0FoQWdBRUVDZEVIQXJ3UnFJUVFDUUVHVXJRUW9BZ0FpQTBFQklBQjBJZ0Z4UlFSQVFaU3RCQ0FCSUFOeU5nSUFJQVFnQmpZQ0FDQUdJQVEyQWhnTUFRc2dBa0VBUVJrZ0FFRUJkbXNnQUVFZlJodDBJUUFnQkNnQ0FDRUJBMEFnQVNJREtBSUVRWGh4SUFKR0RRTWdBRUVkZGlFQklBQkJBWFFoQUNBRElBRkJCSEZxSWdRb0FoQWlBUTBBQ3lBRUlBWTJBaEFnQmlBRE5nSVlDeUFHSUFZMkFnd2dCaUFHTmdJSURBSUxRWnl0QkNBRlFTaHJJZ05CZUNBQmEwRUhjVUVBSUFGQkNHcEJCM0ViSWdCcklnSTJBZ0JCcUswRUlBQWdBV29pQURZQ0FDQUFJQUpCQVhJMkFnUWdBU0FEYWtFb05nSUVRYXl0QkVINHNBUW9BZ0EyQWdBZ0J5QUVRU2NnQkd0QkIzRkJBQ0FFUVNkclFRZHhHMnBCTDJzaUFDQUFJQWRCRUdwSkd5SUNRUnMyQWdRZ0FrSFlzQVFwQWdBM0FoQWdBa0hRc0FRcEFnQTNBZ2hCMkxBRUlBSkJDR28yQWdCQjFMQUVJQVUyQWdCQjBMQUVJQUUyQWdCQjNMQUVRUUEyQWdBZ0FrRVlhaUVBQTBBZ0FFRUhOZ0lFSUFCQkNHb2hBU0FBUVFScUlRQWdBU0FFU1EwQUN5QUNJQWRHRFFNZ0FpQUNLQUlFUVg1eE5nSUVJQWNnQWlBSGF5SUVRUUZ5TmdJRUlBSWdCRFlDQUNBRVFmOEJUUVJBSUFSQkEzWWlBRUVEZEVHNHJRUnFJUUlDZjBHUXJRUW9BZ0FpQVVFQklBQjBJZ0J4UlFSQVFaQ3RCQ0FBSUFGeU5nSUFJQUlNQVFzZ0FpZ0NDQXNoQUNBQ0lBYzJBZ2dnQUNBSE5nSU1JQWNnQWpZQ0RDQUhJQUEyQWdnTUJBdEJIeUVBSUFkQ0FEY0NFQ0FFUWYvLy93ZE5CRUFnQkVFSWRpSUFJQUJCZ1A0L2FrRVFka0VJY1NJQ2RDSUFJQUJCZ09BZmFrRVFka0VFY1NJQmRDSUFJQUJCZ0lBUGFrRVFka0VDY1NJQWRFRVBkaUFCSUFKeUlBQnlheUlBUVFGMElBUWdBRUVWYW5aQkFYRnlRUnhxSVFBTElBY2dBRFlDSENBQVFRSjBRY0N2QkdvaEF3SkFRWlN0QkNnQ0FDSUNRUUVnQUhRaUFYRkZCRUJCbEswRUlBRWdBbkkyQWdBZ0F5QUhOZ0lBSUFjZ0F6WUNHQXdCQ3lBRVFRQkJHU0FBUVFGMmF5QUFRUjlHRzNRaEFDQURLQUlBSVFFRFFDQUJJZ0lvQWdSQmVIRWdCRVlOQkNBQVFSMTJJUUVnQUVFQmRDRUFJQUlnQVVFRWNXb2lBeWdDRUNJQkRRQUxJQU1nQnpZQ0VDQUhJQUkyQWhnTElBY2dCellDRENBSElBYzJBZ2dNQXdzZ0F5Z0NDQ0lBSUFZMkFnd2dBeUFHTmdJSUlBWkJBRFlDR0NBR0lBTTJBZ3dnQmlBQU5nSUlDeUFKUVFocUlRQU1CUXNnQWlnQ0NDSUFJQWMyQWd3Z0FpQUhOZ0lJSUFkQkFEWUNHQ0FISUFJMkFnd2dCeUFBTmdJSUMwR2NyUVFvQWdBaUFDQUlUUTBBUVp5dEJDQUFJQWhySWdFMkFnQkJxSzBFUWFpdEJDZ0NBQ0lDSUFocUlnQTJBZ0FnQUNBQlFRRnlOZ0lFSUFJZ0NFRURjallDQkNBQ1FRaHFJUUFNQXd0QmxJTUVRVEEyQWdCQkFDRUFEQUlMQWtBZ0JVVU5BQUpBSUFRb0Fod2lBa0VDZEVIQXJ3UnFJZ0FvQWdBZ0JFWUVRQ0FBSUFFMkFnQWdBUTBCUVpTdEJDQUpRWDRnQW5keElnazJBZ0FNQWdzZ0JVRVFRUlFnQlNnQ0VDQUVSaHRxSUFFMkFnQWdBVVVOQVFzZ0FTQUZOZ0lZSUFRb0FoQWlBQVJBSUFFZ0FEWUNFQ0FBSUFFMkFoZ0xJQVFvQWhRaUFFVU5BQ0FCSUFBMkFoUWdBQ0FCTmdJWUN3SkFJQU5CRDAwRVFDQUVJQU1nQ0dvaUFFRURjallDQkNBQUlBUnFJZ0FnQUNnQ0JFRUJjallDQkF3QkN5QUVJQWhCQTNJMkFnUWdCaUFEUVFGeU5nSUVJQU1nQm1vZ0F6WUNBQ0FEUWY4QlRRUkFJQU5CQTNZaUFFRURkRUc0clFScUlRSUNmMEdRclFRb0FnQWlBVUVCSUFCMElnQnhSUVJBUVpDdEJDQUFJQUZ5TmdJQUlBSU1BUXNnQWlnQ0NBc2hBQ0FDSUFZMkFnZ2dBQ0FHTmdJTUlBWWdBallDRENBR0lBQTJBZ2dNQVF0Qkh5RUFJQU5CLy8vL0IwMEVRQ0FEUVFoMklnQWdBRUdBL2o5cVFSQjJRUWh4SWdKMElnQWdBRUdBNEI5cVFSQjJRUVJ4SWdGMElnQWdBRUdBZ0E5cVFSQjJRUUp4SWdCMFFROTJJQUVnQW5JZ0FISnJJZ0JCQVhRZ0F5QUFRUlZxZGtFQmNYSkJIR29oQUFzZ0JpQUFOZ0ljSUFaQ0FEY0NFQ0FBUVFKMFFjQ3ZCR29oQWdKQUFrQWdDVUVCSUFCMElnRnhSUVJBUVpTdEJDQUJJQWx5TmdJQUlBSWdCallDQUNBR0lBSTJBaGdNQVFzZ0EwRUFRUmtnQUVFQmRtc2dBRUVmUmh0MElRQWdBaWdDQUNFSUEwQWdDQ0lCS0FJRVFYaHhJQU5HRFFJZ0FFRWRkaUVDSUFCQkFYUWhBQ0FCSUFKQkJIRnFJZ0lvQWhBaUNBMEFDeUFDSUFZMkFoQWdCaUFCTmdJWUN5QUdJQVkyQWd3Z0JpQUdOZ0lJREFFTElBRW9BZ2dpQUNBR05nSU1JQUVnQmpZQ0NDQUdRUUEyQWhnZ0JpQUJOZ0lNSUFZZ0FEWUNDQXNnQkVFSWFpRUFEQUVMQWtBZ0MwVU5BQUpBSUFFb0Fod2lBa0VDZEVIQXJ3UnFJZ0FvQWdBZ0FVWUVRQ0FBSUFRMkFnQWdCQTBCUVpTdEJDQUdRWDRnQW5keE5nSUFEQUlMSUF0QkVFRVVJQXNvQWhBZ0FVWWJhaUFFTmdJQUlBUkZEUUVMSUFRZ0N6WUNHQ0FCS0FJUUlnQUVRQ0FFSUFBMkFoQWdBQ0FFTmdJWUN5QUJLQUlVSWdCRkRRQWdCQ0FBTmdJVUlBQWdCRFlDR0FzQ1FDQURRUTlOQkVBZ0FTQURJQWhxSWdCQkEzSTJBZ1FnQUNBQmFpSUFJQUFvQWdSQkFYSTJBZ1FNQVFzZ0FTQUlRUU55TmdJRUlBa2dBMEVCY2pZQ0JDQURJQWxxSUFNMkFnQWdDZ1JBSUFwQkEzWWlBRUVEZEVHNHJRUnFJUVJCcEswRUtBSUFJUUlDZjBFQklBQjBJZ0FnQlhGRkJFQkJrSzBFSUFBZ0JYSTJBZ0FnQkF3QkN5QUVLQUlJQ3lFQUlBUWdBallDQ0NBQUlBSTJBZ3dnQWlBRU5nSU1JQUlnQURZQ0NBdEJwSzBFSUFrMkFnQkJtSzBFSUFNMkFnQUxJQUZCQ0dvaEFBc2dERUVRYWlRQUlBQUw4Z0lDQW44QmZnSkFJQUpGRFFBZ0FDQUNhaUlEUVFGcklBRTZBQUFnQUNBQk9nQUFJQUpCQTBrTkFDQURRUUpySUFFNkFBQWdBQ0FCT2dBQklBTkJBMnNnQVRvQUFDQUFJQUU2QUFJZ0FrRUhTUTBBSUFOQkJHc2dBVG9BQUNBQUlBRTZBQU1nQWtFSlNRMEFJQUJCQUNBQWEwRURjU0lFYWlJRElBRkIvd0Z4UVlHQ2hBaHNJZ0UyQWdBZ0F5QUNJQVJyUVh4eElnUnFJZ0pCQkdzZ0FUWUNBQ0FFUVFsSkRRQWdBeUFCTmdJSUlBTWdBVFlDQkNBQ1FRaHJJQUUyQWdBZ0FrRU1heUFCTmdJQUlBUkJHVWtOQUNBRElBRTJBaGdnQXlBQk5nSVVJQU1nQVRZQ0VDQURJQUUyQWd3Z0FrRVFheUFCTmdJQUlBSkJGR3NnQVRZQ0FDQUNRUmhySUFFMkFnQWdBa0VjYXlBQk5nSUFJQVFnQTBFRWNVRVljaUlFYXlJQ1FTQkpEUUFnQWExQ2dZQ0FnQkIrSVFVZ0F5QUVhaUVCQTBBZ0FTQUZOd01ZSUFFZ0JUY0RFQ0FCSUFVM0F3Z2dBU0FGTndNQUlBRkJJR29oQVNBQ1FTQnJJZ0pCSDBzTkFBc0xJQUFMRFFBZ0FDZ0NBQ0FCUVFKMGFnc0hBQ0FBUVF4cUN4SUFJQUFRbXdFRVFDQUFLQUlBRHdzZ0FBdUNCQUVEZnlBQ1FZQUVUd1JBSUFBZ0FTQUNFQjhhSUFBUEN5QUFJQUpxSVFNQ1FDQUFJQUZ6UVFOeFJRUkFBa0FnQWtFQlNBUkFJQUFoQWd3QkN5QUFRUU54UlFSQUlBQWhBZ3dCQ3lBQUlRSURRQ0FDSUFFdEFBQTZBQUFnQVVFQmFpRUJJQUpCQVdvaUFpQURUdzBCSUFKQkEzRU5BQXNMQWtBZ0EwRjhjU0lFUWNBQVNRMEFJQUlnQkVGQWFpSUZTdzBBQTBBZ0FpQUJLQUlBTmdJQUlBSWdBU2dDQkRZQ0JDQUNJQUVvQWdnMkFnZ2dBaUFCS0FJTU5nSU1JQUlnQVNnQ0VEWUNFQ0FDSUFFb0FoUTJBaFFnQWlBQktBSVlOZ0lZSUFJZ0FTZ0NIRFlDSENBQ0lBRW9BaUEyQWlBZ0FpQUJLQUlrTmdJa0lBSWdBU2dDS0RZQ0tDQUNJQUVvQWl3MkFpd2dBaUFCS0FJd05nSXdJQUlnQVNnQ05EWUNOQ0FDSUFFb0FqZzJBamdnQWlBQktBSThOZ0k4SUFGQlFHc2hBU0FDUVVCcklnSWdCVTBOQUFzTElBSWdCRThOQVFOQUlBSWdBU2dDQURZQ0FDQUJRUVJxSVFFZ0FrRUVhaUlDSUFSSkRRQUxEQUVMSUFOQkJFa0VRQ0FBSVFJTUFRc2dBQ0FEUVFScklnUkxCRUFnQUNFQ0RBRUxJQUFoQWdOQUlBSWdBUzBBQURvQUFDQUNJQUV0QUFFNkFBRWdBaUFCTFFBQ09nQUNJQUlnQVMwQUF6b0FBeUFCUVFScUlRRWdBa0VFYWlJQ0lBUk5EUUFMQ3lBQ0lBTkpCRUFEUUNBQ0lBRXRBQUE2QUFBZ0FVRUJhaUVCSUFKQkFXb2lBaUFEUncwQUN3c2dBQXNKQUNBQUVENGdBV29MQ1FBZ0FDQUJFS2dMQ3hzQkFYOGpBRUVRYXlJQkpBQWdBQkRxQlNBQlFSQnFKQUFnQUFzUUFDQUFLQUlFSUFBb0FnQnJRUUoxQ3dzQUlBQW9BZ0FReVFJYUN4SUFJQUFFUUNBQUtBSUFFRE1nQUJBekN3c1FBQ0FBS0FJRUlBQW9BZ0JyUVFOMUN4MEFJQUFvQWhnZ0FDZ0NCQ0FBS0FJSUlBQW9BZ3dnQVNBQ0VLNEtDd2NBSUFCQkJHb0xOUUVCZnlNQVFSQnJJZ0lrQUNBQ0lBQW9BZ0EyQWd3Z0FDQUJLQUlBTmdJQUlBRWdBa0VNYWlnQ0FEWUNBQ0FDUVJCcUpBQUxEQUFnQUNBQlFSeHFFSXNFQ3pNQkFYOGdBRUVCSUFBYklRQUNRQU5BSUFBUU9pSUJEUUZCakswRUtBSUFJZ0VFUUNBQkVRc0FEQUVMQ3hBQUFBc2dBUXNOQUNBQUtBSUFJQUZCQlhScUMwVUFJQUVnQUNnQ0NFOEVRRUhBbHdSQmtkVUJFREpCczlZQkVESkI4aVFRTWtIOEFCQTJRZm9wRURKQndOY0JFRElRTlJBQUFBc2dBQ2dDR0NBQUtBSU1JQUZzYWdzSkFDQUFFTGdDSUFBTEd3RUJmMEVLSVFFZ0FCQ2JBUVIvSUFBUWpRSkJBV3NGUVFvTEN3MEFJQUFvQWdBZ0FVRURkR29MRGdBZ0FDQUJJQUVRMEFZUW9Rc0xEd0FnQUNBQklBRVFpUUVRK0FVYUM2OEJBZ0YrQTM4Q1FBSkFJQUFwQTNBaUFWQkZCRUFnQUNrRGVDQUJXUTBCQ3lBQUVMVURJZ1JCZjBvTkFRc2dBRUVBTmdKb1FYOFBDeUFBQW44Z0FDZ0NDQ0lDSUFBcEEzQWlBVkFOQUJvZ0FpQUJJQUFwQTNoQ2Y0VjhJZ0VnQWlBQUtBSUVJZ05yckZrTkFCb2dBeUFCcDJvTE5nSm9JQUFvQWdRaEF5QUNCRUFnQUNBQUtRTjRJQUlnQTJ0QkFXcXNmRGNEZUFzZ0EwRUJheUlBTFFBQUlBUkhCRUFnQUNBRU9nQUFDeUFFQ3pFQUFrQkJzSjRFTFFBQVFRRnhEUUJCc0o0RUVIRkZEUUJCcko0RUVLWU5OZ0lBUWJDZUJCQndDMEdzbmdRb0FnQUxSUUVCZnlNQVFSQnJJZ1VrQUNBQUlBTWdCQkR2QVNFQUlBVkJER29nQlVFSWFpQUJJQUlnQXhEckF5QUFJQVVxQWd3Z0JTb0NDQkN2Q0NFQklBVkJFR29rQUNBQkN3a0FJQUFnQUJEZ0JBc1FBQ0FBS0FJRUlBQW9BZ0JyUVF4dEMwWUFJQUFnQVNvQ0NDQUJLZ0lBSUFJcUFnQ1VJQUVxQWdRZ0Fpb0NCSlNTa2pnQ0FDQUFJQUVxQWhRZ0FTb0NEQ0FDS2dJQWxDQUJLZ0lRSUFJcUFnU1VrcEk0QWdRTEtBRUJmeUFCSUFGQkFXc2lBbkZGQkVBZ0FDQUNjUThMSUFBZ0FVOEVmeUFBSUFGd0JTQUFDd3NHQUNBQUVETUxCd0FnQUVFUWFndWVDd0lGZnc5K0l3QkI0QUJySWdVa0FDQUNRaUNHSUFGQ0lJaUVJUThnQkVJdmhpQURRaEdJaENFTUlBUkMvLy8vLy8vL1A0TWlEVUlQaGlBRFFqR0loQ0VRSUFJZ0JJVkNnSUNBZ0lDQWdJQ0FmNE1oQ2lBQ1F2Ly8vLy8vL3orRElndENJSWdoRVNBTlFoR0lJUklnQkVJd2lLZEIvLzhCY1NFSEFrQUNmeUFDUWpDSXAwSC8vd0Z4SWdsQkFXdEIvZjhCVFFSQVFRQWdCMEVCYTBIKy93RkpEUUVhQ3lBQlVDQUNRdi8vLy8vLy8vLy8vd0NESWc1Q2dJQ0FnSUNBd1AvL0FGUWdEa0tBZ0lDQWdJREEvLzhBVVJ0RkJFQWdBa0tBZ0lDQWdJQWdoQ0VLREFJTElBTlFJQVJDLy8vLy8vLy8vLy8vQUlNaUFrS0FnSUNBZ0lEQS8vOEFWQ0FDUW9DQWdJQ0FnTUQvL3dCUkcwVUVRQ0FFUW9DQWdJQ0FnQ0NFSVFvZ0F5RUJEQUlMSUFFZ0RrS0FnSUNBZ0lEQS8vOEFoWVJRQkVBZ0FpQURoRkFFUUVLQWdJQ0FnSURnLy84QUlRcENBQ0VCREFNTElBcENnSUNBZ0lDQXdQLy9BSVFoQ2tJQUlRRU1BZ3NnQXlBQ1FvQ0FnSUNBZ01ELy93Q0ZoRkFFUUNBQklBNkVJUUpDQUNFQklBSlFCRUJDZ0lDQWdJQ0E0UC8vQUNFS0RBTUxJQXBDZ0lDQWdJQ0F3UC8vQUlRaENnd0NDeUFCSUE2RVVBUkFRZ0FoQVF3Q0N5QUNJQU9FVUFSQVFnQWhBUXdDQ3lBT1F2Ly8vLy8vL3o5WUJFQWdCVUhRQUdvZ0FTQUxJQUVnQ3lBTFVDSUdHM2tnQmtFR2RLMThweUlHUVE5ckVKVUJJQVVwQTFnaUMwSWdoaUFGS1FOUUlnRkNJSWlFSVE4Z0MwSWdpQ0VSUVJBZ0Jtc2hCZ3NnQmlBQ1F2Ly8vLy8vL3o5V0RRQWFJQVZCUUdzZ0F5QU5JQU1nRFNBTlVDSUlHM2tnQ0VFR2RLMThweUlJUVE5ckVKVUJJQVVwQTBnaUFrSVBoaUFGS1FOQUlnTkNNWWlFSVJBZ0FrSXZoaUFEUWhHSWhDRU1JQUpDRVlnaEVpQUdJQWhyUVJCcUN5RUdJQXhDLy8vLy93K0RJZ0lnQVVMLy8vLy9ENE1pQVg0aUV5QURRZytHUW9DQS92OFBneUlESUE5Qy8vLy8vdytESWc1K2ZDSUVRaUNHSWcwZ0FTQURmbndpRENBTlZLMGdBaUFPZmlJVklBTWdDMEwvLy8vL0Q0TWlDMzU4SWhRZ0VFTC8vLy8vRDRNaURTQUJmbndpRUNBRUlCTlVyVUlnaGlBRVFpQ0loSHdpRXlBQ0lBdCtJaFlnQXlBUlFvQ0FCSVFpRDM1OElnTWdEU0FPZm53aUVTQUJJQkpDLy8vLy93ZURRb0NBZ0lBSWhDSUJmbndpRWtJZ2hud2lGM3doQkNBSElBbHFJQVpxUWYvL0FHc2hCZ0pBSUFzZ0RYNGlHQ0FDSUE5K2ZDSUNJQmhVclNBQ0lBSWdBU0FPZm53aUFsYXRmQ0FDSUFJZ0ZDQVZWSzBnRUNBVVZLMThmQ0lDVnExOElBRWdEMzU4SUFFZ0MzNGlDeUFOSUE5K2ZDSUJJQXRVclVJZ2hpQUJRaUNJaEh3Z0FpQUJRaUNHZkNJQklBSlVyWHdnQVNBQklCRWdFbGF0SUFNZ0ZsU3RJQU1nRVZhdGZIeENJSVlnRWtJZ2lJUjhJZ0ZXclh3Z0FTQVFJQk5XclNBVElCZFdyWHg4SWdJZ0FWU3RmQ0lCUW9DQWdJQ0FnTUFBZzFCRkJFQWdCa0VCYWlFR0RBRUxJQXhDUDRnaEF5QUJRZ0dHSUFKQ1A0aUVJUUVnQWtJQmhpQUVRaitJaENFQ0lBeENBWVloRENBRElBUkNBWWFFSVFRTElBWkIvLzhCVGdSQUlBcENnSUNBZ0lDQXdQLy9BSVFoQ2tJQUlRRU1BUXNDZmlBR1FRQk1CRUJCQVNBR2F5SUhRWUFCVHdSQVFnQWhBUXdEQ3lBRlFUQnFJQXdnQkNBR1FmOEFhaUlHRUpVQklBVkJJR29nQWlBQklBWVFsUUVnQlVFUWFpQU1JQVFnQnhEQkFpQUZJQUlnQVNBSEVNRUNJQVVwQXpBZ0JTa0RPSVJDQUZLdElBVXBBeUFnQlNrREVJU0VJUXdnQlNrREtDQUZLUU1ZaENFRUlBVXBBd0FoQWlBRktRTUlEQUVMSUFGQy8vLy8vLy8vUDRNZ0JxMUNNSWFFQ3lBS2hDRUtJQXhRSUFSQ2YxVWdCRUtBZ0lDQWdJQ0FnSUIvVVJ0RkJFQWdDaUFDUWdGOElnRWdBbFN0ZkNFS0RBRUxJQXdnQkVLQWdJQ0FnSUNBZ0lCL2hZUlFSUVJBSUFJaEFRd0JDeUFLSUFJZ0FrSUJnM3dpQVNBQ1ZLMThJUW9MSUFBZ0FUY0RBQ0FBSUFvM0F3Z2dCVUhnQUdva0FBdkpCQUVIZndKQUlBQW9BdFFESWdRb0FoQWlBa0dBZ0FKT0JFQWdCQ2dDRkNFRERBRUxJQVFvQWhRaEF3TkFJQVFnQTBFQmF5SUNOZ0lVQWtBZ0EwRUFTZ1JBSUFJaEF3d0JDMEVBSVFVZ0FDZ0N1QU5GQkVBQ1FDQUFLQUlZSWdJb0FnUU5BQ0FBSUFJb0Fnd1JBUUFOQUNBQUtBSUFJZ05CR1RZQ0ZDQUFJQU1vQWdBUkFBQUxJQUlnQWlnQ0JFRUJhellDQkNBQ0lBSW9BZ0FpQWtFQmFqWUNBQUpBSUFJdEFBQWlCVUgvQVVjTkFBTkFBa0FnQUNnQ0dDSUNLQUlFRFFBZ0FDQUNLQUlNRVFFQURRQWdBQ2dDQUNJRFFSazJBaFFnQUNBREtBSUFFUUFBQ3lBQ0lBSW9BZ1JCQVdzMkFnUWdBaUFDS0FJQUlnSkJBV28yQWdCQi93RWhCU0FDTFFBQUlnSkIvd0ZHRFFBTElBSkZEUUFnQUNBQ05nSzRBMEVBSVFVTElBUW9BaFFoQWdzZ0JDQUNRUWhxSWdNMkFoUWdCQ0FFS0FJTVFRaDBJQVZ5TmdJTUlBSkJkMG9OQUNBRUlBSkJDV29pQXpZQ0ZDQUREUUFnQkVHQWdBSTJBaEJCQUNFREN5QUVJQVFvQWhCQkFYUWlBallDRUNBQ1FZQ0FBa2dOQUFzTElBUWdBaUFCTFFBQUlnQkIvd0J4UVFKMFFmREdBbW9vQWdBaUJVRVFkU0lHYXlJQ05nSVFJQVZCQ0hVaEJ3SkFJQVFvQWd3aUNDQUNJQU4wSWdOT0JFQWdCQ0FHTmdJUUlBUWdDQ0FEYXpZQ0RDQUFRWUFCY1NFRElBSWdCa2dFUUNBQklBTWdCM002QUFBTUFnc2dBU0FESUFWek9nQUFJQUJCZ0FGeklRQU1BUXNnQWtILy93RktEUUFnQUVHQUFYRWhBeUFDSUFaSUJFQWdBU0FESUFWek9nQUFJQUJCZ0FGeklRQU1BUXNnQVNBRElBZHpPZ0FBQ3lBQVFRZDJDeEFBSUFCQjVPd0RJQUVvQWdDM0VCWUxzd0VCQTM4Z0F5Z0NUQm9nQXlBRExRQktJZ1ZCQVdzZ0JYSTZBRW9DZnlBQklBSnNJZ1VnQXlnQ0NDQURLQUlFSWdacklnUkJBVWdOQUJvZ0FDQUdJQVFnQlNBRUlBVkpHeUlFRUQ4YUlBTWdBeWdDQkNBRWFqWUNCQ0FBSUFScUlRQWdCU0FFYXdzaUJBUkFBMEFDUUNBREVLc0VSUVJBSUFNZ0FDQUVJQU1vQWlBUkJBQWlCa0VCYWtFQlN3MEJDeUFGSUFScklBRnVEd3NnQUNBR2FpRUFJQVFnQm1zaUJBMEFDd3NnQWtFQUlBRWJDMWtCQW44akFFRWdheUlCSkFBZ0FVRUFOZ0lNSUFGQnhRSTJBZ2dnQVNBQktRTUlOd01BSUFBQ2Z5QUJRUkJxSWdJZ0FTa0NBRGNDQkNBQ0lBQTJBZ0FnQWdzUWx3d2dBQ2dDQkNFQUlBRkJJR29rQUNBQVFRRnJDeEFBSUFBUWhnVWdBRUc4dXdNMkFnQUx1QUVCQVgwZ0FpQUJFT0FFSVFNZ0FDQUFLZ0lBSUFNZ0FTb0NBSlNUT0FJQUlBQWdBQ29DQkNBRElBRXFBZ1NVa3pnQ0JDQUFJQUFxQWdnZ0F5QUJLZ0lJbEpNNEFnZ2dBQ0FBS2dJTUlBTWdBU29DREpTVE9BSU1JQUFnQUNvQ0VDQURJQUVxQWhDVWt6Z0NFQ0FBSUFBcUFoUWdBeUFCS2dJVWxKTTRBaFFnQUNBQUtnSVlJQU1nQVNvQ0dKU1RPQUlZSUFBZ0FDb0NIQ0FESUFFcUFoeVVremdDSENBQUlBQXFBaUFnQXlBQktnSWdsSk00QWlBTEpRRUNmeU1BUVJCcklnQWtBQ0FBUVFocUVOUURFRzhvQWdBaEFTQUFRUkJxSkFBZ0FRdURBUUVDZnlNQVFSQnJJZ0lrQUNBQUVQZ0NJQUpCQ0dvZ0FCQ2REQ0VBUVpDckJCQkRJQUZOQkVBZ0FVRUJhaENjREF0QmtLc0VJQUVRUENnQ0FBUkFRWkNyQkNBQkVEd29BZ0FReVFJYUN5QUFFTFVCSVFOQmtLc0VJQUVRUENBRE5nSUFJQUFvQWdBaEFTQUFRUUEyQWdBZ0FRUkFJQUVReVFJYUN5QUNRUkJxSkFBTENBQWdBRUVBRUg4TE1RRUJmeU1BUVJCcklnTWtBQ0FESUFFMkFnd2dBQ0FEUVF4cUVJSUJJQUJCQkdvZ0FoQ0NBU0FEUVJCcUpBQWdBQXNLQUNBQUtBSUFFTndHQ3hBQUlBQW9BZ0FRNEFaQkdIUkJHSFVMZ0FNQkJuOGdBQ2dDQkNFR0lBQW9BZ0FoQndKQUFuOGdCeUFBS0FJUUlnVW9BcmdERFFBYUlBSkJHRW9FUUNBQ0lRZ2dCeUVFREFJTEEwQWdCa1VFUUNBRklBVW9BaGdvQWd3UkFRQkZCRUJCQUE4TElBVW9BaGdpQkNnQ0JDRUdJQVFvQWdBaEJ3c2dCMEVCYWlFRUlBWkJBV3NoQmdKQUlBY3RBQUFpQ0VIL0FVWUVRQU5BSUFaRkJFQWdCU0FGS0FJWUtBSU1FUUVBUlFSQVFRQVBDeUFGS0FJWUlnUW9BZ1FoQmlBRUtBSUFJUVFMSUFaQkFXc2hCaUFFTFFBQUlRbEIvd0VoQ0NBRVFRRnFJZ2NoQkNBSlFmOEJSZzBBQ3lBSkRRRWdCeUVFQ3lBSUlBRkJDSFJ5SVFFZ0FrRVJTQ0VKSUFRaEJ5QUNRUWhxSWdnaEFpQUpEUUVNQXdzTElBVWdDVFlDdUFNZ0J3c2hCQ0FDSUFOT0JFQWdBaUVJREFFTElBVW9BdFFES0FJb1JRUkFJQVVvQWdBaUEwSDRBRFlDRkNBRlFYOGdBeWdDQkJFQ0FDQUZLQUxVQTBFQk5nSW9DMEVaSVFnZ0FVRVpJQUpyZENFQkN5QUFJQWcyQWd3Z0FDQUJOZ0lJSUFBZ0JqWUNCQ0FBSUFRMkFnQkJBUXNOQUNBQUtBSUFJQUZCRkd4cUN3MEFJQUFnQVdwQkFXc2dBVzBMQ2dBZ0FDZ0NBRUVJYWdzcEFRRi9Jd0JCRUdzaUFpUUFJQUpCQ0dvZ0FDQUJFSTBGRUc4b0FnQWhBQ0FDUVJCcUpBQWdBQXNIQUNBQUlBQ1VDd3NBSUFBZ0FUWUNBQ0FBQ3g0QkFYOGpBRUVRYXlJQkpBQWdBU0FBRVBNRkVKa0xJQUZCRUdva0FBc2lBUUYvSXdCQkVHc2lBU1FBSUFFZ0FCRHpCUkNiQ3lFQUlBRkJFR29rQUNBQUM3SUJBUVIvQW44Z0FrTUFBQUEva2lJQ2kwTUFBQUJQWFFSQUlBS29EQUVMUVlDQWdJQjRDeUVGSUFBb0FoUWhCa0YvSVFjQ1FBSi9JQUZEQUFBQVA1SWlBWXREQUFBQVQxMEVRQ0FCcUF3QkMwR0FnSUNBZUFzZ0FDZ0NFR29pQ0VFQVNBMEFJQVVnQm1vaUJVRUFTQTBBSUFnZ0FDZ0NDQ0lHVGcwQUlBVWdBQ2dDREU0TkFDQURJQUFvQWdBZ0JTQUdiQ0FJYWtFRGRHb2lBQ29DQURnQ0FDQUVJQUFxQWdRNEFnQkJBQ0VIQ3lBSEN3a0FJQUFnQVJEQkFRdEVBQ0FBSUFGeklnQWdBRUVCZGtIVnF0V3FCWEZySWdCQkFuWkJzK2JNbVFOeElBQkJzK2JNbVFOeGFpSUFRUVIySUFCcVFZK2V2UGdBY1VHQmdvUUliRUVZZGdzc0FRRi9JQUFROEFNZ0FDZ0NBQVJBSUFBUXhRVWdBQkEwR2lBQUtBSUFJUUVnQUJEc0FSb2dBUkF6Q3dzUEFDQUFLQUlBSUFBb0FnUTJBZ1FMQlFBUUFBQUxRQUVCZnlNQVFTQnJJZ0VrQUNBQklBQVF6QUkyQWhBZ0FVRVlhaUFBSUFGQkVHb2dBVUVJYWhDWUNDQUJRUmhxRUd3aEFDQUJRU0JxSkFBZ0FFRUlhZ3NOQUNBQUtBSUFFTnNHR2lBQUN3MEFJQUFvQWdBUTN3WWFJQUFMaGdFQkJYOGpBRUV3YXlJQkpBQWdBQkNmQ0JDTUJTRUNJQUZCSUdvUTJRUWdBVUVnYWhBK0lRTWdBRUVRYWlJRUVENGhCU0FCSUFBUW5naEVBQUFBQUFCQWowQ2lPUU1RSUFFZ0JUWUNEQ0FCUVl6cEFUWUNDQ0FCSUFNMkFnUWdBVUd3eUFBMkFnQWdBa0dHd2dBZ0FSRFVCQ0FCUVNCcUVEa2FJQVFRT1JvZ0FVRXdhaVFBQ3d3QUlBQWdBUkRCQVVFQmN3c0pBQ0FBSUFFUThBb0xMUUFnQWtVRVFDQUFLQUlFSUFFb0FnUkdEd3NnQUNBQlJnUkFRUUVQQ3lBQUVMRUVJQUVRc1FRUW13SkZDeU1CQVg4Z0FDZ0NBQ0VDSUFBZ0FUWUNBQ0FDQkVBZ0FpQUFFRWdvQWdBUkFBQUxDd2tBSUFBZ0FSRGRCZ3NKQUNBQUlBRVE0UVlMREFBZ0FDQUJLQUlBTmdJQUN4QUFJQUFvQWdRZ0FDZ0NBR3RCRkcwTENnQWdBRUVRYWhDREFRc1FBQ0FBS0FJRUlBQW9BZ0JyUVNSdEN4RUFJQUFnQVNBQUtBSUFLQUljRVFNQUN4Z0FJQUF0QUFCQklIRkZCRUFnQVNBQ0lBQVEvZ01hQ3dzSkFDQUFFRWdvQWdBTGtBRUJBMzhnQUNFQkFrQUNRQ0FBUVFOeFJRMEFJQUF0QUFCRkJFQkJBQThMQTBBZ0FVRUJhaUlCUVFOeFJRMEJJQUV0QUFBTkFBc01BUXNEUUNBQklnSkJCR29oQVNBQ0tBSUFJZ05CZjNNZ0EwR0Jnb1FJYTNGQmdJR0NoSGh4UlEwQUN5QURRZjhCY1VVRVFDQUNJQUJyRHdzRFFDQUNMUUFCSVFNZ0FrRUJhaUlCSVFJZ0F3MEFDd3NnQVNBQWF3c0pBQ0FBSUFFUXJBd0xSUUVCZnlNQVFSQnJJZ1VrQUNBRklBSTJBZ3dnQlNBRU5nSUlJQVVnQlVFTWFoREZBU0VDSUFBZ0FTQURJQVVvQWdnUW1BSWhBQ0FDRU1RQklBVkJFR29rQUNBQUM2d0JBUUovQWtBZ0FCQTNSU0FDSUFGclFRVkljZzBBSUFFZ0FoQ2RBeUFDUVFScklRUWdBQkErSWdJZ0FCQTNhaUVGQTBBQ1FDQUNMQUFBSVFBZ0FTQUVUdzBBQWtBZ0FFRUJTQ0FBUWY4QVRuSU5BQ0FCS0FJQUlBSXNBQUJHRFFBZ0EwRUVOZ0lBRHdzZ0FrRUJhaUFDSUFVZ0FtdEJBVW9iSVFJZ0FVRUVhaUVCREFFTEN5QUFRUUZJSUFCQi93Qk9jZzBBSUFJc0FBQWdCQ2dDQUVFQmEwc05BQ0FEUVFRMkFnQUxDem9CQVg4Z0FFS0FnSUNBZ0lDQStMOS9Od01JSUFCQ2dJQ0FnSUNBZ1BpL2Z6Y0RBQ0FBSVFJZ0FFRVFhaUFCRUpnQkdpQUNFS0FJSUFBTENRQWdBU0FBRUk0S0N6Z0JBMzlCQ0JBSklnSWlBeUlCRUtvRklBRkJqT2dETmdJQUlBRkJCR29nQUJDY0N5QURRYnpvQXpZQ0FDQUNRZHpvQTBFTUVBZ0FDd3dBSUFBZ0FTMEFBRG9BQUFzTkFDQUFLQUlFSUFBb0FnQnJDd3dBSUFBZ0FSRGRCa0VCY3dzTUFDQUFJQUVRNFFaQkFYTUxDZ0JCakljREVJOEJBQXRRQVFGK0FrQWdBMEhBQUhFRVFDQUJJQU5CUUdxdGhpRUNRZ0FoQVF3QkN5QURSUTBBSUFJZ0E2MGlCSVlnQVVIQUFDQURhNjJJaENFQ0lBRWdCSVloQVFzZ0FDQUJOd01BSUFBZ0FqY0RDQXZFQVFFQmZ5TUFRU0JySWdJa0FDQUNRUUUyQWhnZ0FpQUJOZ0ljSUFGQmYwb0VRQ0FDSUFFMkFnZ2dBaUFBUWR3QWFpSUFJQUpCQ0dvUWJUWUNFQ0FDRUdNMkFnZ0NRQ0FDUVJCcUlBSkJDR29RY3dSQUlBSWdBQUovSUFKQkNHb2lBQ0FDS0FJY05nSUFJQUFnQWlnQ0dEWUNCQ0FBQ3hDL0NBd0JDeUFDUVJCcUVHd2lBQ0FBS0FJRVFRRnFOZ0lFQ3lBQ1FTQnFKQUFQQzBIQWx3UkJuSW9CRURKQnE0Y0JFREpCb3lVUU1rR2lBaEEyUVpvcUVESkJ0WXdCRURJUU5SQUFBQXVSQkFFRGZ3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUJRWDlLQkVBZ0FDZ0NOQ0lGSUFGTURRRWdBa0YvVEEwQ0lBQW9BamdpQmlBQ1RBMERJQU5CZjB3TkJDQUFLQUk4SWdjZ0Ewd05CU0FFUVg5TURRWWdBQ2dDUUNBRVRBMEhJQUlnQld3Z0FXb2lBU0FBS0FKVUlBTnNhaUFBS0FKWUlBUnNhaUlBSUFRZ0Iyd2dBMm9nQlNBR2JHd2dBV3BLRFFnZ0FBOExRY0NYQkVHbGtRRVFNa0dyaHdFUU1rR2pKUkF5UWFVQkVEWkJtaW9RTWtHZmt3RVFNaEExREFnTFFjQ1hCRUhUbEFFUU1rR3Jod0VRTWtHakpSQXlRYVlCRURaQm1pb1FNa0dma3dFUU1oQTFEQWNMUWNDWEJFRzZsZ0VRTWtHcmh3RVFNa0dqSlJBeVFhY0JFRFpCbWlvUU1rR0xtUUVRTWhBMURBWUxRY0NYQkVIdW13RVFNa0dyaHdFUU1rR2pKUkF5UWFnQkVEWkJtaW9RTWtHTG1RRVFNaEExREFVTFFjQ1hCRUhublFFUU1rR3Jod0VRTWtHakpSQXlRYWtCRURaQm1pb1FNa0dab0FFUU1oQTFEQVFMUWNDWEJFSFBvZ0VRTWtHcmh3RVFNa0dqSlJBeVFhb0JFRFpCbWlvUU1rR1pvQUVRTWhBMURBTUxRY0NYQkVHTHBRRVFNa0dyaHdFUU1rR2pKUkF5UWFzQkVEWkJtaW9RTWtIYnBnRVFNaEExREFJTFFjQ1hCRUhMcVFFUU1rR3Jod0VRTWtHakpSQXlRYXdCRURaQm1pb1FNa0hicGdFUU1oQTFEQUVMUWNDWEJFR3lxd0VRTWtHcmh3RVFNa0dqSlJBeVFiQUJFRFpCbWlvUU1rRzFqQUVRTWhBMUN4QUFBQXNpQVFGL0l3QkJFR3NpQWlRQUlBQWdBU0FCRUlrQkVJVUVJQUpCRUdva0FDQUFDd3NBSUFCQjJKNEVFTVlCQ3drQUlBQWdBVFlDQkFzS0FDQUFMUUFMUVFkMkN3MEFJQUFvQWdBZ0FVRU1iR29MRVFBZ0FDQUJJQUVvQWdBb0FoUVJBZ0FMRHdBZ0FDQUFLQUlBS0FJUUVRRUFDd3NBSUFCQjBKNEVFTVlCQzI4QkFYOGpBRUdBQW1zaUJTUUFJQVJCZ01BRWNTQUNJQU5NY2tVRVFDQUZJQUZCL3dGeElBSWdBMnNpQWtHQUFpQUNRWUFDU1NJQkd4QTdHaUFCUlFSQUEwQWdBQ0FGUVlBQ0VJY0JJQUpCZ0FKcklnSkIvd0ZMRFFBTEN5QUFJQVVnQWhDSEFRc2dCVUdBQW1va0FBc1JBQ0FBSUFBb0FnQkJDR28yQWdBZ0FBc05BQ0FBSUFPVUlBRWdBcFNUQ3cwQUlBQW9BZ0FnQVVFa2JHb0xFQUFnQUNnQ0JDQUFLQUlBYTBFRmRRc1JBQ0FBSUFFZ0FDZ0NBQ2dDTEJFREFBdllDUUlFZndSK0l3QkI4QUJySWdVa0FDQUVRdi8vLy8vLy8vLy8vd0NESVFvQ1FBSkFJQUZDQVgwaUMwSi9VU0FDUXYvLy8vLy8vLy8vL3dDRElna2dBU0FMVnExOFFnRjlJZ3RDLy8vLy8vLy92Ly8vQUZZZ0MwTC8vLy8vLy8rLy8vOEFVUnRGQkVBZ0EwSUJmU0lMUW45U0lBb2dBeUFMVnExOFFnRjlJZ3RDLy8vLy8vLy92Ly8vQUZRZ0MwTC8vLy8vLy8rLy8vOEFVUnNOQVFzZ0FWQWdDVUtBZ0lDQWdJREEvLzhBVkNBSlFvQ0FnSUNBZ01ELy93QlJHMFVFUUNBQ1FvQ0FnSUNBZ0NDRUlRUWdBU0VEREFJTElBTlFJQXBDZ0lDQWdJQ0F3UC8vQUZRZ0NrS0FnSUNBZ0lEQS8vOEFVUnRGQkVBZ0JFS0FnSUNBZ0lBZ2hDRUVEQUlMSUFFZ0NVS0FnSUNBZ0lEQS8vOEFoWVJRQkVCQ2dJQ0FnSUNBNFAvL0FDQUNJQUVnQTRVZ0FpQUVoVUtBZ0lDQWdJQ0FnSUIvaFlSUUlnWWJJUVJDQUNBQklBWWJJUU1NQWdzZ0F5QUtRb0NBZ0lDQWdNRC8vd0NGaEZBTkFTQUJJQW1FVUFSQUlBTWdDb1JDQUZJTkFpQUJJQU9ESVFNZ0FpQUVneUVFREFJTElBTWdDb1JRUlEwQUlBRWhBeUFDSVFRTUFRc2dBeUFCSUFFZ0ExUWdDU0FLVkNBSklBcFJHeUlIR3lFS0lBUWdBaUFIR3lJTFF2Ly8vLy8vL3orRElRa2dBaUFFSUFjYklnSkNNSWluUWYvL0FYRWhDQ0FMUWpDSXAwSC8vd0Z4SWdaRkJFQWdCVUhnQUdvZ0NpQUpJQW9nQ1NBSlVDSUdHM2tnQmtFR2RLMThweUlHUVE5ckVKVUJJQVVwQTJnaENTQUZLUU5nSVFwQkVDQUdheUVHQ3lBQklBTWdCeHNoQXlBQ1F2Ly8vLy8vL3orRElRUWdDRVVFUUNBRlFkQUFhaUFESUFRZ0F5QUVJQVJRSWdjYmVTQUhRUVowclh5bklnZEJEMnNRbFFGQkVDQUhheUVJSUFVcEExZ2hCQ0FGS1FOUUlRTUxJQVJDQTRZZ0EwSTlpSVJDZ0lDQWdJQ0FnQVNFSVFRZ0NVSURoaUFLUWoySWhDRUpJQUlnQzRVaERBSitJQU5DQTRZaUFTQUdJQWhySWdkRkRRQWFJQWRCL3dCTEJFQkNBQ0VFUWdFTUFRc2dCVUZBYXlBQklBUkJnQUVnQjJzUWxRRWdCVUV3YWlBQklBUWdCeERCQWlBRktRTTRJUVFnQlNrRE1DQUZLUU5BSUFVcEEwaUVRZ0JTcllRTElRSWdDVUtBZ0lDQWdJQ0FCSVFoQ1NBS1FnT0dJUU1DUUNBTVFuOVhCRUFnQXlBQ2ZTSUJJQWtnQkgwZ0FpQURWcTE5SWdTRVVBUkFRZ0FoQTBJQUlRUU1Bd3NnQkVMLy8vLy8vLy8vQTFZTkFTQUZRU0JxSUFFZ0JDQUJJQVFnQkZBaUJ4dDVJQWRCQm5TdGZLZEJER3NpQnhDVkFTQUdJQWRySVFZZ0JTa0RLQ0VFSUFVcEF5QWhBUXdCQ3lBQ0lBTjhJZ0VnQWxTdElBUWdDWHg4SWdSQ2dJQ0FnSUNBZ0FpRFVBMEFJQUZDQVlNZ0JFSS9oaUFCUWdHSWhJUWhBU0FHUVFGcUlRWWdCRUlCaUNFRUN5QUxRb0NBZ0lDQWdJQ0FnSCtESVFJZ0JrSC8vd0ZPQkVBZ0FrS0FnSUNBZ0lEQS8vOEFoQ0VFUWdBaEF3d0JDMEVBSVFjQ1FDQUdRUUJLQkVBZ0JpRUhEQUVMSUFWQkVHb2dBU0FFSUFaQi93QnFFSlVCSUFVZ0FTQUVRUUVnQm1zUXdRSWdCU2tEQUNBRktRTVFJQVVwQXhpRVFnQlNyWVFoQVNBRktRTUlJUVFMSUFHblFRZHhJZ1pCQkV1dElBUkNQWVlnQVVJRGlJUWlBWHdpQXlBQlZLMGdCRUlEaUVMLy8vLy8vLzgvZ3lBSHJVSXdob1FnQW9SOElRUUNRQ0FHUVFSR0JFQWdCQ0FEUWdHRElnRWdBM3dpQXlBQlZLMThJUVFNQVFzZ0JrVU5BUXNMSUFBZ0F6Y0RBQ0FBSUFRM0F3Z2dCVUh3QUdva0FBc0VBRUVBQ3pFQkFuMGdBU29DQUNBQUtnSUFJZ09USUFJcUFnUWdBQ29DQkNJRWs1UWdBU29DQkNBRWt5QUNLZ0lBSUFPVGxKTUxDUUFnQUNBQk5nSUFDd2tBSUFBZ0FUb0FDd3RqQUNBQ0tBSUVRYkFCY1NJQ1FTQkdCRUFnQVE4TEFrQWdBa0VRUncwQUFrQUNRQ0FBTFFBQUlnSkJLMnNPQXdBQkFBRUxJQUJCQVdvUEN5QUNRVEJISUFFZ0FHdEJBa2h5RFFBZ0FDMEFBVUVnY2tINEFFY05BQ0FBUVFKcUlRQUxJQUFMSmdFQmZ5TUFRUkJySWdFa0FDQUJRUWhxSUFBUVBoQnZLQUlBSVFBZ0FVRVFhaVFBSUFBTFFRRUNmd0pBSUFKRkRRQURRQ0FCSUFOQkEzUnFLQUlBSWdSRkRRRWdBQ0FFUmdSQUlBRWdBMEVEZEdvb0FnUVBDeUFEUVFGcUlnTWdBa2NOQUFzTFFRQUxmd0lDZndGK0l3QkJFR3NpQXlRQUlBQUNmaUFCUlFSQVFnQU1BUXNnQXlBQklBRkJIM1VpQW1vZ0FuTWlBcTFDQUNBQ1p5SUNRZEVBYWhDVkFTQURLUU1JUW9DQWdJQ0FnTUFBaFVHZWdBRWdBbXV0UWpDR2ZDQUJRWUNBZ0lCNGNhMUNJSWFFSVFRZ0F5a0RBQXMzQXdBZ0FDQUVOd01JSUFOQkVHb2tBQXZjQVFFQmZTQUFLZ0lBSVFJZ0FDQUJLZ0lBT0FJQUlBRWdBamdDQUNBQUtnSUVJUUlnQUNBQktnSUVPQUlFSUFFZ0FqZ0NCQ0FBS2dJSUlRSWdBQ0FCS2dJSU9BSUlJQUVnQWpnQ0NDQUFLZ0lNSVFJZ0FDQUJLZ0lNT0FJTUlBRWdBamdDRENBQUtnSVFJUUlnQUNBQktnSVFPQUlRSUFFZ0FqZ0NFQ0FBS2dJVUlRSWdBQ0FCS2dJVU9BSVVJQUVnQWpnQ0ZDQUFLZ0lZSVFJZ0FDQUJLZ0lZT0FJWUlBRWdBamdDR0NBQUtnSWNJUUlnQUNBQktnSWNPQUljSUFFZ0FqZ0NIQ0FBS2dJZ0lRSWdBQ0FCS2dJZ09BSWdJQUVnQWpnQ0lBc1ZBQ0FBSUFFUXJ3VWdBRUVFYWlBQlFRUnFFRWtMRXdBZ0FDQUJFSndESUFCQkJHb2dBaEJ2R2d1aEFnRURmeU1BUVVCcUlnTWtBQ0FBS0FJQUlnVkJCR3NvQWdBaEJDQUZRUWhyS0FJQUlRVWdBMEVBTmdJVUlBTWdBVFlDRUNBRElBQTJBZ3dnQXlBQ05nSUlRUUFoQVNBRFFSaHFRUUJCSnhBN0dpQUFJQVZxSVFBQ1FDQUVJQUpCQUJCK0JFQWdBMEVCTmdJNElBUWdBMEVJYWlBQUlBQkJBVUVBSUFRb0FnQW9BaFFSREFBZ0FFRUFJQU1vQWlCQkFVWWJJUUVNQVFzZ0JDQURRUWhxSUFCQkFVRUFJQVFvQWdBb0FoZ1JCd0FDUUFKQUlBTW9BaXdPQWdBQkFnc2dBeWdDSEVFQUlBTW9BaWhCQVVZYlFRQWdBeWdDSkVFQlJodEJBQ0FES0FJd1FRRkdHeUVCREFFTElBTW9BaUJCQVVjRVFDQURLQUl3RFFFZ0F5Z0NKRUVCUncwQklBTW9BaWhCQVVjTkFRc2dBeWdDR0NFQkN5QURRVUJySkFBZ0FRdUtBUUVFZnlBQUtBSk1RUUJPSVFNZ0FDZ0NBRUVCY1NJRVJRUkFJQUFvQWpRaUFRUkFJQUVnQUNnQ09EWUNPQXNnQUNnQ09DSUNCRUFnQWlBQk5nSTBDeUFBUVl5TUJDZ0NBRVlFUUVHTWpBUWdBallDQUFzTElBQVFyZ1FhSUFBZ0FDZ0NEQkVCQUJvZ0FDZ0NZQ0lCQkVBZ0FSQXpDd0pBSUFSRkJFQWdBQkF6REFFTElBTkZEUUFMQ3o0QkFuOUJEQkE2SWdJRWZ5QUNJQUFnQVd4QkEzUVFPaUlETmdJQUlBTkZCRUFnQWhBelFRQVBDeUFDSUFFMkFnZ2dBaUFBTmdJRUlBSUZRUUFMQ3hRQkFYOGdBQ2dDQUNFQklBQkJBRFlDQUNBQkN3OEFJQUFvQWdnZ0FDZ0NBRFlDQUFzU0FDQUFFRFFvQWdBZ0FDZ0NBR3RCREcwTEJ3QWdBQ0FCUmdzSEFDQUFFRUlhQ3c4QUlBQWdBQ2dDQUNnQ0RCRUJBQXNSQUNBQUlBRWdBU2dDQUNnQ0hCRUNBQXNSQUNBQUlBRWdBU2dDQUNnQ0dCRUNBQXNUQUNBQUlBRWdBaUFBS0FJQUtBSU1FUVFBQ3ljQkFYOGdBa0VBVGdSL0lBQW9BZ2dnQWtIL0FYRkJBWFJxTHdFQUlBRnhRUUJIQlVFQUN3c0hBQ0FBRURkRkMya0JBMzRnQUNBQ1FpQ0lJZ01nQVVJZ2lDSUVmaUFDUXYvLy8vOFBneUlDSUFGQy8vLy8vdytESWdGK0lnVkNJSWdnQWlBRWZud2lBa0lnaUh3Z0FTQURmaUFDUXYvLy8vOFBnM3dpQVVJZ2lIdzNBd2dnQUNBRlF2Ly8vLzhQZ3lBQlFpQ0doRGNEQUFzTkFDQUFLQUlBSUFFb0FnQkdDd2tBSUFBZ0FSRHZDZ3NJQUNBQVFmOEJjUXNTQUNBQUtBSUFJZ0FFUUNBQUVNNEdHZ3NMRVFBZ0FDQUJLQUlBRU00R05nSUFJQUFMU1FFQ2Z3Si9JQUFvQWdBaUF5RUNJQUVRWUNJQklRQWdBa0VRYWlJQ0VFTWdBRXNFZnlBQ0lBQVFQQ2dDQUVFQVJ3VkJBQXRGQ3dSQUVIY0FDeUFEUVJCcUlBRVFQQ2dDQUFzL0FnSi9BWDRnQUNBQk53TndJQUFnQUNnQ0NDSUNJQUFvQWdRaUEydXNJZ1EzQTNnZ0FDQURJQUduYWlBQ0lBRWdCRk1iSUFJZ0FVSUFVaHMyQW1nTENnQWdBRUV3YTBFS1NRdFBBUUY4SUFBZ0FLSWlBRVNCWGd6OS8vL2Z2NkpFQUFBQUFBQUE4RCtnSUFBZ0FLSWlBVVJDT2dYaFUxV2xQNktnSUFBZ0FhSWdBRVJwVU83Z1FwUDVQcUpFSng0UDZJZkFWcitnb3FDMkMwc0JBbndnQUNBQW9pSUJJQUNpSWdJZ0FTQUJvcUlnQVVTblJqdU1oODNHUHFKRWRPZks0dmtBS3IrZ29pQUNJQUZFc3Z0dWlSQVJnVCtpUkhlc3kxUlZWY1cvb0tJZ0FLQ2d0Z3QzQUNBQUlBRXFBZ0FnQXBRNEFnQWdBQ0FCS2dJRUlBS1VPQUlFSUFBZ0FTb0NDQ0FDbERnQ0NDQUFJQUVxQWd3Z0FwUTRBZ3dnQUNBQktnSVFJQUtVT0FJUUlBQWdBU29DRkNBQ2xEZ0NGQ0FBSUFFcUFoZ2dBcFE0QWhnZ0FDQUJLZ0ljSUFLVU9BSWNJQUFnQVNvQ0lDQUNsRGdDSUFzSkFDQUJJQUlRd1FFTEdRQWdBQ2dDQkNJQUJFQWdBQkRKQWdSQUlBQVFyUXNMQ3dzUkFDQUFJQUFvQWdCQkNHczJBZ0FnQUFzU0FDQUFFRFFvQWdBZ0FDZ0NBR3RCQTNVTEVBQWdBQ0FCUVlDQWdJQjRjallDQ0F1Z0FRRUVmeU1BUVJCcklnY2tBQUpBSUFCRkRRQWdCQ2dDRENFR0lBSWdBV3NpQ0VFQlRnUkFJQUFnQVNBSUVMSUNJQWhIRFFFTElBWWdBeUFCYXlJQmEwRUFJQUVnQmtnYklnRkJBVTRFUUNBQUlBY2dBU0FGRU9nRklnVVFQaUFCRUxJQ0lRWWdCUkE1R2lBQklBWkhEUUVMSUFNZ0Ftc2lBVUVCVGdSQUlBQWdBaUFCRUxJQ0lBRkhEUUVMSUFRUTV3VWdBQ0VKQ3lBSFFSQnFKQUFnQ1F0Q0FRRi9JQUVnQW13aEJDQUVBbjhnQXlnQ1RFRi9UQVJBSUFBZ0JDQURFUDREREFFTElBQWdCQ0FERVA0REN5SUFSZ1JBSUFKQkFDQUJHdzhMSUFBZ0FXNExDZ0JCNk9ZREVJOEJBQXNKQUNBQUlBRVFxd3dMMWdFQkFuOGpBRUVRYXlJRkpBQWdCU0FCTmdJSUFrQWdBQ0FGUVFocUVJQUJCRUFnQWlBQ0tBSUFRUVp5TmdJQVFRQWhBUXdCQ3lBRFFZQVFJQUFRWnlJQkVMMEJSUVJBSUFJZ0FpZ0NBRUVFY2pZQ0FFRUFJUUVNQVFzZ0F5QUJFTFlDSVFFRFFBSkFJQUFRZVJvZ0FVRXdheUVCSUFBZ0JVRUlhaENTQVVVZ0JFRUNTSElOQUNBRFFZQVFJQUFRWnlJR0VMMEJSUTBDSUFSQkFXc2hCQ0FESUFZUXRnSWdBVUVLYkdvaEFRd0JDd3NnQUNBRlFRaHFFSUFCUlEwQUlBSWdBaWdDQUVFQ2NqWUNBQXNnQlVFUWFpUUFJQUVMMWdFQkFuOGpBRUVRYXlJRkpBQWdCU0FCTmdJSUFrQWdBQ0FGUVFocUVJRUJCRUFnQWlBQ0tBSUFRUVp5TmdJQVFRQWhBUXdCQ3lBRFFZQVFJQUFRYUNJQkVMNEJSUVJBSUFJZ0FpZ0NBRUVFY2pZQ0FFRUFJUUVNQVFzZ0F5QUJFTGNDSVFFRFFBSkFJQUFRZWhvZ0FVRXdheUVCSUFBZ0JVRUlhaENUQVVVZ0JFRUNTSElOQUNBRFFZQVFJQUFRYUNJR0VMNEJSUTBDSUFSQkFXc2hCQ0FESUFZUXR3SWdBVUVLYkdvaEFRd0JDd3NnQUNBRlFRaHFFSUVCUlEwQUlBSWdBaWdDQUVFQ2NqWUNBQXNnQlVFUWFpUUFJQUVMUXdFQmZ5TUFRUkJySWdRa0FDQUVJQUUyQWd3Z0JDQUROZ0lJSUFRZ0JFRU1haERGQVNFQklBQWdBaUFFS0FJSUVPTU5JUUFnQVJERUFTQUVRUkJxSkFBZ0FBc3VBQUpBSUFBb0FnUkJ5Z0J4SWdBRVFDQUFRY0FBUmdSQVFRZ1BDeUFBUVFoSERRRkJFQThMUVFBUEMwRUtDL29CQWdOK0FuOGpBRUVRYXlJRkpBQUNmaUFCdlNJRFF2Ly8vLy8vLy8vLy93Q0RJZ0pDZ0lDQWdJQ0FnQWg5UXYvLy8vLy8vLy92L3dCWUJFQWdBa0k4aGlFRUlBSkNCSWhDZ0lDQWdJQ0FnSUE4ZkF3QkN5QUNRb0NBZ0lDQWdJRDQvd0JhQkVBZ0EwSThoaUVFSUFOQ0JJaENnSUNBZ0lDQXdQLy9BSVFNQVFzZ0FsQUVRRUlBREFFTElBVWdBa0lBSUFPblowRWdhaUFDUWlDSXAyY2dBa0tBZ0lDQUVGUWJJZ1pCTVdvUWxRRWdCU2tEQUNFRUlBVXBBd2hDZ0lDQWdJQ0F3QUNGUVl6NEFDQUdhNjFDTUlhRUN5RUNJQUFnQkRjREFDQUFJQUlnQTBLQWdJQ0FnSUNBZ0lCL2c0UTNBd2dnQlVFUWFpUUFDN0lCQVFSL0FuOGdBa01BQUFBL2tpSUNpME1BQUFCUFhRUkFJQUtvREFFTFFZQ0FnSUI0Q3lFRklBQW9BaFFoQmtGL0lRY0NRQUovSUFGREFBQUFQNUlpQVl0REFBQUFUMTBFUUNBQnFBd0JDMEdBZ0lDQWVBc2dBQ2dDRUdvaUNFRUFTQTBBSUFVZ0Jtb2lCVUVBU0EwQUlBZ2dBQ2dDQ0NJR1RnMEFJQVVnQUNnQ0RFNE5BQ0FESUFBb0FnUWdCU0FHYkNBSWFrRURkR29pQUNvQ0FEZ0NBQ0FFSUFBcUFnUTRBZ0JCQUNFSEN5QUhDeWNCQVg4akFFRVFheUlDSkFBZ0FFRUNRYkNGQWtHQWdnSkJ6d0FnQVJBRUlBSkJFR29rQUF2UEFRSUJmd0o5SUFBZ0FTQUJJQUpCQW5RaUEyb2lBaW9DQUl3UXl3RWdBQ0FEYWlJRElBTXFBZ0JEQUFDQVA1STRBZ0FnQUNBQlFTUnFJQUlxQWlTTUVQOEJJQUFnQVVISUFHb2dBaW9DU0l3US93RWdBQ0FCUWV3QWFpQUNLZ0pzakJEL0FTQUFJQUZCa0FGcUlBSXFBcEFCakJEL0FTQUFJQUZCdEFGcUlBSXFBclFCakJEL0FTQUFJQUZCMkFGcUlBSXFBdGdCakJEL0FTQUFJQUZCL0FGcUlBSXFBdndCakJEL0FTQUFFRllpQkVNQUFBQUFYQVJBSUFBZ0FFTUFBSUEvSUFTUklnV1ZFTXNCQ3lBRkN4RUFJQUFnQUVFQmEzRkZJQUJCQWt0eEN3a0FJQUFnQVJEL0RRc3NBUUYvSUFBUTB3SWdBQ2dDQUFSQUlBQVF6QVVnQUJBMEdpQUFLQUlBSVFFZ0FCRFBBUm9nQVJBekN3c1BBQ0FBRURRb0FnQWdBQ2dDQUdzTEVnQWdBQkEwS0FJQUlBQW9BZ0JyUVJSdEM5RURBUU4vSXdCQklHc2lDQ1FBSUFnZ0FqWUNFQ0FJSUFFMkFoZ2dDRUVJYWlBREVFb2dDRUVJYWhDZkFTRUpJQWhCQ0dvUVJDQUVRUUEyQWdCQkFDRUNBa0FEUUNBR0lBZEdJQUp5RFFFQ1FDQUlRUmhxSUFoQkVHb1FnQUVOQUFKQUlBa2dCaWdDQUJDMkFrRWxSZ1JBSUFaQkJHb2lBaUFIUmcwQ1FRQWhDZ0ovSUFrZ0FpZ0NBQkMyQWlJQlFjVUFSaUFCUWY4QmNVRXdSbkpGQkVBZ0JpRUNJQUVNQVFzZ0JrRUlhaUFIUmcwRElBRWhDaUFKSUFZb0FnZ1F0Z0lMSVFFZ0NDQUFJQWdvQWhnZ0NDZ0NFQ0FESUFRZ0JTQUJJQW9nQUNnQ0FDZ0NKQkVPQURZQ0dDQUNRUWhxSVFZTUFRc2dDVUdBd0FBZ0JpZ0NBQkM5QVFSQUEwQUNRQ0FISUFaQkJHb2lCa1lFUUNBSElRWU1BUXNnQ1VHQXdBQWdCaWdDQUJDOUFRMEJDd3NEUUNBSVFSaHFJQWhCRUdvUWtnRkZEUUlnQ1VHQXdBQWdDRUVZYWhCbkVMMEJSUTBDSUFoQkdHb1FlUm9NQUFzQUN5QUpJQWhCR0dvUVp4Q0dBU0FKSUFZb0FnQVFoZ0ZHQkVBZ0JrRUVhaUVHSUFoQkdHb1FlUm9NQVFzZ0JFRUVOZ0lBQ3lBRUtBSUFJUUlNQVFzTElBUkJCRFlDQUFzZ0NFRVlhaUFJUVJCcUVJQUJCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUlLQUlZSVFBZ0NFRWdhaVFBSUFBTDBRTUJBMzhqQUVFZ2F5SUlKQUFnQ0NBQ05nSVFJQWdnQVRZQ0dDQUlRUWhxSUFNUVNpQUlRUWhxRUprQklRa2dDRUVJYWhCRUlBUkJBRFlDQUVFQUlRSUNRQU5BSUFZZ0IwWWdBbklOQVFKQUlBaEJHR29nQ0VFUWFoQ0JBUTBBQWtBZ0NTQUdMQUFBRUxjQ1FTVkdCRUFnQmtFQmFpSUNJQWRHRFFKQkFDRUtBbjhnQ1NBQ0xBQUFFTGNDSWdGQnhRQkdJQUZCL3dGeFFUQkdja1VFUUNBR0lRSWdBUXdCQ3lBR1FRSnFJQWRHRFFNZ0FTRUtJQWtnQml3QUFoQzNBZ3NoQVNBSUlBQWdDQ2dDR0NBSUtBSVFJQU1nQkNBRklBRWdDaUFBS0FJQUtBSWtFUTRBTmdJWUlBSkJBbW9oQmd3QkN5QUpRWURBQUNBR0xBQUFFTDRCQkVBRFFBSkFJQWNnQmtFQmFpSUdSZ1JBSUFjaEJnd0JDeUFKUVlEQUFDQUdMQUFBRUw0QkRRRUxDd05BSUFoQkdHb2dDRUVRYWhDVEFVVU5BaUFKUVlEQUFDQUlRUmhxRUdnUXZnRkZEUUlnQ0VFWWFoQjZHZ3dBQ3dBTElBa2dDRUVZYWhCb0VLTURJQWtnQml3QUFCQ2pBMFlFUUNBR1FRRnFJUVlnQ0VFWWFoQjZHZ3dCQ3lBRVFRUTJBZ0FMSUFRb0FnQWhBZ3dCQ3dzZ0JFRUVOZ0lBQ3lBSVFSaHFJQWhCRUdvUWdRRUVRQ0FFSUFRb0FnQkJBbkkyQWdBTElBZ29BaGdoQUNBSVFTQnFKQUFnQUF1dEFRRUVmeU1BUVJCcklnZ2tBQUpBSUFCRkRRQWdCQ2dDRENFR0lBSWdBV3NpQjBFQlRnUkFJQUFnQVNBSFFRSjFJZ2NRc2dJZ0IwY05BUXNnQmlBRElBRnJRUUoxSWdGclFRQWdBU0FHU0JzaUFVRUJUZ1JBSUFBZ0NDQUJJQVVRdHdZaUJSQStJQUVRc2dJaEJpQUZFRGthSUFFZ0JrY05BUXNnQXlBQ2F5SUJRUUZPQkVBZ0FDQUNJQUZCQW5VaUFSQ3lBaUFCUncwQkN5QUVFT2NGSUFBaENRc2dDRUVRYWlRQUlBa0xGZ0FnQUNBQklBSWdBeUFBS0FJQUtBSXdFUWtBR2dzVUFDQUNCSDhnQUNBQklBSVF2QTBGSUFBTEdnc1FBQ0FDQkVBZ0FDQUJJQUlRUHhvTEMvUUJBUUovSUFJZ0JFZ0VRQ0FBSUFFZ0FpQUVFR2xGQkVCQmZ3OExJQUFvQWd3aEFpQUFLQUlJSVFFTElBUkJBblFpQmtId3hRSnFLQUlBSUFFZ0FpQUVheUlDZFhFaUJTQURJQVpxS0FJQVNnUkFBMEFnQWtFQVRBUkFJQUFnQVNBQ1FRRVFhVVVFUUVGL0R3c2dBQ2dDRENFQ0lBQW9BZ2doQVFzZ0FTQUNRUUZySWdKMlFRRnhJQVZCQVhSeUlnVWdBeUFFUVFGcUlnUkJBblJxS0FJQVNnMEFDd3NnQUNBQ05nSU1JQUFnQVRZQ0NDQUVRUkZPQkVBZ0FDZ0NFQ0lBS0FJQUlnRkIrUUEyQWhRZ0FFRi9JQUVvQWdRUkFnQkJBQThMSUFNb0Fvd0JJQU1nQkVFQ2RHb29Ba2dnQldwcUxRQVJDMmtCQW4wZ0FDQUJLZ0lJSUFJcUFnQWlBeUFCS2dJQWxDQUNLZ0lFSWdRZ0FTb0NCSlNTa2lBQktnSWdJQUVxQWhnZ0E1UWdBU29DSENBRWxKS1NJZ09WT0FJQUlBQWdBU29DRkNBQktnSU1JQUlxQWdDVUlBRXFBaEFnQWlvQ0JKU1NraUFEbFRnQ0JBc1NBQ0FBSUFJMkFnUWdBQ0FCTmdJQUlBQUxEZ0FnQUNBQklBSkJBblFRUHhvTEVnQWdBQkEwS0FJQUlBQW9BZ0JyUVFKMUN4SUFJQUFRTkNnQ0FDQUFLQUlBYTBFa2JRczNBUUYvSXdCQkVHc2lBaVFBSUFJZ0FDZ0NBRFlDQ0NBQ0lBSW9BZ2dnQVVFRGRHbzJBZ2dnQWlnQ0NDRUFJQUpCRUdva0FDQUFDNElCQVFGL0FrQWdBU0FBS0FJUVNRUkFJQUFvQWhRaUF5QUNUUTBCSUFCQkJHb2dBU0FEYkNBQ2FoQk1Ed3RCd0pjRVFmUzNBUkF5UWJHNEFSQXlRZklrRURKQjJnRVFOa0g2S1JBeVFkTzVBUkF5RURVUUFBQUxRY0NYQkVIK3VRRVFNa0d4dUFFUU1rSHlKQkF5UWRzQkVEWkIraWtRTWtISnVnRVFNaEExRUFBQUM2QUNBZ1IvQlh3Z0FDQURRUUowSWdkcUtBSUFJZ2dnQVNBQ1FRSjBJZ2xxS0FJQUlncHNJQUFnQ1dvb0FnQWlDU0FCSUFkcUtBSUFJZ2RzYTdjaER5QUpJQWhydHlFTUlBY2dDbXUzSVEwZ0FrRUJhaUlISVFnRFFDQURJQWRNUlFSQUlBMGdBQ0FIUVFKMElnbHFLQUlBdDZJZ0RDQUJJQWxxS0FJQXQ2S2dJQStnSWc0Z0RxSWlEaUFMSUFzZ0RtTWlDUnNoQ3lBSElBZ2dDUnNoQ0NBSFFRRnFJUWNNQVFzTEFrQWdDeUFOSUEyaUlBd2dES0tnb3lBRVpFRUJjMFVFUUVGL0lRY2dBQ0FCSUFJZ0NDQUVJQVVnQmhEd0FVRUFTQTBCSUFZb0FnQWlBa0VGU2cwQklBVWdBa0VDZEdvZ0NEWUNBQ0FHSUFZb0FnQkJBV28yQWdBZ0FDQUJJQWdnQXlBRUlBVWdCaER3QVVFQVNBMEJDMEVBSVFjTElBY0xEUUFnQUNnQ0FDQUJLQUlBU1FzREFBRUxxQUVBQWtBZ0FVR0FDRTRFUUNBQVJBQUFBQUFBQU9CL29pRUFJQUZCL3c5SUJFQWdBVUgvQjJzaEFRd0NDeUFBUkFBQUFBQUFBT0Ivb2lFQUlBRkIvUmNnQVVIOUYwZ2JRZjRQYXlFQkRBRUxJQUZCZ1hoS0RRQWdBRVFBQUFBQUFBQVFBS0loQUNBQlFZTndTZ1JBSUFGQi9nZHFJUUVNQVFzZ0FFUUFBQUFBQUFBUUFLSWhBQ0FCUVlab0lBRkJobWhLRzBIOEQyb2hBUXNnQUNBQlFmOEhhcTFDTklhL29nc1BBQ0FBSUFBb0FnQW9BaVFSQVFBTEVRQWdBQ0FCSUFFb0FnQW9BaUFSQWdBTEVRQWdBQ0FCSUFFb0FnQW9BaXdSQWdBTERBQWdBRUdDaG9BZ05nQUFDd1FBSUFBTExnRUJmeU1BUVJCcklnRWtBQ0FCUVFocUlBQVFQaUFBRURkQkFuUnFFRzhvQWdBaEFDQUJRUkJxSkFBZ0FBdVBBUUVCZnlBRFFZQVFjUVJBSUFCQkt6b0FBQ0FBUVFGcUlRQUxJQU5CZ0FSeEJFQWdBRUVqT2dBQUlBQkJBV29oQUFzRFFDQUJMUUFBSWdRRVFDQUFJQVE2QUFBZ0FFRUJhaUVBSUFGQkFXb2hBUXdCQ3dzZ0FBSi9RZThBSUFOQnlnQnhJZ0ZCd0FCR0RRQWFRZGdBUWZnQUlBTkJnSUFCY1JzZ0FVRUlSZzBBR2tIa0FFSDFBQ0FDR3dzNkFBQUxLd0VCZnlNQVFSQnJJZ0VrQUNBQlFRaHFJQUFRUGlBQUVEZHFFRzhvQWdBaEFDQUJRUkJxSkFBZ0FBc1dBQ0FBSUFFZ0FpQURJQUFvQWdBb0FpQVJDUUFhQ3lnQkFYOGpBRUVRYXlJREpBQWdBeUFDTmdJTUlBQWdBU0FDRUlNSElRQWdBMEVRYWlRQUlBQUxwZ01DQW44QmZTQUJBbjhnQXhEUEJZNGlCb3REQUFBQVQxMEVRQ0FHcUF3QkMwR0FnSUNBZUFzaUJEWUNBQ0FDQW44Z0EwRUJJQVIwc3BVUW1nSWdBQ29DSEpRUXpnVWlBNHREQUFBQVQxMEVRQ0FEcUF3QkMwR0FnSUNBZUFzaUJEWUNBQ0FFSUFBb0FoUkJBV3RHQkVBZ0FTQUJLQUlBUVFGcU5nSUFJQUpCQURZQ0FFRUFJUVFMQWtBZ0FnSi9JQUVvQWdBaUFrRi9UQVJBSUFGQkFEWUNBRUVBREFFTElBSWdBQ2dDRUNJRlNBMEJJQUVnQlVFQmF6WUNBQ0FBS0FJVVFRRnJDeUlFTmdJQUN3SkFBa0FDUUNBQktBSUFJZ0ZCZjBvRVFDQUJJQUFvQWhCT0RRRWdCRUYvVEEwQ0lBUWdBQ2dDRkU0TkF3OExRY0NYQkVIUzBnQVFNa0hUMXdBUU1rR2RLaEF5UVl3Q0VEWkJoQzhRTWtHZzNRQVFNaEExRUFBQUMwSEFsd1JCa09FQUVESkIwOWNBRURKQm5Tb1FNa0dOQWhBMlFZUXZFREpCbmVVQUVESVFOUkFBQUF0QndKY0VRY0QxQUJBeVFkUFhBQkF5UVowcUVESkJqZ0lRTmtHRUx4QXlRWkw1QUJBeUVEVVFBQUFMUWNDWEJFSEwvQUFRTWtIVDF3QVFNa0dkS2hBeVFZOENFRFpCaEM4UU1rSCsvd0FRTWhBMUVBQUFDNjBCQUNBQUlBQXFBZ0FnQVNvQ0FDQUNsSkk0QWdBZ0FDQUFLZ0lFSUFFcUFnUWdBcFNTT0FJRUlBQWdBQ29DQ0NBQktnSUlJQUtVa2pnQ0NDQUFJQUFxQWd3Z0FTb0NEQ0FDbEpJNEFnd2dBQ0FBS2dJUUlBRXFBaEFnQXBTU09BSVFJQUFnQUNvQ0ZDQUJLZ0lVSUFLVWtqZ0NGQ0FBSUFBcUFoZ2dBU29DR0NBQ2xKSTRBaGdnQUNBQUtnSWNJQUVxQWh3Z0FwU1NPQUljSUFBZ0FDb0NJQ0FCS2dJZ0lBS1VramdDSUFzUEFDQUFJQUFvQWdCQkJHbzJBZ0FMQ3dBZ0FFRVFhaUFCRUdvTEVnQWdBRUVFYWlBQUtBSUFJQUZzRU1FR0N3d0FJQUVnQWlnQ0FEWUNBQXNPQUNBQUlBRW9BZ0EyQWdBZ0FBc3pBUUYvSUFFZ0FCQkRJZ0pMQkVBZ0FDQUJJQUpyRUxRSkR3c2dBU0FDU1FSQUlBQWdBQ2dDQUNBQlFRSjBhaER5QXdzTENRQWdBQkRSQ1NBQUN4SUFJQUFRTkNnQ0FDQUFLQUlBYTBFQmRRc1FBQ0FBS0FJRUlBQW9BZ0JyUVFGMUN4SUFJQUFRTkNnQ0FDQUFLQUlBYTBFRmRRc2tBUUYvSXdCQkVHc2lBU1FBSUFGQkNHb2dBQkJ2S0FJQUlRQWdBVUVRYWlRQUlBQUxGZ0VCZnlBQUVFWWhBU0FBRU13RklBQWdBUkRtQXdzekFRRi9JQUVnQUJCRElnSkxCRUFnQUNBQklBSnJFTlFLRHdzZ0FTQUNTUVJBSUFBZ0FDZ0NBQ0FCUVFKMGFoRHlBd3NMRGdBZ0FDZ0NDRUgvLy8vL0IzRUxWUUVDZjBIWTlBTW9BZ0FpQVNBQVFRTnFRWHh4SWdKcUlRQUNRQ0FDUVFGT1FRQWdBQ0FCVFJzTkFEOEFRUkIwSUFCSkJFQWdBQkFnUlEwQkMwSFk5QU1nQURZQ0FDQUJEd3RCbElNRVFUQTJBZ0JCZndzMEFDQUFLQUlBR2lBQUtBSUFJQUFRdHdGQkRHeHFHaUFBS0FJQUlBQVFWMEVNYkdvYUlBQW9BZ0FnQUJDM0FVRU1iR29hQ3hJQUlBQVFXeWdDQUNBQUtBSUFhMEVDZFFzSEFDQUFRU0JxQ3hrQUlBQVFtd0VFUUNBQUlBRVFtZ0VQQ3lBQUlBRVFxZ0VMQ1FBZ0FDQUJFT01NQ3lrQUlBQkJDSFJCZ0lEOEIzRWdBRUVZZEhJZ0FFRUlka0dBL2dOeElBQkJHSFp5Y2lBQUlBRWJDOXNCQWdGL0FuNUJBU0VFQWtBZ0FFSUFVaUFCUXYvLy8vLy8vLy8vL3dDRElnVkNnSUNBZ0lDQXdQLy9BRllnQlVLQWdJQ0FnSURBLy84QVVSc05BQ0FDUWdCU0lBTkMvLy8vLy8vLy8vLy9BSU1pQmtLQWdJQ0FnSURBLy84QVZpQUdRb0NBZ0lDQWdNRC8vd0JSR3cwQUlBQWdBb1FnQlNBR2hJUlFCRUJCQUE4TElBRWdBNE5DQUZrRVFFRi9JUVFnQUNBQ1ZDQUJJQU5USUFFZ0ExRWJEUUVnQUNBQ2hTQUJJQU9GaEVJQVVnOExRWDhoQkNBQUlBSldJQUVnQTFVZ0FTQURVUnNOQUNBQUlBS0ZJQUVnQTRXRVFnQlNJUVFMSUFRTEVBQWdBRUVnUmlBQVFRbHJRUVZKY2d1TEFnQUNRQ0FBQkg4Z0FVSC9BRTBOQVFKQVFZenpBeWdDQUNnQ0FFVUVRQ0FCUVlCL2NVR0F2d05HRFFNTUFRc2dBVUgvRDAwRVFDQUFJQUZCUDNGQmdBRnlPZ0FCSUFBZ0FVRUdka0hBQVhJNkFBQkJBZzhMSUFGQmdMQURUMEVBSUFGQmdFQnhRWURBQTBjYlJRUkFJQUFnQVVFL2NVR0FBWEk2QUFJZ0FDQUJRUXgyUWVBQmNqb0FBQ0FBSUFGQkJuWkJQM0ZCZ0FGeU9nQUJRUU1QQ3lBQlFZQ0FCR3RCLy84L1RRUkFJQUFnQVVFL2NVR0FBWEk2QUFNZ0FDQUJRUkoyUWZBQmNqb0FBQ0FBSUFGQkJuWkJQM0ZCZ0FGeU9nQUNJQUFnQVVFTWRrRS9jVUdBQVhJNkFBRkJCQThMQzBHVWd3UkJHVFlDQUVGL0JVRUJDdzhMSUFBZ0FUb0FBRUVCQzhBQkFRSi9Jd0JCb0FGcklnUWtBQ0FFUVFocVFaajlBa0dRQVJBL0dnSkFBa0FnQVVFQmEwSC8vLy8vQjA4RVFDQUJEUUZCQVNFQklBUkJud0ZxSVFBTElBUWdBRFlDTkNBRUlBQTJBaHdnQkVGK0lBQnJJZ1VnQVNBQklBVkxHeUlCTmdJNElBUWdBQ0FCYWlJQU5nSWtJQVFnQURZQ0dDQUVRUWhxSUFJZ0EwSDNBVUg0QVJDT0J5RUFJQUZGRFFFZ0JDZ0NIQ0lCSUFFZ0JDZ0NHRVpyUVFBNkFBQU1BUXRCbElNRVFUMDJBZ0JCZnlFQUN5QUVRYUFCYWlRQUlBQUxHZ0FnQUNBQkVJc09JZ0JCQUNBQUxRQUFJQUZCL3dGeFJoc0xrQUlDQW44Q2ZRSkFBa0FnQUx3aUFVR0FnSUFFVDBFQUlBRkJmMG9iUlFSQUlBRkIvLy8vL3dkeFJRUkFRd0FBZ0w4Z0FDQUFsSlVQQ3lBQlFYOU1CRUFnQUNBQWswTUFBQUFBbFE4TElBQkRBQUFBVEpTOElRRkI2SDRoQWd3QkN5QUJRZi8vLy9zSFN3MEJRWUYvSVFKREFBQUFBQ0VBSUFGQmdJQ0EvQU5HRFFFTElBSWdBVUdOOXFzQ2FpSUJRUmQyYXJJaUEwT0FjVEUvbENBQlFmLy8vd054UWZPSjFQa0RhcjVEQUFDQXY1SWlBQ0FEUTlIM0Z6ZVVJQUFnQUVNQUFBQkFrcFVpQXlBQUlBQkRBQUFBUDVTVUlnUWdBeUFEbENJQUlBQWdBSlFpQUVQdTZaRStsRU9xcWlvL2twUWdBQ0FBUXlhZWVENlVReFBPekQ2U2xKS1NsSklnQkpPU2tpRUFDeUFBQzBvQkFuOENRQ0FBTFFBQUlnSkZJQUlnQVMwQUFDSURSM0lOQUFOQUlBRXRBQUVoQXlBQUxRQUJJZ0pGRFFFZ0FVRUJhaUVCSUFCQkFXb2hBQ0FDSUFOR0RRQUxDeUFDSUFOckMva0NBUVovSUFBb0FnUWhCaUFDUWZHVDY5d0RUd1JBSUFBb0FnQkN1SUNBZ0JBM0FoUWdBQ0FBS0FJQUtBSUFFUUFBQzBFSUlBSkJCM0VpQTJ0QkFDQURHeUVESUFGQkFrOEVRQ0FBS0FJQUlnVWdBVFlDR0NBRlFRODJBaFFnQUNBQUtBSUFLQUlBRVFBQUN5QUNJQU5xSVFNQ1FDQUdJQUZCQW5ScUlnZ29BalFpQWdSQUEwQWdBeUFDSWdRb0FnaE5CRUFnQkNFQkRBTUxJQVFvQWdBaUFnMEFDd3RCOEpQcjNBTWdBMnNpQWlBQlFRSjBRZVRHQWtIY3hnSWdCQnRxS0FJQUlnRWdBU0FDU3hzaUFpQURhaUlGUVJCcUlnY1FPaUlCUlFSQUEwQWdBa0hqQUUwRVFDQUFLQUlBUXJpQWdJQWdOd0lVSUFBZ0FDZ0NBQ2dDQUJFQUFBc2dBa0VCZGlJQklRSWdBU0FEYWlJRlFSQnFJZ2NRT2lJQlJRMEFDd3NnQmlBR0tBSk1JQWRxTmdKTUlBRWdCVFlDQ0NBQlFnQTNBd0FnQkVVRVFDQUlJQUUyQWpRTUFRc2dCQ0FCTmdJQUN5QUJJQUVvQWdRaUFDQURhallDQkNBQklBRW9BZ2dnQTJzMkFnZ2dBQ0FCYWtFUWFnc1VBUUYvUVFnUVN5SUJJQUFwQWdBM0F3QWdBUXNOQUNBQUtBSUFFRE1nQUJBekN4UUJBWDlCQkJCTElnRWdBQ2dDQURZQ0FDQUJDdzBBSUFBb0FnUWdBU2dDQkVzTElRQWdBQ2dDQkNBQUVEUW9BZ0JKQkVBZ0FDQUJFSWtERHdzZ0FDQUJFT2tFQ3lFQUlBQW9BZ1FnQUJBMEtBSUFSd1JBSUFBZ0FSQ2lDUThMSUFBZ0FSQ2hDUXNJQUNBQVFmUUFhZ3NMQUNBQUlBRVFnZ0VnQUFzZ0FRRi9JQUFvQWdBaEFpQUFJQUUyQWdBZ0FnUkFJQUFRU0NBQ0VKc0ZDd3N4QVFGL0l3QkJFR3NpQXlRQUlBTWdBVFlDRENBQUlBTkJER29RZ2dFZ0FDQUNLUUlBTndJRUlBTkJFR29rQUNBQUN4SUFJQUFnQWpvQUJDQUFJQUUyQWdBZ0FBc1dBQ0FBSUFFb0FnQTJBZ0FnQUNBQ0xRQUFPZ0FFQ3lBQkFYOGdBQ2dDQUNFQklBQkJBRFlDQUNBQkJFQWdBQkJJSUFFUW13VUxDeWdCQVg4akFFRVFheUlDSkFBZ0FpQUJOZ0lJSUFBZ0FrRUlhaENFQWhvZ0FrRVFhaVFBSUFBTEN3QWdBRUlBTndJQUlBQUxEQUFnQUNBQklBQWdBVW9iQ3lRQUlBQWdBVFlDQUNBQUlBRW9BZ1FpQVRZQ0JDQUFJQUVnQWtFQ2RHbzJBZ2dnQUFzdEFRRi9JQUFnQUNnQ0JCREFCU0FBS0FJQUJFQWdBQ2dDRUJvZ0FDZ0NBQ0VCSUFBUXdnVWFJQUVRTXdzTENnQWdBQ2dDQUJDS0Fnc25BQ0FESUFNb0FnQWdBaUFCYXlJQWF5SUNOZ0lBSUFCQkFVNEVRQ0FDSUFFZ0FCQS9HZ3NMV2dFQ2Z5TUFRUkJySWdJa0FDQUNJQUUyQWd3Z0FTQUFFTmtGSWdOTkJFQWdBQkMzQVNJQUlBTkJBWFpKQkVBZ0FpQUFRUUYwTmdJSUlBSkJDR29nQWtFTWFoQjlLQUlBSVFNTElBSkJFR29rQUNBRER3c1FsQUVBQ3hNQUlBQWdBU0FDSUFBb0FnQW9BakFSQkFBTER3QWdBQ0FBS0FJUUlBRnlFSzROQ3lBQkFYOGpBRUVRYXlJQ0pBQWdBQ0FCSUFFUTBBWVFvZ3NnQWtFUWFpUUFDOFlCQVFaL0l3QkJFR3NpQkNRQUlBQVFTQ2dDQUNFRkFuOGdBaWdDQUNBQUtBSUFheUlEUWYvLy8vOEhTUVJBSUFOQkFYUU1BUXRCZndzaUEwRUVJQU1iSVFNZ0FTZ0NBQ0VHSUFBb0FnQWhCeUFGUWNRQ1JnUi9RUUFGSUFBb0FnQUxJQU1RMndJaUNBUkFJQVZCeEFKSEJFQWdBQkMxQVJvTElBUkJ3d0kyQWdRZ0FDQUVRUWhxSUFnZ0JFRUVhaEJtSWdVUW9RWWdCUkJsSUFFZ0FDZ0NBQ0FHSUFkcmFqWUNBQ0FDSUFBb0FnQWdBMEY4Y1dvMkFnQWdCRUVRYWlRQUR3c1Fkd0FMRXdBZ0FDQUJRUUFnQUNnQ0FDZ0NOQkVFQUFzVEFDQUFJQUZCQUNBQUtBSUFLQUlrRVFRQUN5OEJBWDhqQUVFUWF5SUJKQUFnQUVJQU53SUFJQUZCQURZQ0RDQUFRUWhxSUFGQkRHb1FuQU1nQVVFUWFpUUFDL0lDQVFKL0l3QkJFR3NpQ2lRQUlBb2dBRFlDREFKQUFrQUNRQ0FES0FJQUlBSkhEUUJCS3lFTElBQWdDU2dDWUVjRVFFRXRJUXNnQ1NnQ1pDQUFSdzBCQ3lBRElBSkJBV28yQWdBZ0FpQUxPZ0FBREFFTElBWVFOMFVnQUNBRlIzSkZCRUJCQUNFQUlBZ29BZ0FpQVNBSGEwR2ZBVW9OQWlBRUtBSUFJUUFnQ0NBQlFRUnFOZ0lBSUFFZ0FEWUNBQXdCQzBGL0lRQWdDU0FKUWVnQWFpQUtRUXhxRUk0RUlBbHJJZ1pCM0FCS0RRRWdCa0VDZFNFRkFrQUNRQUpBSUFGQkNHc09Bd0FDQUFFTElBRWdCVW9OQVF3REN5QUJRUkJISUFaQjJBQkljZzBBSUFNb0FnQWlBU0FDUmlBQklBSnJRUUpLY2cwQ0lBRkJBV3N0QUFCQk1FY05Ba0VBSVFBZ0JFRUFOZ0lBSUFNZ0FVRUJhallDQUNBQklBVkJrTFVEYWkwQUFEb0FBQXdDQ3lBRElBTW9BZ0FpQUVFQmFqWUNBQ0FBSUFWQmtMVURhaTBBQURvQUFDQUVJQVFvQWdCQkFXbzJBZ0JCQUNFQURBRUxRUUFoQUNBRVFRQTJBZ0FMSUFwQkVHb2tBQ0FBQ3dzQUlBQkJpSjhFRU1ZQkMrNENBUU4vSXdCQkVHc2lDaVFBSUFvZ0FEb0FEd0pBQWtBQ1FDQURLQUlBSUFKSERRQkJLeUVMSUFCQi93RnhJZ3dnQ1MwQUdFY0VRRUV0SVFzZ0NTMEFHU0FNUncwQkN5QURJQUpCQVdvMkFnQWdBaUFMT2dBQURBRUxJQVlRTjBVZ0FDQUZSM0pGQkVCQkFDRUFJQWdvQWdBaUFTQUhhMEdmQVVvTkFpQUVLQUlBSVFBZ0NDQUJRUVJxTmdJQUlBRWdBRFlDQUF3QkMwRi9JUUFnQ1NBSlFScHFJQXBCRDJvUWtnUWdDV3NpQlVFWFNnMEJBa0FDUUFKQUlBRkJDR3NPQXdBQ0FBRUxJQUVnQlVvTkFRd0RDeUFCUVJCSElBVkJGa2h5RFFBZ0F5Z0NBQ0lCSUFKR0lBRWdBbXRCQWtweURRSWdBVUVCYXkwQUFFRXdSdzBDUVFBaEFDQUVRUUEyQWdBZ0F5QUJRUUZxTmdJQUlBRWdCVUdRdFFOcUxRQUFPZ0FBREFJTElBTWdBeWdDQUNJQVFRRnFOZ0lBSUFBZ0JVR1F0UU5xTFFBQU9nQUFJQVFnQkNnQ0FFRUJhallDQUVFQUlRQU1BUXRCQUNFQUlBUkJBRFlDQUFzZ0NrRVFhaVFBSUFBTEN3QWdBRUdBbndRUXhnRUxDUUFnQUNBQkVMY05DdzhBSUFBZ0FDZ0NBQ2dDSEJFQkFBdnVEQUVJZnlNQVFSQnJJZ1FrQUNBRUlBQTJBZ3dDUUNBQVFkTUJUUVJBUWFDSEEwSGdpQU1nQkVFTWFoRDVCaWdDQUNFQURBRUxJQUJCZkU4RVFCQjNBQXNnQkNBQUlBQkIwZ0Z1SWdkQjBnRnNJZ05yTmdJSVFlQ0lBMEdnaWdNZ0JFRUlhaEQ1QmtIZ2lBTnJRUUoxSVFVQ1FBTkFJQVZCQW5SQjRJZ0RhaWdDQUNBRGFpRUFRUVVoQXlBR0lRRUNRQUpBQTBBZ0FTRUdJQU5CTDBZRVFFSFRBU0VEQTBBZ0FDQURiaUlCSUFOSkRRUWdBQ0FCSUFOc1JnMERJQUFnQTBFS2FpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFTWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFUWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFU2FpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFV2FpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFY2FpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFZWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFa2FpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFb2FpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFcWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFdWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFMGFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFNmFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBFOGFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBIQ0FHb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQnhnQnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFjZ0FhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwSE9BR29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkIwZ0JxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRZGdBYWlJQmJpSUNJQUZKRFFRZ0FDQUJJQUpzUmcwRElBQWdBMEhnQUdvaUFXNGlBaUFCU1EwRUlBQWdBU0FDYkVZTkF5QUFJQU5CNUFCcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUWVZQWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBIcUFHb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQjdBQnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFmQUFhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwSDRBR29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkIvZ0JxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRWUlCYWlJQmJpSUNJQUZKRFFRZ0FDQUJJQUpzUmcwRElBQWdBMEdJQVdvaUFXNGlBaUFCU1EwRUlBQWdBU0FDYkVZTkF5QUFJQU5CaWdGcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVk0QmFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBHVUFXb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQmxnRnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFad0JhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwR2lBV29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkJwZ0ZxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRYWdCYWlJQmJpSUNJQUZKRFFRZ0FDQUJJQUpzUmcwRElBQWdBMEdzQVdvaUFXNGlBaUFCU1EwRUlBQWdBU0FDYkVZTkF5QUFJQU5Cc2dGcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUWJRQmFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBHNkFXb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQnZnRnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFjQUJhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwSEVBV29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkJ4Z0ZxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRZEFCYWlJQmJpSUNJQUZKRFFRZ0EwSFNBV29oQXlBQUlBRWdBbXhIRFFBTERBSUxJQUFnQTBFQ2RFR2dod05xS0FJQUlnRnVJZ0lnQVd3aENDQUJJQUpMSWdKRkJFQWdBQ0FHSUFJYklRRWdBMEVCYWlFRElBQWdDRWNOQVFzTElBSWdBQ0FJUjNJTkF3dEJBQ0FGUVFGcUlnQWdBRUV3UmlJQUd5RUZJQUFnQjJvaUIwSFNBV3doQXd3QkN3c2dCQ0FBTmdJTURBRUxJQVFnQURZQ0RDQUFJQVlnQWhzaEFBc2dCRUVRYWlRQUlBQUxaQUlCZndGK0l3QkJFR3NpQWlRQUlBQUNmaUFCUlFSQVFnQU1BUXNnQWlBQnJVSUFJQUZuSWdGQjBRQnFFSlVCSUFJcEF3aENnSUNBZ0lDQXdBQ0ZRWjZBQVNBQmE2MUNNSVo4SVFNZ0Fpa0RBQXMzQXdBZ0FDQUROd01JSUFKQkVHb2tBQXRRQVFGK0FrQWdBMEhBQUhFRVFDQUNJQU5CUUdxdGlDRUJRZ0FoQWd3QkN5QURSUTBBSUFKQndBQWdBMnV0aGlBQklBT3RJZ1NJaENFQklBSWdCSWdoQWdzZ0FDQUJOd01BSUFBZ0FqY0RDQXVEQVFJRGZ3RitBa0FnQUVLQWdJQ0FFRlFFUUNBQUlRVU1BUXNEUUNBQlFRRnJJZ0VnQUNBQVFncUFJZ1ZDQ241OXAwRXdjam9BQUNBQVF2Ly8vLytmQVZZaEFpQUZJUUFnQWcwQUN3c2dCYWNpQWdSQUEwQWdBVUVCYXlJQklBSWdBa0VLYmlJRFFRcHNhMEV3Y2pvQUFDQUNRUWxMSVFRZ0F5RUNJQVFOQUFzTElBRUxKQUVCZnlNQVFSQnJJZ01rQUNBRElBSTJBZ3dnQUNBQklBSVErQTBnQTBFUWFpUUFDeDBBSUFBUWdnNGlBSXREQUFBQVQxMEVRQ0FBcUE4TFFZQ0FnSUI0Q3ljQkFuOGdBU2dDQUNFQ0l3QkJFR3NpQXlRQUlBQWdBVUVFYWlBQ0VJVUVJQU5CRUdva0FBc1ZBQ0FBUXdBQWdEOGdBU0FCUXdBQUFBQmJHNVVMSWdBZ0FDQUJLZ0lBSUFJcUFnQ1RPQUlBSUFBZ0FTb0NCQ0FDS2dJRWt6Z0NCQXNSQUNBQUVPWUVJQUVRNWdRZ0FoQ1dCUXNtQVFGL0lBQkJCR29RekFNaUFVRi9SZ1JBSUFBZ0FDZ0NBQ2dDQ0JFQUFBc2dBVUYvUmd0cUFRSi9Jd0JCRUdzaUJDUUFJQVJCQURZQ0RDQUFRUXhxSUFSQkRHb2dBeEN4QVNBQkJFQWdBQ2dDRUJvZ0FSRFBBeUVGQ3lBQUlBVTJBZ0FnQUNBRklBSkJBblJxSWdJMkFnZ2dBQ0FDTmdJRUlBQVFQU0FGSUFGQkFuUnFOZ0lBSUFSQkVHb2tBQ0FBQ3k0QkFYOGdBQ2dDQkNBQktBSUlFTFFCSWdJRVFDQUNJQUFnQVJESEEwRi9TZ1JBSUFJUEN5QUNFRVVMUVFBTEp3RUJmeU1BUVJCcklnRWtBQ0FCUVFocUlBQVFieG9nQVNnQ0NDRUFJQUZCRUdva0FDQUFDeG9BSUFBUXFnVWdBRUdrNEFFMkFnQWdBRUVFYWlBQkVKY0RDOXNCQVFGL0l3QkJFR3NpQXlRQUlBRW9BZ0JCQWtZRVFBSkFBa0FDUUFKQUFrQWdBaWdDQUE0REFRTUFBZ3NnQVNnQ0dDQUFRU3hxUVFBUVBDQUNLQUlZSUFJb0FnUWdBaWdDQ0JDTUNnd0RDMEVRRUFraUFDQURRZmY2QUJDWUFSRE5BaUFBUWN6ZkFVRU9FQWdBQzBFUUVBa2lBQ0FEUWJ6OUFCQ1lBUkROQWlBQVFjemZBVUVPRUFnQUN5QUJLQUlZSUFBb0FpQWdBaWdDR0NBQ0tBSUVJQUlvQWdnUWpRb0xJQU5CRUdva0FBOExRY0NYQkVIeDh3QVFNa0hkR1JBeVFma2tFREpCNVFJUU5rSDlLUkF5UWFuM0FCQXlFRFVRQUFBTERBQWdBU0FDS1FJQU53SUFDeXNBSUFBb0FnQWFJQUFvQWdBZ0FCQzNBVUVNYkdvYUlBQW9BZ0FhSUFBb0FnQWdBQkJYUVF4c2Fob0xVQUVCZnlBQUVQQURJQUFRTkNBQUtBSUFJQUFvQWdRZ0FVRUVhaUlDRUxBQ0lBQWdBaEJKSUFCQkJHb2dBVUVJYWhCSklBQVFOQ0FCRUQwUVNTQUJJQUVvQWdRMkFnQWdBQ0FBRUVNUWhnTUxXZ0VDZnlNQVFSQnJJZ0lrQUNBQ0lBRTJBZ3dnQVNBQUVPSURJZ05OQkVBZ0FCRHNBU0lBSUFOQkFYWkpCRUFnQWlBQVFRRjBOZ0lJSUFKQkNHb2dBa0VNYWhCOUtBSUFJUU1MSUFKQkVHb2tBQ0FERHdzUWxBRUFDelFBSUFBb0FnQWFJQUFvQWdBZ0FCRFBBVUVEZEdvYUlBQW9BZ0FnQUJCR1FRTjBhaG9nQUNnQ0FDQUFFTThCUVFOMGFob0xDZ0FnQUNnQ0JCQ0tBZ3NqQVFGOUFrQWdBRU1BQUFBQVhRMEFJQUVnQUNJQ1hVRUJjdzBBSUFFaEFnc2dBZ3NoQUNBQUtBSUVJQUFRTkNnQ0FFY0VRQ0FBSUFFUXZnb1BDeUFBSUFFUXZRb0xPQUVCZlNBQVFRRWdCSFN5SWdVZ0FwUWdCRUVCYTdjUWdRNUVBQUFBQUFBQTRMK2d0aUlDa2pnQ0FDQUJJQVVnQTVRZ0FwSTRBZ0FMSkFBZ0FDQUJOZ0lBSUFBZ0FTZ0NCQ0lCTmdJRUlBQWdBU0FDUVF4c2FqWUNDQ0FBQ3lRQUlBQkJDMDhFZnlBQVFSQnFRWEJ4SWdBZ0FFRUJheUlBSUFCQkMwWWJCVUVLQ3d2V0FnRUJmd0pBSUFBZ0FVWU5BQ0FCSUFCcklBSnJRUUFnQWtFQmRHdE5CRUFnQUNBQklBSVFQeG9QQ3lBQUlBRnpRUU54SVFNQ1FBSkFJQUFnQVVrRVFDQUREUUlnQUVFRGNVVU5BUU5BSUFKRkRRUWdBQ0FCTFFBQU9nQUFJQUZCQVdvaEFTQUNRUUZySVFJZ0FFRUJhaUlBUVFOeERRQUxEQUVMQWtBZ0F3MEFJQUFnQW1wQkEzRUVRQU5BSUFKRkRRVWdBQ0FDUVFGcklnSnFJZ01nQVNBQ2FpMEFBRG9BQUNBRFFRTnhEUUFMQ3lBQ1FRTk5EUUFEUUNBQUlBSkJCR3NpQW1vZ0FTQUNhaWdDQURZQ0FDQUNRUU5MRFFBTEN5QUNSUTBDQTBBZ0FDQUNRUUZySWdKcUlBRWdBbW90QUFBNkFBQWdBZzBBQ3d3Q0N5QUNRUU5ORFFBRFFDQUFJQUVvQWdBMkFnQWdBVUVFYWlFQklBQkJCR29oQUNBQ1FRUnJJZ0pCQTBzTkFBc0xJQUpGRFFBRFFDQUFJQUV0QUFBNkFBQWdBRUVCYWlFQUlBRkJBV29oQVNBQ1FRRnJJZ0lOQUFzTEM0SUJBUUovSUFCRkJFQWdBUkE2RHdzZ0FVRkFUd1JBUVpTREJFRXdOZ0lBUVFBUEN5QUFRUWhyUVJBZ0FVRUxha0Y0Y1NBQlFRdEpHeENFQ3lJQ0JFQWdBa0VJYWc4TElBRVFPaUlDUlFSQVFRQVBDeUFDSUFCQmZFRjRJQUJCQkdzb0FnQWlBMEVEY1JzZ0EwRjRjV29pQXlBQklBRWdBMHNiRUQ4YUlBQVFNeUFDQ3gwQUlBQkIvLy8vL3dOTEJFQkIwT1FERUk4QkFBc2dBRUVDZEJCTEN5UUFJQUJCQWs4RWZ5QUFRUVJxUVh4eElnQWdBRUVCYXlJQUlBQkJBa1liQlVFQkN3c1BBQ0FBSUFBb0FnQkJBV28yQWdBTFBRRUJmeU1BUVJCcklnTWtBQ0FEUVFocUlBRVFTaUFDSUFOQkNHb1F1Z0lpQVJDZUFUWUNBQ0FBSUFFUW5RRWdBMEVJYWhCRUlBTkJFR29rQUFzSkFDQUFJQUVROUF3TFBRRUJmeU1BUVJCcklnTWtBQ0FEUVFocUlBRVFTaUFDSUFOQkNHb1F2QUlpQVJDZUFUb0FBQ0FBSUFFUW5RRWdBMEVJYWhCRUlBTkJFR29rQUF2dEFRSUJmd1I5SXdCQk1Hc2lCaVFBQW44Z0FBUkFJQUJCQ0dvZ0FTQUdFUDRDSUFCQnVBRnFJQVlxQWd3Z0Jpb0NBQ0FDbENBR0tnSUVJQU9Va3BJZ0Jpb0NMQ0FHS2dJZ0lBS1VJQVlxQWlRZ0E1U1NraUlIbFNBR0tnSWNJQVlxQWhBZ0FwUWdCaW9DRkNBRGxKS1NJQWVWSUFRZ0JSQnlRUjkxREFFTElBRXFBaHdoQnlBQktnSVVJUWdnQVNvQ0VDRUpJQVFnQVNvQ0RDQUJLZ0lBSUFLVUlBRXFBZ1FnQTVTU2tpQUJLZ0lzSUFFcUFpQWdBcFFnQVNvQ0pDQURsSktTSWdxVk9BSUFJQVVnQnlBSklBS1VJQWdnQTVTU2tpQUtsVGdDQUVFQUN5RUJJQVpCTUdva0FDQUJDNDBCQVFGL0FrQWdBQ2dDQkNJQklBRW9BZ0JCREdzb0FnQnFLQUlZUlEwQUlBQW9BZ1FpQVNBQktBSUFRUXhyS0FJQWFoQ2JCRVVOQUNBQUtBSUVJZ0VnQVNnQ0FFRU1heWdDQUdvb0FnUkJnTUFBY1VVTkFDQUFLQUlFSWdFZ0FTZ0NBRUVNYXlnQ0FHb29BaGdRNVFKQmYwY05BQ0FBS0FJRUlnQWdBQ2dDQUVFTWF5Z0NBR3BCQVJDekFnc0xDZ0FnQUJDZkJCb2dBQXNQQUNBQUlBQW9BZ0FvQWhnUkFRQUxKd0VDZndOQUlBQWdBUkQxRFNJQ0JFQWdBQzBBQUNJRFFRcEdJQU5CSTBaeURRRUxDeUFDQzRjQkFRTi9Jd0JCRUdzaUFpUUFBa0FDUUVHVS9RSWdBU3dBQUJDWkFrVUVRRUdVZ3dSQkhEWUNBQXdCQ3lBQkVPRU5JUVFnQWtHMkF6WUNBQ0FBSUFSQmdJQUNjaUFDRUNjaUFFR0JZRThFUUVHVWd3UkJBQ0FBYXpZQ0FFRi9JUUFMSUFCQkFFZ05BU0FBSUFFUStnMGlBdzBCSUFBUUVSb0xRUUFoQXdzZ0FrRVFhaVFBSUFNTGtnRUJBM3hFQUFBQUFBQUE4RDhnQUNBQW9pSUNSQUFBQUFBQUFPQS9vaUlEb1NJRVJBQUFBQUFBQVBBL0lBU2hJQU9oSUFJZ0FpQUNJQUpFa0JYTEdhQUIrajZpUkhkUndSWnN3VmEvb0tKRVRGVlZWVlZWcFQrZ29pQUNJQUtpSWdNZ0E2SWdBaUFDUk5RNGlMN3ArcWk5b2tURXNiUzludTRoUHFDaVJLMVNuSUJQZnBLK29LS2dvaUFBSUFHaW9hQ2dDNWtCQVFOOElBQWdBS0lpQXlBRElBT2lvaUFEUkh6VnoxbzYyZVU5b2tUcm5DdUs1dVZhdnFDaUlBTWdBMFI5L3JGWDR4M0hQcUpFMVdIQkdhQUJLcitnb2tTbStCQVJFUkdCUDZDZ0lRVWdBeUFBb2lFRUlBSkZCRUFnQkNBRElBV2lSRWxWVlZWVlZjVy9vS0lnQUtBUEN5QUFJQU1nQVVRQUFBQUFBQURnUDZJZ0JDQUZvcUdpSUFHaElBUkVTVlZWVlZWVnhUK2lvS0VMcHdJQkJYOGdBQ2dDMUFNaEFpQUFJQUFvQXRBREtBSUlFUUVBUlFSQUlBQW9BZ0FpQVVFWk5nSVVJQUFnQVNnQ0FCRUFBQXNnQUNnQzFBSkJBVTRFUUFOQUlBQWdBMEVDZENJRmFpZ0MyQUloQkFKQUFrQWdBQ2dDNEFFRVFDQUFLQUtjQXcwQklBQW9BcVFERFFJTElBSWdCQ2dDRkVFQ2RHb29BandpQVVJQU53QUFJQUZDQURjQU9DQUJRZ0EzQURBZ0FVSUFOd0FvSUFGQ0FEY0FJQ0FCUWdBM0FCZ2dBVUlBTndBUUlBRkNBRGNBQ0NBQ0lBVnFJZ0ZCQURZQ0tDQUJRUUEyQWhnZ0FDZ0M0QUZGQkVBZ0FDZ0N0QU1OQVF3Q0N5QUFLQUtjQTBVTkFRc2dBaUFFS0FJWVFRSjBhaWdDZkVFQVFZQUNFRHNhQ3lBRFFRRnFJZ01nQUNnQzFBSklEUUFMQ3lBQ1FYQTJBaFFnQWtJQU53SU1JQUlnQUNnQ21BSTJBamdMRVFBZ0FFVUVRQThMSUFBZ0FUa0RnQUVMeVFvQkNuOGdBQ2dDR0NJR0tBSUVJUVFnQmlnQ0FDRUZJQUFnQXpZQzVBRWdBQ0FDTmdMZ0FTQUFJQUUyQXR3QkFrQWdCRVVFUUNBQUlBWW9BZ3dSQVFCRkRRRWdCaWdDQUNFRklBWW9BZ1FoQkFzZ0JTMEFBQ0VEQW44Z0JVRUJhaUFFUVFGcklnRU5BQm9nQUNBR0tBSU1FUUVBUlEwQklBWW9BZ1FoQVNBR0tBSUFDeUlFTFFBQUlRY2dBQUovSUFSQkFXb2dBVUVCYXlJRkRRQWFJQUFnQmlnQ0RCRUJBRVVOQVNBR0tBSUVJUVVnQmlnQ0FBc2lCQzBBQURZQzFBRWdBQUovSUFSQkFXb2dCVUVCYXlJRkRRQWFJQUFnQmlnQ0RCRUJBRVVOQVNBR0tBSUVJUVVnQmlnQ0FBc2lCQzBBQUVFSWRDSUJOZ0lnSUFBQ2Z5QUVRUUZxSUFWQkFXc2lCUTBBR2lBQUlBWW9BZ3dSQVFCRkRRRWdBQ2dDSUNFQklBWW9BZ1FoQlNBR0tBSUFDeUlFTFFBQUlBRnFOZ0lnSUFBQ2Z5QUVRUUZxSUFWQkFXc2lCUTBBR2lBQUlBWW9BZ3dSQVFCRkRRRWdCaWdDQkNFRklBWW9BZ0FMSWdRdEFBQkJDSFFpQVRZQ0hDQUFBbjhnQkVFQmFpQUZRUUZySWdVTkFCb2dBQ0FHS0FJTUVRRUFSUTBCSUFBb0Fod2hBU0FHS0FJRUlRVWdCaWdDQUFzaUJDMEFBQ0FCYWpZQ0hDQUFBbjhnQkVFQmFpQUZRUUZySWdFTkFCb2dBQ0FHS0FJTUVRRUFSUTBCSUFZb0FnUWhBU0FHS0FJQUN5SUZMUUFBTmdJa0lBQW9BZ0FpQWlBQUtBSzRBellDR0NBQ0lBQW9BaHcyQWh3Z0FpQUFLQUlnTmdJZ0lBQW9BaVFoQkNBQ1FlWUFOZ0lVSUFJZ0JEWUNKQ0FBUVFFZ0FpZ0NCQkVDQUNBQUtBTFFBeWdDRUFSQUlBQW9BZ0FpQWtFOU5nSVVJQUFnQWlnQ0FCRUFBQXNnQTBFSWRDQUhja0VJYXlFQ0FrQUNRQ0FBS0FJZ1JRMEFJQUFvQWh4RkRRQWdBQ2dDSkNJRVFRQktEUUVMSUFBb0FnQWlBMEVoTmdJVUlBQWdBeWdDQUJFQUFDQUFLQUlrSVFRTElBUkJBMndnQWtjRVFDQUFLQUlBSWdKQkREWUNGQ0FBSUFJb0FnQVJBQUFMSUFBb0F0Z0JSUVJBSUFBZ0FFRUJJQUFvQWlSQjJBQnNJQUFvQWdRb0FnQVJCQUEyQXRnQkN5QUZRUUZxSVFnZ0FVRUJheUVFSUFBb0FpUkJBVTRFUUVFQUlRRURRQ0FFQkg4Z0JBVWdBQ0FHS0FJTUVRRUFSUTBESUFZb0FnQWhDQ0FHS0FJRUMwRUJheUVLSUFBb0F0Z0JJUU1nQ0MwQUFDRUNBa0FnQVVVRVFDQURJUVFNQVFzZ0FVRUNheUVMSUFGQkFXc2hDU0FESUFGQjJBQnNhaUVIUVFBaEJTQURJUVFEUUNBQ0lBUW9BZ0JHQkVBZ0EwSFlBR29oQkNBREtBSUFJUVVnQVVFQ1R3UkFJQWxCQTNFaEFpQUxRUU5QQkVBZ0NVRjhjU0VEQTBBZ0JDZ0NpQUlpQ1NBRUtBS3dBU0lMSUFRb0FsZ2lEQ0FFS0FJQUlnMGdCU0FGSUExSUd5SUZJQVVnREVnYklnVWdCU0FMU0JzaUJTQUZJQWxJR3lFRklBUkI0QUpxSVFRZ0EwRUVheUlERFFBTEN5QUNCRUFEUUNBRUtBSUFJZ01nQlNBRElBVktHeUVGSUFSQjJBQnFJUVFnQWtFQmF5SUNEUUFMQ3lBSElRUUxJQVZCQVdvaEFnd0NDeUFFUWRnQWFpRUVJQVZCQVdvaUJTQUJSdzBBQ3lBSElRUUxJQVFnQVRZQ0JDQUVJQUkyQWdBZ0JDQUtCSDhnQ0VFQmFnVWdBQ0FHS0FJTUVRRUFSUTBESUFZb0FnUWhDaUFHS0FJQUN5SUZMUUFBSWdKQkQzRTJBZ3dnQkNBQ1FRUjJOZ0lJSUFRQ2Z5QUZRUUZxSUFwQkFXc2lBdzBBR2lBQUlBWW9BZ3dSQVFCRkRRTWdCaWdDQkNFRElBWW9BZ0FMSWdJdEFBQTJBaEFnQUNnQ0FDSUhJQVFvQWdBMkFoZ2dCeUFFS0FJSU5nSWNJQWNnQkNnQ0REWUNJQ0FFS0FJUUlRUWdCMEhuQURZQ0ZDQUhJQVEyQWlRZ0FFRUJJQWNvQWdRUkFnQWdBa0VCYWlFSUlBTkJBV3NoQkNBQlFRRnFJZ0VnQUNnQ0pFZ05BQXNMSUFBb0F0QURRUUUyQWhBZ0JpQUVOZ0lFSUFZZ0NEWUNBRUVCRHd0QkFBc2xBQ0FGUlFSQUlBQWdBU0FDSUFNZ0JCREpEdzhMSUFBZ0FTQUNJQU1nQkNBR0VNZ1BDK0FHQXdkL0JIMERmQ01BUWVBQmF5SUhKQUFnQnlBRVFRUjBFRG9pQ3pZQzBBRWdDd1JBQWtBZ0J5QUVRUmhzRURvaUREWUMxQUVnREVVTkFDQUVRUUFnQkVFQVNoc2hEUU5BSUFnZ0RVWkZCRUFnRUNBRElBaEJER3hxSWdrcUFnaVNJUkFnRHlBSktnSUVraUVQSUE0Z0NTb0NBSkloRGlBSVFRRnFJUWdNQVFzTElCQWdCTElpRVpVaEVDQVBJQkdWSVE4Z0RpQVJsU0VPUVFBaENBTkFJQWdnRFVaRkJFQWdDeUFJUVFSMGFpSUpJQUlnQ0VFRGRHb2lDaW9DQUxzNUF3QWdDU0FLS2dJRXV6a0RDQ0FNSUFoQkdHeHFJZ2tnQXlBSVFReHNhaUlLS2dJQUlBNlR1emtEQUNBSklBb3FBZ1FnRDVPN09RTUlJQWtnQ2lvQ0NDQVFrN3M1QXhBZ0NFRUJhaUVJREFFTEN5QUhJQVEyQXRnQlFRQWhBZ05BUVFBaENDQUNRUU5HUlFSQUEwQWdDRUVEUmtVRVFDQUhRZkFBYWlBQ1FRVjBhaUFJUVFOMGFpQUJJQUpCQkhScUlBaEJBblJxS2dJQXV6a0RBQ0FJUVFGcUlRZ01BUXNMSUFKQkFXb2hBZ3dCQ3dzZ0J5QUJLZ0lNSUE0Z0FTb0NBSlFnRHlBQktnSUVsSklnRUNBQktnSUlsSktTdXprRGlBRWdCeUFCS2dJY0lBNGdBU29DRUpRZ0R5QUJLZ0lVbEpJZ0VDQUJLZ0lZbEpLU3V6a0RxQUVnQnlBQktnSXNJQTRnQVNvQ0lKUWdEeUFCS2dJa2xKSWdFQ0FCS2dJb2xKS1N1emtEeUFFQ1FDQUdSUVJBSUFBZ0IwSFFBV29nQjBId0FHb2dCMEVRYWlBSFFRaHFFS01IUVg5S0RRRWdCMEtBZ0lDQXdQRDF5OEVBTndNSURBRUxJQUFnQjBIUUFXb2dCMEh3QUdvZ0IwRVFhaUFIUVFocUVNME9RWDlLRFFBZ0IwS0FnSUNBd1BEMXk4RUFOd01JQ3lBSEtBTFFBUkF6SUFjb0F0UUJFRE5CQUNFQ0EwQkJBQ0VJSUFKQkEwWkZCRUFEUUNBSVFRTkdSUVJBSUFVZ0FrRUVkR29nQ0VFQ2RHb2dCMEVRYWlBQ1FRVjBhaUFJUVFOMGFpc0RBTFk0QWdBZ0NFRUJhaUVJREFFTEN5QUNRUUZxSVFJTUFRc0xJQVVnQnlzREtDQUhLd01RSUE2N0loS2lvU0FIS3dNWUlBKzdJaE9pb1NBSEt3TWdJQkM3SWhTaW9iWTRBZ3dnQlNBSEt3TklJQWNyQXpBZ0VxS2hJQWNyQXpnZ0U2S2hJQWRCUUdzckF3QWdGS0todGpnQ0hDQUZJQWNyQTJnZ0J5c0RVQ0FTb3FFZ0J5c0RXQ0FUb3FFZ0J5c0RZQ0FVb3FHMk9BSXNJQWNyQXdnaEVpQUhRZUFCYWlRQUlCSzJEd3NMUVFCQkEwSEFoZ0pCQUJBNFFRRVFBUUFMQ1FBZ0FTQUNFSmNEQzBzQkFYOGpBRUVRYXlJREpBQWdBeUFDTmdJTVFkQ0ZBaUFCUWVUc0EwR0FnZ0pCMXdBZ0EwRU1haENmQWtIazdBTkJ6SUVDUWRnQUlBTkJER29RbndJUUxpQURRUkJxSkFBZ0FBc0tBQ0FBUVJocUVNMEJDeUFBSUFBcUFnQWdBU29DQkpRZ0FDb0NCQ0FCS2dJQWxKT0xRd0FBQUQrVUM3SUJBUUY5SUFBZ0FTb0NBSXc0QWdBZ0FTb0NCQ0VESUFCQmdJQ0EvSHMyQWdnZ0FDQURqRGdDQkNBQVFReHFFT0VFSUFBZ0Fpb0NBQ0FCS2dJQWxEZ0NHQ0FBSUFJcUFnQWdBU29DQkpRNEFod2dBQ0FDS2dJQU9BSWdJQUJCSkdvUTRRUWdBQ0FCS2dJQWpEZ0NNQ0FCS2dJRUlRTWdBRUdBZ0lEOGV6WUNPQ0FBSUFPTU9BSTBJQUFnQWlvQ0JDQUJLZ0lBbERnQ1BDQUFJQUlxQWdRZ0FTb0NCSlE0QWtBZ0FDQUNLZ0lFT0FKRUN5UUFJQUFnQVNBQ0VLZ0JRd0FBQUFCZUlBTWdCQ0FGRUtnQlF3QUFBQUJlYzBFQmN3c1lBRUVBUVg4Z0FDZ0NBQ0FBS0FJRUlnQWdBQkRjQ0JzTERBQWdBQ0FCSUFBZ0FWMGJDMEVCQW44akFFRWdheUlDSkFBZ0FCRFBBU0FCU1FSQUlBQVFOQ0VESUFBZ0FrRUlhaUFCSUFBUVJpQURFUHNDSWdBUWd3TWdBQkNDQXdzZ0FrRWdhaVFBQ3c4QUlBQWdBQ2dDQkVFQmFqWUNCQXNKQUNBQUlBRVE5d1FMQ1FBZ0FDQUJPZ0JrQzJvQkFuOGpBRUVRYXlJRUpBQWdCRUVBTmdJTUlBQkJER29nQkVFTWFpQURFTEVCSUFFRVFDQUFLQUlRR2lBQkVKQUZJUVVMSUFBZ0JUWUNBQ0FBSUFVZ0FrRURkR29pQWpZQ0NDQUFJQUkyQWdRZ0FCQTlJQVVnQVVFRGRHbzJBZ0FnQkVFUWFpUUFJQUFMQ1FBZ0FDQUJFSUlCQ3d3QUlBQWdBU0FBSUFGSUd3dWRBUUlFZndOOUEwQWdCRUVEUndSQUlBQWdCRUVGZEdvaUJpc0RFTFloQnlBR0t3TUl0aUVJSUFZckF3QzJJUWxCQUNFREEwQWdBMEVFUndSQUlBTkJBblFpQlNBQ0lBUkJCSFJxYWlBQklBVnFJZ1VxQWdBZ0NaUWdCU29DRUNBSWxKSWdCU29DSUNBSGxKSTRBZ0FnQTBFQmFpRUREQUVMQ3lBQ0lBUkJCSFJxSWdNZ0F5b0NEQ0FHS3dNWXRwSTRBZ3dnQkVFQmFpRUVEQUVMQ3d2cFp3TUpmd1I5Q1h3akFFSGdBV3NpRENRQUlBeENnSUNBZ0lDQTRLM0FBRGNEMkFFZ0RFS0FnSUNBZ0lEZ3JjQUFOd1BJQVNBTVFvQ0FnSUNBZ01Dc3dBQTNBN2dCSUF4Q2dJQ0FnSUNBd0t6QUFEY0QwQUVnREVLQWdJQ0FnSURncmNBQU53UEFBU0FNUW9DQWdJQ0FnT0N0d0FBM0E3QUJJQXhDZ0lDQWdJQ0F3S3pBQURjRHFBRWdERUtBZ0lDQWdJREFyTUFBTndPZ0FRTkFJQTVCQkVaRkJFQWdEa0VFZENJTklBeEI0QUJxYWlJUUlBa2dEV29pRFNzREFEa0RBQ0FRSUEwckF3ZzVBd2dnRGtFQmFpRU9EQUVMQ3lBTVFhQUJhaUFNUWVBQWFpQU1RUkJxRUpjS0FuOGdEQ3NEY0NJZklBd3JBNEFCSWlDaElob2dHcUlnRENzRGVDSWhJQXdyQTRnQkloNmhJaG9nR3FLZ0locVpSQUFBQUFBQUFPQkJZd1JBSUJxcURBRUxRWUNBZ0lCNEN5RU9BbjhDZnlBTUt3T1FBU0laSUF3ckEyQWlHNkVpR2lBYW9pQU1Ld09ZQVNJY0lBd3JBMmdpSGFFaUdpQWFvcUFpR3BsRUFBQUFBQUFBNEVGakJFQWdHcW9NQVF0QmdJQ0FnSGdMSWcwZ0RpQU5JQTVLRzdjZ0NxSWdDcUlpR3BsRUFBQUFBQUFBNEVGakJFQWdHcW9NQVF0QmdJQ0FnSGdMSVFrQ2Z5QWJJQitoSWhvZ0dxSWdIU0Fob1NJYUlCcWlvQ0lhbVVRQUFBQUFBQURnUVdNRVFDQWFxZ3dCQzBHQWdJQ0FlQXNoRGdKL0FuOGdJQ0Fab1NJYUlCcWlJQjRnSEtFaUdpQWFvcUFpR3BsRUFBQUFBQUFBNEVGakJFQWdHcW9NQVF0QmdJQ0FnSGdMSWcwZ0RpQU5JQTVLRzdjZ0NxSWdDcUlpR3BsRUFBQUFBQUFBNEVGakJFQWdHcW9NQVF0QmdJQ0FnSGdMSVJBQ1FDQUFSUVJBSUFJaERRTkFJQU1nRFNJT1NnUkFJQTVCQVhRaERTQU9JQTVzSUJCSURRRUxDeUFDSVJBRFFDQVFJZzBnQTA0TkFpQU5RUUYwSVJBZ0RTQU5iQ0FKU0EwQUN3d0JDeUFDSVEwRFFDQURJQTBpRGtvRVFDQU9RUUYwSVEwZ0RpQU9iRUVDZENBUVNBMEJDd3NnQWlFUUEwQWdFQ0lOSUFOT0RRRWdEVUVCZENFUUlBMGdEV3hCQW5RZ0NVZ05BQXNMSUFwRUFBQUFBQUFBSkVDaUlSNUVBQUFBQUFBQThEOGdDcUZFQUFBQUFBQUE0RCtpUkFBQUFBQUFBQ1JBb2lFS0lBTWdEU0FESUExSUd5SU5JQUp0SVJFZ0F5QU9JQU1nRGtnYklnTWdBbTBoRWlBQ0lBSnNJUk1DUUFKQUFrQUNRQ0FCUlFSQUlCTkJBMndpRkVFRUVKTURJaEJGRFFRQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBY09Ed0FCQWdNRUJRWUhDQWtLQ3dVRkJRd0xJQTFCQUNBTlFRQktHeUVQSUFOQkFDQURRUUJLR3lFSElBcEVBQUFBQUFBQVdVQ2dJUnNnQTdjaEdpQU50eUVLUVFBaEFRTkFJQUVnRDBZTkRTQWJJQjRnQWJkRUFBQUFBQUFBNEQrZ29pQUtvNkFoR1VFQUlRNERRQ0FISUE1SEJFQWdEQ3NEVUNBYklCNGdEcmRFQUFBQUFBQUE0RCtnb2lBYW82QWlIQ0FNS3dOQW9pQVpJQXdyQTBpaW9LQWlIVVFBQUFBQUFBQUFBR0VORWlBTUlBd3JBeUFnSENBTUt3TVFvaUFaSUF3ckF4aWlvS0FnSGFPMkloWTRBZ3dnRENBTUt3TTRJQndnRENzREtLSWdHU0FNS3dNd29xQ2dJQjJqdGlJVk9BSUlJQWdnRmlBVklBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSWUNmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFXUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEN5RURJQlpEQUFBQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUFzaURVRUFTQ0FESUFaT2NpQURRUUJJSUFVZ0RVeHlja1VFUUNBUUlBRWdFVzBnQW13Z0RpQVNiV3BCREd4cUlna2dDU2dDQUNBRUlBTWdCV3dnRFdwQkEyeHFJZ010QUFKcU5nSUFJQWtnQ1NnQ0JDQURMUUFCYWpZQ0JDQUpJQWtvQWdnZ0F5MEFBR28yQWdnTElBNUJBV29oRGd3QkN3c2dBVUVCYWlFQkRBQUxBQXNnRFVFQUlBMUJBRW9iSVE4Z0EwRUFJQU5CQUVvYklRY2dDa1FBQUFBQUFBQlpRS0FoR3lBRHR5RWFJQTIzSVFwQkFDRUJBMEFnQVNBUFJnME1JQnNnSGlBQnQwUUFBQUFBQUFEZ1A2Q2lJQXFqb0NFWlFRQWhEZ05BSUFjZ0RrY0VRQ0FNS3dOUUlCc2dIaUFPdDBRQUFBQUFBQURnUDZDaUlCcWpvQ0ljSUF3ckEwQ2lJQmtnRENzRFNLS2dvQ0lkUkFBQUFBQUFBQUFBWVEwUklBd2dEQ3NESUNBY0lBd3JBeENpSUJrZ0RDc0RHS0tnb0NBZG83WWlGamdDRENBTUlBd3JBemdnSENBTUt3TW9vaUFaSUF3ckF6Q2lvS0FnSGFPMkloVTRBZ2dnQ0NBV0lCVWdERUVNYWlBTVFRaHFFSElhSUF3cUFnd2hGZ0ovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJaREFBQ0FQNUlpRll0REFBQUFUMTBFUUNBVnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJUU1nRmtNQUFBQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEN5SU5RUUJJSUFNZ0JrNXlJQU5CQUVnZ0JTQU5USEp5UlFSQUlCQWdBU0FSYlNBQ2JDQU9JQkp0YWtFTWJHb2lDU0FKS0FJQUlBUWdBeUFGYkNBTmFrRURiR29pQXkwQUFHbzJBZ0FnQ1NBSktBSUVJQU10QUFGcU5nSUVJQWtnQ1NnQ0NDQURMUUFDYWpZQ0NBc2dEa0VCYWlFT0RBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBTlFRQWdEVUVBU2hzaER5QURRUUFnQTBFQVNoc2hCeUFLUkFBQUFBQUFBRmxBb0NFYklBTzNJUm9nRGJjaENrRUFJUUVEUUNBQklBOUdEUXNnR3lBZUlBRzNSQUFBQUFBQUFPQS9vS0lnQ3FPZ0lSbEJBQ0VPQTBBZ0J5QU9Sd1JBSUF3ckExQWdHeUFlSUE2M1JBQUFBQUFBQU9BL29LSWdHcU9nSWh3Z0RDc0RRS0lnR1NBTUt3TklvcUNnSWgxRUFBQUFBQUFBQUFCaERSQWdEQ0FNS3dNZ0lCd2dEQ3NERUtJZ0dTQU1Ld01Zb3FDZ0lCMmp0aUlXT0FJTUlBd2dEQ3NET0NBY0lBd3JBeWlpSUJrZ0RDc0RNS0tnb0NBZG83WWlGVGdDQ0NBSUlCWWdGU0FNUVF4cUlBeEJDR29RY2hvZ0RDb0NEQ0VXQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0ZrTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNoQXlBV1F3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJZzFCQUVnZ0F5QUdUbklnQTBFQVNDQUZJQTFNY25KRkJFQWdFQ0FCSUJGdElBSnNJQTRnRW0xcVFReHNhaUlKSUFrb0FnQWdCQ0FESUFWc0lBMXFRUUowSWdOQkFuSnFMUUFBYWpZQ0FDQUpJQWtvQWdRZ0JDQURRUUZ5YWkwQUFHbzJBZ1FnQ1NBSktBSUlJQU1nQkdvdEFBQnFOZ0lJQ3lBT1FRRnFJUTRNQVFzTElBRkJBV29oQVF3QUN3QUxJQTFCQUNBTlFRQktHeUVQSUFOQkFDQURRUUJLR3lFSElBcEVBQUFBQUFBQVdVQ2dJUnNnQTdjaEdpQU50eUVLUVFBaEFRTkFJQUVnRDBZTkNpQWJJQjRnQWJkRUFBQUFBQUFBNEQrZ29pQUtvNkFoR1VFQUlRNERRQ0FISUE1SEJFQWdEQ3NEVUNBYklCNGdEcmRFQUFBQUFBQUE0RCtnb2lBYW82QWlIQ0FNS3dOQW9pQVpJQXdyQTBpaW9LQWlIVVFBQUFBQUFBQUFBR0VORHlBTUlBd3JBeUFnSENBTUt3TVFvaUFaSUF3ckF4aWlvS0FnSGFPMkloWTRBZ3dnRENBTUt3TTRJQndnRENzREtLSWdHU0FNS3dNd29xQ2dJQjJqdGlJVk9BSUlJQWdnRmlBVklBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSWUNmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFXUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEN5RURJQlpEQUFBQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUFzaURVRUFTQ0FESUFaT2NpQURRUUJJSUFVZ0RVeHlja1VFUUNBUUlBRWdFVzBnQW13Z0RpQVNiV3BCREd4cUlna2dDU2dDQUNBRUlBTWdCV3dnRFdwQkFuUWlBMm90QUFCcU5nSUFJQWtnQ1NnQ0JDQUVJQU5CQVhKcUxRQUFhallDQkNBSklBa29BZ2dnQkNBRFFRSnlhaTBBQUdvMkFnZ0xJQTVCQVdvaERnd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0RVRUFJQTFCQUVvYklROGdBMEVBSUFOQkFFb2JJUWNnQ2tRQUFBQUFBQUJaUUtBaEd5QUR0eUVhSUEyM0lRcEJBQ0VCQTBBZ0FTQVBSZzBKSUJzZ0hpQUJ0MFFBQUFBQUFBRGdQNkNpSUFxam9DRVpRUUFoRGdOQUlBY2dEa2NFUUNBTUt3TlFJQnNnSGlBT3QwUUFBQUFBQUFEZ1A2Q2lJQnFqb0NJY0lBd3JBMENpSUJrZ0RDc0RTS0tnb0NJZFJBQUFBQUFBQUFBQVlRME9JQXdnRENzRElDQWNJQXdyQXhDaUlCa2dEQ3NER0tLZ29DQWRvN1lpRmpnQ0RDQU1JQXdyQXpnZ0hDQU1Ld01vb2lBWklBd3JBekNpb0tBZ0hhTzJJaFU0QWdnZ0NDQVdJQlVnREVFTWFpQU1RUWhxRUhJYUlBd3FBZ3doRmdKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCWkRBQUNBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMSVFNZ0ZrTUFBQUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDeUlOUVFCSUlBTWdCazV5SUFOQkFFZ2dCU0FOVEhKeVJRUkFJQkFnQVNBUmJTQUNiQ0FPSUJKdGFrRU1iR29pQ1NBSktBSUFJQVFnQXlBRmJDQU5ha0VDZENJRFFRRnlhaTBBQUdvMkFnQWdDU0FKS0FJRUlBUWdBMEVDY21vdEFBQnFOZ0lFSUFrZ0NTZ0NDQ0FFSUFOQkEzSnFMUUFBYWpZQ0NBc2dEa0VCYWlFT0RBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBTlFRQWdEVUVBU2hzaER5QURRUUFnQTBFQVNoc2hCeUFLUkFBQUFBQUFBRmxBb0NFYklBTzNJUm9nRGJjaENrRUFJUUVEUUNBQklBOUdEUWdnR3lBZUlBRzNSQUFBQUFBQUFPQS9vS0lnQ3FPZ0lSbEJBQ0VPQTBBZ0J5QU9Sd1JBSUF3ckExQWdHeUFlSUE2M1JBQUFBQUFBQU9BL29LSWdHcU9nSWh3Z0RDc0RRS0lnR1NBTUt3TklvcUNnSWgxRUFBQUFBQUFBQUFCaERRMGdEQ0FNS3dNZ0lCd2dEQ3NERUtJZ0dTQU1Ld01Zb3FDZ0lCMmp0aUlXT0FJTUlBd2dEQ3NET0NBY0lBd3JBeWlpSUJrZ0RDc0RNS0tnb0NBZG83WWlGVGdDQ0NBSUlCWWdGU0FNUVF4cUlBeEJDR29RY2hvZ0RDb0NEQ0VXQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0ZrTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNoQXlBV1F3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJZzFCQUVnZ0F5QUdUbklnQTBFQVNDQUZJQTFNY25KRkJFQWdFQ0FCSUJGdElBSnNJQTRnRW0xcVFReHNhaUlKSUFRZ0F5QUZiQ0FOYW1vdEFBQWlBeUFKS0FJQWFqWUNBQ0FKSUFNZ0NTZ0NCR28yQWdRZ0NTQURJQWtvQWdocU5nSUlDeUFPUVFGcUlRNE1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBMUJBQ0FOUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVISUFwRUFBQUFBQUFBV1VDZ0lSc2dBN2NoR2lBTnR5RUtRUUFoQVFOQUlBRWdEMFlOQnlBYklCNGdBYmRFQUFBQUFBQUE0RCtnb2lBS282QWhHVUVBSVE0RFFDQUhJQTVIQkVBZ0RDc0RVQ0FiSUI0Z0RyZEVBQUFBQUFBQTREK2dvaUFhbzZBaUhDQU1Ld05Bb2lBWklBd3JBMGlpb0tBaUhVUUFBQUFBQUFBQUFHRU5EQ0FNSUF3ckF5QWdIQ0FNS3dNUW9pQVpJQXdyQXhpaW9LQWdIYU8ySWhZNEFnd2dEQ0FNS3dNNElCd2dEQ3NES0tJZ0dTQU1Ld013b3FDZ0lCMmp0aUlWT0FJSUlBZ2dGaUFWSUF4QkRHb2dERUVJYWhCeUdpQU1LZ0lNSVJZQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QVdRd0FBZ0QrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0Q3lFRElCWkRBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNpRFVFQVNDQURJQVpPY2lBRFFRQklJQVVnRFV4eWNrVUVRQ0FRSUFFZ0VXMGdBbXdnRGlBU2JXcEJER3hxSWdrZ0NTZ0NBQ0FFSUFNZ0JXd2dEV3BCQW5RaUEwRURjbW90QUFCcU5nSUFJQWtnQ1NnQ0JDQUVJQU5CQW5KcUxRQUFhallDQkNBSklBa29BZ2dnQkNBRFFRRnlhaTBBQUdvMkFnZ0xJQTVCQVdvaERnd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0RVRUFJQTFCQUVvYklROGdBMEVBSUFOQkFFb2JJUWtnQ2tRQUFBQUFBQUJaUUtBaEd5QUR0eUVhSUEyM0lRcEJBQ0VUQTBBZ0R5QVRSZzBHSUJzZ0hpQVR0MFFBQUFBQUFBRGdQNkNpSUFxam9DRVpRUUFoRGdOQUlBa2dEa2NFUUNBTUt3TlFJQnNnSGlBT3QwUUFBQUFBQUFEZ1A2Q2lJQnFqb0NJY0lBd3JBMENpSUJrZ0RDc0RTS0tnb0NJZFJBQUFBQUFBQUFBQVlRMExJQXdnRENzRElDQWNJQXdyQXhDaUlCa2dEQ3NER0tLZ29DQWRvN1lpRmpnQ0RDQU1JQXdyQXpnZ0hDQU1Ld01vb2lBWklBd3JBekNpb0tBZ0hhTzJJaFU0QWdnZ0NDQVdJQlVnREVFTWFpQU1RUWhxRUhJYUlBd3FBZ3doRmdKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCWkRBQUNBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMSVFNZ0ZrTUFBQUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDeUlOUVFCSUlBTWdCazV5SUFOQkFFZ2dCU0FOVEhKeVJRUkFBbjhnQkNBRElBVnNJZ0VnRFVIKy93Tnhha0VCZEdvaUF5MEFBRUdBQVd1eUloaERUaG9CUkpRZ0JDQUJJQTFxUVFGMFFRRnlhaTBBQUVFUWE3SkRmd3FWUTVRaUY1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUFzaEFTQURMUUFDSVFNZ0VDQVRJQkZ0SUFKc0lBNGdFbTFxUVF4c2FpSU5JQTBvQWdBZ0FVRUlkU0lCUVFBZ0FVRUFTaHNpQVVIL0FTQUJRZjhCU0J0cU5nSUFJQTBnRFNnQ0NBSi9JQmNnQTBHQUFXdXlJaFpEb0VyTVE1U1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRaDFJZ0ZCQUNBQlFRQktHeUlCUWY4QklBRkIvd0ZJRzJvMkFnZ2dEU0FOS0FJRUFuOGdGeUFZUS82VXlNS1VraUFXUTdnZVVNT1VraUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEMwRUlkU0lCUVFBZ0FVRUFTaHNpQVVIL0FTQUJRZjhCU0J0cU5nSUVDeUFPUVFGcUlRNE1BUXNMSUJOQkFXb2hFd3dBQ3dBTElBMUJBQ0FOUVFCS0d5RVRJQU5CQUNBRFFRQktHeUVQSUFwRUFBQUFBQUFBV1VDZ0lSc2dBN2NoR2lBTnR5RUtRUUFoQVFOQUlBRWdFMFlOQlNBYklCNGdBYmRFQUFBQUFBQUE0RCtnb2lBS282QWhHVUVBSVE0RFFDQU9JQTlIQkVBZ0RDc0RVQ0FiSUI0Z0RyZEVBQUFBQUFBQTREK2dvaUFhbzZBaUhDQU1Ld05Bb2lBWklBd3JBMGlpb0tBaUhVUUFBQUFBQUFBQUFHRU5DaUFNSUF3ckF5QWdIQ0FNS3dNUW9pQVpJQXdyQXhpaW9LQWdIYU8ySWhZNEFnd2dEQ0FNS3dNNElCd2dEQ3NES0tJZ0dTQU1Ld013b3FDZ0lCMmp0aUlWT0FJSUlBZ2dGaUFWSUF4QkRHb2dERUVJYWhCeUdpQU1LZ0lNSVJZQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QVdRd0FBZ0QrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0Q3lFRElCWkRBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNpRFVFQVNDQURJQVpPY2lBRFFRQklJQVVnRFV4eWNrVUVRQUovSUFRZ0F5QUZiQ0lESUExcVFRRjBhaTBBQUVFUWE3SkRmd3FWUTVRaUZ5QUVJQTFCL3Y4RGNTQURha0VCZENJRFFRRnlhaTBBQUVHQUFXdXlJaGhEVGhvQlJKU1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTElRY2dBeUFFYWkwQUF5RUpJQkFnQVNBUmJTQUNiQ0FPSUJKdGFrRU1iR29pRFNBTktBSUFJQWRCQ0hVaUEwRUFJQU5CQUVvYklnTkIvd0VnQTBIL0FVZ2JhallDQUNBTklBMG9BZ2dDZnlBWElBbEJnQUZyc2lJV1E2Qkt6RU9Va2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVJZFNJRFFRQWdBMEVBU2hzaUEwSC9BU0FEUWY4QlNCdHFOZ0lJSUEwZ0RTZ0NCQUovSUJjZ0dFUCtsTWpDbEpJZ0ZrTzRIbEREbEpJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQ0hVaUEwRUFJQU5CQUVvYklnTkIvd0VnQTBIL0FVZ2JhallDQkFzZ0RrRUJhaUVPREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFOUVFBZ0RVRUFTaHNoRHlBRFFRQWdBMEVBU2hzaEJ5QUtSQUFBQUFBQUFGbEFvQ0ViSUFPM0lSb2dEYmNoQ2tFQUlSTURRQ0FQSUJOR0RRUWdHeUFlSUJPM1JBQUFBQUFBQU9BL29LSWdDcU9nSVJsQkFDRU9BMEFnQnlBT1J3UkFJQXdyQTFBZ0d5QWVJQTYzUkFBQUFBQUFBT0Evb0tJZ0dxT2dJaHdnRENzRFFLSWdHU0FNS3dOSW9xQ2dJaDFFQUFBQUFBQUFBQUJoRFFrZ0RDQU1Ld01nSUJ3Z0RDc0RFS0lnR1NBTUt3TVlvcUNnSUIyanRpSVdPQUlNSUF3Z0RDc0RPQ0FjSUF3ckF5aWlJQmtnRENzRE1LS2dvQ0FkbzdZaUZUZ0NDQ0FJSUJZZ0ZTQU1RUXhxSUF4QkNHb1FjaG9nRENvQ0RDRVdBbjhnQUVFQlJnUkFBbjhnRENvQ0NFTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRDRURBbjhnRmtNQUFJQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZEF3QkN3Si9JQXdxQWdoREFBQUFQNUlpRll0REFBQUFUMTBFUUNBVnFBd0JDMEdBZ0lDQWVBc2hBeUFXUXdBQUFEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTElnMUJBRWdnQXlBR1RuSWdBMEVBU0NBRklBMU1jbkpGQkVBZ0VDQVRJQkZ0SUFKc0lBNGdFbTFxUVF4c2FpSUpJQWtvQWdBZ0JDQURJQVZzSUExcVFRRjBJZ0ZCQVhKcUxRQUFJZ05CQTNSQkJISkIvQUZ4YWpZQ0FDQUpJQWtvQWdnZ0FTQUVhaTBBQUNJQlFRUnlRZndCY1dvMkFnZ2dDU0FKS0FJRUlBRkJCWFFnQTBFRGRuSkJBbkpCL2dGeGFqWUNCQXNnRGtFQmFpRU9EQUVMQ3lBVFFRRnFJUk1NQUFzQUN5QU5RUUFnRFVFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoQnlBS1JBQUFBQUFBQUZsQW9DRWJJQU8zSVJvZ0RiY2hDa0VBSVJNRFFDQVBJQk5HRFFNZ0d5QWVJQk8zUkFBQUFBQUFBT0Evb0tJZ0NxT2dJUmxCQUNFT0EwQWdCeUFPUndSQUlBd3JBMUFnR3lBZUlBNjNSQUFBQUFBQUFPQS9vS0lnR3FPZ0lod2dEQ3NEUUtJZ0dTQU1Ld05Jb3FDZ0loMUVBQUFBQUFBQUFBQmhEUWdnRENBTUt3TWdJQndnRENzREVLSWdHU0FNS3dNWW9xQ2dJQjJqdGlJV09BSU1JQXdnRENzRE9DQWNJQXdyQXlpaUlCa2dEQ3NETUtLZ29DQWRvN1lpRlRnQ0NDQUlJQllnRlNBTVFReHFJQXhCQ0dvUWNob2dEQ29DRENFV0FuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdGa01BQUlBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUFzaEF5QVdRd0FBQUQrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMSWcxQkFFZ2dBeUFHVG5JZ0EwRUFTQ0FGSUExTWNuSkZCRUFnRUNBVElCRnRJQUpzSUE0Z0VtMXFRUXhzYWlJSklBa29BZ0FnQkNBRElBVnNJQTFxUVFGMElnRkJBWEpxTFFBQUlnTkJBblJCQkhKQi9BRnhhallDQUNBSklBa29BZ2dnQVNBRWFpMEFBQ0lCUVFSeVFmd0JjV28yQWdnZ0NTQUpLQUlFSUFGQkJYUWdBMEVEZG5KQkJISkIvQUZ4YWpZQ0JBc2dEa0VCYWlFT0RBRUxDeUFUUVFGcUlSTU1BQXNBQ3lBTlFRQWdEVUVBU2hzaER5QURRUUFnQTBFQVNoc2hCeUFLUkFBQUFBQUFBRmxBb0NFYklBTzNJUm9nRGJjaENrRUFJUUVEUUNBQklBOUdEUUlnR3lBZUlBRzNSQUFBQUFBQUFPQS9vS0lnQ3FPZ0lSbEJBQ0VPQTBBZ0J5QU9Sd1JBSUF3ckExQWdHeUFlSUE2M1JBQUFBQUFBQU9BL29LSWdHcU9nSWh3Z0RDc0RRS0lnR1NBTUt3TklvcUNnSWgxRUFBQUFBQUFBQUFCaERRY2dEQ0FNS3dNZ0lCd2dEQ3NERUtJZ0dTQU1Ld01Zb3FDZ0lCMmp0aUlXT0FJTUlBd2dEQ3NET0NBY0lBd3JBeWlpSUJrZ0RDc0RNS0tnb0NBZG83WWlGVGdDQ0NBSUlCWWdGU0FNUVF4cUlBeEJDR29RY2hvZ0RDb0NEQ0VXQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0ZrTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNoQXlBV1F3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJZzFCQUVnZ0F5QUdUbklnQTBFQVNDQUZJQTFNY25KRkJFQWdFQ0FCSUJGdElBSnNJQTRnRW0xcVFReHNhaUlKSUFrb0FnQWdCQ0FESUFWc0lBMXFRUUYwSWdOQkFYSnFMUUFBUWZBQmNVRUljbW8yQWdBZ0NTQUpLQUlJSUFNZ0JHb3RBQUFpQTBFSWNrSDRBWEZxTmdJSUlBa2dDU2dDQkNBRFFRUjBRUWh5UWZnQmNXbzJBZ1FMSUE1QkFXb2hEZ3dCQ3dzZ0FVRUJhaUVCREFBTEFBdEJBRUVEUWNzVlFRQVFPQXdEQ3lBUklCSnNJUUJCQUNFTlFRQWhEZ05BSUE0Z0ZFWU5CQ0FMSUE1cUlCQWdEa0VDZEdvb0FnQWdBRzQ2QUFBZ0RrRUJhaUVPREFBTEFBc2dFMEVFRUpNREloQkZEUU1DUUNBSFFRRk5CRUFnRFVFQUlBMUJBRW9iSVE4Z0EwRUFJQU5CQUVvYklRa2dDa1FBQUFBQUFBQlpRS0FoR3lBRHR5RWFJQTIzSVFwQkFDRUJBMEFnQVNBUFJnMENJQnNnSGlBQnQwUUFBQUFBQUFEZ1A2Q2lJQXFqb0NFWlFRQWhEZ05BSUFrZ0RrY0VRQ0FNS3dOUUlCc2dIaUFPdDBRQUFBQUFBQURnUDZDaUlCcWpvQ0ljSUF3ckEwQ2lJQmtnRENzRFNLS2dvQ0lkUkFBQUFBQUFBQUFBWVEwR0lBd2dEQ3NESUNBY0lBd3JBeENpSUJrZ0RDc0RHS0tnb0NBZG83WWlGamdDRENBTUlBd3JBemdnSENBTUt3TW9vaUFaSUF3ckF6Q2lvS0FnSGFPMkloVTRBZ2dnQ0NBV0lCVWdERUVNYWlBTVFRaHFFSElhSUF3cUFnd2hGZ0ovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJaREFBQ0FQNUlpRll0REFBQUFUMTBFUUNBVnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJUU1nRmtNQUFBQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEN5SU5RUUJJSUFNZ0JrNXlJQU5CQUVnZ0JTQU5USEp5UlFSQUlCQWdBU0FSYlNBQ2JDQU9JQkp0YWtFQ2RHb2lCeUFIS0FJQUlBUWdBeUFGYkNBTmFrRURiR29pQXkwQUFTQURMUUFBYWlBRExRQUNha0VEYm1vMkFnQUxJQTVCQVdvaERnd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0IwRitjVUVDUmdSQUlBMUJBQ0FOUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVKSUFwRUFBQUFBQUFBV1VDZ0lSc2dBN2NoR2lBTnR5RUtRUUFoQVFOQUlBRWdEMFlOQWlBYklCNGdBYmRFQUFBQUFBQUE0RCtnb2lBS282QWhHVUVBSVE0RFFDQUpJQTVIQkVBZ0RDc0RVQ0FiSUI0Z0RyZEVBQUFBQUFBQTREK2dvaUFhbzZBaUhDQU1Ld05Bb2lBWklBd3JBMGlpb0tBaUhVUUFBQUFBQUFBQUFHRU5CaUFNSUF3ckF5QWdIQ0FNS3dNUW9pQVpJQXdyQXhpaW9LQWdIYU8ySWhZNEFnd2dEQ0FNS3dNNElCd2dEQ3NES0tJZ0dTQU1Ld013b3FDZ0lCMmp0aUlWT0FJSUlBZ2dGaUFWSUF4QkRHb2dERUVJYWhCeUdpQU1LZ0lNSVJZQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QVdRd0FBZ0QrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0Q3lFRElCWkRBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNpRFVFQVNDQURJQVpPY2lBRFFRQklJQVVnRFV4eWNrVUVRQ0FRSUFFZ0VXMGdBbXdnRGlBU2JXcEJBblJxSWdjZ0J5Z0NBQ0FFSUFNZ0JXd2dEV3BCQW5RaUEwRUJjbW90QUFBZ0F5QUVhaTBBQUdvZ0JDQURRUUp5YWkwQUFHcEJBMjVxTmdJQUN5QU9RUUZxSVE0TUFRc0xJQUZCQVdvaEFRd0FDd0FMSUFkQmZYRkJCRVlFUUNBTlFRQWdEVUVBU2hzaER5QURRUUFnQTBFQVNoc2hDU0FLUkFBQUFBQUFBRmxBb0NFYklBTzNJUm9nRGJjaENrRUFJUUVEUUNBQklBOUdEUUlnR3lBZUlBRzNSQUFBQUFBQUFPQS9vS0lnQ3FPZ0lSbEJBQ0VPQTBBZ0NTQU9Sd1JBSUF3ckExQWdHeUFlSUE2M1JBQUFBQUFBQU9BL29LSWdHcU9nSWh3Z0RDc0RRS0lnR1NBTUt3TklvcUNnSWgxRUFBQUFBQUFBQUFCaERRWWdEQ0FNS3dNZ0lCd2dEQ3NERUtJZ0dTQU1Ld01Zb3FDZ0lCMmp0aUlXT0FJTUlBd2dEQ3NET0NBY0lBd3JBeWlpSUJrZ0RDc0RNS0tnb0NBZG83WWlGVGdDQ0NBSUlCWWdGU0FNUVF4cUlBeEJDR29RY2hvZ0RDb0NEQ0VXQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0ZrTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNoQXlBV1F3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJZzFCQUVnZ0F5QUdUbklnQTBFQVNDQUZJQTFNY25KRkJFQWdFQ0FCSUJGdElBSnNJQTRnRW0xcVFRSjBhaUlISUFjb0FnQWdCQ0FESUFWc0lBMXFRUUowSWdOQkFuSnFMUUFBSUFRZ0EwRUJjbW90QUFCcUlBUWdBMEVEY21vdEFBQnFRUU51YWpZQ0FBc2dEa0VCYWlFT0RBRUxDeUFCUVFGcUlRRU1BQXNBQ3dKQUFrQUNRQUpBQWtBQ1FBSkFJQWRCQldzT0NnQUdBUUlEQkFVQUFBQUdDeUFOUVFBZ0RVRUFTaHNoRHlBRFFRQWdBMEVBU2hzaENTQUtSQUFBQUFBQUFGbEFvQ0ViSUFPM0lSb2dEYmNoQ2tFQUlRRURRQ0FCSUE5R0RRY2dHeUFlSUFHM1JBQUFBQUFBQU9BL29LSWdDcU9nSVJsQkFDRU9BMEFnQ1NBT1J3UkFJQXdyQTFBZ0d5QWVJQTYzUkFBQUFBQUFBT0Evb0tJZ0dxT2dJaHdnRENzRFFLSWdHU0FNS3dOSW9xQ2dJaDFFQUFBQUFBQUFBQUJoRFFzZ0RDQU1Ld01nSUJ3Z0RDc0RFS0lnR1NBTUt3TVlvcUNnSUIyanRpSVdPQUlNSUF3Z0RDc0RPQ0FjSUF3ckF5aWlJQmtnRENzRE1LS2dvQ0FkbzdZaUZUZ0NDQ0FJSUJZZ0ZTQU1RUXhxSUF4QkNHb1FjaG9nRENvQ0RDRVdBbjhnQUVFQlJnUkFBbjhnRENvQ0NFTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRDRURBbjhnRmtNQUFJQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZEF3QkN3Si9JQXdxQWdoREFBQUFQNUlpRll0REFBQUFUMTBFUUNBVnFBd0JDMEdBZ0lDQWVBc2hBeUFXUXdBQUFEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTElnMUJBRWdnQXlBR1RuSWdBMEVBU0NBRklBMU1jbkpGQkVBZ0VDQUJJQkZ0SUFKc0lBNGdFbTFxUVFKMGFpSUhJQWNvQWdBZ0JDQURJQVZzSUExcWFpMEFBR28yQWdBTElBNUJBV29oRGd3QkN3c2dBVUVCYWlFQkRBQUxBQXNnRFVFQUlBMUJBRW9iSVE4Z0EwRUFJQU5CQUVvYklRa2dDa1FBQUFBQUFBQlpRS0FoR3lBRHR5RWFJQTIzSVFwQkFDRUJBMEFnQVNBUFJnMEdJQnNnSGlBQnQwUUFBQUFBQUFEZ1A2Q2lJQXFqb0NFWlFRQWhEZ05BSUFrZ0RrY0VRQ0FNS3dOUUlCc2dIaUFPdDBRQUFBQUFBQURnUDZDaUlCcWpvQ0ljSUF3ckEwQ2lJQmtnRENzRFNLS2dvQ0lkUkFBQUFBQUFBQUFBWVEwS0lBd2dEQ3NESUNBY0lBd3JBeENpSUJrZ0RDc0RHS0tnb0NBZG83WWlGamdDRENBTUlBd3JBemdnSENBTUt3TW9vaUFaSUF3ckF6Q2lvS0FnSGFPMkloVTRBZ2dnQ0NBV0lCVWdERUVNYWlBTVFRaHFFSElhSUF3cUFnd2hGZ0ovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJaREFBQ0FQNUlpRll0REFBQUFUMTBFUUNBVnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJUU1nRmtNQUFBQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEN5SU5RUUJJSUFNZ0JrNXlJQU5CQUVnZ0JTQU5USEp5UlFSQUlCQWdBU0FSYlNBQ2JDQU9JQkp0YWtFQ2RHb2lCeUFIS0FJQUlBUWdBeUFGYkNBTmFrRUJkRUVCY21vdEFBQnFOZ0lBQ3lBT1FRRnFJUTRNQVFzTElBRkJBV29oQVF3QUN3QUxJQTFCQUNBTlFRQktHeUVQSUFOQkFDQURRUUJLR3lFSklBcEVBQUFBQUFBQVdVQ2dJUnNnQTdjaEdpQU50eUVLUVFBaEFRTkFJQUVnRDBZTkJTQWJJQjRnQWJkRUFBQUFBQUFBNEQrZ29pQUtvNkFoR1VFQUlRNERRQ0FKSUE1SEJFQWdEQ3NEVUNBYklCNGdEcmRFQUFBQUFBQUE0RCtnb2lBYW82QWlIQ0FNS3dOQW9pQVpJQXdyQTBpaW9LQWlIVVFBQUFBQUFBQUFBR0VOQ1NBTUlBd3JBeUFnSENBTUt3TVFvaUFaSUF3ckF4aWlvS0FnSGFPMkloWTRBZ3dnRENBTUt3TTRJQndnRENzREtLSWdHU0FNS3dNd29xQ2dJQjJqdGlJVk9BSUlJQWdnRmlBVklBeEJER29nREVFSWFoQnlHaUFNS2dJTUlSWUNmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFXUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUlWaTBNQUFBQlBYUVJBSUJXb0RBRUxRWUNBZ0lCNEN5RURJQlpEQUFBQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUFzaURVRUFTQ0FESUFaT2NpQURRUUJJSUFVZ0RVeHlja1VFUUNBUUlBRWdFVzBnQW13Z0RpQVNiV3BCQW5ScUlnY2dCeWdDQUNBRUlBTWdCV3dnRFdwQkFYUnFMUUFBYWpZQ0FBc2dEa0VCYWlFT0RBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBTlFRQWdEVUVBU2hzaER5QURRUUFnQTBFQVNoc2hDU0FLUkFBQUFBQUFBRmxBb0NFYklBTzNJUm9nRGJjaENrRUFJUUVEUUNBQklBOUdEUVFnR3lBZUlBRzNSQUFBQUFBQUFPQS9vS0lnQ3FPZ0lSbEJBQ0VPQTBBZ0NTQU9Sd1JBSUF3ckExQWdHeUFlSUE2M1JBQUFBQUFBQU9BL29LSWdHcU9nSWh3Z0RDc0RRS0lnR1NBTUt3TklvcUNnSWgxRUFBQUFBQUFBQUFCaERRZ2dEQ0FNS3dNZ0lCd2dEQ3NERUtJZ0dTQU1Ld01Zb3FDZ0lCMmp0aUlXT0FJTUlBd2dEQ3NET0NBY0lBd3JBeWlpSUJrZ0RDc0RNS0tnb0NBZG83WWlGVGdDQ0NBSUlCWWdGU0FNUVF4cUlBeEJDR29RY2hvZ0RDb0NEQ0VXQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0ZrTUFBSUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNoQXlBV1F3QUFBRCtTSWhXTFF3QUFBRTlkQkVBZ0ZhZ01BUXRCZ0lDQWdIZ0xJZzFCQUVnZ0F5QUdUbklnQTBFQVNDQUZJQTFNY25KRkJFQWdFQ0FCSUJGdElBSnNJQTRnRW0xcVFRSjBhaUlISUFjb0FnQWdCQ0FESUFWc0lBMXFRUUYwSWdOcUxRQUFJZ2RCK0FGeElBUWdBMEVCY21vdEFBQWlBMEVEZEVINEFYRnFJQWRCQlhRZ0EwRURkbkpCL0FGeGFrRUtha0VEYm1vMkFnQUxJQTVCQVdvaERnd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0RVRUFJQTFCQUVvYklROGdBMEVBSUFOQkFFb2JJUWtnQ2tRQUFBQUFBQUJaUUtBaEd5QUR0eUVhSUEyM0lRcEJBQ0VCQTBBZ0FTQVBSZzBESUJzZ0hpQUJ0MFFBQUFBQUFBRGdQNkNpSUFxam9DRVpRUUFoRGdOQUlBa2dEa2NFUUNBTUt3TlFJQnNnSGlBT3QwUUFBQUFBQUFEZ1A2Q2lJQnFqb0NJY0lBd3JBMENpSUJrZ0RDc0RTS0tnb0NJZFJBQUFBQUFBQUFBQVlRMEhJQXdnRENzRElDQWNJQXdyQXhDaUlCa2dEQ3NER0tLZ29DQWRvN1lpRmpnQ0RDQU1JQXdyQXpnZ0hDQU1Ld01vb2lBWklBd3JBekNpb0tBZ0hhTzJJaFU0QWdnZ0NDQVdJQlVnREVFTWFpQU1RUWhxRUhJYUlBd3FBZ3doRmdKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlGWXREQUFBQVQxMEVRQ0FWcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCWkRBQUNBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMSVFNZ0ZrTUFBQUEva2lJVmkwTUFBQUJQWFFSQUlCV29EQUVMUVlDQWdJQjRDeUlOUVFCSUlBTWdCazV5SUFOQkFFZ2dCU0FOVEhKeVJRUkFJQkFnQVNBUmJTQUNiQ0FPSUJKdGFrRUNkR29pQnlBSEtBSUFJQVFnQXlBRmJDQU5ha0VCZENJRGFpMEFBQ0lIUWZnQmNTQUVJQU5CQVhKcUxRQUFJZ05CQW5SQitBRnhhaUFIUVFWMElBTkJBM1p5UWZnQmNXcEJER3BCQTI1cU5nSUFDeUFPUVFGcUlRNE1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBMUJBQ0FOUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVKSUFwRUFBQUFBQUFBV1VDZ0lSc2dBN2NoR2lBTnR5RUtRUUFoQVFOQUlBRWdEMFlOQWlBYklCNGdBYmRFQUFBQUFBQUE0RCtnb2lBS282QWhHVUVBSVE0RFFDQUpJQTVIQkVBZ0RDc0RVQ0FiSUI0Z0RyZEVBQUFBQUFBQTREK2dvaUFhbzZBaUhDQU1Ld05Bb2lBWklBd3JBMGlpb0tBaUhVUUFBQUFBQUFBQUFHRU5CaUFNSUF3ckF5QWdIQ0FNS3dNUW9pQVpJQXdyQXhpaW9LQWdIYU8ySWhZNEFnd2dEQ0FNS3dNNElCd2dEQ3NES0tJZ0dTQU1Ld013b3FDZ0lCMmp0aUlWT0FJSUlBZ2dGaUFWSUF4QkRHb2dERUVJYWhCeUdpQU1LZ0lNSVJZQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaFdMUXdBQUFFOWRCRUFnRmFnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QVdRd0FBZ0QrU0loV0xRd0FBQUU5ZEJFQWdGYWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSVZpME1BQUFCUFhRUkFJQldvREFFTFFZQ0FnSUI0Q3lFRElCWkRBQUFBUDVJaUZZdERBQUFBVDEwRVFDQVZxQXdCQzBHQWdJQ0FlQXNpRFVFQVNDQURJQVpPY2lBRFFRQklJQVVnRFV4eWNrVUVRQ0FRSUFFZ0VXMGdBbXdnRGlBU2JXcEJBblJxSWdjZ0J5Z0NBQ0FFSUFNZ0JXd2dEV3BCQVhRaUIyb3RBQUFpQTBId0FYRWdBMEVFZEVId0FYRnFJQVFnQjBFQmNtb3RBQUJCQ0hKQitBRnhha0VRYWtFRGJtbzJBZ0FMSUE1QkFXb2hEZ3dCQ3dzZ0FVRUJhaUVCREFBTEFBdEJBRUVEUWNzVlFRQVFPQXdDQ3lBUklCSnNJUUJCQUNFTlFRQWhEZ05BSUE0Z0UwWU5BeUFMSUE1cUlCQWdEa0VDZEdvb0FnQWdBRzQ2QUFBZ0RrRUJhaUVPREFBTEFBc0FDMEYvSVEwTElCQVFNeUFNUWVBQmFpUUFJQTBQQzBFQVFRTkI1d3RCQUJBNFFRRVFBUUFMRUFBZ0FDZ0NBQ0FCS0FJQWEwRURkUXNzQUNBQUtBSUFHaUFBS0FJQUlBQVF6d0ZCQTNScUdpQUFLQUlBSUFBUXp3RkJBM1JxR2lBQUtBSUFHZ3N0QVFGL0lBQWdBQ2dDQkJDeUJTQUFLQUlBQkVBZ0FDZ0NFQm9nQUNnQ0FDRUJJQUFRc3dVYUlBRVFNd3NMVUFFQmZ5QUFFTk1DSUFBUU5DQUFLQUlBSUFBb0FnUWdBVUVFYWlJQ0VMQUNJQUFnQWhCSklBQkJCR29nQVVFSWFoQkpJQUFRTkNBQkVEMFFTU0FCSUFFb0FnUTJBZ0FnQUNBQUVFWVFnUU1MV2dFQ2Z5TUFRUkJySWdJa0FDQUNJQUUyQWd3Z0FTQUFFTjBESWdOTkJFQWdBQkRQQVNJQUlBTkJBWFpKQkVBZ0FpQUFRUUYwTmdJSUlBSkJDR29nQWtFTWFoQjlLQUlBSVFNTElBSkJFR29rQUNBRER3c1FsQUVBQ3djQUlBQVFUaG9MTEFBZ0FDZ0NBQm9nQUNnQ0FDQUFFT3dCUVFKMGFob2dBQ2dDQUNBQUVPd0JRUUowYWhvZ0FDZ0NBQm9MVkFFQ2Z5TUFRUkJySWdJa0FDQUNJQUFnQVJDdEFpSUJLQUlFSVFNRFFDQUJLQUlJSUFOSEJFQWdBQkEwR2lBQktBSUVFT0FESUFFZ0FTZ0NCRUVFYWlJRE5nSUVEQUVMQ3lBQkVIWWdBa0VRYWlRQUN5c0JBWDhnQUNnQ0JDRUNBMEFnQVNBQ1J3UkFJQUFRTkJvZ0FrRUlheUVDREFFTEN5QUFJQUUyQWdRTFBnRUNmeU1BUVJCcklnTWtBQ0FESUFCQkFSQzFCU0VDSUFBUU5DQUNLQUlFSUFFUXp3SWdBaUFDS0FJRVFRaHFOZ0lFSUFJUWRpQURRUkJxSkFBTEtBQWdBQ0FCRUVrZ0FFRUVhaUFCUVFScUVFa2dBQkEwSUFFUU5CQkpJQUFRTkJvZ0FSQTBHZ3VDQVFBQ1FDQUNRd0FBQUFCZ0JFQWdBQ2dDRkxJZ0FsNUZEUUVnQUNvQ0dDQUNFTTBGUVFFZ0FYU3lsQThMUWNDWEJFR212Z0VRTWtHeHVBRVFNa0h5SkJBeVFlZ0JFRFpCK2lrUU1rR0V2d0VRTWhBMUVBQUFDMEhBbHdSQi9ya0JFREpCc2JnQkVESkI4aVFRTWtIcEFSQTJRZm9wRURKQnZiOEJFRElRTlJBQUFBdGFBUUovSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ0FCSUFBUTFnVWlBMDBFUUNBQUVPQUJJZ0FnQTBFQmRra0VRQ0FDSUFCQkFYUTJBZ2dnQWtFSWFpQUNRUXhxRUgwb0FnQWhBd3NnQWtFUWFpUUFJQU1QQ3hDVUFRQUxEQUFnQVNBQ0xRQUFPZ0FBQ3lFQUlBQWdBVFlDQUNBQUlBRW9BZ1FpQVRZQ0JDQUFJQUVnQW1vMkFnZ2dBQXNTQUNBQUVEMG9BZ0FnQUNnQ0FHdEJERzBMTEFBZ0FDZ0NBQm9nQUNnQ0FDQUFFTGNCUVF4c2Fob2dBQ2dDQUNBQUVMY0JRUXhzYWhvZ0FDZ0NBQm9MSUFBZ0FTQUNLUUlBTndJQUlBRWdBaWdDRURZQ0VDQUJJQUlwQWdnM0FnZ0xGd0FnQUNBQkVLa05JQUJCQURZQ1NDQUFRWDgyQWt3TFdnSUJmd0YrQWtBQ2YwRUFJQUJGRFFBYUlBQ3RJQUd0ZmlJRHB5SUNJQUFnQVhKQmdJQUVTUTBBR2tGL0lBSWdBMElnaUtjYkN5SUNFRG9pQUVVTkFDQUFRUVJyTFFBQVFRTnhSUTBBSUFCQkFDQUNFRHNhQ3lBQUMwa0JBbjhnQUNnQ0JDSUZRUWgxSVFZZ0FDZ0NBQ0lBSUFFZ0JVRUJjUVIvSUFJb0FnQWdCbW9vQWdBRklBWUxJQUpxSUFOQkFpQUZRUUp4R3lBRUlBQW9BZ0FvQWhnUkJ3QUx2Z0VCQTM4akFFRVFheUlESkFBZ0F5QUJOZ0lNQWtBQ1FBSkFBa0FnQUJDYkFRUkFJQUFRalFJaEFTQUFLQUlFSWdRZ0FVRUJheUlDUmcwQkRBTUxRUUVoQkVFQklRSWdBQzBBQ3lJQlFRRkhEUUVMSUFBZ0FrRUJJQUlnQWhEMEJTQUVJUUVnQUJDYkFRMEJDeUFBSWdJZ0FVRUJhaENxQVF3QkN5QUFLQUlBSVFJZ0FDQUVRUUZxRUpvQklBUWhBUXNnQWlBQlFRSjBhaUlBSUFOQkRHb1FnZ0VnQTBFQU5nSUlJQUJCQkdvZ0EwRUlhaENDQVNBRFFSQnFKQUFMdXdFQkEzOGpBRUVRYXlJREpBQWdBeUFCT2dBUEFrQUNRQUpBQWtBZ0FCQ2JBUVJBSUFBUWpRSWhBU0FBS0FJRUlnUWdBVUVCYXlJQ1JnMEJEQU1MUVFvaEJFRUtJUUlnQUMwQUN5SUJRUXBIRFFFTElBQWdBa0VCSUFJZ0FoQ0VCQ0FFSVFFZ0FCQ2JBUTBCQ3lBQUlnSWdBVUVCYWhDcUFRd0JDeUFBS0FJQUlRSWdBQ0FFUVFGcUVKb0JJQVFoQVFzZ0FTQUNhaUlBSUFOQkQyb1FrQUVnQTBFQU9nQU9JQUJCQVdvZ0EwRU9haENRQVNBRFFSQnFKQUFMUlFFQmZ5TUFRUkJySWdJa0FBSkFJQUVRbXdGRkJFQWdBQ0FCS0FJSU5nSUlJQUFnQVNrQ0FEY0NBQXdCQ3lBQUlBRW9BZ0FnQVNnQ0JCQ0ZCQXNnQWtFUWFpUUFDd01BQVFzUkFDQUFJQUVnQVNnQ0FDZ0NLQkVDQUFzSUFFSC8vLy8vQndzRkFFSC9BQXNKQUNBQVFRQTJBZ0FMQ1FBZ0FDQUJFT0lNQzk0REFRaC9Jd0JCRUdzaUNpUUFJQVlRbndFaEN5QUtJQVlRdWdJaUJoQ2RBUUpBSUFvUXZ3RUVRQ0FMSUFBZ0FpQURFT1VCSUFVZ0F5QUNJQUJyUVFKMGFpSUdOZ0lBREFFTElBVWdBellDQUFKQUFrQWdBQ0lJTFFBQUlnZEJLMnNPQXdBQkFBRUxJQXNnQjBFWWRFRVlkUkNsQVNFSUlBVWdCU2dDQUNJSFFRUnFOZ0lBSUFjZ0NEWUNBQ0FBUVFGcUlRZ0xBa0FnQWlBSWEwRUNTQTBBSUFndEFBQkJNRWNOQUNBSUxRQUJRU0J5UWZnQVJ3MEFJQXRCTUJDbEFTRUhJQVVnQlNnQ0FDSUpRUVJxTmdJQUlBa2dCellDQUNBTElBZ3NBQUVRcFFFaEJ5QUZJQVVvQWdBaUNVRUVhallDQUNBSklBYzJBZ0FnQ0VFQ2FpRUlDeUFJSUFJUWt3SkJBQ0VKSUFZUW5nRWhERUVBSVFjZ0NDRUdBMzhnQWlBR1RRUi9JQU1nQ0NBQWEwRUNkR29nQlNnQ0FCQ2RBeUFGS0FJQUJRSkFJQW9nQnhCQUxRQUFSUTBBSUFrZ0NpQUhFRUFzQUFCSERRQWdCU0FGS0FJQUlnbEJCR28yQWdBZ0NTQU1OZ0lBSUFjZ0J5QUtFRGRCQVd0SmFpRUhRUUFoQ1FzZ0N5QUdMQUFBRUtVQklRMGdCU0FGS0FJQUlnNUJCR28yQWdBZ0RpQU5OZ0lBSUFaQkFXb2hCaUFKUVFGcUlRa01BUXNMSVFZTElBUWdCaUFESUFFZ0FHdEJBblJxSUFFZ0FrWWJOZ0lBSUFvUU9Sb2dDa0VRYWlRQUM5QUJBUUovSUFKQmdCQnhCRUFnQUVFck9nQUFJQUJCQVdvaEFBc2dBa0dBQ0hFRVFDQUFRU002QUFBZ0FFRUJhaUVBQ3lBQ1FZUUNjU0lEUVlRQ1J3UkFJQUJCcnRRQU93QUFJQUJCQW1vaEFBc2dBa0dBZ0FGeElRSURRQ0FCTFFBQUlnUUVRQ0FBSUFRNkFBQWdBRUVCYWlFQUlBRkJBV29oQVF3QkN3c2dBQUovQWtBZ0EwR0FBa2NFUUNBRFFRUkhEUUZCeGdCQjVnQWdBaHNNQWd0QnhRQkI1UUFnQWhzTUFRdEJ3UUJCNFFBZ0Foc2dBMEdFQWtZTkFCcEJ4d0JCNXdBZ0Foc0xPZ0FBSUFOQmhBSkhDOVVEQVFoL0l3QkJFR3NpQ2lRQUlBWVFtUUVoQ3lBS0lBWVF2QUlpQmhDZEFRSkFJQW9RdndFRVFDQUxJQUFnQWlBREVQd0JJQVVnQXlBQ0lBQnJhaUlHTmdJQURBRUxJQVVnQXpZQ0FBSkFBa0FnQUNJSUxRQUFJZ2RCSzJzT0F3QUJBQUVMSUFzZ0IwRVlkRUVZZFJDR0FTRUlJQVVnQlNnQ0FDSUhRUUZxTmdJQUlBY2dDRG9BQUNBQVFRRnFJUWdMQWtBZ0FpQUlhMEVDU0EwQUlBZ3RBQUJCTUVjTkFDQUlMUUFCUVNCeVFmZ0FSdzBBSUF0Qk1CQ0dBU0VISUFVZ0JTZ0NBQ0lKUVFGcU5nSUFJQWtnQnpvQUFDQUxJQWdzQUFFUWhnRWhCeUFGSUFVb0FnQWlDVUVCYWpZQ0FDQUpJQWM2QUFBZ0NFRUNhaUVJQ3lBSUlBSVFrd0pCQUNFSklBWVFuZ0VoREVFQUlRY2dDQ0VHQTM4Z0FpQUdUUVIvSUFNZ0NDQUFhMm9nQlNnQ0FCQ1RBaUFGS0FJQUJRSkFJQW9nQnhCQUxRQUFSUTBBSUFrZ0NpQUhFRUFzQUFCSERRQWdCU0FGS0FJQUlnbEJBV28yQWdBZ0NTQU1PZ0FBSUFjZ0J5QUtFRGRCQVd0SmFpRUhRUUFoQ1FzZ0N5QUdMQUFBRUlZQklRMGdCU0FGS0FJQUlnNUJBV28yQWdBZ0RpQU5PZ0FBSUFaQkFXb2hCaUFKUVFGcUlRa01BUXNMSVFZTElBUWdCaUFESUFFZ0FHdHFJQUVnQWtZYk5nSUFJQW9RT1JvZ0NrRVFhaVFBQ3d3QUlBQVFQaUFCUVFKMGFndTFCQUVMZnlNQVFZQUJheUlJSkFBZ0NDQUJOZ0o0SUFJZ0F4REdBeUVKSUFoQnd3STJBaEFnQ0VFSWFrRUFJQWhCRUdvUVppRVBJQWhCRUdvaENnSkFJQWxCNVFCUEJFQWdDUkE2SWdwRkRRRWdEeUFLRUg4TElBb2hCeUFDSVFFRFFDQUJJQU5HQkVBRFFBSkFJQWxCQUNBQUlBaEIrQUJxRUpJQkcwVUVRQ0FBSUFoQitBQnFFSUFCQkVBZ0JTQUZLQUlBUVFKeU5nSUFDd3dCQ3lBQUVHY2hEU0FHUlFSQUlBUWdEUkNHQVNFTkN5QU1RUUZxSVJCQkFDRU9JQW9oQnlBQ0lRRURRQ0FCSUFOR0JFQWdFQ0VNSUE1RkRRTWdBQkI1R2lBS0lRY2dBaUVCSUFrZ0MycEJBa2tOQXdOQUlBRWdBMFlFUUF3RkJRSkFJQWN0QUFCQkFrY05BQ0FCRURjZ0RFWU5BQ0FIUVFBNkFBQWdDMEVCYXlFTEN5QUhRUUZxSVFjZ0FVRU1haUVCREFFTEFBc0FCUUpBSUFjdEFBQkJBVWNOQUNBQklBd1FvUU1vQWdBaEVRSkFJQVlFZnlBUkJTQUVJQkVRaGdFTElBMUdCRUJCQVNFT0lBRVFOeUFRUncwQ0lBZEJBam9BQUNBTFFRRnFJUXNNQVFzZ0IwRUFPZ0FBQ3lBSlFRRnJJUWtMSUFkQkFXb2hCeUFCUVF4cUlRRU1BUXNBQ3dBTEN3SkFBa0FEUUNBQ0lBTkdEUUVnQ2kwQUFFRUNSd1JBSUFwQkFXb2hDaUFDUVF4cUlRSU1BUXNMSUFJaEF3d0JDeUFGSUFVb0FnQkJCSEkyQWdBTElBOFFaU0FJUVlBQmFpUUFJQU1QQlFKQUlBRVF2d0ZGQkVBZ0IwRUJPZ0FBREFFTElBZEJBam9BQUNBTFFRRnFJUXNnQ1VFQmF5RUpDeUFIUVFGcUlRY2dBVUVNYWlFQkRBRUxBQXNBQ3hCM0FBc1JBQ0FBSUFFZ0FDZ0NBQ2dDREJFREFBdThCQUVMZnlNQVFZQUJheUlJSkFBZ0NDQUJOZ0o0SUFJZ0F4REdBeUVKSUFoQnd3STJBaEFnQ0VFSWFrRUFJQWhCRUdvUVppRVBJQWhCRUdvaENnSkFJQWxCNVFCUEJFQWdDUkE2SWdwRkRRRWdEeUFLRUg4TElBb2hCeUFDSVFFRFFDQUJJQU5HQkVBRFFBSkFJQWxCQUNBQUlBaEIrQUJxRUpNQkcwVUVRQ0FBSUFoQitBQnFFSUVCQkVBZ0JTQUZLQUlBUVFKeU5nSUFDd3dCQ3lBQUVHZ2hEU0FHUlFSQUlBUWdEUkNqQXlFTkN5QU1RUUZxSVJCQkFDRU9JQW9oQnlBQ0lRRURRQ0FCSUFOR0JFQWdFQ0VNSUE1RkRRTWdBQkI2R2lBS0lRY2dBaUVCSUFrZ0MycEJBa2tOQXdOQUlBRWdBMFlFUUF3RkJRSkFJQWN0QUFCQkFrY05BQ0FCRURjZ0RFWU5BQ0FIUVFBNkFBQWdDMEVCYXlFTEN5QUhRUUZxSVFjZ0FVRU1haUVCREFFTEFBc0FCUUpBSUFjdEFBQkJBVWNOQUNBQklBd1FRQ3dBQUNFUkFrQWdEVUgvQVhFZ0JnUi9JQkVGSUFRZ0VSQ2pBd3RCL3dGeFJnUkFRUUVoRGlBQkVEY2dFRWNOQWlBSFFRSTZBQUFnQzBFQmFpRUxEQUVMSUFkQkFEb0FBQXNnQ1VFQmF5RUpDeUFIUVFGcUlRY2dBVUVNYWlFQkRBRUxBQXNBQ3dzQ1FBSkFBMEFnQWlBRFJnMEJJQW90QUFCQkFrY0VRQ0FLUVFGcUlRb2dBa0VNYWlFQ0RBRUxDeUFDSVFNTUFRc2dCU0FGS0FJQVFRUnlOZ0lBQ3lBUEVHVWdDRUdBQVdva0FDQUREd1VDUUNBQkVMOEJSUVJBSUFkQkFUb0FBQXdCQ3lBSFFRSTZBQUFnQzBFQmFpRUxJQWxCQVdzaENRc2dCMEVCYWlFSElBRkJER29oQVF3QkN3QUxBQXNRZHdBTERRQWdBRUVFYWhEa0Fob2dBQXRWQUNBQUlBRTJBZ1FnQUVFQU9nQUFJQUVnQVNnQ0FFRU1heWdDQUdvUW13UUVRQ0FCSUFFb0FnQkJER3NvQWdCcUtBSklCRUFnQVNBQktBSUFRUXhyS0FJQWFpZ0NTQkNuQXdzZ0FFRUJPZ0FBQ3lBQUMyNEJBbjhqQUVFUWF5SUJKQUFnQUNBQUtBSUFRUXhyS0FJQWFpZ0NHQVJBQWtBZ0FVRUlhaUFBRUtZRElnSXRBQUJGRFFBZ0FDQUFLQUlBUVF4cktBSUFhaWdDR0JEbEFrRi9SdzBBSUFBZ0FDZ0NBRUVNYXlnQ0FHcEJBUkN6QWdzZ0FoRGpBZ3NnQVVFUWFpUUFDdzBBSUFCQkNHb1E1QUlhSUFBTEJBQkJmd3NkQUNBQUlBRWdBaUFESUFRZ0JTQUdJQWNnQUNnQ0FDZ0NEQkVPQUFzTUFDQUFJQUZCQkdvUWl3UUxEd0FnQUNnQ1NCb2dBQ0FCTmdKSUMxNEJBWDhnQUNnQ1RFRUFTQVJBSUFBb0FnUWlBU0FBS0FJSVNRUkFJQUFnQVVFQmFqWUNCQ0FCTFFBQUR3c2dBQkMxQXc4TEFuOGdBQ2dDQkNJQklBQW9BZ2hKQkVBZ0FDQUJRUUZxTmdJRUlBRXRBQUFNQVFzZ0FCQzFBd3NMZUFFRGYwRi9JUUlDUUNBQVFYOUdEUUFnQVNnQ1RFRUFUaUVFQWtBQ1FDQUJLQUlFSWdORkJFQWdBUkNyQkJvZ0FTZ0NCQ0lEUlEwQkN5QURJQUVvQWl4QkNHdExEUUVMSUFSRkRRRkJmdzhMSUFFZ0EwRUJheUlDTmdJRUlBSWdBRG9BQUNBQklBRW9BZ0JCYjNFMkFnQWdBQ0VDQ3lBQ0N4WUFJQUJGQkVCQkFBOExRWlNEQkNBQU5nSUFRWDhMa0FFQkJIOGdBQkNKQVNFRUFrQkJ2SXdFS0FJQVJRMEFJQUF0QUFCRkRRQWdBRUU5RUprQ0RRQkJ2SXdFS0FJQUtBSUFJZ0pGRFFBQ1FBTkFJQUFnQWlBRUVOOE5JUU5Cdkl3RUtBSUFJUUlnQTBVRVFDQUNJQUZCQW5ScUtBSUFJQVJxSWdNdEFBQkJQVVlOQWdzZ0FpQUJRUUZxSWdGQkFuUnFLQUlBSWdJTkFBdEJBQThMSUFOQkFXb2hBUXNnQVF0SUFRSi9BbjhnQVVFZlRRUkFJQUFvQWdBaEFpQUFRUVJxREFFTElBRkJJR3NoQVNBQUN5Z0NBQ0VESUFBZ0FpQUJkRFlDQUNBQUlBTWdBWFFnQWtFZ0lBRnJkbkkyQWdRTHRBSUJCWDhqQUVId0FXc2lCeVFBSUFjZ0F5Z0NBQ0lJTmdMb0FTQURLQUlFSVFNZ0J5QUFOZ0lBSUFjZ0F6WUM3QUZCQVNFSkFrQUNRQUpBSUFoQkFVY2dBM0pGQkVBZ0FDRUREQUVMUVFBZ0FXc2hDeUFBSVFnRFFDQUlJQVlnQkVFQ2RHb2lDaWdDQUdzaUF5QUFJQUlSQXdCQkFVZ0VRQ0FJSVFNTUFnc0NRQ0FGSUFSQkFraHlSUVJBSUFwQkNHc29BZ0FoQlNBSUlBdHFJZ29nQXlBQ0VRTUFRWDlLRFFFZ0NpQUZheUFESUFJUkF3QkJmMG9OQVFzZ0J5QUpRUUowYWlBRE5nSUFJQWRCNkFGcUlBZEI2QUZxRUlBSElnVVFzd01nQ1VFQmFpRUpJQVFnQldvaEJFRUFJUVVnQXlFSUlBY29BdWdCUVFGSERRRWdCeWdDN0FFTkFRd0RDd3NnQ0NFRERBRUxJQVVOQVFzZ0FTQUhJQWtRL3dZZ0F5QUJJQUlnQkNBR0VLZ0VDeUFIUWZBQmFpUUFDMGdCQW44Q2Z5QUJRUjlOQkVBZ0FDZ0NCQ0VDSUFBTUFRc2dBVUVnYXlFQklBQkJCR29MS0FJQUlRTWdBQ0FDSUFGMk5nSUVJQUFnQWtFZ0lBRnJkQ0FESUFGMmNqWUNBQXZsQWdFR2Z5TUFRUkJySWdja0FDQURRWUNNQkNBREd5SUZLQUlBSVFNQ1FBSkFBa0FnQVVVRVFDQUREUUVNQXd0QmZpRUVJQUpGRFFJZ0FDQUhRUXhxSUFBYklRWUNRQ0FEQkVBZ0FpRUFEQUVMSUFFdEFBQWlBRUVZZEVFWWRTSURRUUJPQkVBZ0JpQUFOZ0lBSUFOQkFFY2hCQXdFQ3lBQkxBQUFJUUJCalBNREtBSUFLQUlBUlFSQUlBWWdBRUgvdndOeE5nSUFRUUVoQkF3RUN5QUFRZjhCY1VIQ0FXc2lBRUV5U3cwQklBQkJBblJCd0lVRGFpZ0NBQ0VESUFKQkFXc2lBRVVOQWlBQlFRRnFJUUVMSUFFdEFBQWlDRUVEZGlJSlFSQnJJQU5CR25VZ0NXcHlRUWRMRFFBRFFDQUFRUUZySVFBZ0NFR0FBV3NnQTBFR2RISWlBMEVBVGdSQUlBVkJBRFlDQUNBR0lBTTJBZ0FnQWlBQWF5RUVEQVFMSUFCRkRRSWdBVUVCYWlJQkxRQUFJZ2hCd0FGeFFZQUJSZzBBQ3dzZ0JVRUFOZ0lBUVpTREJFRVpOZ0lBUVg4aEJBd0JDeUFGSUFNMkFnQUxJQWRCRUdva0FDQUVDMEVCQW44akFFRVFheUlCSkFCQmZ5RUNBa0FnQUJDckJBMEFJQUFnQVVFUGFrRUJJQUFvQWlBUkJBQkJBVWNOQUNBQkxRQVBJUUlMSUFGQkVHb2tBQ0FDQzNnQUlBSkJBVVlFUUNBQklBQW9BZ2dnQUNnQ0JHdXNmU0VCQ3dKQUlBQW9BaFFnQUNnQ0hFc0VRQ0FBUVFCQkFDQUFLQUlrRVFRQUdpQUFLQUlVUlEwQkN5QUFRUUEyQWh3Z0FFSUFOd01RSUFBZ0FTQUNJQUFvQWlnUkZRQkNBRk1OQUNBQVFnQTNBZ1FnQUNBQUtBSUFRVzl4TmdJQUN3dkxBUUVDZnlNQVFSQnJJZ0VrQUFKQUlBQzlRaUNJcDBILy8vLy9CM0VpQWtIN3c2VC9BMDBFUUNBQ1FZQ0F3UElEU1EwQklBQkVBQUFBQUFBQUFBQkJBQkRwQWlFQURBRUxJQUpCZ0lEQS93ZFBCRUFnQUNBQW9TRUFEQUVMQWtBQ1FBSkFBa0FnQUNBQkVKWUhRUU54RGdNQUFRSURDeUFCS3dNQUlBRXJBd2hCQVJEcEFpRUFEQU1MSUFFckF3QWdBU3NEQ0JEb0FpRUFEQUlMSUFFckF3QWdBU3NEQ0VFQkVPa0NtaUVBREFFTElBRXJBd0FnQVNzRENCRG9BcG9oQUFzZ0FVRVFhaVFBSUFBTERnQWdBRUdNOHdNb0FnQVFqUTRMOWdZQkRIOGpBRUdnQ21zaUJ5UUFJQUpCQkU4RVFDQUFLQUlBSWdRZ0FqWUNHQ0FFUVRRMkFoUWdBQ0FBS0FJQUtBSUFFUUFBQ3lBQUlBSkJBblJxSWdSQnRBRnFJQVJCeEFGcUlBRWJLQUlBSWdoRkJFQWdBQ2dDQUNJRUlBSTJBaGdnQkVFME5nSVVJQUFnQUNnQ0FDZ0NBQkVBQUFzZ0F5Z0NBQ0lKUlFSQUlBTWdBRUVCUVpBTElBQW9BZ1FvQWdBUkJBQWlDVFlDQUFzZ0NTQUlOZ0tNQVVFQUlRUkJBU0VDQTBBZ0JDQUNJQWhxTFFBQUlnVnFJZ05CZ1FKT0JFQWdBQ2dDQUNJR1FRazJBaFFnQUNBR0tBSUFFUUFBQ3lBRkJFQWdCMEdRQ0dvZ0JHb2dBaUFGRURzYUlBTWhCQXNnQWtFQmFpSUNRUkZIRFFBTFFRQWhBeUFIUVpBSWFpQUVha0VBT2dBQUlBY3RBSkFJSWdZRVFDQUdRUmgwUVJoMUlRVkJBQ0VDQTBBZ0JrRVlkRUVZZFNBRlJnUkFBMEFnQnlBRFFRSjBhaUFDTmdJQUlBSkJBV29oQWlBRklBTkJBV29pQXlBSFFaQUlhbW9zQUFBaUJrWU5BQXNMUVFFZ0JYUWdBa3dFUUNBQUtBSUFJZ3BCQ1RZQ0ZDQUFJQW9vQWdBUkFBQUxJQVZCQVdvaEJTQUNRUUYwSVFJZ0JrSC9BWEVOQUFzTFFRQWhBMEVCSVFJRFFDQUpJQUpCQW5ScUFuOUJmeUFDSUFocUlnVXRBQUJGRFFBYUlBa2dBa0VDZEdvZ0F5QUhJQU5CQW5ScUtBSUFhellDU0NBRElBVXRBQUJxSWdOQkFuUWdCMnBCQkdzb0FnQUxOZ0lBSUFKQkFXb2lBa0VSUncwQUN5QUpRZi8vUHpZQ1JFRUFJUW9nQ1VHUUFXcEJBRUdBQ0JBN0drRUJJUVlEUUNBR0lBaHFJZ3d0QUFBRVFFRUJJUXRCQVVFSUlBWnJJZzEwSVFVRFFDQUlJQXBxSVE0Z0J5QUtRUUowYWlnQ0FDQU5kQ0VDSUFVaEF3TkFJQWtnQWtFQ2RHb2dCallDa0FFZ0FpQUpha0dRQ1dvZ0RpMEFFVG9BQUNBQ1FRRnFJUUlnQTBFQlNpRVBJQU5CQVdzaEF5QVBEUUFMSUFwQkFXb2hDaUFMSUF3dEFBQkpJUUlnQzBFQmFpRUxJQUlOQUFzTElBWkJBV29pQmtFSlJ3MEFDd0pBSUFGRklBUkJBVWh5RFFCQkFDRUNJQVJCQVVjRVFDQUVRWDV4SVFNRFFDQUNJQWhxTFFBUlFSQlBCRUFnQUNnQ0FDSUJRUWsyQWhRZ0FDQUJLQUlBRVFBQUN5QUlJQUpCQVhKcUxRQVJRUTlMQkVBZ0FDZ0NBQ0lCUVFrMkFoUWdBQ0FCS0FJQUVRQUFDeUFDUVFKcUlRSWdBMEVDYXlJRERRQUxDeUFFUVFGeFJRMEFJQUlnQ0dvdEFCRkJFRWtOQUNBQUtBSUFJZ0ZCQ1RZQ0ZDQUFJQUVvQWdBUkFBQUxJQWRCb0FwcUpBQUx5UUVCQVg4Q1FDQUVRUUZJRFFBZ0JFRUJheUVHSUFBZ0FVRUNkR29oQUNBQ0lBTkJBblJxSVFFZ0JFRURjU0lDQkVBRFFDQUJLQUlBSUFBb0FnQWdCUkEvR2lBRVFRRnJJUVFnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUZySWdJTkFBc0xJQVpCQTBrTkFBTkFJQUVvQWdBZ0FDZ0NBQ0FGRUQ4YUlBRW9BZ1FnQUNnQ0JDQUZFRDhhSUFFb0FnZ2dBQ2dDQ0NBRkVEOGFJQUVvQWd3Z0FDZ0NEQ0FGRUQ4YUlBRkJFR29oQVNBQVFSQnFJUUFnQkVFRVNpRUNJQVJCQkdzaEJDQUNEUUFMQ3dzU0FDQUFJQUZxUVFGcklnQWdBQ0FCYjJzTE5BRUNmMEVJRURvaUFRUi9JQUVnQUVFRGRCQTZJZ0kyQWdBZ0FrVUVRQ0FCRUROQkFBOExJQUVnQURZQ0JDQUJCVUVBQ3dzbkFRRi9Jd0JCRUdzaUFpUUFJQUJCQTBHMGhnSkJ6SUVDUWQwQUlBRVFCQ0FDUVJCcUpBQUxFd0FnQUNBRG9pQUJJQVNpb0NBQ0lBV2lvQXZRQWdFRGZ5TUFRUkJySWdZa0FBSkFBa0FDUUFKQUlBSUVRQ0FEUlEwQklBUkZEUUlnQUNBQkVOY0VJQUlnQkd4c0lnVTJBZ3dnQXlBRmJDSUZJQUFvQWhSSEJFQWdBRUVZYWlJSElBVVFTeENzQ0NBSEtBSUFSUTBFSUFjb0FnQkZEUVVMSUFBZ0JUWUNGQ0FBSUFRMkFoQWdBQ0FETmdJSUlBQWdBallDQkNBQUlBRTJBZ0FnQmtFUWFpUUFEd3RCd0pjRVFkTVRFREpCdGg4UU1rR2pKaEF5UWY4QUVEWkJwQ29RTWtHSEx4QXlFRFVRQUFBTFFjQ1hCRUdzTlJBeVFiWWZFREpCb3lZUU1rR0FBUkEyUWFRcUVESkI3RHNRTWhBMUVBQUFDMEhBbHdSQjJNMEFFREpCdGg4UU1rR2pKaEF5UVlJQkVEWkJwQ29RTWtIMTBnQVFNaEExRUFBQUMwSEFsd1JCNU5nQUVESkJ0aDhRTWtHakpoQXlRWlVCRURaQnBDb1FNa0c0M1FBUU1oQTFFQUFBQzBFUUVBa2lBQ0FHUWJ6aEFCQ1lBUkROQWlBQVFjemZBVUVPRUFnQUN4UUFJQUFnQUtJZ0FTQUJvcUFnQWlBQ29xQ2ZDeEFBSUFBb0FnQWdBU2dDQUd0QkFuVUw0d0VCQW44akFFRWdheUlFSkFBQ1FDQUNMUUJrQkVBZ0JDQUFRY2dBYWlJQUVOUUNOZ0lJSUFSQkdHb2dCRUVJYWhDRUFpRUJJQUlRb3dJUXJ3SWhBeUFDRUtNQ0VOUUNJUUlnQUNBQktBSUFJQU1nQWhDRUNRd0JDeUFDSUFSQkNHb1FUaUlGSUFFZ0F4Q0NDVUVBSVFJRFFDQUZFRU1nQWswRVFBSkFJQUFvQW1RZ0FDZ0NhRTROQUNBQkVPZ0VEUUFnQVNnQ0FDZ0NBQ0VDSUFFUTZnUWdBQ0FBS0FKa1FRRnFOZ0prSUFBZ0FTQUNJQU1Rd2dNTElBVVFkUVVnQUNBQklBVWdBaEE4S0FJQUlBTVF3Z01nQWtFQmFpRUNEQUVMQ3dzZ0JFRWdhaVFBQzFrQkFYMGdBQ0FDS2dJSUlBSXFBZ0FnQTVRZ0Fpb0NCQ0FFbEpLU0lBSXFBaUFnQWlvQ0dDQURsQ0FDS2dJY0lBU1VrcElpQlpVNEFnQWdBU0FDS2dJVUlBSXFBZ3dnQTVRZ0Fpb0NFQ0FFbEpLU0lBV1ZPQUlBQ3h3QUlBQVF1QUlnQVFSQUlBQWdBUkR2Q0NBQUlBRVFod01MSUFBTEN3QWdBQ0FCUVNRUVB4b0xDZ0FnQVNBQWEwRU1iUXVSQWdJTWZ3RjhRWDhoQ2dKQUlBRW9BZ2dpQmlBQ0tBSUVSdzBBSUFBb0FnUWlBeUFCS0FJRVJ3MEFJQUFvQWdnaUJ5QUNLQUlJUncwQVFRQWhDaUFEUVFBZ0EwRUFTaHNoQ3lBSFFRQWdCMEVBU2hzaERDQUdRUUFnQmtFQVNoc2hEU0FBS0FJQUlRTURRQ0FFSUF0R0RRRWdCQ0FHYkNFT1FRQWhCUU5BSUFVZ0RFWkZCRUFnQTBJQU53TUFJQUlvQWdBZ0JVRURkR29oQ0NBQktBSUFJQTVCQTNScUlRbEJBQ0VBUkFBQUFBQUFBQUFBSVE4RFFDQUFJQTFHUlFSQUlBTWdEeUFKS3dNQUlBZ3JBd0Npb0NJUE9RTUFJQUJCQVdvaEFDQUpRUWhxSVFrZ0NDQUhRUU4wYWlFSURBRUxDeUFGUVFGcUlRVWdBMEVJYWlFRERBRUxDeUFFUVFGcUlRUU1BQXNBQ3lBS0Mxc0JBbjhnQWtFQUlBSkJBRW9iSVFJRFFDQUNJQVJIQkVBZ0FDQUVRUUowYWdKL0lBTWdBeWdDQUVIOWh3MXNRY085bWdGcUlnVTJBZ0FnQUNBRlFSQjJRZi8vQVhFZ0FXOUJBblJxQ3hCSklBUkJBV29oQkF3QkN3c0xOUUVCZnlBQklBQVFReUlEU3dSQUlBQWdBU0FEYXlBQ0VKOEpEd3NnQVNBRFNRUkFJQUFnQUNnQ0FDQUJRUUowYWhEeUF3c0xEUUFnQUNnQ0FCb2dBQkQwQkFzbkFRRi9Jd0JCRUdzaUFTUUFJQUZCQ0dvZ0FCQ2dDUkJ2S0FJQUlRQWdBVUVRYWlRQUlBQUxFd0FnQUNBQUtBSUFRUUZySWdBMkFnQWdBQXNZQVFGL0l3QkJFR3NpQVNRQUlBQVFNeUFCUVJCcUpBQUxGd0FnQUJDR0JTQUFRUUEyQWdnZ0FFR2M1Z00yQWdBTEhBQWdBRUgvLy8vL0Ewc0VRRUdYRWhDUEFRQUxJQUJCQW5RUVN3c1dBRUVCUVNBZ0FFRUJhMmRyZENBQUlBQkJBazhiQzljQkFnTi9BWDBqQUVFUWF5SUNKQUFnQWlBQk5nSU1Ba0FnQWlBQlFRRkdCSDlCQWdVZ0FTQUJRUUZyY1VVTkFTQUJFTDhDQ3lJQk5nSU1Dd0pBSUFBUWlBRWlBeUFCU1FSQUlBQWdBUkNLQlF3QkN5QUJJQU5QRFFBZ0F4RGRBU0VFQW44Z0FCQTlLQUlBc3lBQUVGc3FBZ0NWalNJRlF3QUFnRTlkSUFWREFBQUFBR0J4QkVBZ0Jha01BUXRCQUFzaEFTQUNBbjhnQkFSQUlBRVEwQU1NQVFzZ0FSQy9BZ3MyQWdnZ0FpQUNRUXhxSUFKQkNHb1FmU2dDQUNJQk5nSU1JQUVnQTA4TkFDQUFJQUVRaWdVTElBSkJFR29rQUFzVUFDQUFJQUVRU1NBQVFRUnFJQUZCQkdvUVNRc0hBQ0FBUVR4cUN5UUJBbjhqQUVFUWF5SUFKQUFnQUVFSWFrRUFFRzhvQWdBaEFTQUFRUkJxSkFBZ0FRdFVBUUovSXdCQkVHc2lBaVFBSUFJZ0FDQUJFTFVGSWdFb0FnUWhBd05BSUFFb0FnZ2dBMGNFUUNBQUVEUWFJQUVvQWdRUWtRVWdBU0FCS0FJRVFRaHFJZ00yQWdRTUFRc0xJQUVRZGlBQ1FSQnFKQUFMUFFFQmZ5TUFRUkJySWdFa0FDQUJRUWhxSUFBb0FnQW9BZ0JCUUdzUTJBTWFJQUVvQWdnUU5CQmJJUUFnQVVFSWFoRE5BU0FCUVJCcUpBQWdBQXNaQVFGL0lBQVFrUUVoQWlBQUlBRVFqZ1lnQUNBQ0VKUUZDeVFBSUFBZ0FTZ0NBRFlDQUNBQUlBRW9BZ1FpQVRZQ0JDQUJCRUFnQVJENEFnc2dBQXNzQVFGL0l3QkJFR3NpQVNRQUlBRkJBRFlDRENBQUlBRkJER29nQVVFSWFoRDhBaUFCUVJCcUpBQWdBQXVMQVFFR2Z3TkFJQVZCQTBjRVFDQUFJQVZCQkhRaUIyb2lCaUVJUVFBaEF3TkFJQU5CQkVjRVFDQURRUUowSWdRZ0FpQUhhbW9nQmlvQ0FDQUJJQVJxSWdRcUFnQ1VJQVlxQWdRZ0JDb0NFSlNTSUFncUFnZ2dCQ29DSUpTU09BSUFJQU5CQVdvaEF3d0JDd3NnQWlBSGFpSURJQVlxQWd3Z0F5b0NESkk0QWd3Z0JVRUJhaUVGREFFTEN3c1ZBQ0FBUWVqZUFUWUNBQ0FBUVFScUVPOERJQUFMTWdFQmZ5QUFRWWpmQVRZQ0FDQUFRVGhxRUhVZ0FFRXNhaEIxSUFCQklHb2lBUkN1QlNBQkVJZ0tJQUFRMndNYUlBQUxRd0VCZnlNQVFSQnJJZ0VrQUNBQUVEUWFJQUZCLy8vLy93RTJBZ3dnQVVILy8vLy9CellDQ0NBQlFReHFJQUZCQ0dvUXdnRW9BZ0FoQUNBQlFSQnFKQUFnQUFzTkFDQUFJQUtVSUFFZ0FaU1RDMGNCQW44Z0FDQUJFRFFRbXdvaEFpQUFJQUVvQWdBMkFnQWdBQ0FCS0FJRU5nSUVJQUVRTkNnQ0FDRURJQUlRTkNBRE5nSUFJQUVRTkVFQU5nSUFJQUZDQURjQ0FDQUFDd2tBSUFCQkFEWUNBQXNyQVFGL0lBQWdBU2dDQURZQ0FDQUJLQUlBSVFNZ0FDQUJOZ0lJSUFBZ0F5QUNRUUowYWpZQ0JDQUFDME1CQVg4akFFRVFheUlCSkFBZ0FCQTBHaUFCUWYvLy8vOEROZ0lNSUFGQi8vLy8vd2MyQWdnZ0FVRU1haUFCUVFocUVNSUJLQUlBSVFBZ0FVRVFhaVFBSUFBTFdRRUNmeU1BUVJCcklnSWtBQ0FDSUFCQkNHb2dBUkRoQXlJQktBSUFJUU1EUUNBQktBSUVJQU5IQkVBZ0FDZ0NFQm9nQVNnQ0FCRGdBeUFCSUFFb0FnQkJCR29pQXpZQ0FBd0JDd3NnQVJDMkFTQUNRUkJxSkFBTDZ3RUFJQU5GQkVBZ0JFRUJSZ1JBSUFnRVFDQUFJQUVnQWlBSUlBY1EyZ29QQ3lBR1JRUkFJQUFnQVNBQ0lBVWdCeEQ1Q2c4TElBQWdBU0FDSUFVZ0J4RFpEdzhMSUFnRVFDQUFJQUVnQWlBSUlBY1F2Z2tQQ3lBR1JRUkFJQUFnQVNBQ0lBVWdCeEQ2Q1E4TElBQWdBU0FDSUFVZ0J4Q2dDZzhMSUFSQkFVWUVRQ0FJQkVBZ0FDQUJJQUlnQ0NBSEVJRUlEd3NnQmtVRVFDQUFJQUVnQWlBRklBY1F6UWdQQ3lBQUlBRWdBaUFGSUFjUWtRa1BDeUFJQkVBZ0FDQUJJQUlnQ0NBSEVLTU9Ed3NnQmtVRVFDQUFJQUVnQWlBRklBY1FnUThQQ3lBQUlBRWdBaUFGSUFjUTJBOEx5UUlDQW44QmZRSkFBa0FnQmtFQlNBMEFJQVVvQWdRZ0JrRUJhazBOQUNBSFFRRklEUUVnQjBFQmFpSUlJQVVvQWdoUERRRWdCU0FIUVFGckVFMGhDU0FGSUFjUVRTRUhJQVVnQ0JCTklRZ2dBQ0FISUFaQkFuUWlCV29pQUNvQ0JDQUFRUVJySWdZcUFnQ1RRd0FBQUQrVU9BSUFJQUVnQlNBSWFpSUJLZ0lBSUFVZ0NXb2lCU29DQUpOREFBQUFQNVE0QWdBZ0FpQUFLZ0lFSUFZcUFnQWdBQ29DQUNJS0lBcVNrNUk0QWdBZ0F5QUJLZ0lBSUFVcUFnQWdBQ29DQUNJS0lBcVNrNUk0QWdBZ0JDQUZRUVJyS2dJQUlBRXFBZ1NTSUFVcUFnUWdBVUVFYXlvQ0FKS1RRd0FBZ0Q2VU9BSUFEd3RCd0pjRVFhN0tBUkF5UWVPN0FSQXlRZklrRURKQm5BSVFOa0g2S1JBeVFlSEZBUkF5RURVUUFBQUxRY0NYQkVHTHl3RVFNa0hqdXdFUU1rSHlKQkF5UVowQ0VEWkIraWtRTWtIbXhnRVFNaEExRUFBQUN5c0FJQUFvQWdBYUlBQW9BZ0FnQUJEUEFVRURkR29hSUFBb0FnQWFJQUFvQWdBZ0FCQkdRUU4wYWhvTE5RRUJmeUFBSUFBb0FnUVFyd29nQUNnQ0FBUkFJQUFvQWhBYUlBQW9BZ0FoQVNBQUVEMG9BZ0FnQUNnQ0FHc2FJQUVRTXdzTFVRRUJmeUFBRU5NRklBQVFOQ0FBS0FJQUlBQW9BZ1FnQVVFRWFpSUNFTEVLSUFBZ0FoQkpJQUJCQkdvZ0FVRUlhaEJKSUFBUU5DQUJFRDBRU1NBQklBRW9BZ1EyQWdBZ0FDQUFFSVVCRUxBS0MzOEJBbjhqQUVFUWF5SUVKQUFnQkVFQU5nSU1JQUJCREdvZ0JFRU1haUFERUxFQklBRUVRQ0FBS0FJUUdpQUJRY2ZqOFRoTEJFQkJzTlFCRUk4QkFBc2dBVUVrYkJCTElRVUxJQUFnQlRZQ0FDQUFJQVVnQWtFa2JHb2lBallDQ0NBQUlBSTJBZ1FnQUJBOUlBVWdBVUVrYkdvMkFnQWdCRUVRYWlRQUlBQUxaZ0VEZjBGL0lRSUNRQ0FBUlNBQlJYSU5BRUVBSVFJZ0FFRU1ha0VBUVlBSUVEc2FJQUVnQUNnQ0NDQUFLQUlFYkdvaEF3TkFJQUVnQTA4TkFTQUFJQUV0QUFCQkFuUnFJZ1JCREdvZ0JDZ0NERUVCYWpZQ0FDQUJRUUZxSVFFTUFBc0FDeUFDQ3pnQkFYMGdBRU1BQUlBL1FRRWdCSFN5bFNJRklBS1VJQVZEQUFBQVA1UkRBQUFBdjVJaUFwSTRBZ0FnQVNBRklBT1VJQUtTT0FJQUN3Z0FJQUFnQVJCTUN4Y0JBWDhnQUJDRkFTRUJJQUFRMFFVZ0FDQUJFTkFGQ3dRQVFRRUxNUUVCZnlBQUVNc0ZJQUFvQWdBRVFDQUFJQUFvQWdBUXlnVWdBQkEwR2lBQUtBSUFJUUVnQUJDSkFob2dBUkF6Q3dzMEFDQUFLQUlBR2lBQUtBSUFJQUFRN0FGQkFuUnFHaUFBS0FJQUlBQVFRMEVDZEdvYUlBQW9BZ0FnQUJEc0FVRUNkR29hQ3l3QkFYOGdBQkRUQlNBQUtBSUFCRUFnQUJEUkJTQUFFRFFhSUFBb0FnQWhBU0FBRU8wQkdpQUJFRE1MQ3hnQkFYOGdBQkJESVFJZ0FDQUJFTVFGSUFBZ0FoRERCUXRDQVFKL0l3QkJJR3NpQWlRQUlBQVE3UUVnQVVrRVFDQUFFRFFoQXlBQUlBSkJDR29nQVNBQUVJVUJJQU1RNlFNaUFCRG9BeUFBRU9jREN5QUNRU0JxSkFBTFJnRUJmeUFCSUFBUXBBRWlBa3NFUUNBQUlBRWdBbXNRMndvUEN5QUJJQUpKQkVBZ0FDZ0NBQ0FCUVFWMGFpRUJJQUFRcEFFaEFpQUFJQUVReWdVZ0FDQUNFS2NLQ3dzMUFRRi9JQUFnQUNnQ0JCRG5DaUFBS0FJQUJFQWdBQ2dDRUJvZ0FDZ0NBQ0VCSUFBUVBTZ0NBQ0FBS0FJQWF4b2dBUkF6Q3d0UkFRRi9JQUFRdkFZZ0FCQTBJQUFvQWdBZ0FDZ0NCQ0FCUVFScUlnSVFzQUlnQUNBQ0VFa2dBRUVFYWlBQlFRaHFFRWtnQUJBMElBRVFQUkJKSUFFZ0FTZ0NCRFlDQUNBQUlBQVFrUUVRMVFVTFl3RUNmeU1BUVJCcklnUWtBQ0FFUVFBMkFnd2dBRUVNYWlBRVFReHFJQU1Rc1FFZ0FRUkFJQUFvQWhBYUlBRVFTeUVGQ3lBQUlBVTJBZ0FnQUNBQ0lBVnFJZ0kyQWdnZ0FDQUNOZ0lFSUFBUVBTQUJJQVZxTmdJQUlBUkJFR29rQUNBQUMxb0JBbjhqQUVFUWF5SUNKQUFnQWlBQk5nSU1JQUVnQUJEZEJTSURUUVJBSUFBUTRRRWlBQ0FEUVFGMlNRUkFJQUlnQUVFQmREWUNDQ0FDUVFocUlBSkJER29RZlNnQ0FDRURDeUFDUVJCcUpBQWdBdzhMRUpRQkFBc2tBQ0FBSUFFMkFnQWdBQ0FCS0FJRUlnRTJBZ1FnQUNBQklBSkJGR3hxTmdJSUlBQUxDUUFnQUNBQkVPTUZDd2dBSUFBb0FnQkZDeG9BSUFBZ0FTQUJLQUlBUVF4cktBSUFhaWdDR0RZQ0FDQUFDd29BSUFCQkdIUkJHSFVMd1FFQkEzOENRQ0FCSUFJb0FoQWlBd1IvSUFNRklBSVFnUXNOQVNBQ0tBSVFDeUFDS0FJVUlnVnJTd1JBSUFJZ0FDQUJJQUlvQWlRUkJBQVBDd0pBSUFJc0FFdEJBRWdFUUVFQUlRTU1BUXNnQVNFRUEwQWdCQ0lEUlFSQVFRQWhBd3dDQ3lBQUlBTkJBV3NpQkdvdEFBQkJDa2NOQUFzZ0FpQUFJQU1nQWlnQ0pCRUVBQ0lFSUFOSkRRRWdBQ0FEYWlFQUlBRWdBMnNoQVNBQ0tBSVVJUVVMSUFVZ0FDQUJFRDhhSUFJZ0FpZ0NGQ0FCYWpZQ0ZDQUJJQU5xSVFRTElBUUxTd0VDZnlBQUtBSUVJZ1pCQ0hVaEJ5QUFLQUlBSWdBZ0FTQUNJQVpCQVhFRWZ5QURLQUlBSUFkcUtBSUFCU0FIQ3lBRGFpQUVRUUlnQmtFQ2NSc2dCU0FBS0FJQUtBSVVFUXdBQ3lBQUFrQWdBQ2dDQkNBQlJ3MEFJQUFvQWh4QkFVWU5BQ0FBSUFJMkFod0xDNklCQUNBQVFRRTZBRFVDUUNBQUtBSUVJQUpIRFFBZ0FFRUJPZ0EwSUFBb0FoQWlBa1VFUUNBQVFRRTJBaVFnQUNBRE5nSVlJQUFnQVRZQ0VDQURRUUZIRFFFZ0FDZ0NNRUVCUncwQklBQkJBVG9BTmc4TElBRWdBa1lFUUNBQUtBSVlJZ0pCQWtZRVFDQUFJQU0yQWhnZ0F5RUNDeUFBS0FJd1FRRkhJQUpCQVVkeURRRWdBRUVCT2dBMkR3c2dBRUVCT2dBMklBQWdBQ2dDSkVFQmFqWUNKQXNMWFFFQmZ5QUFLQUlRSWdORkJFQWdBRUVCTmdJa0lBQWdBallDR0NBQUlBRTJBaEFQQ3dKQUlBRWdBMFlFUUNBQUtBSVlRUUpIRFFFZ0FDQUNOZ0lZRHdzZ0FFRUJPZ0EySUFCQkFqWUNHQ0FBSUFBb0FpUkJBV28yQWlRTEN5a0JBWDhnQUVHTTZBTTJBZ0FnQUNnQ0JFRU1heUlCUVFocUVNd0RRWDlNQkVBZ0FSQXpDeUFBQzYwQkFRTi9Jd0JCRUdzaUJTUUFJQUpCYnlBQmEwMEVRQ0FBRUQ0aEJnSi9JQUZCNS8vLy93ZEpCRUFnQlNBQlFRRjBOZ0lJSUFVZ0FTQUNhallDRENBRlFReHFJQVZCQ0dvUWZTZ0NBQkRaQWd3QkMwRnVDMEVCYWlJSEVFc2hBaUFFQkVBZ0FpQUdJQVFRNXdFTElBTWdCR3NpQXdSQUlBSWdCR29nQkNBR2FpQURFT2NCQ3lBQlFRcEhCRUFnQmhBekN5QUFJQUlRcVFFZ0FDQUhFTkFCSUFWQkVHb2tBQThMRU5NQkFBdDNBUU4vSXdCQkVHc2lBeVFBSUFKQmIwMEVRQUpBSUFKQkNrMEVRQ0FBSUFJUXFnRWdBQ0VFREFFTElBQWdBaERaQWtFQmFpSUZFRXNpQkJDcEFTQUFJQVVRMEFFZ0FDQUNFSm9CQ3lBRUlBRWdBaERuQVNBRFFRQTZBQThnQWlBRWFpQURRUTlxRUpBQklBTkJFR29rQUE4TEVOTUJBQXNYQUNBQUtBSUlFRlJIQkVBZ0FDZ0NDQkRTQmdzZ0FBc2JBUUYvUVFFaEFTQUFFSnNCQkg4Z0FCQ05Ba0VCYXdWQkFRc0xPZ0VCZnlNQVFSQnJJZ01rQUNBRElBSTJBZ3dnQTBFSWFpQURRUXhxRU1VQklRSWdBQ0FCRUpjQ0lRQWdBaERFQVNBRFFSQnFKQUFnQUFzTEFDQUVJQUkyQWdCQkF3c1VBQ0FBRUprTUtBSUFJZ0EyQWdBZ0FCRDRBZ3NUQUNBQUlBRW9BZ0FpQURZQ0FDQUFFUGdDQ3c4QUlBQVFZU0FBUVpDL0F6WUNBQXR6QVFKL0lBQkZCRUJCQUVFRFFhVEVBRUVBRURnUEN5QUFLQUlBSWdGRkJFQVBDeUFCS0FJQUVETkJBQ0VCQTM4Z0FDZ0NBQ0lDS0FJTUlBRk1CSDhnQWlnQ0NCQXpJQUFvQWdBUU15QUFRUUEyQWdCQkFBVWdBaWdDQ0NBQlFReHNhaWdDQUJBeklBRkJBV29oQVF3QkN3c2FDekVBSUFJb0FnQWhBZ05BQWtBZ0FDQUJSd1IvSUFBb0FnQWdBa2NOQVNBQUJTQUJDdzhMSUFCQkJHb2hBQXdBQ3dBTDlRTUJBWDhqQUVFUWF5SU1KQUFnRENBQU5nSU1Ba0FDUUNBQUlBVkdCRUFnQVMwQUFFVU5BVUVBSVFBZ0FVRUFPZ0FBSUFRZ0JDZ0NBQ0lCUVFGcU5nSUFJQUZCTGpvQUFDQUhFRGRGRFFJZ0NTZ0NBQ0lCSUFoclFaOEJTZzBDSUFvb0FnQWhBaUFKSUFGQkJHbzJBZ0FnQVNBQ05nSUFEQUlMQWtBZ0FDQUdSdzBBSUFjUU4wVU5BQ0FCTFFBQVJRMEJRUUFoQUNBSktBSUFJZ0VnQ0d0Qm53RktEUUlnQ2lnQ0FDRUFJQWtnQVVFRWFqWUNBQ0FCSUFBMkFnQkJBQ0VBSUFwQkFEWUNBQXdDQzBGL0lRQWdDeUFMUVlBQmFpQU1RUXhxRUk0RUlBdHJJZ1ZCL0FCS0RRRWdCVUVDZFVHUXRRTnFMUUFBSVFZQ1FBSkFBa0FDUUNBRlFkZ0FhMEVlZHc0RUFRRUFBQUlMSUFNZ0JDZ0NBQ0lCUndSQUlBRkJBV3N0QUFCQjN3QnhJQUl0QUFCQi93QnhSdzBGQ3lBRUlBRkJBV28yQWdBZ0FTQUdPZ0FBUVFBaEFBd0VDeUFDUWRBQU9nQUFEQUVMSUFJc0FBQWlBQ0FHUWQ4QWNVY05BQ0FDSUFCQmdBRnlPZ0FBSUFFdEFBQkZEUUFnQVVFQU9nQUFJQWNRTjBVTkFDQUpLQUlBSWdBZ0NHdEJud0ZLRFFBZ0NpZ0NBQ0VCSUFrZ0FFRUVhallDQUNBQUlBRTJBZ0FMSUFRZ0JDZ0NBQ0lBUVFGcU5nSUFJQUFnQmpvQUFFRUFJUUFnQlVIVUFFb05BU0FLSUFvb0FnQkJBV28yQWdBTUFRdEJmeUVBQ3lBTVFSQnFKQUFnQUF0Y0FRRi9Jd0JCRUdzaUJTUUFJQVZCQ0dvZ0FSQktJQVZCQ0dvUW53RkJrTFVEUWJDMUF5QUNFT1VCSUFNZ0JVRUlhaEM2QWlJQkVMb0JOZ0lBSUFRZ0FSQ2VBVFlDQUNBQUlBRVFuUUVnQlVFSWFoQkVJQVZCRUdva0FBc3NBUUYvSUFBUXV3WWdBQ2dDQUFSQUlBQVFyUVlnQUJBMEdpQUFLQUlBSVFFZ0FCRGhBUm9nQVJBekN3c3hBQ0FDTFFBQUlRSURRQUpBSUFBZ0FVY0VmeUFBTFFBQUlBSkhEUUVnQUFVZ0FRc1BDeUFBUVFGcUlRQU1BQXNBQytzREFRRi9Jd0JCRUdzaURDUUFJQXdnQURvQUR3SkFBa0FnQUNBRlJnUkFJQUV0QUFCRkRRRkJBQ0VBSUFGQkFEb0FBQ0FFSUFRb0FnQWlBVUVCYWpZQ0FDQUJRUzQ2QUFBZ0J4QTNSUTBDSUFrb0FnQWlBU0FJYTBHZkFVb05BaUFLS0FJQUlRSWdDU0FCUVFScU5nSUFJQUVnQWpZQ0FBd0NDd0pBSUFBZ0JrY05BQ0FIRURkRkRRQWdBUzBBQUVVTkFVRUFJUUFnQ1NnQ0FDSUJJQWhyUVo4QlNnMENJQW9vQWdBaEFDQUpJQUZCQkdvMkFnQWdBU0FBTmdJQVFRQWhBQ0FLUVFBMkFnQU1BZ3RCZnlFQUlBc2dDMEVnYWlBTVFROXFFSklFSUF0cklnVkJIMG9OQVNBRlFaQzFBMm90QUFBaEJnSkFBa0FDUUFKQUlBVkJGbXNPQkFFQkFBQUNDeUFESUFRb0FnQWlBVWNFUUNBQlFRRnJMUUFBUWQ4QWNTQUNMUUFBUWY4QWNVY05CUXNnQkNBQlFRRnFOZ0lBSUFFZ0Jqb0FBRUVBSVFBTUJBc2dBa0hRQURvQUFBd0JDeUFDTEFBQUlnQWdCa0hmQUhGSERRQWdBaUFBUVlBQmNqb0FBQ0FCTFFBQVJRMEFJQUZCQURvQUFDQUhFRGRGRFFBZ0NTZ0NBQ0lBSUFoclFaOEJTZzBBSUFvb0FnQWhBU0FKSUFCQkJHbzJBZ0FnQUNBQk5nSUFDeUFFSUFRb0FnQWlBRUVCYWpZQ0FDQUFJQVk2QUFCQkFDRUFJQVZCRlVvTkFTQUtJQW9vQWdCQkFXbzJBZ0FNQVF0QmZ5RUFDeUFNUVJCcUpBQWdBQXRjQVFGL0l3QkJFR3NpQlNRQUlBVkJDR29nQVJCS0lBVkJDR29RbVFGQmtMVURRYkMxQXlBQ0VQd0JJQU1nQlVFSWFoQzhBaUlCRUxvQk9nQUFJQVFnQVJDZUFUb0FBQ0FBSUFFUW5RRWdCVUVJYWhCRUlBVkJFR29rQUF1ZUFRSUJmd04rSXdCQm9BRnJJZ1FrQUNBRVFSQnFRUUJCa0FFUU94b2dCRUYvTmdKY0lBUWdBVFlDUENBRVFYODJBaGdnQkNBQk5nSVVJQVJCRUdwQ0FCREhBU0FFSUFSQkVHb2dBMEVCRUljSElBUXBBd2doQlNBRUtRTUFJUVlnQWdSQUlBSWdBU0FCSUFRcEE0Z0JJQVFvQWhRZ0JDZ0NHR3VzZkNJSHAyb2dCMUFiTmdJQUN5QUFJQVkzQXdBZ0FDQUZOd01JSUFSQm9BRnFKQUFMRFFBZ0FDQUJJQUpDZnhETkJnc25BUUYvQWtBZ0FDZ0NBQ0lDUlEwQUlBSWdBUkQzQ2tGL0VMZ0JSUTBBSUFCQkFEWUNBQXNMQ1FBZ0FCQ2xBeEF6QzI0QkFuOGpBRUVRYXlJQkpBQWdBQ0FBS0FJQVFReHJLQUlBYWlnQ0dBUkFBa0FnQVVFSWFpQUFFSzBOSWdJdEFBQkZEUUFnQUNBQUtBSUFRUXhyS0FJQWFpZ0NHQkRsQWtGL1J3MEFJQUFnQUNnQ0FFRU1heWdDQUdwQkFSQ3pBZ3NnQWhEakFnc2dBVUVRYWlRQUM3MERBZ0YvQTMwakFFRWdheUlHSkFBZ0JRSi9Ba0FDUUFKQUlBRkZEUUFnQUNBQklBUXFBZ2dpQ0NBRUtnSU1JZ2tnQmtFY2FpQUdRUkJxRU9JQ1FRQklEUUFnQlFKL0lBWXFBaHdpQjR0REFBQUFUMTBFUUNBSHFBd0JDMEdBZ0lDQWVBczJBZ0FnQlFKL0lBWXFBaEFpQjR0REFBQUFUMTBFUUNBSHFBd0JDMEdBZ0lDQWVBczJBZ1FnQWtVTkFTQUFJQUlnQ0NBSklBWkJHR29nQmtFTWFoRGlBa0VBU0EwQklBVUNmeUFHS2dJY0lnY2dCNUlnQmlvQ0dKTWlCNHREQUFBQVQxMEVRQ0FIcUF3QkMwR0FnSUNBZUFzMkFnZ2dCUUovSUFZcUFoQWlCeUFIa2lBR0tnSU1reUlIaTBNQUFBQlBYUVJBSUFlb0RBRUxRWUNBZ0lCNEN6WUNEQ0FEUlEwQ0lBQWdBeUFJSUFrZ0JrRVVhaUFHUVFocUVPSUNRUUJJRFFJZ0JRSi9JQVlxQWhRZ0Jpb0NIRU1BQUVCQWxDQUdLZ0lZUXdBQVFFQ1VrNUlpQ0l0REFBQUFUMTBFUUNBSXFBd0JDMEdBZ0lDQWVBczJBaEFnQmlvQ0NDQUdLZ0lRUXdBQVFFQ1VJQVlxQWd4REFBQkFRSlNUa2lJSWkwTUFBQUJQWFFSQUlBaW9EQVFMUVlDQWdJQjREQU1MSUFWQ2Z6Y0NBQXNnQlVKL053SUlDeUFGUVg4MkFoQkJmd3MyQWhRZ0JrRWdhaVFBQ3dnQUlBQW9BaEJGQ3drQUlBQVFxQU1RTXdzVUFDQUFRY1NPQXpZQ0FDQUFRUVJxRUVRZ0FBc1VBQ0FBUVlTT0F6WUNBQ0FBUVFScUVFUWdBQXMxQUNBQVFjU1FBellDQUNBQUVMc05JQUJCSEdvUVJDQUFLQUlnRURNZ0FDZ0NKQkF6SUFBb0FqQVFNeUFBS0FJOEVETWdBQXNMQUNBQVFlaWVCQkRHQVFzTEFDQUFRZUNlQkJER0FRc3ZBUUYvSUFCQkJHb1E5QVloQWlBQVFaaVFBellDQUNBQ1FheVFBellDQUNBQVFZeVFBeWdDQUdvZ0FSQ1NBd3N2QVFGL0lBQkJCR29RaWdZaEFpQUFRZWlQQXpZQ0FDQUNRZnlQQXpZQ0FDQUFRZHlQQXlnQ0FHb2dBUkNTQXdzSkFDQUFJQUVRK0FZTDJRTUNBbjRDZnlNQVFTQnJJZ1FrQUFKQUlBRkMvLy8vLy8vLy8vLy9BSU1pQTBLQWdJQ0FnSURBZ0R4OUlBTkNnSUNBZ0lDQXdQL0RBSDFVQkVBZ0FVSUVoaUFBUWp5SWhDRURJQUJDLy8vLy8vLy8vLzhQZ3lJQVFvR0FnSUNBZ0lDQUNGb0VRQ0FEUW9HQWdJQ0FnSUNBd0FCOElRSU1BZ3NnQTBLQWdJQ0FnSUNBZ0VCOUlRSWdBRUtBZ0lDQWdJQ0FnQWlGUWdCU0RRRWdBaUFEUWdHRGZDRUNEQUVMSUFCUUlBTkNnSUNBZ0lDQXdQLy9BRlFnQTBLQWdJQ0FnSURBLy84QVVSdEZCRUFnQVVJRWhpQUFRanlJaEVMLy8vLy8vLy8vQTROQ2dJQ0FnSUNBZ1B6L0FJUWhBZ3dCQzBLQWdJQ0FnSUNBK1A4QUlRSWdBMEwvLy8vLy8vKy8vOE1BVmcwQVFnQWhBaUFEUWpDSXB5SUZRWkgzQUVrTkFDQUVRUkJxSUFBZ0FVTC8vLy8vLy84L2cwS0FnSUNBZ0lEQUFJUWlBaUFGUVlIM0FHc1FsUUVnQkNBQUlBSkJnZmdBSUFWckVNRUNJQVFwQXdoQ0JJWWdCQ2tEQUNJQVFqeUloQ0VDSUFRcEF4QWdCQ2tER0lSQ0FGS3RJQUJDLy8vLy8vLy8vLzhQZzRRaUFFS0JnSUNBZ0lDQWdBaGFCRUFnQWtJQmZDRUNEQUVMSUFCQ2dJQ0FnSUNBZ0lBSWhVSUFVZzBBSUFKQ0FZTWdBbndoQWdzZ0JFRWdhaVFBSUFJZ0FVS0FnSUNBZ0lDQWdJQi9nNFMvQzBFQkFYOGpBRUVRYXlJRkpBQWdCU0FCSUFJZ0F5QUVRb0NBZ0lDQWdJQ0FnSCtGRUtZQklBQWdCU2tEQURjREFDQUFJQVVwQXdnM0F3Z2dCVUVRYWlRQUMwNEJBbjBnQVNvQ0FDQUFLZ0lBa3lJRUlBU1VJQUVxQWdRZ0FDb0NCSk1pQkNBRWxKS1JJZ1ZEQUFBQUFGd0VRQ0FDSUFRZ0JaVTRBZ0FnQXlBQktnSUFJQUFxQWdDVElBV1ZPQUlBQ3d1dkFRRUdmeU1BUWZBQmF5SUhKQUFnQnlBQU5nSUFRUUVoQmdKQUlBTkJBa2dOQUVFQUlBRnJJUWtnQUNFRkEwQWdBQ0FGSUFscUlnVWdCQ0FEUVFKcklncEJBblJxS0FJQWF5SUlJQUlSQXdCQkFFNEVRQ0FBSUFVZ0FoRURBRUYvU2cwQ0N5QUhJQVpCQW5ScUlBZ2dCU0FJSUFVZ0FoRURBRUYvU2lJSUd5SUZOZ0lBSUFaQkFXb2hCaUFEUVFGcklBb2dDQnNpQTBFQlNnMEFDd3NnQVNBSElBWVEvd1lnQjBId0FXb2tBQXV1RVFJUGZ3RitJd0JCMEFCcklnY2tBQ0FISUFFMkFrd2dCMEUzYWlFVklBZEJPR29oRTBFQUlRRUNRQU5BQWtBZ0VFRUFTQTBBUWYvLy8vOEhJQkJySUFGSUJFQkJsSU1FUVQwMkFnQkJmeUVRREFFTElBRWdFR29oRUFzZ0J5Z0NUQ0lNSVFFQ1FBSkFBa0FnREMwQUFDSUlCRUFEUUFKQUFrQWdDRUgvQVhFaUNFVUVRQ0FCSVFnTUFRc2dDRUVsUncwQklBRWhDQU5BSUFFdEFBRkJKVWNOQVNBSElBRkJBbW9pQ2pZQ1RDQUlRUUZxSVFnZ0FTMEFBaUVMSUFvaEFTQUxRU1ZHRFFBTEN5QUlJQXhySVFFZ0FBUkFJQUFnRENBQkVJY0JDeUFCRFFZZ0J5Z0NUQ3dBQVJESUFTRUJJQWNvQWt3aENDQUhBbjhDUUNBQlJRMEFJQWd0QUFKQkpFY05BQ0FJTEFBQlFUQnJJUkpCQVNFVUlBaEJBMm9NQVF0QmZ5RVNJQWhCQVdvTElnRTJBa3hCQUNFUkFrQWdBU3dBQUNJTlFTQnJJZ3BCSDBzRVFDQUJJUWdNQVFzZ0FTRUlRUUVnQ25RaUMwR0owUVJ4UlEwQUEwQWdCeUFCUVFGcUlnZzJBa3dnQ3lBUmNpRVJJQUVzQUFFaURVRWdheUlLUVNCUERRRWdDQ0VCUVFFZ0NuUWlDMEdKMFFSeERRQUxDd0pBSUExQktrWUVRQ0FIQW44Q1FDQUlMQUFCRU1nQlJRMEFJQWNvQWt3aUFTMEFBa0VrUncwQUlBRXNBQUZCQW5RZ0JHcEJ3QUZyUVFvMkFnQWdBU3dBQVVFRGRDQURha0dBQTJzb0FnQWhEa0VCSVJRZ0FVRURhZ3dCQ3lBVURRWkJBQ0VVUVFBaERpQUFCRUFnQWlBQ0tBSUFJZ0ZCQkdvMkFnQWdBU2dDQUNFT0N5QUhLQUpNUVFGcUN5SUJOZ0pNSUE1QmYwb05BVUVBSUE1cklRNGdFVUdBd0FCeUlSRU1BUXNnQjBITUFHb1FqUWNpRGtFQVNBMEVJQWNvQWt3aEFRdEJmeUVKQWtBZ0FTMEFBRUV1UncwQUlBRXRBQUZCS2tZRVFBSkFJQUVzQUFJUXlBRkZEUUFnQnlnQ1RDSUJMUUFEUVNSSERRQWdBU3dBQWtFQ2RDQUVha0hBQVd0QkNqWUNBQ0FCTEFBQ1FRTjBJQU5xUVlBRGF5Z0NBQ0VKSUFjZ0FVRUVhaUlCTmdKTURBSUxJQlFOQlNBQUJIOGdBaUFDS0FJQUlnRkJCR28yQWdBZ0FTZ0NBQVZCQUFzaENTQUhJQWNvQWt4QkFtb2lBVFlDVEF3QkN5QUhJQUZCQVdvMkFrd2dCMEhNQUdvUWpRY2hDU0FIS0FKTUlRRUxRUUFoQ0FOQUlBZ2hDMEYvSVE4Z0FTd0FBRUhCQUd0Qk9Vc05DQ0FISUFGQkFXb2lEVFlDVENBQkxBQUFJUWdnRFNFQklBZ2dDMEU2YkdwQi8vMENhaTBBQUNJSVFRRnJRUWhKRFFBTEFrQUNRQ0FJUVJOSEJFQWdDRVVOQ2lBU1FRQk9CRUFnQkNBU1FRSjBhaUFJTmdJQUlBY2dBeUFTUVFOMGFpa0RBRGNEUUF3Q0N5QUFSUTBJSUFkQlFHc2dDQ0FDSUFZUWpBY2dCeWdDVENFTkRBSUxJQkpCZjBvTkNRdEJBQ0VCSUFCRkRRY0xJQkZCLy85N2NTSUtJQkVnRVVHQXdBQnhHeUVJUVFBaEQwR28vZ0loRWlBVElSRUNRQUpBQWtBQ2Z3SkFBa0FDUUFKQUFuOENRQUpBQWtBQ1FBSkFBa0FDUUNBTlFRRnJMQUFBSWdGQlgzRWdBU0FCUVE5eFFRTkdHeUFCSUFzYklnRkIyQUJyRGlFRUZCUVVGQlFVRkJRT0ZBOEdEZzRPRkFZVUZCUVVBZ1VERkJRSkZBRVVGQVFBQ3dKQUlBRkJ3UUJyRGdjT0ZBc1VEZzRPQUFzZ0FVSFRBRVlOQ1F3VEN5QUhLUU5BSVJaQnFQNENEQVVMUVFBaEFRSkFBa0FDUUFKQUFrQUNRQUpBSUF0Qi93RnhEZ2dBQVFJREJCb0ZCaG9MSUFjb0FrQWdFRFlDQUF3WkN5QUhLQUpBSUJBMkFnQU1HQXNnQnlnQ1FDQVFyRGNEQUF3WEN5QUhLQUpBSUJBN0FRQU1GZ3NnQnlnQ1FDQVFPZ0FBREJVTElBY29Ba0FnRURZQ0FBd1VDeUFIS0FKQUlCQ3NOd01BREJNTElBbEJDQ0FKUVFoTEd5RUpJQWhCQ0hJaENFSDRBQ0VCQ3lBSEtRTkFJQk1nQVVFZ2NSRDBEU0VNSUFoQkNIRkZEUU1nQnlrRFFGQU5BeUFCUVFSMlFhaitBbW9oRWtFQ0lROE1Bd3NnQnlrRFFDQVRFUE1OSVF3Z0NFRUljVVVOQWlBSklCTWdER3NpQVVFQmFpQUJJQWxJR3lFSkRBSUxJQWNwQTBBaUZrSi9Wd1JBSUFkQ0FDQVdmU0lXTndOQVFRRWhEMEdvL2dJTUFRc2dDRUdBRUhFRVFFRUJJUTlCcWY0Q0RBRUxRYXIrQWtHby9nSWdDRUVCY1NJUEd3c2hFaUFXSUJNUXdnSWhEQXNnQ0VILy8zdHhJQWdnQ1VGL1Noc2hDQ0FKSUFjcEEwQWlGbEJGY2tVRVFFRUFJUWtnRXlFTURBd0xJQWtnRmxBZ0V5QU1hMm9pQVNBQklBbElHeUVKREFzTElBY29Ba0FpQVVHeS9nSWdBUnNpREVFQUlBa1FxZ1FpQVNBSklBeHFJQUViSVJFZ0NpRUlJQUVnREdzZ0NTQUJHeUVKREFvTElBa0VRQ0FIS0FKQURBSUxRUUFoQVNBQVFTQWdEa0VBSUFnUW9BRU1BZ3NnQjBFQU5nSU1JQWNnQnlrRFFENENDQ0FISUFkQkNHbzJBa0JCZnlFSklBZEJDR29MSVF0QkFDRUJBa0FEUUNBTEtBSUFJZ3BGRFFFZ0IwRUVhaUFLRUpBSElneEJBRWdpQ2lBTUlBa2dBV3RMY2tVRVFDQUxRUVJxSVFzZ0NTQUJJQXhxSWdGTERRRU1BZ3NMUVg4aER5QUtEUXNMSUFCQklDQU9JQUVnQ0JDZ0FTQUJSUVJBUVFBaEFRd0JDMEVBSVFzZ0J5Z0NRQ0VOQTBBZ0RTZ0NBQ0lLUlEwQklBZEJCR29nQ2hDUUJ5SUtJQXRxSWdzZ0FVb05BU0FBSUFkQkJHb2dDaENIQVNBTlFRUnFJUTBnQVNBTFN3MEFDd3NnQUVFZ0lBNGdBU0FJUVlEQUFITVFvQUVnRGlBQklBRWdEa2diSVFFTUNBc2dBQ0FIS3dOQUlBNGdDU0FJSUFFZ0JSRTFBQ0VCREFjTElBY2dCeWtEUUR3QU4wRUJJUWtnRlNFTUlBb2hDQXdFQ3lBSElBRkJBV29pQ2pZQ1RDQUJMUUFCSVFnZ0NpRUJEQUFMQUFzZ0VDRVBJQUFOQkNBVVJRMENRUUVoQVFOQUlBUWdBVUVDZEdvb0FnQWlBQVJBSUFNZ0FVRURkR29nQUNBQ0lBWVFqQWRCQVNFUElBRkJBV29pQVVFS1J3MEJEQVlMQzBFQklROGdBVUVLVHcwRUEwQWdCQ0FCUVFKMGFpZ0NBQTBCSUFGQkFXb2lBVUVLUncwQUN3d0VDMEYvSVE4TUF3c2dBRUVnSUE4Z0VTQU1heUlMSUFrZ0NTQUxTQnNpQ21vaURTQU9JQTBnRGtvYklnRWdEU0FJRUtBQklBQWdFaUFQRUljQklBQkJNQ0FCSUEwZ0NFR0FnQVJ6RUtBQklBQkJNQ0FLSUF0QkFCQ2dBU0FBSUF3Z0N4Q0hBU0FBUVNBZ0FTQU5JQWhCZ01BQWN4Q2dBUXdCQ3d0QkFDRVBDeUFIUWRBQWFpUUFJQThMNHdFQkFuOGdBa0VBUnlFREFrQUNRQUpBSUFKRklBQkJBM0ZGY2cwQUlBRkIvd0Z4SVFRRFFDQUFMUUFBSUFSR0RRSWdBRUVCYWlFQUlBSkJBV3NpQWtFQVJ5RURJQUpGRFFFZ0FFRURjUTBBQ3dzZ0EwVU5BUXNDUUNBQUxRQUFJQUZCL3dGeFJpQUNRUVJKY2cwQUlBRkIvd0Z4UVlHQ2hBaHNJUU1EUUNBQUtBSUFJQU56SWdSQmYzTWdCRUdCZ29RSWEzRkJnSUdDaEhoeERRRWdBRUVFYWlFQUlBSkJCR3NpQWtFRFN3MEFDd3NnQWtVTkFDQUJRZjhCY1NFQkEwQWdBU0FBTFFBQVJnUkFJQUFQQ3lBQVFRRnFJUUFnQWtFQmF5SUNEUUFMQzBFQUMzd0JBbjhnQUNBQUxRQktJZ0ZCQVdzZ0FYSTZBRW9nQUNnQ0ZDQUFLQUljU3dSQUlBQkJBRUVBSUFBb0FpUVJCQUFhQ3lBQVFRQTJBaHdnQUVJQU53TVFJQUFvQWdBaUFVRUVjUVJBSUFBZ0FVRWdjallDQUVGL0R3c2dBQ0FBS0FJc0lBQW9BakJxSWdJMkFnZ2dBQ0FDTmdJRUlBRkJHM1JCSDNVTEtnRUJmeU1BUVJCcklnUWtBQ0FFSUFNMkFnd2dBQ0FCSUFJZ0F4Q1lBaUVBSUFSQkVHb2tBQ0FBQzJrQkFuOENRQ0FBS0FJVUlBQW9BaHhORFFBZ0FFRUFRUUFnQUNnQ0pCRUVBQm9nQUNnQ0ZBMEFRWDhQQ3lBQUtBSUVJZ0VnQUNnQ0NDSUNTUVJBSUFBZ0FTQUNhNnhCQVNBQUtBSW9FUlVBR2dzZ0FFRUFOZ0ljSUFCQ0FEY0RFQ0FBUWdBM0FnUkJBQXR1QVFGL0lBQUVRQ0FBS0FKTVFYOU1CRUFnQUJDdEJBOExJQUFRclFRUEMwSEk4QU1vQWdBRVFFSEk4QU1vQWdBUXJnUWhBUXRCakl3RUtBSUFJZ0FFUUFOQUlBQW9Ba3dhSUFBb0FoUWdBQ2dDSEVzRVFDQUFFSzBFSUFGeUlRRUxJQUFvQWpnaUFBMEFDd3NnQVF1TkFRQWdBRVFKOS8wTjRUMENQNkpFaUxJQmRlRHZTVCtnSUFDaVJEdVBhTFVvZ3FTL29DQUFva1JWUklnT1ZjSEpQNkFnQUtKRWZXL3JBeExXMUwrZ0lBQ2lSRlZWVlZWVlZjVS9vQ0FBb2lBQVJJS1NMckhGdUxNL29rUlpBWTBiYkFibXY2QWdBS0pFeUlwWm5PVXFBRUNnSUFDaVJFc3RpaHduT2dQQW9DQUFva1FBQUFBQUFBRHdQNkNqQ3dzQUlBQWdBU0FDRUlrT0N5SUJBWDhqQUVFUWF5SUJJQUEyQWdnZ0FTQUJLQUlJS0FJRU5nSU1JQUVvQWd3TDFnRUJBMzhnQUNnQ0JDRUVJQUpCOFpQcjNBTlBCRUFnQUNnQ0FFSzRnSUNBTURjQ0ZDQUFJQUFvQWdBb0FnQVJBQUFMSUFKQkNDQUNRUWR4SWdOclFRQWdBeHRxSVFNZ0FVRUNUd1JBSUFBb0FnQWlBaUFCTmdJWUlBSkJEellDRkNBQUlBQW9BZ0FvQWdBUkFBQUxJQU5CRUdvaUJSQTZJZ0pGQkVBZ0FDZ0NBRUs0Z0lDQXdBQTNBaFFnQUNBQUtBSUFLQUlBRVFBQUN5QUVJQVFvQWt3Z0JXbzJBa3dnQkNBQlFRSjBhaUlBS0FJOElRRWdBa0VBTmdJSUlBSWdBellDQkNBQ0lBRTJBZ0FnQUNBQ05nSThJQUpCRUdvTHh3SUJBMzhnQUNnQ0JDRURBa0FnQVVFQ1R3UkFJQUFvQWdBaUFpQUJOZ0lZSUFKQkR6WUNGQ0FBSUFBb0FnQW9BZ0FSQUFBTUFRc2dBVUVCUncwQUlBTW9Ba1FpQWdSQUEwQWdBaWdDS0FSQUlBSkJBRFlDS0NBQUlBSkJNR29nQWlnQ09CRUNBQXNnQWlnQ0xDSUNEUUFMQ3lBRFFRQTJBa1FnQXlnQ1NDSUNCRUFEUUNBQ0tBSW9CRUFnQWtFQU5nSW9JQUFnQWtFd2FpQUNLQUk0RVFJQUN5QUNLQUlzSWdJTkFBc0xJQU5CQURZQ1NBc2dBeUFCUVFKMGFpSUJJZ0FvQWp3aEFpQUFRUUEyQWp3Z0FnUkFBMEFnQWlnQ0FDRUFJQUlvQWdRZ0FpZ0NDR3BCRUdvaEJDQUNFRE1nQXlBREtBSk1JQVJyTmdKTUlBQWlBZzBBQ3dzZ0FTZ0NOQ0VDSUFGQkFEWUNOQ0FDQkVBRFFDQUNLQUlBSVFBZ0FpZ0NCQ0FDS0FJSWFrRVFhaUVCSUFJUU15QURJQU1vQWt3Z0FXczJBa3dnQUNJQ0RRQUxDd3NiQVFGL0lBQW9BZ0FpQVVVRVFBOExJQUVRTXlBQVFRQTJBZ0FMcHdFQkJYOUJpQUVRT2lJQlJRUkFRUUFQQ3dOQVFRQWhBeUFDUVFOR1JRUkFBMEFnQTBFRVJrVUVRQ0FEUVFOMElnUWdBU0FDUVFWMElnVnFhaUFBSUFWcUlBUnFLd01BT1FNQUlBTkJBV29oQXd3QkN3c2dBa0VCYWlFQ0RBRUxDeUFCUW9DQWdJQ0FnSUR3UHpjRGdBRWdBVUtBZ0lDQWdJQ0FpTUFBTndONElBRkNnSUNBZ01qQzYvYy9Od053SUFGQ2dJQ0FnSnF6NXR3L053Tm9JQUZCQ2pZQ1lDQUJDNHNLQVE1L0lBRW9BaFFoQ3lBQktBSVFJUVVnQVNnQ0RDRUpJQUVvQWdnaEFpQUFLQUxrQXlnQ0dDRU5Ba0FnQVNnQ0JDSUhJQUVvQWdBaUJrb0VRQ0FHSVFvRFFDQUNJQWxNQkVBZ0RTQUtRUUowYWlnQ0FDRU1JQUloQXdOQUlBVWdDMHdFUUNBTUlBTkJCblJxSUFWQkFYUnFJUUFnQlNFRUEwQWdBQzhCQUFSQUlBRWdDallDQUF3SEN5QUFRUUpxSVFBZ0JDQUxSeUVJSUFSQkFXb2hCQ0FJRFFBTEN5QURJQWxISVFBZ0EwRUJhaUVESUFBTkFBc0xJQWNnQ2tjaEFDQUtRUUZxSVFvZ0FBMEFDd3NnQmlFS0N3SkFJQWNnQ2tvRVFDQUhJUWdEUUNBQ0lBbE1CRUFnRFNBSVFRSjBhaWdDQUNFTUlBSWhBd05BSUFVZ0Mwd0VRQ0FNSUFOQkJuUnFJQVZCQVhScUlRQWdCU0VFQTBBZ0FDOEJBQVJBSUFFZ0NEWUNCQXdIQ3lBQVFRSnFJUUFnQkNBTFJ5RUdJQVJCQVdvaEJDQUdEUUFMQ3lBRElBbEhJUUFnQTBFQmFpRURJQUFOQUFzTElBZ2dDa29oQUNBSVFRRnJJUWdnQUEwQUN3c2dCeUVJQ3dKQUlBSWdDVWdFUUNBQ0lRWURRQ0FJSUFvaUEwNEVRQU5BSUFVZ0Mwd0VRQ0FOSUFOQkFuUnFLQUlBSUFaQkJuUnFJQVZCQVhScUlRQWdCU0VFQTBBZ0FDOEJBQVJBSUFFZ0JqWUNDQXdIQ3lBQVFRSnFJUUFnQkNBTFJ5RUhJQVJCQVdvaEJDQUhEUUFMQ3lBRElBaEhJUUFnQTBFQmFpRURJQUFOQUFzTElBWWdDVWNoQUNBR1FRRnFJUVlnQUEwQUN3c2dBaUVHQ3dKQUlBWWdDVWdFUUNBSklRY0RRQ0FJSUFvaUEwNEVRQU5BSUFVZ0Mwd0VRQ0FOSUFOQkFuUnFLQUlBSUFkQkJuUnFJQVZCQVhScUlRQWdCU0VFQTBBZ0FDOEJBQVJBSUFFZ0J6WUNEQXdIQ3lBQVFRSnFJUUFnQkNBTFJ5RUNJQVJCQVdvaEJDQUNEUUFMQ3lBRElBaEhJUUFnQTBFQmFpRURJQUFOQUFzTElBWWdCMGdoQUNBSFFRRnJJUWNnQUEwQUN3c2dDU0VIQ3dKQUlBVWdDMGdFUUNBR1FRWjBJUXdnQlNFREEwQWdDQ0FLSWdKT0JFQURRQ0FHSUFkTUJFQWdEU0FDUVFKMGFpZ0NBQ0FNYWlBRFFRRjBhaUVBSUFZaEJBTkFJQUF2QVFBRVFDQUJJQU0yQWhBTUJ3c2dBRUZBYXlFQUlBUWdCMGNoQ1NBRVFRRnFJUVFnQ1EwQUN3c2dBaUFJUnlFQUlBSkJBV29oQWlBQURRQUxDeUFESUF0SElRQWdBMEVCYWlFRElBQU5BQXNMSUFVaEF3c0NRQ0FESUF0SUJFQWdCa0VHZENFTUlBc2hCUU5BSUFnZ0NpSUNUZ1JBQTBBZ0JpQUhUQVJBSUEwZ0FrRUNkR29vQWdBZ0RHb2dCVUVCZEdvaEFDQUdJUVFEUUNBQUx3RUFCRUFnQVNBRk5nSVVEQWNMSUFCQlFHc2hBQ0FFSUFkSElRa2dCRUVCYWlFRUlBa05BQXNMSUFJZ0NFY2hBQ0FDUVFGcUlRSWdBQTBBQ3dzZ0F5QUZTQ0VBSUFWQkFXc2hCU0FBRFFBTEN5QUxJUVVMSUFFZ0J5QUdhMEVNYkNJQUlBQnNJQWdnQ210QkJIUWlBQ0FBYkdvZ0JTQURheUlPUVFOMElnQWdBR3hxTmdJWVFRQWhCQ0FJSUFwT0JFQWdEa0VCYWtFRGNTRUxBMEFnQmlBSFRBUkFJQTBnQ2tFQ2RHb29BZ0FoRHlBR0lRSURRQ0FDSVF3Q1FDQURJQVZLRFFBZ0R5QU1RUVowYWlBRFFRRjBhaUVDSUFNaEFDQUxJUWtnQ3dSQUEwQWdBRUVCYWlFQUlBUWdBaThCQUVFQVIyb2hCQ0FDUVFKcUlRSWdDVUVCYXlJSkRRQUxDeUFPUVFOSkRRQURRQ0FFSUFJdkFRQkJBRWRxSUFJdkFRSkJBRWRxSUFJdkFRUkJBRWRxSUFJdkFRWkJBRWRxSVFRZ0FrRUlhaUVDSUFCQkEyb2hDU0FBUVFScUlRQWdCU0FKUncwQUN3c2dERUVCYWlFQ0lBY2dERWNOQUFzTElBZ2dDa2NoQUNBS1FRRnFJUW9nQUEwQUN3c2dBU0FFTmdJY0M0a0RBUVovSUFBb0FoZ2lBU2dDQkNFQ0lBRW9BZ0FoQkFOQUlBSkZCRUFnQUNBQktBSU1FUUVBUlFSQVFRQVBDeUFCS0FJQUlRUWdBU2dDQkNFQ0N5QUVRUUZxSVFNZ0FrRUJheUVDSUFRdEFBQkIvd0ZIQkVBRFFDQUFLQUxRQXlJRUlBUW9BaGhCQVdvMkFoZ2dBU0FDTmdJRUlBRWdBellDQUNBQ0JIOGdBZ1VnQUNBQktBSU1FUUVBUlFSQVFRQVBDeUFCS0FJQUlRTWdBU2dDQkF0QkFXc2hBaUFETFFBQUlRUWdBMEVCYWlFRElBUkIvd0ZIRFFBTEN3TkFJQUlFZnlBQ0JTQUFJQUVvQWd3UkFRQkZCRUJCQUE4TElBRW9BZ0FoQXlBQktBSUVDMEVCYXlFQ0lBTXRBQUFoQlNBRFFRRnFJZ1FoQXlBRlFmOEJSZzBBQ3lBRlJRUkFJQUFvQXRBRElnTWdBeWdDR0VFQ2FqWUNHQ0FCSUFJMkFnUWdBU0FFTmdJQURBRUxDeUFBS0FMUUF5Z0NHQ0lEQkVBZ0FDZ0NBQ0lHSUFNMkFoZ2dCa0gzQURZQ0ZDQUFLQUlBSUFVMkFod2dBRUYvSUFBb0FnQW9BZ1FSQWdBZ0FDZ0MwQU5CQURZQ0dBc2dBQ0FGTmdLNEF5QUJJQUkyQWdRZ0FTQUVOZ0lBUVFFTFlBSURmd0Y4SUFBb0FnUWlBaUFCS0FJRVJnUkFJQUpCQUNBQ1FRQktHeUVDQTBBZ0FpQURSa1VFUUNBRklBTkJBM1FpQkNBQUtBSUFhaXNEQUNBQktBSUFJQVJxS3dNQW9xQWhCU0FEUVFGcUlRTU1BUXNMSUFVUEMwRUFFQUVBQzBRQUVPQU5Ba0JCK0p3RUxRQUFRUUZ4RFFCQitKd0VFSEZGRFFBUTFRMUIrSndFRUhBTFFmeUJCQkNHQWhwQmtJSUVFSVlDR2hENkIwR1Jnd1JCOFFFUkFRQWFDendCQVg4akFFRVFheUlESkFBZ0EwRUlhaUFCSUFJZ0FDZ0NBQkVGQUNBREtBSUlFQ3dnQXlnQ0NDRUFJQU1vQWdnUUt5QURRUkJxSkFBZ0FBdFJBUUovSXdCQkVHc2lBaVFBSUFBb0FnQWhBeUFDSUFBb0FnUWlBRUVCZFNBQmFpSUJJQUJCQVhFRWZ5QUJLQUlBSUFOcUtBSUFCU0FEQ3hFQkFEWUNEQ0FDS0FJTUlRQWdBa0VRYWlRQUlBQUxCd0FnQUJFUEFBc3VBUUYvSUFBb0FnUWhBZ05BSUFFZ0FrY0VRQ0FBRURRYUlBSkJER3NpQWhDK0JBd0JDd3NnQUNBQk5nSUVDd2NBSUFBUU9Sb0xMUUVCZnlBQUlBQW9BZ1FRdUFjZ0FDZ0NBQVJBSUFBb0FoQWFJQUFvQWdBaEFTQUFFSThER2lBQkVETUxDMUFCQVg4Z0FCQ1BBaUFBRURRZ0FDZ0NBQ0FBS0FJRUlBRkJCR29pQWhDNUJ5QUFJQUlRU1NBQVFRUnFJQUZCQ0dvUVNTQUFFRFFnQVJBOUVFa2dBU0FCS0FJRU5nSUFJQUFnQUJCWEVKQURDNEFCQVFKL0l3QkJFR3NpQkNRQUlBUkJBRFlDRENBQVFReHFJQVJCREdvZ0F4Q3hBU0FCQkVBZ0FDZ0NFQm9nQVVIVnF0V3FBVXNFUUVIbyt3RVFqd0VBQ3lBQlFReHNFRXNoQlFzZ0FDQUZOZ0lBSUFBZ0JTQUNRUXhzYWlJQ05nSUlJQUFnQWpZQ0JDQUFFRDBnQlNBQlFReHNhallDQUNBRVFSQnFKQUFnQUFzSkFDQUFRUUVRYnhvTElBRUJmeUFBS0FJQUlRRWdBRUVBTmdJQUlBRUVRQ0FBRUVnZ0FSRENCd3NMdlFJQkIzOGdBQkJJR2dKQUlBRUVRQ0FBQW44Z0FTSURRZi8vLy84RFN3UkFRZWo3QVJDUEFRQUxJQU5CQW5RUVN3c1FwUUlnQUJCSUlBTTJBZ0FEUUNBQ0lBTkdCRUFnQUVFSWFpSUJLQUlBSWdSRkRRTWdBQ0FFS0FJRUlBTVFXU0lIRUR3Z0FUWUNBQU5BSUFRb0FnQWlBVVVOQkFKQUlBRW9BZ1FnQXhCWklnVWdCMFlOQUNBQklRSWdBQ0FGRUR3b0FnQkZCRUFnQUNBRkVEd2dCRFlDQUNBRklRY01BUXNEUUFKQUlBSWlCaWdDQUVVRVFFRUFJUUlNQVFzZ0FCQmJJQUZCQ0dvZ0JpZ0NBRUVJYWhETUFTRUlJQVlvQWdBaEFpQUlEUUVMQ3lBRUlBSTJBZ0FnQmlBQUlBVVFQQ2dDQUNnQ0FEWUNBQ0FBSUFVUVBDZ0NBQ0FCTmdJQURBRUxJQUVoQkF3QUN3QUZJQUFnQWhBOFFRQTJBZ0FnQWtFQmFpRUNEQUVMQUFzQUN5QUFRUUFRcFFJZ0FCQklRUUEyQWdBTEM5Y0JBZ04vQVgwakFFRVFheUlDSkFBZ0FpQUJOZ0lNQWtBZ0FpQUJRUUZHQkg5QkFnVWdBU0FCUVFGcmNVVU5BU0FCRUw4Q0N5SUJOZ0lNQ3dKQUlBQVFpQUVpQXlBQlNRUkFJQUFnQVJERUJBd0JDeUFCSUFOUERRQWdBeERkQVNFRUFuOGdBQkE5S0FJQXN5QUFFRnNxQWdDVmpTSUZRd0FBZ0U5ZElBVkRBQUFBQUdCeEJFQWdCYWtNQVF0QkFBc2hBU0FDQW44Z0JBUkFJQUVRMEFNTUFRc2dBUkMvQWdzMkFnZ2dBaUFDUVF4cUlBSkJDR29RZlNnQ0FDSUJOZ0lNSUFFZ0EwOE5BQ0FBSUFFUXhBUUxJQUpCRUdva0FBc0xBQ0FBUVFocUVOQUVHZ3NFQUVFQ0N3UUFRUVFMQ0FCQkRCQkxFRTRMSndFQmZ5TUFRUkJySWdJa0FDQUFRUUpCcUlZQ1FiQ0dBa0hjQUNBQkVBUWdBa0VRYWlRQUN5Y0JBWDhqQUVFUWF5SUNKQUFnQUVFRFFaU0dBa0dnaGdKQjJ3QWdBUkFFSUFKQkVHb2tBQXNuQVFGL0l3QkJFR3NpQWlRQUlBQkJBMEhzaFFKQnJJSUNRZE1BSUFFUUJDQUNRUkJxSkFBTEtRRUJmd05BSUFKQkNFWkZCRUFnQVNBQ2FpQUFJQUpyTFFBSE9nQUFJQUpCQVdvaEFnd0JDd3NMS1FFQmZ3TkFJQUpCQkVaRkJFQWdBU0FDYWlBQUlBSnJMUUFET2dBQUlBSkJBV29oQWd3QkN3c0xRQUVCZnlNQVFTQnJJZ0VrQUNBQklBQVF6QUkyQWhBZ0FVRVlhaUFBSUFGQkVHb2dBVUVJYWhDT0NDQUJRUmhxRUd3aEFDQUJRU0JxSkFBZ0FFRUlhZ3NRQUFKQUlBQkJzQUpxRU40RUN5QUFDNGdCQVFGL0lBQW9BdGdCSWdFRVFBSkFJQUZGRFFBZ0FTZ0M4SWF2QTBVTkFDQUJRUUEyQXZDR3J3TUxJQUFvQXRnQkVMQU1JQUJCQURZQzJBRUxJQUFvQXR3QkJFQWdBQ2dDM0FFaUFRUkFJQUVRdEFRZ0FDZ0MzQUVRTXlBQVFRQTJBdHdCQ3lBQVFRQTJBdHdCQ3lBQUtBTEFBUVJBSUFCQndBRnFFTjBISUFCQkFEWUN3QUVMQzlrQkFRVi9Jd0JCd0FGcklnTWtBQ0FBSUFOQkNHb1F6Z1FnQUVFRWFpQURRUWhxUVFSeUVNNEVBMEFDUUVFQUlRRWdBa0VEUmdSQUEwQWdBU0FBS0FLd0FTSUNRUU4wUWVpeEFXb29BZ0JPRFFJZ0FDQUJRUU4wSWdKcVFlZ0FhaUFDSUFOcVFmQUFhaEROQkNBQlFRRnFJUUVNQUFzQUJRTkFJQUZCQkVaRkJFQWdBVUVEZENJRUlBQWdBa0VGZENJRmFtcEJDR29nQXlBRmFpQUVha0VRYWhETkJDQUJRUUZxSVFFTUFRc0xJQUpCQVdvaEFnd0NDd0FMQ3lBRElBSTJBcmdCSUFBZ0EwRUlha0c0QVJBL0dpQURRY0FCYWlRQUN4RUFJQUFnQUNnQ0FDQUFLQUlFRUtFTkMwZ0JBWDhqQUVFZ2F5SURKQUFnQXlBQ05nSWNJQU5CRUdvZ0F5QUJFSmdCSWdFZ0F5Z0NIQkNpQ0NBQUlBTkJFR29Rb3dnZ0EwRVFhaEE1R2lBQkVEa2FJQU5CSUdva0FBdTZDZ0VVZkFKQUFrQUNRQUpBQWtBQ1FDQUZRUUZyRGdRQkFnTUFCUXNnQUNzREVDSVFSQUFBQUFBQUFCaEFvaUVXSUFBckF4Z2lFVVFBQUFBQUFBQVlRS0loRnlBQ0lBQXJBemdpR0tFZ0FDc0RLQ0lab3lJS0lBcWlJUUlnQVNBQUt3TXdJZzZoSUFBckF5QWlENk1pQ3lBTG9pRUJJQUFyQTBBaEZDQUFLd01JSVJJZ0FDc0RBQ0VUSUJFZ0VhQWhEU0FRSUJDZ0lSVkJBU0VGSUFvaEJpQUxJUWNEUUFKQUFrQWdBa1FBQUFBQUFBQUFBR0lnQVVRQUFBQUFBQUFBQUdKeVJRUkFSQUFBQUFBQUFBQUFJUWNNQVFzZ0JpQVFJQUlnQXFBZ0FpQUJvQ0lKb0tJZ0JpQVRJQW1pUkFBQUFBQUFBUEEvb0NBSklCSWdDYUtpb0NJTW9xQWdCaUFOSUFjZ0VTQUpJQUVnQWFDZ29pQUdJQlVnQjZLaUlBY2dES0tnb0NBTG9TQVhJQWVpSUJVZ0JxSWdFeUFDSUFGRUFBQUFBQUFBQ0VDaUlnZWdva1FBQUFBQUFBRHdQNkFnRWlBQ0lBS2lJQUVnQVVRQUFBQUFBQUFVUUtLaUlBSWdCNklpQ2FDZ29xQ2dvS09oSWdlaUlneWlvQ0FLb1NBV0lBYWlJQk1nQVNBQ1JBQUFBQUFBQUFoQW9xQ2lSQUFBQUFBQUFQQS9vQ0FTSUFJZ0FrUUFBQUFBQUFBVVFLS2lJQUVnQWFJZ0NhQ2dvcUNnSUF5Z282RWhCaUFGUVFSSERRRWdCaUVJQ3lBRElBNGdEeUFIb2lBVW82QTVBd0FnR0NBWklBaWlJQlNqb0NFQ0RBVUxJQVZCQVdvaEJTQUdJQWFpSVFJZ0J5QUhvaUVCREFBTEFBc2dBQ3NER0VRQUFBQUFoTmVYUWFNaURVUUFBQUFBQUFBSVFLSWhDU0FCSUFBckF3QWlES0VpQVNBQm9pQUNJQUFyQXdpaElnWWdCcUtnSWdlZklnb2hBa0VCSVFVRFFFUUFBQUFBQUFBQUFDRUlBa0FnQWtRQUFBQUFBQUFBQUdJRVFDQUdJQUlnQWtRQUFBQUFBQUR3UHlBTklBZWlvYUlnQ3FGRUFBQUFBQUFBOEQ4Z0NTQUhvcUdqb1NJSW9pQUNveUVHSUFFZ0NLSWdBcU1oQVNBRlFRTkhEUUVnQVNFTElBWWhDQXNnQXlBTUlBc2dBQ3NERUtPZ09RTUFJQWdnQUNzREVLTWdBQ3NEQ0tBaEFnd0VDeUFGUVFGcUlRVWdBU0FCb2lBR0lBYWlvQ0lIbnlFQ0RBQUxBQXNnQUNzREdFUUFBQUFBaE5lWFFhTWlEa1FBQUFBQUFBQUlRS0loRHlBQUt3TWdSQUFBQUFDRTE1ZEJvMFFBQUFBQUFHcjRRS01pRFVRQUFBQUFBQUFVUUtJaENTQUJJQUFyQXdBaURLRWlCaUFHb2lBQ0lBQXJBd2loSWdjZ0I2S2dJZ0tmSWdvaEFVRUJJUVVEUUFKQUlBRkVBQUFBQUFBQUFBQmlCRUFnQnlBQklBRkVBQUFBQUFBQThEOGdEaUFDb3FFZ0FpQU5JQUtpb3FHaUlBcWhSQUFBQUFBQUFQQS9JQThnQXFLaElBSWdDU0FDb3FLaG82RWlBcUlnQWFNaEJ5QUdJQUtpSUFHaklRWWdCVUVEUncwQklBWWhDeUFISVFnTElBTWdEQ0FMSUFBckF4Q2pvRGtEQUNBSUlBQXJBeENqSUFBckF3aWdJUUlNQXdzZ0JVRUJhaUVGSUFZZ0JxSWdCeUFIb3FBaUFwOGhBUXdBQ3dBTElBQXJBeUJFQUFBQUFJVFhsMEdqSWc1RUFBQUFBQUFBQ0VDaUlROGdBQ3NES0VRQUFBQUFoTmVYUWFORUFBQUFBQUJxK0VDaklnMUVBQUFBQUFBQUZFQ2lJUWtnQVNBQUt3TUFJZ3loSUFBckF4aWpJZ1lnQnFJZ0FpQUFLd01Jb1NJSElBZWlvQ0lDbnlJS0lRRkJBU0VGQTBBQ1FDQUJSQUFBQUFBQUFBQUFZZ1JBSUFjZ0FTQUJSQUFBQUFBQUFQQS9JQTRnQXFLaElBSWdEU0FDb3FLaG9pQUtvVVFBQUFBQUFBRHdQeUFQSUFLaW9TQUNJQWtnQXFLaW9hT2hJZ0tpSUFHaklRY2dCaUFDb2lBQm95RUdJQVZCQTBjTkFTQUdJUXNnQnlFSUN5QURJQXdnQ3lBQUt3TVFvNkE1QXdBZ0NDQUFLd01Rb3lBQUt3TUlvQ0VDREFJTElBVkJBV29oQlNBR0lBYWlJQWNnQjZLZ0lnS2ZJUUVNQUFzQUN5QUVJQUk1QXdBTEMwd0FJQUJCQVRZQ0VDQUFJQVEyQWdnZ0FDQUROZ0lFSUFBZ0FqWUNBQ0FBSUFRZ0JXdzJBaFFnQUVFWWFpQUJFS3NJSUFBZ0JVRi9UQVIvSUFJUTF3UWdBMndGSUFVTE5nSU1JQUFMU2dFQmZ5TUFRUkJySWdFa0FBSkFBa0FDUUNBQVFRRnJEZ0lDQVFBTFFSQVFDU0lBSUFGQnlPVUFFSmdCRU0wQ0lBQkJ6TjhCUVE0UUNBQUxRUVFoQUFzZ0FVRVFhaVFBSUFBTElBQWdBRUlBTndJQUlBQkNBRGNDRUNBQVFnQTNBZ2dnQUVFWWFoQ3JBaG9MUGdFQmZ5TUFRWkFDYXlJQkpBQWdBVUdNQW1vUUdSb2dBVUdBQWtIQkV5QUJRWXdDYWtHUWpBUVFKQkF3R2lBQUlBRVFtQUVhSUFGQmtBSnFKQUFMUGdFQ2Z5TUFRUkJySWdJa0FDQUFLQUlBSVFNZ0FrRUFPZ0FQSUFCQkJHb2dBU0FEYkNBQ1FROXFFTGNJSUFCQkVHb2dBUkNqQlNBQ1FSQnFKQUFMSUFBZ0FCQTBHZ05BSUFFRVFDQUJLQUlBSVFBZ0FSQXpJQUFoQVF3QkN3c0x2UUlCQjM4Z0FCQklHZ0pBSUFFRVFDQUFBbjhnQVNJRFFmLy8vLzhEU3dSQVFjV1BBUkNQQVFBTElBTkJBblFRU3dzUXBRSWdBQkJJSUFNMkFnQURRQ0FDSUFOR0JFQWdBRUVJYWlJQktBSUFJZ1JGRFFNZ0FDQUVLQUlFSUFNUVdTSUhFRHdnQVRZQ0FBTkFJQVFvQWdBaUFVVU5CQUpBSUFFb0FnUWdBeEJaSWdVZ0IwWU5BQ0FCSVFJZ0FDQUZFRHdvQWdCRkJFQWdBQ0FGRUR3Z0JEWUNBQ0FGSVFjTUFRc0RRQUpBSUFJaUJpZ0NBRVVFUUVFQUlRSU1BUXNnQUJCYklBRkJDR29nQmlnQ0FFRUlhaERNQVNFSUlBWW9BZ0FoQWlBSURRRUxDeUFFSUFJMkFnQWdCaUFBSUFVUVBDZ0NBQ2dDQURZQ0FDQUFJQVVRUENnQ0FDQUJOZ0lBREFFTElBRWhCQXdBQ3dBRklBQWdBaEE4UVFBMkFnQWdBa0VCYWlFQ0RBRUxBQXNBQ3lBQVFRQVFwUUlnQUJCSVFRQTJBZ0FMQzFnQkFuOGdBQkE5S0FJQUJFQWdBQ0FBUVFocUlnRW9BZ0FRMndRZ0FVRUFOZ0lBSUFBUWlBRWhBa0VBSVFFRFFDQUJJQUpHQkVBZ0FCQTlRUUEyQWdBRklBQWdBUkE4UVFBMkFnQWdBVUVCYWlFQkRBRUxDd3NMRkFBZ0FDQUFRUWhxS0FJQUVOc0VJQUFRcVFJTE1BRUNmUUovUVFFZ0FDb0NBQ0lDSUFFcUFnQWlBMTBOQUJwQkFDQUNJQU5lRFFBYUlBQW9BZ1FnQVNnQ0JFZ0xDMjBBSUFBcUFnQWdBU29DQUpRZ0FDb0NCQ0FCS2dJRWxKSWdBQ29DQ0NBQktnSUlsSklnQUNvQ0RDQUJLZ0lNbEpJZ0FDb0NFQ0FCS2dJUWxKSWdBQ29DRkNBQktnSVVsSklnQUNvQ0dDQUJLZ0lZbEpJZ0FDb0NIQ0FCS2dJY2xKSWdBQ29DSUNBQktnSWdsSklMRUFBZ0FFSUFOd0lBSUFCQkFEWUNDQXRwQVFOOUlBQXFBaEFnQUNvQ0ZDQUFLZ0ljSUFBcUFpQVFvZ0VoQVNBQUtnSU1JQUFxQWhRZ0FDb0NHQ0FBS2dJZ0VLSUJJUUlnQUNvQ0RDQUFLZ0lRSUFBcUFoZ2dBQ29DSEJDaUFTRURJQUVnQUNvQ0FKUWdBaUFBS2dJRWxKTWdBeUFBS2dJSWxKSUxEQUFnQUNBQktRSUFOd0lBQzlnQ0FRcDlJQVVnQmlvQ0FDQUhLZ0lBa2lBSUtnSUFraUFKS2dJQWtrTUFBSUErbENJS09BSUFJQVVnQmlvQ0JDQUhLZ0lFa2lBSUtnSUVraUFKS2dJRWtrTUFBSUErbENJTE9BSUVJQVlxQWdBZ0NwTWlEQ0FNbENBR0tnSUVJQXVUSWcwZ0RaU1NrU0FIS2dJQUlBcVRJZzRnRHBRZ0J5b0NCQ0FMa3lJUElBK1VrcEdTSUFncUFnQWdDcE1pRUNBUWxDQUlLZ0lFSUF1VEloRWdFWlNTa1pJZ0NTb0NBQ0FLa3lJS0lBcVVJQWtxQWdRZ0M1TWlDeUFMbEpLUmtrTUFBSUErbENJU1F3QUFBQUJjQkVBZ0JFTUFBSUEvSUJLVnUwVE5PMzltbnFEMlA2SzJJaE00QWdBZ0FDQU1JQk9VT0FJQUlBQWdEU0FFS2dJQWxEZ0NCQ0FCSUE0Z0JDb0NBSlE0QWdBZ0FTQVBJQVFxQWdDVU9BSUVJQUlnRUNBRUtnSUFsRGdDQUNBQ0lCRWdCQ29DQUpRNEFnUWdBeUFLSUFRcUFnQ1VPQUlBSUFNZ0N5QUVLZ0lBbERnQ0JBc2dFa01BQUFBQVhBc1NBQ0FBSUFBb0FnQWdBVUVDZEdvMkFnQUxKQUVCZnlNQVFSQnJJZ0VrQUNBQklBQTJBZ2dnQVNnQ0NDRUFJQUZCRUdva0FDQUFDd2tBSUFBZ0FSRDVDQXNOQUNBQUtBSUFJQUFvQWdSR0MxY0JBbjhqQUVFZ2F5SURKQUFnQUJBMElnSWdBMEVJYWlBQUlBQVFSa0VCYWhDRUF5QUFFRVlnQWhEN0FpSUNLQUlJSUFFUXp3SWdBaUFDS0FJSVFRaHFOZ0lJSUFBZ0FoQ0RBeUFDRUlJRElBTkJJR29rQUFzdkFRSi9JQUFRcndJZ0FCRFVBaENGQ1NBQUtBSUVRUWhySVFFZ0FCQkdJUUlnQUNBQkVJZ0RJQUFnQWhEbUF3dTdBZ0lCZlFGL0lBSWdBUkRpQkNJRGkyQWlCRVVFUUNBQVF3QUFnRDhnQTVVaUFpQUJLZ0lRSUFFcUFoUWdBU29DSENBQktnSWdFS0lCbERnQ0FDQUFJQUlnQVNvQ0NDQUJLZ0lFSUFFcUFpQWdBU29DSEJDaUFaUTRBZ1FnQUNBQ0lBRXFBZ1FnQVNvQ0NDQUJLZ0lRSUFFcUFoUVFvZ0dVT0FJSUlBQWdBaUFCS2dJVUlBRXFBZ3dnQVNvQ0lDQUJLZ0lZRUtJQmxEZ0NEQ0FBSUFJZ0FTb0NBQ0FCS2dJSUlBRXFBaGdnQVNvQ0lCQ2lBWlE0QWhBZ0FDQUNJQUVxQWdnZ0FTb0NBQ0FCS2dJVUlBRXFBZ3dRb2dHVU9BSVVJQUFnQWlBQktnSU1JQUVxQWhBZ0FTb0NHQ0FCS2dJY0VLSUJsRGdDR0NBQUlBSWdBU29DQkNBQktnSUFJQUVxQWh3Z0FTb0NHQkNpQVpRNEFod2dBQ0FDSUFFcUFnQWdBU29DQkNBQktnSU1JQUVxQWhBUW9nR1VPQUlnQ3lBRVFRRnpDeHdBSUFBUXVBSWdBUVJBSUFBZ0FSRHVDQ0FBSUFFUTFRTUxJQUFMSVFBZ0FDZ0NCQ0FBRURRb0FnQkhCRUFnQUNBQkVJa0REd3NnQUNBQkVPa0VDd2dBSUFCQi9BQnFDN0lCQVFOL0l3QkJFR3NpQnlRQUlBVVFiaUVGSUFBZ0JCQkdFUGNDSUFkQkRHb2hDQU5BSUFRUVJpQUdTd1JBSUFkQkNHb2dDQ0FCSUFNZ0JDQUdFRkFvQWdRUWFpb0NBQ0FESUFRZ0JoQlFLQUlFRUdvcUFnUVF3d01nQnlvQ0NDQUNJQVFnQmhCUUtBSUFFR29xQWdDVEVHNGdCeW9DRENBQ0lBUWdCaEJRS0FJQUVHb3FBZ1NURUc2U0lBVmZRUUZ6UlFSQUlBQWdCQ0FHRUZBUTdRUUxJQVpCQVdvaEJnd0JDd3NnQjBFUWFpUUFDNnNDQWdSL0FYMGpBRUZBYWlJSUpBQWdDRUV3YWlBREVFWVE3QVFoQ1NBSVFTQnFJQU1RUmhEc0JDRUtBMzhnQXhCR0lBZE5CSDlCQUNFSElBaEJBRFlDR0NBSVFRQTJBZ3dnQ0VJQU53TUFJQWdnQnJJaUN6Z0NIQ0FJSUFzNEFoUWdDQ0FGc2lJTE9BSVFJQWdnQ3pnQ0NDQUVJQUFnQ1VFQUVGQWdDa0VBRUZBZ0F4QkdJQWdRaHdrRVFDQUFJQVVnQmhDR0NTRUhDeUFLRU44QklBa1Ezd0VnQ0VGQWF5UUFJQWNGSUFFZ0F5QUhFRkFvQWdBUWFpb0NBQ0VMSUFvZ0J4QlFJQXM0QWdBZ0FTQURJQWNRVUNnQ0FCQnFLZ0lFSVFzZ0NpQUhFRkFnQ3pnQ0JDQUNJQU1nQnhCUUtBSUVFR29xQWdBaEN5QUpJQWNRVUNBTE9BSUFJQUlnQXlBSEVGQW9BZ1FRYWlvQ0JDRUxJQWtnQnhCUUlBczRBZ1FnQjBFQmFpRUhEQUVMQ3d2cUFnRURmeU1BUVNCcklnUWtBQ0FCSUFSQkRHb2dCRUVJYWlBRVFRUnFJQVFnQXhDS0NTQUFFSXNDSUFFUTdnUVFReUVGSUFFb0FuQWhBd0pBSUFJUVJpQUZUd1JBSUFWQkFDQUZRUUJLR3lFRkEwQWdCU0FHUmcwQ0lBRWdCRUVjYWlBRVFSaHFJQVJCRkdvZ0JFRVFhaUFES2dJQUlBTXFBZ1FnQXlvQ0NDQURLZ0lNSUFRb0FneTNSQUFBQUFBQUFPQS9vTFlnQkNnQ0NMZEVBQUFBQUFBQTREK2d0aUFFS0FJRXQwUUFBQUFBQUFEZ1A2QzJJQVFvQWdDM1JBQUFBQUFBQU9BL29MWVFpUWtDUUNBRUtnSWNRd0FBZ0Q5ZFFRRnpEUUFnQkNvQ0dFTUFBSUEvWFVFQmN3MEFJQVFxQWhSREFBQ0FQMTFCQVhNTkFDQUVLZ0lRUXdBQWdEOWRRUUZ6RFFBZ0FDQUNJQUVRN2dRZ0JoQThLQUlBRUZBUTdRUUxJQU5CRUdvaEF5QUdRUUZxSVFZTUFBc0FDMEhBbHdSQmhNTUJFREpCck1ZQUVESkJtczBBRURKQjFnSVFOa0c4MGdBUU1rSEx3d0VRTWhBMUVBQUFDeUFFUVNCcUpBQUw1QUlDQVgwSWZ5TUFRVEJySWdva0FDQUtRU0JxSUFNUVJrRUNkQkRFQXlFTklBcEJFR29nQXhCR1FRSjBFTVFESVE0RGZ5QURFRVlnQzAwRWZ5QUFJQVN5SWdoRHpjeE1QcFFnQ0pJaUNJd2dDQ0FGc2lJSVE4M01URDZVSUFpU0lnaU1JQWdReWdnZ0FDQUhRUUYxc2pnQ0RDQUFJQVpCQVhXeU9BSUlJQUFnQnpZQ0JDQUFJQVkyQWdBZ0FDQU5RUUFRUENBT1FRQVFQQ0FERUVZUXlRZ2dBQ0FLUVF4cUlBcEJDR29Rd2dnZ0NpZ0NDQ0VBSUFvcUFnd2hDQ0FPRUhVZ0RSQjFJQXBCTUdva0FFRi9JQUFnQ0VNQUFFQkFYUnNGSUFFZ0F5QUxFRkFvQWdBUWFpRUpJQUlnQXlBTEVGQW9BZ1FRYWlFTUlBMGdDMEVDZENJUUVEd2lEeUFKS2dJQU9BSUFJQThnQ1NvQ0JEZ0NCQ0FQSUFrcUFnZzRBZ2dnRHlBSktnSU1PQUlNSUE0Z0VCQThJZ2tnRENvQ0FEZ0NBQ0FKSUF3cUFnUTRBZ1FnQ1NBTUtnSUlPQUlJSUFrZ0RDb0NERGdDRENBTFFRRnFJUXNNQVFzTEN6TUJBWDhqQUVFUWF5SUVKQUFnQkNBQUlBTVEyQUloQXlBQUVEUWdBU0FDSUFOQkJHb1FsQWtnQXhCMklBUkJFR29rQUFzUEFDQUFJQUFvQWdBb0FnQTJBZ0FMQ1FBZ0FFRUVhaEIxQzFvQUl3QkJFR3NpQXlRQUlBRVFOQ0VCSUFCQkdCQkxJQU5CQ0dvZ0FVRUFFS2NDRUtZQ0lnQW9BZ0JCQ0dvZ0JDZ0NBQkNjQ1NBQUVFaEJBVG9BQkNBQUtBSUFJQUkyQWdRZ0FDZ0NBRUVBTmdJQUlBTkJFR29rQUF1NUFnQWdBQ2dDQUNBQktBSUFFSFFnQUNnQ0JDQUJLQUlFRUhScUlBQW9BZ2dnQVNnQ0NCQjBhaUFBS0FJTUlBRW9BZ3dRZEdvZ0FDZ0NFQ0FCS0FJUUVIUnFJQUFvQWhRZ0FTZ0NGQkIwYWlBQUtBSVlJQUVvQWhnUWRHb2dBQ2dDSENBQktBSWNFSFJxSUFBb0FpQWdBU2dDSUJCMGFpQUFLQUlrSUFFb0FpUVFkR29nQUNnQ0tDQUJLQUlvRUhScUlBQW9BaXdnQVNnQ0xCQjBhaUFBS0FJd0lBRW9BakFRZEdvZ0FDZ0NOQ0FCS0FJMEVIUnFJQUFvQWpnZ0FTZ0NPQkIwYWlBQUtBSThJQUVvQWp3UWRHb2dBQ2dDUUNBQktBSkFFSFJxSUFBb0FrUWdBU2dDUkJCMGFpQUFLQUpJSUFFb0FrZ1FkR29nQUNnQ1RDQUJLQUpNRUhScUlBQW9BbEFnQVNnQ1VCQjBhaUFBS0FKVUlBRW9BbFFRZEdvZ0FDZ0NXQ0FCS0FKWUVIUnFJQUFvQWx3Z0FTZ0NYQkIwYWd1TkFnSU1md0Y5UVg4aENnSkFJQUVvQWdnaUJpQUNLQUlFUncwQUlBQW9BZ1FpQXlBQktBSUVSdzBBSUFBb0FnZ2lCeUFDS0FJSVJ3MEFRUUFoQ2lBRFFRQWdBMEVBU2hzaEN5QUhRUUFnQjBFQVNoc2hEQ0FHUVFBZ0JrRUFTaHNoRFNBQUtBSUFJUU1EUUNBRUlBdEdEUUVnQkNBR2JDRU9RUUFoQlFOQUlBVWdERVpGQkVCQkFDRUFJQU5CQURZQ0FDQUNLQUlBSUFWQkFuUnFJUWdnQVNnQ0FDQU9RUUowYWlFSlF3QUFBQUFoRHdOQUlBQWdEVVpGQkVBZ0F5QVBJQWtxQWdBZ0NDb0NBSlNTSWc4NEFnQWdBRUVCYWlFQUlBbEJCR29oQ1NBSUlBZEJBblJxSVFnTUFRc0xJQVZCQVdvaEJTQURRUVJxSVFNTUFRc0xJQVJCQVdvaEJBd0FDd0FMSUFvTENnQWdBRUVNYWlnQ0FBcy9BUUovQWtBZ0FVRUJTQTBBSUFCQkFEWUNBRUVCSVFJRFFDQUJJQUpHRFFFZ0FDQUNRUUowYWlBRFFRRnFJZ00yQWdBZ0FrRUJhaUVDREFBTEFBc0xDQUFnQUVIb0FHb0xDd0FnQUVFQUlBRVFPeG9MbHdZQkJIOGpBRUV3YXlJSEpBQUNRQUpBQWtBQ1FBSkFBa0FnQUVFTWFpSUdLQUlFSUFBb0Ftd1FyQUlnQlU0RVFDQUJRUUVRK2dJZ0FSQ2pBaUFGRUlVQ1FRQWhCaUFGUVFBZ0JVRUFTaHNoQUFOQUlBQWdCa1lOQWlBRUlBWkJBblJxS0FJQUlRSWdBUkNqQWlBR0VEd2dBallDQUNBR1FRRnFJUVlNQUFzQUN5QUhRUmhxRUlZQ0lRZ2dCaUFDSUFNZ0JDQUZFS2tKSUFaQkdHb2lDUkJESUFWSERRRkJBQ0VHQWtBRFFBSkFJQWtRUXlBR1RRUkFJQWdRK1FSQkFVY05BU0FCUVFFUStnSWdBUkNqQWlBRkVJVUNRUUFoQmlBRlFRQWdCVUVBU2hzaEFBTkFJQUFnQmtZTkJDQUVJQVpCQW5ScUtBSUFJUUlnQVJDakFpQUdFRHdnQWpZQ0FDQUdRUUZxSVFZTUFBc0FDeUFKSUFZUVBDZ0NBRUYvUmcwRklBa2dCaEE4S0FJQUlBVk9EUVlnQkNBSklBWVFQQ2dDQUVFQ2RHb29BZ0FnQTA0TkJ5QUlJQVFnQ1NBR0VEd29BZ0JCQW5ScUVLZ0pJQVFnQmtFQ2RHb1FvZ0lnQmtFQmFpRUdEQUVMQ3lBQkVQc0VJQWdRK1FRUXBna2dCMEVRYWlBSUVNc0RFS29DSVFRRFFDQUVJQWRCQ0dvUVl4Q3FBaEI4UlEwQklBUVFiRUVFYWhCRFJRMEhRWUFCRUVzaUJTQUFFUDRFSUFJZ0JCQnNLQUlBUWVBQWJHb1FwUWtoQmlBSElBVTJBZ2dnQmtFQUVQb0NJQUVRK3dRZ0IwRUlhaENpQWlBRUVHd2hCU0FBSUFjb0FnZ2dBaUFESUFWQkJHb2lCVUVBRUR3Z0JSQkRFUDBFSUFRUXlnTU1BQXNBQ3lBSUlBaEJDR29vQWdBUW1na2dDQkNwQWlBSFFUQnFKQUFQQ3lBSFFUQnFKQUFQQzBIQWx3UkJ3SUlCRURKQjY0UUJFREpCbXMwQUVESkI2d0lRTmtHODBnQVFNa0dWaHdFUU1oQTFFQUFBQzBIQWx3UkI4WWtCRURKQjY0UUJFREpCbXMwQUVESkI3UUlRTmtHODBnQVFNa0dmakFFUU1oQTFFQUFBQzBIQWx3UkJrbzhCRURKQjY0UUJFREpCbXMwQUVESkI3Z0lRTmtHODBnQVFNa0dOa1FFUU1oQTFFQUFBQzBIQWx3UkI0cElCRURKQjY0UUJFREpCbXMwQUVESkI3d0lRTmtHODBnQVFNa0dOa1FFUU1oQTFFQUFBQzBIQWx3UkJwWlFCRURKQjY0UUJFREpCbXMwQUVESkJnd01RTmtHODBnQVFNa0dWbGdFUU1oQTFFQUFBQ3hNQUlBQWdBQ2dDQkNJQVFRRnFOZ0lFSUFBTENRQWdBRUVBT2dBQUN5Z0JBWDhnQUNBQktBSUFOZ0lBSUFFb0FnQWhBeUFBSUFFMkFnZ2dBQ0FDSUFOcU5nSUVJQUFMUlFFRGZ5QUFRZWdBYWlFQkEwQWdBUkJESUFKTEJFQWdBU0FDRUR3b0FnQWlBd1JBSUFNUWdRVUxJQU1RTXlBQ1FRRnFJUUlNQVFzTElBQkI5QUJxRUhVZ0FSQjFDeVVCQVg4Z0FDZ0NBQ0VDSUFBZ0FUWUNBQ0FDQkVBZ0FnUkFJQUlRZ1FVTElBSVFNd3NMTVFFQmZ5QUFFTk1DSUFBb0FnQUVRQ0FBSUFBb0FnQVFpQU1nQUJBMEdpQUFLQUlBSVFFZ0FCRFBBUm9nQVJBekN3c3NBUUYvSUFBb0FnZ2dBQ2dDQkJDMEFTSUJCRUFnQVNBQUVNd0lRWDlLQkVBZ0FROExJQUVRUlF0QkFBc29BQ0FCQkVBZ0FVRWthaEN4Q1NBQlFRaHFJZ0JCRUdvUWtRUWdBRUVFYWhDK0Jnc2dBUkF6Q3hJQUlBQkJBRFlDQkNBQVFlVGxBellDQUFzdUFRRi9JQUFvQWdRZ0FTZ0NDQkNQQlNJQ0JFQWdBaUFBSUFFUStBUkJmMG9FUUNBQ0R3c2dBaEJGQzBFQUN3a0FJQUFnQVRZQ0NBc1RBQ0FBUVFnMkFnUWdBRUVNYWtFSUVJVUNDNklDQVFkL0lBQVFTQm9DUUNBQkJFQWdBQ0FCRU04REVLVUNJQUFRU0NBQk5nSUFBMEFnQVNBQ1JnUkFJQUJCQ0dvaUFpZ0NBQ0lEUlEwRElBQWdBeWdDQkNBQkVGa2lCeEE4SUFJMkFnQURRQ0FES0FJQUlnSkZEUVFDUUNBQ0tBSUVJQUVRV1NJRUlBZEdEUUFnQWlFRklBQWdCQkE4S0FJQVJRUkFJQUFnQkJBOElBTTJBZ0FnQkNFSERBRUxBMEFDUUNBRklnWW9BZ0JGQkVCQkFDRUZEQUVMSUFBUVd5QUNRUWhxSUFZb0FnQkJDR29RekFFaENDQUdLQUlBSVFVZ0NBMEJDd3NnQXlBRk5nSUFJQVlnQUNBRUVEd29BZ0FvQWdBMkFnQWdBQ0FFRUR3b0FnQWdBallDQUF3QkN5QUNJUU1NQUFzQUJTQUFJQUlRUEVFQU5nSUFJQUpCQVdvaEFnd0JDd0FMQUFzZ0FFRUFFS1VDSUFBUVNFRUFOZ0lBQ3dzRUFDQUJDeXNBQWtCQjlJRUVMUUFBUVFGeERRQkI5SUVFRUhGRkRRQkIzSUVFRUlVRFFmU0JCQkJ3QzBIY2dRUUxvUUVCQlg4akFFRVFheUlESkFBZ0FCQTlHaUFCS0FJQUlRUUNRQUpBSUFBUWlBRWlCVVVOQUNBQUlBUWdCUkJaSWdZUVBDZ0NBQ0lDUlEwQUEwQWdBaWdDQUNJQ1JRMEJJQVFnQWlnQ0JFY0VRQ0FDS0FJRUlBVVFXU0FHUncwQ0N5QUVJQUlvQWdSSERRQWdBQkJiSUFKQkNHb2dBUkRNQVVVTkFBc2dBMEVJYWlBQ0VHOG9BZ0FoQWd3QkN5QURFTlFESWdJMkFnZ0xJQU5CRUdva0FDQUNDd29BSUFCQkJHb1FoUVlMUGdFQ2YwRU1FRG9pQWdSL0lBSWdBQ0FCYkVFQ2RCQTZJZ00yQWdBZ0EwVUVRQ0FDRUROQkFBOExJQUlnQVRZQ0NDQUNJQUEyQWdRZ0FnVkJBQXNMSEFBZ0FFSC8vLy8vQVVzRVFFR1hFaENQQVFBTElBQkJBM1FRU3dzSUFDQUFFS3NDR2d0QkFRRi9JQUFRM1FVZ0FVa0VRQkNVQVFBTElBQVFOQm9nQUNBQkVOc0ZJZ0kyQWdBZ0FDQUNOZ0lFSUFBUU5DQUNJQUZCRkd4cU5nSUFJQUJCQUJEY0JRc3pBUUYvSXdCQkVHc2lCQ1FBSUFRZ0FDQURFUGtESVFNZ0FCQTBJQUVnQWlBRFFRUnFFTVFKSUFNUWRpQUVRUkJxSkFBTEpnQWdBQ2dDQUJvZ0FDZ0NBQ0FBRU9BQmFob2dBQ2dDQUJvZ0FDZ0NBQ0FBRUpFQmFob0xLQUFnQWlBQmF5SUFRUUZPQkVBZ0F5Z0NBQ0FCSUFBUVB4b2dBeUFES0FJQUlBQnFOZ0lBQ3dzYUFDQUJJQUJySWdFRVFDQUNJQUFnQVJEYUFnc2dBU0FDYWdzekFRRi9Jd0JCRUdzaUJDUUFJQVFnQUNBREVJNERJUU1nQUJBMElBRWdBaUFEUVFScUVKVUZJQU1RZGlBRVFSQnFKQUFMRndBZ0FFSUFOd0lBSUFCQkFUb0FFQ0FBUWdBM0FnZ0xMQUFnQUNnQ0FCb2dBQ2dDQUNBQUVPRUJRUlJzYWhvZ0FDZ0NBQm9nQUNnQ0FDQUFFSU1CUVJSc2Fob0xWQUVDZnlNQVFSQnJJZ0lrQUNBQ0lBQWdBUkQ1QXlJQktBSUVJUU1EUUNBQktBSUlJQU5IQkVBZ0FCQTBHaUFCS0FJRUVKZ0ZJQUVnQVNnQ0JFRVVhaUlETmdJRURBRUxDeUFCRUhZZ0FrRVFhaVFBQ3d3QUlBQW9BZ0FhSUFFUU13c0tBQ0FBUVFScUVNMEJDeG9BSUFCQkRrMEVRQ0FBUVFKMFFiU3hBV29vQWdBUEMwRUFDeW9CQVg4akFFRVFheUlDSkFBZ0FrRUlhaUFCRU5nRElnRWdBQkRTQXlBQkVNMEJJQUpCRUdva0FBdHFBUVY4SUFBckF3QWlBaUFDb2lBQUt3TUlJZ01nQTZLZ0lBQXJBeEFpQkNBRW9xQWdBQ3NER0NJQklBR2lvQ0lGUkFBQUFBQUFBQUFBWVFSQUR3c2dBQ0FCSUFXZklnR2pPUU1ZSUFBZ0JDQUJvemtERUNBQUlBTWdBYU01QXdnZ0FDQUNJQUdqT1FNQUN4a0JBWDhnQUJDREFTRUNJQUFnQVJDa0JpQUFJQUlRbVFVTExBRUJmeU1BUVJCcklnSWtBQ0FDSUFFMkFnd2dBQ0FDUVF4cUlBSkJDR29RL0FJZ0FrRVFhaVFBSUFBTFFnRUJmeU1BUVNCcklnSWtBQ0FDSUFFUXpBSTJBaEFnQWtFWWFpQUFJQUVnQWtFUWFpQUNRUWhxRU5nSklBSkJHR29RYkNFQUlBSkJJR29rQUNBQVFRUnFDelFCQVg4Z0FTQUFFSU1CSWdKTEJFQWdBQ0FCSUFKckVONEpEd3NnQVNBQ1NRUkFJQUFnQUNnQ0FDQUJRUlJzYWhDZ0JRc0xhUUVEZnlNQVFTQnJJZ0lrQUNBQUlBRTJBZ0FnQWtFWWFpQUJFS0VGSVFOQkVCQkxJZ1FnQVJEZkNTQUFJQVEyQWdRZ0F4QzFBUm9nQWlBQk5nSUVJQUlnQVRZQ0FDQURLQUlBSVFFZ0EwRUFOZ0lBSUFFRVFDQURJQUVRaFFVTElBSkJJR29rQUNBQUN6RUJBWDhnQUVJQU53SUFJQUJCQ0dvaUFVRUFOZ0lBSUFGQkJHb1FUaG9nQVVFUWFoQk9HaUFBUVNScUVPQUpJQUFMSlFFQmZ5QUFLQUlBSVFJZ0FDQUJOZ0lBSUFJRVFDQUNCRUFnQWhETkNRc2dBaEF6Q3dzN0FRRi9JQUFvQWdBaEFpQUFJQUUyQWdBZ0FnUkFJQUlFUUNBQ1FRUnFJZ0FnQUNnQ0NCQzlDU0FBRUtrQ0lBSkJBQkNtQlFzZ0FoQXpDd3NKQUNBQVFRQTdBUUFMS3dFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVFKcklRSU1BUXNMSUFBZ0FUWUNCQXNMQUNBQVFlRG5BellDQUF1T0FRRUdmd05BSUFWQkEwY0VRQ0FBSUFWQkJYUWlCMm9pQmlFSVFRQWhBd05BSUFOQkJFY0VRQ0FEUVFOMElnUWdBaUFIYW1vZ0Jpc0RBQ0FCSUFScUlnUXJBd0NpSUFZckF3Z2dCQ3NESUtLZ0lBZ3JBeEFnQkVGQWF5c0RBS0tnT1FNQUlBTkJBV29oQXd3QkN3c2dBaUFIYWlJRElBWXJBeGdnQXlzREdLQTVBeGdnQlVFQmFpRUZEQUVMQ3dzVkFDQUFRYVRnQVRZQ0FDQUFRUVJxRURrYUlBQUxUUUVDZnlNQVFTQnJJZ01rQUNBQUlBTWdBRUU0YWtFQUVEd2dBaWdDQUNBQ0tBSUVJQUlvQWdnZ0FpZ0NEQkRXQkNJRUlBSVF6Z0lnQUNBQklBUVF6Z0lnQkJEeEFpQURRU0JxSkFBTE5RQWdBQ2dDQUJvZ0FDZ0NBQ0FBRUljQ1FRRjBhaG9nQUNnQ0FDQUFFSWdDUVFGMGFob2dBQ2dDQUNBQUVJY0NRUUYwYWhvTE5RRUJmeU1BUVJCcklnSWtBQ0FDSUFBcUFnQTRBZ3dnQUNBQktnSUFPQUlBSUFFZ0FrRU1haW9DQURnQ0FDQUNRUkJxSkFBTERBQWdBQ0FCRVBFQlFRRnpDOVFCQVFGL0l3QkJJR3NpQXlRQUlBTWdBVFlDRUNBRElBQTJBaGdnQXlBQ05nSUlJQU1vQWhBZ0F5Z0NHQkNPQVNFQklBTW9BZ2dnQXlnQ0VCQ09BU0VBQW44Q1FDQUJSUVJBUVFBZ0FFVU5BaG9nQXlnQ0VDQURLQUlJRUxBQlFRRWdBeWdDRUNBREtBSVlFSTRCUlEwQ0dpQURLQUlZSUFNb0FoQVFzQUVNQVFzZ0F5Z0NHQ0VCSUFBRVFDQUJJQU1vQWdnUXNBRkJBUXdDQ3lBQklBTW9BaEFRc0FGQkFTQURLQUlJSUFNb0FoQVFqZ0ZGRFFFYUlBTW9BaEFnQXlnQ0NCQ3dBUXRCQWdzaEFDQURRU0JxSkFBZ0FBc2xBQU5BSUFFZ0FDZ0NDRWNFUUNBQUtBSVFHaUFBSUFBb0FnaEJDR3MyQWdnTUFRc0xDeElBSUFBUVBTZ0NBQ0FBS0FJQWEwRURkUXZuRHdJVmZ3RitJd0JCMEIxcklnUWtBQ0FFUWRBY2FrR0E1d0JCUEJBL0dpQUVRWkFjYWtIQTV3QkJ3QUFRUHhvZ0JFR1FHMnBCZ09nQVFmd0FFRDhhSUFSQmtCcHFRWURwQUVHQUFSQS9HaUFFUVpBV2FrR0E2Z0JCL0FNUVB4b2dCRUdRRW1wQmdPNEFRWUFFRUQ4YVFYUWhFVUVDSVF3Q1FBSkFBbjhDUUFKQUFuOENRQUpBSUFCQmhBaHJEZ0lCQkFBTElBQkJoQVpHQkVCQmR5RVJRUUVNQWdzZ0FFR0ZDa1lOQWtGL0lRVWdBRUdPRmtjTkJrRkFJUkZCK0FBaEVFSC9BQ0VOUVFraERDQUVRWkFTYWlFTElBUkJrQlpxSVE4TUJRdEJleUVSUVFJTElReEJEU0VRUVE4aERTQUVRZEFjYWlFUElBUkJrQnhxREFJTFFYa2hFVUVESVF3TFFSWWhFRUVmSVEwZ0JFR1FHMm9oRHlBRVFaQWFhZ3NoQzBFQUlRQURmeUFBSUJCR0JIOGdCRUdRSFdvRklBUkJrQjFxSUFCcUlBR25RUUZ4T2dBQUlBQkJBV29oQUNBQlFnR0lJUUVNQVFzTElRSUxJQXhCQVhRaUVrRUJjaUVIUVFFaEJRTkFBa0FnQlNBSFJ3UkFRUUFoQ0NBRVFiQUVhaUFGUVFKMGFpSUdRUUEyQWdCQkFDRUFBMEFnQUNBUVJnMENJQUFnQW1vdEFBQUVRQ0FHSUFnZ0R5QUFJQVZzSUExd1FRSjBhaWdDQUhNaUNEWUNBQXNnQUVFQmFpRUFEQUFMQUFzQ1FDQVVSUTBBSUFSQkFEWUNvQVlnQkNBRUtBSzBCQ0lLTmdLa0JpQUVRUUUyQXJnSElBUkJBRFlDOEFaQkFTRUFBMEFnQUNBU1JrVUVRQ0FFUWZBR2FpQUFRUUowYWlJSVFYODJBZ0FnQ0VFQU5nSklJQUJCQVdvaEFBd0JDd3NnQkVJQU53UFFCU0FFUXYvLy8vOFBOd09BQlNBU1FRRnJJUmRCQUNFSFFRQWhCZ05BSUFaQkFXb2hEaUFHSVFnQ1FDQUtRWDlHQkVBZ0JFSFFCV29nQmtFQ2FpSUlRUUowYWlBSE5nSUFJQWRCZnlBSFFYOUtHMEVCYWlFRlFRQWhBQU5BSUFBZ0JVWU5BaUFBUVFKMElna2dCRUh3Qm1vZ0NFSElBR3hxYWlBRVFmQUdhaUFPUWNnQWJHb2dDV29pQ1NnQ0FDSUtOZ0lBSUFrZ0N5QUtRUUowYWlnQ0FEWUNBQ0FBUVFGcUlRQU1BQXNBQ3dOQUlBZ2lBRUVCU0NJSlJRUkFJQUJCQVdzaENDQUVRYUFHYWlBQVFRSjBhaWdDQUVGL1JnMEJDd3NnQUNFRklBbEZCRUFEUUNBQVFRRnJJZ2hCQW5RaUNTQUVRYUFHYW1vb0FnQkJmMGNFUUNBSUlBVWdCRUdBQldvZ0JVRUNkR29vQWdBZ0JFR0FCV29nQ1dvb0FnQklHeUVGQ3lBQVFRRktJUWtnQ0NFQUlBa05BQXNMSUFSQjBBVnFJQVpCQW1vaUNFRUNkR29nQnlBT0lBVnJJaE1nQlVFQ2RDSVZJQVJCMEFWcWFpSVdLQUlBYWlJQUlBQWdCMGdiSWdrMkFnQkJBQ0VBQTBBZ0FDQVNSZ1JBSUFvZ0RXb2hDaUFXS0FJQUlnQkJmeUFBUVg5S0cwRUJhaUVXSUFSQm9BWnFJQlZxSVJWQkFDRUFBMEFnQUNBV1JnUkFJQWRCZnlBSFFYOUtHMEVCYWlFRlFRQWhBQU5BSUFBZ0JVWUVRQ0FKSVFjTUJnVWdBRUVDZENJSElBUkI4QVpxSUFoQnlBQnNhbW9pQ2lBRVFmQUdhaUFPUWNnQWJHb2dCMm9pQnlnQ0FDSVRJQW9vQWdCek5nSUFJQWNnQ3lBVFFRSjBhaWdDQURZQ0FDQUFRUUZxSVFBTUFRc0FDd0FMSUFSQjhBWnFJQVZCeUFCc2FpQUFRUUowYWlnQ0FDSVlRWDlIQkVBZ0JFSHdCbW9nQ0VISUFHeHFJQUFnRTJwQkFuUnFJQThnQ2lBWWFpQVZLQUlBYXlBTmIwRUNkR29vQWdBMkFnQUxJQUJCQVdvaEFBd0FDd0FGSUFSQjhBWnFJQWhCeUFCc2FpQUFRUUowYWtFQU5nSUFJQUJCQVdvaEFBd0JDd0FMQUFzZ0NFRUNkQ0lBSUFSQmdBVnFhaUFPSUFkck5nSUFJQVlnRjBjRVFDQUVRYUFHYWlBQWFpSUZBbjlCQUNBRVFiQUVhaUFBYWlnQ0FDSUdRWDlHRFFBYUlBOGdCa0VDZEdvb0FnQUxJZ1kyQWdCQkFTRUFJQWRCQUNBSFFRQktHMEVCYWlFSkEwQWdBQ0FKUmtVRVFBSkFJQVJCc0FScUlBZ2dBR3RCQW5ScUtBSUFJZ3BCZjBZTkFDQUVRZkFHYWlBSVFjZ0FiR29nQUVFQ2RHb29BZ0FpRTBVTkFDQUZJQVlnRHlBTElCTkJBblJxS0FJQUlBcHFJQTF2UVFKMGFpZ0NBSE1pQmpZQ0FBc2dBRUVCYWlFQURBRUxDeUFGSUFzZ0JrRUNkR29vQWdBaUNqWUNBQ0FPSVFZZ0J5QU1UQTBCQ3d0QmZ5RUZJQWNnREVvTkF5QUhRWDhnQjBGL1NodEJBV29oQmtFQUlRQWdCRUh3Qm1vZ0NFSElBR3hxSVFVRFFDQUFJQVpHQkVBZ0IwRUFJQWRCQUVvYklnNUJBV29oQlNBRVFmQUdhaUFJUWNnQWJHb2hCa0VCSVFBRFFDQUFJQVZHQkVBZ0RVRUJhaUVKUVFBaEJrRUJJUW9EUUVFQklRQkJBU0VMSUFrZ0NrWkZCRUFEUUNBQUlBVkdSUVJBSUFRZ0FFRUNkR29pRENnQ0FDSVNRWDlIQkVBZ0RDQUFJQkpxSUExdklndzJBZ0FnRHlBTVFRSjBhaWdDQUNBTGN5RUxDeUFBUVFGcUlRQU1BUXNMSUF0RkJFQWdCRUV3YWlBR1FRSjBhaUFOSUFwck5nSUFJQVpCQVdvaEJnc2dDa0VCYWlFS0RBRUxDMEYvSVFVZ0JpQUhSdzBIUVFBaEFBTkFJQUFnRGtZTkJTQUNJQVJCTUdvZ0FFRUNkR29vQWdCcUlnWWdCaTBBQUVFQmN6b0FBQ0FBUVFGcUlRQU1BQXNBQlNBRUlBQkJBblFpQ1dvZ0JpQUphaWdDQURZQ0FDQUFRUUZxSVFBTUFRc0FDd0FGSUFVZ0FFRUNkR29pRGlBTElBNG9BZ0JCQW5ScUtBSUFOZ0lBSUFCQkFXb2hBQXdCQ3dBTEFBc2dBMElBTndNQUlCQWdFV29oQUVJQklRRURRQ0FBSUJCT1JRUkFJQU1nQVNBQUlBSnFNUUFBZmlBWmZDSVpOd01BSUFCQkFXb2hBQ0FCUWdHR0lRRU1BUXNMSUJSRkJFQkJBQ0VGREFNTElBUkIwQVZxSUFoQkFuUnFLQUlBSVFVTUFnc2dCaUFMSUFoQkFuUnFLQUlBTmdJQVFRRWdGQ0FJR3lFVUlBVkJBV29oQlF3QUN3QUxJQVJCMEIxcUpBQWdCUXNrQUNBQUlBRTJBZ0FnQUNBQktBSUVJZ0UyQWdRZ0FDQUJJQUpCQTNScU5nSUlJQUFMQ3dBZ0FFRUFRU1FRT3hvTFdnRUNmeU1BUVJCcklnSWtBQ0FDSUFFMkFnd2dBU0FBRUpnS0lnTk5CRUFnQUJEdEFTSUFJQU5CQVhaSkJFQWdBaUFBUVFGME5nSUlJQUpCQ0dvZ0FrRU1haEI5S0FJQUlRTUxJQUpCRUdva0FDQUREd3NRbEFFQUN3c0FJQUVnQWtFa0VEOGFDeVFBSUFBZ0FUWUNBQ0FBSUFFb0FnUWlBVFlDQkNBQUlBRWdBa0VrYkdvMkFnZ2dBQXYxQndJS2Z3TjhJQUJCQUNBRFFRQktHMFVFUUNBRVFRQTJBZ0FnQlVFQU5nSUFJQVpDZ0lDQWdJQ0FnUGkvZnpjREFFRi9Ed3NnQXlBRGJDRUpBa0FDUUFKQUFrQWdBVVVFUUNBSlFReHNFRG9pQzBVTkJDQUpRUU5zSVFsQkFDRUJBMEFnQVNBSlJrVUVRQ0FISUFFZ0Ftb3RBQUJCL3dGemFpRUhJQUZCQVdvaEFRd0JDd3NnQnlBSmJpRUtRUUFoQjBFQUlRRURRQ0FCSUFsR1JRUkFJQXNnQVVFQ2RHb2dBU0FDYWkwQUFFSC9BWE1nQ21zaUNEWUNBQ0FCUVFGcUlRRWdDQ0FJYkNBSGFpRUhEQUVMQ3lBSHQ1OGlFaUFEdDBTUksxRG1lcmI3UDZLalJBQUFBQUFBQUM1QVl3MENRUUFoQnlBQUtBSUFJZ0ZCQUNBQlFRQktHeUVPUVg4aENFRi9JUXBCZnlFTUEwQWdCeUFPUndSQUlBQW9BZ2doQVFKQUEwQUNRQ0FCSUF4QkFXb2lERUVDZENJUGFpZ0NBQTREQVFBQ0FBc0xJQUFvQWhBaEVFRUFJUU1EUUNBRFFRUkdEUUVnQXlBUGFpRU5RUUFoQWtFQUlRRURRQ0FCSUFsR1JRUkFJQUlnQVVFQ2RDSUNJQUFvQWd3Z0RVRUNkR29vQWdCcUtBSUFJQUlnQzJvb0FnQnNhaUVDSUFGQkFXb2hBUXdCQ3dzZ0FyY2dFQ0FOUVFOMGFpc0RBS01nRXFNaUV5QVJJQkVnRTJNaUFSc2hFU0FNSUFvZ0FSc2hDaUFESUFnZ0FSc2hDQ0FEUVFGcUlRTU1BQXNBQ3lBSFFRRnFJUWNNQVFzTERBRUxJQWxCQW5RUU9pSUxSUTBEUVFBaEFRTkFJQUVnQ1VaRkJFQWdCeUFCSUFKcUxRQUFRZjhCYzJvaEJ5QUJRUUZxSVFFTUFRc0xJQWNnQ1c0aENrRUFJUWRCQUNFQkEwQWdBU0FKUmtVRVFDQUxJQUZCQW5ScUlBRWdBbW90QUFCQi93RnpJQXBySWdnMkFnQWdBVUVCYWlFQklBZ2dDR3dnQjJvaEJ3d0JDd3NnQjdlZkloSWdBN2VqUkFBQUFBQUFBQzVBWXcwQ1FRQWhCeUFBS0FJQUlnRkJBQ0FCUVFCS0d5RU9RWDhoQ0VGL0lRcEJmeUVNQTBBZ0J5QU9Sd1JBSUFBb0FnZ2hBUUpBQTBBQ1FDQUJJQXhCQVdvaURFRUNkQ0lQYWlnQ0FBNERBUUFDQUFzTElBQW9BaGdoRUVFQUlRTURRQ0FEUVFSR0RRRWdBeUFQYWlFTlFRQWhBa0VBSVFFRFFDQUJJQWxHUlFSQUlBSWdBVUVDZENJQ0lBQW9BaFFnRFVFQ2RHb29BZ0JxS0FJQUlBSWdDMm9vQWdCc2FpRUNJQUZCQVdvaEFRd0JDd3NnQXJjZ0VDQU5RUU4wYWlzREFLTWdFcU1pRXlBUklCRWdFMk1pQVJzaEVTQU1JQW9nQVJzaENpQURJQWdnQVJzaENDQURRUUZxSVFNTUFBc0FDeUFIUVFGcUlRY01BUXNMQ3lBRklBZzJBZ0FnQkNBS05nSUFJQVlnRVRrREFDQUxFRE5CQUE4TElBUkJBRFlDQUNBRlFRQTJBZ0FnQmtLQWdJQ0FnSUNBK0w5L053TUFJQXNRTTBGK0R3c2dCRUVBTmdJQUlBVkJBRFlDQUNBR1FvQ0FnSUNBZ0lENHYzODNBd0FnQ3hBelFYNFBDMEVBUVFOQjV3dEJBQkE0UVFFUUFRQUxLd0VCZnlBQUlBRW9BZ0EyQWdBZ0FTZ0NBQ0VESUFBZ0FUWUNDQ0FBSUFNZ0FrRU1iR28yQWdRZ0FBdFFBUUYvSUFBUWp3SWdBQkEwSUFBb0FnQWdBQ2dDQkNBQlFRUnFJZ0lRbkFvZ0FDQUNFRWtnQUVFRWFpQUJRUWhxRUVrZ0FCQTBJQUVRUFJCSklBRWdBU2dDQkRZQ0FDQUFJQUFRVnhDUUF3dFpBUUovSXdCQkVHc2lBaVFBSUFJZ0FFRUlhaUFCRUxzRklnRW9BZ0FoQXdOQUlBRW9BZ1FnQTBjRVFDQUFLQUlRR2lBQktBSUFFSVVESUFFZ0FTZ0NBRUVNYWlJRE5nSUFEQUVMQ3lBQkVMWUJJQUpCRUdva0FBdUFBUUVDZnlNQVFSQnJJZ1FrQUNBRVFRQTJBZ3dnQUVFTWFpQUVRUXhxSUFNUXNRRWdBUVJBSUFBb0FoQWFJQUZCMWFyVnFnRkxCRUJCc05RQkVJOEJBQXNnQVVFTWJCQkxJUVVMSUFBZ0JUWUNBQ0FBSUFVZ0FrRU1iR29pQWpZQ0NDQUFJQUkyQWdRZ0FCQTlJQVVnQVVFTWJHbzJBZ0FnQkVFUWFpUUFJQUFMVkFFQ2Z5TUFRUkJySWdJa0FDQUNJQUFnQVJEWUFpSUJLQUlFSVFNRFFDQUJLQUlJSUFOSEJFQWdBQkEwR2lBQktBSUVFSVVESUFFZ0FTZ0NCRUVNYWlJRE5nSUVEQUVMQ3lBQkVIWWdBa0VRYWlRQUN5VUFBMEFnQVNBQUtBSUlSd1JBSUFBb0FoQWFJQUFnQUNnQ0NFRUVhellDQ0F3QkN3c0xIUUFnQUVILy8vLy9BMHNFUUVHdzFBRVFqd0VBQ3lBQVFRSjBFRXNMRWdBZ0FCQTlLQUlBSUFBb0FnQnJRUUoxQ3lzQUlBQW9BZ0FhSUFBb0FnQWdBQkRzQVVFQ2RHb2FJQUFvQWdBYUlBQW9BZ0FnQUJCRFFRSjBhaG9MS3dFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVFScklRSU1BUXNMSUFBZ0FUWUNCQXNNQUNBQUlBQW9BZ0FReEFVTEt3RUJmeUFBS0FJRUlRSURRQ0FCSUFKSEJFQWdBQkEwR2lBQ1FTUnJJUUlNQVFzTElBQWdBVFlDQkFzdUFRRi9JQUFvQWdRaEFnTkFJQUVnQWtjRVFDQUFFRFFhSUFKQkRHc2lBaERmQVF3QkN3c2dBQ0FCTmdJRUN6RUJBWDhnQUJDUEFpQUFLQUlBQkVBZ0FDQUFLQUlBRU1jRklBQVFOQm9nQUNnQ0FDRUJJQUFRdHdFYUlBRVFNd3NMTGdFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVF4cklnSVF5QVVNQVFzTElBQWdBVFlDQkFzdUFRRi9JQUFvQWdRaEFnTkFJQUVnQWtjRVFDQUFFRFFhSUFKQklHc2lBaER4QWd3QkN3c2dBQ0FCTmdJRUN6VUFJQUFvQWdBYUlBQW9BZ0FnQUJDSkFrRUZkR29hSUFBb0FnQWdBQkNrQVVFRmRHb2FJQUFvQWdBZ0FCQ0pBa0VGZEdvYUN3d0FJQUFnQUNnQ0FCQ0lBd3NKQUNBQUlBRVFoZzRMQ3dBZ0FFTUFBQUEva280TEVBQWdBQkNhQWtNQUFBQkFFSm9DbFFzc0FDQUFLQUlBR2lBQUtBSUFJQUFRN1FGQkpHeHFHaUFBS0FJQUdpQUFLQUlBSUFBUWhRRkJKR3hxR2dzTUFDQUFJQUFvQWdBUXhnVUwvUUlCQ1g4akFFRVFheUlQSkFBZ0JVRUFJQVZCQUVvYklSTURRQ0FSSUJOR1JRUkFJQXNnRUVFSWRHb2lEaUFFSUJGQnNQRUViR29pQlNnQ0FEWUNBQUpBSUFrZ0JTc0RDTFlnQlNzREVMWWdEMEVNYWlBUFFRaHFFTm9CUVFCSURRQWdEaUFQS2dJTXV6a0RPQ0FPUVVCcklBOHFBZ2k3T1FNQUlBVkJIR29nQlVIY3VBSnFJQVVvQWhnZ0JVR2M4UVJxSUFrZ0RrSElBR29nRGtHb0FXb2lCUkRQQ2tFQVNBMEFJQVlnQnlBSUlBQWdBU0FDSUFNZ0NTQUZJQW9nRGtFSWFpQU9RUlJxSWdVZ0RrRW9haUlTSUE1QkRHb2dEa0VZYWlJVUlBNUJNR29pRlNBTklBNUI4QUZxSUE1QitBRnFFSkVLUVFacUloWkJCazBFUUNBT0lCWkJBblJCM09VQWFpZ0NBRFlDN0FFTEFrQUNRQ0FJUVFGTkJFQWdEaUFPS0FJSU5nSUVEQUVMSUFoQkFrY05BU0FPSUE0b0FndzJBZ1FnRkNFRklCVWhFZ3NnRGlBRktBSUFOZ0lRSUE0Z0Vpc0RBRGtESUFzZ0VFRUJhaUVRQ3lBUlFRRnFJUkVNQVFzTElBd2dFRFlDQUNBUFFSQnFKQUJCQUFzMUFDQUFLQUlBR2lBQUtBSUFJQUFRN1FGQkpHeHFHaUFBS0FJQUlBQVFoUUZCSkd4cUdpQUFLQUlBSUFBUTdRRkJKR3hxR2dzVEFDQUFJQUUyQWxRZ0FFRThhaUFCRVBNREN5WUFJQUFvQWdBYUlBQW9BZ0FnQUJEZ0FXb2FJQUFvQWdBZ0FCRGdBV29hSUFBb0FnQWFDejhCQVg4akFFRVFheUlCSkFBZ0FCQTBHaUFCUVg4MkFnd2dBVUgvLy8vL0J6WUNDQ0FCUVF4cUlBRkJDR29Rd2dFb0FnQWhBQ0FCUVJCcUpBQWdBQXVRQXdFRmZ3SkFBa0FDUUFKQUlBQW9BaGdPQXdBQUFRSUxJQUFvQWl3aUFVRUFJQUZCQUVvYklRTkJBQ0VCQTBBZ0FTQURSZzBEQWtBZ0FDQUJRUWgwYWlJQ0lnUkJOR29vQWdCQkFFZ05BQ0FDS3dOUVJBQUFBQUFBQU9BL1kwRUJjdzBBSUFKQmZ6WUNPQ0FFUVg4MkFqUWdBa0VHTmdLY0Fnc2dBVUVCYWlFQkRBQUxBQXNnQUNnQ0xDSUJRUUFnQVVFQVNoc2hBMEVBSVFFRFFDQUJJQU5HRFFJQ1FDQUFJQUZCQ0hScUlnSWlCRUUwYWlnQ0FFRUFTQTBBSUFJckExQkVBQUFBQUFBQTREOWpRUUZ6RFFBZ0FrRi9OZ0k4SUFSQmZ6WUNOQ0FDUVFZMkFwd0NDeUFCUVFGcUlRRU1BQXNBQ3lBQUtBSXNJZ0ZCQUNBQlFRQktHeUVFUVFBaEFRTkFJQUVnQkVZTkFVRUFJUU1DUUNBQUlBRkJDSFJxSWdJaUJVRTRhaWdDQUVFQVNBMEFJQUlyQTFoRUFBQUFBQUFBNEQ5alFRRnpEUUFnQlVGL05nSTRRUUVoQXdzQ1FDQUNLQUk4UVFCSURRQWdBaXNEWUVRQUFBQUFBQURnUDJOQkFYTU5BQ0FDUVg4MkFqd2dBMFVOQUNBQ1FRWTJBcHdDQ3lBQlFRRnFJUUVNQUFzQUN3c2RBQ0FBUWRXcTFhb0JTd1JBUVlqNkFCQ1BBUUFMSUFCQkRHd1FTd3REQVFGL0l3QkJFR3NpQVNRQUlBQVFOQm9nQVVIVnF0V3FBVFlDRENBQlFmLy8vLzhITmdJSUlBRkJER29nQVVFSWFoRENBU2dDQUNFQUlBRkJFR29rQUNBQUN4WUFJQUVnQWlrQ0FEY0NBQ0FCSUFJb0FnZzJBZ2dMSFFBZ0FFSE1tYlBtQUVzRVFFR0krZ0FRandFQUN5QUFRUlJzRUVzTExBQWdBQ2dDQUJvZ0FDZ0NBQ0FBRU9FQlFSUnNhaG9nQUNnQ0FDQUFFT0VCUVJSc2Fob2dBQ2dDQUJvTFF3RUJmeU1BUVJCcklnRWtBQ0FBRURRYUlBRkJ6Sm16NWdBMkFnd2dBVUgvLy8vL0J6WUNDQ0FCUVF4cUlBRkJDR29Rd2dFb0FnQWhBQ0FCUVJCcUpBQWdBQXMxQVFGL0lBQWdBQ2dDQkJEdENpQUFLQUlBQkVBZ0FDZ0NFQm9nQUNnQ0FDRUJJQUFRUFNnQ0FDQUFLQUlBYXhvZ0FSQXpDd3RSQVFGL0lBQVF1d1lnQUJBMElBQW9BZ0FnQUNnQ0JDQUJRUVJxSWdJUThRb2dBQ0FDRUVrZ0FFRUVhaUFCUVFocUVFa2dBQkEwSUFFUVBSQkpJQUVnQVNnQ0JEWUNBQ0FBSUFBUWd3RVEzQVVMYWdFQ2Z5TUFRUkJySWdRa0FDQUVRUUEyQWd3Z0FFRU1haUFFUVF4cUlBTVFzUUVnQVFSQUlBQW9BaEFhSUFFUTJ3VWhCUXNnQUNBRk5nSUFJQUFnQlNBQ1FSUnNhaUlDTmdJSUlBQWdBallDQkNBQUVEMGdCU0FCUVJSc2FqWUNBQ0FFUVJCcUpBQWdBQXNyQVFGL0lBQW9BZ1FoQWdOQUlBRWdBa2NFUUNBQUVEUWFJQUpCREdzaEFnd0JDd3NnQUNBQk5nSUVDd3dBSUFBZ0FDZ0NBQkRoQlFzSEFDQUJJQUJyQzVRQkFRUi9Jd0JCRUdzaUJTUUFJQUVnQWhENkF5SUVRVzlOQkVBQ1FDQUVRUXBOQkVBZ0FDQUVFS29CSUFBaEF3d0JDeUFBSUFRUTJRSkJBV29pQmhCTElnTVFxUUVnQUNBR0VOQUJJQUFnQkJDYUFRc0RRQ0FCSUFKSEJFQWdBeUFCRUpBQklBTkJBV29oQXlBQlFRRnFJUUVNQVFzTElBVkJBRG9BRHlBRElBVkJEMm9Ra0FFZ0JVRVFhaVFBRHdzUTB3RUFDOFFHQWdoL0FYeEJ4Z0FoQ0VIQWhEMGhDU0FEUVFGR0JFQWdBVUVDYlNFQlFaQ2hEeUVKUVJFaENDQUFRUUp0SVFBTElBVkJBRFlDQUNBQ1FaQ0F5QUJxSVFvZ0FVRUNheUVNSUFCQkFtc2hEVUVBSVFFRFFBSkFJQUlvQWdnZ0FVd0VRQ0FGS0FJQUlRWU1BUXNDUUNBQ0lBRkJBblJxSWdjb0Fnd2lCaUFJU0NBR0lBbEtjZzBBSUFJZ0FVRUVkR29pQmtHTWdBaHFJZ3NvQWdCQkFVWU5BQ0FHUVpDQUNHb29BZ0FnRFVZTkFDQUdRWlNBQ0dvb0FnQkJBVVlOQUNBR1FaaUFDR29vQWdBZ0RFWU5BQ0FDS0FJQUlBQWdDaUFCUVFGcUlBc2dCQ0FGS0FJQVFiRHhCR3hxRVBNS1FRQklEUUFnQnlnQ0RDQUVJQVVvQWdCQnNQRUViR29ROGdwQkFFZ05BQ0FFSUFVb0FnQkJzUEVFYkdvZ0J5Z0NERFlDQUNBRUlBVW9BZ0FpQjBHdzhRUnNhaUlMSUFaQmtJQW9haXNEQURrRENDQUxJQVpCbUlBb2Fpc0RBRGtERUNBRklBZEJBV29pQnpZQ0FFRThJUVlnQjBFOFJnMEJDeUFCUVFGcUlRRU1BUXNMUVFBaEFrRUFJUUVEUUNBQklBWk9CRUFEUUNBQ0lBWklCRUFnQkNBQ0lnRkJzUEVFYkdvb0FnQkZCRUFEUUNBR0lBRkJBV29pQUVvRVFDQUVJQUZCc1BFRWJHb2dCQ0FBUWJEeEJHeHFRYkR4QkJBL0dpQUZLQUlBSVFZZ0FDRUJEQUVMQ3lBRklBWkJBV3NpQmpZQ0FBc2dBa0VCYWlFQ0RBRUxDd0pBSUFOQkFVY05BRUVBSVFBRFFDQUFJQVpPRFFFZ0JDQUVLQUlBUVFKME5nSUFJQVFnQkNzRENDSU9JQTZnT1FNSUlBUWdCQ3NERUNJT0lBNmdPUU1RSUFRb0FoZ2hBa0VBSVFFRFFDQUJJQUpJQkVBZ0JDQUJRUUowYWlJRElnWWdCaWdDSEVFQmREWUNIQ0FEUWR5NEFtb2lBeUFES0FJQVFRRjBOZ0lBSUFGQkFXb2hBUXdCQ3dzZ0FFRUJhaUVBSUFSQnNQRUVhaUVFSUFVb0FnQWhCZ3dBQ3dBTFFRQVBDeUFFSUFGQnNQRUViR29pQ0NFSklBRkJBV29pQUNFQkEwQWdBU0FHVGdSQUlBQWhBUXdDQlNBSUt3TUlJQVFnQVVHdzhRUnNhaUlHS3dNSW9TSU9JQTZpSUFrckF4QWdCaXNERUtFaURpQU9vcUFoRGdKQUlBZ29BZ0FpQnlBR0tBSUFJZ3BLQkVBZ0RpQUhRUVJ0dDJOQkFYTU5BU0FHUVFBMkFnQU1BUXNnRGlBS1FRUnR0Mk5CQVhNTkFDQUlRUUEyQWdBTElBRkJBV29oQVNBRktBSUFJUVlNQVFzQUN3QUxBQXMxQVFGL0l3QkJFR3NpQWlRQUlBSkJDR29nQUJCS0lBSkJDR29RbVFFZ0FSQ0dBU0VBSUFKQkNHb1FSQ0FDUVJCcUpBQWdBQXNQQUNBQUtBSU1HaUFBUVFBMkFnd0xId0VCZnlNQVFSQnJJZ01rQUNBQUlBRWdBaENqQ3lBRFFSQnFKQUFnQUFzeUFBSkFRWDhnQUNnQ1RCQzRBVVVFUUNBQUtBSk1JUUFNQVFzZ0FDQUFRU0FRNWdVaUFEWUNUQXNnQUVFWWRFRVlkUXN0QVFGL0lBQWhBVUVBSVFBRFFDQUFRUU5IQkVBZ0FTQUFRUUowYWtFQU5nSUFJQUJCQVdvaEFBd0JDd3NMQ3dBZ0FFSEVrQU0yQWdBTERRQWdBQ2dDQUNBQktBSUFTQXNPQUVFQUlBQWdBRUYvRUxnQkd3c1FBQ0FBUW44M0F3Z2dBRUlBTndNQUM1VUdBZ1IvQTM0akFFR0FBV3NpQlNRQUFrQUNRQUpBSUFNZ0JFSUFRZ0FRbFFKRkRRQWdBeUFFRUlJTElRY2dBa0l3aUtjaUNFSC8vd0Z4SWdaQi8vOEJSZzBBSUFjTkFRc2dCVUVRYWlBQklBSWdBeUFFRUZ3Z0JTQUZLUU1RSWdFZ0JTa0RHQ0lDSUFFZ0FoRDhCaUFGS1FNSUlRSWdCU2tEQUNFRURBRUxJQUVnQWtMLy8vLy8vLzgvZ3lBR3JVSXdob1FpQ2lBRElBUkMvLy8vLy8vL1A0TWdCRUl3aUtkQi8vOEJjU0lIclVJd2hvUWlDUkNWQWtFQVRBUkFJQUVnQ2lBRElBa1FsUUlFUUNBQklRUU1BZ3NnQlVId0FHb2dBU0FDUWdCQ0FCQmNJQVVwQTNnaEFpQUZLUU53SVFRTUFRc2dCZ1IrSUFFRklBVkI0QUJxSUFFZ0NrSUFRb0NBZ0lDQWdNQzd3QUFRWENBRktRTm9JZ3BDTUlpblFmZ0FheUVHSUFVcEEyQUxJUVFnQjBVRVFDQUZRZEFBYWlBRElBbENBRUtBZ0lDQWdJREF1OEFBRUZ3Z0JTa0RXQ0lKUWpDSXAwSDRBR3NoQnlBRktRTlFJUU1MSUFsQy8vLy8vLy8vUDROQ2dJQ0FnSUNBd0FDRUlRa2dDa0wvLy8vLy8vOC9nMEtBZ0lDQWdJREFBSVFoQ2lBR0lBZEtCRUFEUUFKK0lBb2dDWDBnQXlBRVZxMTlJZ3RDQUZrRVFDQUxJQVFnQTMwaUJJUlFCRUFnQlVFZ2FpQUJJQUpDQUVJQUVGd2dCU2tES0NFQ0lBVXBBeUFoQkF3RkN5QUxRZ0dHSUFSQ1A0aUVEQUVMSUFwQ0FZWWdCRUkvaUlRTElRb2dCRUlCaGlFRUlBWkJBV3NpQmlBSFNnMEFDeUFISVFZTEFrQWdDaUFKZlNBRElBUldyWDBpQ1VJQVV3UkFJQW9oQ1F3QkN5QUpJQVFnQTMwaUJJUkNBRklOQUNBRlFUQnFJQUVnQWtJQVFnQVFYQ0FGS1FNNElRSWdCU2tETUNFRURBRUxJQWxDLy8vLy8vLy9QMWdFUUFOQUlBUkNQNGdoQVNBR1FRRnJJUVlnQkVJQmhpRUVJQUVnQ1VJQmhvUWlDVUtBZ0lDQWdJREFBRlFOQUFzTElBaEJnSUFDY1NFSElBWkJBRXdFUUNBRlFVQnJJQVFnQ1VMLy8vLy8vLzgvZ3lBR1FmZ0FhaUFIY3ExQ01JYUVRZ0JDZ0lDQWdJQ0F3TU0vRUZ3Z0JTa0RTQ0VDSUFVcEEwQWhCQXdCQ3lBSlF2Ly8vLy8vL3orRElBWWdCM0t0UWpDR2hDRUNDeUFBSUFRM0F3QWdBQ0FDTndNSUlBVkJnQUZxSkFBTGl3d0JCbjhnQUNBQmFpRUZBa0FDUUNBQUtBSUVJZ0pCQVhFTkFDQUNRUU54UlEwQklBQW9BZ0FpQWlBQmFpRUJBa0FnQUNBQ2F5SUFRYVN0QkNnQ0FFY0VRQ0FDUWY4QlRRUkFJQUFvQWdnaUJDQUNRUU4ySWdKQkEzUkJ1SzBFYWtZYUlBQW9BZ3dpQXlBRVJ3MENRWkN0QkVHUXJRUW9BZ0JCZmlBQ2QzRTJBZ0FNQXdzZ0FDZ0NHQ0VHQWtBZ0FDQUFLQUlNSWdOSEJFQWdBQ2dDQ0NJQ1FhQ3RCQ2dDQUVrYUlBSWdBellDRENBRElBSTJBZ2dNQVFzQ1FDQUFRUlJxSWdJb0FnQWlCQTBBSUFCQkVHb2lBaWdDQUNJRURRQkJBQ0VEREFFTEEwQWdBaUVISUFRaUEwRVVhaUlDS0FJQUlnUU5BQ0FEUVJCcUlRSWdBeWdDRUNJRURRQUxJQWRCQURZQ0FBc2dCa1VOQWdKQUlBQWdBQ2dDSENJRVFRSjBRY0N2QkdvaUFpZ0NBRVlFUUNBQ0lBTTJBZ0FnQXcwQlFaU3RCRUdVclFRb0FnQkJmaUFFZDNFMkFnQU1CQXNnQmtFUVFSUWdCaWdDRUNBQVJodHFJQU0yQWdBZ0EwVU5Bd3NnQXlBR05nSVlJQUFvQWhBaUFnUkFJQU1nQWpZQ0VDQUNJQU0yQWhnTElBQW9BaFFpQWtVTkFpQURJQUkyQWhRZ0FpQUROZ0lZREFJTElBVW9BZ1FpQWtFRGNVRURSdzBCUVppdEJDQUJOZ0lBSUFVZ0FrRitjVFlDQkNBQUlBRkJBWEkyQWdRZ0JTQUJOZ0lBRHdzZ0JDQUROZ0lNSUFNZ0JEWUNDQXNDUUNBRktBSUVJZ0pCQW5GRkJFQWdCVUdvclFRb0FnQkdCRUJCcUswRUlBQTJBZ0JCbkswRVFaeXRCQ2dDQUNBQmFpSUJOZ0lBSUFBZ0FVRUJjallDQkNBQVFhU3RCQ2dDQUVjTkEwR1lyUVJCQURZQ0FFR2tyUVJCQURZQ0FBOExJQVZCcEswRUtBSUFSZ1JBUWFTdEJDQUFOZ0lBUVppdEJFR1lyUVFvQWdBZ0FXb2lBVFlDQUNBQUlBRkJBWEkyQWdRZ0FDQUJhaUFCTmdJQUR3c2dBa0Y0Y1NBQmFpRUJBa0FnQWtIL0FVMEVRQ0FGS0FJSUlnUWdBa0VEZGlJQ1FRTjBRYml0QkdwR0dpQUVJQVVvQWd3aUEwWUVRRUdRclFSQmtLMEVLQUlBUVg0Z0FuZHhOZ0lBREFJTElBUWdBellDRENBRElBUTJBZ2dNQVFzZ0JTZ0NHQ0VHQWtBZ0JTQUZLQUlNSWdOSEJFQWdCU2dDQ0NJQ1FhQ3RCQ2dDQUVrYUlBSWdBellDRENBRElBSTJBZ2dNQVFzQ1FDQUZRUlJxSWdRb0FnQWlBZzBBSUFWQkVHb2lCQ2dDQUNJQ0RRQkJBQ0VEREFFTEEwQWdCQ0VISUFJaUEwRVVhaUlFS0FJQUlnSU5BQ0FEUVJCcUlRUWdBeWdDRUNJQ0RRQUxJQWRCQURZQ0FBc2dCa1VOQUFKQUlBVWdCU2dDSENJRVFRSjBRY0N2QkdvaUFpZ0NBRVlFUUNBQ0lBTTJBZ0FnQXcwQlFaU3RCRUdVclFRb0FnQkJmaUFFZDNFMkFnQU1BZ3NnQmtFUVFSUWdCaWdDRUNBRlJodHFJQU0yQWdBZ0EwVU5BUXNnQXlBR05nSVlJQVVvQWhBaUFnUkFJQU1nQWpZQ0VDQUNJQU0yQWhnTElBVW9BaFFpQWtVTkFDQURJQUkyQWhRZ0FpQUROZ0lZQ3lBQUlBRkJBWEkyQWdRZ0FDQUJhaUFCTmdJQUlBQkJwSzBFS0FJQVJ3MEJRWml0QkNBQk5nSUFEd3NnQlNBQ1FYNXhOZ0lFSUFBZ0FVRUJjallDQkNBQUlBRnFJQUUyQWdBTElBRkIvd0ZOQkVBZ0FVRURkaUlDUVFOMFFiaXRCR29oQVFKL1FaQ3RCQ2dDQUNJRFFRRWdBblFpQW5GRkJFQkJrSzBFSUFJZ0EzSTJBZ0FnQVF3QkN5QUJLQUlJQ3lFQ0lBRWdBRFlDQ0NBQ0lBQTJBZ3dnQUNBQk5nSU1JQUFnQWpZQ0NBOExRUjhoQWlBQVFnQTNBaEFnQVVILy8vOEhUUVJBSUFGQkNIWWlBaUFDUVlEK1AycEJFSFpCQ0hFaUJIUWlBaUFDUVlEZ0gycEJFSFpCQkhFaUEzUWlBaUFDUVlDQUQycEJFSFpCQW5FaUFuUkJEM1lnQXlBRWNpQUNjbXNpQWtFQmRDQUJJQUpCRldwMlFRRnhja0VjYWlFQ0N5QUFJQUkyQWh3Z0FrRUNkRUhBcndScUlRY0NRQUpBUVpTdEJDZ0NBQ0lFUVFFZ0FuUWlBM0ZGQkVCQmxLMEVJQU1nQkhJMkFnQWdCeUFBTmdJQUlBQWdCellDR0F3QkN5QUJRUUJCR1NBQ1FRRjJheUFDUVI5R0czUWhBaUFIS0FJQUlRTURRQ0FESWdRb0FnUkJlSEVnQVVZTkFpQUNRUjEySVFNZ0FrRUJkQ0VDSUFRZ0EwRUVjV29pQjBFUWFpZ0NBQ0lERFFBTElBY2dBRFlDRUNBQUlBUTJBaGdMSUFBZ0FEWUNEQ0FBSUFBMkFnZ1BDeUFFS0FJSUlnRWdBRFlDRENBRUlBQTJBZ2dnQUVFQU5nSVlJQUFnQkRZQ0RDQUFJQUUyQWdnTEMwNEFBa0FnQVVVTkFDQUJRYVRwQTBHazZ3TVFzZ0VpQVVVTkFDQUJLQUlJSUFBb0FnaEJmM054RFFBZ0FDZ0NEQ0FCS0FJTVFRQVFma1VOQUNBQUtBSVFJQUVvQWhCQkFCQitEd3RCQUF0U0FRRi9JQUFvQWdRaEJDQUFLQUlBSWdBZ0FRSi9RUUFnQWtVTkFCb2dCRUVJZFNJQklBUkJBWEZGRFFBYUlBSW9BZ0FnQVdvb0FnQUxJQUpxSUFOQkFpQUVRUUp4R3lBQUtBSUFLQUljRVFZQUN5TUFJQUJCQURZQ0RDQUFJQUUyQWdRZ0FDQUJOZ0lBSUFBZ0FVRUJhallDQ0NBQUM3c0JBUU4vSXdCQkVHc2lCU1FBSUFKQjcvLy8vd01nQVd0TkJFQWdBQkErSVFZQ2Z5QUJRZWYvLy84QlNRUkFJQVVnQVVFQmREWUNDQ0FGSUFFZ0FtbzJBZ3dnQlVFTWFpQUZRUWhxRUgwb0FnQVEzUUlNQVF0Qjd2Ly8vd01MUVFGcUlnY1EzQUloQWlBRUJFQWdBaUFHSUFRUTVnRUxJQU1nQkdzaUF3UkFJQVJCQW5RaUJDQUNhaUFFSUFacUlBTVE1Z0VMSUFGQkFVY0VRQ0FHRURNTElBQWdBaENwQVNBQUlBY1EwQUVnQlVFUWFpUUFEd3NRMHdFQUM0WUNBUU4vSXdCQkVHc2lDQ1FBSUFJZ0FVRi9jMEh2Ly8vL0EycE5CRUFnQUJBK0lRa0NmeUFCUWVmLy8vOEJTUVJBSUFnZ0FVRUJkRFlDQ0NBSUlBRWdBbW8yQWd3Z0NFRU1haUFJUVFocUVIMG9BZ0FRM1FJTUFRdEI3di8vL3dNTFFRRnFJZ29RM0FJaEFpQUVCRUFnQWlBSklBUVE1Z0VMSUFZRVFDQUVRUUowSUFKcUlBY2dCaERtQVFzZ0F5QUZheUlESUFScklnY0VRQ0FFUVFKMElnUWdBbW9nQmtFQ2RHb2dCQ0FKYWlBRlFRSjBhaUFIRU9ZQkN5QUJRUUZIQkVBZ0NSQXpDeUFBSUFJUXFRRWdBQ0FLRU5BQklBQWdBeUFHYWlJQUVKb0JJQWhCQURZQ0JDQUNJQUJCQW5ScUlBaEJCR29RZ2dFZ0NFRVFhaVFBRHdzUTB3RUFDeE1BSUFFRVFDQUFJQUlRd3dFZ0FSQTdHZ3NMN0FFQkEzOGpBRUVRYXlJSUpBQWdBaUFCUVg5elFSRnJUUVJBSUFBUVBpRUpBbjhnQVVIbi8vLy9CMGtFUUNBSUlBRkJBWFEyQWdnZ0NDQUJJQUpxTmdJTUlBaEJER29nQ0VFSWFoQjlLQUlBRU5rQ0RBRUxRVzRMUVFGcUlnb1FTeUVDSUFRRVFDQUNJQWtnQkJEbkFRc2dCZ1JBSUFJZ0JHb2dCeUFHRU9jQkN5QURJQVZySWdNZ0JHc2lCd1JBSUFJZ0JHb2dCbW9nQkNBSmFpQUZhaUFIRU9jQkN5QUJRUXBIQkVBZ0NSQXpDeUFBSUFJUXFRRWdBQ0FLRU5BQklBQWdBeUFHYWlJQUVKb0JJQWhCQURvQUJ5QUFJQUpxSUFoQkIyb1FrQUVnQ0VFUWFpUUFEd3NRMHdFQUMzSUJBMzhqQUVFUWF5SUVKQUFDUUNBQ0lBQVFUeUlEVFFSQUlBQVFQaUlESVFVZ0FnUkFJQVVnQVNBQ0VOb0NDeUFFUVFBNkFBOGdBaUFEYWlBRVFROXFFSkFCSUFBZ0FoQ1NBZ3dCQ3lBQUlBTWdBaUFEYXlBQUVEY2lBMEVBSUFNZ0FpQUJFUGNGQ3lBRVFSQnFKQUFnQUFzREFBQUxEUUFnQUNBQ1NTQUFJQUZQY1FzSkFDQUFFRlEyQWdBTExBRUJmeUFBS0FJRUlRSURRQ0FCSUFKSEJFQWdBQkNSQWhvZ0FrRUVheUVDREFFTEN5QUFJQUUyQWdRTEdnQUNRQ0FBSUFGR0JFQWdBRUVBT2dCd0RBRUxJQUVRTXdzTE9BQkJrS3NFS0FJQUdrR1Fxd1FvQWdCQmtLc0VFSkFDUVFKMGFocEJrS3NFS0FJQVFaQ3JCQkNRQWtFQ2RHb2FRWkNyQkNnQ0FCb0xDUUFnQUNBQkVMY0xDMFlCQW44akFFRVFheUlBSkFCQmtLc0VFSkVDR2lBQVFmLy8vLzhETmdJTUlBQkIvLy8vL3djMkFnZ2dBRUVNYWlBQVFRaHFFTUlCS0FJQUlRRWdBRUVRYWlRQUlBRUxDUUFnQUJDR0JCQXpDeWNBSUFBZ0JUb0FFQ0FBSUFRNEFnd2dBQ0FET0FJSUlBQWdBamdDQkNBQUlBRTRBZ0FnQUFzVkFDQUFRZEM0QXpZQ0FDQUFRUkJxRURrYUlBQUxGUUFnQUVHb3VBTTJBZ0FnQUVFTWFoQTVHaUFBQ3l3QkFYOGdBQkNQQWlBQUtBSUFCRUFnQUJEaUJTQUFFRFFhSUFBb0FnQWhBU0FBRUxjQkdpQUJFRE1MQytFSUFnMS9BbjBqQUVIZ0FHc2lCaVFBQWtBQ1FBSkFJQUJCQUNBQkcwVUVRRUVBUVFOQjBNUUFRUUFRT0F3QkN5QUJLQUlFUlFSQVFRQkJBMEdheXdCQkFCQTREQUVMSUFBb0Fod1FNd0pBSUFFb0FnUWlBd1JBSUFBZ0EwR0VBV3dRT2lJQ05nSWNJQUpGRFFSQkFDRUNBMEFnQWlBRFRnMENJQUpCaEFGc0lnTWdBQ2dDSEdvZ0FTZ0NBQ0FEYWtHRUFSQS9HaUFDUVFGcUlRSWdBU2dDQkNFRERBQUxBQXRCQUNFRElBQkJBRFlDSEFzZ0FDQUROZ0lnSUFBb0FpUUVRRUVBSVFJRFFDQUFLQUlvSUFKS0JFQWdBQ2dDSkNBQ1FReHNhaWdDQUJBeklBSkJBV29oQWd3QkN3c2dBQ2dDSkJBekN3SkFJQUVvQWd3aUFnUkFJQUFnQWtFTWJCQTZJZ00yQWlRZ0EwVU5CQU5BSUFJZ0NFd05BaUFJUVF4c0lnUWdBQ2dDSkdvaUNTQUJLQUlJSWdNZ0JHb2lCU2dDQ0RZQ0NDQUpJQVVvQWdRMkFnUUNRQUpBSUFVb0FnUWlCd1JBSUFrZ0IwRU1iQkE2SWdVMkFnQkJBQ0VDSUFWRkRRZ0RRQ0FDSUFkT0RRSWdBa0VNYkNJRklBQW9BaVFnQkdvb0FnQnFJZ2NnQXlBRWFpZ0NBQ0FGYWlJREtRSUFOd0lBSUFjZ0F5Z0NDRFlDQ0NBQ1FRRnFJUUlnQVNnQ0NDSURJQVJxS0FJRUlRY01BQXNBQ3lBRlFRQTJBZ0FNQVFzZ0FTZ0NEQ0VDQ3lBSVFRRnFJUWdNQUFzQUMwRUFJUUlnQUVFQU5nSWtDeUFBSUFJMkFpZ2dBQ2dDTkNJQ0JFQWdBaEF6SUFCQ0FEY0NOQXNDUUFKQUlBRW9BZ3dpQVVFQlNBMEFJQUFnQVRZQ09DQUFJQUZCeEFCc0VEb2lBellDTkNBRFJRMEJRUUFoQWdOQUlBRWdBa1lOQVNBRElBSkJ4QUJzYWtFQU5nSkFJQUpCQVdvaEFnd0FDd0FMSUFBb0FpQWlBVVVFUUVFQUlRa01Bd3RCQUNFSklBRkJBQ0FCUVFCS0d5RU9RUUFoQlVFQUlRZ0RRRUVBSVFFZ0NDQUFLQUlvVGcwREEwQWdDRUVNYkNJTUlBQW9BaVJxS0FJRUlBRk1CRUFnQ0VFQmFpRUlEQUlMSUFaQjBBQnFFRTRoQnlBR1FVQnJFRTRoQ2tFQUlRTWdCa0V3YWhCT0lRc0RRQ0FESUE1R0JFQWdCaUFIRUlNQk5nSUlJQVlnQVRZQ0JDQUdJQWcyQWdCQkFFRUJRWS9WQUNBR0VEZ2dBQ0FGUVFKMGFpQUFLQUlrSUF4cUlnSW9BZ2cyQWp3Z0FDZ0NBQ0FISUFzZ0NpQUNLQUlBSUFGQkRHeHFJZ0lvQWdBZ0FpZ0NCQ0FGRU9ZSklBc1F2Z1lnQ2hDRkJpQUhFSkVFSUFWQkFXb2hCU0FCUVFGcUlRRU1BZ3NDUUNBRFFZUUJiQ0lOSUFBb0FoeHFJZ1FvQW9BQklBQW9BaVFnREdvaUFpZ0NBQ0FCUVF4c2FpZ0NDRWNOQUNBRUtBSjhJQUlvQWdoSERRQkJBQ0VDSUFjZ0JrRVlhaUFFS2dJQUlBUXFBZ1FnQkNvQ2NDQUVLZ0owSUFRb0FuaEJBRWNRZ2dZUTJBc2dDZ0ovSUFBb0Fod2dEV29pQkNvQ0NDRVBJQVFxQWd3aEVDQUdRUmhxSWdSREFBQUFBRGdDQ0NBRUlCQTRBZ1FnQkNBUE9BSUFJQVFMRU00TEEwQWdBa0hnQUVZTkFTQUxJQUFvQWh3Z0RXb2dBbXBCRUdvUXd3c2dBa0VCYWlFQ0RBQUxBQXNnQTBFQmFpRUREQUFMQUFzQUN3QUxEQUlMUVg4aENRc2dCa0hnQUdva0FDQUpEd3RCQUVFRFFZSFJBRUVBRURoQkFSQUJBQXRDQVFKL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENBQlFRaHFJQUZCREdvUXhRRWhBRUVFUVFGQmpQTURLQUlBS0FJQUd5RUNJQUFReEFFZ0FVRVFhaVFBSUFJTFBnRUJmeU1BUVJCcklnVWtBQ0FGSUFRMkFnd2dCVUVJYWlBRlFReHFFTVVCSVFRZ0FDQUJJQUlnQXhDMEF5RUFJQVFReEFFZ0JVRVFhaVFBSUFBTEVnQWdCQ0FDTmdJQUlBY2dCVFlDQUVFREN4SUFJQUFRNndVZ0FFR0FrUU0yQWdBZ0FBc29BUUYvSUFCQnhMY0ROZ0lBQWtBZ0FDZ0NDQ0lCUlEwQUlBQXRBQXhGRFFBZ0FSQXpDeUFBQ3pRQUlBQW9BZ0FhSUFBb0FnQWdBQkNRQWtFQ2RHb2FJQUFvQWdBZ0FCQkRRUUowYWhvZ0FDZ0NBQ0FBRUpBQ1FRSjBhaG9MY2dFQ2Z5QUFRYkMzQXpZQ0FDQUFRUkJxSVFFRFFDQUJFRU1nQWtzRVFDQUJJQUlRUENnQ0FBUkFJQUVnQWhBOEtBSUFFTWtDR2dzZ0FrRUJhaUVDREFFTEN5QUFRYkFCYWhBNUdpQUJFSXdHSUFFb0FnQUVRQ0FCRUpBR0lBRVFrUUlnQVNnQ0FDQUJFSkFDRVAwRkN5QUFDeXNCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUU5Cb2dBa0VCYXlFQ0RBRUxDeUFBSUFFMkFnUUxLd0FnQUNnQ0FCb2dBQ2dDQUNBQUVKQUNRUUowYWhvZ0FDZ0NBQm9nQUNnQ0FDQUFFRU5CQW5ScUdnc01BQ0FBSUFBb0FnQVEvQVVMV1FFQ2Z5TUFRUkJySWdFa0FDQUJRWkNyQkNBQUVLMENJZ0FvQWdRaEFnTkFJQUFvQWdnZ0FrY0VRRUdRcXdRUWtRSWFJQUFvQWdRUTRBTWdBQ0FBS0FJRVFRUnFJZ0kyQWdRTUFRc0xJQUFRZGlBQlFSQnFKQUFMSUFBZ0FFSDR0d00yQWdBZ0FDZ0NDQkJVUndSQUlBQW9BZ2dRMGdZTElBQUxEd0FnQUNnQ0FDQUJMQUFBRUpZREN6OEJBWDhqQUVFUWF5SURKQUFnQXlBQU5nSUlBMEFnQVNBQ1NRUkFJQU5CQ0dvZ0FSQ1RCaUFCUVFGcUlRRU1BUXNMSUFNb0FnZ2FJQU5CRUdva0FBc01BQ0FBSUFBb0FnQVFqZ1lMRlFCQmZ3Si9JQUVRUGhwQi8vLy8vd2NMUVFFYkMrd0ZBUXAvSXdCQkVHc2lGQ1FBSUFJZ0FEWUNBQ0FEUVlBRWNTRVdBMEFnRlVFRVJnUkFJQTBRTjBFQlN3UkFJQlFnRFJDc0FUWUNDQ0FDSUJSQkNHcEJBUkNjQmlBTkVQa0JJQUlvQWdBUXlBSTJBZ0FMSUFOQnNBRnhJZ05CRUVjRVFDQUJJQU5CSUVZRWZ5QUNLQUlBQlNBQUN6WUNBQXNnRkVFUWFpUUFCUUpBQWtBQ1FBSkFBa0FDUUNBSUlCVnFMQUFBRGdVQUFRTUNCQVVMSUFFZ0FpZ0NBRFlDQUF3RUN5QUJJQUlvQWdBMkFnQWdCa0VnRUtVQklROGdBaUFDS0FJQUloQkJCR28yQWdBZ0VDQVBOZ0lBREFNTElBMFF2d0VOQWlBTlFRQVFvUU1vQWdBaER5QUNJQUlvQWdBaUVFRUVhallDQUNBUUlBODJBZ0FNQWdzZ0RCQy9BU0FXUlhJTkFTQUNJQXdRckFFZ0RCRDVBU0FDS0FJQUVNZ0NOZ0lBREFFTElBSW9BZ0FoRnlBRVFRUnFJQVFnQnhzaUJDRVJBMEFDUUNBRklCRk5EUUFnQmtHQUVDQVJLQUlBRUwwQlJRMEFJQkZCQkdvaEVRd0JDd3NnRGlJUFFRRk9CRUFEUUNBUFFRRklJaEFnQkNBUlQzSkZCRUFnRVVFRWF5SVJLQUlBSVJBZ0FpQUNLQUlBSWhKQkJHbzJBZ0FnRWlBUU5nSUFJQTlCQVdzaER3d0JDd3NnRUFSL1FRQUZJQVpCTUJDbEFRc2hFZ05BSUFJZ0FpZ0NBQ0lRUVFScU5nSUFJQTlCQVU0RVFDQVFJQkkyQWdBZ0QwRUJheUVQREFFTEN5QVFJQWsyQWdBTEFrQWdCQ0FSUmdSQUlBWkJNQkNsQVNFUElBSWdBaWdDQUNJUVFRUnFJaEUyQWdBZ0VDQVBOZ0lBREFFTEFuOUJmeUFMRUw4QkRRQWFJQXRCQUJCQUxBQUFDeUVRUVFBaEQwRUFJUk1EUUNBRUlCRkhCRUFDUUNBUElCQkhCRUFnRHlFU0RBRUxJQUlnQWlnQ0FDSVFRUVJxTmdJQUlCQWdDallDQUVFQUlSSWdDeEEzSUJOQkFXb2lFMDBFUUNBUElSQU1BUXNnQ3lBVEVFQXRBQUJCL3dCR0JFQkJmeUVRREFFTElBc2dFeEJBTEFBQUlSQUxJQkZCQkdzaUVTZ0NBQ0VQSUFJZ0FpZ0NBQ0lZUVFScU5nSUFJQmdnRHpZQ0FDQVNRUUZxSVE4TUFRc0xJQUlvQWdBaEVRc2dGeUFSRUowREN5QVZRUUZxSVJVTUFRc0xDN3NDQVFGL0l3QkJFR3NpQ2lRQUlBa0NmeUFBQkVBZ0FoQ2VCaUVBQWtBZ0FRUkFJQW9nQUJEMkFTQURJQW9vQWdBMkFBQWdDaUFBRVBVQkRBRUxJQW9nQUJDWkF5QURJQW9vQWdBMkFBQWdDaUFBRUxzQkN5QUlJQW9RMUFFZ0NoQTVHaUFFSUFBUXVnRTJBZ0FnQlNBQUVKNEJOZ0lBSUFvZ0FCQ2RBU0FHSUFvUWlnRWdDaEE1R2lBS0lBQVF2QUVnQnlBS0VOUUJJQW9RT1JvZ0FCRDBBUXdCQ3lBQ0VKMEdJUUFDUUNBQkJFQWdDaUFBRVBZQklBTWdDaWdDQURZQUFDQUtJQUFROVFFTUFRc2dDaUFBRUprRElBTWdDaWdDQURZQUFDQUtJQUFRdXdFTElBZ2dDaERVQVNBS0VEa2FJQVFnQUJDNkFUWUNBQ0FGSUFBUW5nRTJBZ0FnQ2lBQUVKMEJJQVlnQ2hDS0FTQUtFRGthSUFvZ0FCQzhBU0FISUFvUTFBRWdDaEE1R2lBQUVQUUJDellDQUNBS1FSQnFKQUFMNWdVQkNuOGpBRUVRYXlJVUpBQWdBaUFBTmdJQUlBTkJnQVJ4SVJZRFFDQVZRUVJHQkVBZ0RSQTNRUUZMQkVBZ0ZDQU5FS3dCTmdJSUlBSWdGRUVJYWtFQkVLSUdJQTBRK3dFZ0FpZ0NBQkRJQWpZQ0FBc2dBMEd3QVhFaUEwRVFSd1JBSUFFZ0EwRWdSZ1IvSUFJb0FnQUZJQUFMTmdJQUN5QVVRUkJxSkFBUEN3SkFBa0FDUUFKQUFrQUNRQ0FJSUJWcUxBQUFEZ1VBQVFNQ0JBVUxJQUVnQWlnQ0FEWUNBQXdFQ3lBQklBSW9BZ0EyQWdBZ0JrRWdFSVlCSVE4Z0FpQUNLQUlBSWhCQkFXbzJBZ0FnRUNBUE9nQUFEQU1MSUEwUXZ3RU5BaUFOUVFBUVFDMEFBQ0VQSUFJZ0FpZ0NBQ0lRUVFGcU5nSUFJQkFnRHpvQUFBd0NDeUFNRUw4QklCWkZjZzBCSUFJZ0RCQ3NBU0FNRVBzQklBSW9BZ0FReUFJMkFnQU1BUXNnQWlnQ0FDRVhJQVJCQVdvZ0JDQUhHeUlFSVJFRFFBSkFJQVVnRVUwTkFDQUdRWUFRSUJFc0FBQVF2Z0ZGRFFBZ0VVRUJhaUVSREFFTEN5QU9JZzlCQVU0RVFBTkFJQTlCQVVnaUVDQUVJQkZQY2tVRVFDQVJRUUZySWhFdEFBQWhFQ0FDSUFJb0FnQWlFa0VCYWpZQ0FDQVNJQkE2QUFBZ0QwRUJheUVQREFFTEN5QVFCSDlCQUFVZ0JrRXdFSVlCQ3lFU0EwQWdBaUFDS0FJQUloQkJBV28yQWdBZ0QwRUJUZ1JBSUJBZ0Vqb0FBQ0FQUVFGcklROE1BUXNMSUJBZ0NUb0FBQXNDUUNBRUlCRkdCRUFnQmtFd0VJWUJJUThnQWlBQ0tBSUFJaEJCQVdvMkFnQWdFQ0FQT2dBQURBRUxBbjlCZnlBTEVMOEJEUUFhSUF0QkFCQkFMQUFBQ3lFUVFRQWhEMEVBSVJNRFFDQUVJQkZHRFFFQ1FDQVBJQkJIQkVBZ0R5RVNEQUVMSUFJZ0FpZ0NBQ0lRUVFGcU5nSUFJQkFnQ2pvQUFFRUFJUklnQ3hBM0lCTkJBV29pRTAwRVFDQVBJUkFNQVFzZ0N5QVRFRUF0QUFCQi93QkdCRUJCZnlFUURBRUxJQXNnRXhCQUxBQUFJUkFMSUJGQkFXc2lFUzBBQUNFUElBSWdBaWdDQUNJWVFRRnFOZ0lBSUJnZ0R6b0FBQ0FTUVFGcUlROE1BQXNBQ3lBWElBSW9BZ0FRa3dJTElCVkJBV29oRlF3QUN3QUx1d0lCQVg4akFFRVFheUlLSkFBZ0NRSi9JQUFFUUNBQ0VLVUdJUUFDUUNBQkJFQWdDaUFBRVBZQklBTWdDaWdDQURZQUFDQUtJQUFROVFFTUFRc2dDaUFBRUprRElBTWdDaWdDQURZQUFDQUtJQUFRdXdFTElBZ2dDaENLQVNBS0VEa2FJQVFnQUJDNkFUb0FBQ0FGSUFBUW5nRTZBQUFnQ2lBQUVKMEJJQVlnQ2hDS0FTQUtFRGthSUFvZ0FCQzhBU0FISUFvUWlnRWdDaEE1R2lBQUVQUUJEQUVMSUFJUW93WWhBQUpBSUFFRVFDQUtJQUFROWdFZ0F5QUtLQUlBTmdBQUlBb2dBQkQxQVF3QkN5QUtJQUFRbVFNZ0F5QUtLQUlBTmdBQUlBb2dBQkM3QVFzZ0NDQUtFSW9CSUFvUU9Sb2dCQ0FBRUxvQk9nQUFJQVVnQUJDZUFUb0FBQ0FLSUFBUW5RRWdCaUFLRUlvQklBb1FPUm9nQ2lBQUVMd0JJQWNnQ2hDS0FTQUtFRGthSUFBUTlBRUxOZ0lBSUFwQkVHb2tBQXNOQUNBQUtBSUFRUUJIUVFGekN6RUJBWDhqQUVFUWF5SUNKQUFnQWlBQUtBSUFOZ0lJSUFKQkNHb2dBUkRsQkNBQ0tBSUlJUUFnQWtFUWFpUUFJQUFMQ3dBZ0FFSHNuUVFReGdFTEN3QWdBRUgwblFRUXhnRUxGUUFnQUNBQktBSUFFTnNHSUFFb0FnQVE2Z0VhQzh3TkFRbC9Jd0JCc0FScklnc2tBQ0FMSUFvMkFxUUVJQXNnQVRZQ3FBUWdDMEhFQWpZQ1lDQUxJQXRCaUFGcUlBdEJrQUZxSUF0QjRBQnFFR1lpRHlnQ0FDSUJOZ0tFQVNBTElBRkJrQU5xTmdLQUFTQUxRZUFBYWhCQ0lSRWdDMEhRQUdvUVFpRU9JQXRCUUdzUVFpRU1JQXRCTUdvUVFpRU5JQXRCSUdvUVFpRVFJQUlnQXlBTFFmZ0FhaUFMUWZRQWFpQUxRZkFBYWlBUklBNGdEQ0FOSUF0QkhHb1FzZ3dnQ1NBSUtBSUFOZ0lBSUFSQmdBUnhJaEpCQ1hZaEUwRUFJUUZCQUNFQ0EwQWdBaUVLQWtBQ1FBSkFBa0FnQVVFRVJnMEFJQUFnQzBHb0JHb1FrZ0ZGRFFCQkFDRUVBa0FDUUFKQUFrQUNRQUpBSUF0QitBQnFJQUZxTEFBQURnVUJBQVFEQlFrTElBRkJBMFlOQnlBSFFZREFBQ0FBRUdjUXZRRUVRQ0FMUVJCcUlBQVFud1lnRUNBTEtBSVFFSlVEREFJTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUJnc2dBVUVEUmcwR0N3TkFJQUFnQzBHb0JHb1FrZ0ZGRFFZZ0IwR0F3QUFnQUJCbkVMMEJSUTBHSUF0QkVHb2dBQkNmQmlBUUlBc29BaEFRbFFNTUFBc0FDeUFNRURkQkFDQU5FRGRyUmcwRUFrQWdEQkEzQkVBZ0RSQTNEUUVMSUF3UU55RURJQUFRWnlFQ0lBTUVRQ0FNRUQ0b0FnQWdBa1lFUUNBQUVIa2FJQXdnQ2lBTUVEZEJBVXNiSVFJTUNBc2dCa0VCT2dBQURBWUxJQUlnRFJBK0tBSUFSdzBGSUFBUWVSb2dCa0VCT2dBQUlBMGdDaUFORURkQkFVc2JJUUlNQmdzZ0FCQm5JQXdRUGlnQ0FFWUVRQ0FBRUhrYUlBd2dDaUFNRURkQkFVc2JJUUlNQmdzZ0FCQm5JQTBRUGlnQ0FFWUVRQ0FBRUhrYUlBWkJBVG9BQUNBTklBb2dEUkEzUVFGTEd5RUNEQVlMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFJUUFNQXdzZ0FVRUNTU0FLY2tVRVFFRUFJUUlnQVVFQ1JpQUxMUUI3UVFCSGNTQVRja1VOQlFzZ0N5QU9FS3dCTmdJSUlBdEJFR29nQzBFSWFoQ0VBaUVDQWtBZ0FVVU5BQ0FCSUF0cUxRQjNRUUZMRFFBRFFBSkFJQXNnRGhENUFUWUNDQ0FDSUF0QkNHb1FmRVVOQUNBSFFZREFBQ0FDS0FJQUtBSUFFTDBCUlEwQUlBSVFnQUlNQVFzTElBc2dEaENzQVRZQ0NDQUNJQXRCQ0dvUXdRTWlBaUFRRURkTkJFQWdDeUFRRVBrQk5nSUlJQXRCQ0dwQkFDQUNheENjQmlBUUVQa0JJQTRRckFFUXJRd05BUXNnQ3lBT0VLd0JOZ0lBSUF0QkNHb2dDeENFQWhvZ0N5QUxLQUlJTmdJUUN5QUxJQXNvQWhBMkFnZ0RRQUpBSUFzZ0RoRDVBVFlDQUNBTFFRaHFJQXNRZkVVTkFDQUFJQXRCcUFScUVKSUJSUTBBSUFBUVp5QUxLQUlJS0FJQVJ3MEFJQUFRZVJvZ0MwRUlhaENBQWd3QkN3c2dFa1VOQXlBTElBNFErUUUyQWdBZ0MwRUlhaUFMRUh4RkRRTWdCU0FGS0FJQVFRUnlOZ0lBUVFBaEFBd0NDd05BQWtBZ0FDQUxRYWdFYWhDU0FVVU5BQUovSUFkQmdCQWdBQkJuSWdJUXZRRUVRQ0FKS0FJQUlnTWdDeWdDcEFSR0JFQWdDQ0FKSUF0QnBBUnFFTFVDSUFrb0FnQWhBd3NnQ1NBRFFRUnFOZ0lBSUFNZ0FqWUNBQ0FFUVFGcURBRUxJQVJGSUJFUU4wVnlEUUVnQWlBTEtBSndSdzBCSUFzb0FvUUJJZ0lnQ3lnQ2dBRkdCRUFnRHlBTFFZUUJhaUFMUVlBQmFoQzFBaUFMS0FLRUFTRUNDeUFMSUFKQkJHbzJBb1FCSUFJZ0JEWUNBRUVBQ3lFRUlBQVFlUm9NQVFzTElBOG9BZ0FoQXdKQUlBUkZEUUFnQXlBTEtBS0VBU0lDUmcwQUlBc29Bb0FCSUFKR0JFQWdEeUFMUVlRQmFpQUxRWUFCYWhDMUFpQUxLQUtFQVNFQ0N5QUxJQUpCQkdvMkFvUUJJQUlnQkRZQ0FBc0NRQ0FMS0FJY1FRRklEUUFDUUNBQUlBdEJxQVJxRUlBQlJRUkFJQUFRWnlBTEtBSjBSZzBCQ3lBRklBVW9BZ0JCQkhJMkFnQkJBQ0VBREFNTEEwQWdBQkI1R2lBTEtBSWNRUUZJRFFFQ1FDQUFJQXRCcUFScUVJQUJSUVJBSUFkQmdCQWdBQkJuRUwwQkRRRUxJQVVnQlNnQ0FFRUVjallDQUVFQUlRQU1CQXNnQ1NnQ0FDQUxLQUtrQkVZRVFDQUlJQWtnQzBHa0JHb1F0UUlMSUFBUVp5RUNJQWtnQ1NnQ0FDSURRUVJxTmdJQUlBTWdBallDQUNBTElBc29BaHhCQVdzMkFod01BQXNBQ3lBS0lRSWdDQ2dDQUNBSktBSUFSdzBESUFVZ0JTZ0NBRUVFY2pZQ0FFRUFJUUFNQVFzQ1FDQUtSUTBBUVFFaEJBTkFJQW9RTnlBRVRRMEJBa0FnQUNBTFFhZ0VhaENBQVVVRVFDQUFFR2NnQ2lBRUVLRURLQUlBUmcwQkN5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBTUxJQUFRZVJvZ0JFRUJhaUVFREFBTEFBdEJBU0VBSUE4b0FnQWdDeWdDaEFGR0RRQkJBQ0VBSUF0QkFEWUNFQ0FSSUE4b0FnQWdDeWdDaEFFZ0MwRVFhaENNQVNBTEtBSVFCRUFnQlNBRktBSUFRUVJ5TmdJQURBRUxRUUVoQUFzZ0VCQTVHaUFORURrYUlBd1FPUm9nRGhBNUdpQVJFRGthSUE4UVpTQUxRYkFFYWlRQUlBQVBDeUFLSVFJTElBRkJBV29oQVF3QUN3QUxIUUFnQUNBQkVMVUJFSDhnQVJCSUtBSUFJUUVnQUJCSUlBRTJBZ0FMTkFFQmZ5TUFRUkJySWdJa0FDQUNJQUFvQWdBMkFnZ2dBaUFDS0FJSUlBRnFOZ0lJSUFJb0FnZ2hBQ0FDUVJCcUpBQWdBQXNMQUNBQVFkeWRCQkRHQVFzckFRRi9JQUFvQWdRaEFnTkFJQUVnQWtjRVFDQUFFRFFhSUFKQkZHc2hBZ3dCQ3dzZ0FDQUJOZ0lFQ3dzQUlBQkI1SjBFRU1ZQkM4TUJBUVovSXdCQkVHc2lCQ1FBSUFBUVNDZ0NBQ0VGQW44Z0FpZ0NBQ0FBS0FJQWF5SURRZi8vLy84SFNRUkFJQU5CQVhRTUFRdEJmd3NpQTBFQklBTWJJUU1nQVNnQ0FDRUdJQUFvQWdBaEJ5QUZRY1FDUmdSL1FRQUZJQUFvQWdBTElBTVEyd0lpQ0FSQUlBVkJ4QUpIQkVBZ0FCQzFBUm9MSUFSQnd3STJBZ1FnQUNBRVFRaHFJQWdnQkVFRWFoQm1JZ1VRb1FZZ0JSQmxJQUVnQUNnQ0FDQUdJQWRyYWpZQ0FDQUNJQU1nQUNnQ0FHbzJBZ0FnQkVFUWFpUUFEd3NRZHdBTEpRRUJmeUFCS0FJQUVOOEdRUmgwUVJoMUlRSWdBQ0FCS0FJQU5nSUVJQUFnQWpvQUFBditEUUVKZnlNQVFiQUVheUlMSkFBZ0N5QUtOZ0trQkNBTElBRTJBcWdFSUF0QnhBSTJBbWdnQ3lBTFFZZ0JhaUFMUVpBQmFpQUxRZWdBYWhCbUlnOG9BZ0FpQVRZQ2hBRWdDeUFCUVpBRGFqWUNnQUVnQzBIb0FHb1FRaUVSSUF0QjJBQnFFRUloRGlBTFFjZ0FhaEJDSVF3Z0MwRTRhaEJDSVEwZ0MwRW9haEJDSVJBZ0FpQURJQXRCK0FCcUlBdEI5d0JxSUF0QjlnQnFJQkVnRGlBTUlBMGdDMEVrYWhDNERDQUpJQWdvQWdBMkFnQWdCRUdBQkhFaUVrRUpkaUVUUVFBaEFVRUFJUUlEUUNBQ0lRb0NRQUpBQWtBQ1FDQUJRUVJHRFFBZ0FDQUxRYWdFYWhDVEFVVU5BRUVBSVFRQ1FBSkFBa0FDUUFKQUFrQWdDMEg0QUdvZ0FXb3NBQUFPQlFFQUJBTUZDUXNnQVVFRFJnMEhJQWRCZ01BQUlBQVFhQkMrQVFSQUlBdEJHR29nQUJDbkJpQVFJQXNzQUJnUWxnTU1BZ3NnQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdHQ3lBQlFRTkdEUVlMQTBBZ0FDQUxRYWdFYWhDVEFVVU5CaUFIUVlEQUFDQUFFR2dRdmdGRkRRWWdDMEVZYWlBQUVLY0dJQkFnQ3l3QUdCQ1dBd3dBQ3dBTElBd1FOMEVBSUEwUU4ydEdEUVFDUUNBTUVEY0VRQ0FORURjTkFRc2dEQkEzSVFNZ0FCQm9JUUlnQXdSQUlBeEJBQkJBTFFBQUlBSkIvd0Z4UmdSQUlBQVFlaG9nRENBS0lBd1FOMEVCU3hzaEFnd0lDeUFHUVFFNkFBQU1CZ3NnRFVFQUVFQXRBQUFnQWtIL0FYRkhEUVVnQUJCNkdpQUdRUUU2QUFBZ0RTQUtJQTBRTjBFQlN4c2hBZ3dHQ3lBQUVHaEIvd0Z4SUF4QkFCQkFMUUFBUmdSQUlBQVFlaG9nRENBS0lBd1FOMEVCU3hzaEFnd0dDeUFBRUdoQi93RnhJQTFCQUJCQUxRQUFSZ1JBSUFBUWVob2dCa0VCT2dBQUlBMGdDaUFORURkQkFVc2JJUUlNQmdzZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3REN5QUJRUUpKSUFweVJRUkFRUUFoQWlBQlFRSkdJQXN0QUh0QkFFZHhJQk55UlEwRkN5QUxJQTRRckFFMkFoQWdDMEVZYWlBTFFSQnFFSVFDSVFJQ1FDQUJSUTBBSUFFZ0Myb3RBSGRCQVVzTkFBTkFBa0FnQ3lBT0VQc0JOZ0lRSUFJZ0MwRVFhaEI4UlEwQUlBZEJnTUFBSUFJb0FnQXNBQUFRdmdGRkRRQWdBaERlQWd3QkN3c2dDeUFPRUt3Qk5nSVFJQUlvQWdBZ0N5Z0NFR3NpQWlBUUVEZE5CRUFnQ3lBUUVQc0JOZ0lRSUF0QkVHcEJBQ0FDYXhDaUJpQVFFUHNCSUE0UXJBRVF0QXdOQVFzZ0N5QU9FS3dCTmdJSUlBdEJFR29nQzBFSWFoQ0VBaG9nQ3lBTEtBSVFOZ0lZQ3lBTElBc29BaGcyQWhBRFFBSkFJQXNnRGhEN0FUWUNDQ0FMUVJCcUlBdEJDR29RZkVVTkFDQUFJQXRCcUFScUVKTUJSUTBBSUFBUWFFSC9BWEVnQ3lnQ0VDMEFBRWNOQUNBQUVIb2FJQXRCRUdvUTNnSU1BUXNMSUJKRkRRTWdDeUFPRVBzQk5nSUlJQXRCRUdvZ0MwRUlhaEI4UlEwRElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUFnc0RRQUpBSUFBZ0MwR29CR29Ra3dGRkRRQUNmeUFIUVlBUUlBQVFhQ0lDRUw0QkJFQWdDU2dDQUNJRElBc29BcVFFUmdSQUlBZ2dDU0FMUWFRRWFoQ21CaUFKS0FJQUlRTUxJQWtnQTBFQmFqWUNBQ0FESUFJNkFBQWdCRUVCYWd3QkN5QUVSU0FSRURkRmNnMEJJQXN0QUhZZ0FrSC9BWEZIRFFFZ0N5Z0NoQUVpQWlBTEtBS0FBVVlFUUNBUElBdEJoQUZxSUF0QmdBRnFFTFVDSUFzb0FvUUJJUUlMSUFzZ0FrRUVhallDaEFFZ0FpQUVOZ0lBUVFBTElRUWdBQkI2R2d3QkN3c2dEeWdDQUNFREFrQWdCRVVOQUNBRElBc29Bb1FCSWdKR0RRQWdDeWdDZ0FFZ0FrWUVRQ0FQSUF0QmhBRnFJQXRCZ0FGcUVMVUNJQXNvQW9RQklRSUxJQXNnQWtFRWFqWUNoQUVnQWlBRU5nSUFDd0pBSUFzb0FpUkJBVWdOQUFKQUlBQWdDMEdvQkdvUWdRRkZCRUFnQUJCb1FmOEJjU0FMTFFCM1JnMEJDeUFGSUFVb0FnQkJCSEkyQWdCQkFDRUFEQU1MQTBBZ0FCQjZHaUFMS0FJa1FRRklEUUVDUUNBQUlBdEJxQVJxRUlFQlJRUkFJQWRCZ0JBZ0FCQm9FTDRCRFFFTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUJBc2dDU2dDQUNBTEtBS2tCRVlFUUNBSUlBa2dDMEdrQkdvUXBnWUxJQUFRYUNFQ0lBa2dDU2dDQUNJRFFRRnFOZ0lBSUFNZ0Fqb0FBQ0FMSUFzb0FpUkJBV3MyQWlRTUFBc0FDeUFLSVFJZ0NDZ0NBQ0FKS0FJQVJ3MERJQVVnQlNnQ0FFRUVjallDQUVFQUlRQU1BUXNDUUNBS1JRMEFRUUVoQkFOQUlBb1FOeUFFVFEwQkFrQWdBQ0FMUWFnRWFoQ0JBVVVFUUNBQUVHaEIvd0Z4SUFvZ0JCQkFMUUFBUmcwQkN5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBTUxJQUFRZWhvZ0JFRUJhaUVFREFBTEFBdEJBU0VBSUE4b0FnQWdDeWdDaEFGR0RRQkJBQ0VBSUF0QkFEWUNHQ0FSSUE4b0FnQWdDeWdDaEFFZ0MwRVlhaENNQVNBTEtBSVlCRUFnQlNBRktBSUFRUVJ5TmdJQURBRUxRUUVoQUFzZ0VCQTVHaUFORURrYUlBd1FPUm9nRGhBNUdpQVJFRGthSUE4UVpTQUxRYkFFYWlRQUlBQVBDeUFLSVFJTElBRkJBV29oQVF3QUN3QUxEQUFnQUVFQlFTMFF0d1lhQ3d3QUlBQkJBVUV0RU9nRkdnczFBUUYvSXdCQkVHc2lBaVFBSUFJZ0FDMEFBRG9BRHlBQUlBRXRBQUE2QUFBZ0FTQUNRUTlxTFFBQU9nQUFJQUpCRUdva0FBdGtBUUYvSXdCQkVHc2lCaVFBSUFaQkFEb0FEeUFHSUFVNkFBNGdCaUFFT2dBTklBWkJKVG9BRENBRkJFQWdCa0VOYWlBR1FRNXFFS3NHQ3lBQ0lBRWdBU0FDS0FJQUVPTUZJQVpCREdvZ0F5QUFLQUlBRUNFZ0FXbzJBZ0FnQmtFUWFpUUFDd3dBSUFBZ0FDZ0NBQkNrQmd0Q0FDQUJJQUlnQXlBRVFRUVExUUVoQVNBRExRQUFRUVJ4UlFSQUlBQWdBVUhRRDJvZ0FVSHNEbW9nQVNBQlFlUUFTQnNnQVVIRkFFZ2JRZXdPYXpZQ0FBc0xRQUFnQWlBRElBQkJDR29nQUNnQ0NDZ0NCQkVCQUNJQUlBQkJvQUpxSUFVZ0JFRUFFS0lESUFCcklnQkJud0pNQkVBZ0FTQUFRUXh0UVF4dk5nSUFDd3RBQUNBQ0lBTWdBRUVJYWlBQUtBSUlLQUlBRVFFQUlnQWdBRUdvQVdvZ0JTQUVRUUFRb2dNZ0FHc2lBRUduQVV3RVFDQUJJQUJCREcxQkIyODJBZ0FMQzhRQkFRVi9Ba0FnQUFSQUlBQW9BZ1FpQTBFQUlBTkJBRW9iSVFNRFFDQUNJQU5HQkVCQkFDRURJQUFvQWd3aUFrRUFJQUpCQUVvYklRUkJBQ0VDQTBBZ0FpQUVSZzBFUVFBZ0FDZ0NDQ0FDUVF4c2FpSUZLQUlJSWdaQmYwY2dCa0YvU2h0RkJFQWdCU0FCTmdJSUN5QUNRUUZxSVFJTUFBc0FCVUVBSUFBb0FnQWdBa0dFQVd4cUlnUW9BbndpQlVGL1J5QUZRWDlLRzBVRVFDQUVJQUUyQW53TElBSkJBV29oQWd3QkN3QUxBQXRCQUVFRFFkZjVBRUVBRURoQmZ5RURDeUFEQzBJQUlBRWdBaUFESUFSQkJCRFdBU0VCSUFNdEFBQkJCSEZGQkVBZ0FDQUJRZEFQYWlBQlFld09haUFCSUFGQjVBQklHeUFCUWNVQVNCdEI3QTVyTmdJQUN3dEFBQ0FDSUFNZ0FFRUlhaUFBS0FJSUtBSUVFUUVBSWdBZ0FFR2dBbW9nQlNBRVFRQVFwQU1nQUdzaUFFR2ZBa3dFUUNBQklBQkJERzFCREc4MkFnQUxDMEFBSUFJZ0F5QUFRUWhxSUFBb0FnZ29BZ0FSQVFBaUFDQUFRYWdCYWlBRklBUkJBQkNrQXlBQWF5SUFRYWNCVEFSQUlBRWdBRUVNYlVFSGJ6WUNBQXNMN1FRQkJYOGpBRUVRYXlJRkpBQWdCVUdvc2dFdEFBQTZBQTRnQlVHbXNnRXZBQUE3QVF3Q1FBSi9Ba0FnQUVFQUlBRWJSUVJBUVFCQkEwR2E0Z0JCQUJBNERBRUxJQUFnQlVFTWFoRGZDaUlFUlFSQUlBVWdBRFlDQUNBRlFjTHFBVFlDQ0NBRlFZM1ZBRFlDQkVFQVFRTkIzZklBSUFVUU9Bd0JDd0pBUVFGQkVCQ1RBeUlBQkVBZ0FFRUVha0VFUVFFZ0JCQmZRUUZIRFFFZ0FDZ0NCQ0lEUVFGSURRRWdBQ0FEUVlRQmJCQTZJZ0kyQWdBZ0FrVU5CRUVBSVFJRFFDQUNJQU5JQkVBZ0FrR0VBV3dpQXlBQUtBSUFha0VJUVFFZ0JCQmZRUUZIRFFNZ0FDZ0NBQ0FEYWtFSWFrRUlRUUVnQkJCZlFRRkhEUU1nQUNnQ0FDQURha0VRYWtIc0FFRUJJQVFRWDBFQlJ3MERJQUFvQWdBZ0EycEIvQUJxUVFSQkFTQUVFRjlCQVVjTkF5QUFLQUlBSUFOcVFZQUJha0VFUVFFZ0JCQmZRUUZIRFFNZ0FrRUJhaUVDSUFBb0FnUWhBd3dCQ3dzZ0FFRU1ha0VFUVFFZ0JCQmZRUUZIRFFGQkFDRURJQUFvQWd3aUFrRUFUQVJBSUFCQkFEWUNDQXdDQ3lBQUlBSkJER3dRT2lJR05nSUlJQVpGRFFRRFFDQUNJQU5LQkVBZ0EwRU1iQ0lDSUFBb0FnaHFRUWhxUVFSQkFTQUVFRjlCQVVjTkF5QUFLQUlJSUFKcVFRUnFRUVJCQVNBRUVGOUJBVWNOQXlBQUtBSUlJQUpxSWdJZ0FpZ0NCQ0lDUVF4c0VEb2lCallDQUNBR1JRMEdJQVpCRENBQ0lBUVFYeUFDUncwRElBTkJBV29oQXlBQUtBSU1JUUlNQVFzTElBRWdBRFlDQUNBRUVMTUJRUUFNQXdzTUF3dEJBRUVEUWFqMkFFRUFFRGdnQUNnQ0NCQXpJQUFvQWdBUU15QUFFRE1nQkJDekFRdEJmd3NoQUNBRlFSQnFKQUFnQUE4TFFRQkJBMEd6SkVFQUVEaEJBUkFCQUF1OUJRRUtmeU1BUVJCcklna2tBQ0FHRUo4QklRb2dDU0FHRUxvQ0lnMFFuUUVnQlNBRE5nSUFBa0FDUUNBQUlnY3RBQUFpQmtFcmF3NERBQUVBQVFzZ0NpQUdRUmgwUVJoMUVLVUJJUVlnQlNBRktBSUFJZ2RCQkdvMkFnQWdCeUFHTmdJQUlBQkJBV29oQndzQ1FBSkFJQUlnQnlJR2EwRUJUQTBBSUFjdEFBQkJNRWNOQUNBSExRQUJRU0J5UWZnQVJ3MEFJQXBCTUJDbEFTRUdJQVVnQlNnQ0FDSUlRUVJxTmdJQUlBZ2dCallDQUNBS0lBY3NBQUVRcFFFaEJpQUZJQVVvQWdBaUNFRUVhallDQUNBSUlBWTJBZ0FnQjBFQ2FpSUhJUVlEUUNBQ0lBWk5EUUlnQml3QUFCQlVFTk1HUlEwQ0lBWkJBV29oQmd3QUN3QUxBMEFnQWlBR1RRMEJJQVlzQUFBaENCQlVHaUFJRU1nQlJRMEJJQVpCQVdvaEJnd0FDd0FMQWtBZ0NSQy9BUVJBSUFvZ0J5QUdJQVVvQWdBUTVRRWdCU0FGS0FJQUlBWWdCMnRCQW5ScU5nSUFEQUVMSUFjZ0JoQ1RBaUFORUo0QklRNGdCeUVJQTBBZ0JpQUlUUVJBSUFNZ0J5QUFhMEVDZEdvZ0JTZ0NBQkNkQXdVQ1FDQUpJQXNRUUN3QUFFRUJTQTBBSUF3Z0NTQUxFRUFzQUFCSERRQWdCU0FGS0FJQUlneEJCR28yQWdBZ0RDQU9OZ0lBSUFzZ0N5QUpFRGRCQVd0SmFpRUxRUUFoREFzZ0NpQUlMQUFBRUtVQklROGdCU0FGS0FJQUloQkJCR28yQWdBZ0VDQVBOZ0lBSUFoQkFXb2hDQ0FNUVFGcUlRd01BUXNMQ3dKQUFrQURRQ0FDSUFaTkRRRWdCaTBBQUNJSFFTNUhCRUFnQ2lBSFFSaDBRUmgxRUtVQklRY2dCU0FGS0FJQUlnaEJCR28yQWdBZ0NDQUhOZ0lBSUFaQkFXb2hCZ3dCQ3dzZ0RSQzZBU0VISUFVZ0JTZ0NBQ0lMUVFScUlnZzJBZ0FnQ3lBSE5nSUFJQVpCQVdvaEJnd0JDeUFGS0FJQUlRZ0xJQW9nQmlBQ0lBZ1E1UUVnQlNBRktBSUFJQUlnQm10QkFuUnFJZ1UyQWdBZ0JDQUZJQU1nQVNBQWEwRUNkR29nQVNBQ1JoczJBZ0FnQ1JBNUdpQUpRUkJxSkFBTEh3RUJmeU1BUVJCcklnTWtBQ0FBSUFFZ0FoQ2ZDeUFEUVJCcUpBQWdBQXV2Q1FFUGZ5QUFRUUFnQVJ0RkJFQkJBRUVEUWRBK1FRQVFPRUYvRHdzQ1FBSkFJQUFvQWdBaUEwVUVRQ0FBUVJBUU9pSUROZ0lBSUFORkRRSWdBMElBTndJQUlBTkNBRGNDQ0FzZ0FTZ0NBQ0lJUlEwQUlBZ29BZ1FpQlNBREtBSUVJZ1pxSWdkQmhBRnNFRG9pQkFSQUlBWkJBQ0FHUVFCS0d5RU1BMEFnQWlBTVJnUkFRUUFoQWlBRlFRQWdCVUVBU2hzaEJRTkFJQUlnQlVaRkJFQWdCQ0FDSUFacVFZUUJiR29nQ0NnQ0FDQUNRWVFCYkdwQmhBRVFQeG9nQWtFQmFpRUNEQUVMQ3lBREtBSUFFRE1nQUNnQ0FDQUVOZ0lBSUFBb0FnQWlCaUFITmdJRVFRQWhBeUFHS0FJTUlneEJBQ0FNUVFCS0d5RU5JQUVvQWdBaUJ5Z0NEQ0lGUVFBZ0JVRUFTaHNoQ0VFQUlRUURRRUVBSVFJZ0JDQUlSa1VFUUFKQUEwQWdBaUFOUmcwQklBSkJER3doRGlBQ1FRRnFJUUlnQnlnQ0NDQUVRUXhzYWlnQ0NDQU9JQVlvQWdocUtBSUlSdzBBQ3lBRFFRRnFJUU1MSUFSQkFXb2hCQXdCQ3dzZ0JTQU1haUFEYXlJUFFReHNFRG9pRGdSQVFRQWhCUU5BSUFVZ0RVWUVRRUVBSVFaQkFDRURBa0FEUUNBR0lBaEhCRUFnQmtFTWJDSUhJQUVvQWdBb0FnaHFJZ2tvQWdnaEJVRUFJUUlDUUFKQUEwQWdBaUFOUmcwQklBSkJER3doQkNBQ1FRRnFJUUlnQlNBRUlBQW9BZ0FvQWdocUtBSUlSdzBBQ3lBRFFRRnFJUU1NQVFzZ0RpQUdJQXhxSUFOclFReHNhaUlFSUFVMkFnZ2dCQ0FKS0FJRUlnVkJER3dRT2lJQ05nSUFJQUpGRFFOQkFDRUNJQVZCQUNBRlFRQktHeUVKQTBBZ0FpQUpSa1VFUUNBQ1FReHNJZ29nQkNnQ0FHb2lDeUFCS0FJQUtBSUlJQWRxS0FJQUlBcHFJZ29wQWdBM0FnQWdDeUFLS0FJSU5nSUlJQUpCQVdvaEFnd0JDd3NnQkNBRk5nSUVDeUFHUVFGcUlRWU1BUXNMSUFBb0FnQWlBeWdDQ0FSL1FRQWhBZ05BSUFJZ0F5Z0NERTVGQkVBZ0F5Z0NDQ0FDUVF4c2FpZ0NBQkF6SUFKQkFXb2hBaUFBS0FJQUlRTU1BUXNMSUFNb0FnZ1FNeUFBS0FJQUJTQURDeUFPTmdJSUlBQW9BZ0FnRHpZQ0RDQUJFSTBFREFjTERBY0xJQTRnQlVFTWJDSUphaUlISUFBb0FnQW9BZ2dnQ1dvaUF5Z0NDRFlDQ0VFQUlRSWdBeWdDQkNJS0lRWURRQ0FDSUFoR1JRUkFJQUVvQWdBb0FnZ2dBa0VNYkdvaUJDZ0NDQ0FES0FJSVJnUkFJQVFvQWdRZ0Jtb2hCZ3NnQWtFQmFpRUNEQUVMQ3lBSElBWkJER3dRT2lJQ05nSUFJQUlFUUVFQUlRTWdDa0VBSUFwQkFFb2JJUVJCQUNFQ0EwQWdBaUFFUmtVRVFDQUNRUXhzSWdzZ0J5Z0NBR29pRUNBQUtBSUFLQUlJSUFscUtBSUFJQXRxSWdzcEFnQTNBZ0FnRUNBTEtBSUlOZ0lJSUFKQkFXb2hBZ3dCQ3dzQ1FBTkFJQU1nQ0VZTkFTQUJLQUlBS0FJSUlnUWdBMEVNYkNJTGFpZ0NDQ0FBS0FJQUtBSUlJQWxxS0FJSVJ3UkFJQU5CQVdvaEF3d0JDd3RCQUNFQ0EwQWdBaUFFSUF0cUlnTW9BZ1JPRFFFZ0J5Z0NBQ0FDSUFwcVFReHNhaUlFSUFNb0FnQWdBa0VNYkdvaUF5a0NBRGNDQUNBRUlBTW9BZ2cyQWdnZ0FrRUJhaUVDSUFFb0FnQW9BZ2doQkF3QUN3QUxJQWNnQmpZQ0JDQUZRUUZxSVFVTUFRc0xEQVVMREFRRklBUWdBa0dFQVd3aURXb2dBeWdDQUNBTmFrR0VBUkEvR2lBQ1FRRnFJUUlNQVFzQUN3QUxEQUVMUVFBUEMwRUFRUU5Cc3lSQkFCQTRRUUVRQVFBTHpRRUJBMzhqQUVFUWF5SUNKQUFDUUNBQVJRUkFRWDhoQXd3QkN5QUFLQUwwaHE4RElBRkdEUUFnQUNnQ2lJZXZBeUlFQkVBZ0JCQkZJQUJCQURZQ2lJZXZBd3NDUUFKQUFrQUNRQ0FCRGdVREFBQUFBUUlMSUFBZ0FDZ0NKQ0FBS0FJb0VNVUtOZ0tJaDY4RERBSUxJQUJDZ1lDQWdCQTNBNENIcndOQkJDRUJEQUVMUVFBaEFVRUFRUU5CM3hSQkFCQTRDeUFBSUFFMkF2U0dyd01nQUNnQ0FFRUJSdzBBSUFJZ0FVRUNkRUdnUEdvb0FnQTJBZ0JCQUVFRFFiUThJQUlRT0FzZ0FrRVFhaVFBSUFNTHF3VUJDbjhqQUVFUWF5SUpKQUFnQmhDWkFTRUtJQWtnQmhDOEFpSU5FSjBCSUFVZ0F6WUNBQUpBQWtBZ0FDSUhMUUFBSWdaQksyc09Bd0FCQUFFTElBb2dCa0VZZEVFWWRSQ0dBU0VHSUFVZ0JTZ0NBQ0lIUVFGcU5nSUFJQWNnQmpvQUFDQUFRUUZxSVFjTEFrQUNRQ0FDSUFjaUJtdEJBVXdOQUNBSExRQUFRVEJIRFFBZ0J5MEFBVUVnY2tINEFFY05BQ0FLUVRBUWhnRWhCaUFGSUFVb0FnQWlDRUVCYWpZQ0FDQUlJQVk2QUFBZ0NpQUhMQUFCRUlZQklRWWdCU0FGS0FJQUlnaEJBV28yQWdBZ0NDQUdPZ0FBSUFkQkFtb2lCeUVHQTBBZ0FpQUdUUTBDSUFZc0FBQVFWQkRUQmtVTkFpQUdRUUZxSVFZTUFBc0FDd05BSUFJZ0JrME5BU0FHTEFBQUlRZ1FWQm9nQ0JESUFVVU5BU0FHUVFGcUlRWU1BQXNBQ3dKQUlBa1F2d0VFUUNBS0lBY2dCaUFGS0FJQUVQd0JJQVVnQlNnQ0FDQUdJQWRyYWpZQ0FBd0JDeUFISUFZUWt3SWdEUkNlQVNFT0lBY2hDQU5BSUFZZ0NFMEVRQ0FESUFjZ0FHdHFJQVVvQWdBUWt3SUZBa0FnQ1NBTUVFQXNBQUJCQVVnTkFDQUxJQWtnREJCQUxBQUFSdzBBSUFVZ0JTZ0NBQ0lMUVFGcU5nSUFJQXNnRGpvQUFDQU1JQXdnQ1JBM1FRRnJTV29oREVFQUlRc0xJQW9nQ0N3QUFCQ0dBU0VQSUFVZ0JTZ0NBQ0lRUVFGcU5nSUFJQkFnRHpvQUFDQUlRUUZxSVFnZ0MwRUJhaUVMREFFTEN3c0RRQUpBSUFvQ2Z5QUNJQVpMQkVBZ0JpMEFBQ0lIUVM1SERRSWdEUkM2QVNFSElBVWdCU2dDQUNJSVFRRnFOZ0lBSUFnZ0J6b0FBQ0FHUVFGcUlRWUxJQVlMSUFJZ0JTZ0NBQkQ4QVNBRklBVW9BZ0FnQWlBR2Eyb2lCVFlDQUNBRUlBVWdBeUFCSUFCcmFpQUJJQUpHR3pZQ0FDQUpFRGthSUFsQkVHb2tBQThMSUFvZ0IwRVlkRUVZZFJDR0FTRUhJQVVnQlNnQ0FDSUlRUUZxTmdJQUlBZ2dCem9BQUNBR1FRRnFJUVlNQUFzQUN6VUFJQUFvQWdBYUlBQW9BZ0FnQUJEaEFVRVViR29hSUFBb0FnQWdBQkNEQVVFVWJHb2FJQUFvQWdBZ0FCRGhBVUVVYkdvYUN5d0FJQUFvQWdBYUlBQW9BZ0FnQUJEZ0FXb2FJQUFvQWdBZ0FCQ1JBV29hSUFBb0FnQWdBQkRnQVdvYUN3OEFJQUVnQWlBRElBUWdCUkQrREFzc0FRRi9JQUFRdkFZZ0FDZ0NBQVJBSUFBUWxRWWdBQkEwR2lBQUtBSUFJUUVnQUJEZ0FSb2dBUkF6Q3d0RkFRRi9Jd0JCRUdzaUF5UUFJQU1nQVRZQ0RDQURJQUkyQWdnZ0F5QURRUXhxRU1VQklRRWdBRUd4dFFNZ0F5Z0NDQkNEQnlFQUlBRVF4QUVnQTBFUWFpUUFJQUFMcHdFQ0FuOENmaU1BUVNCcklnUWtBQUpBSUFFZ0FrY0VRRUdVZ3dRb0FnQWhCVUdVZ3dSQkFEWUNBQ0FFSUFFZ0JFRWNhaEN4Q3lBRUtRTUlJUVlnQkNrREFDRUhBa0JCbElNRUtBSUFJZ0VFUUNBRUtBSWNJQUpIRFFFZ0FVSEVBRWNOQXlBRFFRUTJBZ0FNQXd0QmxJTUVJQVUyQWdBZ0JDZ0NIQ0FDUmcwQ0N3c2dBMEVFTmdJQVFnQWhCMElBSVFZTElBQWdCemNEQUNBQUlBWTNBd2dnQkVFZ2FpUUFDd29BSUFBb0FnQWdBV29Ma3dFQ0FuOEJmQ01BUVJCcklnTWtBQUpBSUFBZ0FVY0VRRUdVZ3dRb0FnQWhCRUdVZ3dSQkFEWUNBQkJVR2lBQUlBTkJER29Rb0EwaEJRSkFRWlNEQkNnQ0FDSUFCRUFnQXlnQ0RDQUJSdzBCSUFCQnhBQkhEUU1nQWtFRU5nSUFEQU1MUVpTREJDQUVOZ0lBSUFNb0Fnd2dBVVlOQWdzTElBSkJCRFlDQUVRQUFBQUFBQUFBQUNFRkN5QURRUkJxSkFBZ0JRdVBBUUlDZndGOUl3QkJFR3NpQXlRQUFrQWdBQ0FCUndSQVFaU0RCQ2dDQUNFRVFaU0RCRUVBTmdJQUVGUWFJQUFnQTBFTWFoQ2lEU0VGQWtCQmxJTUVLQUlBSWdBRVFDQURLQUlNSUFGSERRRWdBRUhFQUVjTkF5QUNRUVEyQWdBTUF3dEJsSU1FSUFRMkFnQWdBeWdDRENBQlJnMENDd3NnQWtFRU5nSUFRd0FBQUFBaEJRc2dBMEVRYWlRQUlBVUx4Z0VDQTM4QmZpTUFRUkJySWdRa0FBSitBa0FDUUNBQUlBRkhCRUFDUUFKQUlBQXRBQUFpQlVFdFJ3MEFJQUJCQVdvaUFDQUJSdzBBREFFTFFaU0RCQ2dDQUNFR1FaU0RCRUVBTmdJQUlBQWdCRUVNYWlBREVGUVFsZ1FoQndKQVFaU0RCQ2dDQUNJQUJFQWdCQ2dDRENBQlJ3MEJJQUJCeEFCR0RRUU1CUXRCbElNRUlBWTJBZ0FnQkNnQ0RDQUJSZzBFQ3dzTElBSkJCRFlDQUVJQURBSUxJQUpCQkRZQ0FFSi9EQUVMUWdBZ0IzMGdCeUFGUVMxR0d3c2hCeUFFUVJCcUpBQWdCd3ZYQVFJRGZ3RitJd0JCRUdzaUJDUUFBbjhDUUFKQUFrQWdBQ0FCUndSQUFrQUNRQ0FBTFFBQUlnVkJMVWNOQUNBQVFRRnFJZ0FnQVVjTkFBd0JDMEdVZ3dRb0FnQWhCa0dVZ3dSQkFEWUNBQ0FBSUFSQkRHb2dBeEJVRUpZRUlRY0NRRUdVZ3dRb0FnQWlBQVJBSUFRb0Fnd2dBVWNOQVNBQVFjUUFSZzBGREFRTFFaU0RCQ0FHTmdJQUlBUW9BZ3dnQVVZTkF3c0xDeUFDUVFRMkFnQkJBQXdEQ3lBSFF2Ly8vLzhQV0EwQkN5QUNRUVEyQWdCQmZ3d0JDMEVBSUFlbklnQnJJQUFnQlVFdFJoc0xJUUFnQkVFUWFpUUFJQUFMRHdBZ0FTQUNJQU1nQkNBRkVJOE5DOXdCQWdOL0FYNGpBRUVRYXlJRUpBQUNmd0pBQWtBQ1FDQUFJQUZIQkVBQ1FBSkFJQUF0QUFBaUJVRXRSdzBBSUFCQkFXb2lBQ0FCUncwQURBRUxRWlNEQkNnQ0FDRUdRWlNEQkVFQU5nSUFJQUFnQkVFTWFpQURFRlFRbGdRaEJ3SkFRWlNEQkNnQ0FDSUFCRUFnQkNnQ0RDQUJSdzBCSUFCQnhBQkdEUVVNQkF0QmxJTUVJQVkyQWdBZ0JDZ0NEQ0FCUmcwREN3c0xJQUpCQkRZQ0FFRUFEQU1MSUFkQy8vOERXQTBCQ3lBQ1FRUTJBZ0JCLy84RERBRUxRUUFnQjZjaUFHc2dBQ0FGUVMxR0d3c2hBQ0FFUVJCcUpBQWdBRUgvL3dOeEM3WUJBZ0YrQW44akFFRVFheUlGSkFBQ1FBSkFJQUFnQVVjRVFFR1Vnd1FvQWdBaEJrR1Vnd1JCQURZQ0FDQUFJQVZCREdvZ0F4QlVFTXdHSVFRQ1FFR1Vnd1FvQWdBaUFBUkFJQVVvQWd3Z0FVY05BU0FBUWNRQVJnMEREQVFMUVpTREJDQUdOZ0lBSUFVb0Fnd2dBVVlOQXdzTElBSkJCRFlDQUVJQUlRUU1BUXNnQWtFRU5nSUFJQVJDQVZrRVFFTC8vLy8vLy8vLy8vOEFJUVFNQVF0Q2dJQ0FnSUNBZ0lDQWZ5RUVDeUFGUVJCcUpBQWdCQXZEQVFJQ2Z3RitJd0JCRUdzaUJDUUFBbjhDUUFKQUlBQWdBVWNFUUVHVWd3UW9BZ0FoQlVHVWd3UkJBRFlDQUNBQUlBUkJER29nQXhCVUVNd0dJUVlDUUVHVWd3UW9BZ0FpQUFSQUlBUW9BZ3dnQVVjTkFTQUFRY1FBUmcwRURBTUxRWlNEQkNBRk5nSUFJQVFvQWd3Z0FVWU5BZ3NMSUFKQkJEWUNBRUVBREFJTElBWkNnSUNBZ0hoVElBWkMvLy8vL3dkVmNnMEFJQWFuREFFTElBSkJCRFlDQUVILy8vLy9CeUFHUWdGWkRRQWFRWUNBZ0lCNEN5RUFJQVJCRUdva0FDQUFDMmtBSUFCRkJFQVBDd0pBSUFBb0FnQWdBVVlOQUNBQUlBRTJBZ0FnQVVVRVFDQUFRZVNHcHdKcUlnQW9BZ0FRTXlBQVFRQTJBZ0FNQVFzZ0FFSGtocWNDYWlBQUtBSW9JQUFvQWlSc0VEb2lBRFlDQUNBQURRQkJBRUVEUVpFTFFRQVFPRUVCRUFFQUN3dVpBUUVFZnlNQVFSQnJJZ1VrQUNBQklBSVFwQVFpQkVIdi8vLy9BMDBFUUFKQUlBUkJBVTBFUUNBQUlBUVFxZ0VnQUNFRERBRUxJQUFnQkJEZEFrRUJhaUlHRU53Q0lnTVFxUUVnQUNBR0VOQUJJQUFnQkJDYUFRc0RRQ0FCSUFKSEJFQWdBeUFCRUlJQklBTkJCR29oQXlBQlFRUnFJUUVNQVFzTElBVkJBRFlDRENBRElBVkJER29RZ2dFZ0JVRVFhaVFBRHdzUTB3RUFDeFlBSUFBZ0FTQUNRb0NBZ0lDQWdJQ0FnSDhRelFZTGd3UUNCWDhFZmlNQVFSQnJJZ2NrQUFKQUlBSkJKRXdFUUFKQUlBQXRBQUFpQlVVTkFBSkFBMEFnQlVFWWRFRVlkUkNXQWtVTkFTQUFMUUFCSVFVZ0FFRUJhaUlFSVFBZ0JRMEFDeUFFSVFBTUFRc0NRQ0FBTFFBQUlnUkJLMnNPQXdBQkFBRUxRWDlCQUNBRVFTMUdHeUVHSUFCQkFXb2hBQXNDZndKQUlBSkJiM0VOQUNBQUxRQUFRVEJIRFFBZ0FDMEFBVUhmQVhGQjJBQkdCRUFnQUVFQ2FpRUFRUkFNQWdzZ0FFRUJhaUVBSUFKQkNDQUNHd3dCQ3lBQ1FRb2dBaHNMSWdpc0lRcEJBQ0VDQTBBQ1FFRlFJUVVDUUNBQUxBQUFJZ1JCTUd0Qi93RnhRUXBKRFFCQnFYOGhCU0FFUWVFQWEwSC9BWEZCR2trTkFFRkpJUVVnQkVIQkFHdEIvd0Z4UVJsTERRRUxJQVFnQldvaUJDQUlUZzBBSUFjZ0NpQUpFTUFCQWtBZ0J5a0RDRkJGQkVCQkFTRUNEQUVMUVFFZ0FpQUpJQXArSWdzZ0JLd2lERUovaFZZaUJCc2hBaUFKSUFzZ0RId2dCQnNoQ1FzZ0FFRUJhaUVBREFFTEN5QUJCRUFnQVNBQU5nSUFDd0pBQWtBZ0FnUkFRWlNEQkVIRUFEWUNBQ0FHUVFBZ0EwSUJneUlLVUJzaEJpQURJUWtNQVFzZ0F5QUpWZzBCSUFOQ0FZTWhDZ3NnQ3FjZ0JuSkZCRUJCbElNRVFjUUFOZ0lBSUFOQ0FYMGhBd3dEQ3lBRElBbGFEUUJCbElNRVFjUUFOZ0lBREFJTElBa2dCcXdpQTRVZ0EzMGhBd3dCQzBHVWd3UkJIRFlDQUVJQUlRTUxJQWRCRUdva0FDQURDekVCQVg5QmpQTURLQUlBSVFFZ0FBUkFRWXp6QTBIUWd3UWdBQ0FBUVg5R0d6WUNBQXRCZnlBQklBRkIwSU1FUmhzTG9RZ0JCWDhnQVNnQ0FDRUVBa0FDUUFKQUFrQUNRQUpBQWtBQ2Z3SkFBa0FDUUFKQUlBTkZEUUFnQXlnQ0FDSUdSUTBBSUFCRkJFQWdBaUVEREFNTElBTkJBRFlDQUNBQ0lRTU1BUXNDUUVHTTh3TW9BZ0FvQWdCRkJFQWdBRVVOQVNBQ1JRME1JQUloQmdOQUlBUXNBQUFpQXdSQUlBQWdBMEgvdndOeE5nSUFJQUJCQkdvaEFDQUVRUUZxSVFRZ0JrRUJheUlHRFFFTURnc0xJQUJCQURZQ0FDQUJRUUEyQWdBZ0FpQUdhdzhMSUFJaEF5QUFSUTBEREFVTElBUVFpUUVQQzBFQklRVU1Bd3RCQUF3QkMwRUJDeUVGQTBBZ0JVVUVRQ0FFTFFBQVFRTjJJZ1ZCRUdzZ0JrRWFkU0FGYW5KQkIwc05Bd0ovSUFSQkFXb2lCU0FHUVlDQWdCQnhSUTBBR2lBRkxRQUFRY0FCY1VHQUFVY05CQ0FFUVFKcUlnVWdCa0dBZ0NCeFJRMEFHaUFGTFFBQVFjQUJjVUdBQVVjTkJDQUVRUU5xQ3lFRUlBTkJBV3NoQTBFQklRVU1BUXNEUUFKQUlBUkJBM0VnQkMwQUFDSUdRUUZyUWY0QVMzSU5BQ0FFS0FJQUlnWkJnWUtFQ0dzZ0JuSkJnSUdDaEhoeERRQURRQ0FEUVFScklRTWdCQ2dDQkNFR0lBUkJCR29pQlNFRUlBWWdCa0dCZ29RSWEzSkJnSUdDaEhoeFJRMEFDeUFGSVFRTElBWkIvd0Z4SWdWQkFXdEIvZ0JOQkVBZ0EwRUJheUVESUFSQkFXb2hCQXdCQ3dzZ0JVSENBV3NpQlVFeVN3MERJQVJCQVdvaEJDQUZRUUowUWNDRkEyb29BZ0FoQmtFQUlRVU1BQXNBQ3dOQUlBVkZCRUFnQTBVTkJ3TkFBa0FDUUFKQUlBUXRBQUFpQlVFQmF5SUhRZjRBU3dSQUlBVWhCZ3dCQ3lBRVFRTnhJQU5CQlVseURRRUNRQU5BSUFRb0FnQWlCa0dCZ29RSWF5QUdja0dBZ1lLRWVIRU5BU0FBSUFaQi93RnhOZ0lBSUFBZ0JDMEFBVFlDQkNBQUlBUXRBQUkyQWdnZ0FDQUVMUUFETmdJTUlBQkJFR29oQUNBRVFRUnFJUVFnQTBFRWF5SURRUVJMRFFBTElBUXRBQUFoQmdzZ0JrSC9BWEVpQlVFQmF5RUhDeUFIUWY0QVN3MEJDeUFBSUFVMkFnQWdBRUVFYWlFQUlBUkJBV29oQkNBRFFRRnJJZ01OQVF3SkN3c2dCVUhDQVdzaUJVRXlTdzBESUFSQkFXb2hCQ0FGUVFKMFFjQ0ZBMm9vQWdBaEJrRUJJUVVNQVFzZ0JDMEFBQ0lGUVFOMklnZEJFR3NnQnlBR1FScDFhbkpCQjBzTkFRSkFBa0FDZnlBRVFRRnFJZ2NnQlVHQUFXc2dCa0VHZEhJaUJVRi9TZzBBR2lBSExRQUFRWUFCYXlJSFFUOUxEUUVnQkVFQ2FpSUlJQWNnQlVFR2RISWlCVUYvU2cwQUdpQUlMUUFBUVlBQmF5SUhRVDlMRFFFZ0J5QUZRUVowY2lFRklBUkJBMm9MSVFRZ0FDQUZOZ0lBSUFOQkFXc2hBeUFBUVFScUlRQU1BUXRCbElNRVFSazJBZ0FnQkVFQmF5RUVEQVVMUVFBaEJRd0FDd0FMSUFSQkFXc2hCQ0FHRFFFZ0JDMEFBQ0VHQ3lBR1FmOEJjUTBBSUFBRVFDQUFRUUEyQWdBZ0FVRUFOZ0lBQ3lBQ0lBTnJEd3RCbElNRVFSazJBZ0FnQUVVTkFRc2dBU0FFTmdJQUMwRi9Ed3NnQVNBRU5nSUFJQUlMSXdFQ2Z5QUFJUUVEUUNBQklnSkJCR29oQVNBQ0tBSUFEUUFMSUFJZ0FHdEJBblVMMlFFQkJYOGpBRUVRYXlJRkpBQkJmeUVHQWtBZ0FDQUNJQU1nQlVFTWFpQUZRUWhxRUtnTlFRQklEUUFDZnlBRktnSU1JQUVxQWd3aUFwUkRNelBMUVpWREFBQUFQNUlpQTR0REFBQUFUMTBFUUNBRHFBd0JDMEdBZ0lDQWVBc2lBRUVBU0EwQUlBRW9BZ1FpQ0NBQVRBMEFBbjhnQVNnQ0NDSUpzaUFDSUFVcUFnaVVRek16eThHVmtrTUFBQUEva2lJQ2kwTUFBQUJQWFFSQUlBS29EQUVMUVlDQWdJQjRDeUlIUVFCSUlBY2dDVTV5RFFBZ0JDQUJLQUlBSUFjZ0NHd2dBR3BxTFFBQU9nQUFRUUFoQmdzZ0JVRVFhaVFBSUFZTERnQWdBQkRVQmdSQUlBQVFNd3NMRndBZ0FCRElBVUVBUnlBQVFTQnlRZUVBYTBFR1NYSUxGd0FnQUVFQVJ5QUFRZENWQTBkeElBQkI2SlVEUjNFTG5RTUJBMzhDUUNBQkxRQUFEUUJCZ0pZREVMQURJZ0VFUUNBQkxRQUFEUUVMSUFCQkRHeEJrSllEYWhDd0F5SUJCRUFnQVMwQUFBMEJDMEhZbGdNUXNBTWlBUVJBSUFFdEFBQU5BUXRCM1pZRElRRUxBa0FEUUNBQklBSnFMUUFBSWdSRklBUkJMMFp5UlFSQVFROGhCQ0FDUVFGcUlnSkJEMGNOQVF3Q0N3c2dBaUVFQzBIZGxnTWhBd0pBQWtBQ1FBSkFBa0FnQVMwQUFDSUNRUzVHRFFBZ0FTQUVhaTBBQUEwQUlBRWhBeUFDUWNNQVJ3MEJDeUFETFFBQlJRMEJDeUFEUWQyV0F4Q2JBa1VOQUNBRFFlV1dBeENiQWcwQkN5QUFSUVJBUWJTVkF5RUNJQU10QUFGQkxrWU5BZ3RCQUE4TFFZU2RCQ2dDQUNJQ0JFQURRQ0FESUFKQkNHb1Ftd0pGRFFJZ0FpZ0NHQ0lDRFFBTEMwR0VuUVFvQWdBaUFnUkFBMEFnQXlBQ1FRaHFFSnNDUlFSQUlBSVBDeUFDS0FJWUlnSU5BQXNMQWtCQkhCQTZJZ0pGQkVCQkFDRUNEQUVMSUFKQnRKVURLUUlBTndJQUlBSkJDR29pQVNBRElBUVFQeG9nQVNBRWFrRUFPZ0FBSUFKQmhKMEVLQUlBTmdJWVFZU2RCQ0FDTmdJQUN5QUNRYlNWQXlBQUlBSnlHeUVDQ3lBQ0N5d0JBWDhnQUNnQ0FDSUJCRUFnQVJEY0JrRi9FTGdCUlFSQUlBQW9BZ0JGRHdzZ0FFRUFOZ0lBQzBFQkN5d0JBWDhnQUNnQ0FDSUJCRUFnQVJEZ0JrRi9FTGdCUlFSQUlBQW9BZ0JGRHdzZ0FFRUFOZ0lBQzBFQkN5Y0JBWDhDUUNBQUtBSUFJZ0pGRFFBZ0FpQUJFS3dOUVg4UXVBRkZEUUFnQUVFQU5nSUFDd3NUQUNBQUlBQW9BZ0JCREdzb0FnQnFFSmdFQ3hNQUlBQWdBQ2dDQUVFTWF5Z0NBR29RcFFNTE1RRUJmeUFBS0FJTUlnRWdBQ2dDRUVZRVFDQUFJQUFvQWdBb0FpZ1JBUUFQQ3lBQUlBRkJCR28yQWd3Z0FTZ0NBQXNuQVFGL0lBQW9BZ3dpQVNBQUtBSVFSZ1JBSUFBZ0FDZ0NBQ2dDSkJFQkFBOExJQUVvQWdBTEVBQWdBQkRXQmlBQkVOWUdjMEVCY3d2QUFnSUJmd1I5SXdCQlFHb2lCaVFBQWtBQ1FDQUFCRUFnQUVFSWFpQUJJQVpCRUdvUS9nSkJmeUVCSUFCQnVBRnFJZ0FnQmlvQ0hDQUdLZ0lRSUFLVUlBWXFBaFFnQTVTU2tpQUdLZ0k4SUFZcUFqQWdBcFFnQmlvQ05DQURsSktTSWdlVklnZ2dCaW9DTENBR0tnSWdJQUtVSUFZcUFpUWdBNVNTa2lBSGxTSUNJQVFnQlJCeVFRQklEUUlnQUNBRUtnSUFJQVVxQWdBZ0JrRU1haUFHUVFocUVOb0JRUUJJRFFJZ0NDQUdLZ0lNa3lJRElBT1VJQUlnQmlvQ0NKTWlBaUFDbEpKREFBQ0FQMTROQWd3QkN5QUJLZ0ljSVFjZ0FTb0NGQ0VJSUFFcUFoQWhDU0FFSUFFcUFnd2dBU29DQUNBQ2xDQUJLZ0lFSUFPVWtwSWdBU29DTENBQktnSWdJQUtVSUFFcUFpUWdBNVNTa2lJS2xUZ0NBQ0FGSUFjZ0NTQUNsQ0FJSUFPVWtwSWdDcFU0QWdBTFFRQWhBUXNnQmtGQWF5UUFJQUVMTkFFQmZ5QUFLQUlNSWdFZ0FDZ0NFRVlFUUNBQUlBQW9BZ0FvQWlnUkFRQVBDeUFBSUFGQkFXbzJBZ3dnQVN3QUFCRERBUXNxQVFGL0lBQW9BZ3dpQVNBQUtBSVFSZ1JBSUFBZ0FDZ0NBQ2dDSkJFQkFBOExJQUVzQUFBUXd3RUxFQUFnQUJEWEJpQUJFTmNHYzBFQmN3c1RBQ0FBSUFBb0FnQkJER3NvQWdCcUVKd0VDeE1BSUFBZ0FDZ0NBRUVNYXlnQ0FHb1FxQU1MS2dBZ0FFSEVqZ00yQWdBZ0FFRUVhaENLQkNBQVFnQTNBaGdnQUVJQU53SVFJQUJDQURjQ0NDQUFDd1FBUVg4TEJ3QWdBQkR1QlFzSEFDQUFFTzRGQ3dRQUlBQUxLZ0FnQUVHRWpnTTJBZ0FnQUVFRWFoQ0tCQ0FBUWdBM0FoZ2dBRUlBTndJUUlBQkNBRGNDQ0NBQUN3a0FJQUFRNUFJUU13dUpBUUVGZnlNQVFSQnJJZ0VrQUNBQlFSQnFJUU1DUUFOQUlBQW9BaVFpQWlBQUtBSW9JQUZCQ0dvZ0F5QUJRUVJxSUFJb0FnQW9BaFFSQ0FBaEJFRi9JUUlnQVVFSWFrRUJJQUVvQWdRZ0FVRUlhbXNpQlNBQUtBSWdFTklCSUFWSERRRUNRQ0FFUVFGckRnSUJBZ0FMQzBGL1FRQWdBQ2dDSUJDdUJCc2hBZ3NnQVVFUWFpUUFJQUlML3dJQ0JYOEJmaU1BUVNCcklnSWtBQUpBSUFBdEFEUUVRQ0FBS0FJd0lRTWdBVVVOQVNBQVFRQTZBRFFnQUVGL05nSXdEQUVMSUFKQkFUWUNHQ0FDUVJocUlBQkJMR29ROEFZb0FnQWlCRUVBSUFSQkFFb2JJUVVDUUFOQUlBTWdCVWNFUUNBQUtBSWdFSzBESWdaQmYwWU5BaUFDUVJocUlBTnFJQVk2QUFBZ0EwRUJhaUVEREFFTEN3SkFJQUF0QURVRVFDQUNJQUlzQUJnMkFoUU1BUXNnQWtFWWFpRURBMEFDUUNBQUtBSW9JZ1VwQWdBaEJ3SkFJQUFvQWlRZ0JTQUNRUmhxSUFKQkdHb2dCR29pQlNBQ1FSQnFJQUpCRkdvZ0F5QUNRUXhxRU84R1FRRnJEZ01BQkFFREN5QUFLQUlvSUFjM0FnQWdCRUVJUmcwRElBQW9BaUFRclFNaUJrRi9SZzBESUFVZ0Jqb0FBQ0FFUVFGcUlRUU1BUXNMSUFJZ0Fpd0FHRFlDRkFzQ1FDQUJSUVJBQTBBZ0JFRUJTQTBDSUFSQkFXc2lCQ0FDUVJocWFpd0FBQ0FBS0FJZ0VLNERRWDlIRFFBTUF3c0FDeUFBSUFJb0FoUTJBakFMSUFJb0FoUWhBd3dCQzBGL0lRTUxJQUpCSUdva0FDQURDd3dBSUFBUW5RUWFJQUFRTXd2T0NRSUtmd0Y5SUFNb0FoZ2hEUUpBUVFFZ0FuUkJvT0FCY1VVZ0FrRU9TM0pGQkVBZ0FDQUVJQU1vQWdnaUJFRUJkR3NnQlNBREtBSVFJZ0pCQVhScklBRnNhbW9oQ0NBQlFRRjBJUTlCQUNBQ2F5RUJRUUFnQkdzaEFDQURLQUlVSVJBZ0F5Z0NEQ0VGQTBBZ0FDRUNJQWdoQnlBQklCQktEUUlEUUNBQ0lBVktSUVJBSUEwdkFRQWlCRUdBSUVjRVFDQUtJQWN0QUFBaURtb2hDaUFFSUE1c0lBdHFJUXNnRGlBT2JDQUphaUVKQ3lBQ1FRRnFJUUlnRFVFQ2FpRU5JQWRCQW1vaEJ3d0JDd3NnQVVFQmFpRUJJQWdnRDJvaENBd0FDd0FMSUFKQkFVMEVRRUVBSUFNb0FoQnJJUWdnQXlnQ0ZDRU9BMEFnQ0NBT1NnMENJQUFnQ0VFQmRDQUZhaUFCYkNBRWFpQURLQUlJSWdkQkFYUnJRUU5zYWlFQ1FRQWdCMnNoQnlBREtBSU1JUThEUUNBSElBOUtSUVJBSUEwdkFRQWlFRUdBSUVjRVFDQUtJQUl0QUFJZ0FpMEFBU0FDTFFBQWFtcEJBMjRpREdvaENpQU1JQkJzSUF0cUlRc2dEQ0FNYkNBSmFpRUpDeUFIUVFGcUlRY2dEVUVDYWlFTklBSkJCbW9oQWd3QkN3c2dDRUVCYWlFSURBQUxBQXNnQWtGK2NVRUNSZ1JBUVFBZ0F5Z0NFR3NoQ0NBREtBSVVJUTREUUNBSUlBNUtEUUlnQUNBSVFRRjBJQVZxSUFGc0lBUnFJQU1vQWdnaUIwRUJkR3RCQW5ScUlRSkJBQ0FIYXlFSElBTW9BZ3doRHdOQUlBY2dEMHBGQkVBZ0RTOEJBQ0lRUVlBZ1J3UkFJQW9nQWkwQUFpQUNMUUFCSUFJdEFBQnFha0VEYmlJTWFpRUtJQXdnRUd3Z0Myb2hDeUFNSUF4c0lBbHFJUWtMSUFkQkFXb2hCeUFOUVFKcUlRMGdBa0VJYWlFQ0RBRUxDeUFJUVFGcUlRZ01BQXNBQ3lBQ1FYMXhRUVJHQkVCQkFDQURLQUlRYXlFSUlBTW9BaFFoRGdOQUlBZ2dEa29OQWlBQUlBaEJBWFFnQldvZ0FXd2dCR29nQXlnQ0NDSUhRUUYwYTBFQ2RHb2hBa0VBSUFkcklRY2dBeWdDRENFUEEwQWdCeUFQU2tVRVFDQU5Md0VBSWhCQmdDQkhCRUFnQ2lBQ0xRQURJQUl0QUFJZ0FpMEFBV3BxUVFOdUlneHFJUW9nRENBUWJDQUxhaUVMSUF3Z0RHd2dDV29oQ1FzZ0IwRUJhaUVISUExQkFtb2hEU0FDUVFocUlRSU1BUXNMSUFoQkFXb2hDQXdBQ3dBTEFrQUNRQ0FDUVFkckRnSUFBUUlMUVFBZ0F5Z0NFR3NoQ0NBREtBSVVJUTREUUNBSUlBNUtEUUlnQUNBSVFRRjBJQVZxSUFGc0lBUnFJQU1vQWdnaUFrRUJkR3RCQVhScUlRZEJBQ0FDYXlFQ0lBTW9BZ3doRHdOQUlBSWdEMHBGQkVBZ0RTOEJBQ0lRUVlBZ1J3UkFJQW9nQnkwQUFTSU1haUVLSUF3Z0VHd2dDMm9oQ3lBTUlBeHNJQWxxSVFrTElBSkJBV29oQWlBTlFRSnFJUTBnQjBFRWFpRUhEQUVMQ3lBSVFRRnFJUWdNQUFzQUMwRUFJQU1vQWhCcklRZ2dBeWdDRkNFT0EwQWdDQ0FPU2cwQklBQWdDRUVCZENBRmFpQUJiQ0FFYWlBREtBSUlJZ0pCQVhSclFRRjBhaUVIUVFBZ0Ftc2hBaUFES0FJTUlROERRQ0FDSUE5S1JRUkFJQTB2QVFBaUVFR0FJRWNFUUNBS0lBY3RBQUFpREdvaENpQU1JQkJzSUF0cUlRc2dEQ0FNYkNBSmFpRUpDeUFDUVFGcUlRSWdEVUVDYWlFTklBZEJCR29oQnd3QkN3c2dDRUVCYWlFSURBQUxBQXNnQmdKL1FRQWdDU0FLSUFwc0lBTW9BaVFpQUcxcklnRkZEUUFhSUFzZ0F5Z0NJQ0FLYkNBQWJXdEI1QUJzSUFNb0FoeHRRZVFBYkFKL0lBR3lrU0lSaTBNQUFBQlBYUVJBSUJHb0RBRUxRWUNBZ0lCNEMyMExOZ0lBQ3gwQUlBQWdBU0FDSUFNZ0JDQUZJQVlnQnlBQUtBSUFLQUlRRVE0QUN3a0FJQUFnQVJESkRRdUlBd0lGZndGK0l3QkJJR3NpQWlRQUFrQWdBQzBBTkFSQUlBQW9BakFoQXlBQlJRMEJJQUJCQURvQU5DQUFRWDgyQWpBTUFRc2dBa0VCTmdJWUlBSkJHR29nQUVFc2FoRHdCaWdDQUNJRVFRQWdCRUVBU2hzaEJRSkFBMEFnQXlBRlJ3UkFJQUFvQWlBUXJRTWlCa0YvUmcwQ0lBSkJHR29nQTJvZ0Jqb0FBQ0FEUVFGcUlRTU1BUXNMQWtBZ0FDMEFOUVJBSUFJZ0FpMEFHRG9BRnd3QkN5QUNRUmhxSVFNRFFBSkFJQUFvQWlnaUJTa0NBQ0VIQWtBZ0FDZ0NKQ0FGSUFKQkdHb2dBa0VZYWlBRWFpSUZJQUpCRUdvZ0FrRVhhaUFESUFKQkRHb1E3d1pCQVdzT0F3QUVBUU1MSUFBb0FpZ2dCemNDQUNBRVFRaEdEUU1nQUNnQ0lCQ3RBeUlHUVg5R0RRTWdCU0FHT2dBQUlBUkJBV29oQkF3QkN3c2dBaUFDTFFBWU9nQVhDd0pBSUFGRkJFQURRQ0FFUVFGSURRSWdCRUVCYXlJRUlBSkJHR3BxTEFBQUVNTUJJQUFvQWlBUXJnTkJmMGNOQUF3REN3QUxJQUFnQWl3QUZ4RERBVFlDTUFzZ0Fpd0FGeEREQVNFRERBRUxRWDhoQXdzZ0FrRWdhaVFBSUFNTERBQWdBQkNlQkJvZ0FCQXpDeEVBSUFBZ0FDZ0NCRUdBd0FCeU5nSUVDeElBSUFBUTZ3VWdBRUhJa1FNMkFnQWdBQXRlQVFKL0l3QkJFR3NpQXlRQUlBQVE1QVloQkNBQUlBRTJBaUFnQUVHY2pRTTJBZ0FnQTBFSWFpQUVFS3NESUFOQkNHb1FvQVFoQVNBRFFRaHFFRVFnQUNBQ05nSW9JQUFnQVRZQ0pDQUFJQUVRdmdJNkFDd2dBMEVRYWlRQUMxNEJBbjhqQUVFUWF5SURKQUFnQUJEcEJpRUVJQUFnQVRZQ0lDQUFRYlNNQXpZQ0FDQURRUWhxSUFRUXF3TWdBMEVJYWhDaEJDRUJJQU5CQ0dvUVJDQUFJQUkyQWlnZ0FDQUJOZ0lrSUFBZ0FSQytBam9BTENBRFFSQnFKQUFMMndrQkNIOGpBRUhRQjJzaUFTUUFBa0FDUUFKQUFuOENRRUhnNndFdEFBQUVRRUhnNndGQjRRNFFtd0lOQVFzZ0FVSFFCV29nQUVIL0FSQ3dCQ0FCUVFBNkFNOEhRUUVNQVFzZ0FTQUFOZ0t3QVNBQlFlRHJBVFlDdEFFZ0FVSEFBV3BCNWhjZ0FVR3dBV29Rd3dJZ0FVSEFBV3BCb2lRUTV3SWlBa1VFUUNBQklBQTJBcUFCUVFCQkEwSEpLU0FCUWFBQmFoQTRJQUZCbElNRUtBSUFFTGdETmdLVUFTQUJRYVF6TmdLUUFVRUFRUU5CNlN3Z0FVR1FBV29RT0F3Q0MwRUFDeUVIQWtBQ1FFSDBDQkE2SWdVRVFFRUJJUVlDUUNBSERRQWdBVUhBQVdvZ0FoRG1Ba1VOQWlBQklBRkJ6QVZxTmdLQUFTQUJRY0FCYWtITlBpQUJRWUFCYWhEOUFVRUJSdzBDSUFFb0Fzd0ZJZ1pCQUVvTkFBd0NDeUFGUVFBMkFwZ0JJQVVnQmpZQ0JDQUZJQVpCOEFCc0VEb2lBellDQUNBREJFQUNRQU5BSUFFZ0JEWUN6QVVnQkNBR1RnMEJJQUVnQkVFQmFqWUNjRUVBUVFGQmpNUUFJQUZCOEFCcUVEZ2dCMFVFUUNBQlFjQUJhaUFDRU9ZQ1JRMENJQUVnQVVIUUJXbzJBbUFnQVVIQUFXcEI1OG9BSUFGQjRBQnFFUDBCUVFGSERRSWdBVUhRQldvUXlRa0xRUUJCQVVHdDBBQkJBQkE0SUFGQjBBVnFFSk1PSVFBZ0F5QUJLQUxNQlVId0FHeHFJQUEyQWdBZ0FFVUVRQ0FCSUFGQjBBVnFOZ0lBUVFCQkEwSHUxQUFnQVJBNElBTVFNeUFGRURNZ0FrVU5CaUFDRUxNQkRBWUxRUUJCQVVIMTJnQkJBQkE0UVFCQkFVSEgzZ0JCQUJBNElBRkIwQVZxRVBJTklRQWdBeUFCS0FMTUJVSHdBR3hxSUFBMkFnUWdBRVVFUUNBQklBRkIwQVZxTmdJUVFRQkJBMEg3NFFBZ0FVRVFhaEE0SUFNZ0FTZ0N6QVZCOEFCc2FoQ0ZEaUFERURNZ0JSQXpJQUpGRFFZZ0FoQ3pBUXdHQzBFQVFRRkI5ZG9BUVFBUU9DQURJQUVvQXN3RlFmQUFiR3BCQURZQ0NBSkFBa0FnQndSQVFRQWhBQ0FCS0FMTUJTRUlBMEJCQUNFRUlBQkJBMFlOQWdOQUlBUkJCRWNFUUNBRElBaEI4QUJzYWlBQVFRUjBhaUFFUVFKMGFrTUFBSUEvUXdBQUFBQWdBQ0FFUmhzNEFnd2dCRUVCYWlFRURBRUxDeUFBUVFGcUlRQU1BQXNBQ3lBQlFjQUJhaUFDRU9ZQ1JRMERJQUVnQXlBQktBTE1CVUh3QUd4cUlnQkJER28yQWtBZ0FTQUFRUkJxTmdKRUlBRWdBRUVVYWpZQ1NDQUJJQUJCR0dvMkFrd2dBVUhBQVdwQmhmMEFJQUZCUUdzUS9RRkJCRWNOQ1NBQlFjQUJhaUFDRU9ZQ1JRMERJQUVnQXlBQktBTE1CVUh3QUd4cUlnQkJIR28yQWpBZ0FTQUFRU0JxTmdJMElBRWdBRUVrYWpZQ09DQUJJQUJCS0dvMkFqd2dBVUhBQVdwQmhmMEFJQUZCTUdvUS9RRkJCRWNOQ1NBQlFjQUJhaUFDRU9ZQ1JRMERJQUVnQXlBQktBTE1CVUh3QUd4cUlnQkJMR28yQWlBZ0FTQUFRVEJxTmdJa0lBRWdBRUUwYWpZQ0tDQUJJQUJCT0dvMkFpd2dBVUhBQVdwQmhmMEFJQUZCSUdvUS9RRkJCRWNOQVNBQktBTE1CU0VJQ3lBRElBaEI4QUJzYWlJQVFReHFJQUJCUEdvUTZRa2dBVUhRQldvUXpnbEJnQUlRT2lFQUlBTWdBU2dDekFVaUJFSHdBR3hxSUFBMkFtd2dBRVVOQ1NBQUlBRkIwQVZxUVlBQ0VMQUVJQVJCQVdvaEJBd0JDd3NNQmdzZ0FnUkFJQUlRc3dFTElBWWdBU2dDekFWTURRUkJBQkFCQUFzTUJRc01CQXNnQWhDekFTQUZFRE1MUVFBaEJRc2dBVUhRQjJva0FDQUZEd3RCQUVFRFFjQ0FBVUVBRURnZ0FoQ3pBVUVBRUFFQUMwRUFRUU5CbVRsQkFCQTRRUUVRQVFBTENnQWdBU0FBYTBFQ2RRc0xBQ0FBSUFFZ0FoRFhEUXRGQVFKOUlBRXFBZ0FnQUNvQ0FDSURreUFDS2dJRUlBQXFBZ1FpQkpPVUlBRXFBZ1FnQkpNZ0Fpb0NBQ0FEazVTVFF3QUFBRCtVSWdPTUlBTWdBME1BQUFBQVhSc0xqQUVCQTM5QjBJd0VRZENNQkNnQ0FFRUJhaUlGTmdJQUlBQWdCVFlDQUFKQUlBTUVRQU5BSUFJZ0JFRURkR29pQmlnQ0FFVU5BaUFFUVFGcUlnUWdBMGNOQUFzTElBQWdBU0FDSUFOQkJIUkJDSElRMndJZ0EwRUJkQ0lBRVBzR0lRRWdBQkFDSUFFUEN5QUdJQVUyQWdBZ0FpQUVRUU4wYWlJQUlBRTJBZ1FnQUVFQU5nSUlJQU1RQWlBQ0M0Z1JBZ1YvQzM0akFFSEFBV3NpQlNRQUlBUkMvLy8vLy8vL1A0TWhFaUFDUXYvLy8vLy8veitESVF3Z0FpQUVoVUtBZ0lDQWdJQ0FnSUIvZ3lFUklBUkNNSWluUWYvL0FYRWhCd0pBQWtBQ1FDQUNRakNJcDBILy93RnhJZ2xCQVd0Qi9mOEJUUVJBSUFkQkFXdEIvdjhCU1EwQkN5QUJVQ0FDUXYvLy8vLy8vLy8vL3dDRElncENnSUNBZ0lDQXdQLy9BRlFnQ2tLQWdJQ0FnSURBLy84QVVSdEZCRUFnQWtLQWdJQ0FnSUFnaENFUkRBSUxJQU5RSUFSQy8vLy8vLy8vLy8vL0FJTWlBa0tBZ0lDQWdJREEvLzhBVkNBQ1FvQ0FnSUNBZ01ELy93QlJHMFVFUUNBRVFvQ0FnSUNBZ0NDRUlSRWdBeUVCREFJTElBRWdDa0tBZ0lDQWdJREEvLzhBaFlSUUJFQWdBeUFDUW9DQWdJQ0FnTUQvL3dDRmhGQUVRRUlBSVFGQ2dJQ0FnSUNBNFAvL0FDRVJEQU1MSUJGQ2dJQ0FnSUNBd1AvL0FJUWhFVUlBSVFFTUFnc2dBeUFDUW9DQWdJQ0FnTUQvL3dDRmhGQUVRRUlBSVFFTUFnc2dBU0FLaEZBTkFpQUNJQU9FVUFSQUlCRkNnSUNBZ0lDQXdQLy9BSVFoRVVJQUlRRU1BZ3NnQ2tMLy8vLy8vLzgvV0FSQUlBVkJzQUZxSUFFZ0RDQUJJQXdnREZBaUJodDVJQVpCQm5TdGZLY2lCa0VQYXhDVkFVRVFJQVpySVFZZ0JTa0R1QUVoRENBRktRT3dBU0VCQ3lBQ1F2Ly8vLy8vL3o5V0RRQWdCVUdnQVdvZ0F5QVNJQU1nRWlBU1VDSUlHM2tnQ0VFR2RLMThweUlJUVE5ckVKVUJJQVlnQ0dwQkVHc2hCaUFGS1FPb0FTRVNJQVVwQTZBQklRTUxJQVZCa0FGcUlCSkNnSUNBZ0lDQXdBQ0VJaFJDRDRZZ0EwSXhpSVFpQWtLRXlmbk92K2E4Z3ZVQUlBSjlJZ1FRd0FFZ0JVR0FBV3BDQUNBRktRT1lBWDBnQkJEQUFTQUZRZkFBYWlBRktRT0lBVUlCaGlBRktRT0FBVUkvaUlRaUJDQUNFTUFCSUFWQjRBQnFJQVJDQUNBRktRTjRmUkRBQVNBRlFkQUFhaUFGS1FOb1FnR0dJQVVwQTJCQ1A0aUVJZ1FnQWhEQUFTQUZRVUJySUFSQ0FDQUZLUU5ZZlJEQUFTQUZRVEJxSUFVcEEwaENBWVlnQlNrRFFFSS9pSVFpQkNBQ0VNQUJJQVZCSUdvZ0JFSUFJQVVwQXpoOUVNQUJJQVZCRUdvZ0JTa0RLRUlCaGlBRktRTWdRaitJaENJRUlBSVF3QUVnQlNBRVFnQWdCU2tER0gwUXdBRWdCaUFKSUFkcmFpRUdBbjVDQUNBRktRTUlRZ0dHSUFVcEF3QkNQNGlFUWdGOUlncEMvLy8vL3crRElnUWdBa0lnaUNJTGZpSU9JQXBDSUlnaUNpQUNRdi8vLy84UGd5SVFmbndpQWtJZ2lDQUNJQTVVclVJZ2hvUWdDaUFMZm53Z0FrSWdoaUlMSUFRZ0VINThJZ0lnQzFTdGZDQUNJQUlnQkNBRFFoR0lRdi8vLy84UGd5SU9maUlRSUFvZ0EwSVBoa0tBZ1A3L0Q0TWlEWDU4SWd0Q0lJWWlEeUFFSUExK2ZDQVBWSzBnQ2lBT2ZpQUxJQkJVclVJZ2hpQUxRaUNJaEh4OGZDSUNWcTE4SUFKQ0FGS3RmSDBpQzBMLy8vLy9ENE1pRGlBRWZpSVFJQW9nRG40aURTQUVJQXRDSUlnaUQzNThJZ3RDSUlaOElnNGdFRlN0SUFvZ0QzNGdDeUFOVksxQ0lJWWdDMElnaUlSOGZDQU9RZ0FnQW4waUFrSWdpQ0lMSUFSK0loQWdBa0wvLy8vL0Q0TWlEU0FLZm53aUFrSWdoaUlQSUFRZ0RYNThJQTlVclNBS0lBdCtJQUlnRUZTdFFpQ0dJQUpDSUlpRWZIeDhJZ0lnRGxTdGZDQUNRZ0o5SWhBZ0FsU3RmRUlCZlNJTFF2Ly8vLzhQZ3lJQ0lBeENBb1lnQVVJK2lJUkMvLy8vL3crRElnUitJZzRnQVVJZWlFTC8vLy8vRDRNaUNpQUxRaUNJSWd0K2ZDSU5JQTVVclNBTklBMGdFRUlnaUNJT0lBeENIb2hDLy8vdi93K0RRb0NBRUlRaURINThJZzFXclh3Z0N5QU1mbndnQWlBTWZpSVRJQVFnQzM1OElnOGdFMVN0UWlDR0lBOUNJSWlFZkNBTklBMGdEMElnaG53aURWYXRmQ0FOSUEwZ0NpQU9maUlUSUJCQy8vLy8vdytESWhBZ0JINThJZzhnRTFTdElBOGdEeUFDSUFGQ0FvWkMvUC8vL3crREloTitmQ0lQVnExOGZDSU5WcTE4SUEwZ0N5QVRmaUlMSUF3Z0VINThJZ3dnQkNBT2Zud2lCQ0FDSUFwK2ZDSUNRaUNJSUFJZ0JGU3RJQXNnREZhdElBUWdERlN0Zkh4Q0lJYUVmQ0lFSUExVXJYd2dCQ0FFSUE4Z0RpQVRmaUlNSUFvZ0VINThJZ3BDSUlnZ0NpQU1WSzFDSUlhRWZDSUtJQTlVclNBS0lBSkNJSVo4SUFwVXJYeDhJZ1JXclh3aUFrTC8vLy8vLy8vL0FGZ0VRQ0FCUWpHR0lBUkMvLy8vL3crRElnRWdBMEwvLy8vL0Q0TWlDbjRpREVJQVVxMTlRZ0FnREgwaUVDQUVRaUNJSWd3Z0NuNGlEU0FCSUFOQ0lJZ2lDMzU4SWc1Q0lJWWlEMVN0ZlNBQ1F2Ly8vLzhQZ3lBS2ZpQUJJQkpDLy8vLy93K0RmbndnQ3lBTWZud2dEU0FPVnExQ0lJWWdEa0lnaUlSOElBUWdGRUlnaUg0Z0F5QUNRaUNJZm53Z0FpQUxmbndnRENBU2ZueENJSVo4ZlNFU0lBWkJBV3NoQmlBUUlBOTlEQUVMSUFSQ0lZZ2hDeUFCUWpDR0lBSkNQNFlnQkVJQmlJUWlCRUwvLy8vL0Q0TWlBU0FEUXYvLy8vOFBneUlLZmlJTVFnQlNyWDFDQUNBTWZTSU9JQUVnQTBJZ2lDSU1maUlRSUFzZ0FrSWZob1FpRFVMLy8vLy9ENE1pRHlBS2Zud2lDMElnaGlJVFZLMTlJQVFnRkVJZ2lINGdBeUFDUWlHSWZud2dBa0lCaUNJQ0lBeCtmQ0FOSUJKK2ZFSWdoaUFNSUE5K0lBSkMvLy8vL3crRElBcCtmQ0FCSUJKQy8vLy8vdytEZm53Z0N5QVFWSzFDSUlZZ0MwSWdpSVI4ZkgwaEVpQU9JQk45Q3lFQklBWkJnSUFCVGdSQUlCRkNnSUNBZ0lDQXdQLy9BSVFoRVVJQUlRRU1BUXNnQmtILy93QnFJUWNnQmtHQmdIOU1CRUFDUUNBSERRQWdCQ0FCUWdHR0lBTldJQkpDQVlZZ0FVSS9pSVFpQVNBVVZpQUJJQlJSRzYxOElnRWdCRlN0SUFKQy8vLy8vLy8vUDROOElnSkNnSUNBZ0lDQXdBQ0RVQTBBSUFJZ0VZUWhFUXdDQzBJQUlRRU1BUXNnQkNBQlFnR0dJQU5hSUJKQ0FZWWdBVUkvaUlRaUFTQVVXaUFCSUJSUkc2MThJZ0VnQkZTdElBSkMvLy8vLy8vL1A0TjhJQWV0UWpDR2ZDQVJoQ0VSQ3lBQUlBRTNBd0FnQUNBUk53TUlJQVZCd0FGcUpBQVBDeUFBUWdBM0F3QWdBRUtBZ0lDQWdJRGcvLzhBSUJFZ0FpQURoRkFiTndNSUlBVkJ3QUZxSkFBTHRnTUNBMzhCZmlNQVFTQnJJZ01rQUFKQUlBRkMvLy8vLy8vLy8vLy9BSU1pQlVLQWdJQ0FnSURBd0Q5OUlBVkNnSUNBZ0lDQXdML0FBSDFVQkVBZ0FVSVppS2NoQkNBQVVDQUJRdi8vL3crRElnVkNnSUNBQ0ZRZ0JVS0FnSUFJVVJ0RkJFQWdCRUdCZ0lDQUJHb2hBZ3dDQ3lBRVFZQ0FnSUFFYWlFQ0lBQWdCVUtBZ0lBSWhZUkNBRklOQVNBQ0lBUkJBWEZxSVFJTUFRc2dBRkFnQlVLQWdJQ0FnSURBLy84QVZDQUZRb0NBZ0lDQWdNRC8vd0JSRzBVRVFDQUJRaG1JcDBILy8vOEJjVUdBZ0lEK0IzSWhBZ3dCQzBHQWdJRDhCeUVDSUFWQy8vLy8vLy8vdjcvQUFGWU5BRUVBSVFJZ0JVSXdpS2NpQkVHUi9nQkpEUUFnQTBFUWFpQUFJQUZDLy8vLy8vLy9QNE5DZ0lDQWdJQ0F3QUNFSWdVZ0JFR0IvZ0JyRUpVQklBTWdBQ0FGUVlIL0FDQUVheERCQWlBREtRTUlJZ0JDR1lpbklRSWdBeWtEQUNBREtRTVFJQU1wQXhpRVFnQlNyWVFpQlZBZ0FFTC8vLzhQZ3lJQVFvQ0FnQWhVSUFCQ2dJQ0FDRkViUlFSQUlBSkJBV29oQWd3QkN5QUZJQUJDZ0lDQUNJV0VRZ0JTRFFBZ0FrRUJjU0FDYWlFQ0N5QURRU0JxSkFBZ0FpQUJRaUNJcDBHQWdJQ0FlSEZ5dmd2RUFRSUJmd0orUVg4aEF3SkFJQUJDQUZJZ0FVTC8vLy8vLy8vLy8vOEFneUlFUW9DQWdJQ0FnTUQvL3dCV0lBUkNnSUNBZ0lDQXdQLy9BRkViRFFCQkFDQUNRdi8vLy8vLy8vLy8vd0NESWdWQ2dJQ0FnSUNBd1AvL0FGWWdCVUtBZ0lDQWdJREEvLzhBVVJzTkFDQUFJQVFnQllTRVVBUkFRUUFQQ3lBQklBS0RRZ0JaQkVCQkFDQUJJQUpUSUFFZ0FsRWJEUUVnQUNBQklBS0ZoRUlBVWc4TElBQkNBRklnQVNBQ1ZTQUJJQUpSR3cwQUlBQWdBU0FDaFlSQ0FGSWhBd3NnQXd1a0FRRUZmeU1BUVlBQ2F5SUVKQUFDUUNBQ1FRSklEUUFnQVNBQ1FRSjBhaUlISUFRMkFnQWdBRVVOQUNBRUlRTURRQ0FESUFFb0FnQWdBRUdBQWlBQVFZQUNTUnNpQlJBL0drRUFJUU1EUUNBQklBTkJBblJxSWdZb0FnQWdBU0FEUVFGcUlnTkJBblJxS0FJQUlBVVFQeG9nQmlBR0tBSUFJQVZxTmdJQUlBSWdBMGNOQUFzZ0FDQUZheUlBUlEwQklBY29BZ0FoQXd3QUN3QUxJQVJCZ0FKcUpBQUxKZ0VCZnlBQUtBSUFRUUZyYUNJQlJRUkFJQUFvQWdSb0lnQkJJR3BCQUNBQUd3OExJQUVMaXcwREQzMERmd0YrSXdCQklHc2lGU1FBQWtBQ1FDQUNRUUJJRFFBQ1FBSkFBa0FDUUFKQUlBSU9CQUFCQWdNRUN5QUZRUUp0c2lFSklBUkJBbTJ5SVFvZ0JVRUliYkloQ3lBRVFRaHRzaUVNSUFWQkIyeEJDRzJ5SVEwZ0JFRUhiRUVJYmJJaERrRUFJUUpCZnlFRkEwQUNRQUpBQWtBZ0FDQUNRUmhzYWlJQktBSU1RUUZxRGdJQ0FBRUxJQUVxQWhBaUJpQU1YU0FHSUE1ZWNnMEFJQUVxQWhRaUJ5QUxYU0FISUExZWNnMEFJQVlnQ3BNaUJpQUdsQ0FISUFtVElnWWdCcFNTSWdZZ0NGNUJBWE1OQUNBQ0lRVWdCaUVJQ3lBQ1FRRnFJUUlNQVFzTFFYOGhBaUFGUVg5R0RRVWdBQ0FGUVJoc2FrRUJOZ0lNSUFVaEFnd0ZDeUFGUVFodHNpRUpJQVJCQ0cyeUlRb2dCVUVIYkVFSWJiSWhDeUFFUVFkc1FRaHRzaUVNUVg4aEJVRUFJUUlEUUFKQUFrQUNRQ0FBSUFKQkdHeHFJZ0VvQWd4QkFXb09BZ0lBQVFzZ0FTb0NFQ0lHSUFwZElBWWdERjV5RFFBZ0FTb0NGQ0lISUFsZElBY2dDMTV5RFFBZ0JpQURLZ0lBa3lJR0lBYVVJQWNnQXlvQ0JKTWlCaUFHbEpJaUJpQUlYa0VCY3cwQUlBWWhDQ0FDSVFVTElBSkJBV29oQWd3QkN3dEJmeUVDSUFWQmYwWU5CQ0FBSUFWQkdHeHFRUUUyQWd3Z0JTRUNEQVFMSUFWQkNHMnlJUWtnQkVFSWJiSWhDaUFGUVFkc1FRaHRzaUVMSUFSQkIyeEJDRzJ5SVF4QmZ5RUZRUUFoQWdOQUFrQUNRQUpBSUFBZ0FrRVliR29pQVNnQ0RFRUJhZzRDQWdBQkN5QUJLZ0lRSWdZZ0NsMGdCaUFNWG5JTkFDQUJLZ0lVSWdjZ0NWMGdCeUFMWG5JTkFDQUdJQU1xQWdBaUJwTWdBeW9DRENBREtnSUVJZzJUbENBSElBMlRJQU1xQWdnZ0JwT1VreUlHSUFhVUlnWWdDRjVCQVhNTkFDQUdJUWdnQWlFRkN5QUNRUUZxSVFJTUFRc0xRWDhoQWlBRlFYOUdEUU1nQUNBRlFSaHNha0VCTmdJTUlBVWhBZ3dEQ3lBRElBTkJDR29nRlVFY2FpQVZRUmhxRUtjRUlBTWdBMEVRYWlBVlFSUnFJQlZCRUdvUXB3UWdGU29DRUNJTElCVXFBaHdpQ1pRaUNDQVZLZ0lVSWd3Z0ZTb0NHQ0lLbENJR2t5RU5JQVlnQ0pNaERpQURRUmhxSVJjZ0JVRUliYkloRHlBRVFRaHRzaUVRSUFWQkIyeEJDRzJ5SVJFZ0JFRUhiRUVJYmJJaEVrRi9JUUpCQUNFRVF3QUFBQUFoQ0FOQUFrQUNmd0ovQWtBQ1FBSkFJQUFnQkVFWWJHb2lBU2dDREVFQmFnNENBUUFGQ3lBQktnSVFJZ1lnRUYwZ0JpQVNYbklOQkNBQktnSVVJZ2NnRDEwZ0J5QVJYbklOQkNBRElBWTRBaGdnQXlBQktnSVVPQUljSUFNZ0Z5QVZRUXhxSUJWQkNHb1Fwd1FnRlNvQ0RDRUdJQTVEQUFBQUFHQWlBVVVFUUNBVktnSUlJUWNNQWdzZ0NpQUdsQ0FKSUJVcUFnZ2lCNVNUUXdBQUFBQmdRUUZ6RFFGQkFTRUZRUU1nQ3lBR2xDQU1JQWVVazBNQUFBQUFZQTBDR2tFQ0lSWkJBd3dEQ3lBQ1FYOUdEUWNnQUNBQ1FSaHNha0VCTmdJTURBY0xJQTFEQUFBQUFHQkJBWE1nQ3lBR2xDSVRJQXdnQjVRaUZKTkRBQUFBQUdCQkFYTnlSUVJBUVFJaEJTQUtJQWFVSUFrZ0I1U1RRd0FBQUFCZ0JFQkJBeUVXUVFFTUF3dEJBU0VXUVFNTUFnc2dDU0FIbENBS0lBYVVrME1BQUFBQVlFRUJjeUFVSUJPVFF3QUFBQUJnUVFGemNnMENRUU1oQlNBQkJFQkJBaUVXUVFFTUFndEJBUXNoRmtFQ0N5RUJJQU1nQlNBQklCWVEyUTBpQmlBSVhrRUJjdzBBSUFZaENDQUVJUUlMSUFSQkFXb2hCQXdBQ3dBTEFrQURRQUpBQWtBQ1FDQUJJQlpCR0d4cUlnTW9BZ3hCQVdvT0FnSUFBUXNnQTBFQk5nSU1RUUFoQWdOQUFrQUNRQ0FBSUFKQkdHeHFJZ1FvQWd4QkFXb09BZ01BQVFzZ0F5Z0NBQ0FFS0FJQVJ3MEFJQU1vQWdRZ0FDQUNRUmhzYWlJRktBSUVSdzBBSUFNb0FnZ2dCU2dDQ0VZTkJRc2dBa0VCYWlFQ0RBQUxBQXNnRmtFQmFpRVdEQUVMQ3lBQlFYODJBZ3hCQUNFQ1FkaUJCRUVBUWRpQkJDZ0NBQ0lCQkg4Z0FRVkJvSU1FUVFBUUdVRUJhNjAzQXdCQjJJRUVLQUlBQzBFQmFpSUJJQUZCZ0FGR0d6WUNBRUVBSVFRRFFBSkFBa0FDUUNBQUlBSkJHR3hxS0FJTVFRRnFEZ0lDQUFFTElBUkJBV29oQkFzZ0FrRUJhaUVDREFFTEN5QUVSUTBCQW44Q2YwR2dnd1JCb0lNRUtRTUFRcTMrMWVUVWhmMm8yQUIrUWdGOEloZzNBd0FnQkxJZ0dFSWhpS2V5bEVNQUFBQXdsQ0lJaTBNQUFBQlBYUXNFUUNBSXFBd0JDMEdBZ0lDQWVBc2hBVUVBSVFSQkFDRUZBMEFDUUFKQUlBQWdCRUVZYkdvaUF5Z0NEQ0lDUVFGcURnSUZBQUVMSUFFZ0JVWUVRQ0FEUVFFMkFnd2dCQ0VDREFVTElBVkJBV29oQlFzZ0JFRUJhaUVFREFBTEFBc2dCRUVCTmdJTURBRUxRWDhoQWdzZ0ZVRWdhaVFBSUFJTHlnUUJCbjhqQUVIUUFXc2lCQ1FBSUFSQ0FUY0RDQUpBSUFFZ0Ftd2lDVVVOQUNBRUlBSTJBaEFnQkNBQ05nSVVRUUFnQW1zaENDQUNJZ0VoQjBFQ0lRVURRQ0FFUVJCcUlBVkJBblJxSUFFaUJpQUNJQWRxYWlJQk5nSUFJQVZCQVdvaEJTQUdJUWNnQVNBSlNRMEFDd0pBSUFBZ0FDQUphaUFJYWlJR1R3UkFRUUVoQlVFQklRRU1BUXRCQVNFRlFRRWhBUU5BQW44Z0JVRURjVUVEUmdSQUlBQWdBaUFESUFFZ0JFRVFhaENvQkNBRVFRaHFRUUlRc3dNZ0FVRUNhZ3dCQ3dKQUlBUkJFR29nQVVFQmF5SUhRUUowYWlnQ0FDQUdJQUJyVHdSQUlBQWdBaUFESUFSQkNHb2dBVUVBSUFSQkVHb1FzZ01NQVFzZ0FDQUNJQU1nQVNBRVFSQnFFS2dFQ3lBQlFRRkdCRUFnQkVFSWFrRUJFTEVEUVFBTUFRc2dCRUVJYWlBSEVMRURRUUVMSVFFZ0JDQUVLQUlJUVFGeUlnVTJBZ2dnQUNBQ2FpSUFJQVpKRFFBTEN5QUFJQUlnQXlBRVFRaHFJQUZCQUNBRVFSQnFFTElEQTBBQ2Z3SkFBa0FnQVVFQlJ5QUZRUUZIY2tVRVFDQUVLQUlNRFFFTUJRc2dBVUVCU2cwQkN5QUVRUWhxSUFSQkNHb1FnQWNpQmhDekF5QUVLQUlJSVFVZ0FTQUdhZ3dCQ3lBRVFRaHFRUUlRc1FNZ0JDQUVLQUlJUVFkek5nSUlJQVJCQ0dwQkFSQ3pBeUFBSUFocUlnY2dCRUVRYWlBQlFRSnJJZ1pCQW5ScUtBSUFheUFDSUFNZ0JFRUlhaUFCUVFGclFRRWdCRUVRYWhDeUF5QUVRUWhxUVFFUXNRTWdCQ0FFS0FJSVFRRnlJZ1UyQWdnZ0J5QUNJQU1nQkVFSWFpQUdRUUVnQkVFUWFoQ3lBeUFHQ3lFQklBQWdDR29oQUF3QUN3QUxJQVJCMEFGcUpBQUxTUUVCZnlNQVFaQUJheUlESkFBZ0EwRUFRWkFCRURzaUEwRi9OZ0pNSUFNZ0FEWUNMQ0FEUWZzQk5nSWdJQU1nQURZQ1ZDQURJQUVnQWhEbkRTRUFJQU5Ca0FGcUpBQWdBQXREQUFKQUlBQkZEUUFDUUFKQUFrQUNRQ0FCUVFKcURnWUFBUUlDQkFNRUN5QUFJQUk4QUFBUEN5QUFJQUk5QVFBUEN5QUFJQUkrQWdBUEN5QUFJQUkzQXdBTEM3c0VBaE45QVg4akFFRXdheUlYSkFBQ1FDQUFCRUFnQUVFSWFpQUJJQmNRL2dJZ0Z5b0NIQ0lJSUFJcUFnQWlCQ0FYS2dJUUloQ1VJZzhnQWlvQ0JDSUZJQmNxQWhRaUI1UWlDcEtTSUJjcUFpd2lDeUFFSUJjcUFpQWlESlFpRVNBRklCY3FBaVFpRFpRaUVwS1NJZ2FWSVFrZ0Z5b0NEQ0lPSUFRZ0Z5b0NBQ0lUbENJVUlBVWdGeW9DQkNJVmxDSVdrcElnQnBVaEJpQUlJQThnQlVNQUFDQkJraUlGSUFlVWtwSWdDeUFSSUFVZ0RaU1NraUlIbFNFUElBNGdGQ0FGSUJXVWtwSWdCNVVoQnlBSUlBUkRBQUFnUVpJaUJDQVFsQ0FLa3BJZ0N5QUVJQXlVSUJLU2tpSUZsU0VJSUE0Z0JDQVRsQ0FXa3BJZ0JaVWhCQXdCQ3lBQktnSWNJZ2tnQWlvQ0FDSUVJQUVxQWhBaUNKUWlFQ0FDS2dJRUlnVkRBQUFnUVpJaUJpQUJLZ0lVSWdxVWtwSWdBU29DTENJTElBUWdBU29DSUNJTWxDSVJJQVlnQVNvQ0pDSU5sSktTSWdlVklROGdBU29DRENJT0lBUWdBU29DQUNJU2xDSVRJQVlnQVNvQ0JDSUdsSktTSUFlVklRY2dDU0FFUXdBQUlFR1NJZ1FnQ0pRZ0JTQUtsQ0lLa3BJZ0N5QUVJQXlVSUFVZ0RaUWlESktTSWcyVklRZ2dEaUFFSUJLVUlBVWdCcFFpQlpLU0lBMlZJUVFnQ1NBUUlBcVNraUFMSUJFZ0RKS1NJZ2FWSVFrZ0RpQVRJQVdTa2lBR2xTRUdDeUFESUFRZ0JwTWlCQ0FFbENBSUlBbVRJZ1FnQkpTU0lnUWdCeUFHa3lJRklBV1VJQThnQ1pNaUJTQUZsSklpQlNBRUlBVmRJZ0Fia1VOY2p5SkFsRGdDQkNBRElBVWdCQ0FBRzVGRFhJOGlRSlE0QWdBZ0YwRXdhaVFBQy9nREFnTi9BWDRDUUFKQUFrQUNmeUFBS0FJRUlnSWdBQ2dDYUVrRVFDQUFJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QUFFRk1MSWdOQksyc09Bd0VBQVFBTElBTkJNR3NoQVF3QkN5QURRUzFHSVFRQ1FDQUJSUUovSUFBb0FnUWlBaUFBS0FKb1NRUkFJQUFnQWtFQmFqWUNCQ0FDTFFBQURBRUxJQUFRVXdzaUFrRXdheUlCUVFwSmNnMEFJQUFvQW1oRkRRQWdBQ0FBS0FJRVFRRnJOZ0lFQ3lBQ0lRTUxBa0FnQVVFS1NRUkFRUUFoQVFOQUlBTWdBVUVLYkdvaEFRSi9JQUFvQWdRaUFpQUFLQUpvU1FSQUlBQWdBa0VCYWpZQ0JDQUNMUUFBREFFTElBQVFVd3NpQTBFd2F5SUNRUWxOUVFBZ0FVRXdheUlCUWN5WnMrWUFTQnNOQUFzZ0Fhd2hCUUpBSUFKQkNrOE5BQU5BSUFPdElBVkNDbjU4UWpCOUlRVUNmeUFBS0FJRUlnRWdBQ2dDYUVrRVFDQUFJQUZCQVdvMkFnUWdBUzBBQUF3QkN5QUFFRk1MSWdOQk1Hc2lBa0VKU3cwQklBVkNybytGMThmQzY2TUJVdzBBQ3dzZ0FrRUtTUVJBQTBBQ2Z5QUFLQUlFSWdFZ0FDZ0NhRWtFUUNBQUlBRkJBV28yQWdRZ0FTMEFBQXdCQ3lBQUVGTUxRVEJyUVFwSkRRQUxDeUFBS0FKb0JFQWdBQ0FBS0FJRVFRRnJOZ0lFQzBJQUlBVjlJQVVnQkJzaEJRd0JDMEtBZ0lDQWdJQ0FnSUIvSVFVZ0FDZ0NhRVVOQUNBQUlBQW9BZ1JCQVdzMkFnUkNnSUNBZ0lDQWdJQ0FmdzhMSUFVTDd3Y0NCWDhDZmlNQVFUQnJJZ1VrQUFKQUlBSkJBazBFUUNBQ1FRSjBJZ0pCbklNRGFpZ0NBQ0VISUFKQmtJTURhaWdDQUNFSUEwQUNmeUFCS0FJRUlnSWdBU2dDYUVrRVFDQUJJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QUJFRk1MSWdJUWxnSU5BQXRCQVNFR0FrQUNRQ0FDUVN0ckRnTUFBUUFCQzBGL1FRRWdBa0V0UmhzaEJpQUJLQUlFSWdJZ0FTZ0NhRWtFUUNBQklBSkJBV28yQWdRZ0FpMEFBQ0VDREFFTElBRVFVeUVDQ3dKQUFrQURRQ0FFUWRDQ0Eyb3NBQUFnQWtFZ2NrWUVRQUpBSUFSQkJrc05BQ0FCS0FJRUlnSWdBU2dDYUVrRVFDQUJJQUpCQVdvMkFnUWdBaTBBQUNFQ0RBRUxJQUVRVXlFQ0N5QUVRUUZxSWdSQkNFY05BUXdDQ3dzZ0JFRURSd1JBSUFSQkNFWU5BU0FEUlNBRVFRUkpjZzBDSUFSQkNFWU5BUXNnQVNnQ2FDSUNCRUFnQVNBQktBSUVRUUZyTmdJRUN5QURSU0FFUVFSSmNnMEFBMEFnQWdSQUlBRWdBU2dDQkVFQmF6WUNCQXNnQkVFQmF5SUVRUU5MRFFBTEN5QUZJQWF5UXdBQWdIK1VFTm9OSUFVcEF3Z2hDU0FGS1FNQUlRb01BZ3NDUUFKQUFrQWdCQTBBUVFBaEJBTkFJQVJCMllJRGFpd0FBQ0FDUVNCeVJ3MEJBa0FnQkVFQlN3MEFJQUVvQWdRaUFpQUJLQUpvU1FSQUlBRWdBa0VCYWpZQ0JDQUNMUUFBSVFJTUFRc2dBUkJUSVFJTElBUkJBV29pQkVFRFJ3MEFDd3dCQ3dKQUFrQWdCQTRFQUFFQkFnRUxBa0FnQWtFd1J3MEFBbjhnQVNnQ0JDSUVJQUVvQW1oSkJFQWdBU0FFUVFGcU5nSUVJQVF0QUFBTUFRc2dBUkJUQzBGZmNVSFlBRVlFUUNBRlFSQnFJQUVnQ0NBSElBWWdBeERxRFNBRktRTVlJUWtnQlNrREVDRUtEQVlMSUFFb0FtaEZEUUFnQVNBQktBSUVRUUZyTmdJRUN5QUZRU0JxSUFFZ0FpQUlJQWNnQmlBREVPa05JQVVwQXlnaENTQUZLUU1nSVFvTUJBc2dBU2dDYUFSQUlBRWdBU2dDQkVFQmF6WUNCQXNNQVFzQ1FBSi9JQUVvQWdRaUFpQUJLQUpvU1FSQUlBRWdBa0VCYWpZQ0JDQUNMUUFBREFFTElBRVFVd3RCS0VZRVFFRUJJUVFNQVF0Q2dJQ0FnSUNBNFAvL0FDRUpJQUVvQW1oRkRRTWdBU0FCS0FJRVFRRnJOZ0lFREFNTEEwQUNmeUFCS0FJRUlnSWdBU2dDYUVrRVFDQUJJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QUJFRk1MSWdKQk1HdEJDa2tnQWtIQkFHdEJHa2x5SUFKQjN3Qkdja1ZCQUNBQ1FlRUFhMEVhVHh0RkJFQWdCRUVCYWlFRURBRUxDMEtBZ0lDQWdJRGcvLzhBSVFrZ0FrRXBSZzBDSUFFb0FtZ2lBZ1JBSUFFZ0FTZ0NCRUVCYXpZQ0JBc2dBd1JBSUFSRkRRTURRQ0FFUVFGcklRUWdBZ1JBSUFFZ0FTZ0NCRUVCYXpZQ0JBc2dCQTBBQ3d3REN3dEJsSU1FUVJ3MkFnQWdBVUlBRU1jQkMwSUFJUWtMSUFBZ0NqY0RBQ0FBSUFrM0F3Z2dCVUV3YWlRQUM3OENBUUYvSXdCQjBBQnJJZ1FrQUFKQUlBTkJnSUFCVGdSQUlBUkJJR29nQVNBQ1FnQkNnSUNBZ0lDQWdQLy9BQkJjSUFRcEF5Z2hBaUFFS1FNZ0lRRWdBMEgvL3dGSUJFQWdBMEgvL3dCcklRTU1BZ3NnQkVFUWFpQUJJQUpDQUVLQWdJQ0FnSUNBLy84QUVGd2dBMEg5L3dJZ0EwSDkvd0pJRzBIKy93RnJJUU1nQkNrREdDRUNJQVFwQXhBaEFRd0JDeUFEUVlHQWYwb05BQ0FFUVVCcklBRWdBa0lBUW9DQWdJQ0FnTUFBRUZ3Z0JDa0RTQ0VDSUFRcEEwQWhBU0FEUVlPQWZrb0VRQ0FEUWY3L0FHb2hBd3dCQ3lBRVFUQnFJQUVnQWtJQVFvQ0FnSUNBZ01BQUVGd2dBMEdHZ0gwZ0EwR0dnSDFLRzBIOC93RnFJUU1nQkNrRE9DRUNJQVFwQXpBaEFRc2dCQ0FCSUFKQ0FDQURRZi8vQUdxdFFqQ0dFRndnQUNBRUtRTUlOd01JSUFBZ0JDa0RBRGNEQUNBRVFkQUFhaVFBQ3pVQUlBQWdBVGNEQUNBQUlBSkMvLy8vLy8vL1A0TWdCRUl3aUtkQmdJQUNjU0FDUWpDSXAwSC8vd0Z4Y3ExQ01JYUVOd01JQ3lJQUFrQWdBQVJBSUFBZ0FTQUNJQU1RaFFjTUFRdEJBQ0FCSUFJZ0F4Q0ZCd3NMRUFBZ0FDQUJJQUpCQUVFQUVJNEhHZ3U3QWdBQ1FDQUJRUlJMRFFBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUJRUWxyRGdvQUFRSURCQVVHQndnSkNnc2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJLQUlBTmdJQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJOQUlBTndNQUR3c2dBaUFDS0FJQUlnRkJCR28yQWdBZ0FDQUJOUUlBTndNQUR3c2dBaUFDS0FJQVFRZHFRWGh4SWdGQkNHbzJBZ0FnQUNBQktRTUFOd01BRHdzZ0FpQUNLQUlBSWdGQkJHbzJBZ0FnQUNBQk1nRUFOd01BRHdzZ0FpQUNLQUlBSWdGQkJHbzJBZ0FnQUNBQk13RUFOd01BRHdzZ0FpQUNLQUlBSWdGQkJHbzJBZ0FnQUNBQk1BQUFOd01BRHdzZ0FpQUNLQUlBSWdGQkJHbzJBZ0FnQUNBQk1RQUFOd01BRHdzZ0FpQUNLQUlBUVFkcVFYaHhJZ0ZCQ0dvMkFnQWdBQ0FCS3dNQU9RTUFEd3NnQUNBQ0lBTVJBZ0FMQzBRQkEzOGdBQ2dDQUN3QUFCRElBUVJBQTBBZ0FDZ0NBQ0lDTEFBQUlRTWdBQ0FDUVFGcU5nSUFJQU1nQVVFS2JHcEJNR3NoQVNBQ0xBQUJFTWdCRFFBTEN5QUJDL1lDQVFOL0l3QkIwQUZySWdVa0FDQUZJQUkyQXN3QlFRQWhBaUFGUWFBQmFrRUFRU2dRT3hvZ0JTQUZLQUxNQVRZQ3lBRUNRRUVBSUFFZ0JVSElBV29nQlVIUUFHb2dCVUdnQVdvZ0F5QUVFS2tFUVFCSUJFQkJmeUVCREFFTElBQW9Ba3hCQUU0aEFpQUFLQUlBSVFZZ0FDd0FTa0VBVEFSQUlBQWdCa0ZmY1RZQ0FBc2dCa0VnY1NFSEFuOGdBQ2dDTUFSQUlBQWdBU0FGUWNnQmFpQUZRZEFBYWlBRlFhQUJhaUFESUFRUXFRUU1BUXNnQUVIUUFEWUNNQ0FBSUFWQjBBQnFOZ0lRSUFBZ0JUWUNIQ0FBSUFVMkFoUWdBQ2dDTENFR0lBQWdCVFlDTENBQUlBRWdCVUhJQVdvZ0JVSFFBR29nQlVHZ0FXb2dBeUFFRUtrRUlnRWdCa1VOQUJvZ0FFRUFRUUFnQUNnQ0pCRUVBQm9nQUVFQU5nSXdJQUFnQmpZQ0xDQUFRUUEyQWh3Z0FFRUFOZ0lRSUFBb0FoUWhBeUFBUVFBMkFoUWdBVUYvSUFNYkN5RUJJQUFnQUNnQ0FDSUFJQWR5TmdJQVFYOGdBU0FBUVNCeEd5RUJJQUpGRFFBTElBVkIwQUZxSkFBZ0FRdC9BZ0YvQVg0Z0FMMGlBMEkwaUtkQi93OXhJZ0pCL3c5SEJId2dBa1VFUUNBQklBQkVBQUFBQUFBQUFBQmhCSDlCQUFVZ0FFUUFBQUFBQUFEd1E2SWdBUkNQQnlFQUlBRW9BZ0JCUUdvTE5nSUFJQUFQQ3lBQklBSkIvZ2RyTmdJQUlBTkMvLy8vLy8vLy80ZUFmNE5DZ0lDQWdJQ0FnUEEvaEw4RklBQUxDeElBSUFCRkJFQkJBQThMSUFBZ0FSQ1hBZ3M2QUNBQUtBSk1RUUJPQkVBZ0FFSUFRUUFRdGdNZ0FDQUFLQUlBUVY5eE5nSUFEd3NnQUVJQVFRQVF0Z01nQUNBQUtBSUFRVjl4TmdJQUN3d0FJQUFnQWF3Z0FoRDhEUXRnQWdGK0FuOGdBQ2dDS0NFQ1FRRWhBeUFBUWdBZ0FDMEFBRUdBQVhFRWYwRUNRUUVnQUNnQ0ZDQUFLQUljU3hzRlFRRUxJQUlSRlFBaUFVSUFXUVIrSUFBb0FoUWdBQ2dDSEd1c0lBRWdBQ2dDQ0NBQUtBSUVhNng5ZkFVZ0FRc0w3d0lDQTM4RGZTQUF2Q0lDUWYvLy8vOEhjU0lCUVlDQWdPUUVTUVJBQWtBQ2Z5QUJRZi8vLy9ZRFRRUkFJQUZCZ0lDQXpBTkpEUUpCZnlFQlFRRU1BUXNnQUlzaEFBSjlJQUZCLy8vZi9BTk5CRUFnQVVILy83LzVBMDBFUUNBQUlBQ1NRd0FBZ0wrU0lBQkRBQUFBUUpLVklRQkJBQ0VCUVFBTUF3dEJBU0VCSUFCREFBQ0F2NUlnQUVNQUFJQS9rcFVNQVFzZ0FVSC8vKytBQkUwRVFFRUNJUUVnQUVNQUFNQy9raUFBUXdBQXdEK1VRd0FBZ0QrU2xRd0JDMEVESVFGREFBQ0F2eUFBbFFzaEFFRUFDeUVESUFBZ0FKUWlCU0FGbENJRUlBUkRSeExhdlpSRG1NcE12cEtVSVFZZ0JTQUVJQVJESmF4OFBaUkREZlVSUHBLVVE2bXFxajZTbENFRUlBTUVRQ0FBSUFBZ0JpQUVrcFNURHdzZ0FVRUNkQ0lCUWREOEFtb3FBZ0FnQUNBR0lBU1NsQ0FCUWVEOEFtb3FBZ0NUSUFDVGt5SUFJQUNNSUFKQmYwb2JJUUFMSUFBUEN5QUFROW9QeVQ4Z0FKZ2dBTHhCLy8vLy93ZHhRWUNBZ1B3SFN4c0xoZ0lDQTM4QmZDTUFRUkJySWdNa0FBSkFJQUM4SWdSQi8vLy8vd2R4SWdKQjJwK2s3Z1JOQkVBZ0FTQUF1eUlGSUFWRWc4akpiVEJmNUQraVJBQUFBQUFBQURoRG9FUUFBQUFBQUFBNHc2QWlCVVFBQUFCUSt5SDV2NktnSUFWRVkySWFZYlFRVWI2aW9Ea0RBQ0FGbVVRQUFBQUFBQURnUVdNRVFDQUZxaUVDREFJTFFZQ0FnSUI0SVFJTUFRc2dBa0dBZ0lEOEIwOEVRQ0FCSUFBZ0FKTzdPUU1BUVFBaEFnd0JDeUFESUFJZ0FrRVhka0dXQVdzaUFrRVhkR3UrdXprRENDQURRUWhxSUFNZ0FrRUJRUUFRbHdjaEFpQURLd01BSVFVZ0JFRi9UQVJBSUFFZ0JabzVBd0JCQUNBQ2F5RUNEQUVMSUFFZ0JUa0RBQXNnQTBFUWFpUUFJQUlMemdrREJId0Zmd0YrSXdCQk1Hc2lDQ1FBQWtBQ1FBSkFJQUM5SWd0Q0lJaW5JZ1pCLy8vLy93ZHhJZ2RCK3RTOWdBUk5CRUFnQmtILy96OXhRZnZESkVZTkFTQUhRZnl5aTRBRVRRUkFJQXRDQUZrRVFDQUJJQUJFQUFCQVZQc2grYitnSWdCRU1XTmlHbUcwMEwyZ0lnSTVBd0FnQVNBQUlBS2hSREZqWWhwaHROQzlvRGtEQ0VFQklRWU1CUXNnQVNBQVJBQUFRRlQ3SWZrL29DSUFSREZqWWhwaHROQTlvQ0lDT1FNQUlBRWdBQ0FDb1VReFkySWFZYlRRUGFBNUF3aEJmeUVHREFRTElBdENBRmtFUUNBQklBQkVBQUJBVlBzaENjQ2dJZ0JFTVdOaUdtRzA0TDJnSWdJNUF3QWdBU0FBSUFLaFJERmpZaHBodE9DOW9Ea0RDRUVDSVFZTUJBc2dBU0FBUkFBQVFGVDdJUWxBb0NJQVJERmpZaHBodE9BOW9DSUNPUU1BSUFFZ0FDQUNvVVF4WTJJYVliVGdQYUE1QXdoQmZpRUdEQU1MSUFkQnU0enhnQVJOQkVBZ0IwRzgrOWVBQkUwRVFDQUhRZnl5eTRBRVJnMENJQXRDQUZrRVFDQUJJQUJFQUFBd2YzelpFc0NnSWdCRXlwU1RwNUVPNmIyZ0lnSTVBd0FnQVNBQUlBS2hSTXFVazZlUkR1bTlvRGtEQ0VFRElRWU1CUXNnQVNBQVJBQUFNSDk4MlJKQW9DSUFSTXFVazZlUkR1azlvQ0lDT1FNQUlBRWdBQ0FDb1VUS2xKT25rUTdwUGFBNUF3aEJmU0VHREFRTElBZEIrOFBrZ0FSR0RRRWdDMElBV1FSQUlBRWdBRVFBQUVCVSt5RVp3S0FpQUVReFkySWFZYlR3dmFBaUFqa0RBQ0FCSUFBZ0FxRkVNV05pR21HMDhMMmdPUU1JUVFRaEJnd0VDeUFCSUFCRUFBQkFWUHNoR1VDZ0lnQkVNV05pR21HMDhEMmdJZ0k1QXdBZ0FTQUFJQUtoUkRGallocGh0UEE5b0RrRENFRjhJUVlNQXdzZ0IwSDZ3K1NKQkVzTkFRc2dBU0FBSUFCRWc4akpiVEJmNUQraVJBQUFBQUFBQURoRG9FUUFBQUFBQUFBNHc2QWlBMFFBQUVCVSt5SDV2NktnSWdJZ0EwUXhZMklhWWJUUVBhSWlCYUVpQURrREFDQUhRUlIySWdrZ0FMMUNOSWluUWY4UGNXdEJFVWdoQndKL0lBT1pSQUFBQUFBQUFPQkJZd1JBSUFPcURBRUxRWUNBZ0lCNEN5RUdBa0FnQncwQUlBRWdBaUFEUkFBQVlCcGh0TkE5b2lJQW9TSUVJQU5FYzNBRExvb1pvenVpSUFJZ0JLRWdBS0doSWdXaElnQTVBd0FnQ1NBQXZVSTBpS2RCL3c5eGEwRXlTQVJBSUFRaEFnd0JDeUFCSUFRZ0EwUUFBQUF1aWhtak82SWlBS0VpQWlBRFJNRkpJQ1dhZzNzNW9pQUVJQUtoSUFDaG9TSUZvU0lBT1FNQUN5QUJJQUlnQUtFZ0JhRTVBd2dNQVFzZ0IwR0FnTUQvQjA4RVFDQUJJQUFnQUtFaUFEa0RBQ0FCSUFBNUF3aEJBQ0VHREFFTElBdEMvLy8vLy8vLy93ZURRb0NBZ0lDQWdJQ3d3UUNFdnlFQVFRQWhCa0VCSVFrRFFDQUlRUkJxSUFaQkEzUnFBbjhnQUpsRUFBQUFBQUFBNEVGakJFQWdBS29NQVF0QmdJQ0FnSGdMdHlJQ09RTUFJQUFnQXFGRUFBQUFBQUFBY0VHaUlRQkJBU0VHSUFsQkFYRWhDa0VBSVFrZ0NnMEFDeUFJSUFBNUF5QUNRQ0FBUkFBQUFBQUFBQUFBWWdSQVFRSWhCZ3dCQzBFQklRa0RRQ0FKSWdaQkFXc2hDU0FJUVJCcUlBWkJBM1JxS3dNQVJBQUFBQUFBQUFBQVlRMEFDd3NnQ0VFUWFpQUlJQWRCRkhaQmxnaHJJQVpCQVdwQkFSQ1hCeUVHSUFnckF3QWhBQ0FMUW45WEJFQWdBU0FBbWprREFDQUJJQWdyQXdpYU9RTUlRUUFnQm1zaEJnd0JDeUFCSUFBNUF3QWdBU0FJS3dNSU9RTUlDeUFJUVRCcUpBQWdCZ3VMRWdJRGZCQi9Jd0JCc0FScklna2tBQ0FDSUFKQkEydEJHRzBpQ0VFQUlBaEJBRW9iSWhGQmFHeHFJUXdnQkVFQ2RFR0E1Z0pxS0FJQUlnNGdBMEVCYXlJTGFrRUFUZ1JBSUFNZ0Rtb2hDQ0FSSUF0cklRSURRQ0FKUWNBQ2FpQUtRUU4wYWlBQ1FRQklCSHhFQUFBQUFBQUFBQUFGSUFKQkFuUkJrT1lDYWlnQ0FMY0xPUU1BSUFKQkFXb2hBaUFLUVFGcUlnb2dDRWNOQUFzTElBeEJHR3NoRDBFQUlRZ2dEa0VBSUE1QkFFb2JJUW9nQTBFQlNDRU5BMEFDUUNBTkJFQkVBQUFBQUFBQUFBQWhCUXdCQ3lBSUlBdHFJUkJCQUNFQ1JBQUFBQUFBQUFBQUlRVURRQ0FGSUFBZ0FrRURkR29yQXdBZ0NVSEFBbW9nRUNBQ2EwRURkR29yQXdDaW9DRUZJQUpCQVdvaUFpQURSdzBBQ3dzZ0NTQUlRUU4wYWlBRk9RTUFJQWdnQ2tZaEFpQUlRUUZxSVFnZ0FrVU5BQXRCTHlBTWF5RVVRVEFnREdzaEVpQU1RUmxySVJVZ0RpRUlBa0FEUUNBSklBaEJBM1JxS3dNQUlRVkJBQ0VDSUFnaENpQUlRUUZJSWcxRkJFQURRQ0FKUWVBRGFpQUNRUUowYWdKL0lBVUNmeUFGUkFBQUFBQUFBSEErb2lJRm1VUUFBQUFBQUFEZ1FXTUVRQ0FGcWd3QkMwR0FnSUNBZUF1M0lnVkVBQUFBQUFBQWNNR2lvQ0lHbVVRQUFBQUFBQURnUVdNRVFDQUdxZ3dCQzBHQWdJQ0FlQXMyQWdBZ0NTQUtRUUZySWdwQkEzUnFLd01BSUFXZ0lRVWdBa0VCYWlJQ0lBaEhEUUFMQ3dKL0lBVWdEeER6QVNJRklBVkVBQUFBQUFBQXdEK2luRVFBQUFBQUFBQWd3S0tnSWdXWlJBQUFBQUFBQU9CQll3UkFJQVdxREFFTFFZQ0FnSUI0Q3lFUUlBVWdFTGVoSVFVQ1FBSkFBa0FDZnlBUFFRRklJaFpGQkVBZ0NFRUNkQ0FKYWlJQ0lBSW9BdHdESWdJZ0FpQVNkU0lDSUJKMGF5SUtOZ0xjQXlBQ0lCQnFJUkFnQ2lBVWRRd0JDeUFQRFFFZ0NFRUNkQ0FKYWlnQzNBTkJGM1VMSWd0QkFVZ05BZ3dCQzBFQ0lRc2dCVVFBQUFBQUFBRGdQMlpCQVhORkRRQkJBQ0VMREFFTFFRQWhBa0VBSVFvZ0RVVUVRQU5BSUFsQjRBTnFJQUpCQW5ScUloY29BZ0FoRTBILy8vOEhJUTBDZndKQUlBb05BRUdBZ0lBSUlRMGdFdzBBUVFBTUFRc2dGeUFOSUJOck5nSUFRUUVMSVFvZ0FrRUJhaUlDSUFoSERRQUxDd0pBSUJZTkFBSkFBa0FnRlE0Q0FBRUNDeUFJUVFKMElBbHFJZ0lnQWlnQzNBTkIvLy8vQTNFMkF0d0REQUVMSUFoQkFuUWdDV29pQWlBQ0tBTGNBMEgvLy84QmNUWUMzQU1MSUJCQkFXb2hFQ0FMUVFKSERRQkVBQUFBQUFBQThEOGdCYUVoQlVFQ0lRc2dDa1VOQUNBRlJBQUFBQUFBQVBBL0lBOFE4d0doSVFVTElBVkVBQUFBQUFBQUFBQmhCRUJCQUNFS0lBZ2hBZ0pBSUFnZ0Rrd05BQU5BSUFsQjRBTnFJQUpCQVdzaUFrRUNkR29vQWdBZ0NuSWhDaUFDSUE1S0RRQUxJQXBGRFFBZ0R5RU1BMEFnREVFWWF5RU1JQWxCNEFOcUlBaEJBV3NpQ0VFQ2RHb29BZ0JGRFFBTERBTUxRUUVoQWdOQUlBSWlDa0VCYWlFQ0lBbEI0QU5xSUE0Z0NtdEJBblJxS0FJQVJRMEFDeUFJSUFwcUlRb0RRQ0FKUWNBQ2FpQURJQWhxSWd0QkEzUnFJQWhCQVdvaUNDQVJha0VDZEVHUTVnSnFLQUlBdHprREFFRUFJUUpFQUFBQUFBQUFBQUFoQlNBRFFRRk9CRUFEUUNBRklBQWdBa0VEZEdvckF3QWdDVUhBQW1vZ0N5QUNhMEVEZEdvckF3Q2lvQ0VGSUFKQkFXb2lBaUFEUncwQUN3c2dDU0FJUVFOMGFpQUZPUU1BSUFnZ0NrZ05BQXNnQ2lFSURBRUxDd0pBSUFWQkdDQU1heER6QVNJRlJBQUFBQUFBQUhCQlprRUJjMFVFUUNBSlFlQURhaUFJUVFKMGFnSi9JQVVDZnlBRlJBQUFBQUFBQUhBK29pSUZtVVFBQUFBQUFBRGdRV01FUUNBRnFnd0JDMEdBZ0lDQWVBc2lBcmRFQUFBQUFBQUFjTUdpb0NJRm1VUUFBQUFBQUFEZ1FXTUVRQ0FGcWd3QkMwR0FnSUNBZUFzMkFnQWdDRUVCYWlFSURBRUxBbjhnQlpsRUFBQUFBQUFBNEVGakJFQWdCYW9NQVF0QmdJQ0FnSGdMSVFJZ0R5RU1DeUFKUWVBRGFpQUlRUUowYWlBQ05nSUFDMFFBQUFBQUFBRHdQeUFNRVBNQklRVUNRQ0FJUVg5TURRQWdDQ0VDQTBBZ0NTQUNRUU4wYWlBRklBbEI0QU5xSUFKQkFuUnFLQUlBdDZJNUF3QWdCVVFBQUFBQUFBQndQcUloQlNBQ1FRQktJUUFnQWtFQmF5RUNJQUFOQUF0QkFDRU5JQWhCQUVnTkFDQU9RUUFnRGtFQVNoc2hBQ0FJSVFvRFFDQUFJQTBnQUNBTlNSc2hBeUFJSUFwcklReEJBQ0VDUkFBQUFBQUFBQUFBSVFVRFFDQUZJQUpCQTNSQjRQc0NhaXNEQUNBSklBSWdDbXBCQTNScUt3TUFvcUFoQlNBQ0lBTkhJUThnQWtFQmFpRUNJQThOQUFzZ0NVR2dBV29nREVFRGRHb2dCVGtEQUNBS1FRRnJJUW9nQ0NBTlJ5RUNJQTFCQVdvaERTQUNEUUFMQ3dKQUFrQUNRQUpBQWtBZ0JBNEVBUUlDQUFRTFJBQUFBQUFBQUFBQUlRWUNRQ0FJUVFGSURRQWdDVUdnQVdvZ0NFRURkR29yQXdBaEJTQUlJUUlEUUNBSlFhQUJhaUFDUVFOMGFpQUZJQWxCb0FGcUlBSkJBV3NpQUVFRGRHb2lBeXNEQUNJSElBY2dCYUFpQmFHZ09RTUFJQU1nQlRrREFDQUNRUUZLSVFNZ0FDRUNJQU1OQUFzZ0NFRUNTQTBBSUFsQm9BRnFJQWhCQTNScUt3TUFJUVVnQ0NFQ0EwQWdDVUdnQVdvZ0FrRURkR29nQlNBSlFhQUJhaUFDUVFGcklnQkJBM1JxSWdNckF3QWlCaUFHSUFXZ0lnV2hvRGtEQUNBRElBVTVBd0FnQWtFQ1NpRURJQUFoQWlBRERRQUxSQUFBQUFBQUFBQUFJUVlnQ0VFQlRBMEFBMEFnQmlBSlFhQUJhaUFJUVFOMGFpc0RBS0FoQmlBSVFRSktJUUFnQ0VFQmF5RUlJQUFOQUFzTElBa3JBNkFCSVFVZ0N3MENJQUVnQlRrREFDQUpLd09vQVNFRklBRWdCamtERUNBQklBVTVBd2dNQXd0RUFBQUFBQUFBQUFBaEJTQUlRUUJPQkVBRFFDQUZJQWxCb0FGcUlBaEJBM1JxS3dNQW9DRUZJQWhCQUVvaEFDQUlRUUZySVFnZ0FBMEFDd3NnQVNBRm1pQUZJQXNiT1FNQURBSUxSQUFBQUFBQUFBQUFJUVVnQ0VFQVRnUkFJQWdoQWdOQUlBVWdDVUdnQVdvZ0FrRURkR29yQXdDZ0lRVWdBa0VBU2lFQUlBSkJBV3NoQWlBQURRQUxDeUFCSUFXYUlBVWdDeHM1QXdBZ0NTc0RvQUVnQmFFaEJVRUJJUUlnQ0VFQlRnUkFBMEFnQlNBSlFhQUJhaUFDUVFOMGFpc0RBS0FoQlNBQ0lBaEhJUUFnQWtFQmFpRUNJQUFOQUFzTElBRWdCWm9nQlNBTEd6a0RDQXdCQ3lBQklBV2FPUU1BSUFrckE2Z0JJUVVnQVNBR21qa0RFQ0FCSUFXYU9RTUlDeUFKUWJBRWFpUUFJQkJCQjNFTDh3SUNBMzhCZkNNQVFSQnJJZ0VrQUFKOUlBQzhJZ05CLy8vLy93ZHhJZ0pCMnAraytnTk5CRUJEQUFDQVB5QUNRWUNBZ013RFNRMEJHaUFBdXhESkFRd0JDeUFDUWRHbjdZTUVUUVJBSUFDN0lRUWdBa0hrbDl1QUJFOEVRRVFZTFVSVSt5RUp3RVFZTFVSVSt5RUpRQ0FEUVg5S0d5QUVvQkRKQVl3TUFnc2dBMEYvVEFSQUlBUkVHQzFFVlBzaCtUK2dFTW9CREFJTFJCZ3RSRlQ3SWZrL0lBU2hFTW9CREFFTElBSkIxZU9JaHdSTkJFQWdBa0hnMjcrRkJFOEVRRVFZTFVSVSt5RVp3RVFZTFVSVSt5RVpRQ0FEUVg5S0d5QUF1NkFReVFFTUFnc2dBMEYvVEFSQVJOSWhNMzk4MlJMQUlBQzdvUkRLQVF3Q0N5QUF1MFRTSVROL2ZOa1N3S0FReWdFTUFRc2dBQ0FBa3lBQ1FZQ0FnUHdIVHcwQUdnSkFBa0FDUUFKQUlBQWdBVUVJYWhDVkIwRURjUTREQUFFQ0F3c2dBU3NEQ0JESkFRd0RDeUFCS3dNSW1oREtBUXdDQ3lBQkt3TUlFTWtCakF3QkN5QUJLd01JRU1vQkN5RUFJQUZCRUdva0FDQUFDNGtEQWdGOEEzOGpBRUVRYXlJQ0pBQUNRQ0FBdkNJRVFmLy8vLzhIY1NJRFFkcWZwUG9EVFFSQUlBTkJnSUNBekFOSkRRRWdBTHNReWdFaEFBd0JDeUFEUWRHbjdZTUVUUVJBSUFDN0lRRWdBMEhqbDl1QUJFMEVRQ0FFUVg5TUJFQWdBVVFZTFVSVSt5SDVQNkFReVFHTUlRQU1Bd3NnQVVRWUxVUlUreUg1djZBUXlRRWhBQXdDQzBRWUxVUlUreUVKd0VRWUxVUlUreUVKUUNBRVFYOUtHeUFCb0pvUXlnRWhBQXdCQ3lBRFFkWGppSWNFVFFSQUlBQzdJUUVnQTBIZjI3K0ZCRTBFUUNBRVFYOU1CRUFnQVVUU0lUTi9mTmtTUUtBUXlRRWhBQXdEQ3lBQlJOSWhNMzk4MlJMQW9CREpBWXdoQUF3Q0MwUVlMVVJVK3lFWndFUVlMVVJVK3lFWlFDQUVRWDlLR3lBQm9CREtBU0VBREFFTElBTkJnSUNBL0FkUEJFQWdBQ0FBa3lFQURBRUxBa0FDUUFKQUFrQWdBQ0FDUVFocUVKVUhRUU54RGdNQUFRSURDeUFDS3dNSUVNb0JJUUFNQXdzZ0Fpc0RDQkRKQVNFQURBSUxJQUlyQXdpYUVNb0JJUUFNQVFzZ0Fpc0RDQkRKQVl3aEFBc2dBa0VRYWlRQUlBQUxLQUVCZnlNQVFSQnJJZ0VrQUNBQklBQTJBZ3hCeU5VQ1FRVWdBU2dDREJBRklBRkJFR29rQUFzb0FRRi9Jd0JCRUdzaUFTUUFJQUVnQURZQ0RFR2cxUUpCQkNBQktBSU1FQVVnQVVFUWFpUUFDeWdCQVg4akFFRVFheUlCSkFBZ0FTQUFOZ0lNUWZqVUFrRURJQUVvQWd3UUJTQUJRUkJxSkFBTEtBRUJmeU1BUVJCcklnRWtBQ0FCSUFBMkFneEIwTlFDUVFJZ0FTZ0NEQkFGSUFGQkVHb2tBQXNvQVFGL0l3QkJFR3NpQVNRQUlBRWdBRFlDREVHbzFBSkJBU0FCS0FJTUVBVWdBVUVRYWlRQUN5Z0JBWDhqQUVFUWF5SUJKQUFnQVNBQU5nSU1RWURVQWtFQUlBRW9BZ3dRQlNBQlFSQnFKQUFMNGdFQVFZVHNBMEc0eWdJUUtrR2M3QU5CdmNvQ1FRRkJBVUVBRUNrUW9RNFFvQTRRbnc0UW5nNFFuUTRRbkE0UW13NFFtZzRRbVE0UWx3NFFsZzVCdElFQ1FhZkxBaEFUUVpEUkFrR3p5d0lRRTBIbzBRSkJCRUhVeXdJUURVSEUwZ0pCQWtIaHl3SVFEVUdnMHdKQkJFSHd5d0lRRFVHa2dnSkIvOHNDRUNnUWxRNUJyY3dDRUo4SFFkTE1BaENlQjBINXpBSVFuUWRCbU0wQ0VKd0hRY0ROQWhDYkIwSGR6UUlRbWdjUWxBNFFrZzVCeU00Q0VKOEhRZWpPQWhDZUIwR0p6d0lRblFkQnFzOENFSndIUWN6UEFoQ2JCMEh0endJUW1nY1FrUTRRa0E0TEdBQWdBQ2dDQUNJQlFUTTJBaFFnQUNBQktBSUFFUUFBQzlnQkFRSi9Ba0FnQUNnQ3RBSU5BQUpBSUFBb0FpaEJBMnNPQlFBQkFRRUFBUXNnQUNnQ0pFRURSdzBBSUFBb0FpeEJBa2NOQUNBQUtBSjRRUU5IRFFBZ0FDZ0NzQUlOQUNBQUtBTFlBU0lCS0FJSVFRSkhEUUFnQVNnQ1lFRUJSdzBBSUFFb0FyZ0JRUUZIRFFBZ0FTZ0NERUVDU2cwQUlBRW9BbVJCQVVjTkFDQUJLQUs4QVVFQlJ3MEFJQUVvQWlRaUFpQUFLQUxFQWtjTkFDQUJLQUo4SUFKSERRQWdBU2dDMUFFZ0FrY05BQ0FCS0FJb0lnSWdBQ2dDeUFKSERRQWdBU2dDZ0FFZ0FrY05BQ0FCS0FMWUFTQUNSZzhMUVFBTHJnUUNCMzhGZkNNQVFhQUJheUlISkFCQmZ5RUZBa0FnQVNnQ0NDSUdRUU5JRFFBZ0JrSGdBR3dRT2lJSVJRUkFRUUJCQTBHNkRVRUFFRGdNQVFzZ0JrRUVkQkE2SWdrRVFFRUFJUVlEUUVFQUlRVWdCa0VEUmdSQVFRQWhCZ0pBQTBBZ0FDQURJQWRCTUdvUXF3VkVBQUFBQUFBQUFBQWhERUVBSVFVRFFDQUJLQUlJSWdJZ0JVb0VRQ0FIUVpBQmFpQUhRVEJxSUFFb0FnUWdCVUVZYkdvUXJ3ZEJmMHdOQXlBRlFRUjBJZ0lnQVNnQ0FHb2lDaXNEQ0NFTklBY3JBNWdCSVE4Z0FpQUphaUFLS3dNQUlBY3JBNUFCb1NJT09RTUFJQWtnQWtFSWNtb2dEU0FQb1NJTk9RTUFJQXdnRGlBT29pQU5JQTJpb0tBaERDQUZRUUZxSVFVTUFRc0xBa0FnRENBQ3Q2TWlEQ0FBS3dOb1l3MEFBa0FnQmtVTkFDQU1JQUFyQTNoalFRRnpEUUFnQUNzRGNDQU1JQkNqWXcwQkMwRUFJUVVnQmlBQUtBSmdSZzBBQTBBZ0FpQUZTZ1JBSUFnZ0JVSGdBR3hxSUFBZ0F5QUJLQUlFSUFWQkdHeHFFS3NIUVFCSURRUWdCVUVCYWlFRklBRW9BZ2doQWd3QkN3c2dCeUFKSUFnZ0FrRUJkQkNvQjBGL1RBMENJQU1nQnhDbEJ5QUdRUUZxSVFZZ0RDRVFEQUVMQ3lBRUlBdzVBd0FnQ0JBeklBa1FNMEVBSVFVTUJBc2dDQkF6SUFrUU0wRi9JUVVNQXdVRFFDQUZRUVJIQkVBZ0JVRURkQ0lLSUFNZ0JrRUZkQ0lMYW1vZ0FpQUxhaUFLYWlzREFEa0RBQ0FGUVFGcUlRVU1BUXNMSUFaQkFXb2hCZ3dCQ3dBTEFBdEJBRUVEUWJvTlFRQVFPQ0FJRURNTElBZEJvQUZxSkFBZ0JRdnpBUUVHZnlBQUtBTGdBeUlCSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBTmdJSUlBRWdBRUVCUVlBSUlBQW9BZ1FvQWdBUkJBQTJBZ3dnQVNBQVFRRkJnQWdnQUNnQ0JDZ0NBQkVFQURZQ0VDQUJJQUJCQVVHQUNDQUFLQUlFS0FJQUVRUUFJZ00yQWhRZ0FTZ0NFQ0VFSUFFb0Fnd2hCU0FCS0FJSUlRWkJBQ0VCUVlCL0lRQURRQ0FHSUFGQkFuUWlBbW9nQUVIcHpRVnNRWUNBQW1wQkVIVTJBZ0FnQWlBRmFpQUFRYUtMQjJ4QmdJQUNha0VRZFRZQ0FDQUNJQVJxSUFCQnJwSjliRFlDQUNBQ0lBTnFJQUJCNTg5K2JFR0FnQUpxTmdJQUlBQkJBV29oQUNBQlFRRnFJZ0ZCZ0FKSERRQUxDNWtDQWdaL0Ezd2pBRUdBQW1zaUFpUUFJQUpCd0FGcUlBRVFpdzhnQWtIZ0FHb2dBa0hBQVdvUWdBOERmeUFEUVFOR0JIOERmMEVBSVFFZ0JrRURSZ1IvSUFKQmdBSnFKQUJCQUFVRFFDQUJRUVJIQkVBZ0FVRURkQ0lESUFBZ0JrRUZkQ0lFYW1vZ0FpQUVhaUFEYWlzREFEa0RBQ0FCUVFGcUlRRU1BUXNMSUFaQkFXb2hCZ3dCQ3dzRklBQWdBMEVGZENJSGFpSUVLd01RSVFnZ0JDc0RDQ0VKSUFRckF3QWhDa0VBSVFFRFFDQUJRUVJIQkVBZ0FVRURkQ0lGSUFJZ0IycHFJQW9nQWtIZ0FHb2dCV29pQlNzREFLSWdDU0FGS3dNZ29xQWdDQ0FGUVVCckt3TUFvcUE1QXdBZ0FVRUJhaUVCREFFTEN5QUNJQWRxSWdFZ0JDc0RHQ0FCS3dNWW9Ea0RHQ0FEUVFGcUlRTU1BUXNMR2d2dkVnRVdmeU1BUVlBTGF5SU5KQUFnQTBFRGRDSUZRV0J4UVFSeUlROGdBa0VDZENJSFFXQnhRUUp5SVJJZ0FVRURkQ0lNUVdCeFFRUnlJUk1nQUNnQzVBTW9BaGdoR0FKQUlBQW9Bb1FCSWdoQkFVZ0VRQXdCQ3lBUElBVkJISElpQ21wQkFYVWhGQ0FTSUFkQkhuSWlDMnBCQVhVaEZTQVRJQXhCSEhJaURtcEJBWFVoRnlBQUtBS0lBU0lGS0FJSUlSWWdCU2dDQkNFUUlBVW9BZ0FoRVVILy8vLy9CeUVNQTBBQ2Z5QUVJQkZxTFFBQUlnVWdFMGdFUUNBRklBNXJRUUYwSWdjZ0Iyd2hCeUFGSUJOclFRRjBJZ1VnQld3TUFRc2dCU0FPU2dSQUlBVWdFMnRCQVhRaUJ5QUhiQ0VISUFVZ0RtdEJBWFFpQlNBRmJBd0JDd0ovSUFVZ0Ywd0VRQ0FGSUE1clFRRjBJZ1VnQld3TUFRc2dCU0FUYTBFQmRDSUZJQVZzQ3lFSFFRQUxJUVlDZnlBRUlCQnFMUUFBSWdVZ0VrZ0VRQ0FHSUFVZ0VtdEJBMndpQmlBR2JHb2hCaUFGSUF0clFRTnNJZ1VnQld3TUFRc2dCU0FMU2dSQUlBWWdCU0FMYTBFRGJDSUdJQVpzYWlFR0lBVWdFbXRCQTJ3aUJTQUZiQXdCQ3lBRklCVk1CRUFnQlNBTGEwRURiQ0lGSUFWc0RBRUxJQVVnRW10QkEyd2lCU0FGYkFzZ0Iyb2hCd0ovSUFRZ0Ztb3RBQUFpQlNBUFNBUkFJQVlnQlNBUGF5SUdJQVpzYWlFR0lBVWdDbXNpQlNBRmJBd0JDeUFGSUFwS0JFQWdCaUFGSUFwcklnWWdCbXhxSVFZZ0JTQVBheUlGSUFWc0RBRUxJQVVnRkV3RVFDQUZJQXBySWdVZ0JXd01BUXNnQlNBUGF5SUZJQVZzQ3lFSklBMUJnQU5xSUFSQkFuUnFJQVkyQWdBZ0J5QUphaUlGSUF3Z0JTQU1TQnNoRENBRVFRRnFJZ1FnQ0VjTkFBc2dDRUVCY1NFRkFrQWdDRUVCUmdSQVFRQWhDMEVBSVFRTUFRc2dDRUYrY1NFR1FRQWhDMEVBSVFRRFFDQU1JQTFCZ0FOcUlBUkJBblJxS0FJQVRnUkFJQTFCZ0FGcUlBdHFJQVE2QUFBZ0MwRUJhaUVMQ3lBTUlBMUJnQU5xSUFSQkFYSWlCMEVDZEdvb0FnQk9CRUFnRFVHQUFXb2dDMm9nQnpvQUFDQUxRUUZxSVFzTElBUkJBbW9oQkNBR1FRSnJJZ1lOQUFzTElBVkZEUUFnRFVHQUEyb2dCRUVDZEdvb0FnQWdERW9OQUNBTlFZQUJhaUFMYWlBRU9nQUFJQXRCQVdvaEN3dEIvd0FoQmlBTlFZQURhaUVFQTBBZ0JFTC8vLy8vOS8vLy8vOEFOd0lZSUFSQy8vLy8vL2YvLy8vL0FEY0NFQ0FFUXYvLy8vLzMvLy8vL3dBM0FnZ2dCRUwvLy8vLzkvLy8vLzhBTndJQUlBUkJJR29oQkNBR1FRZEdJUVVnQmtFSWF5RUdJQVZGRFFBTElBdEJBVTRFUUVFQUlSY0RRQ0FQSUExQmdBRnFJQmRxTFFBQUlnb2dBQ2dDaUFFaUJ5Z0NDR290QUFCcklnaEJCSFFpQlVIQUFtb2hEaUFGUWNBQmFpRVVJQVZCUUdzaEZTQVRJQWNvQWdBZ0Ntb3RBQUJySWdsQkJuUWlGa0dBQW1vaEVFRUhJUVVnRFNJR1FZQURhaUVFSUJJZ0J5Z0NCQ0FLYWkwQUFHc2lFVUhJQUd4QmtBRnFJZ3doQnlBUlFRTnNJaEVnRVd3Z0NVRUJkQ0lKSUFsc2FpQUlJQWhzYWlJUklRa0RRQ0FFS0FJQUlBbEtCRUFnQkNBSk5nSUFJQVlnQ2pvQUFBc2dDU0FWYWlJSUlBUW9BZ1JJQkVBZ0JDQUlOZ0lFSUFZZ0Nqb0FBUXNnQ0NBVWFpSUlJQVFvQWdoSUJFQWdCQ0FJTmdJSUlBWWdDam9BQWdzZ0NDQU9haUlJSUFRb0FneElCRUFnQkNBSU5nSU1JQVlnQ2pvQUF3c2dCU0lJUVFGcklRVWdCeUFKYWlFSklBWkJCR29oQmlBRVFSQnFJUVFnQjBHZ0Ftb2hCeUFJRFFBTElCWkJnQVpxSVJsQkJ5RUZJQXdoQnlBUUlCRnFJaEFoQ1FOQUlBUW9BZ0FnQ1VvRVFDQUVJQWsyQWdBZ0JpQUtPZ0FBQ3lBSklCVnFJZ2dnQkNnQ0JFZ0VRQ0FFSUFnMkFnUWdCaUFLT2dBQkN5QUlJQlJxSWdnZ0JDZ0NDRWdFUUNBRUlBZzJBZ2dnQmlBS09nQUNDeUFJSUE1cUlnZ2dCQ2dDREVnRVFDQUVJQWcyQWd3Z0JpQUtPZ0FEQ3lBRklnaEJBV3NoQlNBSElBbHFJUWtnQmtFRWFpRUdJQVJCRUdvaEJDQUhRYUFDYWlFSElBZ05BQXNnRmtHQUNtb2hGa0VISVFVZ0RDRUhJQkFnR1dvaUVDRUpBMEFnQkNnQ0FDQUpTZ1JBSUFRZ0NUWUNBQ0FHSUFvNkFBQUxJQWtnRldvaUNDQUVLQUlFU0FSQUlBUWdDRFlDQkNBR0lBbzZBQUVMSUFnZ0ZHb2lDQ0FFS0FJSVNBUkFJQVFnQ0RZQ0NDQUdJQW82QUFJTElBZ2dEbW9pQ0NBRUtBSU1TQVJBSUFRZ0NEWUNEQ0FHSUFvNkFBTUxJQVVpQ0VFQmF5RUZJQWNnQ1dvaENTQUdRUVJxSVFZZ0JFRVFhaUVFSUFkQm9BSnFJUWNnQ0EwQUN5QVFJQlpxSVFsQkJ5RUZBMEFnQkNnQ0FDQUpTZ1JBSUFRZ0NUWUNBQ0FHSUFvNkFBQUxJQWtnRldvaUJ5QUVLQUlFU0FSQUlBUWdCellDQkNBR0lBbzZBQUVMSUFjZ0ZHb2lCeUFFS0FJSVNBUkFJQVFnQnpZQ0NDQUdJQW82QUFJTElBY2dEbW9pQnlBRUtBSU1TQVJBSUFRZ0J6WUNEQ0FHSUFvNkFBTUxJQVVpQjBFQmF5RUZJQWtnREdvaENTQUdRUVJxSVFZZ0JFRVFhaUVFSUF4Qm9BSnFJUXdnQncwQUN5QVhRUUZxSWhjZ0MwY05BQXNMSUFGQmZIRWhCVUVBSVFjZ0RTRUVJQU5CZkhGQkFYUWhBQ0FDUVhoeElnTkJBWEpCQm5RaERDQURRUUp5UVFaMElRWWdBMEVEY2tFR2RDRUlJQU5CQkhKQkJuUWhDU0FEUVFWeVFRWjBJUW9nQTBFR2NrRUdkQ0VMSUFKQkIzSkJCblFoRHdOQUlCZ2dCU0FIYWtFQ2RHb29BZ0FpQVNBRFFRWjBhaUFBYWlJQ0lBUXRBQUJCQVdvN0FRQWdBaUFFTFFBQlFRRnFPd0VDSUFJZ0JDMEFBa0VCYWpzQkJDQUNJQVF0QUFOQkFXbzdBUVlnQVNBTWFpQUFhaUlDSUFRdEFBUkJBV283QVFBZ0FpQUVMUUFGUVFGcU93RUNJQUlnQkMwQUJrRUJhanNCQkNBQ0lBUXRBQWRCQVdvN0FRWWdBU0FHYWlBQWFpSUNJQVF0QUFoQkFXbzdBUUFnQWlBRUxRQUpRUUZxT3dFQ0lBSWdCQzBBQ2tFQmFqc0JCQ0FDSUFRdEFBdEJBV283QVFZZ0FTQUlhaUFBYWlJQ0lBUXRBQXhCQVdvN0FRQWdBaUFFTFFBTlFRRnFPd0VDSUFJZ0JDMEFEa0VCYWpzQkJDQUNJQVF0QUE5QkFXbzdBUVlnQVNBSmFpQUFhaUlDSUFRdEFCQkJBV283QVFBZ0FpQUVMUUFSUVFGcU93RUNJQUlnQkMwQUVrRUJhanNCQkNBQ0lBUXRBQk5CQVdvN0FRWWdBU0FLYWlBQWFpSUNJQVF0QUJSQkFXbzdBUUFnQWlBRUxRQVZRUUZxT3dFQ0lBSWdCQzBBRmtFQmFqc0JCQ0FDSUFRdEFCZEJBV283QVFZZ0FTQUxhaUFBYWlJQ0lBUXRBQmhCQVdvN0FRQWdBaUFFTFFBWlFRRnFPd0VDSUFJZ0JDMEFHa0VCYWpzQkJDQUNJQVF0QUJ0QkFXbzdBUVlnQVNBUGFpQUFhaUlCSUFRdEFCeEJBV283QVFBZ0FTQUVMUUFkUVFGcU93RUNJQUVnQkMwQUhrRUJhanNCQkNBQklBUXRBQjlCQVdvN0FRWWdCRUVnYWlFRUlBZEJBV29pQjBFRVJ3MEFDeUFOUVlBTGFpUUFDOVFEQVFSL0lBQW9BdVFESUFCQkFVSDhEeUFBS0FJRUtBSUFFUVFBSWdCQi9BZHFJZ0UyQWlnZ0FFTC8vLy8vRHpjQytBY2dBRUtCZ0lDQUlEY0NnQWdnQUVLRGdJQ0F3QUEzQW9nSUlBQkMvZi8vLzI4M0F2QUhJQUJDaFlDQWdPQUFOd0tRQ0NBQVF2di8vLzlQTndMb0J5QUFRb2VBZ0lDQUFUY0NtQWdnQUVMNS8vLy9yMzgzQXVBSElBQkNpWUNBZ0tBQk53S2dDQ0FBUXZmLy8vK1BmemNDMkFjZ0FFS0xnSUNBd0FFM0FxZ0lJQUJDOWYvLy8rOStOd0xRQnlBQVFvMkFnSURnQVRjQ3NBZ2dBRUx6Ly8vL3ozNDNBc2dISUFCQkR6WUN1QWdnQUVMeC8vLy9yMzQzQXNBSFFSQWhBRUVRSVFJRFFDQUJJQUpCQW5RaUJHb2dBQ0lETmdJQUlBRWdCR3RCQUNBQWF5SUFOZ0lBSUFFZ0JFRUVjbW9nQXpZQ0FDQUJJQUpCZjNOQkFuUnFJQUEyQWdBZ0EwRUJhaUVBSUFKQkFtb2lBa0V3UncwQUN5QURRWDl6SVFOQk1DRUNBMEFnQVNBQ1FRSjBJZ1JxSUFBMkFnQWdBU0FFYXlBRE5nSUFJQUVnQkVFRWNtb2dBRFlDQUNBQklBSkJmM05CQW5ScUlBTTJBZ0FnQVNBRVFRaHlhaUFBTmdJQUlBRkJmaUFDYTBFQ2RHb2dBellDQUNBQklBUkJESEpxSUFBMkFnQWdBVUY5SUFKclFRSjBhaUFETmdJQUlBSkJCR29pQWtHQUFrY05BQXNMMGdFQkFYOGpBRUV3YXlJRUpBQWdCRUtHZ0lDQUVEY0NKQ0FFSUFBMkFpQWdCRUVCTmdJWUlBUWdBellDRkNBRUlBRTJBaEFnQkVFR05nSUlJQVFnQXpZQ0JDQUVJQUkyQWdBQ1FDQUVFSVFGSWdORkJFQkJmeUVDREFFTEFrQWdBeUFFRU1zQ0lnQkZCRUJCZnlFQ0lBTWhBUXdCQ3dKQUlBTWdCRUVRYWhETEFpSUJSUVJBUVg4aEFpQUFJUUVNQVF0QkFDRUNBa0FnQUJEMUFrRUFTQVJBUVg4aEFnd0JDeUFFUVNCcUlBQWdBUkRIQXhvTElBTVFSU0FBSVFNTElBTVFSUXNnQVJCRkN5QUVRVEJxSkFBZ0FndjNBZ0VLZnlBQUtBTGtBeUlFSUFBb0FsZ2lBVUVCUmlJQ05nSWNJQVFnQUVFQlFmNEZRWUFDSUFJYklBQW9BbmdnQUNnQ0JDZ0NDQkVKQURZQ0dDQUFLQUo0UVFGT0JFQWdCQ2dDRkNFR0lBRkJBVWNoQ0FOQUlBWWdCQ0FIUVFKMElnRnFLQUlnSWdKdElRWWdDRVVFUUNBRUtBSVlJQUZxSWdNZ0F5Z0NBRUgvQVdvMkFnQUxJQUpCL2dGcUlBSkJBV3NpQ1VFQmRDSUtiU0VGSUFRb0FoZ2dBV29vQWdBaEFVRUFJUUpCQUNFREEwQWdBeUFGU2dSQUEwQWdBeUFDUVFGcUlnSkJBWFJCQVhKQi93RnNJQWxxSUFwdElnVktEUUFMQ3lBQklBTnFJQUlnQm13NkFBQWdBMEVCYWlJRFFZQUNSdzBBQ3lBSVJRUkFRUUVoQWdOQUlBRWdBbXNpQlNBQkxRQUFPZ0FBSUFFZ0Ftb2lBeUFCTFFEL0FUb0Evd0VnQVNBQ1FYOXphaUFCTFFBQU9nQUFJQU1nQVMwQS93RTZBSUFDSUFWQkFtc2dBUzBBQURvQUFDQURJQUV0QVA4Qk9nQ0JBaUFDUVFOcUlnSkJnQUpIRFFBTEN5QUhRUUZxSWdjZ0FDZ0NlRWdOQUFzTEM5d0dBUWgvUVFFaEFRSkFBa0FnQUNnQzFBSWlBa0VCUmdSQUlBQWdBQ2dDMkFJaUFpZ0NIRFlDNkFJZ0FDQUNLQUlnSWdNMkF1d0NJQUpCQVRZQ1FDQUNRb0dBZ0lBUU53STRJQUpCQVRZQ1NDQUNJQUlvQWlRMkFrUWdBaUFESUFJb0Fnd2lBbkFpQXlBQ0lBTWJOZ0pNSUFCQ0FUY0Q4QUlNQVFzZ0FrRUJhMEVFVHdSQUlBQW9BZ0FpQVNBQ05nSVlJQUZCR3pZQ0ZDQUFLQUlBUVFRMkFod2dBQ0FBS0FJQUtBSUFFUUFBQ3lBQUlBQW9BaHdnQUNnQ3JBTWdBQ2dDdkFKc0VHczJBdWdDSUFBb0FpQWdBQ2dDckFNZ0FDZ0N3QUpzRUdzaEFpQUFRUUEyQXZBQ0lBQWdBallDN0FJZ0FDZ0MxQUpCQVVnTkFTQUFRZlFDYWlFR0EwQWdBQ0FEUVFKMGFpZ0MyQUlpQVNBQktBSUlJZ1EyQWpnZ0FTQUJLQUlNSWdVMkFqd2dBU0FFSUFWc0lnSTJBa0FnQVNBRUlBRW9BaVJzTmdKRUlBRWdBU2dDSENBRWNDSUlJQVFnQ0JzMkFrZ2dBU0FCS0FJZ0lBVndJZ0VnQlNBQkd6WUNUQ0FDSUFkcVFRdE9CRUFnQUNnQ0FDSUJRUTQyQWhRZ0FDQUJLQUlBRVFBQUN3SkFJQUpCQVVnTkFDQUVJQVZzSWdGQkFXc2hCQ0FCUVFOeElnRUVRQU5BSUFBZ0FDZ0M4QUlpQlVFQmFqWUM4QUlnQUNBRlFRSjBhaUFETmdMMEFpQUNRUUZySVFJZ0FVRUJheUlCRFFBTEN5QUVRUU5KRFFBRFFDQUFJQUFvQXZBQ0lnRkJBV28yQXZBQ0lBWWdBVUVDZEdvZ0F6WUNBQ0FBSUFBb0F2QUNJZ0ZCQVdvMkF2QUNJQVlnQVVFQ2RHb2dBellDQUNBQUlBQW9BdkFDSWdGQkFXbzJBdkFDSUFZZ0FVRUNkR29nQXpZQ0FDQUFJQUFvQXZBQ0lnRkJBV28yQXZBQ0lBWWdBVUVDZEdvZ0F6WUNBQ0FDUVFSS0lRRWdBa0VFYXlFQ0lBRU5BQXNMSUFOQkFXb2lBeUFBS0FMVUFpSUJTQVJBSUFBb0F2QUNJUWNNQVFzTElBRkJBVWdOQVF0QkFDRUNBMEFnQUNBQ1FRSjBhaWdDMkFJaUF5Z0NVRVVFUUFKQUlBTW9BaEFpQVVFRFRRUkFJQUFnQVVFQ2RHb29BcVFCRFFFTElBQW9BZ0FpQkNBQk5nSVlJQVJCTmpZQ0ZDQUFJQUFvQWdBb0FnQVJBQUFMSUFNZ0FFRUJRWVFCSUFBb0FnUW9BZ0FSQkFBZ0FDQUJRUUowYWlnQ3BBRkJoQUVRUHpZQ1VDQUFLQUxVQWlFQkN5QUNRUUZxSWdJZ0FVZ05BQXNMSUFBZ0FDZ0MxQU1vQWdBUkFBQWdBQ0FBS0FMRUF5Z0NBQkVBQUNBQUtBTE1BeUFBS0FMRUF5Z0NCRFlDQUF2eUFRSURmd0Y4SXdCQjRBRnJJZ1FrQUNBRVFkQUFhaUFFUVFocUlBSWdBeEM1RDBGL0lRTUNRQ0FFUVNCcUlBRWdCRUVJYWhDdkQwRi9TZ1JBUVFBaEFnTkFRUUFoQXlBQ1FRSkdEUUlEUUNBRFFRWkdSUVJBSUFOQkEzUWlCU0FBSUFKQk1HeHFhaUlHUWdBM0F3QkJBQ0VCUkFBQUFBQUFBQUFBSVFjRFFDQUJRUU5HUlFSQUlBY2dCRUVnYWlBQ1FSaHNhaUFCUVFOMGFpc0RBQ0FFUWRBQWFpQUJRVEJzYWlBRmFpc0RBS0tnSVFjZ0FVRUJhaUVCREFFTEN5QUdJQWM1QXdBZ0EwRUJhaUVEREFFTEN5QUNRUUZxSVFJTUFBc0FDMEVBUVFOQmh4ZEJBQkE0Q3lBRVFlQUJhaVFBSUFNTFVnQWdBRUlBTndKb0lBQkI4QUEyQWhBZ0FFSHhBRFlDRENBQVFmSUFOZ0lJSUFCQjh3QTJBZ1FnQUVIMEFEWUNBQ0FBUWdBM0Fud2dBRUwrQURjQ2RDQUFRZkNyQWpZQ2NDQUFRUUEyQWhRZ0FBc21BUUYvSUFBb0FnUWlBUVJBSUFBZ0FTZ0NLQkVBQUFzZ0FFRUFOZ0lVSUFCQkFEWUNCQXM3QVFGL0lBQW9BZ1FpQVFSQUlBQkJBU0FCS0FJa0VRSUFJQUFvQWhBRVFDQUFRUUEyQXJnQ0lBQkJ5QUUyQWhRUEN5QUFRZVFBTmdJVUN3dXRBUUlJZkFGL1FYOGhDeUFCS3dOWUlBSXJBd0FpQXlBQkt3TkFvaUFDS3dNSUlnUWdBU3NEU0tLZ0lBSXJBeEFpQlNBQkt3TlFvcUNnSWdaRUFBQUFBQUFBQUFCaUJIOGdBU3NET0NFSElBRXJBekFoQ0NBQkt3TW9JUWtnQVNzRElDRUtJQUFnQVNzREdDQURJQUVyQXdDaUlBUWdBU3NEQ0tLZ0lBVWdBU3NERUtLZ29DQUdvemtEQUNBQUlBY2dBeUFLb2lBRUlBbWlvQ0FGSUFpaW9LQWdCcU01QXdoQkFBVkJmd3NMMXdFQkFuOGpBRUV3YXlJRUpBQWdCRUtJZ0lDQUVEY0NKQ0FFSUFBMkFpQWdCRUVCTmdJWUlBUWdBellDRkNBRUlBRTJBaEFnQkVFSU5nSUlJQVFnQXpZQ0JDQUVJQUkyQWdBQ1FDQUVFSzBKSWdGRkJFQkJmeUVDREFFTEFrQWdBU0FFRUljRklnQkZCRUJCZnlFQ0RBRUxBa0FnQVNBRVFSQnFFSWNGSWdORkJFQkJmeUVDREFFTFFRQWhBZ0pBUVFCQmZ5QUFLQUlBSUFBb0FnUWlCU0FGRU5RSUcwRUFTQVJBUVg4aEFnd0JDeUFFUVNCcUlBQWdBeEQ0QkJvTElBTVFSUXNnQUJCRkN5QUJFRVVMSUFSQk1Hb2tBQ0FDQ3g0QkFYOUJFQkJMSWdFZ0FDa0NBRGNDQUNBQklBQXBBZ2czQWdnZ0FRc1pBQ0FBS0FJQUlBRTJBZ0FnQUNBQUtBSUFRUWhxTmdJQUMxWUJBbjhqQUVFUWF5SUVKQUFnQUNnQ0JDSUZRUUYxSUFGcUlRRWdBQ2dDQUNFQUlBVkJBWEVFUUNBQktBSUFJQUJxS0FJQUlRQUxJQVFnQXhERkFpQUJJQUlnQkNBQUVRVUFJQVFRT1JvZ0JFRVFhaVFBQzFRQkFuOGpBRUVRYXlJREpBQWdBQ2dDQkNJRVFRRjFJQUZxSVFFZ0FDZ0NBQ0VBSUFSQkFYRUVRQ0FCS0FJQUlBQnFLQUlBSVFBTElBTWdBaERGQWlBQklBTWdBQkVDQUNBREVEa2FJQU5CRUdva0FBdGFBUUovSXdCQkVHc2lBeVFBSUFNZ0FFRUlhaUFCRUxzRklnRW9BZ0FoQkFOQUlBRW9BZ1FnQkVjRVFDQUFLQUlRSUFFb0FnQWdBaER2QWlBQklBRW9BZ0JCREdvaUJEWUNBQXdCQ3dzZ0FSQzJBU0FEUVJCcUpBQUxWUUVDZnlNQVFSQnJJZ01rQUNBRElBQWdBUkRZQWlJQktBSUVJUVFEUUNBQktBSUlJQVJIQkVBZ0FCQTBJQUVvQWdRZ0FoRHZBaUFCSUFFb0FnUkJER29pQkRZQ0JBd0JDd3NnQVJCMklBTkJFR29rQUF1V0FRSUNmQU4vQWtBZ0FDQUFFTGdFbnlJQlJBQUFBQUFBQUFBQVlRMEFJQUFvQWdBaUJDQUVLd01BSWdJZ0Fab2dBU0FDUkFBQUFBQUFBQUFBWXhzaUFhQWlBamtEQUVRQUFBQUFBQUR3UHlBQklBS2luNk1oQWlBQUtBSUVJZ0JCQUNBQVFRQktHeUVBQTBBZ0FDQURSZzBCSUFRZ0EwRURkR29pQlNBQ0lBVXJBd0NpT1FNQUlBTkJBV29oQXd3QUN3QUxJQUdhQ3k0QkFYOERRQ0FCSUFBb0FnaEhCRUFnQUNnQ0VCb2dBQ0FBS0FJSVFReHJJZ0kyQWdnZ0FoQytCQXdCQ3dzTFJnRUJmd05BSUFFZ0FrY0VRQ0FES0FJQVFReHJJZ1FnQWtFTWF5SUNJZ0FwQWdBM0FnQWdCQ0FBS0FJSU5nSUlJQUFRNmdVZ0F5QURLQUlBUVF4ck5nSUFEQUVMQ3dzcEFRRi9Jd0JCRUdzaUFpUUFJQUJCdElFQ0lBSkJDR29nQVJEWER4QVVOZ0lBSUFKQkVHb2tBQXR0QVFKL0l3QkJJR3NpQkNRQUFrQWdBU0FBRURRb0FnQWdBQ2dDQkd0QkRHMU5CRUFnQUNBQklBSVF0Z2NNQVFzZ0FCQTBJUU1nQkVFSWFpQUFJQUFRVnlBQmFoQ3hBaUFBRUZjZ0F4REJCQ0lESUFFZ0FoQzFCeUFBSUFNUXdBUWdBeEMvQkFzZ0JFRWdhaVFBQzFjQkFuOGpBRUVnYXlJREpBQWdBQkEwSWdJZ0EwRUlhaUFBSUFBUVYwRUJhaEN4QWlBQUVGY2dBaERCQkNJQ0tBSUlJQUVRN3dJZ0FpQUNLQUlJUVF4cU5nSUlJQUFnQWhEQUJDQUNFTDhFSUFOQklHb2tBQXMrQVFKL0l3QkJFR3NpQXlRQUlBTWdBRUVCRU5nQ0lRSWdBQkEwSUFJb0FnUWdBUkR2QWlBQ0lBSW9BZ1JCREdvMkFnUWdBaEIySUFOQkVHb2tBQXMxQVFGL0l3QkJFR3NpQWlRQUlBSWdBVFlDQ0NBQUlBSW9BZ2dvQWdBMkFnQWdBRUVJYWtFQVFiZ0JFRHNhSUFKQkVHb2tBQXRkQUNNQVFSQnJJZ0lrQUVHUWdnUVFOQ0VFSUFCQnlBRVFTeUFDUVFocUlBUkJBQkNuQWhDbUFpSUFLQUlBUVFocUlBTW9BZ0FRdmdjZ0FCQklRUUU2QUFRZ0FDZ0NBQ0FCTmdJRUlBQW9BZ0JCQURZQ0FDQUNRUkJxSkFBTDZnRUJCWDhqQUVFUWF5SUdKQUJCL0lFRUVJZ0JJUVJCL0lFRUlBRW9BZ1FnQkJCWklnVVFQQ2dDQUNFQ0EwQWdBaUlES0FJQUlnSWdBVWNOQUFzQ1FDQURRWVNDQkVjRVFDQURLQUlFSUFRUVdTQUZSZzBCQ3lBQktBSUFJZ0lFUUNBQ0tBSUVJQVFRV1NBRlJnMEJDMEg4Z1FRZ0JSQThRUUEyQWdBTEFrQWdBU2dDQUNJQ1JRMEFJQUlvQWdRZ0JCQlpJZ0lnQlVZTkFFSDhnUVFnQWhBOElBTTJBZ0FMSUFNZ0FTZ0NBRFlDQUNBQlFRQTJBZ0JCL0lFRUVEMGlBeUFES0FJQVFRRnJOZ0lBSUFBZ0FTQUdRUWhxUWZ5QkJCQTBRUUVRcHdJUXBnSWFJQVpCRUdva0FBczZBUUovSXdCQklHc2lBU1FBSUFGQkdHb2dBQkJ2SWdJUTlBUWdBVUVJYWlBQUVNQUhJQUZCQ0dvUXd3UWdBaWdDQUJvZ0FVRWdhaVFBQ3ljQUlBQXRBQVFFUUNBQUtBSUFHaUFCUVFocUVNWUVDeUFCQkVBZ0FDZ0NBQm9nQVJBekN3dURBUUFnQUVJQU53TE1BU0FBUWdBM0E4QUJJQUJDL3YvLy93ODNBNEFDSUFCQ2dJQ0FnSUNBZ0svQUFEY0QrQUVnQUVLQWdJQ0FnSUNBcDhBQU53UHdBU0FBUWdBM0F0UUJJQUJCc0FKcUVJWUNHaUFBUVFJMkF2QURJQUJCQURZQzZBSWdBRUtBZ0lDQWdJRFF4OEFBTndQZ0FpQUFRcTJHOGRpdTNJMk5QemNEMkFJTE53RUJmeU1BUVJCcklnSWtBQ0FDSUFFMkFnZ2dBQ0FDS0FJSUtBSUFOZ0lBSUFCQkNHcEJBRUg0QXhBN0VNTUhJQUpCRUdva0FBdGRBQ01BUVJCcklnSWtBRUg4Z1FRUU5DRUVJQUJCaUFRUVN5QUNRUWhxSUFSQkFCQ25BaENtQWlJQUtBSUFRUWhxSUFNb0FnQVF4QWNnQUJCSVFRRTZBQVFnQUNnQ0FDQUJOZ0lFSUFBb0FnQkJBRFlDQUNBQ1FSQnFKQUFMSkFFQmYwR1FnZ1FRTkJvRFFDQUFCRUFnQUNnQ0FDRUJJQUFRTXlBQklRQU1BUXNMQ3l3QkFYOUIvSUVFRURRYUEwQWdBQVJBSUFBb0FnQWhBU0FBUVFocUVNWUVJQUFRTXlBQklRQU1BUXNMQ3dzQUlBRWdBaUFBRVFJQUN5c0NBWDhCZkNNQVFSQnJJZ0lrQUNBQ0lBRWdBQkViQURrRENDQUNLd01JSVFNZ0FrRVFhaVFBSUFNTEN3QWdBU0FDSUFBUkdBQUxKd0VCZnlNQVFSQnJJZ0VrQUNBQklBQVJEd0EyQWd3Z0FTZ0NEQ0VBSUFGQkVHb2tBQ0FBQ3drQUlBRWdBQkVBQUFzUEFDQUJJQUFvQWdCcUlBSTJBZ0FMRFFBZ0FTQUFLQUlBYWlnQ0FBc1lBUUYvUVJBUVN5SUFRZ0EzQXdBZ0FFSUFOd01JSUFBTEpnRUJmeU1BUVJCcklnSWtBQ0FDSUFFZ0FCRUNBQ0FDRUxFSElRQWdBa0VRYWlRQUlBQUxLd0VCZnlNQVFSQnJJZ01rQUNBRElBRWdBaUFBRVFNQU5nSU1JQU1vQWd3aEFDQURRUkJxSkFBZ0FBczFBUUYvSXdCQkVHc2lBaVFBSUFJZ0FSREZBaUFDSUFJZ0FCRUJBRFlDRENBQ0tBSU1JUUFnQWhBNUdpQUNRUkJxSkFBZ0FBc3dBUUYvSXdCQkVHc2lBeVFBSUFNZ0FTQUNJQUFSQlFCQkRCQkxJQU1RM3dNaEFDQURFSFVnQTBFUWFpUUFJQUFMT2dFQmZ5TUFRU0JySWdNa0FDQURJQUlReFFJZ0EwRVFhaUFCSUFNZ0FCRUZBQ0FEUVJCcUVMRUhJUUFnQXhBNUdpQURRU0JxSkFBZ0FBc3BBUUYvSXdCQkVHc2lBaVFBSUFJZ0FTQUFFUUVBTmdJTUlBSW9BZ3doQUNBQ1FSQnFKQUFnQUFzdEFRRi9Jd0JCRUdzaUJDUUFJQVFnQVNBQ0lBTWdBQkVFQURZQ0RDQUVLQUlNSVFBZ0JFRVFhaVFBSUFBTFBRRUJmeU1BUVJCcklnQWtBQ0FBUWMwQU5nSU1RY0NEQWtIRy9BRkJCRUdRaFFKQjBJSUNRZWtBSUFCQkRHb1Fud0pCQUJBR0lBQkJFR29rQUFzV0FDQUNLQUlBSVFJZ0FDQUJFRHdnQWpZQ0FFRUJDejBCQVg4akFFRVFheUlBSkFBZ0FFSE1BRFlDREVIQWd3SkJ3dndCUVFOQitJUUNRYXlDQWtIb0FDQUFRUXhxRUo4Q1FRQVFCaUFBUVJCcUpBQUxIUUFnQVJCRElBSkxCRUFnQUNBQklBSVFQQkRVRHc4TElBQVF3Z1FMUHdFQmZ5TUFRUkJySWdFa0FDQUJJQUFwQWdBM0F3aEJ3SU1DUWIzOEFVRUNRZkNFQWtHQWdnSkI1d0FnQVVFSWFoQ2RBa0VBRUFZZ0FVRVFhaVFBQ3o4QkFYOGpBRUVRYXlJQkpBQWdBU0FBS1FJQU53TUlRY0NEQWtHMi9BRkJCRUhnaEFKQjhJRUNRZVlBSUFGQkNHb1FuUUpCQUJBR0lBRkJFR29rQUFzM0FRRi9Ba0FnQUVVTkFDQUFLQUlBSWdGRkRRQWdBU2dDdUFFUU15QUFLQUlBS0FLOEFSQXpJQUFvQWdBUU15QUFRUUEyQWdBTEN6OEJBWDhqQUVFUWF5SUJKQUFnQVNBQUtRSUFOd01JUWNDREFrR3MvQUZCQTBITWhBSkJ6SUVDUWVVQUlBRkJDR29RblFKQkFCQUdJQUZCRUdva0FBc3FBUUYvSXdCQkVHc2lBQ1FBUWNDREFrRUJRY2lFQWtHc2dBSkI1QUJCeUFBUUZTQUFRUkJxSkFBTER3QWdBQVJBSUFBUWRRc2dBQkF6Q3dZQVFjQ0RBZ3M5QVFGL0l3QkJFR3NpQUNRQUlBQkJ4UUEyQWd4QnhQNEJRY2I4QVVFRVFjQ0NBa0hRZ2dKQjR3QWdBRUVNYWhDZkFrRUFFQVlnQUVFUWFpUUFDeVFBSUFJZ0FDQUJFSndCSWdCSEJIOGdBQ0FDRUQ0Z0FoQTNFUGdGQlNBQUN4cEJBUXM5QVFGL0l3QkJFR3NpQUNRQUlBQkJ4QUEyQWd4QnhQNEJRY0w4QVVFRFFZU0NBa0dzZ2dKQjRnQWdBRUVNYWhDZkFrRUFFQVlnQUVFUWFpUUFDeDRBSUFFUVZ5QUNTd1JBSUFBZ0FTQUNFSndCRUxvSER3c2dBQkRDQkFzL0FRRi9Jd0JCRUdzaUFTUUFJQUVnQUNrQ0FEY0RDRUhFL2dGQnZmd0JRUUpCK0lFQ1FZQ0NBa0hoQUNBQlFRaHFFSjBDUVFBUUJpQUJRUkJxSkFBTFB3RUJmeU1BUVJCcklnRWtBQ0FCSUFBcEFnQTNBd2hCeFA0QlFiYjhBVUVFUWVDQkFrSHdnUUpCNEFBZ0FVRUlhaENkQWtFQUVBWWdBVUVRYWlRQUMrSUNBZ2wvQW53akFFRWdheUlCSkFCQjBBRVFPaUlDQkVBQ1FDQUNJQUJCdUFFUVB5SUNJQUFvQWdCQkhtb2lCVFlDd0FFZ0FDZ0NCQ0VESUFKQkR6WUN6QUVnQWtFUE5nTElBU0FDSUFOQkhtb2lCallDeEFFZ0FpQUZJQVpzUVFOMElnUVFPaUlETmdLNEFTQURSUTBBSUFJZ0JCQTZJZ1EyQXJ3QklBUkZEUUFnQmtFQUlBWkJBRW9iSVFnZ0JVRUFJQVZCQUVvYklRa2dBRUhvQUdvaEJTQUFLQUt3QVNFR0EwQWdCeUFJUndSQUlBZEJEMnV5dXlFS1FRQWhBQU5BSUFBZ0NVY0VRQ0FGSUFCQkQydXl1eUlMSUFvZ0FVRUlhaUFCSUFZUW13Z2dBeUFCS3dNSXRqZ0NBQ0FESUFFckF3QzJPQUlFSUFVZ0N5QUtJQUZCR0dvZ0FVRVFhaUFHRU5VRUlBUWdBU3NER0xZNEFnQWdCQ0FCS3dNUXRqZ0NCQ0FBUVFGcUlRQWdCRUVJYWlFRUlBTkJDR29oQXd3QkN3c2dCMEVCYWlFSERBRUxDeUFCUVNCcUpBQWdBZzhMQzBFQVFRTkJnUTFCQUJBNFFRRVFBUUFMUmdFQmZ5QUJJQUFRVnlJRFN3UkFJQUFnQVNBRGF5QUNFTHNIRHdzZ0FTQURTUVJBSUFBb0FnQWdBVUVNYkdvaEFTQUFFRmNoQWlBQUlBRVF2UVFnQUNBQ0VOQUNDd3MvQVFGL0l3QkJFR3NpQVNRQUlBRWdBQ2tDQURjRENFSEUvZ0ZCclB3QlFRTkJ1SUFDUWN5QkFrSGZBQ0FCUVFocUVKMENRUUFRQmlBQlFSQnFKQUFMSVFBZ0FDZ0NCQ0FBRURRb0FnQkhCRUFnQUNBQkVMMEhEd3NnQUNBQkVMd0hDeW9CQVg4akFFRVFheUlBSkFCQnhQNEJRUUZCdElBQ1FheUFBa0hlQUVIQUFCQVZJQUJCRUdva0FBczZBUUYvSUFBRVFDQUFFSThDSUFBb0FnQUVRQ0FBSUFBb0FnQVF2UVFnQUJBMEdpQUFLQUlBSVFFZ0FCQzNBUm9nQVJBekN3c2dBQkF6Q3dZQVFjVCtBUXVwQlFJRWZ3UjhJd0JCa0FOcklnUWtBQ0FBS0FJRUlRWWdBQ2dDQUNFSEFrQWdBRUVJYWlBRVFiQUNhaUFFUWRBQmFoQzRDRUVBVGdSQUlBWkJBV3UzSVFnRFFDQUZRUVJHQkVBZ0JDc0RnQU1oQ1VFQUlRQURRRUVBSVFVZ0FFRURSa1VFUUFOQUlBVkJBMFpGQkVBZ0JVRURkQ0lHSUFSQmdBRnFJQUJCR0d4cWFpQUVRYkFDYWlBQVFRVjBhaUFHYWlzREFDQUpvemtEQUNBRlFRRnFJUVVNQVFzTElBQkJBV29oQUF3QkN3c2dCRUlBTndNZ0lBUkNBRGNET0NBRVFVQnJRZ0EzQXdBZ0JFSUFOd05JSUFSQ0FEY0RhQ0FFSUFFZ0FxQWdBU0FDb1NJSm96a0RVQ0FFSUFJZ0FxQWdBYUlnQ2FNNUExZ2dCQ0FFS3dPZ0FVUUFBQUFBQUFBQXdLSWdDS001QXlnZ0JDQUVLd09vQVNJQklBR2dJQWlqUkFBQUFBQUFBUEMvb0pvNUF6QWdCRUlBTndNWUlBUkNBRGNEWUNBRUlBUXJBNEFCSWdFZ0FhQWdCMEVCYTdjaUFhTTVBd0FnQkNBRUt3T0lBU0lDSUFLZ0lBR2pPUU1JSUFRZ0JDc0RrQUVpQWlBQ29DQUJvMFFBQUFBQUFBRHd2NkNhT1FNUUlBUkNBRGNEZUNBRVFvQ0FnSUNBZ0lENHYzODNBM0FnQkNzRHFBSWhDU0FFS3dPSUFpRUtRUUFoQUNBRUt3UG9BU0VMQTBBZ0FFRUVSZzBFSUFRZ0FFRUZkR29pQmlzREVDRUJJQVlyQXdnaEFpQUdLd01BSVFoQkFDRUZBMEFnQlVFRFJrVUVRQ0FESUFWQkFuUWdBR3BCQTNScUlBZ2dCRUhRQVdvZ0JVRURkR29pQnlzREFLSWdBaUFIS3dNZ29xQWdBU0FIUVVCckt3TUFvcUE1QXdBZ0JVRUJhaUVGREFFTEN5QUFRUU4wSUFOcUlBWXJBeGdnQ0NBTG9pQUNJQXFpb0NBQklBbWlvS0E1QTJBZ0FFRUJhaUVBREFBTEFBVWdCRUd3QW1vZ0JVRURkR29pQUNJR1FTQnFJQUJCUUdzckF3QWdDS0lnQmlzRElLRTVBd0FnQlVFQmFpRUZEQUVMQUFzQUMwRUFRUU5CdXd4QkFCQTRDeUFFUVpBRGFpUUFDeWtCQVg4akFFRVFheUlBSkFCQnl2SUJRUUZCa0lZQ1FheUFBa0hhQUVFekVBUWdBRUVRYWlRQUN5a0JBWDhqQUVFUWF5SUFKQUJCdnZJQlFRSkJoSVlDUVl5R0FrSFpBRUV5RUFRZ0FFRVFhaVFBQ3lrQkFYOGpBRUVRYXlJQUpBQkI2UEVCUVFKQitJVUNRWUNDQWtIVUFFRXVFQVFnQUVFUWFpUUFDeWtCQVg4akFFRVFheUlBSkFCQnN2RUJRUUpCNUlVQ1FZQ0NBa0hTQUVFcUVBUWdBRUVRYWlRQUN5a0JBWDhqQUVFUWF5SUFKQUJCby9FQlFRTkIySVVDUWF5Q0FrSFJBRUVwRUFRZ0FFRVFhaVFBQ3lrQkFYOGpBRUVRYXlJQUpBQkJsZkVCUVFOQnVJVUNRYXlDQWtIUUFFRW9FQVFnQUVFUWFpUUFDNHdGQWdWL0FYd2pBRUdnQW1zaUFpUUFRWDhoQkFKQUlBRkZJQUJGY2cwQUlBQkJ6Q3NRNXdJaUEwVUVRRUdVZ3dRb0FnQWhBU0FDSUFBMkFoUWdBaUFCTmdJUVFRQkJBMEhuTUNBQ1FSQnFFRGdnQWtHVWd3UW9BZ0FRdUFNMkFnUWdBa0hFSnpZQ0FFRUFRUU5CN0NJZ0FoQTREQUVMUVFBaEJDQURRUUJCQWhDU0J3Si9Ba0FDZnlBREtBSk1RWDlNQkVBZ0F5Z0NBQXdCQ3lBREtBSUFDMEVGZGtFQmNRUkFJQUpCbElNRUtBSUFOZ0pRUVFCQkEwSHVOaUFDUWRBQWFoQTRJQUpCbElNRUtBSUFFTGdETmdKRUlBSkJ4Q2MyQWtCQkFFRURRZXdpSUFKQlFHc1FPQXdCQ3lBREVQNE5JUVVnQXhDUkJ3SkFBMEFnQkNJQVFRUkdEUUVnQUVFQmFpRUVJQVVnQUVFRGRFSDBzUUZxS0FJQWJ3MEFDeUFDUWVBQWFpQUFRUU4wUWZTeEFXb29BZ0JCQVNBREVGOUJBVWNFUUNBQ1FaU0RCQ2dDQURZQ01FRUFRUU5CbHNNQUlBSkJNR29RT0NBQ1FaU0RCQ2dDQUJDNEF6WUNKQ0FDUWNRbk5nSWdRUUJCQTBIc0lpQUNRU0JxRURnTUFnc2dBaUFFTmdLUUFpQUNRZUFBYWhEU0JDQUFSUVJBSUFJckErQUJJUWNnQWlBQ0t3UFlBVGtENEFFZ0FpQUhPUVBZQVFzZ0FTQUNRZUFBYWtHNEFSQS9JUVVnQWtFQU5nS2NBa0VCSVFFRFFFRUFJQUZCQVVZTkF4b2dBaUFDS0FLY0FpSUdRUVJxTmdLY0FpQUdLQUlBSWdZZ0JTZ0NzQUUyQXJBQklBSkI0QUJxSUFVb0FyQUJRUU4wUWV5eEFXb29BZ0JCQVNBREVGOUJBVWNOQWlBQ0lBUTJBcEFDSUFKQjRBQnFFTklFSUFCRkJFQWdBaXNENEFFaEJ5QUNJQUlyQTlnQk9RUGdBU0FDSUFjNUE5Z0JDeUFHSUFKQjRBQnFRYmdCRUQ4YUlBRkJBV29oQVF3QUN3QUxRUUJCQTBHVlBVRUFFRGdMUVg4TElRUWdBeEN6QVFzZ0FrR2dBbW9rQUNBRUN5a0JBWDhqQUVFUWF5SUFKQUJCL2ZBQlFRUkJvSVVDUWRDQ0FrSE9BRUVsRUFRZ0FFRVFhaVFBQzZzQkFRRi9Jd0JCSUdzaUFDUUFRY0NEQWtHQWhBSkJ1SVFDUVFCQnJJQUNRY1lBUWErQUFrRUFRYStBQWtFQVFmWHdBVUd4Z0FKQnh3QVFGeERmQnlBQVFRQTJBaHdnQUVISkFEWUNHQ0FBSUFBcEF4ZzNBeEFnQUVFUWFoRGVCeUFBUVFBMkFod2dBRUhLQURZQ0dDQUFJQUFwQXhnM0F3Z2dBRUVJYWhEY0J5QUFRUUEyQWh3Z0FFSExBRFlDR0NBQUlBQXBBeGczQXdBZ0FCRGJCeERaQnhEWEJ5QUFRU0JxSkFBTHFRRUJBWDhqQUVFZ2F5SUFKQUJCeFA0QlFiVC9BVUdjZ0FKQkFFR3NnQUpCUGtHdmdBSkJBRUd2Z0FKQkFFSHE4QUZCc1lBQ1FUOFFGeERzQnlBQVFRQTJBaHdnQUVIQkFEWUNHQ0FBSUFBcEF4ZzNBeEFnQUVFUWFoRHFCeUFBUVFBMkFod2dBRUhDQURZQ0dDQUFJQUFwQXhnM0F3Z2dBRUVJYWhEbkJ5QUFRUUEyQWh3Z0FFSERBRFlDR0NBQUlBQXBBeGczQXdBZ0FCRG1CeERrQnhEaUJ5QUFRU0JxSkFBTHZ3WUJBWDhqQUVFUWF5SUFKQUFRK1FjUStBY1E5d2RCZy9FQlFTWVEyd0ZCalBFQlFTY1Eyd0VROVFjUTlBY1E4d2RCdnZFQlFTc1Eyd0ZCeS9FQlFTd1Eyd0ZCMi9FQlFTMFF6QVFROGdjQ2YwSFFoUUpCOC9FQlFZQ0dBa0hWQUVHeGdBSkIxZ0FRTHlBQVFRaHFDMEg5OFFGQkFCRHdBa0dBOGdGQkJCRHdBa0dHOGdGQkNCRHdBa0dOOGdGQkRCRHdBaHBCMElVQ0VDMUJrZklCUVM4UXpBUkJudklCUVRBUTJ3RkJxL0lCUVRFUTJ3RVE4UWNROEFkQjF2SUJRVFFReXdSQjdmSUJRVFVReWdSQmhQTUJRVFlReXdSQm12TUJRVGNReWdSQnNQTUJRVGdRdlFOQndmTUJRVGtRMndGQjB2TUJRVG9RdlFOQjMvTUJRVHNRMndGQjdQTUJRVHdRdlFOQi9mTUJRVDBRMndGQmp2UUJRYXp2QXhCZVFhdjBBVUcwN3dNUVhrSEg5QUZCc084REVGNGdBRUVBTmdJSVFlajBBU0FBUVFocUVGNGdBRUVCTmdJSVFmbjBBU0FBUVFocUVGNGdBRUVBTmdJSVFZbjFBU0FBUVFocUVGNGdBRUhrQURZQ0NFR2Y5UUVnQUVFSWFoQmVJQUJCQURZQ0NFRzY5UUVnQUVFSWFoQmVJQUJCQVRZQ0NFSFU5UUVnQUVFSWFoQmVJQUJCQURZQ0NFSHU5UUVnQUVFSWFoQmVJQUJCQlRZQ0NFR0o5Z0VnQUVFSWFoQmVJQUJDZ0lDQWdJQ0FnUEEvTndNSVFadjJBVUdnN1FNZ0FDc0RDQkFXSUFCQkFEWUNDRUd3OWdFZ0FFRUlhaEJlSUFCQkFUWUNDRUhEOWdFZ0FFRUlhaEJlSUFCQkFqWUNDRUhWOWdFZ0FFRUlhaEJlSUFCQkF6WUNDRUhuOWdFZ0FFRUlhaEJlSUFCQkJEWUNDRUg2OWdFZ0FFRUlhaEJlSUFCQkFEWUNDRUdROXdFZ0FFRUlhaEJlSUFCQkFUWUNDRUd2OXdFZ0FFRUlhaEJlSUFCQkFqWUNDRUhUOXdFZ0FFRUlhaEJlSUFCQkF6WUNDRUgxOXdFZ0FFRUlhaEJlSUFCQkFEWUNDRUdiK0FFZ0FFRUlhaEJlSUFCQkFUWUNDRUc4K0FFZ0FFRUlhaEJlSUFCQkFqWUNDRUhyK0FFZ0FFRUlhaEJlSUFCQkF6WUNDRUdWK1FFZ0FFRUlhaEJlSUFCQkJEWUNDRUhBK1FFZ0FFRUlhaEJlSUFCQkJUWUNDRUgwK1FFZ0FFRUlhaEJlSUFCQkJqWUNDRUduK2dFZ0FFRUlhaEJlSUFCQkJ6WUNDRUhVK2dFZ0FFRUlhaEJlSUFCQkNEWUNDRUg3K2dFZ0FFRUlhaEJlSUFCQkNUWUNDRUdvK3dFZ0FFRUlhaEJlSUFCQkVHb2tBQXY5QVFFRGZ5TUFRVEJySWdRa0FFR29nZ1JCcUlJRUtBSUFJZ05CQVdvMkFnQWdCQ0FETmdJc0lBUkJMR29RZUNFRElBUW9BaXdoQlNBRElBRTJBdFFCSUFNZ0FEWUMwQUVnQXlBRk5nSUFJQU1nQUNBQmJDSUFRUUowSWdFMkFzZ0JJQU1nQVJBNk5nTEVBU0FESUFBUU9qWUN6QUVnQlNBQ0VJMElJQVFnQXlnQ3lBRTJBaUJCQUVFQlFjYndBU0FFUVNCcUVEZ2dBeWdDQUNFQUlBTW9Bc1FCSVFFZ0F5Z0N5QUVoQWlBRUlBTW9Bc3dCTmdJVUlBUkJzSUlFTmdJUUlBUWdBMEh3QW1vMkFnd2dCQ0FDTmdJSUlBUWdBVFlDQkNBRUlBQTJBZ0JCay84RFFlUHdBU0FFRUE0YUlBTW9BZ0FoQUNBRVFUQnFKQUFnQUF1TkFRRURmeU1BUVRCcklnRWtBQ0FCSUFBMkFpd2dBVUg4Z1FRZ0FVRXNhaEJ0TmdJQUlBRVFZellDS0FKL0lBRWdBVUVvYWhCekJFQkJyTzhES0FJQURBRUxJQUZCTEdvUWVDRUNJQUZCQUVFb0VEc2hBQ0FDS0FMRUFTRURJQUJCQVRZQ0VDQUFJQU0yQWdBZ0FDQUNLQUxNQVRZQ0RDQUNLQUxZQVNBQUVPa0tDeUVBSUFGQk1Hb2tBQ0FBQzNVQkFYOGpBRUVRYXlJQkpBQWdBU0FBTmdJTUlBRkIvSUVFSUFGQkRHb1FiVFlDQ0NBQkVHTTJBZ0JCZnlFQUlBRkJDR29nQVJCelJRUkFBbjlCZnlBQlFReHFFSGdvQXRnQklnQkZEUUFhSUFFZ0FDZ0NGRFlDQ0VFQUN5RUFRWDhnQVNnQ0NDQUFHeUVBQ3lBQlFSQnFKQUFnQUF0b0FRRi9Jd0JCSUdzaUFpUUFJQUlnQURZQ0hDQUNRZnlCQkNBQ1FSeHFFRzAyQWhnZ0FoQmpOZ0lRQWtBZ0FrRVlhaUFDUVJCcUVITU5BQ0FDUVJ4cUVIZ29BdGdCSUFFUTlnb05BQ0FDSUFFMkFnQkJBRUVCUWFud0FTQUNFRGdMSUFKQklHb2tBQXQyQVFKL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENBQlFmeUJCQ0FCUVF4cUVHMDJBZ2dnQVJCak5nSUFRUUFoQUNBQlFRaHFJQUVRYzBVRVFDQUJRUXhxRUhnb0F0Z0JJZ0JGSUFGQkNHb2lBa1Z5Qkg5QmZ3VWdBaUFBS0FJQU5nSUFRUUFMR2lBQktBSUlJUUFMSUFGQkVHb2tBQ0FBQzFzQkFYOGpBRUVRYXlJQkpBQWdBU0FBTmdJTUlBRkIvSUVFSUFGQkRHb1FiVFlDQ0NBQkVHTTJBZ0JCQUNFQUlBRkJDR29nQVJCelJRUkFJQUZCREdvUWVDZ0MyQUZCNUlhbkFtb29BZ0FoQUFzZ0FVRVFhaVFBSUFBTGxSTUNFWDhCZkNBQlFRQWdBVUVBU2hzaENTQUVLQUlBSWdnZ0FrRUJheUlRSUFGc1FRRjBhaUVHSUFnaEJ3TkFJQVVnQ1VaRkJFQWdCa0VBT3dFQUlBZEJBRHNCQUNBRlFRRnFJUVVnQjBFQ2FpRUhJQVpCQW1vaEJnd0JDd3NnQWtFQUlBSkJBRW9iSVFzZ0NDQUJRUUZySWdwQkFYUnFJUVpCQUNFRklBZ2hCd05BSUFVZ0MwWkZCRUFnQmtFQU93RUFJQWRCQURzQkFDQUZRUUZxSVFVZ0JpQUJRUUYwSWdscUlRWWdCeUFKYWlFSERBRUxDeUFRUVFFZ0VFRUJTaHNoRWlBRVFaQ0F5QUJxSVFrZ0F5QUJRUUZxSWdWcUlROGdBQ0FGYWlFT0lBUW9BZ1FnQldvaEFDQUtRUUVnQ2tFQlNoc2lFMEVCYXlFUklBZ2dCVUVCZEdvaEIwRUFJQUZyUVFGMElSUkJBQ0VMUVFFaERBSkFBMEFnRENBU1J3UkFJQTRnRVdvaEZTQVBJQkZxSVJCQkFTRUdBMEFDUUFKQUFrQWdCaUFUUndSQUlBNHRBQUFnRHkwQUFFMEVRQ0FBUWY4Qk9nQUFJQWNnRkdvaUNpOEJBQ0lGUVJCMFFSQjFJZ05CQVU0RVFDQUhJQU03QVFBZ0JDQUZRUnhzYWlJRlFZeUEwQUJxSUF3MkFnQWdCVUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlESUFNb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJRElBTW9BZ0FnREdvMkFnQU1CUXNnQ2tFQ2F5OEJBQ0lJUVJCMFFSQjFJUU1nQ2k0QkFpSUtRUUZPQkVBZ0EwRUJUZ1JBSUFSQmtJRElBR29pQlNBS1FRSjBha0VFYXlnQ0FDSURJQWhCQW5RZ0JXcEJCR3NvQWdBaUNFb0VRQ0FISUFnN0FRQkJBQ0VOSUF0QkFDQUxRUUJLR3lFS0lBa2hCUU5BSUFvZ0RVWUVRQ0FJSVFNTUNBc2dBeUFGS0FJQVJnUkFJQVVnQ0RZQ0FBc2dEVUVCYWlFTklBVkJCR29oQlF3QUN3QUxJQWNnQXpzQkFDQURJQWhPRFFWQkFDRU5JQXRCQUNBTFFRQktHeUVLSUFraEJRTkFJQW9nRFVZTkJpQUlJQVVvQWdCR0JFQWdCU0FETmdJQUN5QU5RUUZxSVEwZ0JVRUVhaUVGREFBTEFBc2dCMEVDYXk0QkFDSUlRUUZPQkVBZ0JFR1FnTWdBYWlJRklBcEJBblJxUVFScktBSUFJZ01nQ0VILy93TnhRUUowSUFWcVFRUnJLQUlBSWdoS0JFQWdCeUFJT3dFQVFRQWhEU0FMUVFBZ0MwRUFTaHNoQ2lBSklRVURRQ0FLSUExR0JFQWdDQ0VEREFjTElBTWdCU2dDQUVZRVFDQUZJQWcyQWdBTElBMUJBV29oRFNBRlFRUnFJUVVNQUFzQUN5QUhJQU03QVFBZ0F5QUlUZzBFUVFBaERTQUxRUUFnQzBFQVNoc2hDaUFKSVFVRFFDQUtJQTFHRFFVZ0NDQUZLQUlBUmdSQUlBVWdBellDQUFzZ0RVRUJhaUVOSUFWQkJHb2hCUXdBQ3dBTElBY2dDanNCQUNBRUlBcEJCMnhCQW5ScUlnVkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBeUFES0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQXlBREtBSUFJQXhxTmdJQUlBWWdCVUdBZ05BQWFpSURLQUlBU0FSQUlBTWdCallDQUFzZ0JVR01nTkFBYWlBTU5nSUFEQVVMSUFOQkFVNEVRQ0FISUFNN0FRQWdCQ0FJUVFkc1FRSjBhaUlGUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBRlFmai96d0JxSWdNZ0F5Z0NBQ0FHYWpZQ0FDQUZRZnovendCcUlnTWdBeWdDQUNBTWFqWUNBQ0FHSUFWQmhJRFFBR29pQXlnQ0FFb0VRQ0FESUFZMkFnQUxJQVZCaklEUUFHb2dERFlDQUF3RkN5QUhRUUpyTHdFQUlnVkJFSFJCRUhVaUEwRUJUZ1JBSUFjZ0F6c0JBQ0FFSUFWQkhHeHFJZ1ZCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFWQitQL1BBR29pQXlBREtBSUFJQVpxTmdJQUlBVkIvUC9QQUdvaUF5QURLQUlBSUF4cU5nSUFJQVZCaElEUUFHb2lBeWdDQUNBR1RnMEZJQU1nQmpZQ0FBd0ZDeUFMUVlDQUFrNEVRRUVBUVFOQmdBcEJBQkE0UVg4aERnd0pDeUFISUF0QkFXb2lBenNCQUNBRUlBdEJBblJxUVpDQXlBQnFJQU5CRUhSQkVIVTJBZ0FnQkNBTFFSeHNhaUlGUVpTQTBBQnFJQVkyQWdBZ0JVR1FnTkFBYWtFQk5nSUFJQVZCbUlEUUFHb2dERFlDQUNBRlFaeUEwQUJxSUFZMkFnQWdCVUdnZ05BQWFpQUdOZ0lBSUFWQnBJRFFBR29nRERZQ0FDQUZRYWlBMEFCcUlBdzJBZ0FnQXlFTERBUUxJQWRCQURzQkFDQUFRUUE2QUFBTUF3c2dBRUVDYWlFQUlBZEJCR29oQnlBUVFRSnFJUThnRlVFQ2FpRU9JQXhCQVdvaERBd0ZDeUFFSUFOQkVIUkJFSFZCSEd4cUlnVkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBeUFES0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQXlBREtBSUFJQXhxTmdJQURBRUxJQVFnQTBFUWRFRVFkVUVjYkdvaUJVR01nTkFBYWlBTU5nSUFJQVZCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFWQitQL1BBR29pQXlBREtBSUFJQVpxTmdJQUlBVkIvUC9QQUdvaUF5QURLQUlBSUF4cU5nSUFDeUFBUVFGcUlRQWdCMEVDYWlFSElBOUJBV29oRHlBT1FRRnFJUTRnQmtFQmFpRUdEQUFMQUFzTElBdEJBQ0FMUVFCS0d5SUlRUUZxSVFOQkFTRUZRUUVoQndOQUlBTWdCVVpGQkVBQ1FDQUZJQWtvQWdBaUFFWUVRQ0FISWdaQkFXb2hCd3dCQ3lBQVFRSjBJQVJxUVl5QXlBQnFLQUlBSVFZTElBa2dCallDQUNBSlFRUnFJUWtnQlVFQmFpRUZEQUVMQ3lBRUlBZEJBV3NpQURZQ0NDQUFSUVJBUVFBUEMwRUFJUVlnQkVFTWFrRUFJQUJCQW5RUU94b2dCRUdRZ0NocVFRQWdBRUVFZEJBN0dpQUFRUUFnQUVFQVNoc2hBQ0FFUVl5QUNHb2hDVUVBSVFVRFFDQUFJQVZHQkVBZ0JFR1FnQ2hxSVFrRFFDQUdJQWhHQkVCQkFDRU9JQVFvQWdnaUFFRUFJQUJCQUVvYklRSWdCRUdRZ0NocUlRTkJBQ0VGQTBBZ0FpQUZSZzBGSUFNZ0JVRUVkQ0lCYWlJQUlBQXJBd0FnQkNBRlFRSjBhaWdDRExjaUZxTTVBd0FnQXlBQlFRaHlhaUlBSUFBckF3QWdGcU01QXdBZ0JVRUJhaUVGREFBTEFBc2dCQ0FFSUFaQkFuUnFRWkNBeUFCcUtBSUFRUUZySWdGQkFuUWlBbW9pQUVFTWFpQUFLQUlNSUFRZ0JrRUhiRUVDZEdvaUJVR1FnTkFBYWlnQ0FHbzJBZ0FnQ1NBQlFRUjBJZ05xSWdBZ0FDc0RBQ0FGUVpTQTBBQnFLQUlBdDZBNUF3QWdDU0FEUVFoeWFpSUFJQUFyQXdBZ0JVR1lnTkFBYWlnQ0FMZWdPUU1BSUFWQm5JRFFBR29vQWdBaUFTQURJQVJxUVl5QUNHb2lBQ2dDQUVnRVFDQUFJQUUyQWdBTElBVkJvSURRQUdvb0FnQWlBU0FFSUFKQkFuUWlBa0VFY21wQmpJQUlhaUlBS0FJQVNnUkFJQUFnQVRZQ0FBc2dCVUdrZ05BQWFpZ0NBQ0lCSUFRZ0FrRUljbXBCaklBSWFpSUFLQUlBU0FSQUlBQWdBVFlDQUFzZ0JVR29nTkFBYWlnQ0FDSUJJQVFnQWtFTWNtcEJqSUFJYWlJQUtBSUFTZ1JBSUFBZ0FUWUNBQXNnQmtFQmFpRUdEQUFMQUFVZ0NTQUZRUVIwSWdOcUlBRTJBZ0FnQ1NBRFFRUnlha0VBTmdJQUlBa2dBMEVJY21vZ0FqWUNBQ0FKSUFOQkRISnFRUUEyQWdBZ0JVRUJhaUVGREFFTEFBc0FDeUFPQzNzQkFYOGpBRUVnYXlJQ0pBQWdBaUFBTmdJY0lBSkIvSUVFSUFKQkhHb1FiVFlDR0NBQ0VHTTJBaEJCQUNFQUlBSkJHR29nQWtFUWFoQnpSUVJBSUFKQkhHb1FlQ2dDMkFFZ0FVRUFSeERLQmlBQ1FhRHdBVUdrOEFFZ0FSczJBZ0JCQUVFQlFZcndBU0FDRURnZ0FTRUFDeUFDUVNCcUpBQWdBQXRtQVFGL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENBQlFmeUJCQ0FCUVF4cUVHMDJBZ2dnQVJCak5nSUFRWDhoQUNBQlFRaHFJQUVRYzBVRVFDQUJRUXhxRUhnb0F0Z0JJQUZCQ0dvUStBb2hBRUYvSUFFb0FnZ2dBQnNoQUFzZ0FVRVFhaVFBSUFBTGFBRUJmeU1BUVNCcklnSWtBQ0FDSUFBMkFod2dBa0g4Z1FRZ0FrRWNhaEJ0TmdJWUlBSVFZellDRUFKQUlBSkJHR29nQWtFUWFoQnpEUUFnQWtFY2FoQjRLQUxZQVNBQkVMa0dEUUFnQWlBQk5nSUFRUUJCQVVIdzd3RWdBaEE0Q3lBQ1FTQnFKQUFMWmdFQmZ5TUFRUkJySWdFa0FDQUJJQUEyQWd3Z0FVSDhnUVFnQVVFTWFoQnROZ0lJSUFFUVl6WUNBRUYvSVFBZ0FVRUlhaUFCRUhORkJFQWdBVUVNYWhCNEtBTFlBU0FCUVFocUVKNExJUUJCZnlBQktBSUlJQUFiSVFBTElBRkJFR29rQUNBQUMzUUJBWDhqQUVFZ2F5SUNKQUFnQWlBQU5nSWNJQUpCL0lFRUlBSkJIR29RYlRZQ0dDQUNFR00yQWhBQ1FDQUNRUmhxSUFKQkVHb1FjdzBBSUFKQkhHb1FlQ0VBSUFGQi93RkxEUUFnQUNnQzJBRWdBUkRwQ3cwQUlBSWdBVFlDQUVFQVFRRkIyKzhCSUFJUU9Bc2dBa0VnYWlRQUMxc0NBWDhCZkNNQVFSQnJJZ0VrQUNBQklBQTJBZ3dnQVVIOGdRUWdBVUVNYWhCdE5nSUlJQUVRWXpZQ0FFUUFBQUFBQUFEd3Z5RUNJQUZCQ0dvZ0FSQnpSUVJBSUFGQkRHb1FlQ3NENEFJaEFnc2dBVUVRYWlRQUlBSUxUQUVCZnlNQVFSQnJJZ0lrQUNBQ0lBQTJBZ3dnQWtIOGdRUWdBa0VNYWhCdE5nSUlJQUlRWXpZQ0FDQUNRUWhxSUFJUWMwVUVRQ0FDUVF4cUVIZ2dBVGtENEFJTElBSkJFR29rQUF0YkFnRi9BWHdqQUVFUWF5SUJKQUFnQVNBQU5nSU1JQUZCL0lFRUlBRkJER29RYlRZQ0NDQUJFR00yQWdCRUFBQUFBQUFBOEw4aEFpQUJRUWhxSUFFUWMwVUVRQ0FCUVF4cUVIZ3JBOWdDSVFJTElBRkJFR29rQUNBQ0Mwd0JBWDhqQUVFUWF5SUNKQUFnQWlBQU5nSU1JQUpCL0lFRUlBSkJER29RYlRZQ0NDQUNFR00yQWdBZ0FrRUlhaUFDRUhORkJFQWdBa0VNYWhCNElBRTVBOWdDQ3lBQ1FSQnFKQUFMb2dZQ0JYOEJmU01BUWNBQmF5SURKQUFnQXlBQk5nSzhBU0FEUWZ5QkJDQURRYndCYWhCdE5nS29BU0FERUdNMkFyZ0JBa0FDUUNBRFFhZ0JhaUFEUWJnQmFoQnpCRUFnQUJCT0dnd0JDeUFEUWJ3QmFoQjRJZ0VvQXVBQklRY2dBMEVBTmdLNEFTQUNFRmRCQ2s4TkFTQURRYWdCYWhCT0lRWUNRQU5BQWtBZ0F5QUVOZ0trQVNBQ0VGY2dCRTBOQUNBRElBSWdBeWdDcEFFUW5BRVFQallDa0FGQkFFRUJRYjN2QVNBRFFaQUJhaEE0SUFJZ0F5Z0NwQUVRbkFFUVBpRUVJQU1vQXFRQklRVWdCaUFEUWFRQmFoQ2lBaUFESUFRMkFvQUJRUUJCQVVHdzZnRWdBMEdBQVdvUU9BSkFBa0FnQkNBRFFhQUJhaEMxQmtGL1RBUkFJQU1nQkRZQ0FFRUFRUU5CeU9vQklBTVFPQXdCQ3lBRElBVTJBbkJCQUVFQlFlN3FBU0FEUWZBQWFoQTRJQU1vQXFBQklBVVFzUVpCZjB3RVFFRUFRUU5CaCtzQlFRQVFPQXdCQ3lBRFFiZ0JhaUFEUWFBQmFoQzRCa0YvVEFSQVFRQkJBMEdyNndGQkFCQTREQUVMUVFCQkFVSFU3d0ZCQUJBNElBTWdCRFlDWUVFQVFRRkJ6K3NCSUFOQjRBQnFFRGdnQkJEM0JpRUZJQUVnQXlnQ3BBRkJBblJxSUFVMkFvZ0NJQVVOQVNBRElBUTJBaEJCQUVFRFFlWHJBU0FEUVJCcUVEZ0xJQUFRVGhvTUF3c2dBU0FCS0FLRUFrRUNkR29vQW9nQ0tBSUFLQUlBSWdRb0FnUWhCU0FCSUFRb0FnQW9BZ0FpQkNnQ0JEWUN5QUlnQVNBRUtBSUlOZ0xNQWlBQkFuOGdCQ29DRENJSWkwTUFBQUJQWFFSQUlBaW9EQUVMUVlDQWdJQjRDellDMEFJZ0F5QUZOZ0pRUVFCQkFVR0c3QUVnQTBIUUFHb1FPQ0FESUFFb0FzZ0NOZ0pBUVFCQkFVR2c3QUVnQTBGQWF4QTRJQU1nQVNnQ3pBSTJBakJCQUVFQlFiYnNBU0FEUVRCcUVEZ2dBeUFCS0FMUUFqWUNJRUVBUVFGQnpld0JJQU5CSUdvUU9FRUFRUUZCMU84QlFRQVFPQ0FES0FLa0FVRUJhaUVFREFFTEN5QUhJQU1vQXJnQkVJWUdRWDlNQkVCQkFFRURRZUhzQVVFQUVEZ2dBQkJPR2d3QkN5QURRYmdCYWhDTkJFRUFRUUZCK3V3QlFRQVFPQ0FCSUFZUVF5QUJLQUtFQW1vMkFvUUNJQUFnQmhEZkF4b0xJQVlRZFFzZ0EwSEFBV29rQUE4TFFRQkJBMEdoN3dGQkFCQTRRWDhRQVFBTG9RRUJBbjhqQUVFUWF5SURKQUFnQXlBQk5nSU1JQU5CL0lFRUlBTkJER29RYlRZQ0NDQURFR00yQWdBQ1FDQURRUWhxSUFNUWN3MEFJQU5CREdvUWVDSUJJQUVvQW9RQ0lnUWdBaEErRUpVSVJRUkFRUUJCQTBIMDdnRkJBQkE0REFFTElBRWdBU2dDaEFKQkFXbzJBb1FDSUFBZ0JEWUNBQ0FBSUFFb0FzZ0NOZ0lFSUFBZ0FTZ0N6QUkyQWdnZ0FDQUJLQUxRQWpZQ0RBc2dBMEVRYWlRQUMvOENBUU4vSXdCQklHc2lBaVFBSUFJZ0FUWUNHQ0FDSUFBMkFod2dBa0g4Z1FRZ0FrRWNhaEJ0TmdJUUlBSVFZellDQ0FKQUlBSkJFR29nQWtFSWFoQnpEUUFnQWtFY2FoQjRJUUFnQWtHUWdnUWdBa0VZYWhCdE5nSVFJQUlRWXpZQ0NDQUNRUkJxSUFKQkNHb1FjdzBBSUFCQkNHb2dBa0VZYWhEUEJFRzRBUkEvSVFFZ0FDZ0NEQ0VEQWtBZ0FDZ0NDQ0lFSUFBb0F0QUJSZ1JBSUFNZ0FDZ0MxQUZHRFFFTElBSWdBellDQkNBQ0lBUTJBZ0JCQUVFQ1FkVHRBU0FDRURnZ0FTQUFLQUxRQVNBQUtBTFVBU0FCRU1BSUN5QUFFTkVFSUFBZ0FSRG9CeUlETmdMQUFTQURSUVJBUVFCQkEwR0Q3Z0ZCQUJBNERBRUxJQUFnQXhEQkRTSUROZ0xZQVNBRFJRUkFRUUJCQTBHcDdnRkJBQkE0REFFTElBTWdBQ2dDOEFNUTlBb2dBQ0FCUVFocUVPc05JZ0UyQXR3QklBRkZCRUJCQUVFRFFjN3VBVUVBRURnTUFRc2dBQ2dDd0FFZ0FDc0QyQUlnQUNzRDRBSWdBRUh3QW1vUTd3Y2dBQ0FBS0FMQUFSRFRCRFlDNEFFTElBSkJJR29rQUF1NEJBSUZmd0Y5SXdCQklHc2lCQ1FBUVpDQ0JCQTlHaUFCS0FJQUlRZEJrSUlFRUlnQklRVWdCRUVBT2dBZkFrQUNRQ0FGUlEwQVFaQ0NCQ0FISUFVUVdTSUlFRHdvQWdBaUJrVU5BQU5BSUFZb0FnQWlCa1VOQVNBSElBWW9BZ1JIQkVBZ0JpZ0NCQ0FGRUZrZ0NFY05BZ3RCa0lJRUVGc2dCa0VJYWlBQkVNd0JSUTBBQ3d3QkN5QUVRUkJxSUFkQjUvc0JJQUlnQXhDL0IwR1FnZ1FRUFNnQ0FDRUJRWkNDQkJCYklRSUNRQ0FGQkVBZ0FVRUJhck1nQWlvQ0FDQUZzNVJlUVFGekRRRUxJQVFnQlJEZEFVRUJjeUFGUVFGMGNqWUNEQ0FFQW45QmtJSUVFRDBvQWdCQkFXcXpRWkNDQkJCYktnSUFsWTBpQ1VNQUFJQlBYU0FKUXdBQUFBQmdjUVJBSUFtcERBRUxRUUFMTmdJSVFaQ0NCQ0FFUVF4cUlBUkJDR29RZlNnQ0FCREZCQ0FIUVpDQ0JCQ0lBU0lGRUZraENBc0NRRUdRZ2dRZ0NCQThLQUlBSWdGRkJFQWdCQ2dDRUVHWWdnUW9BZ0EyQWdCQm1JSUVJQVFvQWhBMkFnQkJrSUlFSUFnUVBFR1lnZ1EyQWdBZ0JDZ0NFQ2dDQUVVTkFTQUVLQUlRSVFGQmtJSUVJQVFvQWhBb0FnQW9BZ1FnQlJCWkVEd2dBVFlDQUF3QkN5QUVLQUlRSUFFb0FnQTJBZ0FnQVNBRUtBSVFOZ0lBQ3lBRVFSQnFFTFVCSVFaQmtJSUVFRDBpQVNBQktBSUFRUUZxTmdJQUlBUkJBVG9BSHlBRVFSQnFJZ0lvQWdBaEFTQUNRUUEyQWdBZ0FRUkFJQUlRU0NJQ0xRQUVCRUFnQWlnQ0FCb0xJQUVFUUNBQ0tBSUFHaUFCRURNTEN3c2dBQ0FFUVJCcUlBWVFieUFFUVI5cUVLZ0NJQVJCSUdva0FBdDhBUUovSXdCQndBRnJJZ0VrQUVGL0lRSUNRQ0FBRUQ0Z0FVRUlhaEQyQjBGL1RBUkFJQUVnQUJBK05nSUFRUUJCQTBHWjdRRWdBUkE0REFFTFFhU0NCRUdrZ2dRb0FnQWlBRUVCYWpZQ0FDQUJJQUEyQWdRZ0FVRUVhaERQQkNBQlFRaHFRYmdCRUQ4YUlBRW9BZ1FoQWdzZ0FVSEFBV29rQUNBQ0MwNEJBWDhqQUVFZ2F5SUJKQUFnQVVIOGdRUWdBQkNOQlRZQ0dDQUJFTlFETmdJUUlBRkJHR29nQVVFUWFoREJBVVVFUUNBQlFRaHFJQUZCR0dvUWhBSW9BZ0FRd1FjTElBRkJJR29rQUF0N0FRSi9Jd0JCRUdzaUFTUUFJQUVnQURZQ0RDQUJRZnlCQkNBQlFReHFFRzAyQWdnZ0FSQmpOZ0lBUVg4aEFDQUJRUWhxSUFFUWMwVUVRQ0FCUVF4cUVIZ2lBQ2dDeEFFaUFnUkFJQUlRTXlBQVFnQTNBc1FCQ3lBQUVORUVJQUZCREdvUWtBZ2dBQkRRQkJBelFRQWhBQXNnQVVFUWFpUUFJQUFMQ1FCQnFPOERLQUlBQ3dzQVFhanZBeUFBTmdJQUMzSUJBWDhqQUVFUWF5SUNKQUFnQWlBQk5nSU1JQUpCL0lFRUlBSkJER29RYlRZQ0NDQUNFR00yQWdBZ0FrRUlhaUFDRUhORkJFQWdBQ0FDUVF4cUVIZ2lBU2dDaEFJMkFnQWdBQ0FCS0FMSUFqWUNCQ0FBSUFFb0Fzd0NOZ0lJSUFBZ0FTZ0MwQUkyQWd3TElBSkJFR29rQUF1d0JBSUVmd0Y5SXdCQmtBRnJJZ01rQUNBQUtBTGdBU0VGSUFOQkFEWUNqQUVnQXlBQ05nS0FBVUVBUVFGQnNPb0JJQU5CZ0FGcUVEZ0NRQUpBSUFJZ0EwR0lBV29RdFFaQmYwd0VRQ0FESUFJMkFnQkJBRUVEUWNqcUFTQURFRGdNQVFzZ0F5QUJOZ0p3UVFCQkFVSHU2Z0VnQTBId0FHb1FPQ0FES0FLSUFTQUJFTEVHUVg5TUJFQkJBRUVEUVlmckFVRUFFRGdNQVFzZ0EwR01BV29nQTBHSUFXb1F1QVpCZjB3RVFFRUFRUU5CcStzQlFRQVFPQXdCQzBFQVFRRkJ4dXNCUVFBUU9DQURJQUkyQW1CQkFFRUJRYy9yQVNBRFFlQUFhaEE0SUFBZ0FVRUNkR29pQmtHSUFtb2dBaEQzQmlJRU5nSUFJQVFFZnlBRUJTQURJQUkyQWxCQkFFRURRZVhyQVNBRFFkQUFhaEE0SUFZb0FvZ0NDeWdDQUNnQ0FDSUNLQUlFSVFRZ0FDQUNLQUlBS0FJQUlnSW9BZ1EyQXNnQ0lBQWdBaWdDQ0RZQ3pBSWdBQUovSUFJcUFnd2lCNHREQUFBQVQxMEVRQ0FIcUF3QkMwR0FnSUNBZUFzMkF0QUNJQU1nQkRZQ1FFRUFRUUZCaHV3QklBTkJRR3NRT0NBRElBQW9Bc2dDTmdJd1FRQkJBVUdnN0FFZ0EwRXdhaEE0SUFNZ0FDZ0N6QUkyQWlCQkFFRUJRYmJzQVNBRFFTQnFFRGdnQXlBQUtBTFFBallDRUVFQVFRRkJ6ZXdCSUFOQkVHb1FPRUVBUVFGQnh1c0JRUUFRT0NBQlFRcEdEUUVnQlNBREtBS01BUkNHQmtGL1RBUkFRUUFoQkVFQVFRTkI0ZXdCUVFBUU9Bd0JDeUFEUVl3QmFoQ05CRUVCSVFSQkFFRUJRZnJzQVVFQUVEZ0xJQU5Ca0FGcUpBQWdCQThMUVg4UUFRQUxpQUlCQW44akFFRVFheUlDSkFBZ0FpQUFOZ0lNSUFKQi9JRUVJQUpCREdvUWJUWUNDQ0FDRUdNMkFnQkJmeUVBSUFKQkNHb2dBaEJ6UlFSQUlBSkJER29RZUNJQklBRW9Bc0FCSUFFb0F2QURFTTRQSWdBMkF1UUJBbjhnQUVVRVFFRUFRUU5CbCtvQlFRQVFPQ0FCUWVBQmFoQ1lEU0FCS0FMa0FTRUFDeUFBQ3dSQUlBQkRBQUNnUURnQ0xBc2dBU2dDNUFFaUFBUkFJQUJEQUFBQVB6Z0NLQXNnQVNnQzVBRWlBQVJBSUFCQkVEWUNKQXNnQVNnQzVBRWlBQVJBSUFCQkJqWUNHQXNnQVNnQzVBRWlBQVJBSUFCQkJqWUNIQXNnQVNnQzVBRWlBQVJBSUFCQkJqWUNJQXNnQVNBQktBTEFBUkRUQkRZQzRBRkJBQ0VBQ3lBQ1FSQnFKQUFnQUF2SUFnRUlmeU1BUVVCcUlnRWtBQ0FCSUFBMkFqd2dBVUg4Z1FRZ0FVRThhaEJ0TmdJQUlBRVFZellDT0VGL0lRQUNRQ0FCSUFGQk9Hb1FjdzBBSUFGQlBHb1FlQ0VDSUFGQkFEWUNPQ0FCUVg4MkFqUWdBaWdDZ0FKQmZrY05BQ0FDS0FMZ0FTQUNLQUxNQVJDUUN5QUNLQUxnQVNJQUJFQWdBU0FBS0FJME5nSTRJQUVnQUNnQ09EWUNOQXNnQWlBQ0t3UDRBU0FDS3dQd0FSRGdDallDNkFFRFFDQUVJQUVvQWpRaUFFNE5BU0FCS0FJNElBUkJ4QUJzYWlJRktBSThSUVJBSUFJZ0JTZ0NNQ0lHTmdLQUFrRUFJUU1EUUVFQUlRQWdBMEVEUmdSQUlBSWdCa0VDZEdvb0FvZ0NJQUVRMEEwRkEwQWdBRUVFUndSQUlBQkJBblFpQnlBQklBTkJCSFFpQ0dwcUlBVWdDR29nQjJvcUFnQTRBZ0FnQUVFQmFpRUFEQUVMQ3lBRFFRRnFJUU1NQVFzTEN5QUVRUUZxSVFRTUFBc0FDeUFCUVVCckpBQWdBQXVIQkFJRmZ3RjlJd0JCSUdzaUJDUUFRZnlCQkJBOUdpQUJLQUlBSVFkQi9JRUVFSWdCSVFVZ0JFRUFPZ0FmQWtBQ1FDQUZSUTBBUWZ5QkJDQUhJQVVRV1NJSUVEd29BZ0FpQmtVTkFBTkFJQVlvQWdBaUJrVU5BU0FISUFZb0FnUkhCRUFnQmlnQ0JDQUZFRmtnQ0VjTkFndEIvSUVFRUZzZ0JrRUlhaUFCRU13QlJRMEFDd3dCQ3lBRVFSQnFJQWRCNS9zQklBSWdBeERGQjBIOGdRUVFQU2dDQUNFQlFmeUJCQkJiSVFJQ1FDQUZCRUFnQVVFQmFyTWdBaW9DQUNBRnM1UmVRUUZ6RFFFTElBUWdCUkRkQVVFQmN5QUZRUUYwY2pZQ0RDQUVBbjlCL0lFRUVEMG9BZ0JCQVdxelFmeUJCQkJiS2dJQWxZMGlDVU1BQUlCUFhTQUpRd0FBQUFCZ2NRUkFJQW1wREFFTFFRQUxOZ0lJUWZ5QkJDQUVRUXhxSUFSQkNHb1FmU2dDQUJERkJDQUhRZnlCQkJDSUFTSUZFRmtoQ0FzQ1FFSDhnUVFnQ0JBOEtBSUFJZ0ZGQkVBZ0JDZ0NFRUdFZ2dRb0FnQTJBZ0JCaElJRUlBUW9BaEEyQWdCQi9JRUVJQWdRUEVHRWdnUTJBZ0FnQkNnQ0VDZ0NBRVVOQVNBRUtBSVFJUUZCL0lFRUlBUW9BaEFvQWdBb0FnUWdCUkJaRUR3Z0FUWUNBQXdCQ3lBRUtBSVFJQUVvQWdBMkFnQWdBU0FFS0FJUU5nSUFDeUFFUVJCcUVMVUJJUVpCL0lFRUVEMGlBU0FCS0FJQVFRRnFOZ0lBSUFSQkFUb0FIeUFFUVJCcUVNTUVDeUFBSUFSQkVHb2dCaEJ2SUFSQkgyb1FxQUlnQkVFZ2FpUUFDNk1GQVFSL0l3QkJzQU5ySWdJa0FDQUNJQUEyQXF3RElBSkIvSUVFSUFKQnJBTnFFRzAyQXBBQ0lBSVFZellDc0FFQ2Z5QUNRWkFDYWlBQ1FiQUJhaEJ6QkVCQnJPOERLQUlBREFFTElBRWdBa0dzQTJvUWVDSURLQUtFQWs0RVFFR3c3d01vQWdBTUFRc2dBa0d3QVdwQkFFSGdBQkE3R2lBQ1FZQ0FnUHg3TmdLc0FRSkFJQU1vQW9BQ0lnQWdBVWNOQUNBREtBTGtBU0FESUFGQkFuUnFLQUtJQWlBREtBTEVBU0FDUWZBQ2FpQUNRYXdCYWhETUR5RUZBMEFDUUVFQUlRQWdCRUVEUmdSQUlBTW9BdWdCSUFKQmtBSnFJQVZCSDNZUTB3cEJBRWdFUUNBQ0lBRTJBcUFCUVFCQkEwR3c2UUVnQWtHZ0FXb1FPQXNnQWtHUUFtb2dBa0d3QVdvUW1nZ2dCVUYvU2cwQklBSWdCVFlDZ0FGQkFFRUJRZGpwQVNBQ1FZQUJhaEE0UVg0aEFDQURRWDQyQW9BQ0RBTUZBMEFnQUVFRVJrVUVRQ0FDUVpBQ2FpQUVRUVYwYWlBQVFRTjBhaUFDUWZBQ2FpQUVRUVIwYWlBQVFRSjBhaW9DQUxzNUF3QWdBRUVCYWlFQURBRUxDeUFFUVFGcUlRUU1BZ3NBQ3dzZ0F5QURLQUtBQWtFQ2RHb29Bb2dDSVFBZ0FpQURLQUtFQWtFQmF6WUNsQUVnQWlBQU5nS1FBVUVBUVFGQjYra0JJQUpCa0FGcUVEZ2dBeWdDZ0FJaEFBc0NRQ0FBSUFGR0JFQWdBaUFDS3dPd0FUa0RFQ0FDSUFJckE3Z0JPUU1ZSUFJZ0Fpc0R3QUU1QXlBZ0FpQUNLd1BJQVRrREtDQUNJQUlyQTlBQk9RTXdJQUlnQWlzRDhBRTVBMUFnQWlBQ0t3UFlBVGtET0NBQ1FVQnJJQUlyQStBQk9RTUFJQUlnQWlzRDZBRTVBMGdnQWlBQ0t3UDRBVGtEV0NBQ0lBSXJBNEFDT1FOZ0lBSWdBaXNEaUFJNUEyZ2dBaUFCTmdJQUlBSWdBaW9DckFHN09RTUlRZHowQTBHRzZnRWdBaEFPR2d3QkN5QUNJQUUyQW5CQm52b0RRWlhxQVNBQ1FmQUFhaEFPR2d0QkFBc2hBQ0FDUWJBRGFpUUFJQUFMYmdJRmZ3RjhBMEFDUUVFQUlRSWdBMEVEUmcwQUEwQWdBa0VFUmdSQUlBTkJBV29oQXd3REJTQUNRUU4wSWdRZ0FTQURRUVYwSWdWcWFpSUdJQVlyQXdBaUJ5QUFJQVZxSUFScUt3TUFJQWVoUkFBQUFHQm1adTQvbzZBNUF3QWdBa0VCYWlFQ0RBRUxBQXNBQ3dzTHZ3VUJCbndDUUNBRUFud0NRQUpBQWtBQ1FDQUZRUUZyRGdRREFnRUFCUXNnQXlBQUt3TXdJZ1lnQUNzRElDSUlJQUFyQXhnaUJ5QUJJQWFoSUFBckEwQWlCcUlnQ0tNaUFTQUJvaUFDSUFBckF6Z2lDYUVnQnFJZ0FDc0RLQ0lLb3lJQ0lBS2lvQ0lHSUFFZ0FTQUJvS0tnb2lBQ0lBQXJBeEFpQ0NBSW9DQUJvcUlnQVNBQUt3TUFJQWFpUkFBQUFBQUFBUEEvb0NBR0lBWWdBQ3NEQ0tLaW9DSUxvcUNnb3FBNUF3QWdDU0FLSUFJZ0J5QUhvQ0FCb3FJZ0NDQUdJQUlnQWlBQ29LS2dvaUFDSUF1aW9LQ2lvQXdEQ3lBQUt3TVFJZ2NnQWlBQUt3TUlvYUloQWlBQklBQXJBd0FpQnFFZ0I2SWlBVVFBQUFBQUFBQUFBR0lnQWtRQUFBQUFBQUFBQUdKeVJRUkFJQU1nQmprREFDQUFLd01JREFNTElBTWdCaUFBS3dNWUlBRkVBQUFBQUFBQThEOGdBU0FCb2lBQ0lBS2lvQ0lCSUFBckF5QkVBQUFBQUlUWGwwR2pvcUVnQVNBQklBQXJBeWhFQUFBQUFJVFhsMEdqUkFBQUFBQUFhdmpBbzZLaW9DSUJvcUtnT1FNQUlBQXJBd2dnQWlBQm9xQU1BZ3NnQUNzREVDSUhJQUlnQUNzRENLR2lJUUlnQVNBQUt3TUFJZ2FoSUFlaUlnRkVBQUFBQUFBQUFBQmlJQUpFQUFBQUFBQUFBQUJpY2tVRVFDQURJQVk1QXdBZ0FDc0RDQXdDQ3lBRElBWWdBVVFBQUFBQUFBRHdQeUFCSUFHaUlBSWdBcUtnSWdFZ0FDc0RHRVFBQUFBQWhOZVhRYU9pb1NBQklBRWdBQ3NESUVRQUFBQUFoTmVYUWFORUFBQUFBQUJxK01Dam9xS2dJZ0dpb0RrREFDQUFLd01JSUFJZ0FhS2dEQUVMSUFBckF4QWlCeUFDSUFBckF3aWhvaUVDSUFFZ0FDc0RBQ0lHb1NBSG9pSUJSQUFBQUFBQUFBQUFZaUFDUkFBQUFBQUFBQUFBWW5KRkJFQWdBeUFHT1FNQUlBQXJBd2dNQVFzZ0F5QUdJQUVnQVNBQm9pQUNJQUtpb0NBQUt3TVlSQUFBQUFDRTE1ZkJvNkpFQUFBQUFBQUE4RCtnSWdHaW9Ea0RBQ0FBS3dNSUlBSWdBYUtnQ3prREFBc0xFd0JCbUlJRUtBSUFFTVlIUVpDQ0JCQ3BBZ3NUQUVHRWdnUW9BZ0FReHdkQi9JRUVFS2tDQzRNQkFRSjhBa0FnQUNzREFDSUJSQUFBQUFBQUFBQUFaZ1JBSUFBckF3Z2lBa1FBQUFBQUFBQUFBR1pGRFFFZ0FpQUJvUThMUWNDWEJFRzRGQkF5UWJJZ0VESkJxaVlRTWtIUUFCQTJRYWNxRURKQm5DOFFNaEExRUFBQUMwSEFsd1JCempVUU1rR3lJQkF5UWFvbUVESkIwUUFRTmtHbktoQXlRWUk4RURJUU5SQUFBQXQwQVFGL0l3QkJFR3NpQVNRQUlBQXJBd0JFQUFBQUFBQUFBQUJtUlFSQVFjQ1hCRUc0RkJBeVFiSWdFREpCcWlZUU1rSERBQkEyUWFjcUVESkJuQzhRTWhBMUVBQUFDeUFCUVFocVFRQVFHQm9nQUNBQktBSU10MFNON2JXZzk4YXdQcUlnQVNnQ0NMZWdPUU1JSUFGQkVHb2tBQXM2QVFGL0l3QkJFR3NpQVNRQUlBRkJDR3BCQUJBWUdpQUFJQUVvQWd5M1JJM3R0YUQzeHJBK29pQUJLQUlJdDZBNUF3QWdBVUVRYWlRQUN6UUJBWDlCNElFRUtBSUFJUUVEUUNBQUlBRkhCRUJCM0lFRUVEUWFJQUZCQ0dzaUFSRE5BUXdCQ3d0QjRJRUVJQUEyQWdBTExRRUJmeU1BUVlBUWF5SURKQUFnQTBHQUVDQUJFRDRnQWhDWUFob2dBQ0FERUpnQkdpQURRWUFRYWlRQUN6UUJBbjhEUUNBQUVFWWdBa3NFUUNBQUlBSVFVQ2dDQUNJRFFRZ2dBU0FES0FJQUtBSUlFUVVBSUFKQkFXb2hBZ3dCQ3dzTEZBQWdBRUVNYWtFQUlBRW9BZ1JCOE9nQlJoc0xEQUFnQUVFTWFpZ0NBQkF6QzBrQkFYOGpBRUVnYXlJQ0pBQWdBaUFCTmdJTUlBQVF6Z01nQUVHRTZBRTJBZ0FnQUVFTWFpQUNRUWhxSUFKQkRHb2dBa0VZYWhDa0FpQUNRUkJxRUtRQ0dpQUNRU0JxSkFBTEZBQWdBRUVNYWtFQUlBRW9BZ1JCNU9jQlJoc0xDd0FnQUVFTWFpZ0NBQm9MWmdFRGZ5TUFRU0JySWdJa0FDQUFJQUUyQWdBZ0FrRVlhaUFCRUtFRklRTkJFQkJMSWdRZ0FSQ21DQ0FBSUFRMkFnUWdBeEMxQVJvZ0FpQUJOZ0lFSUFJZ0FUWUNBQ0FES0FJQUlRRWdBMEVBTmdJQUlBRUVRQ0FCRURNTElBSkJJR29rQUNBQUMwa0JBWDhqQUVFZ2F5SUNKQUFnQWlBQk5nSU1JQUFRemdNZ0FFSDQ1Z0UyQWdBZ0FFRU1haUFDUVFocUlBSkJER29nQWtFWWFoQ2tBaUFDUVJCcUVLUUNHaUFDUVNCcUpBQUxPd0VDZnlNQVFSQnJJZ0lrQUNBQUlBRTJBZ0JCRUJCTElnTWdBUkNxQ0NBQUlBTTJBZ1FnQWlBQk5nSUVJQUlnQVRZQ0FDQUNRUkJxSkFBTEtnRUJmeU1BUVJCcklnSWtBQ0FDUVFocUlBRVFxUWdpQVNBQUVOSURJQUVRelFFZ0FrRVFhaVFBQ3ljQUlBQkNBRGNDQUNBQVFnQTNBaEFnQUVJQU53SUlJQUJCR0dvUXF3SWFJQUFnQVJDdUNBdExBQ0FBSUFFb0FnQTJBZ0FnQUNBQktBSUVOZ0lFSUFBZ0FTZ0NDRFlDQ0NBQUlBRW9BZ3cyQWd3Z0FDQUJLQUlRTmdJUUlBQWdBU2dDRkRZQ0ZDQUFRUmhxSUFGQkdHb1FuZ1VMSWdBZ0FDQUJJQUFvQWdSQkFtdXpFTlVDSUFJZ0FDZ0NDRUVDYTdNUTFRSVFSd3RaQVFGOUlBTVFtQWNoQlNBREVKa0hJUU1nQUVHQWdJRDhBellDSUNBQVFnQTNBaGdnQUNBQ09BSVVJQUFnQlNBRWxDSUNPQUlRSUFBZ0FUZ0NDQ0FBSUFJNEFnQWdBQ0FESUFTVUlnRTRBZ3dnQUNBQmpEZ0NCQXZFQVFFSGZ5QUFRZFFBRVB3RVFTUWhCQU5BQWtBQ1FDQUNRU1ZHQkVBZ0EwR2FCVVlOQVVIQWx3UkJrTEVCRURKQnFpVVFNa0dkS2hBeVFab0RFRFpCaEM4UU1rSDdzd0VRTWhBMUVBQUFDeUFESUFScUlRVWdBU0FDUVFKMGFpRUdJQUpCQVdvaUJ5RUNBMEFnQXlBRlJnMENJQUFnQTBFSWJXb2lDQ0FJTFFBQUlBWXFBZ0FnQVNBQ1FRSjBhaW9DQUYwZ0EwRUhjWFJ5T2dBQUlBSkJBV29oQWlBRFFRRnFJUU1NQUFzQUN3OExJQVJCQVdzaEJDQUZJUU1nQnlFQ0RBQUxBQXZlRHdJQmZ3SjlJd0JCNEFKckloRWtBQ0FSUWJBQ2FpQUNLZ0lBSUFJcUFnUWdBaW9DQ0NBQ0tnSU1JQkNVUXdBQWdEK1hJaEFRc0FnZ0VTb0N4QUloRWlBUktnSzRBaUVUSUJGQmdBSnFJQkZCc0FKcUlBTVFXQ0FSUVlBQ2FrRUljaUFSUWJBQ2FpQURRUWhxRUZnZ0VVR1FBbW9nRVVHd0Ftb2dBMEVRYWhCWUlCRkJtQUpxSUJGQnNBSnFJQU5CR0dvUVdDQVJRYUFDYWlBUlFiQUNhaUFEUVNCcUVGZ2dFVUdvQW1vZ0VVR3dBbW9nQTBFb2FoQllJQkZCMEFGcUlCRkJzQUpxSUFRUVdDQVJRZEFCYWtFSWNpQVJRYkFDYWlBRVFRaHFFRmdnRVVIZ0FXb2dFVUd3QW1vZ0JFRVFhaEJZSUJGQjZBRnFJQkZCc0FKcUlBUkJHR29RV0NBUlFmQUJhaUFSUWJBQ2FpQUVRU0JxRUZnZ0VVSDRBV29nRVVHd0Ftb2dCRUVvYWhCWUlCRkJvQUZxSUJGQnNBSnFJQVVRV0NBUlFhQUJha0VJY2lBUlFiQUNhaUFGUVFocUVGZ2dFVUd3QVdvZ0VVR3dBbW9nQlVFUWFoQllJQkZCdUFGcUlCRkJzQUpxSUFWQkdHb1FXQ0FSUWNBQmFpQVJRYkFDYWlBRlFTQnFFRmdnRVVISUFXb2dFVUd3QW1vZ0JVRW9haEJZSUJGQjhBQnFJQkZCc0FKcUlBWVFXQ0FSUWZBQWFrRUljaUFSUWJBQ2FpQUdRUWhxRUZnZ0VVR0FBV29nRVVHd0Ftb2dCa0VRYWhCWUlCRkJpQUZxSUJGQnNBSnFJQVpCR0dvUVdDQVJRWkFCYWlBUlFiQUNhaUFHUVNCcUVGZ2dFVUdZQVdvZ0VVR3dBbW9nQmtFb2FoQllJQkZCUUdzZ0VVR3dBbW9nQnhCWUlCRkJRR3RCQ0hJZ0VVR3dBbW9nQjBFSWFoQllJQkZCMEFCcUlCRkJzQUpxSUFkQkVHb1FXQ0FSUWRnQWFpQVJRYkFDYWlBSFFSaHFFRmdnRVVIZ0FHb2dFVUd3QW1vZ0IwRWdhaEJZSUJGQjZBQnFJQkZCc0FKcUlBZEJLR29RV0NBUlFSQnFJQkZCc0FKcUlBZ1FXQ0FSUVJCcVFRaHlJQkZCc0FKcUlBaEJDR29RV0NBUlFTQnFJQkZCc0FKcUlBaEJFR29RV0NBUlFTaHFJQkZCc0FKcUlBaEJHR29RV0NBUlFUQnFJQkZCc0FKcUlBaEJJR29RV0NBUlFUaHFJQkZCc0FKcUlBaEJLR29RV0NBQklCRkJER29nRVVFSWFpQVFJQStVRVA0QklBQWdBU0FSS2dJUUlCRXFBaFFnRVNnQ0RDQVJLQUlJRUZVNEFnQWdBQ0FCSUJFcUFoZ2dFU29DSENBUktBSU1JQkVvQWdnUVZUZ0NCQ0FBSUFFZ0VTb0NJQ0FSS2dJa0lCRW9BZ3dnRVNnQ0NCQlZPQUlJSUFBZ0FTQVJLZ0lvSUJFcUFpd2dFU2dDRENBUktBSUlFRlU0QWd3Z0FDQUJJQkVxQWpBZ0VTb0NOQ0FSS0FJTUlCRW9BZ2dRVlRnQ0VDQUFJQUVnRVNvQ09DQVJLZ0k4SUJFb0Fnd2dFU2dDQ0JCVk9BSVVJQUVnRVVFTWFpQVJRUWhxSUJBZ0RwUVEvZ0VnQUNBQklCRXFBa0FnRVNvQ1JDQVJLQUlNSUJFb0FnZ1FWVGdDR0NBQUlBRWdFU29DU0NBUktnSk1JQkVvQWd3Z0VTZ0NDQkJWT0FJY0lBQWdBU0FSS2dKUUlCRXFBbFFnRVNnQ0RDQVJLQUlJRUZVNEFpQWdBQ0FCSUJFcUFsZ2dFU29DWENBUktBSU1JQkVvQWdnUVZUZ0NKQ0FBSUFFZ0VTb0NZQ0FSS2dKa0lCRW9BZ3dnRVNnQ0NCQlZPQUlvSUFBZ0FTQVJLZ0pvSUJFcUFtd2dFU2dDRENBUktBSUlFRlU0QWl3Z0FTQVJRUXhxSUJGQkNHb2dFQ0FObEJEK0FTQUFJQUVnRVNvQ2NDQVJLZ0owSUJFb0Fnd2dFU2dDQ0JCVk9BSXdJQUFnQVNBUktnSjRJQkVxQW53Z0VTZ0NEQ0FSS0FJSUVGVTRBalFnQUNBQklCRXFBb0FCSUJFcUFvUUJJQkVvQWd3Z0VTZ0NDQkJWT0FJNElBQWdBU0FSS2dLSUFTQVJLZ0tNQVNBUktBSU1JQkVvQWdnUVZUZ0NQQ0FBSUFFZ0VTb0NrQUVnRVNvQ2xBRWdFU2dDRENBUktBSUlFRlU0QWtBZ0FDQUJJQkVxQXBnQklCRXFBcHdCSUJFb0Fnd2dFU2dDQ0JCVk9BSkVJQUVnRVVFTWFpQVJRUWhxSUJBZ0RKUVEvZ0VnQUNBQklCRXFBcUFCSUJFcUFxUUJJQkVvQWd3Z0VTZ0NDQkJWT0FKSUlBQWdBU0FSS2dLb0FTQVJLZ0tzQVNBUktBSU1JQkVvQWdnUVZUZ0NUQ0FBSUFFZ0VTb0NzQUVnRVNvQ3RBRWdFU2dDRENBUktBSUlFRlU0QWxBZ0FDQUJJQkVxQXJnQklCRXFBcndCSUJFb0Fnd2dFU2dDQ0JCVk9BSlVJQUFnQVNBUktnTEFBU0FSS2dMRUFTQVJLQUlNSUJFb0FnZ1FWVGdDV0NBQUlBRWdFU29DeUFFZ0VTb0N6QUVnRVNnQ0RDQVJLQUlJRUZVNEFsd2dBU0FSUVF4cUlCRkJDR29nRUNBTGxCRCtBU0FBSUFFZ0VTb0MwQUVnRVNvQzFBRWdFU2dDRENBUktBSUlFRlU0QW1BZ0FDQUJJQkVxQXRnQklCRXFBdHdCSUJFb0Fnd2dFU2dDQ0JCVk9BSmtJQUFnQVNBUktnTGdBU0FSS2dMa0FTQVJLQUlNSUJFb0FnZ1FWVGdDYUNBQUlBRWdFU29DNkFFZ0VTb0M3QUVnRVNnQ0RDQVJLQUlJRUZVNEFtd2dBQ0FCSUJFcUF2QUJJQkVxQXZRQklCRW9BZ3dnRVNnQ0NCQlZPQUp3SUFBZ0FTQVJLZ0w0QVNBUktnTDhBU0FSS0FJTUlCRW9BZ2dRVlRnQ2RDQUJJQkZCREdvZ0VVRUlhaUFRSUFxVUVQNEJJQUFnQVNBUktnS0FBaUFSS2dLRUFpQVJLQUlNSUJFb0FnZ1FWVGdDZUNBQUlBRWdFU29DaUFJZ0VTb0NqQUlnRVNnQ0RDQVJLQUlJRUZVNEFud2dBQ0FCSUJFcUFwQUNJQkVxQXBRQ0lCRW9BZ3dnRVNnQ0NCQlZPQUtBQVNBQUlBRWdFU29DbUFJZ0VTb0NuQUlnRVNnQ0RDQVJLQUlJRUZVNEFvUUJJQUFnQVNBUktnS2dBaUFSS2dLa0FpQVJLQUlNSUJFb0FnZ1FWVGdDaUFFZ0FDQUJJQkVxQXFnQ0lCRXFBcXdDSUJFb0Fnd2dFU2dDQ0JCVk9BS01BU0FCSUJGQkRHb2dFVUVJYWlBUUlBbVVFUDRCSUFBZ0FTQVRJQklnRVNnQ0RDQVJLQUlJRUZVNEFwQUJJQkZCNEFKcUpBQkJBUXRhQVFKL0l3QkJFR3NpQXlRQUlBTWdBRUVJYWlBQkVJQUZJZ0VvQWdBaEJBTkFJQUVvQWdRZ0JFY0VRQ0FBS0FJUUlBRW9BZ0FnQWhDTkF5QUJJQUVvQWdCQkFXb2lCRFlDQUF3QkN3c2dBUkMyQVNBRFFSQnFKQUFMVlFFQ2Z5TUFRUkJySWdNa0FDQURJQUFnQVJDT0F5SUJLQUlFSVFRRFFDQUJLQUlJSUFSSEJFQWdBQkEwSUFFb0FnUWdBaENOQXlBQklBRW9BZ1JCQVdvaUJEWUNCQXdCQ3dzZ0FSQjJJQU5CRUdva0FBdHNBUUovSXdCQklHc2lCQ1FBQWtBZ0FTQUFFRFFvQWdBZ0FDZ0NCR3ROQkVBZ0FDQUJJQUlRdEFnTUFRc2dBQkEwSVFNZ0JFRUlhaUFBSUFBUWtRRWdBV29RakFNZ0FCQ1JBU0FERVBjRElnTWdBU0FDRUxNSUlBQWdBeEQyQXlBREVQVURDeUFFUVNCcUpBQUxTUUVCZnlNQVFhQUJheUlSSkFBZ0VTQUJJQUlnQXlBRUlBVWdCaUFISUFnZ0NTQUtJQXNnRENBTklBNGdEeUFRRUxJSUlnRUVRQ0FBSUJFUXNRZ0xJQkZCb0FGcUpBQWdBUXN6QVFGL0lBRWdBQkNSQVNJRFN3UkFJQUFnQVNBRGF5QUNFTFVJRHdzZ0FTQURTUVJBSUFBZ0FDZ0NBQ0FCYWhEWEF3c0x0QVlDQlg4RmZDTUFRZUFBYXlJRUpBQUNRQ0FBS3dOWVJBQUFBQUFBQUFBQVprRUJjd1JBQTBCQkFDRURJQVZCQTBZTkFnTkFJQU5CQkVaRkJFQWdBMEVEZENJR0lBUWdCVUVGZENJSGFtb2dBQ0FIYWlBR2Fpc0RBSm81QXdBZ0EwRUJhaUVEREFFTEN5QUZRUUZxSVFVTUFBc0FDd05BUVFBaEF5QUZRUU5HRFFFRFFDQURRUVJHUlFSQUlBTkJBM1FpQmlBRUlBVkJCWFFpQjJwcUlBQWdCMm9nQm1vckF3QTVBd0FnQTBFQmFpRUREQUVMQ3lBRlFRRnFJUVVNQUFzQUMwRUFJUVVEZjBFQUlRTWdCVUVEUmdSL0lBRWdCQ3NEUUNJSUlBUXJBMGdpQ1NBRUt3TlFJZ29Rd0FNaUN6a0RVQ0FDSUFnZ0M2TWlDRGtEUUNBQ0lBa2dBU3NEVUtNaUNUa0RTQ0FDSUFvZ0FTc0RVS01pQ2prRFVDQUNJQVFyQTFnZ0FTc0RVS001QTFnZ0FTQUlJQWtnQ2lBRUt3TWdJZ2tnQkNzREtDSUtJQVFyQXpBaUN4QytBeUlJT1FNd0lBRWdDU0FJSUFJckEwQ2lvU0lKSUFvZ0NDQUNLd05Jb3FFaUNpQUxJQWdnQWlzRFVLS2hJZ2dRd0FNaUN6a0RLQ0FDSUFrZ0M2TTVBeUFnQWlBS0lBRXJBeWlqT1FNb0lBSWdDQ0FCS3dNb296a0RNQ0FCSUFJckEwQWdBaXNEU0NBQ0t3TlFJQVFyQXdBaUNpQUVLd01JSWdzZ0JDc0RFQ0lNRUw0RElnZzVBeEFnQVNBQ0t3TWdJQUlyQXlnZ0Fpc0RNQ0FLSUFzZ0RCQytBeUlKT1FNSUlBRWdDaUFKSUFJckF5Q2lvU0FJSUFJckEwQ2lvU0lLSUFzZ0NTQUNLd01vb3FFZ0NDQUNLd05Jb3FFaUN5QU1JQWtnQWlzRE1LS2hJQWdnQWlzRFVLS2hJZ2dRd0FNaUNUa0RBQ0FDSUFvZ0NhTTVBd0FnQWlBTElBRXJBd0NqT1FNSUlBSWdDQ0FCS3dNQW96a0RFQ0FDSUFRckF6Z2dBU3NETUNBQ0t3TllJZ2lpb1NBQkt3TW9veUlKT1FNNElBSWdCQ3NER0NBSklBRXJBd2lpb1NBSUlBRXJBeENpb1NBQkt3TUFvemtER0VFQUlRQURmMEVBSVFNZ0FFRURSZ1IvSUFSQjRBQnFKQUJCQUFVRFFDQURRUU5HUlFSQUlBRWdBRUVGZEdvZ0EwRURkR29pQWlBQ0t3TUFJQUVyQTFDak9RTUFJQU5CQVdvaEF3d0JDd3NnQUVFQmFpRUFEQUVMQ3dVRFFDQURRUVJHUlFSQUlBRWdCVUVGZEdvZ0EwRURkR3BDQURjREFDQURRUUZxSVFNTUFRc0xJQVZCQVdvaEJRd0JDd3NMb3dJQkJIOENRQ0FCQkVBZ0FCQ0VBU0FDRUlNQlJ3MEJBMEFnQWhDREFTQVNUUVJBQWtBZ0FoQ0RBU0FSUmcwQVFjQ1hCRUhReHdBUU1rR3FKUkF5UVowcUVESkI2UVFRTmtHRUx4QXlRY1ROQUJBeUVEVVFBQUFMQlNBQUlCRVFnZ0lnQVNBQ0lCSVFhaUFESUFRZ0JTQUdJQWNnQ0NBSklBb2dDeUFNSUEwZ0RpQVBJQkFRdGdnRVFDQUNJQklRYWlFVElBQWdFUkNCQWlJVUlCTXRBQkE2QUJBZ0ZDQVRLUUlJTndJSUlCUWdFeWtDQURjQ0FDQVJRUUZxSVJFTElCSkJBV29oRWd3QkN3c2dBQ0FSRU5vRUR3dEJ3SmNFUVpjZkVESkJxaVVRTWtHZEtoQXlRWmtFRURaQmhDOFFNa0djTlJBeUVEVVFBQUFMUWNDWEJFRzNPeEF5UWFvbEVESkJuU29RTWtHYUJCQTJRWVF2RURKQnZNRUFFRElRTlJBQUFBdHNBQ0FCUWVBQUVLa0JJQUVnQXhDREFSRGFCQ0FCSUFJZ0F5QUFJQUJCTUdvZ0FFSGdBR29nQUVHUUFXb2dBRUhBQVdvZ0FFSHdBV29nQUNvQ29BSWdBQ29DcEFJZ0FDb0NxQUlnQUNvQ3JBSWdBQ29Dc0FJZ0FDb0N0QUlnQUNvQ3VBSWdBQ29DdkFJUXVRZ0xtQUVBSUFCQjBPUUJRUXdRNndFZ0FFRXdha0dBNVFGQkRCRHJBU0FBUWVBQWFrR3c1UUZCREJEckFTQUFRWkFCYWtIZzVRRkJEQkRyQVNBQVFjQUJha0dRNWdGQkRCRHJBU0FBUWZBQmFrSEE1Z0ZCREJEckFTQUFRczJacy9pRGdJRHd3QUEzQXJnQ0lBQkN6Wm16OXJQbXpQaytOd0t3QWlBQVFvQ0FnUFRqekpuVFBqY0NxQUlnQUVMTm1iUHVzK2JNbVQ0M0FxQUNDOWNCQWdOL0FYMGpBRUVRYXlJQ0pBQWdBaUFCTmdJTUFrQWdBaUFCUVFGR0JIOUJBZ1VnQVNBQlFRRnJjVVVOQVNBQkVMOENDeUlCTmdJTUN3SkFJQUFRaUFFaUF5QUJTUVJBSUFBZ0FSRGNCQXdCQ3lBQklBTlBEUUFnQXhEZEFTRUVBbjhnQUJBOUtBSUFzeUFBRUZzcUFnQ1ZqU0lGUXdBQWdFOWRJQVZEQUFBQUFHQnhCRUFnQmFrTUFRdEJBQXNoQVNBQ0FuOGdCQVJBSUFFUTBBTU1BUXNnQVJDL0FnczJBZ2dnQWlBQ1FReHFJQUpCQ0dvUWZTZ0NBQ0lCTmdJTUlBRWdBMDhOQUNBQUlBRVEzQVFMSUFKQkVHb2tBQXRsQVFGL0l3QkJFR3NpQkNRQUlBRVFOQ0VCSUFCQkVCQkxJQVJCQ0dvZ0FVRUFFS2NDRUtZQ0lnQW9BZ0FpQVNBREtBSUFOZ0lJSUFFZ0F5Z0NCRFlDRENBQUVFaEJBVG9BQkNBQUtBSUFJQUkyQWdRZ0FDZ0NBRUVBTmdJQUlBUkJFR29rQUF1WEJBSUZmd0Y5SXdCQklHc2lCQ1FBSUFFUVBSb2dBaWdDQUNFSElBRVFpQUVoQlNBRVFRQTZBQjhDUUFKQUlBVkZEUUFnQVNBSElBVVFXU0lJRUR3b0FnQWlCa1VOQUFOQUlBWW9BZ0FpQmtVTkFTQUhJQVlvQWdSSEJFQWdCaWdDQkNBRkVGa2dDRWNOQWdzZ0FSQmJJQVpCQ0dvZ0FoRE1BVVVOQUFzTUFRc2dCRUVRYWlBQklBY2dBeEM5Q0NBQkVEMG9BZ0FoQWlBQkVGc2hBd0pBSUFVRVFDQUNRUUZxc3lBREtnSUFJQVd6bEY1QkFYTU5BUXNnQkNBRkVOMEJRUUZ6SUFWQkFYUnlOZ0lNSUFRQ2Z5QUJFRDBvQWdCQkFXcXpJQUVRV3lvQ0FKV05JZ2xEQUFDQVQxMGdDVU1BQUFBQVlIRUVRQ0FKcVF3QkMwRUFDellDQ0NBQklBUkJER29nQkVFSWFoQjlLQUlBRUx3SUlBY2dBUkNJQVNJRkVGa2hDQXNDUUNBQklBZ1FQQ2dDQUNJQ1JRUkFJQVFvQWhBZ0FVRUlhaUlDS0FJQU5nSUFJQUVnQkNnQ0VEWUNDQ0FCSUFnUVBDQUNOZ0lBSUFRb0FoQW9BZ0JGRFFFZ0JDZ0NFQ0VDSUFFZ0JDZ0NFQ2dDQUNnQ0JDQUZFRmtRUENBQ05nSUFEQUVMSUFRb0FoQWdBaWdDQURZQ0FDQUNJQVFvQWhBMkFnQUxJQVJCRUdvUXRRRWhCaUFCRUQwaUFTQUJLQUlBUVFGcU5nSUFJQVJCQVRvQUh5QUVRUkJxSWdJb0FnQWhBU0FDUVFBMkFnQWdBUVJBSUFJUVNDSUNMUUFFQkVBZ0FpZ0NBQm9MSUFFRVFDQUNLQUlBR2lBQkVETUxDd3NnQUNBRVFSQnFJQVlRYnlBRVFSOXFFS2dDSUFSQklHb2tBQXM3QVFGL0l3QkJFR3NpQXlRQUlBTkJDR29nQVNBQ0lBSVF2Z2dnQUNBRFFRaHFJZ0VvQWdBUWJ4b2dBQ0FCTFFBRU9nQUVJQU5CRUdva0FBdUJCQUlDZkFKL0lBQW9BZ0FoQmlBQUtBSUVJUWNnQXlBQ05nSUVJQU1nQVRZQ0FDQUN0eUFIdDZNaEJDQUJ0eUFHdDZNaEJVRUFJUUVEUUNBQlFRUkhCRUFnQXlBQlFRTjBJZ1pxSWdJZ0JTQUFJQVpxSWdZckF3aWlPUU1JSUFJZ0JDQUdLd01vb2prREtDQUNJQVlyQTBnNUEwZ2dBVUVCYWlFQkRBRUxDd0pBQWtBQ1FBSkFBa0FDUUNBQUtBS3dBU0lCUVFGckRnUURBZ0VBQlFzZ0F5QUFLd05vT1FOb0lBTWdBQ3NEY0RrRGNDQURJQUFyQTNnNUEzZ2dBeUFBS3dPQUFUa0RnQUVnQXlBRklBQXJBNGdCb2prRGlBRWdBeUFFSUFBckE1QUJvamtEa0FFZ0F5QUZJQUFyQTVnQm9qa0RtQUVnQXlBRUlBQXJBNkFCb2prRG9BRWdBeUFBS3dPb0FUa0RxQUVNQXdzZ0F5QUZJQUFyQTJpaU9RTm9JQU1nQkNBQUt3TndvamtEY0NBRElBQXJBM2c1QTNnZ0F5QUFLd09BQVRrRGdBRWdBeUFBS3dPSUFTQUZJQVNpb3prRGlBRWdBeUFBS3dPUUFTQUVJQVVnQmFJZ0JLS2lvemtEa0FFTUFnc2dBeUFGSUFBckEyaWlPUU5vSUFNZ0JDQUFLd053b2prRGNDQURJQUFyQTNnNUEzZ2dBeUFBS3dPQUFTQUZJQVNpb3prRGdBRWdBeUFBS3dPSUFTQUVJQVVnQmFJZ0JLS2lvemtEaUFFTUFRc2dBeUFGSUFBckEyaWlPUU5vSUFNZ0JDQUFLd053b2prRGNDQURJQUFyQTNnNUEzZ2dBeUFBS3dPQUFTQUZJQVNpb3prRGdBRUxJQU1nQVRZQ3NBRUxDNWtDQWdsL0FYMENRQ0FCUVFCS0JFQWdBa0VBVEEwQklBRkJBV3NoQkNBQUlBSkJBV3NpQ0VFQ2RHb2hDUU5BSUFrcUFnQWhEQ0FFSWdFZ0JTSURURVVFUUFOQUlBTWhCZ05BSUFZaUEwRUJhaUVHSUFBZ0EwRUNkR29pQ2lvQ0FDQU1YUTBBQ3lBQklRY0RRQ0FISWdGQkFXc2hCeUFNSUFBZ0FVRUNkR29pQ3lvQ0FGME5BQXNnQVNBRFRnUkFJQW9nQ3hDdkJTQUdJUU1nQnlFQkN5QUJJQU5PRFFBTElBUWdBU0FDSUFOS0d5RUVJQU1nQlNBQklBaElHeUVGREFFTEN5QU1Ed3RCd0pjRVFaYXVBUkF5UVpPd0FSQXlRYU1sRURKQk5SQTJRWm9xRURKQjZMTUJFRElRTlJBQUFBdEJ3SmNFUVl5MUFSQXlRWk93QVJBeVFhTWxFREpCTmhBMlFab3FFREpCMzdVQkVESVFOUkFBQUF0L0FRSi9Jd0JCRUdzaUF5UUFJQUZCQURZQ0FDQUNRWDgyQWdBZ0EwRUlhaUFBUWR3QWFoRExBeENxQWlFQUEwQWdBQ0FERUdNUXFnSVFmQVJBSUFBUWJDRUVJQUVxQWdBZ0JDZ0NCTE5kUVFGelJRUkFJQUlnQUJCc0tBSUFOZ0lBSUFFZ0FCQnNLQUlFc3pnQ0FBc2dBQkRLQXd3QkN3c2dBMEVRYWlRQUM1Y0JBUUYvSUFBb0FqUWhDU0FCSUFVZ0FDb0NGQ0lGa3lBQUtnSVlJQVdURU1ZQ0lBbXlsRGdDQUNBQUtBSTRJUUVnQWlBR0lBQXFBaHdpQlpNZ0FDb0NJQ0FGa3hER0FpQUJzcFE0QWdBZ0F5QUh1MFFZTFVSVSt5RUpRS0JFZzhqSmJUQmZ4RCtpSUFBb0FqeTNvclk0QWdBZ0FDZ0NRQ0VCSUFRZ0NDQUFLZ0lrSWdXVElBQXFBaWdnQlpNUXhnSWdBYktVT0FJQUN6a0JBWDBnQVJDWUJ5RURJQUVRbVFjaEFTQUFJQU1nQXBRaUF6Z0NEQ0FBSUFNNEFnQWdBQ0FCSUFLVUlnRTRBZ2dnQUNBQmpEZ0NCQXZuQ0FNSmZ3RjhCbjBDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQUtnSVVJZzhnQVY0TkFDQUFLZ0lZSWhBZ0FWOE5BQ0FBS2dJY0loRWdBbDROQUNBRHV5SU9SQmd0UkZUN0lRbEFaQ0FPUkJndFJGVDdJUW5BWlhJTkFDQUFLZ0lnSWhJZ0FsOE5BQ0FBS2dJa0loTWdCRjROQUNBQUtnSW9JaFFnQkY4TkFDQUJJQTlnUlEwQklBRWdFRjFGRFFJZ0FpQVJZRVVOQXlBQ0lCSmRSUTBFSUE1RUdDMUVWUHNoQ2NCa1JRMEZJQTVFR0MxRVZQc2hDVUJsUlEwR0lBUWdFMkJGRFFjZ0JDQVVYVVVOQ0NBQUlBQkJ4QUJxSUFCQnlBQnFJQUJCekFCcUlBQkIwQUJxSUFFZ0FpQURJQVFRd3dnZ0FDb0NSRU1BQUFDL2tvNGhBU0FBS2dKSVF3QUFBTCtTamlFQ0lBQXFBbEJEQUFBQXY1S09JUU1DZnlBQUtnSk1Rd0FBQUwrU2ppSUVpME1BQUFCUFhRUkFJQVNvREFFTFFZQ0FnSUI0Q3lBQUtBSThJZ1ZxSUFWdklRb0NmeUFCaTBNQUFBQlBYUVJBSUFHb0RBRUxRWUNBZ0lCNEN5RUdBbjhnQW90REFBQUFUMTBFUUNBQ3FBd0JDMEdBZ0lDQWVBc2hCeUFHUVFCSUlRZ0NmeUFEaTBNQUFBQlBYUVJBSUFPb0RBRUxRWUNBZ0lCNEN5RUpJQWdnQjBFQVNISU5BQ0FKUVFCSUlBWkJBV29pQ0NBQUtBSTBUbklOQUNBSFFRRnFJZ3NnQUNnQ09FNE5BQ0FKUVFGcUlnd2dBQ2dDUUU0TkFDQUFJQUFnQmlBSElBb2dDUkNYQVJDV0FTQUFJQUFnQ0NBSElBb2dDUkNYQVJDV0FTQUFJQUFnQ0NBTElBb2dDUkNYQVJDV0FTQUFJQUFnQ0NBTElBcEJBV29nQlc4aUJTQUpFSmNCRUpZQklBQWdBQ0FJSUFzZ0JTQU1FSmNCRUpZQklBQWdBQ0FJSUFzZ0NpQU1FSmNCRUpZQklBQWdBQ0FJSUFjZ0JTQUpFSmNCRUpZQklBQWdBQ0FJSUFjZ0JTQU1FSmNCRUpZQklBQWdBQ0FJSUFjZ0NpQU1FSmNCRUpZQklBQWdBQ0FHSUFzZ0NpQUpFSmNCRUpZQklBQWdBQ0FHSUFzZ0JTQUpFSmNCRUpZQklBQWdBQ0FHSUFzZ0JTQU1FSmNCRUpZQklBQWdBQ0FHSUFzZ0NpQU1FSmNCRUpZQklBQWdBQ0FHSUFjZ0JTQUpFSmNCRUpZQklBQWdBQ0FHSUFjZ0JTQU1FSmNCRUpZQklBQWdBQ0FHSUFjZ0NpQU1FSmNCRUpZQlFRRWhEUXNnRFE4TFFjQ1hCRUhiRWhBeVFhdUhBUkF5UWFNbEVESkI2QUlRTmtHYUtoQXlRZlV1RURJUU5Rd0hDMEhBbHdSQit6UVFNa0dyaHdFUU1rR2pKUkF5UWVrQ0VEWkJtaW9RTWtIMUxoQXlFRFVNQmd0QndKY0VRWlU3RURKQnE0Y0JFREpCb3lVUU1rSHFBaEEyUVpvcUVESkJyY0VBRURJUU5Rd0ZDMEhBbHdSQnI4Y0FFREpCcTRjQkVESkJveVVRTWtIckFoQTJRWm9xRURKQnJjRUFFRElRTlF3RUMwSEFsd1JCb2MwQUVESkJxNGNCRURKQm95VVFNa0hzQWhBMlFab3FFREpCdjlJQUVESVFOUXdEQzBIQWx3UkJzTmNBRURKQnE0Y0JFREpCb3lVUU1rSHRBaEEyUVpvcUVESkJ2OUlBRURJUU5Rd0NDMEhBbHdSQjl0d0FFREpCcTRjQkVESkJveVVRTWtIdUFoQTJRWm9xRURKQi9lQUFFRElRTlF3QkMwSEFsd1JCOU9RQUVESkJxNGNCRURKQm95VVFNa0h2QWhBMlFab3FFREpCL2VBQUVESVFOUXNRQUFBTCtRSUNBWDhCZkNNQVFSQnJJZzBrQUNBRElBY2dDNU1pQnpnQ0FBSkFJQU1DZkNBSHV5SU9SQmd0UkZUN0lRbkFaVUVCYzBVRVFDQU9SQmd0UkZUN0lSbEFvQXdCQ3lBT1JCZ3RSRlQ3SVFsQVpFRUJjdzBCSUE1RUdDMUVWUHNoR2NDZ0M3WWlCemdDQUFzQ1FDQUh1eUlPUkJndFJGVDdJUW5BWkFSQUlBNUVHQzFFVlBzaENVQmxSUTBCSUFRZ0NDQU1FTVlDSWdjNEFnQWdEU0FES2dJQUlBY1F4QWdnQkNBRUtnSUFFSm9DSUFBcUFqQ1VPQUlBSUEwcUFnZ2hCeUFOS2dJTUlRZ2dBU0FGSUEwcUFnQWlCU0FKbENBTktnSUVJZ3NnQ3BTU2t5QUZJQUFxQWdpVUlBc2dBQ29DREpTU2tqZ0NBQ0FDSUFZZ0J5QUpsQ0FJSUFxVWtwTWdCeUFBS2dJSWxDQUlJQUFxQWd5VWtwSTRBZ0FnRFVFUWFpUUFEd3RCd0pjRVFhSE5BQkF5UWF1SEFSQXlRYU1sRURKQjFBTVFOa0dhS2hBeVFiL1NBQkF5RURVUUFBQUxRY0NYQkVHdzF3QVFNa0dyaHdFUU1rR2pKUkF5UWRVREVEWkJtaW9RTWtHLzBnQVFNaEExRUFBQUM2Y0JBUWQvUVg4aEJnSkFJQUFvQWdRaUF5QUJLQUlJUncwQUlBQW9BZ2dpQWlBQktBSUVSdzBBUVFBaEJpQURRUUFnQTBFQVNoc2hCeUFDUVFBZ0FrRUFTaHNoQ0NBQUtBSUFJUVJCQUNFQ0EwQWdBaUFIUmcwQklBRW9BZ0FnQWtFQ2RHb2hCVUVBSVFBRFFDQUFJQWhHUlFSQUlBUWdCU29DQURnQ0FDQUFRUUZxSVFBZ0JFRUVhaUVFSUFVZ0EwRUNkR29oQlF3QkN3c2dBa0VCYWlFQ0RBQUxBQXNnQmd2UkF3SUNmUVIvSXdCQkVHc2lDQ1FBSUFBb0FnQWdBQ2dDQkJDc0FpRUhJQWdnQXhERUF5RUdBa0FDUUNBRFFRQktCRUFnQUNnQ0FFRUFUQTBCSUFBb0FnUkJBVWdOQWlBQ1FReHFJUUlnQVVFTWFpRUpJQWV5SVFSQkFDRUJBMEFnQVNBRFJnUkFJQVpCQUJBOElBWVFReUlCSUFGQkFtMGdBVUVCY1dwQkFXc1F3UWdoQkNBQVFRVUNmeUFBS2dJWUlBQXFBaFNUSUFSREFBQ0FQcFFpQkpXTklnV0xRd0FBQUU5ZEJFQWdCYWdNQVF0QmdJQ0FnSGdMRUt3Q05nSTBJQUJCQlFKL0lBQXFBaUFnQUNvQ0hKTWdCSldOSWdTTFF3QUFBRTlkQkVBZ0JLZ01BUXRCZ0lDQWdIZ0xFS3dDSWdFMkFqZ2dBQ0FCSUFBb0FqUnNJZ0UyQWxRZ0FDQUFLQUk4SUFGc05nSllJQVlRZFNBSVFSQnFKQUFQQlNBSklBRkJCSFFpQjJvcUFnQWdBaUFIYWlvQ0FCREdBaUVGSUFZZ0FSQThJQVVnQkpRNEFnQWdBVUVCYWlFQkRBRUxBQXNBQzBIQWx3UkJvUFVBRURKQmloNFFNa0dqSlJBeVFkQUJFRFpCbWlvUU1rSDgrQUFRTWhBMUVBQUFDMEhBbHdSQm9md0FFREpCaWg0UU1rR2pKUkF5UWRFQkVEWkJtaW9RTWtIbi93QVFNaEExRUFBQUMwSEFsd1JCK0lJQkVESkJpaDRRTWtHakpSQXlRZElCRURaQm1pb1FNa0g5aFFFUU1oQTFFQUFBQzdRQ0FRZC9Jd0JCRUdzaUJTUUFJQUJCM0FCcUVOMEVJQU1FUUNBQVFmQUFhaUlISUFOQkFuUVFqQUlnQUVIOEFHb2lDQ0FERUlVQ0lBQXRBQkFFUUNBQUlBRWdBaUFERU1nSUN5QURRUUFnQTBFQVNoc2hDVUVBSVFNRFFDQUdJQWxHQkVBZ0J5QURRUUowRUl3Q0lBZ2dBeENGQWdVZ0FDQUZRUXhxSUFWQkNHb2dCVUVFYWlBRklBRWdCa0VFZENJS2FpSUVLZ0lBSUFRcUFnUWdCQ29DQ0NBRUtnSU1JQUlnQ21vaUJDb0NBQ0FFS2dJRUlBUXFBZ2dnQkNvQ0RCREdDQ0FBSUFVcUFnd2dCU29DQ0NBRktnSUVJQVVxQWdBUXhRZ0VRQ0FISUFOQkFuUVFQQ0lFSUFBcUFrUTRBZ0FnQkNBQUtnSklPQUlFSUFRZ0FDb0NURGdDQ0NBRUlBQXFBbEE0QWd3Z0NDQURFRHdnQmpZQ0FDQURRUUZxSVFNTElBWkJBV29oQmd3QkN3c0xJQVZCRUdva0FBdUpBUUFnQUVFS05nSkFJQUJCRERZQ1BDQUFRUUEyQWpnZ0FFRUFOZ0kwSUFCQ2dJQ0EvSXVBZ01BL053SWtJQUFnQkRnQ0lDQUFJQU00QWh3Z0FDQUNPQUlZSUFBZ0FUZ0NGQ0FBUVlDQWdJa0VOZ0lzSUFCQkFEWUNWQ0FBUVFBMkFsaERBQUFnUVJDYUFpRUJJQUJCQVRvQUVDQUFRd0FBZ0Q4Z0FaVTRBakFnQUVIY0FHb1EzUVFMUUFBZ0FFSUFOd0lBSUFCQkFUb0FFQ0FBUWdBM0FnZ2dBRUVVYWtFQVFjZ0FFRHNhSUFCQjNBQnFFSVlDR2lBQVFmQUFhaEJPR2lBQVFmd0FhaEJPR2d1bkFRRUhmMEYvSVFZQ1FDQUFLQUlFSWdNZ0FTZ0NDRWNOQUNBQUtBSUlJZ0lnQVNnQ0JFY05BRUVBSVFZZ0EwRUFJQU5CQUVvYklRY2dBa0VBSUFKQkFFb2JJUWdnQUNnQ0FDRUVRUUFoQWdOQUlBSWdCMFlOQVNBQktBSUFJQUpCQTNScUlRVkJBQ0VBQTBBZ0FDQUlSa1VFUUNBRUlBVXJBd0E1QXdBZ0FFRUJhaUVBSUFSQkNHb2hCQ0FGSUFOQkEzUnFJUVVNQVFzTElBSkJBV29oQWd3QUN3QUxJQVlMOWhJQ0VIOEJmQ0FCUVFBZ0FVRUFTaHNoQ1NBRUtBSUFJZ2dnQWtFQmF5SVFJQUZzUVFGMGFpRUdJQWdoQndOQUlBVWdDVVpGQkVBZ0JrRUFPd0VBSUFkQkFEc0JBQ0FGUVFGcUlRVWdCMEVDYWlFSElBWkJBbW9oQmd3QkN3c2dBa0VBSUFKQkFFb2JJUXNnQ0NBQlFRRnJJZ3BCQVhScUlRWkJBQ0VGSUFnaEJ3TkFJQVVnQzBaRkJFQWdCa0VBT3dFQUlBZEJBRHNCQUNBRlFRRnFJUVVnQmlBQlFRRjBJZ2xxSVFZZ0J5QUphaUVIREFFTEN5QVFRUUVnRUVFQlNoc2hFU0FFUVpDQXlBQnFJUWtnQUNBQlFRRnFJZ1ZxSVE4Z0JDZ0NCQ0FGYWlFT0lBcEJBU0FLUVFGS0d5SVNRUUZySVJNZ0NDQUZRUUYwYWlFSFFRQWdBV3RCQVhRaEZFRUFJUXRCQVNFTUFrQURRQ0FNSUJGSEJFQWdEeUFUYWlFUVFRRWhCZ05BQWtBQ1FBSkFJQVlnRWtjRVFDQURJQTh0QUFCT0JFQWdEa0gvQVRvQUFDQUhJQlJxSWdvdkFRQWlCVUVRZEVFUWRTSUFRUUZPQkVBZ0J5QUFPd0VBSUFRZ0JVRWNiR29pQlVHTWdOQUFhaUFNTmdJQUlBVkI5UC9QQUdvaUFDQUFLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBQ0FBS0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQUNBQUtBSUFJQXhxTmdJQURBVUxJQXBCQW1zdkFRQWlDRUVRZEVFUWRTRUFJQW91QVFJaUNrRUJUZ1JBSUFCQkFVNEVRQ0FFUVpDQXlBQnFJZ1VnQ2tFQ2RHcEJCR3NvQWdBaUFDQUlRUUowSUFWcVFRUnJLQUlBSWdoS0JFQWdCeUFJT3dFQVFRQWhEU0FMUVFBZ0MwRUFTaHNoQ2lBSklRVURRQ0FLSUExR0JFQWdDQ0VBREFnTElBQWdCU2dDQUVZRVFDQUZJQWcyQWdBTElBMUJBV29oRFNBRlFRUnFJUVVNQUFzQUN5QUhJQUE3QVFBZ0FDQUlUZzBGUVFBaERTQUxRUUFnQzBFQVNoc2hDaUFKSVFVRFFDQUtJQTFHRFFZZ0NDQUZLQUlBUmdSQUlBVWdBRFlDQUFzZ0RVRUJhaUVOSUFWQkJHb2hCUXdBQ3dBTElBZEJBbXN1QVFBaUNFRUJUZ1JBSUFSQmtJRElBR29pQlNBS1FRSjBha0VFYXlnQ0FDSUFJQWhCLy84RGNVRUNkQ0FGYWtFRWF5Z0NBQ0lJU2dSQUlBY2dDRHNCQUVFQUlRMGdDMEVBSUF0QkFFb2JJUW9nQ1NFRkEwQWdDaUFOUmdSQUlBZ2hBQXdIQ3lBQUlBVW9BZ0JHQkVBZ0JTQUlOZ0lBQ3lBTlFRRnFJUTBnQlVFRWFpRUZEQUFMQUFzZ0J5QUFPd0VBSUFBZ0NFNE5CRUVBSVEwZ0MwRUFJQXRCQUVvYklRb2dDU0VGQTBBZ0NpQU5SZzBGSUFnZ0JTZ0NBRVlFUUNBRklBQTJBZ0FMSUExQkFXb2hEU0FGUVFScUlRVU1BQXNBQ3lBSElBbzdBUUFnQkNBS1FRZHNRUUowYWlJRlFmVC96d0JxSWdBZ0FDZ0NBRUVCYWpZQ0FDQUZRZmovendCcUlnQWdBQ2dDQUNBR2FqWUNBQ0FGUWZ6L3p3QnFJZ0FnQUNnQ0FDQU1hallDQUNBR0lBVkJnSURRQUdvaUFDZ0NBRWdFUUNBQUlBWTJBZ0FMSUFWQmpJRFFBR29nRERZQ0FBd0ZDeUFBUVFGT0JFQWdCeUFBT3dFQUlBUWdDRUVIYkVFQ2RHb2lCVUgwLzg4QWFpSUFJQUFvQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlBSUFBb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJQUlBQW9BZ0FnREdvMkFnQWdCaUFGUVlTQTBBQnFJZ0FvQWdCS0JFQWdBQ0FHTmdJQUN5QUZRWXlBMEFCcUlBdzJBZ0FNQlFzZ0IwRUNheThCQUNJRlFSQjBRUkIxSWdCQkFVNEVRQ0FISUFBN0FRQWdCQ0FGUVJ4c2FpSUZRZlQvendCcUlnQWdBQ2dDQUVFQmFqWUNBQ0FGUWZqL3p3QnFJZ0FnQUNnQ0FDQUdhallDQUNBRlFmei96d0JxSWdBZ0FDZ0NBQ0FNYWpZQ0FDQUZRWVNBMEFCcUlnQW9BZ0FnQms0TkJTQUFJQVkyQWdBTUJRc2dDMEdBZ0FKT0JFQkJBRUVEUWVBSlFRQVFPRUYvSVE0TUNRc2dCeUFMUVFGcUlnQTdBUUFnQkNBTFFRSjBha0dRZ01nQWFpQUFRUkIwUVJCMU5nSUFJQVFnQzBFY2JHb2lCVUdVZ05BQWFpQUdOZ0lBSUFWQmtJRFFBR3BCQVRZQ0FDQUZRWmlBMEFCcUlBdzJBZ0FnQlVHY2dOQUFhaUFHTmdJQUlBVkJvSURRQUdvZ0JqWUNBQ0FGUWFTQTBBQnFJQXcyQWdBZ0JVR29nTkFBYWlBTU5nSUFJQUFoQ3d3RUN5QUhRUUE3QVFBZ0RrRUFPZ0FBREFNTElBNUJBbW9oRGlBSFFRUnFJUWNnRUVFQ2FpRVBJQXhCQVdvaERBd0ZDeUFFSUFCQkVIUkJFSFZCSEd4cUlnVkI5UC9QQUdvaUFDQUFLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBQ0FBS0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQUNBQUtBSUFJQXhxTmdJQURBRUxJQVFnQUVFUWRFRVFkVUVjYkdvaUJVR01nTkFBYWlBTU5nSUFJQVZCOVAvUEFHb2lBQ0FBS0FJQVFRRnFOZ0lBSUFWQitQL1BBR29pQUNBQUtBSUFJQVpxTmdJQUlBVkIvUC9QQUdvaUFDQUFLQUlBSUF4cU5nSUFDeUFPUVFGcUlRNGdCMEVDYWlFSElBOUJBV29oRHlBR1FRRnFJUVlNQUFzQUN3c2dDMEVBSUF0QkFFb2JJZ2hCQVdvaEEwRUJJUVZCQVNFSEEwQWdBeUFGUmtVRVFBSkFJQVVnQ1NnQ0FDSUFSZ1JBSUFjaUJrRUJhaUVIREFFTElBQkJBblFnQkdwQmpJRElBR29vQWdBaEJnc2dDU0FHTmdJQUlBbEJCR29oQ1NBRlFRRnFJUVVNQVFzTElBUWdCMEVCYXlJQU5nSUlJQUJGQkVCQkFBOExRUUFoQmlBRVFReHFRUUFnQUVFQ2RCQTdHaUFFUVpDQUtHcEJBQ0FBUVFSMEVEc2FJQUJCQUNBQVFRQktHeUVBSUFSQmpJQUlhaUVKUVFBaEJRTkFJQUFnQlVZRVFDQUVRWkNBS0dvaENRTkFJQVlnQ0VZRVFFRUFJUTRnQkNnQ0NDSUFRUUFnQUVFQVNoc2hBaUFFUVpDQUtHb2hBMEVBSVFVRFFDQUNJQVZHRFFVZ0F5QUZRUVIwSWdGcUlnQWdBQ3NEQUNBRUlBVkJBblJxS0FJTXR5SVZvemtEQUNBRElBRkJDSEpxSWdBZ0FDc0RBQ0FWb3prREFDQUZRUUZxSVFVTUFBc0FDeUFFSUFRZ0JrRUNkR3BCa0lESUFHb29BZ0JCQVdzaUFVRUNkQ0lDYWlJQVFReHFJQUFvQWd3Z0JDQUdRUWRzUVFKMGFpSUZRWkNBMEFCcUtBSUFhallDQUNBSklBRkJCSFFpQTJvaUFDQUFLd01BSUFWQmxJRFFBR29vQWdDM29Ea0RBQ0FKSUFOQkNISnFJZ0FnQUNzREFDQUZRWmlBMEFCcUtBSUF0NkE1QXdBZ0JVR2NnTkFBYWlnQ0FDSUJJQU1nQkdwQmpJQUlhaUlBS0FJQVNBUkFJQUFnQVRZQ0FBc2dCVUdnZ05BQWFpZ0NBQ0lCSUFRZ0FrRUNkQ0lDUVFSeWFrR01nQWhxSWdBb0FnQktCRUFnQUNBQk5nSUFDeUFGUWFTQTBBQnFLQUlBSWdFZ0JDQUNRUWh5YWtHTWdBaHFJZ0FvQWdCSUJFQWdBQ0FCTmdJQUN5QUZRYWlBMEFCcUtBSUFJZ0VnQkNBQ1FReHlha0dNZ0FocUlnQW9BZ0JLQkVBZ0FDQUJOZ0lBQ3lBR1FRRnFJUVlNQUFzQUJTQUpJQVZCQkhRaUEyb2dBVFlDQUNBSklBTkJCSEpxUVFBMkFnQWdDU0FEUVFoeWFpQUNOZ0lBSUFrZ0EwRU1jbXBCQURZQ0FDQUZRUUZxSVFVTUFRc0FDd0FMSUE0THFRRUJBWDlCQ0VFSFFRWkJCVUVFUVFOQkFpQUFLZ0lFSUFBcUFnQmVJZ0VnQUNvQ0NDQUFJQUZCQW5ScUtnSUFYaHNpQVNBQUtnSU1JQUFnQVVFQ2RHb3FBZ0JlR3lJQklBQXFBaEFnQUNBQlFRSjBhaW9DQUY0YklnRWdBQ29DRkNBQUlBRkJBblJxS2dJQVhoc2lBU0FBS2dJWUlBQWdBVUVDZEdvcUFnQmVHeUlCSUFBcUFod2dBQ0FCUVFKMGFpb0NBRjRiSWdFZ0FDb0NJQ0FBSUFGQkFuUnFLZ0lBWGhzTEpRRUJmMEVDSUFBcUFnUWdBQ29DQUY0aUFTQUFLZ0lJSUFBZ0FVRUNkR29xQWdCZUd3czdBUUYvUVFOQkFpQUFLZ0lFSUFBcUFnQmVJZ0VnQUNvQ0NDQUFJQUZCQW5ScUtnSUFYaHNpQVNBQUtnSU1JQUFnQVVFQ2RHb3FBZ0JlR3d0UkFRRi9RUVJCQTBFQ0lBQXFBZ1FnQUNvQ0FGNGlBU0FBS2dJSUlBQWdBVUVDZEdvcUFnQmVHeUlCSUFBcUFnd2dBQ0FCUVFKMGFpb0NBRjRiSWdFZ0FDb0NFQ0FBSUFGQkFuUnFLZ0lBWGhzTFp3RUJmMEVGUVFSQkEwRUNJQUFxQWdRZ0FDb0NBRjRpQVNBQUtnSUlJQUFnQVVFQ2RHb3FBZ0JlR3lJQklBQXFBZ3dnQUNBQlFRSjBhaW9DQUY0YklnRWdBQ29DRUNBQUlBRkJBblJxS2dJQVhoc2lBU0FBS2dJVUlBQWdBVUVDZEdvcUFnQmVHd3Q5QVFGL1FRWkJCVUVFUVFOQkFpQUFLZ0lFSUFBcUFnQmVJZ0VnQUNvQ0NDQUFJQUZCQW5ScUtnSUFYaHNpQVNBQUtnSU1JQUFnQVVFQ2RHb3FBZ0JlR3lJQklBQXFBaEFnQUNBQlFRSjBhaW9DQUY0YklnRWdBQ29DRkNBQUlBRkJBblJxS2dJQVhoc2lBU0FBS2dJWUlBQWdBVUVDZEdvcUFnQmVHd3ZxQlFJSWZ3SjlJd0JCMEE5cklnZ2tBQUpBSUFGQjlBTktEUUFDUUFKQUFrQWdBUTRDQXdBQkN5QUFRd0FBZ0Q4Z0FDb0NBSlU0QWdBTUFRc2dBVUVBSUFGQkFFb2JJUW9EUUNBRElBcEdCRUFEUUNBR0lBcEdCRUJCQUNFR0EwQWdDaUFHSWdOR0RRVURRQUpBSUFFZ0EwWUVRQ0FCSVFNTUFRc2dDQ0FEUVFKMGFpZ0NBQ0FHUmcwQUlBTkJBV29oQXd3QkN3c2dDQ0FEUVFKMElnZHFJQWdnQmtFQ2RDSURhaWdDQURZQ0FDQUFJQU5xSVFNZ0FDQUhhaUVFUVFBaEJRTkFJQVVnQ2taRkJFQWdCQ29DQUNFTElBUWdBeW9DQURnQ0FDQURJQXM0QWdBZ0JVRUJhaUVGSUFNZ0FrRUNkQ0lIYWlFRElBUWdCMm9oQkF3QkN3c2dCa0VCYWlFR0RBQUxBQXREQUFBQUFDRUxRWDhoQlNBQUlBWWlBeUFDYkVFQ2RHb2lCeUVFQTBBZ0FTQURSa1VFUUNBRUtnSUFpeUlNSUFzZ0N5QU1YU0lKR3lFTElBTWdCU0FKR3lFRklBTkJBV29oQXlBRUlBSkJBblJxSVFRTUFRc0xRUUFoQXlBRlFYOUdJQXRELytiYkxsOXlEUVFnQ0NBRlFRSjBhaUlES0FJQUlRUWdBeUFJSUFaQkFuUnFJZ01vQWdBMkFnQWdBeUFFTmdJQUlBQWdBaUFGYkVFQ2RHb2hBMEVBSVFVZ0J5RUVBMEFnQVNBRlJrVUVRQ0FES2dJQUlRc2dBeUFFS2dJQU9BSUFJQVFnQ3pnQ0FDQUZRUUZxSVFVZ0JFRUVhaUVFSUFOQkJHb2hBd3dCQ3dzZ0J5b0NBQ0VMUVFFaEJDQUhJUU1EUUNBQklBUkdSUVJBSUFNZ0F5b0NCQ0FMbFRnQ0FDQUVRUUZxSVFRZ0EwRUVhaUVEREFFTEN5QURRd0FBZ0Q4Z0M1VTRBZ0JCQUNFSkEwQWdBU0FKUndSQUlBWWdDVWNFUUNBQUlBSWdDV3hCQW5ScUlnTXFBZ0FoQzBFQklRUWdCeUVGQTBBZ0FTQUVSa1VFUUNBRElBTXFBZ1FnQ3lBRktnSUFsSk00QWdBZ0JVRUVhaUVGSUFSQkFXb2hCQ0FEUVFScUlRTU1BUXNMSUFNZ0JTb0NBQ0FMakpRNEFnQUxJQWxCQVdvaENRd0JDd3NnQmtFQmFpRUdEQUFMQUFVZ0NDQURRUUowYWlBRE5nSUFJQU5CQVdvaEF3d0JDd0FMQUFzZ0FDRURDeUFJUWRBUGFpUUFJQU1Ma3dFQkFYOUJCMEVHUVFWQkJFRURRUUlnQUNvQ0JDQUFLZ0lBWGlJQklBQXFBZ2dnQUNBQlFRSjBhaW9DQUY0YklnRWdBQ29DRENBQUlBRkJBblJxS2dJQVhoc2lBU0FBS2dJUUlBQWdBVUVDZEdvcUFnQmVHeUlCSUFBcUFoUWdBQ0FCUVFKMGFpb0NBRjRiSWdFZ0FDb0NHQ0FBSUFGQkFuUnFLZ0lBWGhzaUFTQUFLZ0ljSUFBZ0FVRUNkR29xQWdCZUd3djJBUUlCZndGOUl3QkJnQU5ySWdJa0FDQUNJQUlnQVVFQUVOd0JPQUxRQWlBQ0lBSkJKR29nQVVFQkVOd0JPQUxVQWlBQ0lBSkJ5QUJxSUFGQkFoRGNBVGdDMkFJZ0FpQUNRZXdBYWlBQlFRTVEzQUU0QXR3Q0lBSWdBa0dRQVdvZ0FVRUVFTndCT0FMZ0FpQUNJQUpCdEFGcUlBRkJCUkRjQVRnQzVBSWdBaUFDUWRnQmFpQUJRUVlRM0FFNEF1Z0NJQUlnQWtIOEFXb2dBVUVIRU53Qk9BTHNBaUFDSUFKQm9BSnFJQUZCQ0JEY0FUZ0M4QUlnQWtIUUFtb2dBa0hRQW1vUXpnZ2lBVUVDZEdvcUFnQWlBME1BQUFBQVhBUkFJQUFnQWlBQlFTUnNhaERGQXdzZ0FrR0FBMm9rQUNBRFF3QUFBQUJjQzBNQ0FYOEJmU0FBUWZ3QmFpSUNJQUJCMkFGcUlBRkIvQUZxRUdJZ0FoQldJZ05EQUFBQUFGd0VRQ0FDSUFKREFBQ0FQeUFEa1pVUXl3RUxJQU5EQUFBQUFGd0xyZ0VDQkg4QmZTTUFRUkJySWdJa0FDQUFRZGdCYWlJRElBQkJ0QUZxSWdVZ0FVSFlBV29pQkJCaUlBQkIvQUZxSWdBZ0JTQUJRZndCYWhCaUlBSWdBeEJXT0FJSUlBSWdBQkJXT0FJTUlBSkJDR29nQWlvQ0RDQUNLZ0lJWGlJQVFRSjBhaUlCS2dJQUlnWkRBQUFBQUZ3RVFDQURJQU1nQUVFa2JDSUFhaEN2QVNBRUlBQWdCR29RcndFZ0F5QURRd0FBZ0Q4Z0FTb0NBSkdWRU1zQkN5QUNRUkJxSkFBZ0JrTUFBQUFBWEF2R0FRSUZmd0Y5SXdCQkVHc2lBaVFBSUFCQnRBRnFJZ01nQUVHUUFXb2lCQ0FCUWJRQmFpSUZFR0lnQUVIWUFXb2lCaUFFSUFGQjJBRnFFR0lnQUVIOEFXb2lBQ0FFSUFGQi9BRnFFR0lnQWlBREVGWTRBZ1FnQWlBR0VGWTRBZ2dnQWlBQUVGWTRBZ3dnQWtFRWFpQUNRUVJxRU04SUlnQkJBblJxSWdFcUFnQWlCME1BQUFBQVhBUkFJQU1nQXlBQVFTUnNJZ0JxRUs4QklBVWdBQ0FGYWhDdkFTQURJQU5EQUFDQVB5QUJLZ0lBa1pVUXl3RUxJQUpCRUdva0FDQUhRd0FBQUFCY0M5c0JBZ1ovQVgwakFFRVFheUlDSkFBZ0FFR1FBV29pQXlBQVFld0FhaUlFSUFGQmtBRnFJZ1VRWWlBQVFiUUJhaUlHSUFRZ0FVRzBBV29RWWlBQVFkZ0JhaUlISUFRZ0FVSFlBV29RWWlBQVFmd0JhaUlBSUFRZ0FVSDhBV29RWWlBQ0lBTVFWamdDQUNBQ0lBWVFWamdDQkNBQ0lBY1FWamdDQ0NBQ0lBQVFWamdDRENBQ0lBSVEwQWdpQUVFQ2RHb2lBU29DQUNJSVF3QUFBQUJjQkVBZ0F5QURJQUJCSkd3aUFHb1Fyd0VnQlNBQUlBVnFFSzhCSUFNZ0EwTUFBSUEvSUFFcUFnQ1JsUkRMQVFzZ0FrRVFhaVFBSUFoREFBQUFBRndMOWdFQ0IzOEJmU01BUVNCcklnSWtBQ0FBUWV3QWFpSURJQUJCeUFCcUlnUWdBVUhzQUdvaUJSQmlJQUJCa0FGcUlnWWdCQ0FCUVpBQmFoQmlJQUJCdEFGcUlnY2dCQ0FCUWJRQmFoQmlJQUJCMkFGcUlnZ2dCQ0FCUWRnQmFoQmlJQUJCL0FGcUlnQWdCQ0FCUWZ3QmFoQmlJQUlnQXhCV09BSUFJQUlnQmhCV09BSUVJQUlnQnhCV09BSUlJQUlnQ0JCV09BSU1JQUlnQUJCV09BSVFJQUlnQWhEUkNDSUFRUUowYWlJQktnSUFJZ2xEQUFBQUFGd0VRQ0FESUFNZ0FFRWtiQ0lBYWhDdkFTQUZJQUFnQldvUXJ3RWdBeUFEUXdBQWdEOGdBU29DQUpHVkVNc0JDeUFDUVNCcUpBQWdDVU1BQUFBQVhBdjhCUUlJZndKOEl3QkIwQTlySWdja0FBSkFJQUZCOUFOS0RRQUNRQUpBQWtBZ0FRNENBd0FCQ3lBQVJBQUFBQUFBQVBBL0lBQXJBd0NqT1FNQURBRUxJQUZCQUNBQlFRQktHeUVLQTBBZ0F5QUtSZ1JBQTBBZ0JpQUtSZ1JBUVFBaEJnTkFJQW9nQmlJRVJnMEZBMEFDUUNBQklBUkdCRUFnQVNFRURBRUxJQWNnQkVFQ2RHb29BZ0FnQmtZTkFDQUVRUUZxSVFRTUFRc0xJQWNnQkVFQ2RHb2dCeUFHUVFKMGFpZ0NBRFlDQUNBQUlBWkJBM1JxSVFNZ0FDQUVRUU4wYWlFRVFRQWhCUU5BSUFVZ0NrWkZCRUFnQkNzREFDRUxJQVFnQXlzREFEa0RBQ0FESUFzNUF3QWdCVUVCYWlFRklBTWdBa0VEZENJSmFpRURJQVFnQ1dvaEJBd0JDd3NnQmtFQmFpRUdEQUFMQUF0RUFBQUFBQUFBQUFBaEMwRi9JUVVnQUNBR0lnTWdBbXhCQTNScUlna2hCQU5BSUFFZ0EwWkZCRUFnQkNzREFKa2lEQ0FMSUFzZ0RHTWlDQnNoQ3lBRElBVWdDQnNoQlNBRFFRRnFJUU1nQkNBQ1FRTjBhaUVFREFFTEMwRUFJUU1nQlVGL1JpQUxSTHU5MTluZmZOczlaWElOQkNBSElBVkJBblJxSWdNb0FnQWhCQ0FESUFjZ0JrRUNkR29pQXlnQ0FEWUNBQ0FESUFRMkFnQWdBQ0FDSUFWc1FRTjBhaUVEUVFBaEJTQUpJUVFEUUNBQklBVkdSUVJBSUFNckF3QWhDeUFESUFRckF3QTVBd0FnQkNBTE9RTUFJQVZCQVdvaEJTQUVRUWhxSVFRZ0EwRUlhaUVEREFFTEN5QUpLd01BSVF0QkFTRUVJQWtoQXdOQUlBRWdCRVpGQkVBZ0F5QURLd01JSUF1ak9RTUFJQVJCQVdvaEJDQURRUWhxSVFNTUFRc0xJQU5FQUFBQUFBQUE4RDhnQzZNNUF3QkJBQ0VJQTBBZ0FTQUlSd1JBSUFZZ0NFY0VRQ0FBSUFJZ0NHeEJBM1JxSWdNckF3QWhDMEVCSVFRZ0NTRUZBMEFnQVNBRVJrVUVRQ0FESUFNckF3Z2dDeUFGS3dNQW9xRTVBd0FnQlVFSWFpRUZJQVJCQVdvaEJDQURRUWhxSVFNTUFRc0xJQU1nQlNzREFDQUxtcUk1QXdBTElBaEJBV29oQ0F3QkN3c2dCa0VCYWlFR0RBQUxBQVVnQnlBRFFRSjBhaUFETmdJQUlBTkJBV29oQXd3QkN3QUxBQXNnQUNFREN5QUhRZEFQYWlRQUlBTUxrQUlDQ0g4QmZTTUFRU0JySWdJa0FDQUFRY2dBYWlJRElBQkJKR29pQkNBQlFjZ0FhaUlGRUdJZ0FFSHNBR29pQmlBRUlBRkI3QUJxRUdJZ0FFR1FBV29pQnlBRUlBRkJrQUZxRUdJZ0FFRzBBV29pQ0NBRUlBRkJ0QUZxRUdJZ0FFSFlBV29pQ1NBRUlBRkIyQUZxRUdJZ0FFSDhBV29pQUNBRUlBRkIvQUZxRUdJZ0FpQURFRlk0QWdBZ0FpQUdFRlk0QWdRZ0FpQUhFRlk0QWdnZ0FpQUlFRlk0QWd3Z0FpQUpFRlk0QWhBZ0FpQUFFRlk0QWhRZ0FpQUNFTklJSWdCQkFuUnFJZ0VxQWdBaUNrTUFBQUFBWEFSQUlBTWdBeUFBUVNSc0lnQnFFSzhCSUFVZ0FDQUZhaEN2QVNBRElBTkRBQUNBUHlBQktnSUFrWlVReXdFTElBSkJJR29rQUNBS1F3QUFBQUJjQzZRQ0FnbC9BWDBqQUVFZ2F5SUNKQUFnQUVFa2FpSURJQUFnQVVFa2FpSUVFR0lnQUVISUFHb2lCU0FBSUFGQnlBQnFFR0lnQUVIc0FHb2lCaUFBSUFGQjdBQnFFR0lnQUVHUUFXb2lCeUFBSUFGQmtBRnFFR0lnQUVHMEFXb2lDQ0FBSUFGQnRBRnFFR0lnQUVIWUFXb2lDU0FBSUFGQjJBRnFFR0lnQUVIOEFXb2lDaUFBSUFGQi9BRnFFR0lnQWlBREVGWTRBZ0FnQWlBRkVGWTRBZ1FnQWlBR0VGWTRBZ2dnQWlBSEVGWTRBZ3dnQWlBSUVGWTRBaEFnQWlBSkVGWTRBaFFnQWlBS0VGWTRBaGdnQWlBQ0VOTUlJZ0JCQW5ScUlnRXFBZ0FpQzBNQUFBQUFYQVJBSUFNZ0F5QUFRU1JzSWdCcUVLOEJJQVFnQUNBRWFoQ3ZBU0FESUFOREFBQ0FQeUFCS2dJQWtaVVF5d0VMSUFKQklHb2tBQ0FMUXdBQUFBQmNDOHdCQWdSL0FYMGpBRUVnYXlJQ0pBQWdBaUFCRUZZNEFnQWdBaUFCUVNScUlnTVFWamdDQkNBQ0lBRkJ5QUJxRUZZNEFnZ2dBaUFCUWV3QWFoQldPQUlNSUFJZ0FVR1FBV29RVmpnQ0VDQUNJQUZCdEFGcUVGWTRBaFFnQWlBQlFkZ0JhaEJXT0FJWUlBSWdBVUg4QVdvUVZqZ0NIQ0FDSUFJUTFRZ2lCRUVDZEdvaUJTb0NBQ0lHUXdBQUFBQmNCRUFnQVNBQklBUkJKR3hxRUs4QklBQWdBVU1BQUlBL0lBVXFBZ0NSbFJETEFTQUFRU1JxSUFOQlB4RHJBUXNnQWtFZ2FpUUFJQVpEQUFBQUFGd0xkQUVDZnlNQVFhQUNheUlDSkFBQ1FDQUNJQUVRM3doRkRRQWdBaUFCRU40SVJRMEFJQUlnQVJEZENFVU5BQ0FDSUFFUTJ3aEZEUUFnQWlBQkVOb0lSUTBBSUFJZ0FSRFpDRVVOQUNBQ0lBRVEyQWhGRFFBZ0FpQUJFTmNJUlEwQUlBQWdBaERXQ0NFREN5QUNRYUFDYWlRQUlBTUxNZ0FnQUNBQklBVVE4d0lnQUVISUFHb2dBaUFHRVBNQ0lBQkJrQUZxSUFNZ0J4RHpBaUFBUWRnQmFpQUVJQWdROHdJTHpRSUJDMzhqQUVFUWF5SUxKQUFnQzBFSWFoQ3JBaUVGQWtBZ0FrRUFTZ1JBSUFOQkFFd05BU0FDUVFGcklRWWdBU0FEUVFGcklneEJBM1JxSVFjRFFDQUdJQWhLQkVBZ0JTQUhLZ0lBT0FJQUlBVWdCeWdDQkRZQ0JDQUdJUUlnQ0NFRUEwQWdCQ0VKQTBBZ0NTSUVRUUZxSVFrZ0FTQUVRUU4wYWlJTklBVVEzd1FOQUFzZ0FpRUtBMEFnQ2lJQ1FRRnJJUW9nQlNBQklBSkJBM1JxSWc0UTN3UU5BQXNnQWlBRVRnUkFJQTBnRGhDd0FTQUpJUVFnQ2lFQ0N5QUNJQVJPRFFBTElBWWdBaUFESUFSS0d5RUdJQVFnQ0NBQ0lBeElHeUVJREFFTEN5QUFJQWNwQWdBM0FnQWdDMEVRYWlRQUR3dEJ3SmNFUWZUVUFSQXlRYmJWQVJBeVFack5BQkF5UWRJQUVEWkJ2TklBRURKQnJkY0JFRElRTlJBQUFBdEJ3SmNFUWRMWEFSQXlRYmJWQVJBeVFack5BQkF5UWRNQUVEWkJ2TklBRURKQm85Z0JFRElRTlJBQUFBdXdBZ0VNZlNBREtnSUVJUWdnQXlvQ0FDRU1JQUVxQWd3aERTQUZLZ0lFSVFZZ0FTb0NFQ0VKSUFFcUFoZ2hCeUFCS2dJQUlRb2dBQ0FGS2dJQUlnc2dBU29DSENJT2xDQUJLZ0lFSUFTVmtpSVBJQUtVT0FJRUlBQWdCeUFMbENBS0lBU1ZraUlLSUFLVU9BSUFJQVVxQWdBaEN5QUJLZ0lnSVJBZ0FTb0NDQ0VSSUFBZ0RpQUdsQ0FKSUFTVmtpSUpJQUtVT0FJUUlBQWdCeUFHbENBTklBU1ZraUlHSUFLVU9BSU1JQUFnRUNBTGxDQVJJQVNWa2lBS0lBd2dBcFFpQjVTVElBOGdDQ0FDbENJSWxKTTRBZ2dnQUNBQktnSWdJQVVxQWdTVUlBRXFBaFFnQkpXU0lBWWdCNVNUSUFrZ0NKU1RPQUlVSUFBZ0FTb0NHQ0FDbENJRU9BSVlJQUFnQVNvQ0hDQUNsQ0lDT0FJY0lBQWdBU29DSUNBRUlBTXFBZ0NVa3lBQ0lBTXFBZ1NVa3pnQ0lBdFZBUUYvSXdCQm9BSnJJZ2trQUNBSklBRWdBaUFESUFRZ0JTQUdJQWNnQ0JEaENFRUFJUUVDUUNBQUlBa1E0QWhGRFFBZ0FCRGlCSXU3UlBGbzQ0aTErT1ErWXcwQVFRRWhBUXNnQ1VHZ0Ftb2tBQ0FCQzNRQ0FYOEJmU01BUVJCcklnUWtBQ0FFUVFocUlBUkJER29nQUNBQktnSUFJQUVxQWdRUXd3TWdCQ0FFS2dJSUlBSXFBZ0NUT0FJQUlBUWdCQ29DRENBQ0tnSUVremdDQkNBRUtnSUFJZ1VnQlpRZ0JDb0NCQ0lGSUFXVWtpQURsRU1BQUlBL2toQ2FBaUVESUFSQkVHb2tBQ0FEQzRZQkFRRjlJQUFxQWlBaEFTQUFRWUNBZ1B3RE5nSWdJQUFnQUNvQ0FFTUFBSUEvSUFHVklnR1VPQUlBSUFBZ0FTQUFLZ0lFbERnQ0JDQUFJQUVnQUNvQ0NKUTRBZ2dnQUNBQklBQXFBZ3lVT0FJTUlBQWdBU0FBS2dJUWxEZ0NFQ0FBSUFFZ0FDb0NGSlE0QWhRZ0FDQUJJQUFxQWhpVU9BSVlJQUFnQVNBQUtnSWNsRGdDSEF1WUFnRU1meU1BUVRCcklnSWtBQ0FDUVNocUlBQWdBUkRwQVNBQ1FTQnFJQUFnQVVFSWFpSUdFT2tCSUFKQkdHb2dBQ0FCUVJCcUlnTVE2UUVnQWtFUWFpQUNRU2hxRU9NRUlBSkJDR29nQWtFZ2FoRGpCQUpBSUFFZ0JpQURJQUpCS0dvZ0FrRWdhaUFDUVJocUVQUUNSUTBBUVFNaEJ5QUNRU2hxSVFvZ0FrRWdhaUVGSUFKQkdHb2hCQ0FCSVFzZ0JpRUlBMEFnQjBFRVJ3UkFJQW9pRENBQUlBTkJDR29pQXhEcEFTQUhRUUZxSVFjZ0MwRUlhaUlMSUFoQkNHb2lDQ0FESUFVZ0JDQU1FUFFDSVEwZ0JTRUtJQVFoQlNBTUlRUWdEUTBCREFJTEN5QUlJQU1nQVNBRklBUWdBa0VRYWhEMEFrVU5BQ0FESUFFZ0JpQUVJQUpCRUdvZ0FrRUlhaEQwQWlFSkN5QUNRVEJxSkFBZ0NRdlFBUUVDZnlNQVFaQUJheUlKSkFBQ1FDQUpRVUJySUFsQk9Hb2dDVUV3YWlBSlFTaHFJQWxCM0FCcUlBbEIwQUJxSUFFZ0FpQURJQVFRNUFSRkRRQWdDVUVnYWlBSlFSaHFJQWxCRUdvZ0NVRUlhaUFKUWRnQWFpQUpRY2dBYWlBRklBWWdCeUFJRU9RRVJRMEFJQWxCNEFCcUlBbEJRR3NnQ1VFNGFpQUpRVEJxSUFsQktHb2dDVUVnYWlBSlFSaHFJQWxCRUdvZ0NVRUlhaERrQ0VVTkFDQUFJQWxCNEFCcUlBa3FBbHdnQ1VIUUFHb2dDU29DV0NBSlFjZ0FhaERqQ0VFQklRb0xJQWxCa0FGcUpBQWdDZ3VOQVFBQ1FDQUFJQUVnQWhDb0FVTUFBQUFBWGlBRUlBVWdCaENvQVVNQUFBQUFYbk1OQUNBQklBSWdBeENvQVVNQUFBQUFYaUFGSUFZZ0J4Q29BVU1BQUFBQVhuTU5BQ0FDSUFNZ0FCQ29BVU1BQUFBQVhpQUdJQWNnQkJDb0FVTUFBQUFBWG5NTkFDQURJQUFnQVJDb0FVTUFBQUFBWGlBSElBUWdCUkNvQVVNQUFBQUFYbk5CQVhNUEMwRUFDMnNCQVgwZ0FDQUJJQUlRcUFFaEJFRUJRWDhnQVNBQ0lBTVFxQUZEQUFBQUFGNGJRUUZCZnlBRVF3QUFBQUJlRzJwQkFVRi9JQUlnQXlBQUVLZ0JRd0FBQUFCZUcycEJBVUYvSUFNZ0FDQUJFS2dCUXdBQUFBQmVHMm9pQUNBQVFSOTFJZ0JxSUFCelFRUkdDNkFEQWdoL0FueEJmeUVHQWtBZ0FDZ0NCQ0lGUVFGSURRQWdBQ2dDQ0NJSVFRRklEUUFnQVNnQ0JDQUZSdzBBSUFFb0FnZ2dCVWNOQUNBQ0tBSUVJQVZIRFFBZ0FpZ0NDQ0FJUncwQUlBTW9BZ1FnQlVjTkFDQUNLQUlBSVFjRFFBSkFJQVFnQlVZRVFDQUZJUVFNQVFzZ0F5Z0NBQ0FFUVFOMGFpc0RBQ0lNUkx5SjJKZXkwcHc4WXcwQUlBUWdCV3doQzBRQUFBQUFBQUR3UHlBTW1aK2pJUXhCQUNFSkEwQWdDQ0FKUmtVRVFDQUFLQUlBSUFsQkEzUnFJUW9nQVNnQ0FDQUxRUU4wYWlFR1FRQWhBa1FBQUFBQUFBQUFBQ0VOQTBBZ0FpQUZSa1VFUUNBQ1FRRnFJUUlnRFNBR0t3TUFJQW9yQXdDaW9DRU5JQW9nQ0VFRGRHb2hDaUFHUVFocUlRWU1BUXNMSUFjZ0RDQU5vamtEQUNBSlFRRnFJUWtnQjBFSWFpRUhEQUVMQ3lBRVFRRnFJUVFNQVFzTElBUWdCU0FFSUFWS0d5RUJRUUFoQmlBSVFRQWdDRUVBU2hzaEFBTkFJQUVnQkVZTkFTQURLQUlBSUFSQkEzUnFRZ0EzQXdCQkFDRUNBMEFnQUNBQ1JrVUVRQ0FIUWdBM0F3QWdBa0VCYWlFQ0lBZEJDR29oQnd3QkN3c2dCRUVCYWlFRURBQUxBQXNnQmd1akFRSUJmd1I5SXdCQk1Hc2lCQ1FBSUFSQktHb2dBU0FBRU1jQ0lBUkJJR29nQWlBQUVNY0NJQVJCR0dvZ0F5QUFFTWNDSUFSQkVHb2dBU0FDRU1jQ0lBUkJDR29nQXlBQ0VNY0NJQVJCS0dvZ0JFRWdhaER5QWlFRklBUkJJR29nQkVFWWFoRHlBaUVHSUFSQktHb2dCRUVZYWhEeUFpRUhJQVJCRUdvZ0JFRUlhaER5QWlFSUlBVWdCaEQyQWlBSEVQWUNJQWdROWdJaEJTQUVRVEJxSkFBZ0JRdU5Cd0lJZndGOUl3QkJFR3NpRHlRQUFrQWdCUkJESUFsQkNXeFBCRUFnQmhCRElBTlBCRUFnQnhCR0lBbFBCRUFnQTBFRVNBMERJQTlCMGdrMkFnd2dCa0VBRUR3aERTQUlFRzRoQ0NBTElBTVEvUUloRWlBTklBTVErZ1FnRFNBRElBTWdEMEVNYWhESUEwRUFJUVlEUUNBSklBeE1JQVlnQ2s1eVJRUkFJQTBnQTBFRUlBOUJER29ReUFNQ1FDQUJJQTBvQWdCQkEzUWlDMm9nQVNBTktBSUVRUU4wSWhCcUlBRWdEU2dDQ0VFRGRDSU9haUFCSUEwb0FneEJBM1FpRVdvZ0FpQUxhaUFDSUJCcUlBSWdEbW9nQWlBUmFoRHBDRVVOQUNBRklBeEJDV3dpQ3hBOElBRWdEU2dDQUVFRGRDSVFhaUFCSUEwb0FnUkJBM1FpRG1vZ0FTQU5LQUlJUVFOMEloRnFJQUVnRFNnQ0RFRURkQ0lUYWlBQ0lCQnFJQUlnRG1vZ0FpQVJhaUFDSUJOcUVPZ0lSUTBBSUFVZ0N4QThJQVFRNXdoRkRRQWdERUVCYWlFTUN5QUdRUUZxSVFZTUFRc0xJQXhGQkVCQkFDRU1EQVFMUXdBQWdEOGdDSlVoQ0NBTVFRQWdERUVBU2hzaEJFRUFJUVlEUUNBRUlBWkdCRUJCQUNFSkEwQWdERUVEVGtFQUlBTWdDVW9iUlFSQUlBeEJBU0FNUVFGS0d5RUJJQWRCQUJCUUtBSUVJUXNnQjBFQUVGQXFBZ0FoQ0VFQklRWURRQ0FCSUFaR0JFQWdBQ0FGSUF0QkNXd1FQQkRGQXlBQUVPWUlRUUVoREF3SkJTQUhJQVlRVUNvQ0FDQUlYVUVCYzBVRVFDQUhJQVlRVUNvQ0FDRUlJQWNnQmhCUUtBSUVJUXNMSUFaQkFXb2hCZ3dCQ3dBTEFBc2dDU0FTSUFNZ0NXc1EvUUlnQ1dvaUJDQUVJQWxJR3lFS1FRQWhDd05BSUFzZ0RFWUVRQ0FQSUFkQkFCQlFJQXdnREVFQ2JTQU1RUUZ4YWtFQmF4RGlDQ0FNUVFGMUlRd2dCQ0VKREFJTElBVWdCeUFMRUZBb0FnUkJDV3dRUENFUUlBa2hCZ05BSUFZZ0NrWUVRQ0FMUVFGcUlRc01BZ1VnRUNBQklBMGdCa0VDZEdvb0FnQkJBM1FpRG1vZ0FpQU9haUFJRU9VSUlSUWdCeUFMRUZBaURpQVVJQTRxQWdDU09BSUFJQVpCQVdvaEJnd0JDd0FMQUFzQUN3QUZJQWNnQmhCUVFRQTJBZ0FnQnlBR0VGQWdCallDQkNBR1FRRnFJUVlNQVFzQUN3QUxRY0NYQkVHQjB3RVFNa0dMendFUU1rR2F6UUFRTWtINUFCQTJRYnpTQUJBeVFmclRBUkF5RURVUUFBQUxRY0NYQkVHNDBRRVFNa0dMendFUU1rR2F6UUFRTWtINEFCQTJRYnpTQUJBeVFaN1NBUkF5RURVUUFBQUxRY0NYQkVHb3pnRVFNa0dMendFUU1rR2F6UUFRTWtIM0FCQTJRYnpTQUJBeVFkUFFBUkF5RURVUUFBQUxJQTlCRUdva0FDQU1DMWNCQVg4Z0FCRGRBeUFCU1FSQUVKUUJBQXNnQUJBMEdpQUJRZi8vLy84QlN3UkFRWW1oQVJDUEFRQUxJQUFnQVVFRGRCQkxJZ0kyQWdBZ0FDQUNOZ0lFSUFBUU5DQUNJQUZCQTNScU5nSUFJQUJCQUJDQkF3dEJBUUYvSUFBUTRnTWdBVWtFUUJDVUFRQUxJQUFRTkJvZ0FDQUJFTUVGSWdJMkFnQWdBQ0FDTmdJRUlBQVFOQ0FDSUFGQkFuUnFOZ0lBSUFCQkFCQ0dBd3N3QUFOQUlBRWdBa2NFUUNBQUlBTW9BZ0JCQ0dzZ0FrRUlheUlDRU04Q0lBTWdBeWdDQUVFSWF6WUNBQXdCQ3dzTFVBRUJmeUFBRU5NQ0lBQVFOQ0FBS0FJQUlBQW9BZ1FnQVVFRWFpSUNFUEFJSUFBZ0FoQkpJQUJCQkdvZ0FVRUlhaEJKSUFBUU5DQUJFRDBRU1NBQklBRW9BZ1EyQWdBZ0FDQUFFRVlRZ1FNTHV3RUJBWDhqQUVFZ2F5SURKQUFnQXlBQk5nSVFJQU1nQURZQ0dBSkFJQUpCQWtnTkFDQURJQU5CR0dvZ0FrRUNhMEVDYlNJQ0VPNEJOZ0lJSUFNb0FnZ2dBMEVRYWhET0FTZ0NBQkNnQWtVTkFDQURJQU1vQWhBcEFnQTNBd0FEUUFKQUlBTW9BaEFnQXlnQ0NDa0NBRGNDQUNBRElBTW9BZ2cyQWhBZ0FrVU5BQ0FESUFOQkdHb2dBa0VCYTBFQ2JTSUNFTzRCTmdJSUlBTW9BZ2dnQXhDZ0FnMEJDd3NnQXlnQ0VDQURLUUlBTndJQUN5QURRU0JxSkFBTGV3RUNmeU1BUVNCcklnTWtBQ0FBRURRaUFpQURRUWhxSUFBZ0FCQkdRUUZxRUlRRElBQVFSaUFDRVBzQ0lnSW9BZ2dnQVJEUEFpQUNJQUlvQWdoQkNHbzJBZ2dnQUNBQ0VQRUlJQUlnQWlnQ0JCQ3lCU0FDS0FJQUJFQWdBaWdDRUJvZ0FpZ0NBQ0VBSUFJUXN3VWFJQUFRTXdzZ0EwRWdhaVFBQzRNSkFobC9CM3dqQUVFUWF5SUtKQUJCZnlFQ0FrQWdBQ2dDQkNJRlFRSklEUUFnQlNBQUtBSUlSdzBBSUFFb0FnUWdCVWNOQUNBRkVMd0RJZ3RGRFFBZ0NpQUZRUUZySWc4MkFnd2dDaUFMS0FJQVFRaHFOZ0lJSUFBZ0FTQUtRUWhxRU04UFFYOU1CRUFnQ3hDZUFnd0JDeUFMS0FJQUlnbENBRGNEQUNBUElRWURRQ0FHSWdNaUFrRUJTQVJBUVFBaEF3TkFJQU1nRDBjRVFDQUJLQUlBSWdjZ0EwRURkR29pRENzREFDSWRJUndnQTBFQmFpSUdJUUlnQXlFRUEwQWdBaUFGVGtVRVFDQUhJQUpCQTNScUt3TUFJaHNnSENBYklCeGtJZ2diSVJ3Z0FpQUVJQWdiSVFRZ0FrRUJhaUVDREFFTEN5QUhJQVJCQTNScUlCMDVBd0FnRENBY09RTUFJQUFvQWdBaUNDQURJQVZzUVFOMGFpRUNJQWdnQkNBRmJFRURkR29oQkVFQUlRTURRQ0FESUFWR0JFQWdCaUVEREFNRklBUXJBd0FoR3lBRUlBSXJBd0E1QXdBZ0FpQWJPUU1BSUFOQkFXb2hBeUFDUVFocUlRSWdCRUVJYWlFRURBRUxBQXNBQ3dzZ0N4Q2VBa0VBSVFJTUFnc0RRQUpBSUFJaUJFRUJTQVJBUVFBaEJBd0JDeUFKSUFSQkEzUWlDR29yQXdDWklBRW9BZ0FpQmlBRVFRRnJJZ0pCQTNScUt3TUFtU0FHSUFocUt3TUFtYUJFamUyMW9QZkdzRDZpWkEwQkN3c2dBMEVCYXlFR0lBTWdCRVlOQUNBRUlBTWdBeUFFU0JzaEVpQUpJQU5CQTNRaUUyb2hFQ0FFUVFOMEloUWdDV29oRlVFQUlRSURRQ0FDUWVRQVJnMEJJQUpCQVdvaENDQUJLQUlBSWcwZ0ZHb3JBd0FnRFNBVGFpSVdLd01BSWgyaElCQXJBd0FpR3lBYm9pSWJJQTBnQmtFRGRHb2lGeXNEQUNBZG9VUUFBQUFBQUFEZ1A2SWlIU0FiSUIwZ0hhS2dueUlibWlBYklCMUVBQUFBQUFBQUFBQmpHNkNqb0NFZ0lCVXJBd2doSHlBRUlRTURRQ0FESUJKSEJFQUNRQ0FnbVNJYklCK1paa0VCYzBVRVFDQWJSTHlKMkpleTBwdzhaRUVCY3dSQVJBQUFBQUFBQVBBL0lSNUVBQUFBQUFBQUFBQWhIQXdDQ3lBZm1pQWdveUliUkFBQUFBQUFBUEEvSUJzZ0c2SkVBQUFBQUFBQThEK2duNk1pSHFJaEhBd0JDeUFnbWlBZm95SWJSQUFBQUFBQUFQQS9JQnNnRzZKRUFBQUFBQUFBOEQrZ242TWlIS0loSGdzZ0RTQURRUU4wSWhGcUlnSWdBaXNEQUNJYklCd2dIQ0FiSUEwZ0EwRUJhaUlNUVFOMElnZHFJZ0lyQXdBaUlhRWlIYUlnSGlBZW9DQUhJQWxxSWc0ckF3Q2lvS0lpRzZFNUF3QWdBaUFoSUJ1Z09RTUFJQU1nQkVvRVFDQUpJQkZxSWdJZ0hpQUNLd01Bb2lBZklCeWlvVGtEQUFzZ0RpQU9Ld01BSWhzZ0hDQWVJQjJpSUJzZ0hDQWNvS0tob3FBNUF3QWdCU0FNYkNFWUlBTWdCV3doR1VFQUlRSURRQ0FDSUFWR1JRUkFJQUFvQWdBaUdpQUNJQmxxUVFOMGFpSUhJQjRnQnlzREFDSWdvaUFjSUJvZ0FpQVlha0VEZEdvaUJ5c0RBQ0lmb3FFNUF3QWdCeUFjSUNDaUlCNGdINktnT1FNQUlBSkJBV29oQWd3QkN3c2dBeUFHVGlFQ0lBd2hBeUFDRFFFZ0Rpc0RBQ0VnSUFrZ0VXb2lBa0VRYWlBZUlBSXJBeEFpRzZJNUF3QWdHeUFjbXFJaEh3d0JDd3NnQ0NFQ0lCQXJBd0NaSUJjckF3Q1pJQllyQXdDWm9FU043YldnOThhd1BxSmtEUUFMREFBTEFBc2dDa0VRYWlRQUlBSUxOZ0VCZnlNQVFTQnJJZ0lrQUNBQ0lBRTJBaEFnQWlBQU5nSVlJQUFnQVNBQ1FSQnFJQUpCR0dvUWdBTVE4Z2dnQWtFZ2FpUUFDeUVBSUFBb0FnUWdBQkEwS0FJQVJ3UkFJQUFnQVJDSkF3OExJQUFnQVJEekNBdEJBUUYvSUFBUTNRTWdBVWtFUUJDVUFRQUxJQUFRTkJvZ0FDQUJFSkFGSWdJMkFnQWdBQ0FDTmdJRUlBQVFOQ0FDSUFGQkEzUnFOZ0lBSUFCQkFCQ0JBd3RYQVFGL0l3QkJFR3NpQkNRQUlBUWdBallDQUNBRUlBRTJBZ2dEUUNBRVFRaHFJQVFRZkFSQUlBQWdBeWdDQUNBRUtBSUlFSU1DSUFSQkNHb1FnQUlnQXlBREtBSUFRUVJxTmdJQURBRUxDeUFFUVJCcUpBQUxNQUVCZnlNQVFSQnJJZ0lrQUNBQ0lBRTJBZ0FnQWlBQU5nSUlJQUlnQWtFSWFoREJBeUVBSUFKQkVHb2tBQ0FBQzJnQkFuOGdBQkR3QXlBQktBSUVJUU1nQUJBMElBQW9BZ0FnQWlBQlFRUnFJZ1FRc0FJZ0FCQTBJQUlnQUNnQ0JDQUJRUWhxSWdJUWxRVWdBQ0FFRUVrZ0FFRUVhaUFDRUVrZ0FCQTBJQUVRUFJCSklBRWdBU2dDQkRZQ0FDQUFJQUFRUXhDR0F5QURDM0FCQVg4akFFRWdheUlESkFBZ0F5QUJOZ0lZSUFOQkNHb2dBRUVJYWlBQklBSVE1d1FRNFFNaEFRTkFJQUVvQWdBZ0FTZ0NCRWNFUUNBQUtBSVFJQUVvQWdBZ0F5Z0NHQkNEQWlBQklBRW9BZ0JCQkdvMkFnQWdBMEVZYWhDQUFnd0JDd3NnQVJDMkFTQURRU0JxSkFBTG1nSUNDMzhCZkVGL0lRZ0NRQ0FBS0FJSUlnTWdBU2dDQkVjTkFDQUJLQUlJSUFOSERRQkJBQ0VJSUFOQkFDQURRUUJLR3lFSklBQW9BZ1FpQWtFQUlBSkJBRW9iSVFvZ0FTZ0NBQ0lMSVFWQkFDRUNBMEJCQUNFRUlBSWdDVVlOQVFOQUFrQWdBeUFFUndSQUlBSWdCRXNFUUNBRklBc2dBeUFFYkNBQ2FrRURkR29yQXdBNUF3QU1BZ3NnQUNnQ0FDRUJJQVZDQURjREFDQUJJQVJCQTNScUlRWWdBU0FDUVFOMGFpRUhRUUFoQVVRQUFBQUFBQUFBQUNFTkEwQWdBU0FLUmcwQ0lBVWdEU0FIS3dNQUlBWXJBd0Npb0NJTk9RTUFJQUZCQVdvaEFTQUdJQU5CQTNRaURHb2hCaUFISUF4cUlRY01BQXNBQ3lBQ1FRRnFJUUlNQWdzZ0JFRUJhaUVFSUFWQkNHb2hCUXdBQ3dBTEFBc2dDQXQvQVFSL0l3QkJFR3NpQlNRQUlBVWdBQ0FDSUFFZ0FDZ0NCQ0lISUFOcmFpSUdhMEVDZFJDdEFpRUVJQVloQXdOQUlBSWdBMHNFUUNBQUVEUWdCQ2dDQkNBREVJTUNJQVFnQkNnQ0JFRUVhallDQkNBRFFRUnFJUU1NQVFzTElBUVFkaUFHSUFGcklnQUVRQ0FISUFCcklBRWdBQkRhQWdzZ0JVRVFhaVFBQ3pNQkFYOGpBRUVRYXlJRUpBQWdCQ0FBSUFNUXJRSWhBeUFBRURRZ0FTQUNJQU5CQkdvUStBZ2dBeEIySUFSQkVHb2tBQXZkQWdFQ2Z5TUFRVEJySWdRa0FDQUVJQU0yQWlBZ0JDQUFOZ0lvSUFSQklHb2dCRUVvYWhDQUF5RUFBa0FnQWtFQ1NBMEFJQUpCQW10QkFtMGlBeUFBU0EwQUlBUWdCRUVvYWlBQVFRRjBJZ0ZCQVhJaUFCRHVBVFlDR0FKQUlBRkJBbW9pQVNBQ1RnMEFJQVFvQWhnaEJTQUVJQVJCR0dwQkFSRHVBVFlDRUNBRklBUW9BaEFRb0FKRkRRQWdCRUVZYWhDaEFSb2dBU0VBQ3lBRUtBSVlJQVFvQWlBUW9BSU5BQ0FFSUFRb0FpQXBBZ0EzQXhBRFFBSkFJQVFvQWlBZ0JDZ0NHQ2tDQURjQ0FDQUVJQVFvQWhnMkFpQWdBQ0FEU2cwQUlBUWdCRUVvYWlBQVFRRjBJZ0ZCQVhJaUFCRHVBVFlDR0FKQUlBRkJBbW9pQVNBQ1RnMEFJQVFvQWhnaEJTQUVJQVJCR0dwQkFSRHVBVFlDQ0NBRklBUW9BZ2dRb0FKRkRRQWdCRUVZYWhDaEFSb2dBU0VBQ3lBRUtBSVlJQVJCRUdvUW9BSkZEUUVMQ3lBRUtBSWdJQVJCRUdvcEFnQTNBZ0FMSUFSQk1Hb2tBQXMxQVFGL0l3QkJFR3NpQWlRQUlBSWdBQ2tDQURjRENDQUFJQUVwQWdBM0FnQWdBU0FDUVFocUtRSUFOd0lBSUFKQkVHb2tBQXRRQVFGL0l3QkJFR3NpQXlRQUlBTWdBVFlDQUNBRElBQTJBZ2dnQWtFQ1RnUkFJQU1vQWdnZ0F4RE9BU2dDQUJDQUNTQURLQUlJSWdBZ0F5Z0NBQ0FDUVFGcklBQVEvd2dMSUFOQkVHb2tBQXZPQWdFR2Z5TUFRU0JySWdja0FFRi9JUWxCZnlFR0lBQkI2QUJxSWdnUVF5RUZJQWRCRUdvaUFCQzRBaUFGQkVBZ0FDQUZFUGNJSUFBZ0JSRFZBd3NDUUFOQUlBQVFSaUFFVFFSQUlBWkJmMGNFUUNBQklBZ2dCaEE4RUtJQ1FRQWhCQU5BSUFBUVJpQUVUUTBFQWtBZ0JDQUdSZzBBSUFBZ0JCQlFLQUlFSUFBZ0JoQlFLQUlFUmdSQUlBRWdDQ0FFRUR3UW9nSU1BUXNnQWlBQUlBUVFVQkQyQ0NBQ0VLOENJQUlRMUFJUTlRZ0xJQVJCQVdvaEJBd0FDd0FMQlNBSUlBUVFQQ2dDQUVFRWFpQURFUGtDSVFVZ0IwRUlhaUFJSUFRUVBDZ0NBQ0FGRU9vQkdpQUFJQVFRVUNBSEtRTUlOd0lBSUFVZ0NTQUZJQWxKSWdVYklRa2dCQ0FHSUFVYklRWWdCRUVCYWlFRURBRUxDMEhBbHdSQmpzRUJFREpCNjRRQkVESkJtczBBRURKQm13RVFOa0c4MGdBUU1rR1J3Z0VRTWhBMUVBQUFDeUFBRUlNRklBZEJJR29rQUF1YkFnSU1md0Y4UVg4aENRSkFJQUFvQWdRaUJDQUJLQUlFUncwQUlBRW9BZ2dnQkVjTkFFRUFJUWtnQkVFQUlBUkJBRW9iSVFvZ0FDZ0NDQ0lHUVFBZ0JrRUFTaHNoQ3lBQktBSUFJZ3doQlFOQUlBSWdDa1lOQVNBQ0lBWnNJUTFCQUNFREEwQUNRQ0FESUFSSEJFQWdBaUFEU3dSQUlBVWdEQ0FESUFSc0lBSnFRUU4wYWlzREFEa0RBQXdDQ3lBQUtBSUFJUUVnQlVJQU53TUFJQUVnRFVFRGRHb2hCeUFCSUFNZ0JteEJBM1JxSVFoQkFDRUJSQUFBQUFBQUFBQUFJUTREUUNBQklBdEdEUUlnQlNBT0lBY3JBd0FnQ0NzREFLS2dJZzQ1QXdBZ0FVRUJhaUVCSUFoQkNHb2hDQ0FIUVFocUlRY01BQXNBQ3lBQ1FRRnFJUUlNQWdzZ0EwRUJhaUVESUFWQkNHb2hCUXdBQ3dBTEFBc2dDUXVKQWdFRmZ5TUFRU0JySWdRa0FDQUVJQUUyQWhnZ0FDZ0NBQ0VCSUFRZ0FCQ3ZBallDQUNBQklBUkJHR29nQkJEQkEwRUNkR29oQVFKQUlBSWdBeERuQkNJRlFRRklEUUFnQUJBMEtBSUFJQUFvQWdRaUJtdEJBblVnQlU0RVFDQUVJQU0yQWdBZ0JpQUJheUlJUVFKMUlnY2dCVWdFUUNBRUlBSTJBZ0FnQkNBSEVPVUVJQUFnQkNnQ0FDQURJQVVnQjJzUS9nZ2dDRUVCU0EwQ0N5QUFJQUVnQmlBQklBVkJBblJxRVAwSUlBSWdCQ2dDQUNBQkVNZ0NHZ3dCQ3lBQUVEUWhCaUFFSUFBZ0FCQkRJQVZxRU5JQ0lBRWdBQ2dDQUd0QkFuVWdCaERLQWlJRklBSWdBeEQ3Q0NBQUlBVWdBUkQ2Q0NFQklBVVFyZ0lMSUFFUWlnSWFJQVJCSUdva0FBczJBUUYvSXdCQklHc2lBaVFBSUFJZ0FUWUNFQ0FDSUFBMkFoZ2dBQ0FCSUFKQkVHb2dBa0VZYWhDQUF4Q0JDU0FDUVNCcUpBQUxnUUlDQVg4Q2ZTTUFRZkFBYXlJREpBQUNmMEVBSUFOQklHb2dBRU9zeFNjM0VPc0VSUTBBR2lBRFFnQTNBeGdnQTBFQU5nSVVJQU1nQWJJaUJEZ0NFQ0FESUFLeUlnVTRBZ3dnQXlBRU9BSUlJQU1nQlRnQ0JDQURRUUEyQWdBZ0EwSG9BR29nQTBFZ2FpQURRUmhxRU9rQklBTkI0QUJxSUFOQklHb2dBMEVRYWhEcEFTQURRZGdBYWlBRFFTQnFJQU5CQ0dvUTZRRWdBMEhRQUdvZ0EwRWdhaUFERU9rQlFRQWdBMEhvQUdvZ0EwSGdBR29nQTBIWUFHb2dBMEhRQUdvUTdBZ2dBU0FDYkxkRUxVTWM2K0kyR2oraXRsME5BQm9nQTBIb0FHb2dBMEhnQUdvZ0EwSFlBR29nQTBIUUFHb1E2Z2dMSVFBZ0EwSHdBR29rQUNBQUN6b0JBWDhnQUVFTWFpSUdJQVFRaFFJZ0FTQUNJQU1nQkNBRklBQWdCaUFBUVJocUlBQXFBaVFnQUNnQ0tDQUFLQUlzSUFBb0FqQVE3UWdMdEFNQkJYOUJmeUVHQWtBQ1FDQUFLQUlFSWdkQkFrZ05BQ0FBS0FJSUlnTkJBa2dOQUNBQktBSUlJQU5IRFFBZ0F5QUhJQU1nQjBnYklnVWdBU2dDQkVjTkFDQUNLQUlFSUFWSERRQUNRQ0FGSUFVZ0JSQzBBU0lFS0FJRVJnUkFJQVFvQWdnZ0JVWU5BUXNNQWdzQ1FDQURJQWRNSWdORkJFQWdBQ0FFRUlNSlFYOUtEUUVNQXdzZ0FDQUVFUHdJUVg5S0RRQU1BZ3NnQkNBQ0VQUUlRWDlNQkVBTUFnc0NRQ0FEUlFSQUlBQWdCQ0FCSUFJUTZ3aEJmMG9OQVF3REMwRUFJUWNnQlVFQUlBVkJBRW9iSVFNZ0FTZ0NBQ0VBSUFRb0FnQWhBUU5BQWtBQ2Z5QURJQWRIQkVCQkFDRUdJQUlvQWdBZ0IwRURkR29yQXdCRXZJbllsN0xTbkR4alJRMENJQWNoQXdzZ0F3c2dCU0FESUFWS0d5RUJBMEFnQVNBRFJnMERJQUlvQWdBZ0EwRURkR3BDQURjREFFRUFJUVlEUUNBRklBWkdSUVJBSUFCQ0FEY0RBQ0FHUVFGcUlRWWdBRUVJYWlFQURBRUxDeUFEUVFGcUlRTU1BQXNBQ3dOQUlBVWdCa1pGQkVBZ0FDQUJLd01BT1FNQUlBWkJBV29oQmlBQVFRaHFJUUFnQVVFSWFpRUJEQUVMQ3lBSFFRRnFJUWNNQUFzQUN5QUVFRVZCQUNFR0N5QUdEd3NnQkJCRlFYOExkZ0FnQVNBRklBbVRpemdDQUNBQ0lBWWdDcE9MT0FJQUlBUWdDQ0FNazRzNEFnQWdBeUFISUF1VGl5SUZJQUFvQWp5eUlBV1RFUFlDSWdVNEFnQWdCVU1BQUFBQVlFVUVRRUhBbHdSQi9zd0JFREpCMXNRQkVESkJtczBBRURKQnpRSVFOa0c4MGdBUU1rSFF6UUVRTWhBMUVBQUFDd3ZSQkFFQmZ5QUJJQVVnQUNnQ1dHOGdBQ2dDVkc4Z0FDZ0NORzhpQmpZQ0FDQUNJQVVnQm1zZ0FDZ0NXRzhnQUNnQ1ZHOGdBQ2dDTkcwaUJqWUNBQ0FESUFVZ0FTZ0NBR3NnQUNnQ05DQUdiR3NnQUNnQ1dHOGdBQ2dDVkcwaUJqWUNBQ0FFSUFVZ0FTZ0NBR3NnQUNnQ1ZDQUdiQ0FBS0FJMElBSW9BZ0JzYW1zZ0FDZ0NXRzBpQkRZQ0FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FTZ0NBQ0lCUVg5S0JFQWdBU0FBS0FJMFRnMEJJQUlvQWdBaUFVRi9UQTBDSUFFZ0FDZ0NPRTROQXlBREtBSUFJZ0ZCZjB3TkJDQUJJQUFvQWp4T0RRVWdCRUYvVEEwR0lBUWdBQ2dDUUU0TkJ3OExRY0NYQkVIN3d3RVFNa0hXeEFFUU1rR2F6UUFRTWtHK0FSQTJRYnpTQUJBeVFmSEZBUkF5RURVTUJ3dEJ3SmNFUWI3R0FSQXlRZGJFQVJBeVFack5BQkF5UWI4QkVEWkJ2TklBRURKQjhjVUJFRElRTlF3R0MwSEFsd1JCOXNZQkVESkIxc1FCRURKQm1zMEFFREpCd0FFUU5rRzgwZ0FRTWtITHh3RVFNaEExREFVTFFjQ1hCRUg3eHdFUU1rSFd4QUVRTWtHYXpRQVFNa0hCQVJBMlFielNBQkF5UWN2SEFSQXlFRFVNQkF0QndKY0VRZGZJQVJBeVFkYkVBUkF5UVpyTkFCQXlRY0lCRURaQnZOSUFFREpCc3NrQkVESVFOUXdEQzBIQWx3UkIvc2tCRURKQjFzUUJFREpCbXMwQUVESkJ3d0VRTmtHODBnQVFNa0d5eVFFUU1oQTFEQUlMUWNDWEJFSG15Z0VRTWtIV3hBRVFNa0dhelFBUU1rSEVBUkEyUWJ6U0FCQXlRY1RMQVJBeUVEVU1BUXRCd0pjRVFaUE1BUkF5UWRiRUFSQXlRWnJOQUJBeVFjVUJFRFpCdk5JQUVESkJ4TXNCRURJUU5Rc1FBQUFMalFFQkJIOGdBRUVJYWlJREtBSUFCRUFnQUVFQU5nSmtJQUJCeUFCcUlnUWlBaEJESVFVZ0FoREZCU0FDSUFVUXd3VWdBRUhVQUdvaEFnTkFJQUlRNkFSRkJFQWdBaERxQkF3QkN3c2dBQ0FDSUFNb0FnQWdBUkRDQXlBRUVFTWFEd3RCd0pjRVFmQy9BUkF5UWV1RUFSQXlRWnJOQUJBeVFaVURFRFpCdk5JQUVESkIyc0FCRURJUU5SQUFBQXVhQVFFR2YwRi9JUVVDUUNBQUtBSUlJZ0lnQVNnQ0JFY05BRUVBSVFVZ0FDZ0NCQ0lEUVFBZ0EwRUFTaHNoQmlBQ1FRQWdBa0VBU2hzaEJ5QUFLQUlBSVFCQkFDRUNBMEFnQWlBR1JnMEJJQUVvQWdBaEEwRUFJUVFEUUNBRUlBZEdSUVJBSUFBZ0FDc0RBQ0FES3dNQW9Ua0RBQ0FFUVFGcUlRUWdBRUVJYWlFQUlBTkJDR29oQXd3QkN3c2dBa0VCYWlFQ0RBQUxBQXNnQlF1V0JBSUlmd0Y5SXdCQlFHb2lCQ1FBSUFBUWl3SUNRQUpBQWtBZ0FSQ0VBVVVOQUNBQ0VJUUJSUTBBUXdBQUlFRVFiaUVNSUFSQkVHb2dBME1BQUFBQUVPc0VSUTBCSUFBZ0FSQ0VBUkQzQWdOQUFrQWdBUkNFQVNBSFRRUkFJQUFRUmlBQkVJUUJUUTBCUWNDWEJFSEl2Z0VRTWtIMHZBRVFNa0dhelFBUU1rR0FBaEEyUWJ6U0FCQXlRWnUvQVJBeUVEVVFBQUFMUVg4aEEwRi9JUWhCLy8vLy93Y2hDU0FCSUFjUWdnSWhDeUFFUVF4cUlBUkJDR29nQkVFUWFpQUJJQWNRZ1FJaUNpb0NBQ0FLS2dJRUVNTURRUUFoQlFKQUEwQWdBaENFQVNBRlRRUkFBa0FnQTBGL1JnMERJQWxCZjBZTkNDQUlRWDlIRFFBZ0FDQUVJQWNnQ1JEcUFSQ2hBZ3dEQ3dVZ0FpQUZFSUVDSVFZQ1FDQUtMUUFRSUFZdEFCQkhEUUFnQkNvQ0RDQUdLZ0lBa3hCdUlBUXFBZ2dnQmlvQ0JKTVFicElnREY0TkFDQURJQXNnQWlBRkVJSUNFUGNFSWdaTEJFQWdCU0VKSUFNaENDQUdJUU1NQVFzZ0JpQUlJQVlnQ0VrYklRZ0xJQVZCQVdvaEJRd0JDd3NnQUNvQ0RDQURzeUFJczVWZVFRRnpEUUFnQUNBRUlBY2dDUkRxQVJDaEFnc2dCMEVCYWlFSERBRUxDeUFBRUVZaEJRc2dCRUZBYXlRQUlBVVBDMEhBbHdSQnR0a0JFREpCOUx3QkVESkJtczBBRURKQnhBRVFOa0c4MGdBUU1rSHQyUUVRTWhBMUVBQUFDMEhBbHdSQm03c0JFREpCOUx3QkVESkJtczBBRURKQjhRRVFOa0c4MGdBUU1rR1V2Z0VRTWhBMUVBQUFDOW9DQVFsL0l3QkJFR3NpQnlRQUlBQVFpd0lDUUNBQkVJUUJSUTBBSUFJUWhBRkZEUUFnQUNBQkVJUUJFUGNDQTBBZ0FSQ0VBU0FFVFFSQUlBQVFSaUFCRUlRQlN3UkFRY0NYQkVISXZnRVFNa0gwdkFFUU1rR2F6UUFRTWtId0FCQTJRYnpTQUJBeVFadS9BUkF5RURVUUFBQUxCVUVBSVFOQmZ5RUdRWDhoQlVILy8vLy9CeUVJSUFFZ0JCQ0NBaUVLSUFFZ0JCQ0JBaUVMQWtBRFFDQUNFSVFCSUFOTkJFQUNRQ0FHUVg5R0RRTWdCVUYvUncwQUlBQWdCMEVJYWlBRUlBZ1E2Z0VRb1FJTUF3c0ZBa0FnQ3kwQUVDQUNJQU1RZ1FJdEFCQkhEUUFnQmlBS0lBSWdBeENDQWhENUFpSUpTd1JBSUFZaEJTQURJUWdnQ1NFR0RBRUxJQWtnQlNBRklBbExHeUVGQ3lBRFFRRnFJUU1NQVFzTElBQXFBZ3dnQnJNZ0JiT1ZYa0VCY3cwQUlBQWdCMEVJYWlBRUlBZ1E2Z0VRb1FJTElBUkJBV29oQkF3QkN3c2dBQkJHSVFNTElBZEJFR29rQUNBREM3TURBUXAvSXdCQkVHc2lDaVFBSUFBUWl3SUNRQUpBSUFFUWhBRkZEUUFnQWhDRUFVVU5BQ0FBSUFFUWhBRVE5d0lEUUFKQUlBRVFoQUVnQlUwRVFDQUFFRVlnQVJDRUFVME5BVUhBbHdSQnlMNEJFREpCOUx3QkVESkJtczBBRURKQnJ3RVFOa0c4MGdBUU1rR2J2d0VRTWhBMUVBQUFDMEYvSVFkQmZ5RUdRZi8vLy84SElRZ2dBeUFCSUFVUWdnSWlEQkNMQ1VFQUlRUWdBU0FGRUlFQ0lRMGdBMEhJQUdvaENRSkFBMEFnQ1JCRElBUk5CRUFDUUNBSFFYOUdEUU1nQ0VGL1JnMEhJQVpCZjBjTkFDQUFJQXBCQ0dvZ0JTQUlFT29CRUtFQ0RBTUxCUUpBSUEwdEFCQWdBaUFKSUFRUVBDZ0NBQkNCQWkwQUVFY05BQ0FISUF3Z0FpQUpJQVFRUENnQ0FCQ0NBaEQ1QWlJTFN3UkFJQWtnQkJBOEtBSUFJUWdnQnlFR0lBc2hCd3dCQ3lBTElBWWdCaUFMU3hzaEJnc2dCRUVCYWlFRURBRUxDeUFBS2dJTUlBZXpJQWF6bFY1QkFYTU5BQ0FBSUFwQkNHb2dCU0FJRU9vQkVLRUNDeUFGUVFGcUlRVU1BUXNMSUFBUVJpRUVDeUFLUVJCcUpBQWdCQThMUWNDWEJFR2J1d0VRTWtIMHZBRVFNa0dhelFBUU1rR2dBUkEyUWJ6U0FCQXlRWlMrQVJBeUVEVVFBQUFMNndFQ0JYOEJmRUYvSVFNQ1FDQUFLQUlFSWdaQkFVZ05BQ0FBS0FJSUlnUkJBVWdOQUNBQktBSUVJQVJIRFFBRFFDQUNJQVJHUlFSQUlBRW9BZ0FnQWtFRGRHcENBRGNEQUNBQ1FRRnFJUUlNQVFzTElBQW9BZ0FoQXdOQUlBVWdCa1lFUUNBR3R5RUhRUUFoQTBFQUlRSURRQ0FDSUFSR0RRTWdBU2dDQUNBQ1FRTjBhaUlBSUFBckF3QWdCNk01QXdBZ0FrRUJhaUVDREFBTEFBVWdBU2dDQUNFQ1FRQWhBQU5BSUFBZ0JFWkZCRUFnQWlBREt3TUFJQUlyQXdDZ09RTUFJQUJCQVdvaEFDQUNRUWhxSVFJZ0EwRUlhaUVEREFFTEN5QUZRUUZxSVFVTUFRc0FDd0FMSUFNTGdSTUNEMzhCZkNBQlFRSnRJZzFCQUNBTlFRQktHeUVISUFRb0FnQWlDU0FDUVFKdEloQkJBV3NpQ0NBTmJFRUJkR29oQmtFQUlRSWdDU0VGQTBBZ0FpQUhSa1VFUUNBR1FRQTdBUUFnQlVFQU93RUFJQUpCQVdvaEFpQUZRUUpxSVFVZ0JrRUNhaUVHREFFTEN5QVFRUUFnRUVFQVNoc2hDaUFKSUExQkFXc2lCMEVCZEdvaEJrRUFJUUlnQ1NFRkEwQWdBaUFLUmtVRVFDQUdRUUE3QVFBZ0JVRUFPd0VBSUFKQkFXb2hBaUFHSUExQkFYUWlDMm9oQmlBRklBdHFJUVVNQVFzTElBaEJBU0FJUVFGS0d5RVJJQWRCQVNBSFFRRktHeUVTSUFSQmtJRElBR29oQ0NBTlFRRnFJZ0lnQkNnQ0JHb2hEeUFCUVFGMElBQnFRUUpxSVF3Z0NTQUNRUUYwYWlFRlFRQWdEV3RCQVhRaEUwRUFJUWxCQVNFS0FrQURRQ0FLSUJGSEJFQkJBU0VHQTBBQ1FBSkFBa0FnQmlBU1J3UkFJQU1nREMwQUFFNEVRQ0FQUWY4Qk9nQUFJQVVnRTJvaUFDOEJBQ0lDUVJCMFFSQjFJZ2RCQVU0RVFDQUZJQWM3QVFBZ0JDQUNRUnhzYWlJQVFZeUEwQUJxSUFvMkFnQWdBRUgwLzg4QWFpSUNJQUlvQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlDSUFJb0FnQWdCbW8yQWdBZ0FFSDgvODhBYWlJQUlBQW9BZ0FnQ21vMkFnQU1CUXNnQUVFQ2F5OEJBQ0lIUVJCMFFSQjFJUUlnQUM0QkFpSUFRUUZPQkVBZ0FrRUJUZ1JBSUFSQmtJRElBR29pQWlBQVFRSjBha0VFYXlnQ0FDSUFJQWRCQW5RZ0FtcEJCR3NvQWdBaUIwb0VRQ0FGSUFjN0FRQkJBQ0VMSUFsQkFDQUpRUUJLR3lFT0lBZ2hBZ05BSUFzZ0RrWUVRQ0FISVFBTUNBc2dBQ0FDS0FJQVJnUkFJQUlnQnpZQ0FBc2dDMEVCYWlFTElBSkJCR29oQWd3QUN3QUxJQVVnQURzQkFDQUFJQWRPRFFWQkFDRUxJQWxCQUNBSlFRQktHeUVPSUFnaEFnTkFJQXNnRGtZTkJpQUhJQUlvQWdCR0JFQWdBaUFBTmdJQUN5QUxRUUZxSVFzZ0FrRUVhaUVDREFBTEFBc2dCVUVDYXk0QkFDSUNRUUZPQkVBZ0JFR1FnTWdBYWlJSElBQkJBblJxUVFScktBSUFJZ0FnQWtILy93TnhRUUowSUFkcVFRUnJLQUlBSWdkS0JFQWdCU0FIT3dFQVFRQWhDeUFKUVFBZ0NVRUFTaHNoRGlBSUlRSURRQ0FMSUE1R0JFQWdCeUVBREFjTElBQWdBaWdDQUVZRVFDQUNJQWMyQWdBTElBdEJBV29oQ3lBQ1FRUnFJUUlNQUFzQUN5QUZJQUE3QVFBZ0FDQUhUZzBFUVFBaEN5QUpRUUFnQ1VFQVNoc2hEaUFJSVFJRFFDQUxJQTVHRFFVZ0J5QUNLQUlBUmdSQUlBSWdBRFlDQUFzZ0MwRUJhaUVMSUFKQkJHb2hBZ3dBQ3dBTElBVWdBRHNCQUNBRUlBQkJCMnhCQW5ScUlnQkI5UC9QQUdvaUFpQUNLQUlBUVFGcU5nSUFJQUJCK1AvUEFHb2lBaUFDS0FJQUlBWnFOZ0lBSUFCQi9QL1BBR29pQWlBQ0tBSUFJQXBxTmdJQUlBWWdBRUdBZ05BQWFpSUNLQUlBU0FSQUlBSWdCallDQUFzZ0FFR01nTkFBYWlBS05nSUFEQVVMSUFKQkFVNEVRQ0FGSUFJN0FRQWdCQ0FIUVFkc1FRSjBhaUlBUWZUL3p3QnFJZ0lnQWlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdJZ0FpZ0NBQ0FHYWpZQ0FDQUFRZnovendCcUlnSWdBaWdDQUNBS2FqWUNBQ0FHSUFCQmhJRFFBR29pQWlnQ0FFb0VRQ0FDSUFZMkFnQUxJQUJCaklEUUFHb2dDallDQUF3RkN5QUZRUUpyTHdFQUlnQkJFSFJCRUhVaUFrRUJUZ1JBSUFVZ0Fqc0JBQ0FFSUFCQkhHeHFJZ0JCOVAvUEFHb2lBaUFDS0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQWlBQ0tBSUFJQVpxTmdJQUlBQkIvUC9QQUdvaUFpQUNLQUlBSUFwcU5nSUFJQUJCaElEUUFHb2lBQ2dDQUNBR1RnMEZJQUFnQmpZQ0FBd0ZDeUFKUVlDQUFrNEVRRUVBUVFOQndBbEJBQkE0UVg4aERBd0pDeUFGSUFsQkFXb2lBRHNCQUNBRUlBbEJBblJxUVpDQXlBQnFJQUJCRUhSQkVIVTJBZ0FnQkNBSlFSeHNhaUlDUVpTQTBBQnFJQVkyQWdBZ0FrR1FnTkFBYWtFQk5nSUFJQUpCbUlEUUFHb2dDallDQUNBQ1FaeUEwQUJxSUFZMkFnQWdBa0dnZ05BQWFpQUdOZ0lBSUFKQnBJRFFBR29nQ2pZQ0FDQUNRYWlBMEFCcUlBbzJBZ0FnQUNFSkRBUUxJQVZCQURzQkFDQVBRUUE2QUFBTUF3c2dEMEVDYWlFUElBVkJCR29oQlNBS1FRRnFJUW9nQVNBTWFrRUVhaUVNREFVTElBUWdBRUVRZEVFUWRVRWNiR29pQUVIMC84OEFhaUlDSUFJb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJQ0lBSW9BZ0FnQm1vMkFnQWdBRUg4Lzg4QWFpSUFJQUFvQWdBZ0NtbzJBZ0FNQVFzZ0JDQUFRUkIwUVJCMVFSeHNhaUlBUVl5QTBBQnFJQW8yQWdBZ0FFSDAvODhBYWlJQ0lBSW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSUNJQUlvQWdBZ0JtbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTElBOUJBV29oRHlBRlFRSnFJUVVnREVFQ2FpRU1JQVpCQVdvaEJnd0FDd0FMQ3lBSlFRQWdDVUVBU2hzaUEwRUJhaUVBUVFFaEFrRUJJUVVEUUNBQUlBSkdSUVJBQWtBZ0FpQUlLQUlBSWdGR0JFQWdCU0lHUVFGcUlRVU1BUXNnQVVFQ2RDQUVha0dNZ01nQWFpZ0NBQ0VHQ3lBSUlBWTJBZ0FnQ0VFRWFpRUlJQUpCQVdvaEFnd0JDd3NnQkNBRlFRRnJJZ0EyQWdnZ0FFVUVRRUVBRHd0QkFDRUdJQVJCREdwQkFDQUFRUUowRURzYUlBUkJrSUFvYWtFQUlBQkJCSFFRT3hvZ0FFRUFJQUJCQUVvYklRZ2dCRUdNZ0FocUlRQkJBQ0VDQTBBZ0FpQUlSZ1JBSUFSQmtJQW9haUVCQTBBZ0F5QUdSZ1JBUVFBaERDQUVLQUlJSWdCQkFDQUFRUUJLR3lFQklBUkJrSUFvYWlFQVFRQWhBZ05BSUFFZ0FrWU5CU0FBSUFKQkJIUWlBMm9pQ0NBSUt3TUFJQVFnQWtFQ2RHb29BZ3kzSWhTak9RTUFJQUFnQTBFSWNtb2lBeUFES3dNQUlCU2pPUU1BSUFKQkFXb2hBZ3dBQ3dBTElBUWdCQ0FHUVFKMGFrR1FnTWdBYWlnQ0FFRUJheUlDUVFKMElnaHFJZ0JCREdvZ0FDZ0NEQ0FFSUFaQkIyeEJBblJxSWdCQmtJRFFBR29vQWdCcU5nSUFJQUVnQWtFRWRDSUNhaUlGSUFVckF3QWdBRUdVZ05BQWFpZ0NBTGVnT1FNQUlBRWdBa0VJY21vaUJTQUZLd01BSUFCQm1JRFFBR29vQWdDM29Ea0RBQ0FBUVp5QTBBQnFLQUlBSWdVZ0FpQUVha0dNZ0FocUlnSW9BZ0JJQkVBZ0FpQUZOZ0lBQ3lBQVFhQ0EwQUJxS0FJQUlnVWdCQ0FJUVFKMElnSkJCSEpxUVl5QUNHb2lDQ2dDQUVvRVFDQUlJQVUyQWdBTElBQkJwSURRQUdvb0FnQWlDQ0FFSUFKQkNISnFRWXlBQ0dvaUJTZ0NBRWdFUUNBRklBZzJBZ0FMSUFCQnFJRFFBR29vQWdBaUFDQUVJQUpCREhKcVFZeUFDR29pQWlnQ0FFb0VRQ0FDSUFBMkFnQUxJQVpCQVdvaEJnd0FDd0FGSUFBZ0FrRUVkQ0lCYWlBTk5nSUFJQUFnQVVFRWNtcEJBRFlDQUNBQUlBRkJDSEpxSUJBMkFnQWdBQ0FCUVF4eWFrRUFOZ0lBSUFKQkFXb2hBZ3dCQ3dBTEFBc2dEQXY0QmdFT2Z5TUFRZkFBYXlJQ0pBQWdBRUVNYWlJTUVJc0NJQUJCZnpZQ0dDQUFRUnhxSVE0Z0FFR1VCbW9oRFNBQVFZd0ZhaUVMSUFCQi9BUnFJUWtnQVJBMEVGc2hDaUFDUWVnQWFpQUFRY2dBYWhETEF4Q3FBaUVFQTBBQ1FBSkFJQVFnQWtFd2FoQmpFS29DRUh3RVFDQUNRVEJxUWM2MUFSQ05BU0VESUFBdEFBZ2hCaUFCRURRaEJTQUVFR3dvQWdRUU5DRUhBa0FnQmdSQUlBa2dCU0FISUFRUWJDZ0NCRUVrYWhDUENTQUFLQUlBU1EwQkRBTUxJQWtnQlNBSEVJNEpJQUFvQWdCUERRSUxJQU1RZXd3Q0N5QUFLQUlZR2lBQ1FmQUFhaVFBRHdzZ0F4QjdJQVFRYkNnQ0JCQTBFRnNoQjBGL0lRWUNmd0ovSUFKQk1HcEJxN1lCRUkwQklRTkJBUXNFUUVFQUlBc2dDaUFISUFrZ0FTZ0NBQ0FCS0FJRUlBUVFiQ2dDQkNnQ0FDQUVFR3dvQWdRb0FnUVE4Z1FpQmtFQVNBMEJHZ3RCQVFzaEJTQURFSHNnQlVVTkFDQUNRZGdBYWhCT0lRVUNmeUFDUVRCcVFlZTJBUkNOQVNFRFFRRUxCRUFnQlNBTElBa2dCaER4QkFzZ0F4QjdJQUpCRUdwQnVMY0JFSTBCSVFNQ1FDQUNRVEJxSUFvZ0J5QUZJQTBnQkJCc0tBSUVLQUlBSUFRUWJDZ0NCQ2dDQkJEd0JFVUVRQ0FERUhzTUFRc2dBeEI3SUFJUVRpRURJQUpCRUdwQjQ3Y0JFSTBCSVFnZ0F5QUNRVEJxSUFvZ0J5QUZJQUFxQWdRUTd3UUNRQ0FERUVZZ0FDZ0NBRWtFUUNBSUVIc01BUXNnQ0JCN0lBSkJFR3BCb0xnQkVJMEJJUWdnQ1NBQkVEUWdCQkJzS0FJRUVEUWdBa0V3YWhDTkNTQUFLQUlBU1FSQUlBZ1Fld3dCQ3lBSUVIc0Nmd0ovSUFKQkVHcEJ3cmtCRUkwQklRaEJBUXNFUUVFQUlBc2dDaUFISUFrZ0FTZ0NBQ0FCS0FJRUlBUVFiQ2dDQkNnQ0FDQUVFR3dvQWdRb0FnUVE4Z1FpQmtFQVNBMEJHZ3RCQVFzaER5QUlFSHNnRDBVTkFBSi9JQUpCRUdwQjU3a0JFSTBCSVFoQkFRc0VRQ0FGSUFzZ0NTQUdFUEVFQ3lBSUVIc2dBa0VRYWtHeHVnRVFqUUVoQmlBQ1FUQnFJQW9nQnlBRklBMGdCQkJzS0FJRUtBSUFJQVFRYkNnQ0JDZ0NCQkR3QkVVRVFDQUdFSHNNQVFzZ0JoQjdJQU1RaXdJQ2Z5QUNRUkJxUWR5NkFSQ05BU0VHUVFFTEJFQWdBeUFDUVRCcUlBb2dCeUFGSUFBcUFnUVE3d1FMSUFZUWV5QURFRVlnQUNnQ0FFa05BQ0FERUVZZ0RCQkdUUTBBSUE0Z0FrRXdhaERGQXlBTUlBTVFpZ01nQUNBRUVHd29BZ0EyQWhnTElBTVEzd0VMSUFVUTN3RUxJQVFReWdNTUFBc0FDeW9CQVg4akFFRVFheUlDSkFBZ0FrRUlhaUFCRUtRRklnRWdBQkRTQXlBQkVNMEJJQUpCRUdva0FBc3VBQ0FDSUFGcklnQkJBVTRFUUNBREtBSUFJQUVnQUJBL0dpQURJQU1vQWdBZ0FFRU1ia0VNYkdvMkFnQUxDeUFBSUFFZ0FHc2lBUVJBSUFJZ0FDQUJFTm9DQ3lBQ0lBRkJERzFCREd4cUMwRUJBWDhnQUJEWkJTQUJTUVJBRUpRQkFBc2dBQkEwR2lBQUlBRVEyQVVpQWpZQ0FDQUFJQUkyQWdRZ0FCQTBJQUlnQVVFTWJHbzJBZ0FnQUVFQUVKQURDMFFCQVg4Z0FDZ0NBQVJBSUFBUVZ5RUJJQUFRNGdVZ0FDQUJFTkFDSUFBUU5Cb2dBQ2dDQUNFQklBQVF0d0VhSUFFUU15QUFFRFJCQURZQ0FDQUFRZ0EzQWdBTEN5Y0FJQUF0QUFRRVFDQUFLQUlBR2lBQlFRaHFFSTRGQ3lBQkJFQWdBQ2dDQUJvZ0FSQXpDd3ZaQWdJRWZ3RjhRWDhoQndKQUlBQW9BZ1FpQmtFQ1NBMEFJQUFvQWdnaUJVRUNTQTBBSUFFb0FnZ2dCVWNOQUNBR0lBVWdCU0FHU2hzaUJDQUJLQUlFUncwQUlBSW9BZ1FnQkVjTkFDQURLQUlFSUFWSERRQWdBQkM3Q1NJRVJRMEFJQVFnQXhDUUNVRi9UQVJBSUFRUVJVRi9Ed3RCQUNFQUlBUWdBeENNQ1VFQVRnUkFJQWEzbnlFSUlBVWdCbXdpQTBFQUlBTkJBRW9iSVFNRFFDQUFJQU5HUlFSQUlBUW9BZ0FnQUVFRGRHb2lCU0FGS3dNQUlBaWpPUU1BSUFCQkFXb2hBQXdCQ3dzZ0JDQUJJQUlRaUFraEJ5QUVFRVZCQUNFQUlBSW9BZ1FpQVVFQUlBRkJBRW9iSVFORUFBQUFBQUFBQUFBaENFRUFJUUVEUUNBQklBTkdCRUFEUUNBQUlBTkdEUVFnQWlnQ0FDQUFRUU4wYWlJQklBRXJBd0FnQ0tNNUF3QWdBRUVCYWlFQURBQUxBQVVnQ0NBQ0tBSUFJQUZCQTNScUt3TUFvQ0VJSUFGQkFXb2hBUXdCQ3dBTEFBc2dCQkJGQ3lBSEN5Z0FJQUFRTkJvRFFDQUJCRUFnQVNnQ0FDRUFJQUZCQ0dvUTlRUWdBUkF6SUFBaEFRd0JDd3NMSndBZ0FDMEFCQVJBSUFBb0FnQWFJQUZCQ0dvUTlRUUxJQUVFUUNBQUtBSUFHaUFCRURNTEN6QUJBWDhqQUVFUWF5SUNKQUFnQWlBQk5nSUlJQUFnQWlnQ0NDZ0NBRFlDQUNBQVFRUnFFRTRhSUFKQkVHb2tBQXRhQVFKL0l3QkJFR3NpQXlRQUlBTWdBRUVJYWlBQkVPRURJZ0VvQWdBaEJBTkFJQUVvQWdRZ0JFY0VRQ0FBS0FJUUlBRW9BZ0FnQWhDREFpQUJJQUVvQWdCQkJHb2lCRFlDQUF3QkN3c2dBUkMyQVNBRFFSQnFKQUFMVlFFQ2Z5TUFRUkJySWdNa0FDQURJQUFnQVJDdEFpSUJLQUlFSVFRRFFDQUJLQUlJSUFSSEJFQWdBQkEwSUFFb0FnUWdBaENEQWlBQklBRW9BZ1JCQkdvaUJEWUNCQXdCQ3dzZ0FSQjJJQU5CRUdva0FBdHRBUUovSXdCQklHc2lCQ1FBQWtBZ0FTQUFFRFFvQWdBZ0FDZ0NCR3RCQW5WTkJFQWdBQ0FCSUFJUW5na01BUXNnQUJBMElRTWdCRUVJYWlBQUlBQVFReUFCYWhEU0FpQUFFRU1nQXhES0FpSURJQUVnQWhDZENTQUFJQU1RMFFJZ0F4Q3VBZ3NnQkVFZ2FpUUFDeW9CQVg4akFFRVFheUlCSkFBZ0FVRUlhaUFBUVFocUtBSUFFRzhvQWdBaEFDQUJRUkJxSkFBZ0FBdFhBUUovSXdCQklHc2lBeVFBSUFBUU5DSUNJQU5CQ0dvZ0FDQUFFRU5CQVdvUTBnSWdBQkJESUFJUXlnSWlBaWdDQ0NBQkVJTUNJQUlnQWlnQ0NFRUVhallDQ0NBQUlBSVEwUUlnQWhDdUFpQURRU0JxSkFBTFBnRUNmeU1BUVJCcklnTWtBQ0FESUFCQkFSQ3RBaUVDSUFBUU5DQUNLQUlFSUFFUWd3SWdBaUFDS0FJRVFRUnFOZ0lFSUFJUWRpQURRUkJxSkFBTGhRUUNCWDhCZlNNQVFTQnJJZ1VrQUNBQkVEMGFJQUlvQWdBaENDQUJFSWdCSVFZZ0JVRUFPZ0FmQWtBQ1FDQUdSUTBBSUFFZ0NDQUdFRmtpQ1JBOEtBSUFJZ2RGRFFBRFFDQUhLQUlBSWdkRkRRRWdDQ0FIS0FJRVJ3UkFJQWNvQWdRZ0JoQlpJQWxIRFFJTElBRVFXeUFIUVFocUlBSVF6QUZGRFFBTERBRUxJQVZCRUdvZ0FTQUlRZVRnQVNBRElBUVE5Z1FnQVJBOUtBSUFJUUlnQVJCYklRTUNRQ0FHQkVBZ0FrRUJhck1nQXlvQ0FDQUdzNVJlUVFGekRRRUxJQVVnQmhEZEFVRUJjeUFHUVFGMGNqWUNEQ0FGQW44Z0FSQTlLQUlBUVFGcXN5QUJFRnNxQWdDVmpTSUtRd0FBZ0U5ZElBcERBQUFBQUdCeEJFQWdDcWtNQVF0QkFBczJBZ2dnQVNBRlFReHFJQVZCQ0dvUWZTZ0NBQkRSQXlBSUlBRVFpQUVpQmhCWklRa0xBa0FnQVNBSkVEd29BZ0FpQWtVRVFDQUZLQUlRSUFGQkNHb2lBaWdDQURZQ0FDQUNJQVVvQWhBMkFnQWdBU0FKRUR3Z0FqWUNBQ0FGS0FJUUtBSUFSUTBCSUFVb0FoQWhBaUFCSUFVb0FoQW9BZ0FvQWdRZ0JoQlpFRHdnQWpZQ0FBd0JDeUFGS0FJUUlBSW9BZ0EyQWdBZ0FpQUZLQUlRTmdJQUN5QUZRUkJxRUxVQklRY2dBUkE5SWdFZ0FTZ0NBRUVCYWpZQ0FDQUZRUUU2QUI4Z0JVRVFhaUlCS0FJQUlRSWdBVUVBTmdJQUlBSUVRQ0FCRUVnZ0FoQ2JDUXNMSUFBZ0JVRVFhaUFIRUc4Z0JVRWZhaENvQWlBRlFTQnFKQUFMK3dJQkJuOENRQUpBQWtBQ1FDQUFFRU1nQkVZRVFDQUNRUUJNRFFFZ0FpQUVTQTBDSUFaQkFVZ05BeUFFUVFBZ0JFRUFTaHNoQ1FOQUlBY2dDVVlOQlNBRElBZEJBblJxSVFwQkFDRUVRWDhoQWdOQUlBUWdCa1lFUUNBSFFRRnFJUWNnQWlBSWFpRUlEQUlGSUFJZ0FTQUtLQUlBUWVBQWJHb2dBU0FESUFVZ0JFRUNkR29pQ3lnQ0FFRUNkR29vQWdCQjRBQnNhaEQ1QWlJTVN3UkFJQXNvQWdBaEFpQUFJQWNRUENBQ05nSUFJQXdoQWdzZ0JFRUJhaUVFREFFTEFBc0FDd0FMUWNDWEJFSEFnZ0VRTWtIeW1nRVFNa0dhelFBUU1rSEdBUkEyUWJ6U0FCQXlRZm10QVJBeUVEVVFBQUFMUWNDWEJFSHhud0VRTWtIeW1nRVFNa0dhelFBUU1rSEhBUkEyUWJ6U0FCQXlRYXVpQVJBeUVEVVFBQUFMUWNDWEJFSFlwQUVRTWtIeW1nRVFNa0dhelFBUU1rSElBUkEyUWJ6U0FCQXlRY0NtQVJBeUVEVVFBQUFMUWNDWEJFSHNyd0VRTWtIeW1nRVFNa0dhelFBUU1rSEpBUkEyUWJ6U0FCQXlRY2l6QVJBeUVEVVFBQUFMSUFnTE1RQWdBRUVCT2dCa0lBQWdBVFlDQUNBQVFlZ0FhaEJPR2lBQVFmUUFhaEJPR2lBQVFRUnFJQUpCNEFBUVB4b2dBQXRCQVFKL0l3QkJJR3NpQWlRQUlBQVE3QUVnQVVrRVFDQUFFRFFoQXlBQUlBSkJDR29nQVNBQUVFTWdBeERLQWlJQUVORUNJQUFRcmdJTElBSkJJR29rQUF1ZEFRRUlmMEYvSVFVQ1FDQUFLQUlFSWdJZ0FTZ0NCRWNOQUNBQUtBSUlJZ1FnQVNnQ0NFY05BRUVBSVFVZ0FrRUFJQUpCQUVvYklRWWdCRUVBSUFSQkFFb2JJUWRCQUNFQ0EwQWdBaUFHUmcwQklBSWdCR3doQ0VFQUlRTURRQ0FESUFkR1JRUkFJQU1nQ0dwQkEzUWlDU0FBS0FJQWFpQUJLQUlBSUFscUt3TUFPUU1BSUFOQkFXb2hBd3dCQ3dzZ0FrRUJhaUVDREFBTEFBc2dCUXRDQVFGL0l3QkJJR3NpQWlRQUlBSWdBUkRNQWpZQ0VDQUNRUmhxSUFBZ0FTQUNRUkJxSUFKQkNHb1Fvd2tnQWtFWWFoQnNJUUFnQWtFZ2FpUUFJQUJCQkdvTDdBTUJDSDhqQUVFUWF5SUdKQUFDUUFKQUFrQWdBQ2dDQkNBQVFReHFJZ2dRUTBZRVFDQUNRUUJNRFFFZ0FpQUVTQTBDSUFBb0FnUWdCRW9OQXlBR1FYODJBZ3dnQUVFWWFpSUxJQVFnQmtFTWFoREpBeUFHUVg4MkFnZ2dBRUVrYWlJSklBUWdCa0VJYWhESkF5QUFRVEJxSWdVZ0JCQ0ZBaUFGUVFBUVBDQUZFRU1RK2dSQmZ5RUhBMEFnQUNnQ0NDQUtUQVJBSUFBb0FnUWdDQkJEUndSQVFjQ1hCRUhlbUFFUU1rSHltZ0VRTWtHYXpRQVFNa0c3QVJBMlFielNBQkF5UWJxZEFSQXlFRFVRQUFBTEJTQUZRUUFRUENBRkVFTWdBQ2dDQkNBQUtBSUFFTWdESUFjZ0NTQUJJQUlnQXlBRUlBVkJBQkE4SUFBb0FnUVFwQWtpREVzRVFDQUxJQWtRaWdNZ0NFRUFFRHdnQlVFQUVEd2dBQ2dDQkJEckFTQU1JUWNMSUFwQkFXb2hDZ3dCQ3dzZ0JrRVFhaVFBRHd0QndKY0VRZDZZQVJBeVFmS2FBUkF5UVpyTkFCQXlRWm9CRURaQnZOSUFFREpCdXAwQkVESVFOUkFBQUF0QndKY0VRZkdmQVJBeVFmS2FBUkF5UVpyTkFCQXlRWnNCRURaQnZOSUFFREpCcTZJQkVESVFOUkFBQUF0QndKY0VRZGlrQVJBeVFmS2FBUkF5UVpyTkFCQXlRWndCRURaQnZOSUFFREpCd0tZQkVESVFOUkFBQUF0QndKY0VRYUtwQVJBeVFmS2FBUkF5UVpyTkFCQXlRWjBCRURaQnZOSUFFREpCbnFzQkVESVFOUkFBQUFzdkFDQUFRUUU2QUdRZ0FDQUJOZ0lBSUFCQjZBQnFFRTRhSUFCQjlBQnFFRTRhSUFCQkJHcEI0QUFRL0FRZ0FBdEJBUUYvSUFBUTRnTWdBVWtFUUJDVUFRQUxJQUFRTkJvZ0FDQUJFTThESWdJMkFnQWdBQ0FDTmdJRUlBQVFOQ0FDSUFGQkFuUnFOZ0lBSUFCQkFCQ0dBd3MzQVFGL0lBQkJDR29pQlVHQUFSQkxJQUFRL2dRUXFna1FnZ1VnQlNnQ0FFRUFFUG9DSUFBZ0JTZ0NBQ0FCSUFJZ0F5QUVFUDBFQ3l3QkFYOGdBQ2dDQ0NBQUtBSUVFSThGSWdFRVFDQUJJQUFReHdoQmYwb0VRQ0FCRHdzZ0FSQkZDMEVBQzFrQkFuOGpBRUVRYXlJQ0pBQWdBaUFBUVFocUlBRVFnQVVpQVNnQ0FDRURBMEFnQVNnQ0JDQURSd1JBSUFBb0FoQWFJQUVvQWdBUS93UWdBU0FCS0FJQVFRRnFJZ00yQWdBTUFRc0xJQUVRdGdFZ0FrRVFhaVFBQzFRQkFuOGpBRUVRYXlJQ0pBQWdBaUFBSUFFUWpnTWlBU2dDQkNFREEwQWdBU2dDQ0NBRFJ3UkFJQUFRTkJvZ0FTZ0NCQkQvQkNBQklBRW9BZ1JCQVdvaUF6WUNCQXdCQ3dzZ0FSQjJJQUpCRUdva0FBc2VBQ0FBUVRCcUVIVWdBRUVrYWhCMUlBQkJHR29RZFNBQVFReHFFSFVMSlFBZ0FFSFVBR29RZ3dVZ0FFSElBR29RZFNBQVFReHFFTEFKSUFCQkNHcEJBQkNDQlFzVUFDQUFRUXhxUVFBZ0FTZ0NCRUg0NFFGR0d3c1JBQ0FBUVF4cUlnQWdBQ2dDQUJDRkJRdHBBUUovSXdCQklHc2lBeVFBQWtBZ0FTQUFFRFFvQWdBZ0FDZ0NCR3RCQW5WTkJFQWdBQ0FCRUljRERBRUxJQUFRTkNFQ0lBTkJDR29nQUNBQUVFTWdBV29RMGdJZ0FCQkRJQUlReWdJaUFpQUJFT01ESUFBZ0FoRFJBaUFDRUs0Q0N5QURRU0JxSkFBTE1nQWdBRUlBTndJRUlBQWdBVFlDQUNBQVFReHFFRTRhSUFCQkdHb1FUaG9nQUVFa2FoQk9HaUFBUVRCcUVFNGFJQUFMSndBZ0FDMEFCQVJBSUFBb0FnQWFJQUZCQ0dvUW5BVUxJQUVFUUNBQUtBSUFHaUFCRURNTEN6RUJBWDhqQUVFUWF5SUNKQUFnQWlBQk5nSUlJQUFnQWlnQ0NDZ0NBRFlDQUNBQVFRUnFFS3NDR2lBQ1FSQnFKQUFMV2dBakFFRVFheUlESkFBZ0FSQTBJUUVnQUVFVUVFc2dBMEVJYWlBQlFRQVFwd0lRcGdJaUFDZ0NBRUVJYWlBRUtBSUFFTGNKSUFBUVNFRUJPZ0FFSUFBb0FnQWdBallDQkNBQUtBSUFRUUEyQWdBZ0EwRVFhaVFBQzRVRUFnVi9BWDBqQUVFZ2F5SUZKQUFnQVJBOUdpQUNLQUlBSVFnZ0FSQ0lBU0VHSUFWQkFEb0FId0pBQWtBZ0JrVU5BQ0FCSUFnZ0JoQlpJZ2tRUENnQ0FDSUhSUTBBQTBBZ0J5Z0NBQ0lIUlEwQklBZ2dCeWdDQkVjRVFDQUhLQUlFSUFZUVdTQUpSdzBDQ3lBQkVGc2dCMEVJYWlBQ0VNd0JSUTBBQ3d3QkN5QUZRUkJxSUFFZ0NFSGs0QUVnQXlBRUVMZ0pJQUVRUFNnQ0FDRUNJQUVRV3lFREFrQWdCZ1JBSUFKQkFXcXpJQU1xQWdBZ0JyT1VYa0VCY3cwQkN5QUZJQVlRM1FGQkFYTWdCa0VCZEhJMkFnd2dCUUovSUFFUVBTZ0NBRUVCYXJNZ0FSQmJLZ0lBbFkwaUNrTUFBSUJQWFNBS1F3QUFBQUJnY1FSQUlBcXBEQUVMUVFBTE5nSUlJQUVnQlVFTWFpQUZRUWhxRUgwb0FnQVEwUU1nQ0NBQkVJZ0JJZ1lRV1NFSkN3SkFJQUVnQ1JBOEtBSUFJZ0pGQkVBZ0JTZ0NFQ0FCUVFocUlnSW9BZ0EyQWdBZ0FpQUZLQUlRTmdJQUlBRWdDUkE4SUFJMkFnQWdCU2dDRUNnQ0FFVU5BU0FGS0FJUUlRSWdBU0FGS0FJUUtBSUFLQUlFSUFZUVdSQThJQUkyQWdBTUFRc2dCU2dDRUNBQ0tBSUFOZ0lBSUFJZ0JTZ0NFRFlDQUFzZ0JVRVFhaEMxQVNFSElBRVFQU0lCSUFFb0FnQkJBV28yQWdBZ0JVRUJPZ0FmSUFWQkVHb2lBU2dDQUNFQ0lBRkJBRFlDQUNBQ0JFQWdBUkJJSUFJUXRna0xDeUFBSUFWQkVHb2dCeEJ2SUFWQkgyb1FxQUlnQlVFZ2FpUUFDemtBUWR5QkJCRFRBa0hjZ1FRb0FnQUVRRUhjZ1FRb0FnQVFvUWhCM0lFRUVEUWFRZHlCQkNnQ0FDRUFRZHlCQkJEUEFSb2dBQkF6Q3dzc0FRRi9JQUFvQWdRZ0FDZ0NDQkMwQVNJQkJFQWdBU0FBRUtjSlFYOUtCRUFnQVE4TElBRVFSUXRCQUF2cEF3RUVmeU1BUVRCcklnWWtBQUpBQWtBQ1FBSkFBa0FnQVFSQUlBSkZEUUVnQVJCSUVLUUJSUTBDSUFFUVNFRUFFRXdvQWdRZ0FpZ0NBRWNOQXlBQkVFaEJBQkJNS0FJSUlBSW9BZ1JIRFFRZ0FpQUJFTXNLSUFJUTB3TVFoUUVoQkNBR1FTQnFJZ1VRdUFJZ0JBUkFJQVVnQkJDU0JTQUZJQVFRbWdVTEEwQWdBaERUQXhDRkFTQUhUUTBHSUFaQkNHb2dBaERUQXlBSEVLTUJJZ1FxQWdBZ0JDb0NCQ0FFS2dJSUlBUXFBaHdnQkNvQ0dFTUFBQUFBWGhDQ0Job2dCU0FIRUdvaUJDQUdMUUFZT2dBUUlBUWdCaWtERURjQ0NDQUVJQVlwQXdnM0FnQWdCMEVCYWlFSERBQUxBQXRCd0pjRVFZN0JBQkF5UWF6R0FCQXlRWnJOQUJBeVFkUUJFRFpCdk5JQUVESkJvTmNBRURJUU5SQUFBQXRCd0pjRVFkYmNBQkF5UWF6R0FCQXlRWnJOQUJBeVFkVUJFRFpCdk5JQUVESkI3T0FBRURJUU5SQUFBQXRCd0pjRVFjRGtBQkF5UWF6R0FCQXlRWnJOQUJBeVFkWUJFRFpCdk5JQUVESkJqL1VBRURJUU5SQUFBQXRCd0pjRVFiUDRBQkF5UWF6R0FCQXlRWnJOQUJBeVFkY0JFRFpCdk5JQUVESkIvdnNBRURJUU5SQUFBQXRCd0pjRVFaei9BQkF5UWF6R0FCQXlRWnJOQUJBeVFkZ0JFRFpCdk5JQUVESkIvdnNBRURJUU5SQUFBQXNnQXlBQUVEUWdBU0FGRUxvSUlBVVFrUVFnQmtFd2FpUUFDeWdBSUFBUU5Cb0RRQ0FCQkVBZ0FTZ0NBQ0VBSUFGQkNHb1FqZ1VnQVJBeklBQWhBUXdCQ3dzTDdoSUNFSDhCZkNBQlFRQWdBVUVBU2hzaENTQUVLQUlBSWdnZ0FrRUJheUlQSUFGc1FRRjBhaUVHSUFnaEJ3TkFJQVVnQ1VaRkJFQWdCa0VBT3dFQUlBZEJBRHNCQUNBRlFRRnFJUVVnQjBFQ2FpRUhJQVpCQW1vaEJnd0JDd3NnQWtFQUlBSkJBRW9iSVFzZ0NDQUJRUUZySWdwQkFYUnFJUVpCQUNFRklBZ2hCd05BSUFVZ0MwWkZCRUFnQmtFQU93RUFJQWRCQURzQkFDQUZRUUZxSVFVZ0JpQUJRUUYwSWdscUlRWWdCeUFKYWlFSERBRUxDeUFQUVFFZ0QwRUJTaHNoRVNBRVFaQ0F5QUJxSVFrZ0F5QUJRUUZxSWdWcUlRNGdBQ0FGYWlFTklBcEJBU0FLUVFGS0d5SVNRUUZySVJBZ0NDQUZRUUYwYWlFSFFRQWdBV3RCQVhRaEUwRUFJUXRCQVNFREFrQURRQ0FESUJGSEJFQWdEU0FRYWlFVUlBNGdFR29oRDBFQklRWURRQUpBQWtBQ1FDQUdJQkpIQkVBZ0RTMEFBQ0FPTFFBQVN3UkFJQWNnRTJvaUNpOEJBQ0lGUVJCMFFSQjFJZ0JCQVU0RVFDQUhJQUE3QVFBZ0JDQUZRUnhzYWlJRlFZeUEwQUJxSUFNMkFnQWdCVUgwLzg4QWFpSUFJQUFvQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlBSUFBb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJQUlBQW9BZ0FnQTJvMkFnQU1CUXNnQ2tFQ2F5OEJBQ0lJUVJCMFFSQjFJUUFnQ2k0QkFpSUtRUUZPQkVBZ0FFRUJUZ1JBSUFSQmtJRElBR29pQlNBS1FRSjBha0VFYXlnQ0FDSUFJQWhCQW5RZ0JXcEJCR3NvQWdBaUNFb0VRQ0FISUFnN0FRQkJBQ0VNSUF0QkFDQUxRUUJLR3lFS0lBa2hCUU5BSUFvZ0RFWUVRQ0FJSVFBTUNBc2dBQ0FGS0FJQVJnUkFJQVVnQ0RZQ0FBc2dERUVCYWlFTUlBVkJCR29oQlF3QUN3QUxJQWNnQURzQkFDQUFJQWhPRFFWQkFDRU1JQXRCQUNBTFFRQktHeUVLSUFraEJRTkFJQW9nREVZTkJpQUlJQVVvQWdCR0JFQWdCU0FBTmdJQUN5QU1RUUZxSVF3Z0JVRUVhaUVGREFBTEFBc2dCMEVDYXk0QkFDSUlRUUZPQkVBZ0JFR1FnTWdBYWlJRklBcEJBblJxUVFScktBSUFJZ0FnQ0VILy93TnhRUUowSUFWcVFRUnJLQUlBSWdoS0JFQWdCeUFJT3dFQVFRQWhEQ0FMUVFBZ0MwRUFTaHNoQ2lBSklRVURRQ0FLSUF4R0JFQWdDQ0VBREFjTElBQWdCU2dDQUVZRVFDQUZJQWcyQWdBTElBeEJBV29oRENBRlFRUnFJUVVNQUFzQUN5QUhJQUE3QVFBZ0FDQUlUZzBFUVFBaERDQUxRUUFnQzBFQVNoc2hDaUFKSVFVRFFDQUtJQXhHRFFVZ0NDQUZLQUlBUmdSQUlBVWdBRFlDQUFzZ0RFRUJhaUVNSUFWQkJHb2hCUXdBQ3dBTElBY2dDanNCQUNBRUlBcEJCMnhCQW5ScUlnVkI5UC9QQUdvaUFDQUFLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBQ0FBS0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQUNBQUtBSUFJQU5xTmdJQUlBWWdCVUdBZ05BQWFpSUFLQUlBU0FSQUlBQWdCallDQUFzZ0JVR01nTkFBYWlBRE5nSUFEQVVMSUFCQkFVNEVRQ0FISUFBN0FRQWdCQ0FJUVFkc1FRSjBhaUlGUWZUL3p3QnFJZ0FnQUNnQ0FFRUJhallDQUNBRlFmai96d0JxSWdBZ0FDZ0NBQ0FHYWpZQ0FDQUZRZnovendCcUlnQWdBQ2dDQUNBRGFqWUNBQ0FHSUFWQmhJRFFBR29pQUNnQ0FFb0VRQ0FBSUFZMkFnQUxJQVZCaklEUUFHb2dBellDQUF3RkN5QUhRUUpyTHdFQUlnVkJFSFJCRUhVaUFFRUJUZ1JBSUFjZ0FEc0JBQ0FFSUFWQkhHeHFJZ1ZCOVAvUEFHb2lBQ0FBS0FJQVFRRnFOZ0lBSUFWQitQL1BBR29pQUNBQUtBSUFJQVpxTmdJQUlBVkIvUC9QQUdvaUFDQUFLQUlBSUFOcU5nSUFJQVZCaElEUUFHb2lBQ2dDQUNBR1RnMEZJQUFnQmpZQ0FBd0ZDeUFMUVlDQUFrNEVRRUVBUVFOQm9BbEJBQkE0UVg4aERRd0pDeUFISUF0QkFXb2lBRHNCQUNBRUlBdEJBblJxUVpDQXlBQnFJQUJCRUhSQkVIVTJBZ0FnQkNBTFFSeHNhaUlGUVpTQTBBQnFJQVkyQWdBZ0JVR1FnTkFBYWtFQk5nSUFJQVZCbUlEUUFHb2dBellDQUNBRlFaeUEwQUJxSUFZMkFnQWdCVUdnZ05BQWFpQUdOZ0lBSUFWQnBJRFFBR29nQXpZQ0FDQUZRYWlBMEFCcUlBTTJBZ0FnQUNFTERBUUxJQWRCQURzQkFBd0RDeUFIUVFScUlRY2dEMEVDYWlFT0lCUkJBbW9oRFNBRFFRRnFJUU1NQlFzZ0JDQUFRUkIwUVJCMVFSeHNhaUlGUWZUL3p3QnFJZ0FnQUNnQ0FFRUJhallDQUNBRlFmai96d0JxSWdBZ0FDZ0NBQ0FHYWpZQ0FDQUZRZnovendCcUlnQWdBQ2dDQUNBRGFqWUNBQXdCQ3lBRUlBQkJFSFJCRUhWQkhHeHFJZ1ZCaklEUUFHb2dBellDQUNBRlFmVC96d0JxSWdBZ0FDZ0NBRUVCYWpZQ0FDQUZRZmovendCcUlnQWdBQ2dDQUNBR2FqWUNBQ0FGUWZ6L3p3QnFJZ0FnQUNnQ0FDQURhallDQUFzZ0IwRUNhaUVISUE1QkFXb2hEaUFOUVFGcUlRMGdCa0VCYWlFR0RBQUxBQXNMSUF0QkFDQUxRUUJLR3lJSVFRRnFJUU5CQVNFRlFRRWhCd05BSUFNZ0JVWkZCRUFDUUNBRklBa29BZ0FpQUVZRVFDQUhJZ1pCQVdvaEJ3d0JDeUFBUVFKMElBUnFRWXlBeUFCcUtBSUFJUVlMSUFrZ0JqWUNBQ0FKUVFScUlRa2dCVUVCYWlFRkRBRUxDeUFFSUFkQkFXc2lBRFlDQ0NBQVJRUkFRUUFQQzBFQUlRWWdCRUVNYWtFQUlBQkJBblFRT3hvZ0JFR1FnQ2hxUVFBZ0FFRUVkQkE3R2lBQVFRQWdBRUVBU2hzaEFDQUVRWXlBQ0dvaENVRUFJUVVEUUNBQUlBVkdCRUFnQkVHUWdDaHFJUWtEUUNBR0lBaEdCRUJCQUNFTklBUW9BZ2dpQUVFQUlBQkJBRW9iSVFJZ0JFR1FnQ2hxSVFOQkFDRUZBMEFnQWlBRlJnMEZJQU1nQlVFRWRDSUJhaUlBSUFBckF3QWdCQ0FGUVFKMGFpZ0NETGNpRmFNNUF3QWdBeUFCUVFoeWFpSUFJQUFyQXdBZ0ZhTTVBd0FnQlVFQmFpRUZEQUFMQUFzZ0JDQUVJQVpCQW5ScVFaQ0F5QUJxS0FJQVFRRnJJZ0ZCQW5RaUFtb2lBRUVNYWlBQUtBSU1JQVFnQmtFSGJFRUNkR29pQlVHUWdOQUFhaWdDQUdvMkFnQWdDU0FCUVFSMElnTnFJZ0FnQUNzREFDQUZRWlNBMEFCcUtBSUF0NkE1QXdBZ0NTQURRUWh5YWlJQUlBQXJBd0FnQlVHWWdOQUFhaWdDQUxlZ09RTUFJQVZCbklEUUFHb29BZ0FpQVNBRElBUnFRWXlBQ0dvaUFDZ0NBRWdFUUNBQUlBRTJBZ0FMSUFWQm9JRFFBR29vQWdBaUFTQUVJQUpCQW5RaUFrRUVjbXBCaklBSWFpSUFLQUlBU2dSQUlBQWdBVFlDQUFzZ0JVR2tnTkFBYWlnQ0FDSUJJQVFnQWtFSWNtcEJqSUFJYWlJQUtBSUFTQVJBSUFBZ0FUWUNBQXNnQlVHb2dOQUFhaWdDQUNJQklBUWdBa0VNY21wQmpJQUlhaUlBS0FJQVNnUkFJQUFnQVRZQ0FBc2dCa0VCYWlFR0RBQUxBQVVnQ1NBRlFRUjBJZ05xSUFFMkFnQWdDU0FEUVFSeWFrRUFOZ0lBSUFrZ0EwRUljbW9nQWpZQ0FDQUpJQU5CREhKcVFRQTJBZ0FnQlVFQmFpRUZEQUVMQUFzQUN5QU5DeXNCQVg4Z0FDQUJLQUlBTmdJQUlBRW9BZ0FoQXlBQUlBRTJBZ2dnQUNBRElBSkJBM1JxTmdJRUlBQUxXUUVDZnlNQVFSQnJJZ0lrQUNBQ0lBQkJDR29nQVJDL0NTSUJLQUlBSVFNRFFDQUJLQUlFSUFOSEJFQWdBQ2dDRUJvZ0FTZ0NBQkNSQlNBQklBRW9BZ0JCQ0dvaUF6WUNBQXdCQ3dzZ0FSQzJBU0FDUVJCcUpBQUxhUUVDZnlNQVFTQnJJZ01rQUFKQUlBRWdBQkEwS0FJQUlBQW9BZ1JyUVFOMVRRUkFJQUFnQVJEVkF3d0JDeUFBRURRaEFpQURRUWhxSUFBZ0FCQkdJQUZxRUlRRElBQVFSaUFDRVBzQ0lnSWdBUkRBQ1NBQUlBSVFnd01nQWhDQ0F3c2dBMEVnYWlRQUMwVUJBbjhnQUJCR0lnRkJnQWhKQkVBZ0FFR0FDQ0FCYXhEQkNROExJQUZCZ0FoTEJFQWdBQ2dDQUVHQVFHc2hBU0FBRUVZaEFpQUFJQUVRaUFNZ0FDQUNFT1lEQ3dzMEFDQUFRWURJQUJDTUFpQUFRUmhxRU1JSklBQkJNallDTUNBQVFhZ0lOZ0lzSUFCQmdBZzJBaWdnQUVNSzF5TThPQUlrQ3k4QUEwQWdBU0FDUndSQUlBQWdBeWdDQUNBQkVKRURJQU1nQXlnQ0FFRVVhallDQUNBQlFSUnFJUUVNQVFzTEN5QUFJQUVnQUdzaUFRUkFJQUlnQUNBQkVOb0NDeUFDSUFGQkZHMUJGR3hxQzBVQkFYOGdBQ2dDQUFSQUlBQVFnd0VoQVNBQUVLMEdJQUFnQVJDWkJTQUFFRFFhSUFBb0FnQWhBU0FBRU9FQkdpQUJFRE1nQUJBMFFRQTJBZ0FnQUVJQU53SUFDd3M5QVFGL0lBQVExZ1VnQVVrRVFCQ1VBUUFMSUFBUU5Cb2dBQ0FCRUVzaUFqWUNBQ0FBSUFJMkFnUWdBQkEwSUFFZ0FtbzJBZ0FnQUVFQUVOVUZDMFVCQVg4Z0FDZ0NBQVJBSUFBUWtRRWhBU0FBRUpVR0lBQWdBUkNVQlNBQUVEUWFJQUFvQWdBaEFTQUFFT0FCR2lBQkVETWdBQkEwUVFBMkFnQWdBRUlBTndJQUN3dERBUU4vUVg4aEFRTkFBa0FnQUNBQ2FpMEFBQ0lEUVM1SEJFQWdBdzBCSUFGQmYwY0VRQ0FBSUFGcVFRQTZBQUFMRHdzZ0FpRUJDeUFDUVFGcUlRSU1BQXNBQ3lzQkFYOGdBQ0FCS0FJQU5nSUFJQUVvQWdBaEF5QUFJQUUyQWdnZ0FDQURJQUpCRkd4cU5nSUVJQUFMV1FFQ2Z5TUFRUkJySWdJa0FDQUNJQUJCQ0dvZ0FSREtDU0lCS0FJQUlRTURRQ0FCS0FJRUlBTkhCRUFnQUNnQ0VCb2dBU2dDQUJDWUJTQUJJQUVvQWdCQkZHb2lBellDQUF3QkN3c2dBUkMyQVNBQ1FSQnFKQUFMS0FBZ0FCQTBHZ05BSUFFRVFDQUJLQUlBSVFBZ0FVRUlhaENjQlNBQkVETWdBQ0VCREFFTEN3dUFBUUVCZnlBQVFaUUdhaUlCUVJocUVOOEJJQUZCREdvUWRTQUJFSFVnQUVHTUJXb2lBVUg4QUdvUWRTQUJRZkFBYWhCMUlBRkIzQUJxRU40RUlBQkIvQVJxRU44QklBQkJvQUZxRU5JS0lBQkIzQUJxRU53REdpQUFRY2dBYWlJQklBRkJDR29vQWdBUXpBa2dBUkNwQWlBQVFVQnJFTTBCSUFCQkRHb1Ezd0VMaWdFQkJIOENmd0pBQTBBQ1FBSkFJQUFnQVdvaUJDMEFBQ0lDUVM1SEJFQWdBZzBCUWIyREFSQ0pBU0VDSUFNTkFrRi9JQUVnQW1wQkFtcEJnQUpLRFFVYUlBUkJMam9BQUNBQklRTU1CQXNnQVNFREN5QUJRUUZxSVFFTUFRc0xRWDhnQWlBRGFrRUNha0dBQWtvTkFSb0xJQUFnQTJwQkFEb0FBU0FBRUlrQklBQnFFSXdPUVFBTEdnc3FBUUYvSXdCQkVHc2lBU1FBSUFGQkFEWUNEQ0FBSUFGQkRHb2dBVUVJYWhEOEFpQUJRUkJxSkFBTExRRUJmeU1BUVJCcklnRWtBQ0FCUVFBMkFnd2dBQ0FCUVF4cUVJSUJJQUJCQkdvUXp3a2dBVUVRYWlRQUMxY0JBWDhqQUVFUWF5SUJKQUFnQUJEUUNTQUFRUWhxUVFBMkFnQWdBVUVBTmdJTUlBQkJER29nQVVFTWFpQUJRUWhxRVB3Q0lBRkJnSUNBL0FNMkFnUWdBRUVRYWlBQlFRUnFLZ0lBT0FJQUlBRkJFR29rQUFzdkFRRi9Jd0JCRUdzaUFpUUFJQUlnQVRZQ0RDQUFLQUlBUVFScUlBSkJER29Rb2dVaEFDQUNRUkJxSkFBZ0FBdUlBZ0VFZnlNQVFUQnJJZ0lrQUFKQUlBQkJvQUZxSWdNb0FnQWdBUkJJUVFBUVRDZ0NCRVlFUUNBREtBSUVJQUVRU0VFQUVFd29BZ2hHRFFFTElBTWdBUkRSQ2dzZ0FFRkFheUlFUVpRQkVFc1FwUVVRa3drZ0JDZ0NBQ0FCRUVoQkFCQk1LQUlFRUtrQklBUW9BZ0FnQVJCSVFRQVFUQ2dDQ0JDYUFRSi9JQUpCRUdwQmlTb1FqUUVoQlVFQkN3UkFJQVFvQWdBZ0FTQURJQUJCdkFKcUVMd0pDeUFGRUhzUWpBVWhBU0FDUVJCcUVOa0VJQUpCRUdvUVBpRURJQUlnQkNnQ0FCQTBFSVFCTmdJTUlBSkJyT0lCTmdJSUlBSWdBellDQkNBQ1FmTTBOZ0lBSUFGQjRMUUJJQUlRMUFRZ0FrRVFhaEE1R2lBQUlBUW9BZ0FRa2drZ0FrRXdhaVFBQzVRQkFRTi9Jd0JCSUdzaUJDUUFBa0FDUUNBQVFkd0FhaUlDRUVnUXBBRkZEUUFnQWhCSVFRQVFUQ2dDQkNBQktBSUVSdzBBSUFJUVNFRUFFRXdvQWdnZ0FTZ0NDRVlOQVFzZ0FTZ0NCQ0FCS0FJSUVPY0pJUU1nQWlBQktBSUVJQUVvQWdnZ0F4Q0ZDZ3NDZnlBRVFaVWxFSTBCSVFOQkFRc0VRQ0FDSUFFUWdnb0xJQU1RZXlBQUlBSVEwd2tnQkVFZ2FpUUFDemNCQVg4akFFRWdheUlFSkFBZ0JDQUJRUUVnQWlBRElBSVExZ1FoQVNBQUtBSUFLQUlBSUFFUTFBa2dBUkR4QWlBRVFTQnFKQUFMSEFBZ0FCQk9HaUFBUVF4cUVFNGFJQUJCR0dvUVRob2dBQkREQ1F1NkFRRURmeU1BUVJCcklnTWtBQUpBSUFFZ0FoREdBeUlFSUFBUXR3Rk5CRUFnQXlBQ05nSU1JQUVnQUJCWElBUlBJZ1VFZnlBQ0JTQURJQUUyQWd3Z0FCQlhJUUVnQXlBREtBSU1JQUZCREd4cU5nSU1JQU1vQWd3TElBQW9BZ0FRbFFraEFTQUZSUVJBSUFBZ0F5Z0NEQ0FDSUFRZ0FCQlhheER6QkF3Q0N5QUFFRmNoQWlBQUlBRVE0UVVnQUNBQ0VOQUNEQUVMSUFBUWx3a2dBQ0FBSUFRUXNRSVFsZ2tnQUNBQklBSWdCQkR6QkFzZ0EwRVFhaVFBQzRVRUFnVi9BWDBqQUVFZ2F5SUZKQUFnQVJBOUdpQUNLQUlBSVFnZ0FSQ0lBU0VHSUFWQkFEb0FId0pBQWtBZ0JrVU5BQ0FCSUFnZ0JoQlpJZ2tRUENnQ0FDSUhSUTBBQTBBZ0J5Z0NBQ0lIUlEwQklBZ2dCeWdDQkVjRVFDQUhLQUlFSUFZUVdTQUpSdzBDQ3lBQkVGc2dCMEVJYWlBQ0VNd0JSUTBBQ3d3QkN5QUZRUkJxSUFFZ0NFSGs0QUVnQXlBRUVQWUVJQUVRUFNnQ0FDRUNJQUVRV3lFREFrQWdCZ1JBSUFKQkFXcXpJQU1xQWdBZ0JyT1VYa0VCY3cwQkN5QUZJQVlRM1FGQkFYTWdCa0VCZEhJMkFnd2dCUUovSUFFUVBTZ0NBRUVCYXJNZ0FSQmJLZ0lBbFkwaUNrTUFBSUJQWFNBS1F3QUFBQUJnY1FSQUlBcXBEQUVMUVFBTE5nSUlJQUVnQlVFTWFpQUZRUWhxRUgwb0FnQVEwUU1nQ0NBQkVJZ0JJZ1lRV1NFSkN3SkFJQUVnQ1JBOEtBSUFJZ0pGQkVBZ0JTZ0NFQ0FCUVFocUlnSW9BZ0EyQWdBZ0FpQUZLQUlRTmdJQUlBRWdDUkE4SUFJMkFnQWdCU2dDRUNnQ0FFVU5BU0FGS0FJUUlRSWdBU0FGS0FJUUtBSUFLQUlFSUFZUVdSQThJQUkyQWdBTUFRc2dCU2dDRUNBQ0tBSUFOZ0lBSUFJZ0JTZ0NFRFlDQUFzZ0JVRVFhaEMxQVNFSElBRVFQU0lCSUFFb0FnQkJBV28yQWdBZ0JVRUJPZ0FmSUFWQkVHb2lBU2dDQUNFQ0lBRkJBRFlDQUNBQ0JFQWdBUkJJSUFJUW1Ba0xDeUFBSUFWQkVHb2dCeEJ2SUFWQkgyb1FxQUlnQlVFZ2FpUUFDMElCQVg4akFFRWdheUlDSkFBZ0FpQUJFTXdDTmdJUUlBSkJHR29nQUNBQklBSkJFR29nQWtFSWFoQzVDU0FDUVJocUVHd2hBQ0FDUVNCcUpBQWdBRUVFYWd0cEFRTi9Jd0JCRUdzaUF5UUFJQU1RdUFJZ0FnUkFJQU1nQWhDckNTQURJQUlRaHdNTElBTWhCQU5BSUFRUVF5QUZUUVJBSUFBZ0FTQUNJQVJCQUJBOElBUVFReENzQ1NBRUVIVWdBMEVRYWlRQUJTQUVJQVVRUENBRk5nSUFJQVZCQVdvaEJRd0JDd3NMcVFFQkEzOGpBRUVRYXlJREpBQUNRQ0FCSUFJUStnTWlCQ0FBRU9BQlRRUkFJQU1nQWpZQ0RDQUJJQUFRa1FFZ0JFOGlCUVIvSUFJRklBTWdBVFlDRENBRElBQVFrUUVnQXlnQ0RHbzJBZ3dnQXlnQ0RBc2dBQ2dDQUJDV0JTRUJJQVZGQkVBZ0FDQURLQUlNSUFJZ0JDQUFFSkVCYXhDWEJRd0NDeUFBSUFFUTF3TU1BUXNnQUJESUNTQUFJQUFnQkJDTUF4REhDU0FBSUFFZ0FpQUVFSmNGQ3lBRFFSQnFKQUFMYUFFQ2Z5TUFRU0JySWdNa0FBSkFJQUVnQUJBMEtBSUFJQUFvQWdSclRRUkFJQUFnQVJDdkNRd0JDeUFBRURRaEFpQURRUWhxSUFBZ0FCQ1JBU0FCYWhDTUF5QUFFSkVCSUFJUTl3TWlBaUFCRUs0SklBQWdBaEQyQXlBQ0VQVURDeUFEUVNCcUpBQUxzUUVCQTM4akFFRVFheUlESkFBQ1FDQUFFT0VCSUFJZ0FXdEJGRzBpQkU4RVFDQURJQUkyQWd3Z0FTQUFFSU1CSUFSUElnVUVmeUFDQlNBRElBRTJBZ3dnQUJDREFTRUJJQU1nQXlnQ0RDQUJRUlJzYWpZQ0RDQURLQUlNQ3lBQUtBSUFFTVVKSVFFZ0JVVUVRQ0FBSUFNb0Fnd2dBaUFFSUFBUWd3RnJFSk1GREFJTElBQWdBUkNnQlF3QkN5QUFFTVlKSUFBZ0FDQUVFUGdERUpJRklBQWdBU0FDSUFRUWt3VUxJQU5CRUdva0FBdHJBUUovSXdCQklHc2lBeVFBQWtBZ0FTQUFFRFFvQWdBZ0FDZ0NCR3RCRkcxTkJFQWdBQ0FCRUpvRkRBRUxJQUFRTkNFQ0lBTkJDR29nQUNBQUVJTUJJQUZxRVBnRElBQVFnd0VnQWhEZ0JTSUNJQUVReXdrZ0FDQUNFTjhGSUFJUTNnVUxJQU5CSUdva0FBdEpBUUYvSXdCQklHc2lBaVFBSUFJZ0FUWUNEQ0FBRU00RElBQkI4T0FCTmdJQUlBQkJER29nQWtFSWFpQUNRUXhxSUFKQkdHb1FwQUlnQWtFUWFoQ2tBaG9nQWtFZ2FpUUFDMDBCQVg4Z0FFTFNDVGNDQUNBQVFRaHFFTmtER2lBQVFReHFJQUFRdFFraEFTQUFRY2dBYWhCT0dpQUFRZFFBYWhDRkF5QUFRUkEyQW13Z0FFSUFOd0prSUFFUWlRVWdBVUVCRUlnRkMrd0JBUXA4SUFJZ0FDc0RBQ0lESUFBckF3Z2lCQ0FFb0NJSm9pSUdJQUFyQXhnaUJTQUFLd01RSWdvZ0NxQWlCNklpQ0tFNUF5QWdBaUFESUFlaUlnc2dDU0FGb2lJTW9Ea0RRQ0FDSUFZZ0NLQTVBd2dnQWlBRUlBZWlJZ1lnQlNBRElBT2dJZ1dpSWdpaE9RTklJQUlnQ3lBTW9Ua0RFQ0FDSUFZZ0NLQTVBekFnQWtRQUFBQUFBQUR3UHlBRElBV2lJZ01nQkNBSm9pSUVvS0U1QTFBZ0FrUUFBQUFBQUFEd1B5QURJQW9nQjZJaUE2Q2hPUU1vSUFKRUFBQUFBQUFBOEQ4Z0JDQURvS0U1QXdBZ0FpQUJLd01BT1FNWUlBSWdBU3NEQ0RrRE9DQUNJQUVyQXhBNUExaEJBQXR6QVFGL0l3QkJJR3NpQXlRQUlBTWdBallDSENBRElBQkJ5QUJxSWdBZ0EwRWNhaEJ0TmdJWUlBTVFZellDQ0NBRFFSaHFJQU5CQ0dvUWZBUkFRUkFRQ1NJQUlBTkJDR3BCK0IwUW1BRVF6UUlnQUVITTN3RkJEaEFJQUFzZ0FDQURRUnhxRU5rSklBRVFuZ1VnQTBFZ2FpUUFDMElCQVg4Z0FFRWthaUlCUVF4cVFZQUJFSWdGSUFGQkRHb1FpUVVnQVVFSU5nSm9JQUZCRURZQ2JDQUJJQUJCQ0dvaUFCQklRUUFRd1FZZ0FCQ0VBUkRhQ1FzeEFRRi9JQUVnQUJDUkFTSUNTd1JBSUFBZ0FTQUNheERjQ1E4TElBRWdBa2tFUUNBQUlBQW9BZ0FnQVdvUTF3TUxDL3NEQVFWOElBRUNmQ0FBS3dNQUlnTWdBQ3NES0NJRW9DQUFLd05RSWdXZ1JBQUFBQUFBQVBBL29DSUdSQzFESE92aU5oby9aRUVCYzBVRVFDQUJJQUFyQXpBZ0FDc0RTS0VnQnA4aUF5QURvQ0lEb3prREFDQUJJQUFyQTBBZ0FDc0RFS0VnQTZNNUF3Z2dBU0FBS3dNSUlBQXJBeUNoSUFPak9RTVFJQU5FQUFBQUFBQUEwRCtpREFFTElBTWdCR1JCQVhNZ0F5QUZaRUVCYzNKRkJFQWdBU0FEUkFBQUFBQUFBUEEvb0NBRW9TQUZvWjhpQXlBRG9DSURSQUFBQUFBQUFOQS9vamtEQUNBQklBQXJBd2dnQUNzRElLQWdBNk01QXdnZ0FTQUFLd05BSUFBckF4Q2dJQU9qT1FNUUlBQXJBekFnQUNzRFNLRWdBNk1NQVFzZ0JDQUZaRUVCYzBVRVFDQUFLd01nSVFZZ0FDc0RDQ0VISUFFZ0JFUUFBQUFBQUFEd1A2QWdBNkVnQmFHZklnTWdBNkFpQTBRQUFBQUFBQURRUDZJNUF3Z2dBU0FISUFhZ0lBT2pPUU1BSUFFZ0FDc0RNQ0FBS3dOSW9DQURvemtERUNBQUt3TkFJQUFyQXhDaElBT2pEQUVMSUFFZ0FDc0RRQ0FBS3dNUW9DQUZSQUFBQUFBQUFQQS9vQ0FEb1NBRW9aOGlBeUFEb0NJRG96a0RBQ0FBS3dOSUlRUWdBQ3NETUNFRklBRWdBMFFBQUFBQUFBRFFQNkk1QXhBZ0FTQUZJQVNnSUFPak9RTUlJQUFyQXdnZ0FDc0RJS0VnQTZNTE9RTVlJQUlnQUNzREdEa0RBQ0FDSUFBckF6ZzVBd2dnQWlBQUt3TllPUU1RUVFBTGdBSUJBbjhqQUVFZ2F5SUlKQUFnQ0NBR05nSWNJQWhCRUdwQmxBRVFTeENsQlJDa0JTSUhLQUlBSUFRUXFRRWdCeWdDQUNBRkVKb0JJQWNvQWdBUU5FSGdBQkNwQVNBSEtBSUFFRFFRV3lBQkVJTUJFS01GSUFFZ0J5Z0NBQkEwRUZzaUJFY0VRQ0FFSUFFb0FnQWdBU2dDQkJEZENRc2dCeWdDQUJBMEVFZ2dBaENSQVJEa0NTQUNJQWNvQWdBUU5CQklJZ0ZIQkVBZ0FTQUNLQUlBSUFJb0FnUVEyd2tMSUFjb0FnQVE0d2tnQUNnQ0FDZ0NBQ0FJUVFocUlBY1EyQU1pQVNBR0VPSUpJQUVRelFFZ0F5QUFLQUlBUVFScUlBaEJIR29Rb2dVaUFFY0VRQ0FBSUFNb0FnQWdBeWdDQkJEWENRc2dCeEROQVNBSVFTQnFKQUFMTHdFQmZ3TkFJQUZCQ0VnZ0FFRUlTSEpGQkVBZ0FrRUJhaUVDSUFGQkFYVWhBU0FBUVFGMUlRQU1BUXNMSUFJTG1RRUJBbjhnQUVFTWFoQk9HaUFBUVVCckVLc0NHaUFBUWNnQWFoQ0dBaG9nQUVIY0FHb1FpUW9nQUVHZ0FXb1ExUW9oQVNBQVFid0NhaEM3Q0NBQVFmd0VhaUlDRUU0YUlBSkJzK2JNK1FNMkFnd2dBRUdNQldvUXl3Z2dBRUdVQm1vUTFna2dBVU1BQUVCQU9BSTBJQUZEQUFDQVFEZ0NPQ0FCUWZRREVOUUZJQUJCQVRvQUNDQUFRb2lBZ0lDQWdJQ2d3QUEzQWdBZ0FBdnhBUUVGZjBFRVFRUVF0QUVpQlNnQ0FDRUVBMEFnQTBFRFJ3UkFJQU5CQW5RaEJrRUFJUUlEUUNBQ1FRUkhCRUFnQkNBQ0lBWnFRUU4wYWlBQUlBTkJCSFJxSUFKQkFuUnFLZ0lBdXprREFDQUNRUUZxSVFJTUFRc0xJQU5CQVdvaEF3d0JDd3NnQkVJQU53TmdJQVJDZ0lDQWdJQ0FnUGcvTndONElBUkNBRGNEY0NBRVFnQTNBMmdnQlJEMUFob2dCU2dDQUNFQVFRQWhBd05BSUFOQkEwY0VRQ0FEUVFKMElRUkJBQ0VDQTBBZ0FrRUVSd1JBSUFFZ0EwRUVkR29nQWtFQ2RHb2dBQ0FDSUFScVFRTjBhaXNEQUxZNEFnQWdBa0VCYWlFQ0RBRUxDeUFEUVFGcUlRTU1BUXNMSUFVUVJRdThCQUlCZlFKL0FrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQUJFQWdBVU1BQUFBL2trTUFBQUFBWGtFQmN3MEJJQUZEQUFBQXY1SWlCQ0FEc2wxRkRRRWdBa01BQUFBQVlFVU5BaUFEUVg5TURRTUNmeUFFamlJRWkwTUFBQUJQWFFSQUlBU29EQUVMUVlDQWdJQjRDeUlGUVFGcUlBTnZJUVlnQXlBRmFpQURieUVEUXdBQWdEOGdBU0FGc3BOREFBQUF2NUlpQVpNaUJFTUFBQUFBWUVVTkJDQUJRd0FBQUFCZ1JRMEZJQU5CZjB3TkJpQUdRWDlNRFFjZ0FDQURRUUowYWlJRElBUWdBcFFnQXlvQ0FKSTRBZ0FnQUNBR1FRSjBhaUlBSUFFZ0FwUWdBQ29DQUpJNEFnQVBDMEhBbHdSQnNQc0FFREpCK1AwQUVESkJoeVVRTWtHTEFSQTJRWU1xRURKQi9ZRUJFRElRTlF3SEMwSEFsd1JCaFlRQkVESkIrUDBBRURKQmh5VVFNa0dNQVJBMlFZTXFFREpCMzRZQkVESVFOUXdHQzBIQWx3UkJ2SWtCRURKQitQMEFFREpCaHlVUU1rR05BUkEyUVlNcUVESkI5WXNCRURJUU5Rd0ZDMEhBbHdSQnI0NEJFREpCK1AwQUVESkJoeVVRTWtHT0FSQTJRWU1xRURKQjJaQUJFRElRTlF3RUMwSEFsd1JCa0pJQkVESkIrUDBBRURKQmh5VVFNa0dXQVJBMlFZTXFFREpCN0pNQkVESVFOUXdEQzBIQWx3UkJ5cFVCRURKQitQMEFFREpCaHlVUU1rR1hBUkEyUVlNcUVESkJ1WmNCRURJUU5Rd0NDMEhBbHdSQnJwb0JFREpCK1AwQUVESkJoeVVRTWtHWUFSQTJRWU1xRURKQjdad0JFRElRTlF3QkMwSEFsd1JCcnA4QkVESkIrUDBBRURKQmh5VVFNa0daQVJBMlFZTXFFREpCemFFQkVESVFOUXNRQUFBTFF3QWdBRU1BQU1CQWtpQUFsRU1BQVBCQmtpQUFsRU1BQVBCQ2tpQUFsRU1BQUxSRGtpQUFsRU1BQURSRWtpQUFsRU1BQURSRWtydEVPV3hTL212QlZqK2l0Z3VZQVFJQ2ZRTi9JQUVnQWtFQmF5SUdRUUowYWlJSEtnSUFJUVFnQVNvQ0FDRUZRUUFoQWdOQUlBSWdCa1lFUUNBQUlBWkJBblJxSUFRZ0F5b0NBSlFnQXlvQ0JDQUhLZ0lBbEpJZ0JTQURLZ0lJbEpJNEFnQUZJQUFnQWtFQ2RDSUlhaUFFSUFNcUFnQ1VJQUVnQ0dvcUFnQWlCQ0FES2dJRWxKSWdBeW9DQ0NBQklBSkJBV29pQWtFQ2RHb3FBZ0NVa2pnQ0FBd0JDd3NMekFFQ0JuMEJmd0pBSUFNcUFnQWlCeUFFS2dJQUlnaVRJZ3BEQUFBQUFGc2dCU29DQUNJSklBaVRJQWtnQjVNaUNaUWlDME1BQUFBQVd5QUtJQW1VSWdsREFBQUFBRnR5Y2lJTUJFQWdBRUVBTmdJQUlBRkJBRFlDQUF3QkN5QUFJQVVxQWdRZ0JDb0NCQ0lHa3lBTGxTQURLZ0lFSUFhVElBbVZreUlHT0FJQUlBRWdBeW9DQkNBRUtnSUVreUFJSUFpVUlBY2dCNVFpQjVNZ0JwU1NJQXFWSWdnNEFnQWdBeW9DQkNBSElBQXFBZ0NVa3lBSUlBTXFBZ0NVa3lFR0N5QUNJQVk0QWdBZ0RFRUJjd3V1Q2dJSmZ3UjlJd0JCTUdzaUNDUUFBa0FDUUNBRlF3QUFBQUJnQkVBZ0JTQUFRU2hxSWdrZ0FDZ0NCQ0FEYkNBRWFoQk1LQUlFczEwRVFDQUdRd0FBQUFCZ0JFQWdCaUFKSUFBb0FnUWdBMndnQkdvUVRDZ0NDTE5kQkVBZ0NTQUFLQUlFSUFOc0lBUnFFRXdpQ1NnQ0VFRUNSZ1JBSUFKQkFEWUNBQUovSUFWREFBQUFQNUlpRVl0REFBQUFUMTBFUUNBUnFBd0JDMEdBZ0lDQWVBc2lDMEVBU0NFRUFuOGdCa01BQUFBL2tpSVJpME1BQUFCUFhRUkFJQkdvREFFTFFZQ0FnSUI0Q3lFRElBUU5CU0FEUVFCSUlBc2dDU2dDQkU5eURRVWdBeUFKS0FJSVR3MEZJQUJCSEdvaENrTUFBSUEvSUFBcUFnd2dCNVFpQnlBSFF3QUFnRDlkR3lJUkVHNGhCd0ovSUJFZ0FDb0NFSlFpRVVNQUFBQS9raUlTaTBNQUFBQlBYUVJBSUJLb0RBRUxRWUNBZ0lCNEN5RU1JQkVRYm8waEVVRUFJQXNnREdzUXJBSWhCQ0FMSUF4cUlBa29BZ1JCQVdzUS9RSWhEVUVBSUFNZ0RHc1FyQUloQ3lBRElBeHFJQWtvQWdoQkFXc1EvUUloRENBS1FRQVFQRUVBSUFvUVEwRUNkQkE3R2tNQUFJQy9JQWNnQjVLVklRY0RRQ0FMSUF4S0JFQkJBQ0VEUVFBaEJBTkFJQUFvQWhRZ0JFd0VRRU1BQUFBQUlRVURRQ0FBS0FJSUlnUWdBMHdFUUNBRlF3QUFBQUJiRFFzRklBb2dBeEE4S2dJQUlBVmVRUUZ6UlFSQUlBb2dBeEE4S2dJQUlRVUxJQU5CQVdvaEF3d0JDd3NnQlVNQUFBQUFYa0VCYzBVRVFFRUFJUWtEUUNBSklnTWdCRTROQ3lBSUlBT3lJZ1k0QWlBZ0NDQUtJQU1RUENvQ0FEZ0NKQ0FJSUFOQkFXc2lCTEk0QWhnZ0NDQUtJQVFnQUNnQ0NDSUphaUFKYnhBOEtnSUFPQUljSUFnZ0EwRUJhaUlKc2pnQ0VDQUlJQW9nQUNnQ0NDSUVJQWxxSUFSdkVEd3FBZ0E0QWhRQ1FDQUtJQU1RUENvQ0FDQUZJQUFxQWhpVVhrRUJjdzBBSUFncUFpUWlCeUFJS2dJY1hrRUJjdzBBSUFjZ0NDb0NGRjVCQVhNTkFDQUlJQVk0QWdBZ0NFRU1haUFJUVFocUlBaEJCR29nQ0VFWWFpQUlRU0JxSUFoQkVHb1E3UWtFUUNBSUtnSUlJUWNnQ0NvQ0JCb2dDQ29DRENJR1F3QUFBQUJjQkVBZ0NDQUhqQ0FHSUFhU2xUZ0NBQXNMSUFFZ0FpZ0NBQ0lEUVFKMGFpQUlLZ0lBUXdBQUFEK1NJQUFvQWdpeUlnYVNJQWFWdTBRWUxVUlUreUVaUUtJUWd3dTJPQUlBSUFJZ0EwRUJhallDQUFzZ0FDZ0NDQ0VFREFBTEFBdEJ3SmNFUWNUMEFCQXlRZTBiRURKQmh5VVFNa0hhQVJBMlFZTXFFREpCOFBjQUVESVFOUXdLQlNBSVFlRGdBU2dDQURZQ0tDQUlRZGpnQVNrQ0FEY0RJQ0FLUVFBUVBDQUtRUUFRUENBQUtBSUlJQWhCSUdvUTdBa2dCRUVCYWlFRURBRUxBQXNBQ3lBTHNpQUdreEJ1SVJJZ0NTQUxFRTBoRGlBRUlRTURRQ0FESUExS0JFQWdDMEVCYWlFTERBSUxJQklnQTdJZ0JaTVFicElpRXlBUlhrVUVRQ0FISUJPVUVPc0pJUk1nRGlBRFFRTjBhaUlQS2dJQUlSUWdBQ2dDQ0NFUUlBcEJBQkE4SUJRZ0VMS1V1MFIzeU1sdE1GL0VQNksySUJNZ0R5b0NCSlFnQUNnQ0NCRHFDUXNnQTBFQmFpRUREQUFMQUFzQUMwSEFsd1JCbitBQUVESkI3UnNRTWtHSEpSQXlRZjRBRURaQmd5b1FNa0dMNUFBUU1oQTFEQVVMUWNDWEJFR3AxZ0FRTWtIdEd4QXlRWWNsRURKQitnQVFOa0dES2hBeVFabmNBQkF5RURVTUJBdEJ3SmNFUWRmTUFCQXlRZTBiRURKQmh5VVFNa0g1QUJBMlFZTXFFREpCa3RJQUVESVFOUXdEQzBIQWx3UkJuc0FBRURKQjdSc1FNa0dISlJBeVFmZ0FFRFpCZ3lvUU1rSDV4UUFRTWhBMURBSUxRY0NYQkVHMU5CQXlRZTBiRURKQmh5VVFNa0gzQUJBMlFZTXFFREpCNGpvUU1oQTFEQUVMSUFoQk1Hb2tBQThMRUFBQUM0WUJBUUovSUFCQktHb2hBMEVBSVFBQ1FBTkFJQUVRU0JDa0FTQUFTd1JBSUFFUVNDQUFFRXdpQWlnQ0JDQUNLQUlNUVFKMlJ3MENJQU1nQUJCTUtBSVlJQUlvQWhnZ0FpZ0NCQ0FDS0FJSUVQSUpJQUJCQVdvaEFBd0JDd3NQQzBIQWx3UkJzQkVRTWtIdEd4QXlRWWNsRURKQjRBQVFOa0dES2hBeVFZOHVFRElRTlJBQUFBdTFBUUVGZnlBQVE4M01URDg0QWhnZ0FFRUZOZ0lVSUFCREFBREFQemdDRUNBQVF3QUFRRUE0QWd3Z0FFRWtOZ0lJSUFBZ0JEWUNCQ0FBSUFNMkFnQWdBRUVjYWtFa0VJd0NJQUJCS0dvaUJpQUFLQUlFSUFBb0FnQnNFUFFEQTBBZ0F5QUZSd1JBSUFJZ0JYWWhCeUFCSUFWMklRZ2dCQ0FGYkNFSlFRQWhBQU5BSUFBZ0JFWUVRQ0FGUVFGcUlRVU1Bd1VnQmlBQUlBbHFFRXhCQWlBSUlBZEJBaEMvQXlBQVFRRnFJUUFNQVFzQUN3QUxDd3NuQUNBQVFnQTNBZ3dnQUVJQU53SUFJQUJDQURjQ0ZDQUFRUnhxRUU0YUlBQkJLR29RVGhvTGdRY0NBbjBJZnlBQUlBRWdBa0VDZEdvaUNpb0NBQ0FCS2dJQUlnU1RJZ1VnQVNvQ0JDQUVreUlFRU40QnUwUVlMVVJVK3lFSlFLQzJPQUlBSUFBZ0JDQUVsQ0FGSUFXVWtwRTRBZ1FnQWtFQmF5SUdRUUVnQmtFQlN4c2hDeUFCUVFScUlRY2dDaUVJUVFFaENRTkFBa0FnQ0VFRWFpRUlJQUJCQ0dvaEJpQUpJQXRHQkVBZ0FDQUlLZ0lBSUFjcUFnQWlCSk1pQlNBRUlBZEJCR3NxQWdDVElnUVEzZ0c3UkJndFJGVDdJUWxBb0xZNEFnZ2dBQ0FFSUFTVUlBVWdCWlNTa1RnQ0RDQURRUUZySWd4QkFTQU1RUUZMR3lFTklBb2dBa0VDZEdvaENDQUJJUWxCQVNFREEwQWdBeUFOUmdSQUlBWkJDR29oQnlBR0lBRWdBaUFNYkVFQ2RHb2lBU29DQUNJRUlBRWdBa0VDZEdzaUFDb0NBSk1pQlNBQktnSUVJQVNUSWdRUTNnRzdSQmd0UkZUN0lRbEFvTFk0QWdnZ0JpQUVJQVNVSUFVZ0JaU1NrVGdDRENBQlFRUnFJUVpCQVNFSUEwQWdBRUVFYWlFQUlBZ2dDMFlOQkNBSElBWXFBZ0FnQUNvQ0FKTWlCU0FHS2dJRUlBWkJCR3NxQWdDVElnUVEzZ0c3UkJndFJGVDdJUWxBb0xZNEFnZ2dCeUFFSUFTVUlBVWdCWlNTa1RnQ0RDQUlRUUZxSVFnZ0JrRUVhaUVHSUFkQkNHb2hCd3dBQ3dBTElBWWdDQ29DQUNBSktnSUFreUlGSUFvcUFnUWdDaW9DQUpNaUJCRGVBYnRFR0MxRVZQc2hDVUNndGpnQ0NDQUdJQVFnQkpRZ0JTQUZsSktST0FJTUlBWkJFR29oQmlBS1FRUnFJUWRCQVNFQUEwQWdBQ0FMUmdSQUlBWWdDQ29DQkNBSktnSUVreUlGSUFjcUFnQWdCMEVFYXlvQ0FKTWlCQkRlQWJ0RUdDMUVWUHNoQ1VDZ3RqZ0NBQ0FHSUFRZ0JKUWdCU0FGbEpLUk9BSUVJQU5CQVdvaEF5QUlRUWhxSVFnZ0NVRUlhaUVKSUFkQkJHb2hDZ3dDQlNBR0lBaEJCR29pQ0NvQ0FDQUpRUVJxSWdrcUFnQ1RJZ1VnQnlvQ0JDQUhRUVJyS2dJQWt5SUVFTjRCdTBRWUxVUlUreUVKUUtDMk9BSUFJQVlnQkNBRWxDQUZJQVdVa3BFNEFnUWdBRUVCYWlFQUlBWkJDR29oQmlBSFFRUnFJUWNNQVFzQUN3QUxBQVVnQUNBSUtnSUFJQWNxQWdDVElnVWdCeW9DQkNBSFFRUnJLZ0lBa3lJRUVONEJ1MFFZTFVSVSt5RUpRS0MyT0FJSUlBQWdCQ0FFbENBRklBV1VrcEU0QWd3Z0NVRUJhaUVKSUFkQkJHb2hCeUFHSVFBTUFnc0FDd3NnQnlBR0tnSUFJZ1FnQUNvQ0FKTWlCU0FFSUFaQkJHc3FBZ0NUSWdRUTNnRzdSQmd0UkZUN0lRbEFvTFk0QWdnZ0J5QUVJQVNVSUFVZ0JaU1NrVGdDREFzbEFBTkFJQUVnQUNnQ0NFY0VRQ0FBS0FJUUdpQUFJQUFvQWdoQkFtczJBZ2dNQVFzTEN5d0FJQUFvQWdBYUlBQW9BZ0FnQUJDSEFrRUJkR29hSUFBb0FnQWdBQkNIQWtFQmRHb2FJQUFvQWdBYUN5c0JBWDhnQUNBQktBSUFOZ0lBSUFFb0FnQWhBeUFBSUFFMkFnZ2dBQ0FESUFKQkFYUnFOZ0lFSUFBTFF3RUJmeU1BUVJCcklnRWtBQ0FBRURRYUlBRkIvLy8vL3djMkFnd2dBVUgvLy8vL0J6WUNDQ0FCUVF4cUlBRkJDR29Rd2dFb0FnQWhBQ0FCUVJCcUpBQWdBQXNrQUNBQUlBRTJBZ0FnQUNBQktBSUVJZ0UyQWdRZ0FDQUJJQUpCQVhScU5nSUlJQUFMTEFBZ0FDZ0NBQm9nQUNnQ0FDQUFFSWNDUVFGMGFob2dBQ2dDQUJvZ0FDZ0NBQ0FBRUlnQ1FRRjBhaG9MVVFFQmZ5QUFFSzRGSUFBUU5DQUFLQUlBSUFBb0FnUWdBVUVFYWlJQ0VMQUNJQUFnQWhCSklBQkJCR29nQVVFSWFoQkpJQUFRTkNBQkVEMFFTU0FCSUFFb0FnUTJBZ0FnQUNBQUVJZ0NFUFFKQzg4U0FnOS9BWHdnQVVFQUlBRkJBRW9iSVFrZ0JDZ0NBQ0lHSUFKQkFXc2lEU0FCYkVFQmRHb2hCeUFHSVFnRFFDQUZJQWxHUlFSQUlBZEJBRHNCQUNBSVFRQTdBUUFnQlVFQmFpRUZJQWhCQW1vaENDQUhRUUpxSVFjTUFRc0xJQUpCQUNBQ1FRQktHeUVLSUFZZ0FVRUJheUlMUVFGMGFpRUhRUUFoQlNBR0lRZ0RRQ0FGSUFwR1JRUkFJQWRCQURzQkFDQUlRUUE3QVFBZ0JVRUJhaUVGSUFjZ0FVRUJkQ0lKYWlFSElBZ2dDV29oQ0F3QkN3c2dEVUVCSUExQkFVb2JJUThnQkVHUWdNZ0FhaUVKSUFBZ0FVRUJhaUlGYWlFT0lBdEJBU0FMUVFGS0d5SVFRUUZySVJFZ0JpQUZRUUYwYWlFSVFRQWdBV3RCQVhRaEVrRUFJUXRCQVNFQUFrQURRQ0FBSUE5SEJFQWdEaUFSYWlFVFFRRWhCd05BQWtBQ1FBSkFJQWNnRUVjRVFDQURJQTR0QUFCSUJFQWdDQ0FTYWlJTkx3RUFJZ1pCRUhSQkVIVWlCVUVCVGdSQUlBZ2dCVHNCQUNBRUlBWkJIR3hxSWdaQmpJRFFBR29nQURZQ0FDQUdRZlQvendCcUlnVWdCU2dDQUVFQmFqWUNBQ0FHUWZqL3p3QnFJZ1VnQlNnQ0FDQUhhallDQUNBR1Fmei96d0JxSWdVZ0JTZ0NBQ0FBYWpZQ0FBd0ZDeUFOUVFKckx3RUFJZ3BCRUhSQkVIVWhCU0FOTGdFQ0lnWkJBVTRFUUNBRlFRRk9CRUFnQkVHUWdNZ0FhaUlGSUFaQkFuUnFRUVJyS0FJQUlnWWdDa0VDZENBRmFrRUVheWdDQUNJS1NnUkFJQWdnQ2pzQkFFRUFJUXdnQzBFQUlBdEJBRW9iSVEwZ0NTRUZBMEFnRENBTlJnUkFJQW9oQmd3SUN5QUdJQVVvQWdCR0JFQWdCU0FLTmdJQUN5QU1RUUZxSVF3Z0JVRUVhaUVGREFBTEFBc2dDQ0FHT3dFQUlBWWdDazROQlVFQUlRd2dDMEVBSUF0QkFFb2JJUTBnQ1NFRkEwQWdEQ0FOUmcwR0lBb2dCU2dDQUVZRVFDQUZJQVkyQWdBTElBeEJBV29oRENBRlFRUnFJUVVNQUFzQUN5QUlRUUpyTGdFQUlncEJBVTRFUUNBRVFaQ0F5QUJxSWdVZ0JrRUNkR3BCQkdzb0FnQWlCaUFLUWYvL0EzRkJBblFnQldwQkJHc29BZ0FpQ2tvRVFDQUlJQW83QVFCQkFDRU1JQXRCQUNBTFFRQktHeUVOSUFraEJRTkFJQXdnRFVZRVFDQUtJUVlNQndzZ0JpQUZLQUlBUmdSQUlBVWdDallDQUFzZ0RFRUJhaUVNSUFWQkJHb2hCUXdBQ3dBTElBZ2dCanNCQUNBR0lBcE9EUVJCQUNFTUlBdEJBQ0FMUVFCS0d5RU5JQWtoQlFOQUlBd2dEVVlOQlNBS0lBVW9BZ0JHQkVBZ0JTQUdOZ0lBQ3lBTVFRRnFJUXdnQlVFRWFpRUZEQUFMQUFzZ0NDQUdPd0VBSUFRZ0JrRUhiRUVDZEdvaUJrSDAvODhBYWlJRklBVW9BZ0JCQVdvMkFnQWdCa0g0Lzg4QWFpSUZJQVVvQWdBZ0IybzJBZ0FnQmtIOC84OEFhaUlGSUFVb0FnQWdBR28yQWdBZ0J5QUdRWUNBMEFCcUlnVW9BZ0JJQkVBZ0JTQUhOZ0lBQ3lBR1FZeUEwQUJxSUFBMkFnQU1CUXNnQlVFQlRnUkFJQWdnQlRzQkFDQUVJQXBCQjJ4QkFuUnFJZ1pCOVAvUEFHb2lCU0FGS0FJQVFRRnFOZ0lBSUFaQitQL1BBR29pQlNBRktBSUFJQWRxTmdJQUlBWkIvUC9QQUdvaUJTQUZLQUlBSUFCcU5nSUFJQWNnQmtHRWdOQUFhaUlGS0FJQVNnUkFJQVVnQnpZQ0FBc2dCa0dNZ05BQWFpQUFOZ0lBREFVTElBaEJBbXN2QVFBaUJrRVFkRUVRZFNJRlFRRk9CRUFnQ0NBRk93RUFJQVFnQmtFY2JHb2lCa0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQmtINC84OEFhaUlGSUFVb0FnQWdCMm8yQWdBZ0JrSDgvODhBYWlJRklBVW9BZ0FnQUdvMkFnQWdCa0dFZ05BQWFpSUZLQUlBSUFkT0RRVWdCU0FITmdJQURBVUxJQXRCZ0lBQ1RnUkFRUUJCQTBHQUNVRUFFRGhCZnlFR0RBa0xJQWdnQzBFQmFpSUZPd0VBSUFRZ0MwRUNkR3BCa0lESUFHb2dCVUVRZEVFUWRUWUNBQ0FFSUF0QkhHeHFJZ1pCbElEUUFHb2dCellDQUNBR1FaQ0EwQUJxUVFFMkFnQWdCa0dZZ05BQWFpQUFOZ0lBSUFaQm5JRFFBR29nQnpZQ0FDQUdRYUNBMEFCcUlBYzJBZ0FnQmtHa2dOQUFhaUFBTmdJQUlBWkJxSURRQUdvZ0FEWUNBQ0FGSVFzTUJBc2dDRUVBT3dFQURBTUxJQWhCQkdvaENDQVRRUUpxSVE0Z0FFRUJhaUVBREFVTElBUWdCa0VRZEVFUWRVRWNiR29pQmtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0JrSDQvODhBYWlJRklBVW9BZ0FnQjJvMkFnQWdCa0g4Lzg4QWFpSUZJQVVvQWdBZ0FHbzJBZ0FNQVFzZ0JDQUdRUkIwUVJCMVFSeHNhaUlHUVl5QTBBQnFJQUEyQWdBZ0JrSDAvODhBYWlJRklBVW9BZ0JCQVdvMkFnQWdCa0g0Lzg4QWFpSUZJQVVvQWdBZ0IybzJBZ0FnQmtIOC84OEFhaUlGSUFVb0FnQWdBR28yQWdBTElBaEJBbW9oQ0NBT1FRRnFJUTRnQjBFQmFpRUhEQUFMQUFzTElBdEJBQ0FMUVFCS0d5SUdRUUZxSVFOQkFTRUZRUUVoQ0FOQUlBTWdCVVpGQkVBQ1FDQUZJQWtvQWdBaUFFWUVRQ0FJSWdkQkFXb2hDQXdCQ3lBQVFRSjBJQVJxUVl5QXlBQnFLQUlBSVFjTElBa2dCellDQUNBSlFRUnFJUWtnQlVFQmFpRUZEQUVMQ3lBRUlBaEJBV3NpQURZQ0NDQUFSUVJBUVFBUEMwRUFJUWNnQkVFTWFrRUFJQUJCQW5RUU94b2dCRUdRZ0NocVFRQWdBRUVFZEJBN0dpQUFRUUFnQUVFQVNoc2hBQ0FFUVl5QUNHb2hDVUVBSVFVRFFDQUFJQVZHQkVBZ0JFR1FnQ2hxSVFrRFFDQUdJQWRHQkVCQkFDRUdJQVFvQWdnaUFFRUFJQUJCQUVvYklRSWdCRUdRZ0NocUlRTkJBQ0VGQTBBZ0FpQUZSZzBGSUFNZ0JVRUVkQ0lCYWlJQUlBQXJBd0FnQkNBRlFRSjBhaWdDRExjaUZLTTVBd0FnQXlBQlFRaHlhaUlBSUFBckF3QWdGS001QXdBZ0JVRUJhaUVGREFBTEFBc2dCQ0FFSUFkQkFuUnFRWkNBeUFCcUtBSUFRUUZySWdGQkFuUWlBbW9pQUVFTWFpQUFLQUlNSUFRZ0IwRUhiRUVDZEdvaUJVR1FnTkFBYWlnQ0FHbzJBZ0FnQ1NBQlFRUjBJZ05xSWdBZ0FDc0RBQ0FGUVpTQTBBQnFLQUlBdDZBNUF3QWdDU0FEUVFoeWFpSUFJQUFyQXdBZ0JVR1lnTkFBYWlnQ0FMZWdPUU1BSUFWQm5JRFFBR29vQWdBaUFTQURJQVJxUVl5QUNHb2lBQ2dDQUVnRVFDQUFJQUUyQWdBTElBVkJvSURRQUdvb0FnQWlBU0FFSUFKQkFuUWlBa0VFY21wQmpJQUlhaUlBS0FJQVNnUkFJQUFnQVRZQ0FBc2dCVUdrZ05BQWFpZ0NBQ0lCSUFRZ0FrRUljbXBCaklBSWFpSUFLQUlBU0FSQUlBQWdBVFlDQUFzZ0JVR29nTkFBYWlnQ0FDSUJJQVFnQWtFTWNtcEJqSUFJYWlJQUtBSUFTZ1JBSUFBZ0FUWUNBQXNnQjBFQmFpRUhEQUFMQUFVZ0NTQUZRUVIwSWdOcUlBRTJBZ0FnQ1NBRFFRUnlha0VBTmdJQUlBa2dBMEVJY21vZ0FqWUNBQ0FKSUFOQkRISnFRUUEyQWdBZ0JVRUJhaUVGREFFTEFBc0FDeUFHQzFrQkFuOGpBRUVRYXlJQ0pBQWdBaUFBUVFocUlBRVE5UWtpQVNnQ0FDRURBMEFnQVNnQ0JDQURSd1JBSUFBb0FoQWFJQUVvQWdBUXFBVWdBU0FCS0FJQVFRSnFJZ00yQWdBTUFRc0xJQUVRdGdFZ0FrRVFhaVFBQzRBQkFRSi9Jd0JCRUdzaUJDUUFJQVJCQURZQ0RDQUFRUXhxSUFSQkRHb2dBeEN4QVNBQkJFQWdBQ2dDRUJvZ0FVSC8vLy8vQjBzRVFFR1VnUUVRandFQUN5QUJRUUYwRUVzaEJRc2dBQ0FGTmdJQUlBQWdCU0FDUVFGMGFpSUNOZ0lJSUFBZ0FqWUNCQ0FBRUQwZ0JTQUJRUUYwYWpZQ0FDQUVRUkJxSkFBZ0FBdGFBUUovSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ0FCSUFBUTlna2lBMDBFUUNBQUVJY0NJZ0FnQTBFQmRra0VRQ0FDSUFCQkFYUTJBZ2dnQWtFSWFpQUNRUXhxRUgwb0FnQWhBd3NnQWtFUWFpUUFJQU1QQ3hDVUFRQUxWQUVDZnlNQVFSQnJJZ0lrQUNBQ0lBQWdBUkQzQ1NJQktBSUVJUU1EUUNBQktBSUlJQU5IQkVBZ0FCQTBHaUFCS0FJRUVLZ0ZJQUVnQVNnQ0JFRUNhaUlETmdJRURBRUxDeUFCRUhZZ0FrRVFhaVFBQ3drQUlBQkJCR29RUGdzSkFDQUFFS3dGRURNTENRQWdBQkRiQXhBekM0SUVBUUYvQWtBQ1FBSkFBa0FDUUNBQktBSUFRUUZHQkVBZ0FTZ0NFRUVCUncwQklBQkJCR29pQWhDa0FTQUFLQUlVSUFBb0FoQnNSdzBDSUFFb0FnUWdBa0VBRUV3b0FnUkhEUU1nQVNnQ0NDQUNRUUFRVENnQ0NFY05CQ0FBSUFKQkFCQk1JQUVRemdJZ0FDQUNRUUVRVENBQ1FRQVFUQkRPQWlBQUlBSkJBaEJNSUFKQkFSQk1FSzBGUVFFaEFRTkFJQUVnQUNnQ0VFOE5CaUFDSUFBb0FoUWdBV3dRVENnQ0dDQUNJQUFvQWhRZ0FXeEJBV3NRVENnQ0dDQUNJQUFvQWhRZ0FXeEJBV3NRVENnQ0JDQUNJQUFvQWhRZ0FXeEJBV3NRVENnQ0NCQ0xDaUFBSUFJZ0FDZ0NGQ0FCYkVFQmFoQk1JQUlnQUNnQ0ZDQUJiQkJNRU00Q0lBQWdBaUFBS0FJVUlBRnNRUUpxRUV3Z0FpQUFLQUlVSUFGc1FRRnFFRXdRclFVZ0FVRUJhaUVCREFBTEFBdEJ3SmNFUVprNkVESkIzUmtRTWtINUpCQXlRY29DRURaQi9Ta1FNa0hZUHhBeUVEVVFBQUFMUWNDWEJFR2t4UUFRTWtIZEdSQXlRZmtrRURKQnl3SVFOa0g5S1JBeVFZUE1BQkF5RURVUUFBQUxRY0NYQkVHMTBRQVFNa0hkR1JBeVFma2tFREpCelFJUU5rSDlLUkF5UWVEVkFCQXlFRFVRQUFBTFFjQ1hCRUhNMndBUU1rSGRHUkF5UWZra0VESkJ6Z0lRTmtIOUtSQXlRZHJmQUJBeUVEVVFBQUFMUWNDWEJFR280d0FRTWtIZEdSQXlRZmtrRURKQnp3SVFOa0g5S1JBeVFkcmZBQkF5RURVUUFBQUxDNWNCQVFKL0l3QkJJR3NpQXlRQUFrQWdBU0FBRURRb0FnQWdBQ2dDQkd0QkFYVk5CRUFnQUNBQkVQNEpEQUVMSUFBUU5DRUNJQU5CQ0dvZ0FDQUFFSWdDSUFGcUVQMEpJQUFRaUFJZ0FoRDhDU0lDSUFFUSt3a2dBQ0FDRVBrSklBSWdBaWdDQkJEekNTQUNLQUlBQkVBZ0FpZ0NFQm9nQWlnQ0FDRUFJQUlRUFNnQ0FDQUNLQUlBYXhvZ0FCQXpDd3NnQTBFZ2FpUUFDMFlCQVg4Z0FTQUFFSWdDSWdKTEJFQWdBQ0FCSUFKckVJTUtEd3NnQVNBQ1NRUkFJQUFvQWdBZ0FVRUJkR29oQVNBQUVJZ0NJUUlnQUNBQkVLa0ZJQUFnQWhENENRc0xwUUVCQm44Z0FDQURFSW9LSUFCQkJHb2lCU0FBS0FJVUlBTnNFUFFESUFOQkFDQURRUUJLR3lFR0EwQWdCQ0FHUndSQUlBSWdCSFloQnlBQklBUjJJUWhCQUNFREEwQWdBQ2dDRkNJSklBTk5CRUFnQkVFQmFpRUVEQU1GSUFVZ0JDQUpiQ0FEYWhCTVFRSWdDQ0FIUVFFUXZ3TWdBMEVCYWlFRERBRUxBQXNBQ3dzZ0FFRWdhaUFCSUFKc0lnRVFoQW9nQUVFc2FpQUJFSXdDSUFCQk9Hb2dBUkNNQWd2VENRRUxmeU1BUWJBQmF5SUtKQUFnQ2tMRGdZQ0EwQUUzQTVnQklBcENnSUNBZ09BV053T1FBVUgvQVNFTEEwQWdCVUVFUmtVRVFDQUFJQXBCa0FGcUlBVkJBblJxS0FJQWFpMEFBQ0lISUFzZ0J5QUxRZjhCY1VrYklRc2dCeUFKSUFjZ0NVSC9BWEZMR3lFSklBVkJBV29oQlF3QkN3c0NmeUFKUWY4QmNTSUhJQXRCL3dGeElndHJRUjFNQkVBZ0FrRUFOZ0lBSUFOQ2dJQ0FnSUNBZ1BpL2Z6Y0RBRUYrREFFTElBY2dDMnBCQVhZaERrRUFJUWRCQUNFRklBTUNmQUpBQWtBQ1FBTkFJQVZCQkVZRVFBSkFBa0FDUUFOQUlBY2lDMEVFUmcwQklBdEJBV29oQnlBS1Fhd0JhaUFMYWkwQUFFRUJSdzBBSUFwQnJBRnFJQWRCQTNGcUxRQUFRUUZIRFFBZ0NrR3NBV29nQzBFQ2FrRURjV290QUFBTkFBdEI5d0FoQ1VFTklRWkIvd0VoQndKQUlBc2lBdzRFQWdjR0F3QUxJQUlnQ3pZQ0FFUUFBQUFBQUFEd1B3d0lDeUFDUVFBMkFnQWdBMEtBZ0lDQWdJQ0ErTDkvTndNQVFYME1DQXNEUUNBRFFRNUdEUVlnQTBFT2JDRUlJQU5CL3YvLy93ZHhJUXdnQTBFRGF5RU5RUUFoQlFOQUlBVkJEa1pGQkVBQ1FDQUZRUU5ySUExeVFRaEpEUUFnQXlBRmNrSCsvLy8vQjNGRklBeEJERVlpQmlBRlFmNy8vLzhIY1NJUFFReEdjWElnQmlBUFJYRnlEUUFnQ1NBS2FpQUFJQVVnQ0dwcUxRQUFJQTVySWdaQkgzWTZBQUFnQmlBR1FSOTFJZzlxSUE5eklnWWdCeUFHSUFkSUd5RUhJQWxCQVdzaENRc2dCVUVCYWlFRkRBRUxDeUFEUVFGcUlRTU1BQXNBQ3dVZ0NrR3NBV29nQldvZ0RpQUFJQXBCa0FGcUlBVkJBblJxS0FJQWFpMEFBRXM2QUFBZ0JVRUJhaUVGREFFTEN3TkFRUUFoQlNBR1FRQklEUU1nQmtGK2NTRURJQVpCQTJzaERBTkFJQVZCRGtaRkJFQUNRQ0FGUVFOcklBeHlRUWhKRFFBZ0EwVWdCVUgrLy8vL0IzRWlDRUVNUm5FZ0NFVWdBMEVNUm5GeUlBTWdDSEpGY2cwQUlBa2dDbW9nQUNBRlFRNXNJQVpxYWkwQUFDQU9heUlJUVI5Mk9nQUFJQWdnQ0VFZmRTSU5haUFOY3lJSUlBY2dCeUFJU2hzaEJ5QUpRUUZySVFrTElBVkJBV29oQlF3QkN3c2dCa0VCYXlFR0RBQUxBQXNEUUNBR1FRQklEUUlnQmtGK2NVRU1SaUFHUVFKSmNpRUlJQVpCRG13aERDQUdRUU5ySVExQkRTRUZBMEFnQlVFQVNFVUVRQ0FJSUFWQmZuRkJERVp4SUFWQkEyc2dEWEpCQ0VrZ0JTQUdja0VDU1hKeVJRUkFJQWtnQ21vZ0FDQUZJQXhxYWkwQUFDQU9heUlEUVI5Mk9nQUFJQWxCQVdzaENTQURJQU5CSDNVaUQyb2dEM01pQXlBSElBTWdCMGdiSVFjTElBVkJBV3NoQlF3QkN3c2dCa0VCYXlFR0RBQUxBQXNEUUNBSVFRNUdEUUVnQ0VIKy8vLy9CM0VoQXlBSVFRTnJJUXhCRFNFRkEwQWdCVUVBU0VVRVFBSkFJQVZCQTJzZ0RISkJDRWtOQUNBRFJVRUFJQVZCZm5FaUJrRU1SaHNnQTBFTVJrRUFJQVpCREVZZ0JVRUNTWEliY2cwQUlBa2dDbW9nQUNBRlFRNXNJQWhxYWkwQUFDQU9heUlHUVI5Mk9nQUFJQVlnQmtFZmRTSU5haUFOY3lJR0lBY2dCaUFIU0JzaEJ5QUpRUUZySVFrTElBVkJBV3NoQlF3QkN3c2dDRUVCYWlFSURBQUxBQXNnQWlBTE5nSUFSQUFBQUFBQUFQQS9JQWRCSGtvTkFCb2dCN2RFQUFBQUFBQUFQa0NqQ3prREFFRjhRWTRXUWdBZ0NpQUtRWWdCYWhDMEJTSUFRUUJJRFFBYUlBUUVRQ0FFSUFBMkFnQUxJQUVnQ2lrRGlBRTNBd0JCQUFzaEJTQUtRYkFCYWlRQUlBVUxDUUFnQUJEY0F4QXpDeXdCQVg4Z0FDZ0NBQVJBSUFBZ0FDZ0NBQkNwQlNBQUVEUWFJQUFvQWdBaEFTQUFFSWNDR2lBQkVETUxDMElBSUFCQjZONEJOZ0lBSUFCQkJHb1FUaG9nQUVJQU53SVlJQUJDQURjQ0VDQUFRWWpmQVRZQ0FDQUFRU0JxRUU0YUlBQkJMR29RVGhvZ0FFRTRhaEJPR2dzMkFRRjlJQUJCQXpZQ0ZDQUFJQUUyQWhBZ0FFTUFBQUJBUXdBQUFEOFF6UVVpQWpnQ0dDQUFRd0FBZ0Q4Z0FoQ2FBcFU0QWh3TGxBRUJCbjhnQWtFQmRDRUhJQU5CQVhZaENDQUNRUUYySVFrRFFDQUVJQWhIQkVBZ0FTQUVJQWRzUVFKMGFpSURJQUpCQW5ScUlRVkJBQ0VHQTBBZ0JpQUpSZ1JBSUFSQkFXb2hCQXdEQlNBQUlBTXFBZ0FnQXlvQ0JKSWdCU29DQUpJZ0JTb0NCSkpEQUFDQVBwUTRBZ0FnQlVFSWFpRUZJQU5CQ0dvaEF5QUdRUUZxSVFZZ0FFRUVhaUVBREFFTEFBc0FDd3NMOWdrQ0MzOEJmU0FEUVFSTEJFQWdCRUVFU3dSQUlBTkJBbXNoRGlBRFFRRnJRUUowSVE4Z0EwRURhMEVDZENFTUlBTkJCR3RCQW5RaERTQUJJUWdEUUFKQUlBUWdDa1lFUUNBRVFRSnJJUTFCQUNFRklBQWhDU0FEUVFKMElnSWdBU0lHYWlJSUlRb2dBaUFJYWlJSElRSU1BUXRCQWlFRklBZ2dBaUFESUFwc1FRSjBhaUlMS2dJSUlBc3FBZ0FpRUNBUVF3QUF3RUNVSUJBZ0N5b0NCSkpEQUFDQVFKU1NrcEk0QWdBZ0NDQUxLZ0lNSUFzcUFnQWlFQ0FMS2dJRVF3QUF3RUNVSUJBZ0N5b0NDSkpEQUFDQVFKU1NrcEk0QWdRZ0NFRUlhaUVIQTBBZ0JTQU9SZ1JBSUFjZ0N5QVBhaUlKS2dJQUloQWdDeUFOYWlvQ0FDQUxJQTVCQW5ScUlnWXFBZ0JEQUFEQVFKUWdFQ0FMSUF4cUlnVXFBZ0NTUXdBQWdFQ1VrcEtTT0FJQUlBY2dDU29DQUNJUUlBVXFBZ0FnRUVNQUFNQkFsQ0FRSUFZcUFnQ1NRd0FBZ0VDVWtwS1NPQUlFSUFwQkFXb2hDaUFIUVFocUlRZ01Bd1VnQnlBTElBVkJBblJxSWdZcUFnZ2dCa0VJYXlvQ0FDQUdLZ0lBUXdBQXdFQ1VJQVpCQkdzcUFnQWdDeUFGUVFGcUlnVkJBblJxS2dJQWtrTUFBSUJBbEpLU2tqZ0NBQ0FIUVFScUlRY01BUXNBQ3dBTEN3TkFJQU1nQlVaRkJFQWdDU0FDS2dJQUlBWXFBZ0FpRUNBUVF3QUF3RUNVSUJBZ0Npb0NBSkpEQUFDQVFKU1NrcEpEQUFDQU81UTRBZ0FnQWtFRWFpRUNJQXBCQkdvaENpQUdRUVJxSVFZZ0NVRUVhaUVKSUFWQkFXb2hCUXdCQ3d0QkFpRU1JQUFnQTBFQ2RDSUNhaUVKSUFJZ0Iyb2hCa0VBSVFVZ0FTRUtBMEFnQXlBRlJnUkFBa0FEUUFKQUlBd2dEVVlFUUNBQklBUkJCR3NnQTJ4QkFuUnFJZ2dnQTBFQ2RDSUNhaUlISUFKcUlna2dBbW9oQmlBQUlBTWdEV3hCQW5ScUlRcEJBQ0VGREFFTElBRWdERUVDYXlBRGJFRUNkR29pQ0NBRFFRSjBJZ0pxSWdjZ0Ftb2lDU0FDYWlJR0lBSnFJUW9nQUNBRElBeHNRUUowYWlFQ1FRQWhCUU5BSUFNZ0JVWUVRQ0FNUVFGcUlRd01Bd1VnQWlBS0tnSUFJQWdxQWdBZ0NTb0NBRU1BQU1CQWxDQUhLZ0lBSUFZcUFnQ1NRd0FBZ0VDVWtwS1NRd0FBZ0R1VU9BSUFJQXBCQkdvaENpQUdRUVJxSVFZZ0NVRUVhaUVKSUFkQkJHb2hCeUFJUVFScUlRZ2dBa0VFYWlFQ0lBVkJBV29oQlF3QkN3QUxBQXNMQTBBZ0F5QUZSa1VFUUNBS0lBWXFBZ0FpRUNBSUtnSUFJQWtxQWdCREFBREFRSlFnRUNBSEtnSUFra01BQUlCQWxKS1Nra01BQUlBN2xEZ0NBQ0FHUVFScUlRWWdDVUVFYWlFSklBZEJCR29oQnlBSVFRUnFJUWdnQ2tFRWFpRUtJQVZCQVdvaEJRd0JDd3NnQVNBRVFRTnJJQU5zUVFKMGFpSUlJQU5CQW5RaUFXb2lCeUFCYWlFSklBQWdCRUVCYXlBRGJFRUNkR29oQmtFQUlRVURRQ0FESUFWR0RRRWdCaUFKS2dJQUloQWdDQ29DQUNBUVF3QUF3RUNVSUJBZ0J5b0NBSkpEQUFDQVFKU1NrcEpEQUFDQU81UTRBZ0FnQ1VFRWFpRUpJQWRCQkdvaEJ5QUlRUVJxSVFnZ0JrRUVhaUVHSUFWQkFXb2hCUXdBQ3dBTEJTQUpJQVlxQWdBZ0Npb0NBQ0lRSUFncUFnQkRBQURBUUpRZ0VDQUhLZ0lBa2tNQUFJQkFsSktTa2tNQUFJQTdsRGdDQUNBR1FRUnFJUVlnQjBFRWFpRUhJQWhCQkdvaENDQUtRUVJxSVFvZ0NVRUVhaUVKSUFWQkFXb2hCUXdCQ3dzUEMwSEFsd1JCN3pNUU1rSGRHUkF5UWZra0VESkJxUUVRTmtIOUtSQXlRZVl0RURJUU5SQUFBQXRCd0pjRVFld1FFREpCM1JrUU1rSDVKQkF5UWFnQkVEWkIvU2tRTWtIbUxSQXlFRFVRQUFBTG5na0JDbjhnQTBFRVN3UkFJQVJCQkVzRVFDQURRUVJySVFzZ0EwRURheUVNSUFOQkFtc2hDaUFEUVFGcklRMGdBU0VHQTBBQ1FDQUVJQWxHQkVBZ0JFRUNheUVNUVFBaENDQUFJUVVnQTBFQmRDSUNJQUVpQ21vaUJpRUpJQUlnQm1vaUJ5RUxEQUVMUVFJaENDQUdJQUlnQXlBSmJHb2lCUzBBQUNJSFFRZHNJQVV0QUFKcUlBVXRBQUVnQjJwQkFuUnFPd0VBSUFZZ0JTMEFBeUFGTFFBQUlnY2dCUzBBQVVFR2JHcHFJQVV0QUFJZ0IycEJBblJxT3dFQ0lBWkJCR29oQndOQUlBZ2dDa1lFUUNBSElBVWdDMm90QUFBZ0JTQU5haUlHTFFBQUlnZ2dCU0FLYWlJT0xRQUFRUVpzYW1vZ0NDQUZJQXhxSWdVdEFBQnFRUUowYWpzQkFDQUhJQVV0QUFBZ0JpMEFBQ0lHUVFkc2FpQU9MUUFBSUFacVFRSjBhanNCQWlBSlFRRnFJUWtnQjBFRWFpRUdEQU1GSUFjZ0JTQUlhaUlHTFFBQVFRWnNJQVpCQW1zdEFBQnFJQVVnQ0VFQmFpSUlhaTBBQUNBR1FRRnJMUUFBYWtFQ2RHb2dCaTBBQW1vN0FRQWdCMEVDYWlFSERBRUxBQXNBQ3dzRFFDQURJQWhHUlFSQUlBVWdDeThCQUNBS0x3RUFJZ0pCQjJ3Z0NTOEJBQ0FDYWtFQ2RHcHFza01BQUlBN2xEZ0NBQ0FMUVFKcUlRc2dDVUVDYWlFSklBcEJBbW9oQ2lBRlFRUnFJUVVnQ0VFQmFpRUlEQUVMQzBFQ0lRSWdBQ0FEUVFKMGFpRUZJQWNnQTBFQmRHb2hDa0VBSVFnZ0FTRUpBMEFnQXlBSVJnUkFBa0FEUUFKQUlBSWdERVlFUUNBQklBUkJCR3NnQTJ4QkFYUnFJZ1lnQTBFQmRDSUNhaUlISUFKcUlnVWdBbW9oQ2lBQUlBTWdER3hCQW5ScUlRbEJBQ0VJREFFTElBRWdBa0VDYXlBRGJFRUJkR29pQmlBRFFRRjBJZ2xxSWdjZ0NXb2lCU0FKYWlJS0lBbHFJUWtnQUNBQ0lBTnNRUUowYWlFTFFRQWhDQU5BSUFNZ0NFWUVRQ0FDUVFGcUlRSU1Bd1VnQ3lBSkx3RUFJQVl2QVFBZ0JTOEJBRUVHYkdvZ0NpOEJBQ0FITHdFQWFrRUNkR3Bxc2tNQUFJQTdsRGdDQUNBSlFRSnFJUWtnQ2tFQ2FpRUtJQVZCQW1vaEJTQUhRUUpxSVFjZ0JrRUNhaUVHSUF0QkJHb2hDeUFJUVFGcUlRZ01BUXNBQ3dBTEN3TkFJQU1nQ0VaRkJFQWdDU0FHTHdFQUlBVXZBUUJCQm14cUlBb3ZBUUFpQWlBSEx3RUFha0VDZEdvZ0FtcXlRd0FBZ0R1VU9BSUFJQXBCQW1vaENpQUZRUUpxSVFVZ0IwRUNhaUVISUFaQkFtb2hCaUFKUVFScUlRa2dDRUVCYWlFSURBRUxDeUFCSUFSQkEyc2dBMnhCQVhScUlnWWdBMEVCZENJQmFpSUhJQUZxSVFVZ0FDQUVRUUZySUFOc1FRSjBhaUVLUVFBaENBTkFJQU1nQ0VZTkFTQUtJQVl2QVFBZ0JTOEJBQ0lBUVFac2FpQUFJQWN2QVFCcVFRSjBhaUFBYXJKREFBQ0FPNVE0QWdBZ0JVRUNhaUVGSUFkQkFtb2hCeUFHUVFKcUlRWWdDa0VFYWlFS0lBaEJBV29oQ0F3QUN3QUxCU0FGSUFvdkFRQWdDUzhCQUNJTElBWXZBUUJCQm14cUlBY3ZBUUFnQzJwQkFuUnFhckpEQUFDQU81UTRBZ0FnQ2tFQ2FpRUtJQWRCQW1vaEJ5QUdRUUpxSVFZZ0NVRUNhaUVKSUFWQkJHb2hCU0FJUVFGcUlRZ01BUXNMRHd0QndKY0VRZTh6RURKQjNSa1FNa0g1SkJBeVFUZ1FOa0g5S1JBeVFlWXRFRElRTlJBQUFBdEJ3SmNFUWV3UUVESkIzUmtRTWtINUpCQXlRVGNRTmtIOUtSQXlRZVl0RURJUU5SQUFBQXN3QVFKOUFuOUJBU0FBS2dJQUlnSWdBU29DQUNJRFhRMEFHa0VBSUFJZ0ExNE5BQm9nQUNnQ0JDQUJLQUlFU1FzTGVRRUJmeU1BUVNCcklnSWtBQ0FDSUFFMkFoQWdBaUFBTmdJWUFrQWdBa0VZYWlBQ1FSQnFFSHhGRFFBZ0FpQUNLQUlZTmdJSUEwQWdBa0VJYWhDaEFTQUNRUkJxRUh4RkRRRWdBaWdDQ0NBQ0tBSVlFSTRCUlEwQUlBSWdBaWdDQ0RZQ0dBd0FDd0FMSUFJb0FoZ2hBQ0FDUVNCcUpBQWdBQXR6QVFGL0l3QkJJR3NpQWlRQUlBSWdBRFlDR0NBQ0lBRTJBaEFnQWtFUWFoRE9BUm9EUUNBQ1FSaHFJQUpCRUdvUWZBUkFJQUlnQWlnQ0dDQUJFSThLTmdJSUlBSkJDR29nQWtFWWFoQjhCRUFnQWlnQ0dDQUNLQUlJRUxBQkN5QUNRUmhxRUtFQkdnd0JDd3NnQWtFZ2FpUUFDNlVFQWdKL0FYNGpBRUdRNEFCckloUWtBRUVCSVJNQ1FDQUNRUUpyUVFKTERRQWdFRUdPRmtZRVFDQUJRUUpCRGtFcUlBTWdCQ0FGSUFZZ0J5QUlSQUFBQUFBQUFPdy9JQlJCRUdvUS93SkJmMHdFUUNBTlFYODJBZ0JCZWlFVERBSUxJQlJCRUdvZ0ZFRUlhaUFPSUE4Z0VSQ0dDaUlUUVg5TUJFQWdEVUYvTmdJQURBSUxJQlFwQXdnaUZVSi9VUVJBSUExQmZ6WUNBRUY3SVJNTUFnc2dEU0FWcDBILy93RnhRUUFnRlVLQWdQNy9ENE5RR3pZQ0FDQVNSUTBCSUJJZ0ZUY0RBQXdCQ3lBQlFRSWdFRUgvQVhFaUV5QVRRUU5zSUFNZ0JDQUZJQVlnQnlBSUlBa2dGRUVRYWhEL0FrRi9UQVJBSUExQmZ6WUNBRUY2SVJNTUFRc2dGRUVRYWlBVElBMGdEaUFQSUJBZ0VSQ2RDaUVUSUJKRkRRQWdFa0lBTndNQUN3SkFJQUpCQWtZZ0FrRUVTM0lOQUFKL0lBQkZCRUFnQ2tGL05nSUFRWDhNQVFzQ1FBSkFJQUlPQkFBQkFRQUJDeUFCUVFBZ0FDZ0NIQ0lCSUFGQkFuUWdBeUFFSUFVZ0JpQUhJQWdnQ1NBVVFSQnFFUDhDUVg5TUJFQWdDa0YvTmdJQVFYb01BZ3NnQUVFQUlCUkJFR29nQUNnQ0hDQUtJQXNnREJDNkJRd0JDeUFCUVFFZ0FDZ0NIQ0lCSUFGQkFuUWdBeUFFSUFVZ0JpQUhJQWdnQ1NBVVFSQnFFUDhDUVg5TUJFQWdDa0YvTmdJQVFYb01BUXNnQUVFQklCUkJFR29nQUNnQ0hDQUtJQXNnREJDNkJRc2hBaUFUUVFGR0JFQWdBaUVUREFFTElBSkJBVVlOQUNBQ0lCTnhRUjkxSUFKeElSTUxJQlJCa09BQWFpUUFJQk1MZ0FFQkFuOGpBRUVRYXlJRUpBQWdCRUVBTmdJTUlBQkJER29nQkVFTWFpQURFTEVCSUFFRVFDQUFLQUlRR2lBQlFmLy8vLzhCU3dSQVFiRFVBUkNQQVFBTElBRkJBM1FRU3lFRkN5QUFJQVUyQWdBZ0FDQUZJQUpCQTNScUlnSTJBZ2dnQUNBQ05nSUVJQUFRUFNBRklBRkJBM1JxTmdJQUlBUkJFR29rQUNBQUN5c0JBWDhnQUNBQktBSUFOZ0lBSUFFb0FnQWhBeUFBSUFFMkFnZ2dBQ0FESUFKQkpHeHFOZ0lFSUFBTFdRRUNmeU1BUVJCcklnSWtBQ0FDSUFCQkNHb2dBUkNUQ2lJQktBSUFJUU1EUUNBQktBSUVJQU5IQkVBZ0FDZ0NFQm9nQVNnQ0FCQzJCU0FCSUFFb0FnQkJKR29pQXpZQ0FBd0JDd3NnQVJDMkFTQUNRUkJxSkFBTFZBRUNmeU1BUVJCcklnSWtBQ0FDSUFBZ0FSQzVCU0lCS0FJRUlRTURRQ0FCS0FJSUlBTkhCRUFnQUJBMEdpQUJLQUlFRUxZRklBRWdBU2dDQkVFa2FpSUROZ0lFREFFTEN5QUJFSFlnQWtFUWFpUUFDMTBCQTMwZ0FDb0NJQ0VDSUFBcUFnUVFiaUVESUFBcUFnUWlBU0FCa2lBQUtnSUlJZ0dVSUFBcUFoU1VJQUlnQTVTVElBQXFBaEFnQVJCdWxKTWdBQ29DQUNBQUtnSVVFRzZVa3lBQUtnSUFJQUFxQWhDVUlBQXFBaUNVa2d1aUJBSUxmd0Y4UVFoQkNCQzBBU0VJUVFoQkFSQzBBU0VKUVFoQkFSQzBBU0VLSUFrb0FnQWhEQ0FJS0FJQUlRTURRQ0FHUVFSR1JRUkFJQU1nQmtFSGRDSUVhaUFBSUFaQkJIUWlDMm9pQlNzREFEa0RBQ0FESUFSQkNISnFJQVVyQXdnNUF3QWdBeUFFUVJCeWFrS0FnSUNBZ0lDQStEODNBd0FnQXlBRVFSaHlha0lBTndNQUlBTWdCRUVnY21wQ0FEY0RBQ0FESUFSQktISnFRZ0EzQXdBZ0F5QUVRVEJ5YWlBQklBdHFJZ2NyQXdBZ0JTc0RBSnFpT1FNQUlBTWdCRUU0Y21vZ0J5c0RBQ0FGS3dNSW1xSTVBd0FnQXlBTFFRaHlJZzFCQTNScVFnQTNBd0FnQXlBRVFjZ0FjbXBDQURjREFDQURJQVJCMEFCeWFrSUFOd01BSUFNZ0JFSFlBSEpxSUFVckF3QTVBd0FnQXlBRVFlQUFjbW9nQlNzRENEa0RBQ0FESUFSQjZBQnlha0tBZ0lDQWdJQ0ErRDgzQXdBZ0F5QUVRZkFBY21vZ0J5c0RDQ0FGS3dNQW1xSTVBd0FnQXlBRVFmZ0FjbW9nQnlzRENDQUZLd01JbXFJNUF3QWdDeUFNYWlBSEt3TUFPUU1BSUF3Z0RXb2dCeXNEQ0RrREFDQUdRUUZxSVFZTUFRc0xJQWdROVFJYUlBb2dDQ0FKRU1jREdpQUtLQUlBSVFGQkFDRUFBMEFnQUVFQ1JrVUVRQ0FDSUFCQkdHd2lCR29pQXlBQklBUnFJZ1FyQXdBNUF3QWdBeUFFS3dNSU9RTUlJQU1nQkNzREVEa0RFQ0FBUVFGcUlRQU1BUXNMSUFJZ0FTc0RNRGtETUNBQkt3TTRJUTRnQWtGQWEwS0FnSUNBZ0lDQStEODNBd0FnQWlBT09RTTRJQWdRUlNBSkVFVWdDaEJGQzBJQkFYOGpBRUVRYXlJQkpBQWdBQkEwR2lBQlFjZmo4VGcyQWd3Z0FVSC8vLy8vQnpZQ0NDQUJRUXhxSUFGQkNHb1F3Z0VvQWdBaEFDQUJRUkJxSkFBZ0FBc3VBUUYvQTBBZ0FTQUFLQUlJUndSQUlBQW9BaEFhSUFBZ0FDZ0NDRUVNYXlJQ05nSUlJQUlRM3dFTUFRc0xDeTRCQVg4RFFDQUJJQUFvQWdoSEJFQWdBQ2dDRUJvZ0FDQUFLQUlJUVF4cklnSTJBZ2dnQWhESUJRd0JDd3NMTHdBakFFRVFheUlCSkFBZ0FFSUFOd0lBSUFGQkFEWUNEQ0FBUVFocUlBRkJER29RbkFNZ0FVRVFhaVFBSUFBTEx3QURRQ0FCSUFKSEJFQWdBeWdDQUVFTWF5QUNRUXhySWdJUTN3TWFJQU1nQXlnQ0FFRU1hellDQUF3QkN3c0wwQW9EQjM4QmZnRjhJd0JCTUdzaUNTUUFBbjhnQVVFRGEwRUdUd1JBSUFKQmZ6WUNBQ0FEUVFBMkFnQWdCRUtBZ0lDQWdJQ0ErTDkvTndNQVFYOE1BUXNnQ1VFQU5nSVFJQWtnQVVFQmF5SUtOZ0ljSUFrZ0FTQUJiQ0lOUVFGck5nSVlJQWtnQVNBS2JEWUNGRUgvQVNFTUEwQWdCMEVFUmtVRVFDQUFJQWxCRUdvZ0IwRUNkR29vQWdCcUxRQUFJZ3NnRENBTElBeEIvd0Z4U1JzaERDQUxJQWdnQ3lBSVFmOEJjVXNiSVFnZ0IwRUJhaUVIREFFTEN5QUlRZjhCY1NJSElBeEIvd0Z4SWdoclFSMU1CRUFnQWtGL05nSUFJQU5CQURZQ0FDQUVRb0NBZ0lDQWdJRDR2MzgzQXdCQmZnd0JDeUFISUFocVFRRjJJUXRCQUNFSVFRQWhCd0pBQTBBZ0IwRUVSZ1JBQWtBQ1FBTkFJQWdpQjBFRVJnMEJJQWRCQVdvaENDQUpRU3hxSUFkcUxRQUFRUUZIRFFBZ0NVRXNhaUFJUVFOeGFpMEFBRUVCUncwQUlBbEJMR29nQjBFQ2FrRURjV290QUFBTkFBc2dBeUFITmdJQVFRQWhCMEgvQVNFTUEwQWdCeUFOUmtVRVFDQUFJQWRxSWdnZ0NDMEFBQ0lJSUF0Sk9nQUFJQWdnQzJzaUNDQUlRUjkxSWdocUlBaHpJZ2dnRENBSUlBeElHeUVNSUFkQkFXb2hCd3dCQ3dzZ0NpRUlBa0FDUUFKQUlBTW9BZ0FPQkFBQkFnUUhDeUFCUVFBZ0FVRUFTaHNoQTBFQUlRZ0RRQ0FESUFoR0RRY2dBU0FJYkNFTFFRQWhCd05BSUFFZ0IwWkZCRUFnQnlBSWNrVWdDQ0FLUmtFQUlBZEZJQWNnQ2taeUczSkZCRUFnQUNBSElBdHFhaTBBQUVFQVI2MGdEa0lCaG9RaERnc2dCMEVCYWlFSERBRUxDeUFJUVFGcUlRZ01BQXNBQ3lBQlFRQWdBVUVBU2hzaEEwRUFJUWdEUUNBRElBaEdEUVlnQ2lFSEEwQWdCMEVBU0VVRVFDQUlSVUVBSUFjZ0NrWWJJQWdnQ2taQkFDQUhSU0FISUFwR2NodHlSUVJBSUFBZ0FTQUhiQ0FJYW1vdEFBQkJBRWV0SUE1Q0FZYUVJUTRMSUFkQkFXc2hCd3dCQ3dzZ0NFRUJhaUVJREFBTEFBc0RRQ0FJUVFCSURRVWdBU0FJYkNFRElBaEZJQWdnQ2taeUlRc2dDaUVIQTBBZ0IwRUFTRVVFUUNBSElBaHlSU0FMSUFjZ0NrWnhja1VFUUNBQUlBTWdCMnBxTFFBQVFRQkhyU0FPUWdHR2hDRU9DeUFIUVFGcklRY01BUXNMSUFoQkFXc2hDQXdBQ3dBTElBSkJmellDQUNBRFFRQTJBZ0FnQkVLQWdJQ0FnSUNBK0w5L053TUFRWDBNQkFzRklBbEJMR29nQjJvZ0N5QUFJQWxCRUdvZ0IwRUNkR29vQWdCcUxRQUFTem9BQUNBSFFRRnFJUWNNQVFzTElBRkJBQ0FCUVFCS0d5RURBMEFnQ0VFQVNBMEJRUUFoQndOQUlBTWdCMFpGQkVBZ0NFVWdCeUFLUm5FZ0J5QUlja1VnQjBVZ0NDQUtSbkZ5Y2tVRVFDQUFJQUVnQjJ3Z0NHcHFMUUFBUVFCSHJTQU9RZ0dHaENFT0N5QUhRUUZxSVFjTUFRc0xJQWhCQVdzaENBd0FDd0FMUkFBQUFBQUFBUEEvSVE4Z0JDQU10MFFBQUFBQUFBQStRS05FQUFBQUFBQUE4RDhnREVFZVRCczVBd0FDUUFKQUFrQWdCVUdGQ2tZZ0JVR0VDR3RCQWtseURRQWdCVUdEQkVjRVFDQUZRWVFHUmcwQklBVkJnd0pIRFFJZ0NTQU9wMEhBNWdCcU1BQUFOd01JUXBiVHBiT1p6YVhMNlFBZ0RvaENBWU5RRFFNZ0FrRi9OZ0lBSUFSQ2dJQ0FnSUNBZ1BpL2Z6Y0RBRUY4REFRTElBa2dEcWRCZ09ZQWFqQUFBRGNEQ0NBT1F2Ly8vLzhQZ3lFT0lBWUVRQ0FHUXY3TzcrN2I5L2J6L2dBZ0RvaW5RUUZ4TmdJQUMwS0FzSkNCb0lpQWdJRi9JQTZJUWdHRFVBMENJQUpCZnpZQ0FDQUVRb0NBZ0lDQWdJRDR2MzgzQXdCQmZBd0RDeUFGSUE1QkFDQUpRUWhxRUxRRklnQkJmMHdFUUNBQ1FYODJBZ0FnQkVLQWdJQ0FnSUNBK0w5L053TUFRWHdNQXdzZ0JrVWdBRVZ5RFFFZ0JpQUFOZ0lBREFFTElBa2dEamNEQ0FzZ0FpQUpLUU1JUGdJQVFRQUxJUWNnQ1VFd2FpUUFJQWNMYWdFQ2Z5TUFRUkJySWdRa0FDQUVRUUEyQWd3Z0FFRU1haUFFUVF4cUlBTVFzUUVnQVFSQUlBQW9BaEFhSUFFUXdRVWhCUXNnQUNBRk5nSUFJQUFnQlNBQ1FRSjBhaUlDTmdJSUlBQWdBallDQkNBQUVEMGdCU0FCUVFKMGFqWUNBQ0FFUVJCcUpBQWdBQXZJQWdFSmYwRi9JUU1DUUNBQUlBRVE2Z05CQUVnTkFDQUFLQUlBUlFSQUlBQWdBQ2dDQ0NBQUtBSUViQkE2SWdJMkFnQWdBa1VOQVFzRFFBSkFRUUFoQXlBRklBQW9BZ2dpQkU0TkFBTkFBa0JCQUNFR1FRQWhCMEY4SVFRZ0F5QUFLQUlFSWdoT0RRQURRQ0FFUVFWSEJFQUNRQ0FFSUFWcUlnSkJBRWdOQUNBQ0lBQW9BZ2hPRFFBZ0FpQUliQ0VLUVh3aEFnTkFJQUpCQlVZTkFTQUNJQU5xSWdsQkFFZ2dDQ0FKVEhKRkJFQWdCMEVCYWlFSElBWWdBU0FKSUFwcWFpMEFBR29oQmdzZ0FrRUJhaUVDREFBTEFBc2dCRUVCYWlFRURBRUxDeUFBS0FJQUlBVWdDR3dnQTJwcUlBWWdCMjA2QUFBZ0EwRUJhaUVEREFFTEN5QUZRUUZxSVFVTUFRc0xRUUFoQWdOQUlBSWdCQ0FBS0FJRWJFNE5BU0FBS0FJQUlBSnFJZ0VnQVMwQUFFRUhhem9BQUNBQ1FRRnFJUUlnQUNnQ0NDRUVEQUFMQUFzZ0F3dllFZ0lPZndGOElBRkJBbTBpREVFQUlBeEJBRW9iSVFvZ0JDZ0NBQ0lGSUFKQkFtMGlEMEVCYXlJSUlBeHNRUUYwYWlFSFFRQWhBaUFGSVFZRFFDQUNJQXBHUlFSQUlBZEJBRHNCQUNBR1FRQTdBUUFnQWtFQmFpRUNJQVpCQW1vaEJpQUhRUUpxSVFjTUFRc0xJQTlCQUNBUFFRQktHeUVMSUFVZ0RFRUJheUlLUVFGMGFpRUhRUUFoQWlBRklRWURRQ0FDSUF0R1JRUkFJQWRCQURzQkFDQUdRUUE3QVFBZ0FrRUJhaUVDSUFjZ0RFRUJkQ0lKYWlFSElBWWdDV29oQmd3QkN3c2dDRUVCSUFoQkFVb2JJUkFnQ2tFQklBcEJBVW9iSVJFZ0JFR1FnTWdBYWlFSUlBRkJBWFFnQUdwQkFtb2hEaUFNUVFGMElBVnFRUUpxSVFaQkFDQU1hMEVCZENFU1FRQWhDa0VCSVFBQ1FBTkFJQUFnRUVjRVFFRUJJUWNEUUFKQUFrQUNRQ0FISUJGSEJFQWdBeUFPTFFBQVNBUkFJQVlnRW1vaUFpOEJBQ0lGUVJCMFFSQjFJZ3RCQVU0RVFDQUdJQXM3QVFBZ0JDQUZRUnhzYWlJQ1FZeUEwQUJxSUFBMkFnQWdBa0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQWtINC84OEFhaUlGSUFVb0FnQWdCMm8yQWdBZ0FrSDgvODhBYWlJQ0lBSW9BZ0FnQUdvMkFnQU1CUXNnQWtFQ2F5OEJBQ0lMUVJCMFFSQjFJUVVnQWk0QkFpSUNRUUZPQkVBZ0JVRUJUZ1JBSUFSQmtJRElBR29pQ1NBQ1FRSjBha0VFYXlnQ0FDSUZJQXRCQW5RZ0NXcEJCR3NvQWdBaUMwb0VRQ0FHSUFzN0FRQkJBQ0VKSUFwQkFDQUtRUUJLR3lFTklBZ2hBZ05BSUFrZ0RVWUVRQ0FMSVFVTUNBc2dCU0FDS0FJQVJnUkFJQUlnQ3pZQ0FBc2dDVUVCYWlFSklBSkJCR29oQWd3QUN3QUxJQVlnQlRzQkFDQUZJQXRPRFFWQkFDRUpJQXBCQUNBS1FRQktHeUVOSUFnaEFnTkFJQWtnRFVZTkJpQUxJQUlvQWdCR0JFQWdBaUFGTmdJQUN5QUpRUUZxSVFrZ0FrRUVhaUVDREFBTEFBc2dCa0VDYXk0QkFDSUxRUUZPQkVBZ0JFR1FnTWdBYWlJSklBSkJBblJxUVFScktBSUFJZ1VnQzBILy93TnhRUUowSUFscVFRUnJLQUlBSWd0S0JFQWdCaUFMT3dFQVFRQWhDU0FLUVFBZ0NrRUFTaHNoRFNBSUlRSURRQ0FKSUExR0JFQWdDeUVGREFjTElBVWdBaWdDQUVZRVFDQUNJQXMyQWdBTElBbEJBV29oQ1NBQ1FRUnFJUUlNQUFzQUN5QUdJQVU3QVFBZ0JTQUxUZzBFUVFBaENTQUtRUUFnQ2tFQVNoc2hEU0FJSVFJRFFDQUpJQTFHRFFVZ0N5QUNLQUlBUmdSQUlBSWdCVFlDQUFzZ0NVRUJhaUVKSUFKQkJHb2hBZ3dBQ3dBTElBWWdBanNCQUNBRUlBSkJCMnhCQW5ScUlnSkI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQUpCK1AvUEFHb2lCU0FGS0FJQUlBZHFOZ0lBSUFKQi9QL1BBR29pQlNBRktBSUFJQUJxTmdJQUlBY2dBa0dBZ05BQWFpSUZLQUlBU0FSQUlBVWdCellDQUFzZ0FrR01nTkFBYWlBQU5nSUFEQVVMSUFWQkFVNEVRQ0FHSUFVN0FRQWdCQ0FMUVFkc1FRSjBhaUlDUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBQ1Fmai96d0JxSWdVZ0JTZ0NBQ0FIYWpZQ0FDQUNRZnovendCcUlnVWdCU2dDQUNBQWFqWUNBQ0FISUFKQmhJRFFBR29pQlNnQ0FFb0VRQ0FGSUFjMkFnQUxJQUpCaklEUUFHb2dBRFlDQUF3RkN5QUdRUUpyTHdFQUlnSkJFSFJCRUhVaUJVRUJUZ1JBSUFZZ0JUc0JBQ0FFSUFKQkhHeHFJZ0pCOVAvUEFHb2lCU0FGS0FJQVFRRnFOZ0lBSUFKQitQL1BBR29pQlNBRktBSUFJQWRxTmdJQUlBSkIvUC9QQUdvaUJTQUZLQUlBSUFCcU5nSUFJQUpCaElEUUFHb2lBaWdDQUNBSFRnMEZJQUlnQnpZQ0FBd0ZDeUFLUVlDQUFrNEVRRUVBUVFOQjRBaEJBQkE0UVg4aEJRd0pDeUFHSUFwQkFXb2lBanNCQUNBRUlBcEJBblJxUVpDQXlBQnFJQUpCRUhSQkVIVTJBZ0FnQkNBS1FSeHNhaUlGUVpTQTBBQnFJQWMyQWdBZ0JVR1FnTkFBYWtFQk5nSUFJQVZCbUlEUUFHb2dBRFlDQUNBRlFaeUEwQUJxSUFjMkFnQWdCVUdnZ05BQWFpQUhOZ0lBSUFWQnBJRFFBR29nQURZQ0FDQUZRYWlBMEFCcUlBQTJBZ0FnQWlFS0RBUUxJQVpCQURzQkFBd0RDeUFHUVFScUlRWWdBRUVCYWlFQUlBRWdEbXBCQkdvaERnd0ZDeUFFSUFWQkVIUkJFSFZCSEd4cUlnSkI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQUpCK1AvUEFHb2lCU0FGS0FJQUlBZHFOZ0lBSUFKQi9QL1BBR29pQWlBQ0tBSUFJQUJxTmdJQURBRUxJQVFnQlVFUWRFRVFkVUVjYkdvaUFrR01nTkFBYWlBQU5nSUFJQUpCOVAvUEFHb2lCU0FGS0FJQVFRRnFOZ0lBSUFKQitQL1BBR29pQlNBRktBSUFJQWRxTmdJQUlBSkIvUC9QQUdvaUFpQUNLQUlBSUFCcU5nSUFDeUFHUVFKcUlRWWdEa0VDYWlFT0lBZEJBV29oQnd3QUN3QUxDeUFLUVFBZ0NrRUFTaHNpQTBFQmFpRUFRUUVoQWtFQklRWURRQ0FBSUFKR1JRUkFBa0FnQWlBSUtBSUFJZ0ZHQkVBZ0JpSUhRUUZxSVFZTUFRc2dBVUVDZENBRWFrR01nTWdBYWlnQ0FDRUhDeUFJSUFjMkFnQWdDRUVFYWlFSUlBSkJBV29oQWd3QkN3c2dCQ0FHUVFGcklnQTJBZ2dnQUVVRVFFRUFEd3RCQUNFSElBUkJER3BCQUNBQVFRSjBFRHNhSUFSQmtJQW9ha0VBSUFCQkJIUVFPeG9nQUVFQUlBQkJBRW9iSVFnZ0JFR01nQWhxSVFCQkFDRUNBMEFnQWlBSVJnUkFJQVJCa0lBb2FpRUJBMEFnQXlBSFJnUkFRUUFoQlNBRUtBSUlJZ0JCQUNBQVFRQktHeUVCSUFSQmtJQW9haUVBUVFBaEFnTkFJQUVnQWtZTkJTQUFJQUpCQkhRaUEyb2lDQ0FJS3dNQUlBUWdBa0VDZEdvb0FneTNJaE9qT1FNQUlBQWdBMEVJY21vaUF5QURLd01BSUJPak9RTUFJQUpCQVdvaEFnd0FDd0FMSUFRZ0JDQUhRUUowYWtHUWdNZ0FhaWdDQUVFQmF5SUNRUUowSWdocUlnQkJER29nQUNnQ0RDQUVJQWRCQjJ4QkFuUnFJZ0JCa0lEUUFHb29BZ0JxTmdJQUlBRWdBa0VFZENJQ2FpSUdJQVlyQXdBZ0FFR1VnTkFBYWlnQ0FMZWdPUU1BSUFFZ0FrRUljbW9pQmlBR0t3TUFJQUJCbUlEUUFHb29BZ0Mzb0RrREFDQUFRWnlBMEFCcUtBSUFJZ1lnQWlBRWFrR01nQWhxSWdJb0FnQklCRUFnQWlBR05nSUFDeUFBUWFDQTBBQnFLQUlBSWdZZ0JDQUlRUUowSWdKQkJISnFRWXlBQ0dvaUNDZ0NBRW9FUUNBSUlBWTJBZ0FMSUFCQnBJRFFBR29vQWdBaUNDQUVJQUpCQ0hKcVFZeUFDR29pQmlnQ0FFZ0VRQ0FHSUFnMkFnQUxJQUJCcUlEUUFHb29BZ0FpQUNBRUlBSkJESEpxUVl5QUNHb2lBaWdDQUVvRVFDQUNJQUEyQWdBTElBZEJBV29oQnd3QUN3QUZJQUFnQWtFRWRDSUJhaUFNTmdJQUlBQWdBVUVFY21wQkFEWUNBQ0FBSUFGQkNISnFJQTgyQWdBZ0FDQUJRUXh5YWtFQU5nSUFJQUpCQVdvaEFnd0JDd0FMQUFzZ0JRc3VBUUYvQTBBZ0FTQUFLQUlJUndSQUlBQW9BaEFhSUFBZ0FDZ0NDRUVnYXlJQ05nSUlJQUlROFFJTUFRc0xDeXdBSUFBb0FnQWFJQUFvQWdBZ0FCQ0pBa0VGZEdvYUlBQW9BZ0FnQUJDSkFrRUZkR29hSUFBb0FnQWFDeTRBQTBBZ0FTQUNSd1JBSUFNb0FnQkJJR3NnQWtFZ2F5SUNFSzBJSUFNZ0F5Z0NBRUVnYXpZQ0FBd0JDd3NMS3dFQmZ5QUFJQUVvQWdBMkFnQWdBU2dDQUNFRElBQWdBVFlDQ0NBQUlBTWdBa0VGZEdvMkFnUWdBQXRDQVFGL0l3QkJFR3NpQVNRQUlBQVFOQm9nQVVILy8vOC9OZ0lNSUFGQi8vLy8vd2MyQWdnZ0FVRU1haUFCUVFocUVNSUJLQUlBSVFBZ0FVRVFhaVFBSUFBTEpBQWdBQ0FCTmdJQUlBQWdBU2dDQkNJQk5nSUVJQUFnQVNBQ1FRVjBhallDQ0NBQUN5d0FJQUFvQWdBYUlBQW9BZ0FnQUJDSkFrRUZkR29hSUFBb0FnQWFJQUFvQWdBZ0FCQ2tBVUVGZEdvYUMvUUJBZ04vQjMwZ0FDQUJFT29EUVFCSUJFQkJmdzhMUVFFaEFVRUJJUU1EUUNBSUlBQWdBVUVDZEdvb0Fnd2dBV3l6a2lFSUlBRkJBV29oQVNBRFFmOEJjVUVCYWlJRFFmOEJjU0FEUmcwQUN5QUFLQUlJSUFBb0FnUnNzaUVMUVFBaEFVRUFJUU1EUUFKQUlBWWdBQ0FCUVFKMGFpZ0NEQ0lGczVJaUJrTUFBQUFBWEFSQUlBc2dCcE1pQjBNQUFBQUFXdzBCSUFrZ0FTQUZiTE9TSWdrZ0JwVWdDQ0FKa3lBSGxaTWlEQ0FNSUFZZ0I1U1VsQ0lISUFvZ0J5QUtYaUlGR3lFS0lBRWdCQ0FGR3lFRUN5QUJRUUZxSVFFZ0EwSC9BWEZCQVdvaUEwSC9BWEVnQTBZTkFRc0xJQUlnQkRvQUFFRUFDMUVCQVg4Z0FCRExCU0FBRURRZ0FDZ0NBQ0FBS0FJRUlBRkJCR29pQWhDakNpQUFJQUlRU1NBQVFRUnFJQUZCQ0dvUVNTQUFFRFFnQVJBOUVFa2dBU0FCS0FJRU5nSUFJQUFnQUJDa0FSQ2lDZ3RaQVFKL0l3QkJFR3NpQWlRQUlBSWdBRUVJYWlBQkVLUUtJZ0VvQWdBaEF3TkFJQUVvQWdRZ0EwY0VRQ0FBS0FJUUdpQUJLQUlBRU5nRUlBRWdBU2dDQUVFZ2FpSUROZ0lBREFFTEN5QUJFTFlCSUFKQkVHb2tBQXQvQVFKL0l3QkJFR3NpQkNRQUlBUkJBRFlDRENBQVFReHFJQVJCREdvZ0F4Q3hBU0FCQkVBZ0FDZ0NFQm9nQVVILy8vOC9Td1JBUWJEVUFSQ1BBUUFMSUFGQkJYUVFTeUVGQ3lBQUlBVTJBZ0FnQUNBRklBSkJCWFJxSWdJMkFnZ2dBQ0FDTmdJRUlBQVFQU0FGSUFGQkJYUnFOZ0lBSUFSQkVHb2tBQ0FBQzFvQkFuOGpBRUVRYXlJQ0pBQWdBaUFCTmdJTUlBRWdBQkNsQ2lJRFRRUkFJQUFRaVFJaUFDQURRUUYyU1FSQUlBSWdBRUVCZERZQ0NDQUNRUWhxSUFKQkRHb1FmU2dDQUNFREN5QUNRUkJxSkFBZ0F3OExFSlFCQUF0VUFRSi9Jd0JCRUdzaUFpUUFJQUlnQUNBQkVLWUtJZ0VvQWdRaEF3TkFJQUVvQWdnZ0EwY0VRQ0FBRURRYUlBRW9BZ1FRMkFRZ0FTQUJLQUlFUVNCcUlnTTJBZ1FNQVFzTElBRVFkaUFDUVJCcUpBQUxsZ2NDQkgwRGZ3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDZnlBRWkwTUFBQUJQWFFSQUlBU29EQUVMUVlDQWdJQjRDd0ovSUFTT0lnYUxRd0FBQUU5ZEJFQWdCcWdNQVF0QmdJQ0FnSGdMSWdwR0JFQUNmeUFGaTBNQUFBQlBYUVJBSUFXb0RBRUxRWUNBZ0lCNEN5RU1JQXdDZnlBRmppSUdpME1BQUFCUFhRUkFJQWFvREFFTFFZQ0FnSUI0Q3lJTFJ3MEJJQXRCQUVnZ0FpQUxUWElOQWlBQ0lBdEJBV29pREUwTkF5QUtRUUJJSUFFZ0NrMXlEUVFnQVNBS1FRRnFJZ0pORFFVZ0FySWdCSk1pQnlBTXNpQUZreUlJbENJR1F3QUFBQUJnUVFGeklBYTdSSEdzaTl0b0FQQS9aVVZ5RFFZZ0JDQUtzcE1pQ1NBSWxDSUVRd0FBQUFCZ1FRRnpJQVM3UkhHc2k5dG9BUEEvWlVWeURRY2dCeUFGSUF1eWt5SUhsQ0lGUXdBQUFBQmdRUUZ6SUFXN1JIR3NpOXRvQVBBL1pVVnlEUWdnQ1NBSGxDSUhRd0FBQUFCZ1FRRnpJQWU3UkhHc2k5dG9BUEEvWlVWeURRa2dCeUFGSUFZZ0JKS1NrcnRFY2F5TDIyZ0E4RDlsUlEwS0lBWWdBQ0FESUF0c2FpSUFJQXBCQW5RaUFXb3FBZ0NVSUFRZ0FDQUNRUUowSWdKcUtnSUFsSklnQlNBQUlBTnFJZ0FnQVdvcUFnQ1VraUFISUFBZ0Ftb3FBZ0NVa2c4TFFjQ1hCRUh2MXdFUU1rRzIyQUVRTWtIeUpCQXlRY1VBRURaQitpa1FNa0hQMlFFUU1oQTFEQW9MUWNDWEJFR08yZ0VRTWtHMjJBRVFNa0h5SkJBeVFjWUFFRFpCK2lrUU1rSFAyUUVRTWhBMURBa0xRY0NYQkVIQzJnRVFNa0cyMkFFUU1rSHlKQkF5UWM4QUVEWkIraWtRTWtIdzJnRVFNaEExREFnTFFjQ1hCRUdCMndFUU1rRzIyQUVRTWtIeUpCQXlRZEFBRURaQitpa1FNa0c5MndFUU1oQTFEQWNMUWNDWEJFSFYyd0VRTWtHMjJBRVFNa0h5SkJBeVFkRUFFRFpCK2lrUU1rR0MzQUVRTWhBMURBWUxRY0NYQkVHVDNBRVFNa0cyMkFFUU1rSHlKQkF5UWRJQUVEWkIraWtRTWtITzNBRVFNaEExREFVTFFjQ1hCRUhtM0FFUU1rRzIyQUVRTWtIeUpCQXlRZDRBRURaQitpa1FNa0dWM1FFUU1oQTFEQVFMUWNDWEJFR2kzUUVRTWtHMjJBRVFNa0h5SkJBeVFkOEFFRFpCK2lrUU1rR1YzUUVRTWhBMURBTUxRY0NYQkVIUjNRRVFNa0cyMkFFUU1rSHlKQkF5UWVBQUVEWkIraWtRTWtHVjNRRVFNaEExREFJTFFjQ1hCRUdBM2dFUU1rRzIyQUVRTWtIeUpCQXlRZUVBRURaQitpa1FNa0dWM1FFUU1oQTFEQUVMUWNDWEJFR3YzZ0VRTWtHMjJBRVFNa0h5SkJBeVFlSUFFRFpCK2lrUU1rR1YzUUVRTWhBMUN4QUFBQXNsQUFOQUlBRWdBQ2dDQ0VjRVFDQUFLQUlRR2lBQUlBQW9BZ2hCSkdzMkFnZ01BUXNMQ3l3QUlBQW9BZ0FhSUFBb0FnQWdBQkR0QVVFa2JHb2FJQUFvQWdBZ0FCRHRBVUVrYkdvYUlBQW9BZ0FhQ3kwQUlBTWdBeWdDQUNBQ0lBRnJJZ0JCWEcxQkpHeHFJZ0kyQWdBZ0FFRUJUZ1JBSUFJZ0FTQUFFRDhhQ3d1c0FRSUVmd0Y5SUFBZ0FSQzFDaUlEUVFCT0JIOENmeUFBS0FJSUlBQW9BZ1Jzc2tNQUFBQS9sQ0lIUXdBQWdFOWRJQWREQUFBQUFHQnhCRUFnQjZrTUFRdEJBQXNoQkFOQUlBVWlBMEVCYWlFRklBQWdBMEgvQVhFaUJrRUNkR3BCakFocUtBSUFJZ0VnQkVrTkFBc0RRQ0FCSUFSR0JFQWdBQ0FEUVFGcUlnTkIvd0Z4UVFKMGFrR01DR29vQWdBaEFRd0JDd3NnQWlBRFFmOEJjU0FHYWtFQmRqb0FBRUVBQlNBREN3djNCd0VCZnlNQVFVQnFJZ01rQUNBRElBRTJBakFnQXlBQU5nSTRJQU1nQWpZQ0tBTkFBa0FnQTBFd2FpQURRU2hxRU1FQkRRQUNRQUpBQWtBZ0EwRW9haUFEUVRocUVJQURJZ0FPQkFNREFBRUNDeUFEUVNocUVNNEJLQUlBSUFNb0FqZ1FqZ0ZGRFFJZ0F5Z0NPQ0FES0FJb0VMQUJEQUlMSUFNZ0F5Z0NPQ0lBTmdJZ0lBQWdBMEVnYWhDaEFTZ0NBQ0FEUVNocUVNNEJLQUlBRUxFRkdnd0JDeUFBUVFkTUJFQWdBeWdDT0NBREtBSW9FSkFLREFFTElBTWdBMEU0YWlBQVFRRjJFTzRCSWdBMkFpQWdBeUFES0FJb05nSVlJQU1vQWpnZ0FDQURRUmhxRU00QktBSUFFTEVGSVFJZ0F5QURLQUk0TmdJUUlBTWdBeWdDR0RZQ0NBSkFJQU1vQWhBZ0F5Z0NJQkNPQVVVRVFBTkFJQU5CRUdvZ0EwRUlhaERPQVJEQkFRUkFJQU5CRUdvUW9RRWFJQU1nQXlnQ0tEWUNDQ0FES0FJNElBTkJDR29RemdFb0FnQVFqZ0VOQXdOQUlBTkJFR29nQTBFSWFoREJBUTBGSUFNb0FqZ2dBeWdDRUJDT0FRUkFJQU1vQWhBZ0F5Z0NDQkN3QVNBRFFSQnFFS0VCR2d3RkJTQURRUkJxRUtFQkdnd0JDd0FMQUFzZ0F5Z0NDQ0FES0FJZ0VJNEJSUTBBQ3lBREtBSVFJQU1vQWdnUXNBRWdBa0VCYWlFQ0N5QURRUkJxRUtFQkdnSkFJQU5CRUdvZ0EwRUlhaER4QVVVTkFBTkFJQU1vQWhBZ0F5Z0NJQkNPQVFSQUlBTkJFR29Rb1FFYURBRUxBMEFnQTBFSWFoRE9BU2dDQUNBREtBSWdFSTRCUlEwQUN5QURRUkJxSUFOQkNHb1FzQVVOQVNBREtBSVFJQU1vQWdnUXNBRWdBMEVnYWlBRFFSQnFFTUVCQkVBZ0F5QURLQUlJTmdJZ0N5QUNRUUZxSVFJZ0EwRVFhaENoQVJvTUFBc0FDd0pBSUFOQkVHb2dBMEVnYWhCOFJRMEFJQU1vQWlBZ0F5Z0NFQkNPQVVVTkFDQURLQUlRSUFNb0FpQVFzQUVnQWtFQmFpRUNDeUFEUVRCcUlBTkJFR29Rd1FFTkFRSkFJQUlOQUNBRFFUQnFJQU5CRUdvUThRRUVRQ0FESUFNb0FqZ2lBRFlDSUNBRElBQTJBZ2dEUUNBRFFRaHFFS0VCSUFOQkVHb1FmRVVOQkNBREtBSUlJQU1vQWlBUWpnRU5BaUFESUFNb0FnZzJBaUFNQUFzQUN5QURJQU1vQWhBaUFEWUNJQ0FESUFBMkFnZ0RRQ0FEUVFocUVLRUJJQU5CS0dvUWZFVU5BeUFES0FJSUlBTW9BaUFRamdFTkFTQURJQU1vQWdnMkFpQU1BQXNBQ3lBRFFUQnFJQU5CRUdvUThRRUVRQ0FESUFNb0FoQTJBaWdNQXdzZ0F5QURRUkJxRUtFQktBSUFOZ0k0REFJTElBTkJFR29nQTBFSWFoREJBUTBBQTBBQ1FDQURLQUk0SUFNb0FoQVFqZ0VFUUFOQUlBTW9BamdnQTBFSWFoRE9BU2dDQUJDT0FRMEFDeUFEUVJCcUlBTkJDR29Rc0FVTkFTQURLQUlRSUFNb0FnZ1FzQUVMSUFOQkVHb1FvUUVhREFFTEN5QURRVEJxSUFOQkVHb1E4UUVOQUNBRElBTW9BaEEyQWpnTUFRc0xJQU5CUUdza0FBdFhBUUovSXdCQklHc2lBeVFBSUFBUU5DSUNJQU5CQ0dvZ0FDQUFFRVpCQVdvUWhBTWdBQkJHSUFJUWtnb2lBaWdDQ0NBQkVNOENJQUlnQWlnQ0NFRUlhallDQ0NBQUlBSVFnd01nQWhDQ0F5QURRU0JxSkFBTFV3RURmeUFBSUFFUTZnTkJBRWdFUUVGL0R3dEJBQ0VCQTBBZ0FDQUNRUUowYWlJRVFZd0lhaUFFS0FJTUlBTnFJZ00yQWdBZ0FrRUJhaUVDSUFGQi93RnhRUUZxSWdGQi93RnhJQUZHRFFBTFFRQUxhd0VDZnlNQVFTQnJJZ01rQUFKQUlBRWdBQkEwS0FJQUlBQW9BZ1JyUVNSdFRRUkFJQUFnQVJDVkNnd0JDeUFBRURRaEFpQURRUWhxSUFBZ0FCQ0ZBU0FCYWhDM0JTQUFFSVVCSUFJUTZRTWlBaUFCRUpRS0lBQWdBaERvQXlBQ0VPY0RDeUFEUVNCcUpBQUxlZ0FnQUNBQktnSUFJQUlxQWdDVUlBRXFBZ1FnQWlvQ0JKU1NJQUVxQWdnZ0Fpb0NDSlNTT0FJQUlBQWdBU29DRENBQ0tnSUFsQ0FCS2dJUUlBSXFBZ1NVa2lBQktnSVVJQUlxQWdpVWtqZ0NCQ0FBSUFFcUFoZ2dBaW9DQUpRZ0FTb0NIQ0FDS2dJRWxKSWdBU29DSUNBQ0tnSUlsSkk0QWdnTDdRRUNBWDBCZnlBQ0lBRVFsZ29pQTR0Z0lnUkZCRUFnQUVNQUFJQS9JQU9WSWdJZ0FTb0NFQ0FCS2dJVUlBRXFBaUFRM2dPVU9BSUFJQUFnQWlBQktnSUlJQUVxQWdRZ0FTb0NJQ0FCS2dJY0VLSUJsRGdDQkNBQUlBSWdBU29DQkNBQktnSUlJQUVxQWhBZ0FTb0NGQkNpQVpRNEFnZ2dBQ0FDSUFFcUFnQWdBU29DQ0NBQktnSWdFTjREbERnQ0VDQUFJQUlnQVNvQ0NDQUJLZ0lBSUFFcUFoUWdBU29DREJDaUFaUTRBaFFnQUNBQ0lBRXFBZ0FnQVNvQ0JDQUJLZ0lRRU40RGxEZ0NJQ0FBSUFBcUFnUTRBZ3dnQUNBQUtnSUlPQUlZSUFBZ0FDb0NGRGdDSEFzZ0JFRUJjd3V5QmdJRmZ3eDlJd0JCSUdzaUJ5UUFBa0FDUUFKQUFrQUNRQUpBQWtBZ0JVRUJTQTBBSUFNb0FnUWdCVUVCYWswTkFDQUdRUUZJRFFFZ0JrRUJhaUlJSUFNb0FnaFBEUUVnQXlnQ0JDQUNLQUlFUVFGMlJ3MENJQVFvQWdRZ0FpZ0NCRUVCZGtjTkF5QURLQUlJSUFJb0FnaEJBWFpIRFFRZ0JDZ0NDQ0FDS0FJSVFRRjJSdzBGSUFNZ0JoQk5JUWtnQkNBR1FRRnJFRTBoQ2lBRUlBWVFUU0VMSUFRZ0NCQk5JUWdnQjBFY2FpQUhRUmhxSUFXeUlBYXlRUUVRMXdJZ0IwRVVhaUFIUVJCcUlBZEJER29nQjBFSWFpQUhRUVJxSUFNZ0JTQUdFT1VESUFJZ0J5b0NIQ0FIS2dJWUVFY2hEeUFMSUFWQkFuUWlBMm9pQkNvQ0FDRVFJQU1nQ1dvcUFnQWhEQ0FDSUFjcUFoeERBQUFBd0pJZ0J5b0NHQkJISVEwZ0JDb0NCQ0VPSUFJZ0J5b0NIRU1BQUFCQWtpQUhLZ0lZRUVjaEVTQUVRUVJyS2dJQUlSSWdBaUFIS2dJY0lBY3FBaGhEQUFBQXdKSVFSeUVUSUFNZ0NHb3FBZ0FoRkNBQ0lBY3FBaHdnQnlvQ0dFTUFBQUJBa2hCSElSVWdBeUFLYWlvQ0FDRVdJQUFnQnlvQ0REZ0NBQ0FBSUFjcUFnUWlGemdDRENBQUlBMGdEcElnRVNBU2twTkRBQUNBUHBRaURUZ0NDQ0FBSUJjNEFnUWdCeW9DQ0NFT0lBQWdFQ0FQSUF3Z0RKS1RramdDSUNBQUlCTWdGSklnRlNBV2twTkRBQUNBUHBRaUREZ0NIQ0FBSUEwNEFoZ2dBQ0FNT0FJVUlBQWdEamdDRUNBQklBY3FBaFNNT0FJQUlBY3FBaEFoRENBQklCQWdENU5EQUFBQXY1UTRBZ2dnQVNBTWpEZ0NCQ0FIUVNCcUpBQVBDMEhBbHdSQm5NUUJFREpCNDdzQkVESkI4aVFRTWtIbkFoQTJRZm9wRURKQjRjVUJFRElRTlF3RkMwSEFsd1JCZzhZQkVESkI0N3NCRURKQjhpUVFNa0hvQWhBMlFmb3BFREpCNXNZQkVESVFOUXdFQzBIQWx3UkJ5TklCRURKQjQ3c0JFREpCOGlRUU1rSHBBaEEyUWZvcEVESkIzY2NCRURJUU5Rd0RDMEhBbHdSQjJzc0JFREpCNDdzQkVESkI4aVFRTWtIcUFoQTJRZm9wRURKQjNjY0JFRElRTlF3Q0MwSEFsd1JCdjlNQkVESkI0N3NCRURKQjhpUVFNa0hyQWhBMlFmb3BFREpCM2NjQkVESVFOUXdCQzBIQWx3UkJ3OHdCRURKQjQ3c0JFREpCOGlRUU1rSHNBaEEyUWZvcEVESkIzY2NCRURJUU5Rc1FBQUFMc0FnQ0JIOE1mU01BUVNCcklnY2tBQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0JVRUJTQTBBSUFNb0FnUWdCVUVCYWswTkFDQUdRUUZJRFFFZ0JrRUJhaUlJSUFNb0FnaFBEUUVnQWlnQ0JDQURLQUlFUncwQ0lBUW9BZ1FnQWlnQ0JFRUJka2NOQXlBQ0tBSUlJQU1vQWdoSERRUWdCQ2dDQ0NBQ0tBSUlRUUYyUncwRklBSWdCa0VCYXhCTklRa2dBaUFHRUUwaENpQUNJQWdRVFNFSUlBTWdCaEJOSVFJZ0IwRWNhaUFIUVJocUlBV3lJQWF5UVFFUTZ3TWdCeW9DSENJTFF3QUFBTCtTUXdBQUFBQmdSUTBHSUFjcUFoaERBQUFBdjVKREFBQUFBR0JGRFFjZ0JDZ0NCTE1nQzBNQUFBQS9rbDVGRFFnZ0JDZ0NDTE1nQnlvQ0dFTUFBQUEva2w1RkRRa2dCMEVVYWlBSFFSQnFJQWRCREdvZ0IwRUlhaUFIUVFScUlBTWdCU0FHRU9VRElBUWdCeW9DSENBSEtnSVlFRWNoRGlBQ0lBVkJBblFpQTJvcUFnQWhEeUFLSUFWQkFuUnFJZ0pCQkdzcUFnQWhFU0FDS2dJQUlSQWdCQ0FIS2dJY1F3QUFBRCtTSUFjcUFoZ1FSeUVTSUFJcUFnUWhEQ0FFSUFjcUFoeERBQUFBdjVJZ0J5b0NHQkJISVEwZ0F5QUphaW9DQUNFVElBUWdCeW9DSENBSEtnSVlRd0FBQUQrU0VFY2hGQ0FESUFocUtnSUFJUlVnQkNBSEtnSWNJQWNxQWhoREFBQUF2NUlRUnlFV0lBQWdCeW9DRERnQ0FDQUFJQWNxQWdRaUN6Z0NEQ0FBSUJFZ0VwSWdEQ0FOa3BOREFBQ0FQcFFpRERnQ0NDQUFJQXM0QWdRZ0J5b0NDQ0VOSUFBZ0RpQVFJQThnRDVLVGtqZ0NJQ0FBSUJNZ0ZKSWdGU0FXa3BOREFBQ0FQcFFpQ3pnQ0hDQUFJQXc0QWhnZ0FDQUxPQUlVSUFBZ0RUZ0NFQ0FCSUFjcUFoU01PQUlBSUFjcUFoQWhDeUFCSUE0Z0VKTkRBQUFBdjVRNEFnZ2dBU0FMakRnQ0JDQUhRU0JxSkFBUEMwSEFsd1JCbk1RQkVESkI0N3NCRURKQjhpUVFNa0dkQXhBMlFmb3BFREpCNGNVQkVESVFOUXdKQzBIQWx3UkJnOFlCRURKQjQ3c0JFREpCOGlRUU1rR2VBeEEyUWZvcEVESkI1c1lCRURJUU5Rd0lDMEhBbHdSQmw4Y0JFREpCNDdzQkVESkI4aVFRTWtHZkF4QTJRZm9wRURKQjNjY0JFRElRTlF3SEMwSEFsd1JCMnNzQkVESkI0N3NCRURKQjhpUVFNa0dnQXhBMlFmb3BFREpCM2NjQkVESVFOUXdHQzBIQWx3UkIvTWdCRURKQjQ3c0JFREpCOGlRUU1rR2hBeEEyUWZvcEVESkIzY2NCRURJUU5Rd0ZDMEhBbHdSQnc4d0JFREpCNDdzQkVESkI4aVFRTWtHaUF4QTJRZm9wRURKQjNjY0JFRElRTlF3RUMwSEFsd1JCcDgwQkVESkI0N3NCRURKQjhpUVFNa0dzQXhBMlFmb3BFREpCOHMwQkVESVFOUXdEQzBIQWx3UkI0czRCRURKQjQ3c0JFREpCOGlRUU1rR3RBeEEyUWZvcEVESkJuZEFCRURJUU5Rd0NDMEhBbHdSQmhkRUJFREpCNDdzQkVESkI4aVFRTWtHdUF4QTJRZm9wRURKQjhzMEJFRElRTlF3QkMwSEFsd1JCNnRFQkVESkI0N3NCRURKQjhpUVFNa0d2QXhBMlFmb3BFREpCbmRBQkVESVFOUXNRQUFBTDlBVUNDSDhNZlNNQVFTQnJJZ2NrQUFKQUFrQUNRQUpBQWtBQ1FBSkFJQVZCQVVnTkFDQURLQUlFSUFWQkFXcE5EUUFnQmtFQlNBMEJJQVpCQVdvaUNTQURLQUlJVHcwQklBSW9BZ1FnQXlnQ0JFY05BaUFDS0FJRUlBUW9BZ1JIRFFNZ0FpZ0NDQ0FES0FJSVJ3MEVJQUlvQWdnZ0JDZ0NDRWNOQlNBQ0lBWkJBV3NpQ0JCTklRb2dBaUFHRUUwaEN5QUNJQWtRVFNFTUlBTWdCaEJOSVEwZ0JDQUlFRTBoQ0NBRUlBWVFUU0VPSUFRZ0NSQk5JUVFnQjBFY2FpQUhRUmhxSUFkQkZHb2dCMEVRYWlBSFFReHFJQU1nQlNBR0VPVURJQXdnQlVFQ2RDSUNhaW9DQUNFVUlBSWdDbW9xQWdBaEZTQUNJQVJxS2dJQUlSWWdBaUFJYWlvQ0FDRVhJQUlnRG1vaUF5b0NBQ0VTSUFJZ0Myb2lCQ29DQUNFVElBSWdEV29xQWdBaER5QUVLZ0lFSVJBZ0JFRUVheW9DQUNFUklBTXFBZ1FoR0NBRFFRUnJLZ0lBSVJrZ0FDQUhLZ0lVT0FJQUlBQWdCeW9DRENJYU9BSU1JQUFnR2pnQ0JDQUFJQkVnRUpNZ0dDQVprNUpEQUFDQVBwUWlFRGdDQ0NBSEtnSVFJUkVnQUNBU0lCTWdEeUFQa3BPU09BSWdJQUFnRlNBVWt5QVdJQmVUa2tNQUFJQStsQ0lQT0FJY0lBQWdFRGdDR0NBQUlBODRBaFFnQUNBUk9BSVFJQUVnQnlvQ0hJdzRBZ0FnQnlvQ0dDRVBJQUVnRWlBVGswTUFBQUMvbERnQ0NDQUJJQStNT0FJRUlBZEJJR29rQUE4TFFjQ1hCRUdjeEFFUU1rSGp1d0VRTWtIeUpCQXlRYlVDRURaQitpa1FNa0hoeFFFUU1oQTFEQVVMUWNDWEJFR0R4Z0VRTWtIanV3RVFNa0h5SkJBeVFiWUNFRFpCK2lrUU1rSG14Z0VRTWhBMURBUUxRY0NYQkVHWHh3RVFNa0hqdXdFUU1rSHlKQkF5UWJjQ0VEWkIraWtRTWtIZHh3RVFNaEExREFNTFFjQ1hCRUdqeUFFUU1rSGp1d0VRTWtIeUpCQXlRYmdDRURaQitpa1FNa0hkeHdFUU1oQTFEQUlMUWNDWEJFSDh5QUVRTWtIanV3RVFNa0h5SkJBeVFia0NFRFpCK2lrUU1rSGR4d0VRTWhBMURBRUxRY0NYQkVISXlRRVFNa0hqdXdFUU1rSHlKQkF5UWJvQ0VEWkIraWtRTWtIZHh3RVFNaEExQ3hBQUFBc2hBQ0FBS0FJRUlBQVFOQ2dDQUVrRVFDQUFJQUVRaVFNUEN5QUFJQUVRdEFvTFdRRUNmeU1BUVNCcklnTWtBQ0FBRURRaUFpQURRUWhxSUFBZ0FCQ0ZBVUVCYWhDM0JTQUFFSVVCSUFJUTZRTWlBaWdDQ0NBQkVMZ0ZJQUlnQWlnQ0NFRWthallDQ0NBQUlBSVE2QU1nQWhEbkF5QURRU0JxSkFBTFBnRUNmeU1BUVJCcklnTWtBQ0FESUFCQkFSQzVCU0VDSUFBUU5DQUNLQUlFSUFFUXVBVWdBaUFDS0FJRVFTUnFOZ0lFSUFJUWRpQURRUkJxSkFBTFFnRUJmU0FBUXdBQWdEOUJBU0FHZExLVklnY2dBNVFnQjBNQUFBQS9sRU1BQUFDL2tpSURramdDQUNBQklBY2dCSlFnQTVJNEFnQWdBaUFISUFXVU9BSUFDNW9GQWdWL0EzMGpBRUVnYXlJSUpBQWdCYklnQTdLVmpTRU5JQWF5SUFTeWxZMGhEaUFCRU8wRElBRWdCeER6QXlBRElBUnNJUVZCQUNFRUEwQkJBQ0VESUFBUVZ5QUVUUVJBSUFjZ0JXMGhDUUovSUE2TFF3QUFBRTlkQkVBZ0RxZ01BUXRCZ0lDQWdIZ0xzaUVPQW44Z0RZdERBQUFBVDEwRVFDQU5xQXdCQzBHQWdJQ0FlQXV5SVEwRFFDQUlJQU0yQWh3Z0FoQ0ZBU0FEVFFSQVFRQWhCZ05BUVFBaEJTQUFFRmNnQmswRVFDQUlRU0JxSkFBUEN3TkFJQUFnQmhDY0FSQlhJQVZOQkVBZ0JrRUJhaUVHREFJTElBZ2dBQ0FHRUp3QklBVVFuQUVpQkJCR05nSVFJQWdnQ1RZQ0hBSkFJQWhCRUdvZ0NFRWNhaERDQVNnQ0FDSUhSUTBBSUFRUXJ3SWhBeUFJSUFRUXJ3STJBaEFnQ0VFUWFpQUhFTzRCSVFvZ0JCRFVBaUVMSXdCQkVHc2lEQ1FBSUFNZ0NpQUxFTE1LSUF4QkVHb2tBQUpBSUFRUVJpQUhUdzBBSUFSQkFCQlFLZ0lBSUFRZ0J4QlFLZ0lBWUEwQVFjQ1hCRUgrdGdFUU1rSEtHQkF5UWZJa0VESkJsUVVRTmtINktSQXlRZEMzQVJBeUVEVVFBQUFMUVFBaEF3TkFJQU1nQjBZTkFTQUJJQUlnQkNBREVGQW9BZ1FRb3dFUTFnSWdBMEVCYWlFRERBQUxBQXNnQlVFQmFpRUZEQUFMQUFzQUJRSi9JQUlnQ0NnQ0hCQ2pBU0lES2dJRUlBNlZJZytMUXdBQUFFOWRCRUFnRDZnTUFRdEJnSUNBZ0hnTElRUWdBQUovSUFNcUFnQWdEWlVpRDR0REFBQUFUMTBFUUNBUHFBd0JDMEdBZ0lDQWVBc1FuQUVnQkJDY0FTRUVJQWdnQXlvQ0dJczRBZ3dnQ0NBSVFReHFLZ0lBT0FJUUlBZ2dDRUVjYWlnQ0FEWUNGQ0FFSUFoQkVHb1F2QW9nQ0NnQ0hFRUJhaUVEREFFTEFBc0FCUU5BSUFBZ0JCQ2NBUkJYSUFOTEJFQWdBQ0FFRUp3QklBTVFuQUVRaXdJZ0EwRUJhaUVEREFFTEN5QUVRUUZxSVFRTUFRc0FDd0FMUmdFQmZ5QUJJQUFRaFFFaUFrc0VRQ0FBSUFFZ0Ftc1F0Z29QQ3lBQklBSkpCRUFnQUNnQ0FDQUJRU1JzYWlFQklBQVFoUUVoQWlBQUlBRVF4Z1VnQUNBQ0VOQUZDd3MvQVFGOUlBRXFBZ0FnQVNvQ0VKUWdBU29DQkJCdWt5SUNRd0FBQUFCY0JFQWdBQ0FCS2dJQUlBRXFBaENTRUc0Z0FwVTRBZ0FMSUFKREFBQUFBRndMTUFFQmZ5TUFRVEJySWdNa0FDQURJQUZEQUFBQU5CQzRDaUlCQkVBZ0FDQURJQUlRdHdvTElBTkJNR29rQUNBQkM1RURBQUpBQWtBQ1FBSkFBa0FnQkNnQ0JDQUNLQUlFSUFNb0FnUkdSZ1JBSUFRb0FnZ2dBaWdDQ0NBREtBSUlSa2NOQWlBQUlBRWdBaUFESUFRZ0JTQUdFTHNLREFFTEFrQWdBaWdDQkNBREtBSUVSdzBBSUFRb0FnUWdBeWdDQkVFQmRrY05BQ0FDS0FJSUlBTW9BZ2hIRFFNZ0JDZ0NDQ0FES0FJSVFRRjJSdzBESUFBZ0FTQUNJQU1nQkNBRklBWVF1Z29NQVFzZ0F5Z0NCQ0FDS0FJRVFRRjJSdzBFSUFNb0FnUWdCQ2dDQkVjTkJDQURLQUlFSUFJb0FnUkJBWFpIRFFNZ0F5Z0NCQ0FFS0FJRVJ3MERJQUFnQVNBQ0lBTWdCQ0FGSUFZUXVRb0xRUUVQQzBIQWx3UkJrOEFCRURKQjQ3c0JFREpCOGlRUU1rSFNBeEEyUWZvcEVESkI3c0FCRURJUU5SQUFBQXRCd0pjRVFiREJBUkF5UWVPN0FSQXlRZklrRURKQjFRTVFOa0g2S1JBeVFlN0FBUkF5RURVUUFBQUxRY0NYQkVHbndnRVFNa0hqdXdFUU1rSHlKQkF5UWRnREVEWkIraWtRTWtIdXdBRVFNaEExRUFBQUMwSEFsd1JCc3NNQkVESkI0N3NCRURKQjhpUVFNa0hiQXhBMlFmb3BFREpCM3NNQkVESVFOUkFBQUFzbEFRRi9RWkFRRURvaUFnUkFJQUlnQVRZQ0NDQUNJQUEyQWdRZ0FrRUFOZ0lBQ3lBQ0Myb0JBWDBnQUJDa0FTQUJTd1JBSUFCQkFCQk1LQUlFSUFBZ0FSQk1LQUlFYnJNUXp3VVF6Z1VpQW90REFBQUFUMTBFUUNBQ3FBOExRWUNBZ0lCNER3dEJ3SmNFUWUyNkFSQXlRZU83QVJBeVFmSWtFREpCM2dBUU5rSDZLUkF5UWY2OUFSQXlFRFVRQUFBTG53TUJCbjhqQUVGQWFpSUNKQUFDUUNBQUxRQWNSUVJBSUFCQlBHb2hBVUVBSVFBRFFDQUJFSVVCSUFCTkRRSWdBU0FBRUtNQlFRQTJBZ2dnQUVFQmFpRUFEQUFMQUFzZ0FFSElBR29pQlJEdEF5QUZJQUJCUEdvaUF4Q0ZBVUVrYkJEekF5QUFRZHdBYWlJSElBRVE3d2tnQUVHUUFXb2hCZ05BSUFNUWhRRWdCRTBFUUNBRElBVVFpZ01NQWdzZ0FrRTRhaUFDUVRScUlBSkJNR29nQXlBRUVLTUJLZ0lBSUFNZ0JCQ2pBU29DQkNBRElBUVFvd0VxQWh3Z0F5QUVFS01CS0FJTUVMOEtRUUFoQUNBQ0lBSXFBamdnQVNBRElBUVFvd0VvQWd4QkFCRHZBU2dDQkVFQmE3TVExUUk0QWpnZ0FpQUNLZ0kwSUFFZ0F5QUVFS01CS0FJTVFRQVE3d0VvQWdoQkFXdXpFTlVDT0FJMElBY2dCa0VBRUR3Z0FrRThhaUFESUFRUW93RW9BZ3dnQXlBRUVLTUJLQUlRSUFJcUFqZ2dBaW9DTkNBQ0tnSXdFTzRKQTBBZ0FpZ0NQQ0FBVEFSQUlBUkJBV29oQkF3Q0JTQUNRUWhxSUFNZ0JCQ2pBVUVrRUQ4YUlBSWdCaUFBRUR3cUFnQTRBaEFnQlNBQ1FRaHFFTllDSUFCQkFXb2hBQXdCQ3dBTEFBc0FDeUFDUVVCckpBQUxqUUlCQTM4akFFRVFheUlESkFBQ1FBSkFBa0FnQUVFOGFpSUNFSVVCSUFBb0FsUkxCRUFnQUVFUWFpSUJFRmNnQUNnQ0NFY05BU0FCUVFBUW5BRVFWeUFBS0FJTVJ3MENJQUVnQXhCT0lnRWdBaUFBS0FJSUlBQW9BZ3dnQUNnQ0FDQUFLQUlFSUFBb0FsUVF3QW9nQWlBQkVJb0RJQUlRaFFFZ0FDZ0NWRXNOQXlBQkVQRURDeUFEUVJCcUpBQVBDMEhBbHdSQnk2Y0JFREpCeWhnUU1rSHlKQkF5UWNZREVEWkIraWtRTWtIU3FnRVFNaEExRUFBQUMwSEFsd1JCbWEwQkVESkJ5aGdRTWtIeUpCQXlRY2NERURaQitpa1FNa0hTcWdFUU1oQTFFQUFBQzBIQWx3UkJnSzhCRURKQnloZ1FNa0h5SkJBeVFkVURFRFpCK2lrUU1rR3dzd0VRTWhBMUVBQUFDK0lGQWd0L0JIMGpBRUhRQUdzaUFpUUFJQUJCSUdvaEJDQUFRVHhxSVFVZ0FDb0NOQkJ1SVE0Z0FDb0NPRU1BQUlBL2toQnVJQUFxQWppVklROENRQUpBQTBBZ0JSQ0ZBU0FKU3dSQUlBVWdDUkNqQVNJREtBSVFJQVFvQWhCT0RRSWdBeWdDRENFR0lBUW9BaEFoQnlBREtBSVFJUXdnQWtFRWFpQUNJQU1xQWdBZ0F5b0NCQ0FES0FJTUVPc0RBbjhnQWlvQ0FFTUFBQUEva2lJTmkwTUFBQUJQWFFSQUlBMm9EQUVMUVlDQWdJQjRDeUVLQW44Z0Fpb0NCRU1BQUFBL2tpSU5pME1BQUFCUFhRUkFJQTJvREFFTFFZQ0FnSUI0Q3lFSUFrQWdBa0VnYWlBQ1FSUnFJQVFnQmlBSGJDQU1haUlHUVFGckVFd2dCQ0FHRUV3aUJ5QUVJQVpCQVdvUVRDQUlJQW9ReEFwRkRRQWdBa0VJYWlBQ1FTQnFJQUpCRkdvUXd3cEZEUUFnQWlvQ0NCQnVJQUlxQWd3UWJwSWdBQ29DV0Y0TkFDQURRU0JxSUFKQklHb1F3Z3BGRFFBZ0F5b0NHQ0FISUFvUVRTQUlRUUowSWdocUtnSUFYQTBFSUFNZ0J5QUtFRTBnQ0dvcUFnQWdBaW9DRkNBQ0tnSUlJZzJVSUFJcUFoZ2dBaW9DRENJUWxKSWdBaW9DSENBQ0tnSVFsSktUT0FJWUlBTWdBMEVFYWlBTklBSXFBZ1NTSUJBZ0Fpb0NBSklnQXlnQ0RCRFhBaUFESUFJcUFoQWdBeWdDRUxLU0lnMDRBaFFnQXlBTklBUW9BaEN5RU5VQ09BSVVJQThnQXlvQ0lJdGVRUUZ6RFFBZ0F5b0NHQkJ1SUE1Z1FRRnpEUUFnQXlvQ0FDSU5Rd0FBQUFCZ1FRRnpEUUFnRFNBRVFRQVFUQ2dDQkxOZFFRRnpEUUFnQXlvQ0JDSU5Rd0FBQUFCZ1FRRnpEUUFnRFNBRVFRQVFUQ2dDQ0xOZFFRRnpEUUFnQXlBQklBTW9BZ3dnQXlvQ0ZCQ0xBemdDSENBRklBc1Fvd0VnQTBFa0VEOGFJQXRCQVdvaEN3c2dDVUVCYWlFSkRBRUxDeUFGSUFzUXdRb2dBa0hRQUdva0FBOExRY0NYQkVHWXRBRVFNa0hLR0JBeVFmSWtFREpCNlFNUU5rSDZLUkF5UWFtMUFSQXlFRFVRQUFBTFFjQ1hCRUh5dFFFUU1rSEtHQkF5UWZJa0VESkJqZ1FRTmtINktSQXlRYnkyQVJBeUVEVVFBQUFMMENFQ0NuMFpmeU1BUVRCckloUWtBQ0FBUVR4cUlpRVE3UU1nQUVFZ2FpRWtJQlJCQ0dwQkJISWhJaUFBS2dJMEVHNGhDVUVCSVFBRFFBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0pCQ2tBVUVCYXlBQVN3UkFJQUlnQUVFQmF4RHNBeUVRSUFJZ0FCRHNBeUVUSUFJZ0FFRUJhaUlqRU93RElSRWdBaUFBRU1ZS0lSd2dBQ0FDS0FJUWJ5RWZBa0FnRUNnQ0JDQVRLQUlFUncwQUlCQW9BZ1FnRVNnQ0JFY05BQ0FRS0FJSUlCTW9BZ2hIRFFJZ0VDZ0NDQ0FSS0FJSVJ3MERRUUVoRFNBVEtBSUVRUUZySWdCQkFTQUFRUUZMR3lFZ0lCTW9BZ2hCQVdzaUFFRUJJQUJCQVVzYklTVWdIN0loQkFOQUlBMGdKVVlOQ1VFQklRQWdEYk1oQlNBUUlBMUJBV3NpRGhCTklSMGdFQ0FORUUwaEZTQVFJQTFCQVdvaUd4Qk5JUllnRXlBT0VFMGhGeUFUSUEwUVRTRWVJQk1nR3hCTklSZ2dFU0FPRUUwaEdTQVJJQTBRVFNFYUlCRWdHeEJOSVJJRFFDQUFJQ0JHQkVBZ0d5RU5EQUlGQWtBZ0hpQUFRUUowSWcxcUlnNHFBZ0FRYmlBSlhRMEFBa0FDUUNBT0tnSUFJZ01nSFNBQVFRRnJRUUowSWc1cUtnSUFJZ1plUVFGekRRQWdBeUFOSUIxcUtnSUFYa0VCY3cwQUlBTWdIU0FBUVFGcVFRSjBJZzlxS2dJQVhrRUJjdzBBSUFNZ0RpQVZhaW9DQUY1QkFYTU5BQ0FESUEwZ0ZXb3FBZ0JlUVFGekRRQWdBeUFQSUJWcUtnSUFYa0VCY3cwQUlBTWdEaUFXYWlvQ0FGNUJBWE1OQUNBRElBMGdGbW9xQWdCZVFRRnpEUUFnQXlBUElCWnFLZ0lBWGtFQmN3MEFJQU1nRGlBWGFpb0NBRjVCQVhNTkFDQURJQTBnRjJvcUFnQmVRUUZ6RFFBZ0F5QVBJQmRxS2dJQVhrRUJjdzBBSUFNZ0RpQWVhaW9DQUY1QkFYTU5BQ0FESUE4Z0htb3FBZ0JlUVFGekRRQWdBeUFPSUJocUtnSUFYa0VCY3cwQUlBTWdEU0FZYWlvQ0FGNUJBWE1OQUNBRElBOGdHR29xQWdCZVFRRnpEUUFnQXlBT0lCbHFLZ0lBWGtFQmN3MEFJQU1nRFNBWmFpb0NBRjVCQVhNTkFDQURJQThnR1dvcUFnQmVRUUZ6RFFBZ0F5QU9JQnBxS2dJQVhrRUJjdzBBSUFNZ0RTQWFhaW9DQUY1QkFYTU5BQ0FESUE4Z0dtb3FBZ0JlUVFGekRRQWdBeUFPSUJKcUtnSUFYa0VCY3cwQUlBTWdEU0FTYWlvQ0FGNUJBWE1OQUNBRElBOGdFbW9xQWdCZURRRUxJQU1nQmwxQkFYTU5BU0FESUEwZ0hXb3FBZ0JkUVFGekRRRWdBeUFkSUFCQkFXcEJBblFpRDJvcUFnQmRRUUZ6RFFFZ0F5QU9JQlZxS2dJQVhVRUJjdzBCSUFNZ0RTQVZhaW9DQUYxQkFYTU5BU0FESUE4Z0ZXb3FBZ0JkUVFGekRRRWdBeUFPSUJacUtnSUFYVUVCY3cwQklBTWdEU0FXYWlvQ0FGMUJBWE1OQVNBRElBOGdGbW9xQWdCZFFRRnpEUUVnQXlBT0lCZHFLZ0lBWFVFQmN3MEJJQU1nRFNBWGFpb0NBRjFCQVhNTkFTQURJQThnRjJvcUFnQmRRUUZ6RFFFZ0F5QU9JQjVxS2dJQVhVRUJjdzBCSUFNZ0R5QWVhaW9DQUYxQkFYTU5BU0FESUE0Z0dHb3FBZ0JkUVFGekRRRWdBeUFOSUJocUtnSUFYVUVCY3cwQklBTWdEeUFZYWlvQ0FGMUJBWE1OQVNBRElBNGdHV29xQWdCZFFRRnpEUUVnQXlBTklCbHFLZ0lBWFVFQmN3MEJJQU1nRHlBWmFpb0NBRjFCQVhNTkFTQURJQTRnR21vcUFnQmRRUUZ6RFFFZ0F5QU5JQnBxS2dJQVhVRUJjdzBCSUFNZ0R5QWFhaW9DQUYxQkFYTU5BU0FESUE0Z0Vtb3FBZ0JkUVFGekRRRWdBeUFOSUJKcUtnSUFYVUVCY3cwQklBTWdEeUFTYWlvQ0FGMUJBWE1OQVFzZ0ZDQURPQUlnSUJRZ0h6WUNHQ0FVSUJ3MkFoUWdGQ0FCSUJ3Z0JCQ0xBemdDSkNBVVFRaHFJQ0lnQUxNZ0JTQWNFTmNDSUNFZ0ZFRUlhaERXQWdzZ0FFRUJhaUVBREFFTEFBc0FDd0FMQWtBZ0VDZ0NCQ0FUS0FJRVJ3MEFJQkVvQWdRZ0V5Z0NCRUVCZGtjTkFDQVFLQUlJSUJNb0FnaEhEUVFnRVNnQ0NDQVRLQUlJUVFGMlJ3MEZRUUloRFFKL0lCRW9BZ1JCQVd1elF3QUFBTCtTSWdNZ0E1SkRBQUFBUDVLT0lnTkRBQUNBVDEwZ0EwTUFBQUFBWUhFRVFDQURxUXdCQzBFQUN5SUFRUUpMSVJzZ0FFRUNJQnNiSVIwQ2Z5QVJLQUlJUVFGcnMwTUFBQUMva2lJRElBT1NRd0FBQUQrU2ppSURRd0FBZ0U5ZElBTkRBQUFBQUdCeEJFQWdBNmtNQVF0QkFBc2lBRUVDSUFCQkFrc2JJUjRnSDdJaENnTkFJQTBnSGtZTkNTQU5zeUlMUXdBQUFEK1VRd0FBZ0w2U0lnVkRBQUFBUDVJaEJpQUZRd0FBQUwrU0lRZEJBaUVBSUJBZ0RVRUJheUlPRUUwaEdTQVFJQTBRVFNFVklCQWdEVUVCYWlJYkVFMGhGaUFUSUE0UVRTRVhJQk1nRFJCTklSb2dFeUFiRUUwaEdBTkFJQUFnSFVZRVFDQWJJUTBNQWdVQ1FDQWFJQUJCQW5RaURtb2lEU29DQUJCdUlBbGREUUFnQUxNaURFTUFBQUEvbEVNQUFJQytraUVFQWtBQ1FDQU5LZ0lBSWdNZ0dTQUFRUUZyUVFKMElnOXFJaUFxQWdCZVFRRnpEUUFnQXlBT0lCbHFLZ0lBWGtFQmN3MEFJQU1nR1NBQVFRRnFRUUowSWhKcUtnSUFYa0VCY3cwQUlBTWdEeUFWYWlvQ0FGNUJBWE1OQUNBRElBNGdGV29xQWdCZVFRRnpEUUFnQXlBU0lCVnFLZ0lBWGtFQmN3MEFJQU1nRHlBV2Fpb0NBRjVCQVhNTkFDQURJQTRnRm1vcUFnQmVRUUZ6RFFBZ0F5QVNJQlpxS2dJQVhrRUJjdzBBSUFNZ0R5QVhhaW9DQUY1QkFYTU5BQ0FESUE0Z0Yyb3FBZ0JlUVFGekRRQWdBeUFTSUJkcUtnSUFYa0VCY3cwQUlBTWdEeUFhYWlvQ0FGNUJBWE1OQUNBRElCSWdHbW9xQWdCZVFRRnpEUUFnQXlBUElCaHFLZ0lBWGtFQmN3MEFJQU1nRGlBWWFpb0NBRjVCQVhNTkFDQURJQklnR0dvcUFnQmVRUUZ6RFFBZ0VTQUVRd0FBQUwrU0lnZ2dCeEJISUFOZFFRRnpEUUFnRFNvQ0FDQVJJQVFnQnhCSFhrRUJjdzBBSUEwcUFnQWdFU0FFUXdBQUFEK1NJZ01nQnhCSFhrRUJjdzBBSUEwcUFnQWdFU0FJSUFVUVIxNUJBWE1OQUNBTktnSUFJQkVnQkNBRkVFZGVRUUZ6RFFBZ0RTb0NBQ0FSSUFNZ0JSQkhYa0VCY3cwQUlBMHFBZ0FnRVNBSUlBWVFSMTVCQVhNTkFDQU5LZ0lBSUJFZ0JDQUdFRWRlUVFGekRRQWdEU29DQUNBUklBTWdCaEJIWGcwQkN5QU5LZ0lBSWdNZ0lDb0NBRjFCQVhNTkFTQURJQTRnR1dvcUFnQmRRUUZ6RFFFZ0F5QVpJQUJCQVdwQkFuUWlFbW9xQWdCZFFRRnpEUUVnQXlBUElCVnFLZ0lBWFVFQmN3MEJJQU1nRGlBVmFpb0NBRjFCQVhNTkFTQURJQklnRldvcUFnQmRRUUZ6RFFFZ0F5QVBJQlpxS2dJQVhVRUJjdzBCSUFNZ0RpQVdhaW9DQUYxQkFYTU5BU0FESUJJZ0Ztb3FBZ0JkUVFGekRRRWdBeUFQSUJkcUtnSUFYVUVCY3cwQklBTWdEaUFYYWlvQ0FGMUJBWE1OQVNBRElCSWdGMm9xQWdCZFFRRnpEUUVnQXlBUElCcHFLZ0lBWFVFQmN3MEJJQU1nRWlBYWFpb0NBRjFCQVhNTkFTQURJQThnR0dvcUFnQmRRUUZ6RFFFZ0F5QU9JQmhxS2dJQVhVRUJjdzBCSUFNZ0VpQVlhaW9DQUYxQkFYTU5BU0FSSUFSREFBQUF2NUlpQ0NBSEVFY2dBMTVCQVhNTkFTQU5LZ0lBSUJFZ0JDQUhFRWRkUVFGekRRRWdEU29DQUNBUklBUkRBQUFBUDVJaUF5QUhFRWRkUVFGekRRRWdEU29DQUNBUklBZ2dCUkJIWFVFQmN3MEJJQTBxQWdBZ0VTQUVJQVVRUjExQkFYTU5BU0FOS2dJQUlCRWdBeUFGRUVkZFFRRnpEUUVnRFNvQ0FDQVJJQWdnQmhCSFhVRUJjdzBCSUEwcUFnQWdFU0FFSUFZUVIxMUJBWE1OQVNBTktnSUFJQkVnQXlBR0VFZGRRUUZ6RFFFTElCUWdIellDR0NBVUlCdzJBaFFnRkNBTktnSUFPQUlnSUJRZ0FTQWNJQW9RaXdNNEFpUWdGRUVJYWlBaUlBd2dDeUFjRU5jQ0lDRWdGRUVJYWhEV0Fnc2dBRUVCYWlFQURBRUxBQXNBQ3dBTElDTWhBQ0FUS0FJRUlCQW9BZ1JCQVhaSERRa2dFU2dDQkNBUUtBSUVRUUYyUncwSklCTW9BZ2dnRUNnQ0NFRUJka2NOQlNBUktBSUlJQkFvQWdoQkFYWkhEUVpCQVNFTklCTW9BZ1JCQVdzaUFFRUJJQUJCQVVzYklSMGdFeWdDQ0VFQmF5SUFRUUVnQUVFQlN4c2hIaUFmc2lFS0EwQWdEU0FlUmcwSVFRRWhBQ0FOUVFGMHMwTUFBQUEva2lJRlF3QUFBRUNTSVFZZ0JVTUFBQURBa2lFSElBMnpJUXNnRXlBTlFRRnJJZzRRVFNFWklCTWdEUkJOSVJvZ0V5QU5RUUZxSWhzUVRTRVZJQkVnRGhCTklSWWdFU0FORUUwaEZ5QVJJQnNRVFNFWUEwQWdBQ0FkUmdSQUlCc2hEUXdDQlFKQUlCb2dBRUVDZENJT2FpSU5LZ0lBRUc0Z0NWME5BQ0FBUVFGMHMwTUFBQUEva2lFRUFrQUNRQ0FOS2dJQUlnTWdHU0FBUVFGclFRSjBJZzlxSWlBcUFnQmVRUUZ6RFFBZ0F5QU9JQmxxS2dJQVhrRUJjdzBBSUFNZ0dTQUFRUUZxUVFKMEloSnFLZ0lBWGtFQmN3MEFJQU1nRHlBYWFpb0NBRjVCQVhNTkFDQURJQklnR21vcUFnQmVRUUZ6RFFBZ0F5QVBJQlZxS2dJQVhrRUJjdzBBSUFNZ0RpQVZhaW9DQUY1QkFYTU5BQ0FESUJJZ0ZXb3FBZ0JlUVFGekRRQWdBeUFQSUJacUtnSUFYa0VCY3cwQUlBTWdEaUFXYWlvQ0FGNUJBWE1OQUNBRElCSWdGbW9xQWdCZVFRRnpEUUFnQXlBUElCZHFLZ0lBWGtFQmN3MEFJQU1nRGlBWGFpb0NBRjVCQVhNTkFDQURJQklnRjJvcUFnQmVRUUZ6RFFBZ0F5QVBJQmhxS2dJQVhrRUJjdzBBSUFNZ0RpQVlhaW9DQUY1QkFYTU5BQ0FESUJJZ0dHb3FBZ0JlUVFGekRRQWdFQ0FFUXdBQUFNQ1NJZ2dnQnhCSElBTmRRUUZ6RFFBZ0RTb0NBQ0FRSUFRZ0J4QkhYa0VCY3cwQUlBMHFBZ0FnRUNBRVF3QUFBRUNTSWdNZ0J4QkhYa0VCY3cwQUlBMHFBZ0FnRUNBSUlBVVFSMTVCQVhNTkFDQU5LZ0lBSUJBZ0JDQUZFRWRlUVFGekRRQWdEU29DQUNBUUlBTWdCUkJIWGtFQmN3MEFJQTBxQWdBZ0VDQUlJQVlRUjE1QkFYTU5BQ0FOS2dJQUlCQWdCQ0FHRUVkZVFRRnpEUUFnRFNvQ0FDQVFJQU1nQmhCSFhnMEJDeUFOS2dJQUlnTWdJQ29DQUYxQkFYTU5BU0FESUE0Z0dXb3FBZ0JkUVFGekRRRWdBeUFaSUFCQkFXcEJBblFpRW1vcUFnQmRRUUZ6RFFFZ0F5QVBJQnBxS2dJQVhVRUJjdzBCSUFNZ0VpQWFhaW9DQUYxQkFYTU5BU0FESUE4Z0ZXb3FBZ0JkUVFGekRRRWdBeUFPSUJWcUtnSUFYVUVCY3cwQklBTWdFaUFWYWlvQ0FGMUJBWE1OQVNBRElBOGdGbW9xQWdCZFFRRnpEUUVnQXlBT0lCWnFLZ0lBWFVFQmN3MEJJQU1nRWlBV2Fpb0NBRjFCQVhNTkFTQURJQThnRjJvcUFnQmRRUUZ6RFFFZ0F5QU9JQmRxS2dJQVhVRUJjdzBCSUFNZ0VpQVhhaW9DQUYxQkFYTU5BU0FESUE4Z0dHb3FBZ0JkUVFGekRRRWdBeUFPSUJocUtnSUFYVUVCY3cwQklBTWdFaUFZYWlvQ0FGMUJBWE1OQVNBUUlBUkRBQUFBd0pJaUNDQUhFRWNnQTE1QkFYTU5BU0FOS2dJQUlCQWdCQ0FIRUVkZFFRRnpEUUVnRFNvQ0FDQVFJQVJEQUFBQVFKSWlBeUFIRUVkZFFRRnpEUUVnRFNvQ0FDQVFJQWdnQlJCSFhVRUJjdzBCSUEwcUFnQWdFQ0FFSUFVUVIxMUJBWE1OQVNBTktnSUFJQkFnQXlBRkVFZGRRUUZ6RFFFZ0RTb0NBQ0FRSUFnZ0JoQkhYVUVCY3cwQklBMHFBZ0FnRUNBRUlBWVFSMTFCQVhNTkFTQU5LZ0lBSUJBZ0F5QUdFRWRkUVFGekRRRUxJQlFnSHpZQ0dDQVVJQncyQWhRZ0ZDQU5LZ0lBT0FJZ0lCUWdBU0FjSUFvUWl3TTRBaVFnRkVFSWFpQWlJQUN6SUFzZ0hCRFhBaUFoSUJSQkNHb1ExZ0lMSUFCQkFXb2hBQXdCQ3dBTEFBc0FDeUFVUVRCcUpBQVBDMEhBbHdSQjBwa0JFREpCeWhnUU1rSHlKQkF5UWNBQkVEWkIraWtRTWtHdG5BRVFNaEExREFZTFFjQ1hCRUhRbmdFUU1rSEtHQkF5UWZJa0VESkJ3UUVRTmtINktSQXlRYTJjQVJBeUVEVU1CUXRCd0pjRVFkS1pBUkF5UWNvWUVESkI4aVFRTWtHVkFoQTJRZm9wRURKQnJad0JFRElRTlF3RUMwSEFsd1JCMEtBQkVESkJ5aGdRTWtIeUpCQXlRWllDRURaQitpa1FNa0d0bkFFUU1oQTFEQU1MUWNDWEJFRzFvd0VRTWtIS0dCQXlRZklrRURKQjZnSVFOa0g2S1JBeVFhMmNBUkF5RURVTUFndEJ3SmNFUWNLbEFSQXlRY29ZRURKQjhpUVFNa0hyQWhBMlFmb3BFREpCclp3QkVESVFOUXdCQ3lBaklRQU1BUXNMRUFBQUMrUUJBUUovSXdCQklHc2lBeVFBSUFFb0FoQkJBRW9FUUFKL0lBTkJ3SkFCRUkwQklRSkJBUXNFUUNBQVFTQnFJQUVRMkFvTElBSVFld0ovSUFOQi9KRUJFSTBCSVFKQkFRc0VRQ0FBSUFFZ0FFRWdhaERLQ2dzZ0FoQjdBbjhnQTBIamt3RVFqUUVoQWtFQkN3UkFJQUFnQVJESkNnc2dBaEI3QW44Z0EwRzhsUUVRalFFaEFrRUJDd1JBSUFBUXlBb0xJQUlRZXdKL0lBTkIvcFlCRUkwQklRSkJBUXNFUUNBQUlBRVF4d29MSUFJUWV5QURRU0JxSkFBUEMwSEFsd1JCcHo4UU1rSEtHQkF5UWZJa0VESkJrd0VRTmtINktSQXlRWURGQUJBeUVEVVFBQUFMalFFQkFuOGpBRUVnYXlJREpBQUNRQ0FCSUFBUU5DZ0NBQ0FBS0FJRWEwRU1iVTBFUUNBQUlBRVF2d1VNQVFzZ0FCQTBJUUlnQTBFSWFpQUFJQUFRVnlBQmFoQ3hBaUFBRUZjZ0FoQytCU0lDSUFFUXZRVWdBQ0FDRUx3RklBSWdBaWdDQkJDWkNpQUNLQUlBQkVBZ0FpZ0NFQm9nQWlnQ0FDRUFJQUlRandNYUlBQVFNd3NMSUFOQklHb2tBQXVOQVFFQ2Z5TUFRU0JySWdNa0FBSkFJQUVnQUJBMEtBSUFJQUFvQWdSclFReHRUUVJBSUFBZ0FSQy9CUXdCQ3lBQUVEUWhBaUFEUVFocUlBQWdBQkJYSUFGcUVMRUNJQUFRVnlBQ0VMNEZJZ0lnQVJDOUJTQUFJQUlRdkFVZ0FpQUNLQUlFRUpvS0lBSW9BZ0FFUUNBQ0tBSVFHaUFDS0FJQUlRQWdBaENQQXhvZ0FCQXpDd3NnQTBFZ2FpUUFDMFFCQVg4Z0FTQUFFRmNpQWtzRVFDQUFJQUVnQW1zUXpBb1BDeUFCSUFKSkJFQWdBQ2dDQUNBQlFReHNhaUVCSUFBUVZ5RUNJQUFnQVJESEJTQUFJQUlRMEFJTEMvRUVBZ3QvQTN3akFFRVFheUlKSkFCQkFoQzhBeUVNUVFJUXZBTWhDa0VDUVFJUXRBRWhDMEVBSVFJQ2Z3SkFBMEFnQWtFRVJ3UkFBbjhnQXlBQ1FRRnFJZzlCQW5ScUtBSUFJZ2NnQXlBQ1FRSjBhaWdDQUNJSWEwRUJhcmRFbXBtWm1abVpxVCtpUkFBQUFBQUFBT0Evb0NJU0lBaTNvQ0lUbVVRQUFBQUFBQURnUVdNRVFDQVRxZ3dCQzBHQWdJQ0FlQXNoRGdKL0lBZTNJQktoSWhLWlJBQUFBQUFBQU9CQll3UkFJQktxREFFTFFZQ0FnSUI0Q3lBT2F5SUlRWDhnQ0VGL1NodEJBV29oRUVFQUlRY2dDRUVCYWtFQ0VMUUJJUWdEUUNBSElCQkhCRUFnQkNBQUlBY2dEbXBCQW5RaURXb29BZ0N5SUFFZ0RXb29BZ0N5SUFsQkRHb2dDVUVJYWhEYUFVRUFTQTBFSUFnb0FnQWlEU0FIUVFSMEloRnFJQWtxQWd5N09RTUFJQTBnRVVFSWNtb2dDU29DQ0xzNUF3QWdCMEVCYWlFSERBRUxDeUFJSUFzZ0RDQUtFSmtKUVFCSURRSWdCU0FDUVJoc2FpSUNJQXNvQWdBaUJ5c0RDQ0lTT1FNQUlBSWdCeXNEQUNJVG1qa0RDQ0FDSUJJZ0NpZ0NBQ0lDS3dNQW9pQVRJQUlyQXdpaW9abzVBeEFnQ0JCRklBOGhBZ3dCQ3dzZ0N4QkZJQW9RbmdJZ0RCQ2VBa0VBSVFjRFFFRUFJQWRCQkVZTkFocEJmeUFGSUFkQkFXdEJBM0ZCR0d4cUlnQXJBd0FnQlNBSFFSaHNhaUlCS3dNSUloT2lJQUVyQXdBZ0FDc0RDQ0lVb3FFaUVwbEVMVU1jNitJMkdqOWpEUUlhSUFZZ0IwRUVkR29pQWlBVUlBRXJBeENpSUJNZ0FDc0RFS0toSUJLak9RTUFJQUlnQVNzREFDQUFLd01Rb2lBQUt3TUFJQUVyQXhDaW9TQVNvemtEQ0NBSFFRRnFJUWNNQUFzQUN5QUlFRVVnQ3hCRklBb1FuZ0lnREJDZUFrRi9DeUVDSUFsQkVHb2tBQ0FDQzBRQkFYOGdBU0FBRUZjaUFrc0VRQ0FBSUFFZ0Ftc1F6UW9QQ3lBQklBSkpCRUFnQUNnQ0FDQUJRUXhzYWlFQklBQVFWeUVDSUFBZ0FSREpCU0FBSUFJUTBBSUxDNHNCQVFGL0lBQkJJR29nQVJEZUNpQUFRZHdBYWlBQkVFaEJBQkJNS0FJRUlBRVFTRUVBRUV3b0FnZ2dBU2dDRUNBQktBSVVFUEFKSUFBZ0FSQklRUUFRVENnQ0JEWUNBQ0FBSUFFUVNFRUFFRXdvQWdnMkFnUWdBRUVRYWlJQklBQW9BZ2dRMEFvRFFDQUJFRmNnQWtzRVFDQUJJQUlRbkFFZ0FDZ0NEQkRPQ2lBQ1FRRnFJUUlNQVFzTEMyd0JBWDhnQUVHUUFXb1FkU0FBUWR3QWFpSUJRU2hxRU84RElBRkJIR29RZFNBQVFjZ0FhaER4QXlBQVFUeHFFUEVESUFCQklHb1E3d01nQUVFUWFpSUFFSThDSUFBb0FnQUVRQ0FBSUFBb0FnQVF5UVVnQUJBMEdpQUFLQUlBSVFFZ0FCQzNBUm9nQVJBekN3dUZCQUlCZncxOEl3QkJRR29pQXlRQUFuOUJmeUFBUlEwQUdrRitJQUVnQTBFZ2FpQURFT1VKUVFCSURRQWFJQU5CSUdvUW53VUNRQ0FDQkVBZ0FDQURLd01nT1FNSUlBQWdBeXNES0RrREVDQUFJQU1yQXpBNUF4Z2dBQ0FES3dNNE9RTWdJQUFnQXlzREFEa0RLQ0FBSUFNckF3ZzVBekFnQUNBREt3TVFPUU00REFFTFJBQUFBQUFBQVBBL0lBQXJBd0FpQnFFaUNDRUVJQVloQndKL0lBTXJBeUFpQ1NBQUt3TUlJZzJpSUFNckF5Z2lDaUFBS3dNUUlnNmlvQ0FES3dNd0lnc2dBQ3NER0NJUG9xQWdBeXNET0NJTUlBQXJBeUFpRUtLZ0lnVkVBQUFBQUFBQUFBQmpRUUZ6UlFSQUlBTWdESm9pRERrRE9DQURJQXVhSWdzNUF6QWdBeUFLbWlJS09RTW9JQU1nQ1pvaUNUa0RJQ0FGbWlFRkN5QUZSSlpEaTJ6bisrOC9aRVVMQkVBZ0JpQUZFSVFPSWdTaUVMY0RJQVFRdHdNaUJhTWhCeUFJSUFTaUVMY0RJQVdqSVFRTElBQWdFQ0FFb2lBSElBeWlvRGtESUNBQUlBOGdCS0lnQnlBTG9xQTVBeGdnQUNBT0lBU2lJQWNnQ3FLZ09RTVFJQUFnRFNBRW9pQUhJQW1pb0RrRENDQUFRUWhxRUo4RklBQWdCaUFES3dNQW9pQUlJQUFyQXlpaW9Ea0RLQ0FBUVRCcUlBWWdBeXNEQ0tJZ0NDQUFLd013b3FBNUF3QWdBRUU0YWlBR0lBTXJBeENpSUFnZ0FDc0RPS0tnT1FNQUN5QUFRUWhxSUFCQktHb2dBUkRoQ1VFZmRVRitjUXNoQUNBRFFVQnJKQUFnQUF0cEFRSi9Jd0JCSUdzaUF5UUFBa0FnQVNBQUVEUW9BZ0FnQUNnQ0JHdEJBblZOQkVBZ0FDQUJFSWNEREFFTElBQVFOQ0VDSUFOQkNHb2dBQ0FBRUVNZ0FXb1EwZ0lnQUJCRElBSVFuZ29pQWlBQkVPTURJQUFnQWhEUkFpQUNFSzRDQ3lBRFFTQnFKQUFMaHdFQkFYOGdBRUtLZ0lDQW9BRTNBZ2dnQUVJQU53SUFJQUJCRUdvUVRob2dBRUVCT2dBY0lBQkJJR29pQVJCT0dpQUJRZ0EzQWd3Z0FFS0FnSUNBZ0lDQWtNRUFOd0kwSUFCQlBHb1FUaG9nQUVISUFHb1FUaG9nQUVHQWdNQ0lCRFlDV0NBQVFkd0FhaER4Q1NBQVFaQUJhaEJPSVFFZ0FFR0lKeERVQlNBQlFTUVFqQUlnQUF0RkFDQUJJQUFvQWdoUEJFQkJ3SmNFUVpIVkFSQXlRYlBXQVJBeVFmSWtFREpCOXdBUU5rSDZLUkF5UWNEWEFSQXlFRFVRQUFBTElBQW9BaGdnQUNnQ0RDQUJiR29MbGdVQkJuOENRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFBb0FnQkJBa1lFUUNBQktBSUFRUUpIRFFFZ0FpZ0NBRUVDUncwQ0lBQW9BaEJCQVVjTkF5QUJLQUlRUVFGSERRUWdBaWdDRUVFQlJ3MEZJQUFvQWdRZ0FpZ0NCRWNOQmlBQUtBSUlJQUlvQWdoSERRY2dBU2dDQkNBQ0tBSUVSdzBJSUFFb0FnZ2dBaWdDQ0VjTkNRTkFJQU1nQVNnQ0NFOE5DMEVBSVFRZ0FDQURFTllLSVFZZ0FTQURFRTBoQnlBQ0lBTVFUU0VJQTBBZ0JDQUJLQUlFVHdSQUlBTkJBV29oQXd3Q0JTQUdJQVJCQW5RaUJXb2dCU0FIYWlvQ0FDQUZJQWhxS2dJQWt6Z0NBQ0FFUVFGcUlRUU1BUXNBQ3dBTEFBdEJ3SmNFUWJQVkFCQXlRY29ZRURKQjhpUVFNa0hXQUJBMlFmb3BFREpCc3RzQUVESVFOUXdLQzBIQWx3UkJxOThBRURKQnloZ1FNa0h5SkJBeVFkY0FFRFpCK2lrUU1rR3kyd0FRTWhBMURBa0xRY0NYQkVINTRnQVFNa0hLR0JBeVFmSWtFREpCMkFBUU5rSDZLUkF5UWJMYkFCQXlFRFVNQ0F0QndKY0VRY2p6QUJBeVFjb1lFREpCOGlRUU1rSFpBQkEyUWZvcEVESkJoUGNBRURJUU5Rd0hDMEhBbHdSQnpQb0FFREpCeWhnUU1rSHlKQkF5UWRvQUVEWkIraWtRTWtHRTl3QVFNaEExREFZTFFjQ1hCRUdSL1FBUU1rSEtHQkF5UWZJa0VESkIyd0FRTmtINktSQXlRWVQzQUJBeUVEVU1CUXRCd0pjRVFlU0FBUkF5UWNvWUVESkI4aVFRTWtIY0FCQTJRZm9wRURKQndZTUJFRElRTlF3RUMwSEFsd1JCcVlZQkVESkJ5aGdRTWtIeUpCQXlRZDBBRURaQitpa1FNa0gzaUFFUU1oQTFEQU1MUWNDWEJFSERpd0VRTWtIS0dCQXlRZklrRURKQjNnQVFOa0g2S1JBeVFjR0RBUkF5RURVTUFndEJ3SmNFUWZtTUFSQXlRY29ZRURKQjhpUVFNa0hmQUJBMlFmb3BFREpCOTRnQkVESVFOUXdCQ3c4TEVBQUFDLzRCQVFKL0FrQUNRQUpBSUFBUXBBRUVRQ0FCS0FJUVFRQk1EUUVnQVVHWXN3RkJrT0FCRUxJQlJRMENBMEJCQUNFQ0lBTWdBQ2dDREU4TkJBTkFJQUFvQWhBZ0FrMEVRQ0FEUVFGcUlRTU1BZ1VnQUNBQUtBSVFJQU5zSUFKcUVFd2dBU0FESUFJUTd3RWdBU0FESUFKQkFXb2lBaER2QVJEWENnd0JDd0FMQUFzQUMwSEFsd1JCeFRNUU1rSEtHQkF5UWZJa0VESkJ5QUFRTmtINktSQXlRZkE1RURJUU5SQUFBQXRCd0pjRVFhYy9FREpCeWhnUU1rSHlKQkF5UWNrQUVEWkIraWtRTWtHQXhRQVFNaEExRUFBQUMwSEFsd1JCdThzQUVESkJ5aGdRTWtIeUpCQXlRY29BRURaQitpa1FNa0dTMFFBUU1oQTFFQUFBQ3d0VkFRRi9JQUJGQkVCQmZ3OExRWDRoQXlBQlJBQUFBQUFBQUFBQVlTQUNSQUFBQUFBQUFBQUFZWElFZjBGK0JTQUFSQUFBQUFBQUFQQS9JQUdqSWdFZ0FVUUFBQUFBQUFEd1B5QUNvNkNqT1FNQVFRQUxDKzRTQWhCL0FYd2dBVUVBSUFGQkFFb2JJUWtnQkNnQ0FDSUlJQUpCQVdzaUR5QUJiRUVCZEdvaEJpQUlJUWNEUUNBRklBbEdSUVJBSUFaQkFEc0JBQ0FIUVFBN0FRQWdCVUVCYWlFRklBZEJBbW9oQnlBR1FRSnFJUVlNQVFzTElBSkJBQ0FDUVFCS0d5RUxJQWdnQVVFQmF5SUtRUUYwYWlFR1FRQWhCU0FJSVFjRFFDQUZJQXRHUlFSQUlBWkJBRHNCQUNBSFFRQTdBUUFnQlVFQmFpRUZJQVlnQVVFQmRDSUphaUVHSUFjZ0NXb2hCd3dCQ3dzZ0QwRUJJQTlCQVVvYklSRWdCRUdRZ01nQWFpRUpJQU1nQVVFQmFpSUZhaUVPSUFBZ0JXb2hEU0FLUVFFZ0NrRUJTaHNpRWtFQmF5RVFJQWdnQlVFQmRHb2hCMEVBSUFGclFRRjBJUk5CQUNFTFFRRWhBd0pBQTBBZ0F5QVJSd1JBSUEwZ0VHb2hGQ0FPSUJCcUlROUJBU0VHQTBBQ1FBSkFBa0FnQmlBU1J3UkFJQTB0QUFBZ0RpMEFBRTBFUUNBSElCTnFJZ292QVFBaUJVRVFkRUVRZFNJQVFRRk9CRUFnQnlBQU93RUFJQVFnQlVFY2JHb2lCVUdNZ05BQWFpQUROZ0lBSUFWQjlQL1BBR29pQUNBQUtBSUFRUUZxTmdJQUlBVkIrUC9QQUdvaUFDQUFLQUlBSUFacU5nSUFJQVZCL1AvUEFHb2lBQ0FBS0FJQUlBTnFOZ0lBREFVTElBcEJBbXN2QVFBaUNFRVFkRUVRZFNFQUlBb3VBUUlpQ2tFQlRnUkFJQUJCQVU0RVFDQUVRWkNBeUFCcUlnVWdDa0VDZEdwQkJHc29BZ0FpQUNBSVFRSjBJQVZxUVFScktBSUFJZ2hLQkVBZ0J5QUlPd0VBUVFBaERDQUxRUUFnQzBFQVNoc2hDaUFKSVFVRFFDQUtJQXhHQkVBZ0NDRUFEQWdMSUFBZ0JTZ0NBRVlFUUNBRklBZzJBZ0FMSUF4QkFXb2hEQ0FGUVFScUlRVU1BQXNBQ3lBSElBQTdBUUFnQUNBSVRnMEZRUUFoRENBTFFRQWdDMEVBU2hzaENpQUpJUVVEUUNBS0lBeEdEUVlnQ0NBRktBSUFSZ1JBSUFVZ0FEWUNBQXNnREVFQmFpRU1JQVZCQkdvaEJRd0FDd0FMSUFkQkFtc3VBUUFpQ0VFQlRnUkFJQVJCa0lESUFHb2lCU0FLUVFKMGFrRUVheWdDQUNJQUlBaEIvLzhEY1VFQ2RDQUZha0VFYXlnQ0FDSUlTZ1JBSUFjZ0NEc0JBRUVBSVF3Z0MwRUFJQXRCQUVvYklRb2dDU0VGQTBBZ0NpQU1SZ1JBSUFnaEFBd0hDeUFBSUFVb0FnQkdCRUFnQlNBSU5nSUFDeUFNUVFGcUlRd2dCVUVFYWlFRkRBQUxBQXNnQnlBQU93RUFJQUFnQ0U0TkJFRUFJUXdnQzBFQUlBdEJBRW9iSVFvZ0NTRUZBMEFnQ2lBTVJnMEZJQWdnQlNnQ0FFWUVRQ0FGSUFBMkFnQUxJQXhCQVdvaERDQUZRUVJxSVFVTUFBc0FDeUFISUFvN0FRQWdCQ0FLUVFkc1FRSjBhaUlGUWZUL3p3QnFJZ0FnQUNnQ0FFRUJhallDQUNBRlFmai96d0JxSWdBZ0FDZ0NBQ0FHYWpZQ0FDQUZRZnovendCcUlnQWdBQ2dDQUNBRGFqWUNBQ0FHSUFWQmdJRFFBR29pQUNnQ0FFZ0VRQ0FBSUFZMkFnQUxJQVZCaklEUUFHb2dBellDQUF3RkN5QUFRUUZPQkVBZ0J5QUFPd0VBSUFRZ0NFRUhiRUVDZEdvaUJVSDAvODhBYWlJQUlBQW9BZ0JCQVdvMkFnQWdCVUg0Lzg4QWFpSUFJQUFvQWdBZ0JtbzJBZ0FnQlVIOC84OEFhaUlBSUFBb0FnQWdBMm8yQWdBZ0JpQUZRWVNBMEFCcUlnQW9BZ0JLQkVBZ0FDQUdOZ0lBQ3lBRlFZeUEwQUJxSUFNMkFnQU1CUXNnQjBFQ2F5OEJBQ0lGUVJCMFFSQjFJZ0JCQVU0RVFDQUhJQUE3QVFBZ0JDQUZRUnhzYWlJRlFmVC96d0JxSWdBZ0FDZ0NBRUVCYWpZQ0FDQUZRZmovendCcUlnQWdBQ2dDQUNBR2FqWUNBQ0FGUWZ6L3p3QnFJZ0FnQUNnQ0FDQURhallDQUNBRlFZU0EwQUJxSWdBb0FnQWdCazROQlNBQUlBWTJBZ0FNQlFzZ0MwR0FnQUpPQkVCQkFFRURRY0FJUVFBUU9FRi9JUTBNQ1FzZ0J5QUxRUUZxSWdBN0FRQWdCQ0FMUVFKMGFrR1FnTWdBYWlBQVFSQjBRUkIxTmdJQUlBUWdDMEVjYkdvaUJVR1VnTkFBYWlBR05nSUFJQVZCa0lEUUFHcEJBVFlDQUNBRlFaaUEwQUJxSUFNMkFnQWdCVUdjZ05BQWFpQUdOZ0lBSUFWQm9JRFFBR29nQmpZQ0FDQUZRYVNBMEFCcUlBTTJBZ0FnQlVHb2dOQUFhaUFETmdJQUlBQWhDd3dFQ3lBSFFRQTdBUUFNQXdzZ0IwRUVhaUVISUE5QkFtb2hEaUFVUVFKcUlRMGdBMEVCYWlFRERBVUxJQVFnQUVFUWRFRVFkVUVjYkdvaUJVSDAvODhBYWlJQUlBQW9BZ0JCQVdvMkFnQWdCVUg0Lzg4QWFpSUFJQUFvQWdBZ0JtbzJBZ0FnQlVIOC84OEFhaUlBSUFBb0FnQWdBMm8yQWdBTUFRc2dCQ0FBUVJCMFFSQjFRUnhzYWlJRlFZeUEwQUJxSUFNMkFnQWdCVUgwLzg4QWFpSUFJQUFvQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlBSUFBb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJQUlBQW9BZ0FnQTJvMkFnQUxJQWRCQW1vaEJ5QU9RUUZxSVE0Z0RVRUJhaUVOSUFaQkFXb2hCZ3dBQ3dBTEN5QUxRUUFnQzBFQVNoc2lDRUVCYWlFRFFRRWhCVUVCSVFjRFFDQURJQVZHUlFSQUFrQWdCU0FKS0FJQUlnQkdCRUFnQnlJR1FRRnFJUWNNQVFzZ0FFRUNkQ0FFYWtHTWdNZ0FhaWdDQUNFR0N5QUpJQVkyQWdBZ0NVRUVhaUVKSUFWQkFXb2hCUXdCQ3dzZ0JDQUhRUUZySWdBMkFnZ2dBRVVFUUVFQUR3dEJBQ0VHSUFSQkRHcEJBQ0FBUVFKMEVEc2FJQVJCa0lBb2FrRUFJQUJCQkhRUU94b2dBRUVBSUFCQkFFb2JJUUFnQkVHTWdBaHFJUWxCQUNFRkEwQWdBQ0FGUmdSQUlBUkJrSUFvYWlFSkEwQWdCaUFJUmdSQVFRQWhEU0FFS0FJSUlnQkJBQ0FBUVFCS0d5RUNJQVJCa0lBb2FpRURRUUFoQlFOQUlBSWdCVVlOQlNBRElBVkJCSFFpQVdvaUFDQUFLd01BSUFRZ0JVRUNkR29vQWd5M0loV2pPUU1BSUFNZ0FVRUljbW9pQUNBQUt3TUFJQldqT1FNQUlBVkJBV29oQlF3QUN3QUxJQVFnQkNBR1FRSjBha0dRZ01nQWFpZ0NBRUVCYXlJQlFRSjBJZ0pxSWdCQkRHb2dBQ2dDRENBRUlBWkJCMnhCQW5ScUlnVkJrSURRQUdvb0FnQnFOZ0lBSUFrZ0FVRUVkQ0lEYWlJQUlBQXJBd0FnQlVHVWdOQUFhaWdDQUxlZ09RTUFJQWtnQTBFSWNtb2lBQ0FBS3dNQUlBVkJtSURRQUdvb0FnQzNvRGtEQUNBRlFaeUEwQUJxS0FJQUlnRWdBeUFFYWtHTWdBaHFJZ0FvQWdCSUJFQWdBQ0FCTmdJQUN5QUZRYUNBMEFCcUtBSUFJZ0VnQkNBQ1FRSjBJZ0pCQkhKcVFZeUFDR29pQUNnQ0FFb0VRQ0FBSUFFMkFnQUxJQVZCcElEUUFHb29BZ0FpQVNBRUlBSkJDSEpxUVl5QUNHb2lBQ2dDQUVnRVFDQUFJQUUyQWdBTElBVkJxSURRQUdvb0FnQWlBU0FFSUFKQkRISnFRWXlBQ0dvaUFDZ0NBRW9FUUNBQUlBRTJBZ0FMSUFaQkFXb2hCZ3dBQ3dBRklBa2dCVUVFZENJRGFpQUJOZ0lBSUFrZ0EwRUVjbXBCQURZQ0FDQUpJQU5CQ0hKcUlBSTJBZ0FnQ1NBRFFReHlha0VBTmdJQUlBVkJBV29oQlF3QkN3QUxBQXNnRFF1WEFRRUNmeU1BUVNCcklnTWtBQUpBSUFFZ0FCQTBLQUlBSUFBb0FnUnJRUVYxVFFSQUlBQWdBUkN0Q2d3QkN5QUFFRFFoQWlBRFFRaHFJQUFnQUJDa0FTQUJhaENzQ2lBQUVLUUJJQUlRcXdvaUFpQUJFS29LSUFBZ0FoQ3BDaUFDSUFJb0FnUVFvUW9nQWlnQ0FBUkFJQUlvQWhBYUlBSW9BZ0FoQUNBQ0VEMG9BZ0FnQWlnQ0FHc2FJQUFRTXdzTElBTkJJR29rQUFzaEFDQUFJQUFnQUNnQ0FFRU1heWdDQUdwQkNoRG1CUkNyRFNBQUVLY0RJQUFMQndBZ0FDZ0NDQXZrQVFFSGZ3SkFJQUZCQkdvUXBBRUVRQ0FCUVFCQkFCRHZBU2dDQUNFRElBRkJBRUVBRU84QktBSUVJUVFnQVVFQVFRQVE3d0VvQWdnaEJTQUFJQUVvQWhBMkFnd2dBQ0FCS0FJVVFRRnJJZ0UyQWhBZ0FDQUFLQUlNSUFGc0VQUURBMEFnQWlBQUtBSU1UdzBDSUFVZ0FuWWhCaUFFSUFKMklRZEJBQ0VCQTBBZ0FDZ0NFQ0lJSUFGTkJFQWdBa0VCYWlFQ0RBSUZJQUFnQWlBSWJDQUJhaEJNSUFNZ0J5QUdRUUVRdndNZ0FVRUJhaUVCREFFTEFBc0FDd0FMUWNDWEJFSEJFQkF5UWNvWUVESkI4aVFRTWtFMUVEWkIraWtRTWtITkxSQXlFRFVRQUFBTEMzY0JBbjhqQUVFUWF5SUNKQUFDUUFKQUlBQkZCRUJCQUNFQURBRUxJQUFRaVFGQnd1b0JFSWtCYWtFQ2FoQTZJZ05GRFFFZ0FrSEM2Z0UyQWdRZ0FpQUFOZ0lBSUFOQnhCZ2dBaEREQWlBRElBRVE1d0loQUNBREVETUxJQUpCRUdva0FDQUFEd3RCQUVFRFFiQVFRUUFRT0VFQkVBRUFDMklCQVg4Q1FFSEFBQkE2SWdJRVFDQUNRZ0EzQXdnZ0FrSUFOd01vSUFKQ2dJQ0FnSUNBZ1BnL053TWdJQUpDQURjREdDQUNRZ0EzQXhBZ0FrSUFOd013SUFKQ0FEY0RPQ0FDSUFBZ0FSRFpDa0YvU2cwQklBSVFNd3RCQUNFQ0N5QUNDOHNDQVFkL0lBTWdBVUVFYlNJRE5nSUFJQVFnQWtFRWJTSUNOZ0lBSUFJZ0Eyd1FPaUlKQkVBZ0FrRUFJQUpCQUVvYklRb2dBMEVBSUFOQkFFb2JJUXNnQ1NFSEEwQWdCaUFLUmtVRVFDQUFJQVpCQW5RaUF5QUJiR29oQlNBQUlBTkJBM0lnQVd4cUlRSWdBQ0FEUVFKeUlBRnNhaUVFSUFBZ0EwRUJjaUFCYkdvaEEwRUFJUWdEUUNBSUlBdEdSUVJBSUFjZ0FpMEFBeUFDTFFBQ0lBSXRBQUVnQWkwQUFDQUVMUUFESUFRdEFBSWdCQzBBQVNBRUxRQUFJQU10QUFNZ0F5MEFBaUFETFFBQklBTXRBQUFnQlMwQUF5QUZMUUFDSUFVdEFBRWdCUzBBQUdwcWFtcHFhbXBxYW1wcWFtcHFha0VRZEVFUWRVRVFiVG9BQUNBSVFRRnFJUWdnQWtFRWFpRUNJQVJCQkdvaEJDQURRUVJxSVFNZ0JVRUVhaUVGSUFkQkFXb2hCd3dCQ3dzZ0JrRUJhaUVHREFFTEN5QUpEd3RCQUVFRFFaOFFRUUFRT0VFQkVBRUFDNDBDQVFaL0lBTWdBVUVEYlNJRE5nSUFJQVFnQWtFRGJTSUNOZ0lBSUFJZ0Eyd1FPaUlJQkVBZ0FrRUFJQUpCQUVvYklRa2dBMEVBSUFOQkFFb2JJUW9nQ0NFSEEwQWdCaUFKUmtVRVFDQUFJQVpCQTJ3aUF5QUJiR29oQlNBQUlBTkJBbW9nQVd4cUlRSWdBQ0FEUVFGcUlBRnNhaUVFUVFBaEF3TkFJQU1nQ2taRkJFQWdCeUFDTFFBQ0lBSXRBQUVnQWkwQUFDQUVMUUFDSUFRdEFBRWdCQzBBQUNBRkxRQUNJQVV0QUFFZ0JTMEFBR3BxYW1wcWFtcHFRUkIwUVJCMVFRbHRPZ0FBSUFOQkFXb2hBeUFDUVFOcUlRSWdCRUVEYWlFRUlBVkJBMm9oQlNBSFFRRnFJUWNNQVFzTElBWkJBV29oQmd3QkN3c2dDQThMUVFCQkEwR2ZFRUVBRURoQkFSQUJBQXZWQVFFRmZ5QURJQUZCQW0waUF6WUNBQ0FFSUFKQkFtMGlBallDQUNBQ0lBTnNFRG9pQndSQUlBSkJBQ0FDUVFCS0d5RUlJQU5CQUNBRFFRQktHeUVKSUFjaEF3TkFJQVVnQ0VaRkJFQWdBQ0FGUVFGMElnSWdBV3hxSVFZZ0FDQUNRUUZ5SUFGc2FpRUNRUUFoQkFOQUlBUWdDVVpGQkVBZ0F5QUNMUUFCSUFJdEFBQWdCaTBBQVNBR0xRQUFhbXBxUVFKMk9nQUFJQVJCQVdvaEJDQUNRUUpxSVFJZ0JrRUNhaUVHSUFOQkFXb2hBd3dCQ3dzZ0JVRUJhaUVGREFFTEN5QUhEd3RCQUVFRFFaOFFRUUFRT0VFQkVBRUFDNWNEQVFoL0lBTWdBVUVEYlNJRFFRRjBJZ2cyQWdBZ0JDQUNRUU50SWdKQkFYUWlCRFlDQUNBRUlBaHNFRG9pQ2dSQUlBSkJBQ0FDUVFCS0d5RUxJQU5CQUNBRFFRQktHeUVNSUFvaUF5RUdBMEFnQnlBTFJrVUVRQ0FESUFocUlRTWdBQ0FIUVFOc0lnVWdBV3hxSVFJZ0FDQUZRUUpxSUFGc2FpRUVJQUFnQlVFQmFpQUJiR29oQlVFQUlRa0RRQ0FKSUF4R1JRUkFJQVlnQWkwQUFDQUNMUUFCUVFGMmFpQUZMUUFBUVFGMmFpQUZMUUFCUVFKMmFrRUNkRUVKYmpvQUFDQURJQVF0QUFBZ0JTMEFBVUVDZGlBRkxRQUFRUUYyYW1vZ0JDMEFBVUVCZG1wQkFuUkJDVzQ2QUFBZ0JpQUNMUUFDSUFJdEFBRkJBWFpxSUFVdEFBRkJBblpxSUFVdEFBSkJBWFpxUVFKMFFRbHVPZ0FCSUFNZ0JDMEFBaUFGTFFBQ1FRRjJJQVV0QUFGQkFuWnFJQVF0QUFGQkFYWnFha0VDZEVFSmJqb0FBU0FKUVFGcUlRa2dCRUVEYWlFRUlBVkJBMm9oQlNBQ1FRTnFJUUlnQTBFQ2FpRURJQVpCQW1vaEJnd0JDd3NnQjBFQmFpRUhJQVlnQ0dvaEJnd0JDd3NnQ2c4TFFRQkJBMEdmRUVFQUVEaEJBUkFCQUFzM0FDQURJQUUyQWdBZ0JDQUNOZ0lBSUFFZ0Ftd2lBUkE2SWdKRkJFQkJBRUVEUVo4UVFRQVFPRUVCRUFFQUN5QUNJQUFnQVJBL0MyTUFBa0FDUUFKQUFrQUNRQ0FEUVFGckRnVUFBZ1FEQVFRTElBQWdBU0FDSUFRZ0JSRGxDZzhMSUFBZ0FTQUNJQVFnQlJEa0NnOExJQUFnQVNBQ0lBUWdCUkRqQ2c4TElBQWdBU0FDSUFRZ0JSRGlDZzhMSUFBZ0FTQUNJQVFnQlJEaENnc2xBQU5BSUFFZ0FDZ0NDRWNFUUNBQUtBSVFHaUFBSUFBb0FnaEJBV3MyQWdnTUFRc0xDeVVBQTBBZ0FTQUFLQUlJUndSQUlBQW9BaEFhSUFBZ0FDZ0NDRUVNYXpZQ0NBd0JDd3NMNnhZQ0RIOERmQ01BUWRBQWF5SUdKQUFDUUFKQUlBQkZJQUZGY2cwQUlBQkJBRFlDTENBQVFTeHFJUWdDUUFKQUFrQWdBQ2dDOUlhdkF5SUNRUVJHQkVBZ0FDZ0MvSWF2QXlJQ1FRRk9CRUFnQUNBQ1FRRnJOZ0w4aHE4RERBSUxJQVlnQUNnQ0VDSUVJQUFvQW9DSHJ3TnFJZ0pCL3dFZ0FrSC9BVWdiSWdjMkFrUWdBQ2dDaElldkF5RURJQVlnQkRZQ1RFRUFJUUlnQmlBRUlBTnJJZ05CQUNBRFFRQktHeUlLTmdKSUlBQkJNR29oQ3lBQVFiRDRBR29oRENBQVFiajRBR29oQXlBQVFlQ0dwd0pxSVFrQ1FBTkFJQUpCQTBjRVFDQUJLQUlNSUFBb0FpUWdBQ2dDS0NBQUtBSUFJQUFvQWd3Z0FrRUNkQ0lOSUFaQnhBQnFhaWdDQUNBQUtBSVVJQWxCQUJEa0EwRUFTQTBDSUFBb0FpUWdBQ2dDS0NBSklBQW9BaFFnQXlBTUVPVUZRUUJJRFFJZ0FTZ0NBQ0FBS0FJa0lBQW9BaWdnQUNnQ0JDQURJQUFvQXJCNElBQW9BdkNHcndNZ0FDZ0NGQ0FBS0FJWUlBQW9BaUJCdUFGcUlBQXJBNUNIcndNZ0N5QUlJQUFvQXBpSHJ3TVEwZ1ZCQUVnTkFpQUdRVGhxSUExcUlBZ29BZ0EyQWdBZ0FrRUJhaUVDREFFTEN3SkFJQUFvQWdCQkFVY0VRQ0FHS0FKQUlRVWdCaWdDT0NFRERBRUxJQVlnQnpZQ01DQUdJQVlvQWpnaUF6WUNOQ0FHSUFvMkFpQWdCaUFHS0FJOE5nSWtJQVlnQkRZQ0tDQUdJQVlvQWtBaUJUWUNMRUVBUVFOQi9NMEFJQVpCSUdvUU9Bc0NmeUFGSUFZb0Fqd2lDVWdnQXlBRlNuSkZCRUFDUUNBQUFuOGdBQ2dDZ0lldkF5SURJQUFvQW9TSHJ3TWlCVWdFUUNBRFFRRnFEQUVMSUFNZ0JVb0VRQ0FBSUFWQkFXbzJBb1NIcndNTUFnc2dBQ0FGUVFGcU5nS0VoNjhESUFOQkFXb0xJZ00yQW9DSHJ3TUxRUUVnQXlBRWFrSC9BVTRFZnlBQVFRRTJBb0NIcndOQkFRVWdBd3NnQkVnTkFSb2dBRUVCTmdLRWg2OERRUUVNQVFzZ0FDQUtJQWNnQXlBSlNCc2lBellDRUVFQklRVUNRQ0FESUFScklnUkJBVTRFUUNBQUlBUTJBb0NIcndNTUFRc2dBRUVCTmdLQWg2OERRUUFnQkdzaEJRc2dBQ0FGTmdLRWg2OERRUUFnQUNnQ0FFRUJSdzBBR2lBR0lBTTJBaEJCQUVFRFFaZlRBQ0FHUVJCcUVEaEJBQXNoQlNBQUlBQW9BdmlHcndNMkF2eUdyd01MSUFKQkEwY05CQ0FGRFFNZ0FDZ0M5SWF2QXlFQ0N3SkFBa0FnQWtFQmF3NERBUUVBQWdzZ0FDZ0NpSWV2QXlBQktBSU1FSjhLSWdOQkFFZ05CU0FCS0FJTUlBQW9Bb2lIcndNaUFpZ0NCQ0FDS0FJSUlBQW9BZ0FnQUNnQ0RFRUFRUUFnQUVIZ2hxY0NhaUFDS0FJQUVPUURJZ05CQUU0TkFnd0ZDeUFBS0FMOGhxOERJZ05CQVU0RVFDQUFJQU5CQVdzMkF2eUdyd01NQVFzZ0FTZ0NEQ0VESUFBb0FvaUhyd01oQkFKL0lBSkJBVVlFUUNBRUlBTWdCa0hFQUdvUXNnb01BUXNnQkNBRElBWkJ4QUJxRUtnS0N5SURRWDlNRFFRQ1FDQUFLQUlBUVFGSERRQWdCaTBBUkNJQ0lBQW9BaEJHRFFBZ0FDZ0M5SWF2QXlFRElBWWdBallDQkNBR1FjM2RBRUhhNFFBZ0EwRUJSaHMyQWdCQkFFRURRWWZaQUNBR0VEZ0xJQUFnQmkwQVJEWUNFQ0FBSUFBb0F2aUdyd00yQXZ5R3J3TUxJQUVvQWd3Z0FDZ0NKQ0FBS0FJb0lBQW9BZ0FnQUNnQ0RDQUFLQUlRSUFBb0FoUWdBRUhnaHFjQ2FrRUFFT1FEUVFCSURRSUxJQUFvQWlRZ0FDZ0NLQ0FBUWVDR3B3SnFJQUFvQWhRZ0FFRzQrQUJxSWdJZ0FFR3crQUJxRU9VRlFRQklEUUZCZnlFRElBRW9BZ0FnQUNnQ0pDQUFLQUlvSUFBb0FnUWdBaUFBS0FLd2VDQUFLQUx3aHE4RElBQW9BaFFnQUNnQ0dDQUFLQUlnUWJnQmFpQUFLd09RaDY4RElBQkJNR29nQ0NBQUtBS1loNjhERU5JRlFRQklEUUlMSUFBb0FoeEJBVWNFUUNBQUtBTDRpcVlDSWdGQkFDQUJRUUJLR3lFS1FRQWhDQU5BSUFnZ0NrY0VRRUVBSVFFZ0FDZ0NMQ0lDUVFBZ0FrRUFTaHNoQkNBQUlBaEJpQUpzYWlJRlFjQ0xwZ0pxSVFjZ0JVRzRpNllDYWlFSklBVkJnSXVtQW1vaEMwRi9JUUpFQUFBQUFBQUE0RDhoRHdOQUlBRWdCRWNFUUFKQUlBc29BZ0MzSUFBZ0FVRUlkR29pQXlnQ01MY2lEcU1pRUVSbVptWm1abWJtUDJNZ0VFVGhlaFN1UitIMlAyUnlEUUFnQXlzRGFDQUpLd01Bb1NJUUlCQ2lJQU1yQTNBZ0J5c0RBS0VpRUNBUW9xQWdEcU1pRGlBUFkwRUJjdzBBSUE0aER5QUJJUUlMSUFGQkFXb2hBUXdCQ3dzQ1FDQUNRUUJJRFFCQmZ5RURBa0FDUUNBQUtBSVlJZ2tPQlFBQUFBRUJCd3NnQlVHZ2k2WUNhaXNEQUNJUUlBQWdBa0VJZEdvaUFpSUJLd05RWkVFQmN3MEJJQUVnRURrRFVDQUNJQVZCaEl1bUFtb29BZ0FpQnpZQ05DQUZRWkNMcGdKcUlRdEJBQ0VEUVg4aEJFUUFBQUFBaE5lWFFTRVBBMEJFQUFBQUFBQUFBQUFoRGtFQUlRRWdBMEVFUndSQUEwQWdBVUVFUndSQUlBNGdCU0FCUVFSMGFpSU1RYWlNcGdKcUt3TUFJQUlnQVNBRGFrRURjVUVFZEdvaURTc0QyQUdoSWc0Z0RxSWdERUd3aktZQ2Fpc0RBQ0FOS3dQZ0FhRWlEaUFPb3FDZ0lRNGdBVUVCYWlFQkRBRUxDeUFPSUE5alFRRnpSUVJBSUFzb0FnQWdBMnRCQkdwQkJHOGhCQ0FPSVE4TElBTkJBV29oQXd3QkN3c2dBa0ZBYXlBRU5nSUFJQWxCQVUwRVFDQUNJQkE1QTFnZ0FpQUhOZ0k0SUFJZ0JEWUNSQXdDQ3lBQ0lCQTVBMkFnQWlBSE5nSThJQUlnQkRZQ1NBd0JDd0pBSUFWQnFJdW1BbW9yQXdBaURpQUFJQUpCQ0hScUlnSWlBU3NEV0dSQkFYTkZCRUFnQlVHd2k2WUNhaXNEQUNFUERBRUxJQVZCc0l1bUFtb3JBd0FpRHlBQ0t3TmdaRUVCY3cwQkN5QUJJQTQ1QTFnZ0JVR0lpNllDYWlnQ0FDRUJJQUlnRHprRFlDQUNJQUUyQWpnZ0FpQUZRWXlMcGdKcUtBSUFOZ0k4UVFBaEEwRi9JUVJFQUFBQUFJVFhsMEVoRHdOQVJBQUFBQUFBQUFBQUlRNUJBQ0VCSUFOQkJFY0VRQU5BSUFGQkJFY0VRQ0FPSUFVZ0FVRUVkR29pQjBHb2pLWUNhaXNEQUNBQ0lBRWdBMnBCQTNGQkJIUnFJZ2tyQTlnQm9TSU9JQTZpSUFkQnNJeW1BbW9yQXdBZ0NTc0Q0QUdoSWc0Z0RxS2dvQ0VPSUFGQkFXb2hBUXdCQ3dzZ0F5QUVJQTRnRDJNaUFSc2hCQ0FPSUE4Z0FSc2hEeUFEUVFGcUlRTU1BUXNMSUFKQkJDQUVheUlCSUFWQmxJdW1BbW9vQWdCcVFRUnZOZ0pFSUFJZ0FTQUZRWmlMcGdKcUtBSUFha0VFYnpZQ1NBc2dDRUVCYWlFSURBRUxDeUFBRU5jRlFRQWhBVUVBSVFRRFFDQUFLQUw0aXFZQ0lBRktCRUFnQUNBQlFZZ0NiR29pQWtHQWphWUNhaUlESUFNb0FnQWlBMEVCYWpZQ0FDQURRUUpNQkVBZ0FTQUVSd1JBSUFBZ0JFR0lBbXhxUVlDTHBnSnFJQUpCZ0l1bUFtcEJpQUlRUHhvTElBUkJBV29oQkFzZ0FVRUJhaUVCREFFTEN5QUFJQVEyQXZpS3BnSWdBQ2dDTENJQlFRQWdBVUVBU2hzaEEwRUFJUVVEUUFKQUFrQWdBeUFGUmcwQUlBQWdCVUVJZEdvaUFTZ0NOQ0lJUVFCSURRRWdBVUV3YWlFSFFRQWhBU0FFUVFBZ0JFRUFTaHNoQWdOQUFrQUNmeUFCSUFKSEJFQWdBQ0FCUVlnQ2JHcEJoSXVtQW1vb0FnQWdDRWNOQWlBQklRSUxJQUlnQkVZTEJFQWdCRUU4UmcwRElBQWdCRUVCYWlJRU5nTDRpcVlDQ3lBQUlBSkJpQUpzYWlJQlFZQ0xwZ0pxSUFkQmdBSVFQeG9nQVVHQWphWUNha0VCTmdJQURBTUxJQUZCQVdvaEFRd0FDd0FMUVFBaEF5QUFLQUljUVFKR0RRUkJBQ0VDQTBBZ0FpQUVUZzBGUVFBaEFTQUFLQUlzSWdWQkFDQUZRUUJLR3lFSUlBQWdBa0dJQW14cUlnZEJ3SXVtQW1vaENTQUhRYmlMcGdKcUlRc2dCMEdBaTZZQ2FpRUhBMEFDUUNBQklBaEhCSDhnQnlnQ0FMY2dBQ0FCUVFoMGFpSUtLQUl3dHlJUG95SU9SR1ptWm1abVp1WS9ZeUFPUk9GNkZLNUg0ZlkvWkhJTkFTQUtLd05vSUFzckF3Q2hJZzRnRHFJZ0Npc0RjQ0FKS3dNQW9TSU9JQTZpb0NBUG8wUUFBQUFBQUFEZ1AyTkZEUUVnQVFVZ0NBc2dCVVlFUUNBQUlBVkJDSFJxUVRCcUlBZEJnQUlRUHhvZ0FDQUFLQUlzUVFGcU5nSXNJQUFvQXZpS3BnSWhCQXNnQWtFQmFpRUNEQUlMSUFGQkFXb2hBUXdBQ3dBTEFBc2dCVUVCYWlFRkRBQUxBQXNnQUJEWEJVRUFJUU1NQVF0QmZ5RURDeUFHUWRBQWFpUUFJQU1MTFFBZ0F5QURLQUlBSUFJZ0FXc2lBRUYwYlVFTWJHb2lBallDQUNBQVFRRk9CRUFnQWlBQklBQVFQeG9MQzFBQkFYOGdBQkNQQWlBQUVEUWdBQ2dDQUNBQUtBSUVJQUZCQkdvaUFoRHFDaUFBSUFJUVNTQUFRUVJxSUFGQkNHb1FTU0FBRURRZ0FSQTlFRWtnQVNBQktBSUVOZ0lBSUFBZ0FCQlhFSkFEQzJvQkFuOGpBRUVRYXlJRUpBQWdCRUVBTmdJTUlBQkJER29nQkVFTWFpQURFTEVCSUFFRVFDQUFLQUlRR2lBQkVOZ0ZJUVVMSUFBZ0JUWUNBQ0FBSUFVZ0FrRU1iR29pQWpZQ0NDQUFJQUkyQWdRZ0FCQTlJQVVnQVVFTWJHbzJBZ0FnQkVFUWFpUUFJQUFMSlFBRFFDQUJJQUFvQWdoSEJFQWdBQ2dDRUJvZ0FDQUFLQUlJUVJSck5nSUlEQUVMQ3dzSEFDQUFLQUlFQ3lRQkFuOGpBRUVRYXlJQ0pBQWdBU0FBRVBFQklRTWdBa0VRYWlRQUlBRWdBQ0FER3dza0FRSi9Jd0JCRUdzaUFpUUFJQUFnQVJEeEFTRURJQUpCRUdva0FDQUJJQUFnQXhzTE1BQURRQ0FCSUFKSEJFQWdBQ0FES0FJQVFSUnJJQUpCRkdzaUFoQ1JBeUFESUFNb0FnQkJGR3MyQWdBTUFRc0xDNkFGQWd0L0FYd2pBRUh3QUdzaUFpUUFJQUVvQWhoQkFXc2lBMEVCSUFOQkFVb2JJUWtnQVVIY3VBSnFJUWNnQVVFY2FpRUlJQUVvQXR5NEFpRUtJQUVvQWh3aEMwRUFJUU5CQVNFRUEwQWdCQ0FKUndSQUlBRWdCRUVDZEdvaUJrSGN1QUpxS0FJQUlBcHJJZ3dnREd3Z0JpZ0NIQ0FMYXlJR0lBWnNhaUlHSUFVZ0JTQUdTQ0lHR3lFRklBUWdBeUFHR3lFRElBUkJBV29oQkF3QkN3c2dBa0VBTmdJTUlBSkJBRFlDUEFKQUlBZ2dCMEVBSUFNZ0FMZEVBQUFBQUFBQTZEK2pSSHNVcmtmaGVvUS9va1FBQUFBQUFBRHdQNklpRFNBQ1FVQnJJQUpCUEdvUThBRkJBRWdFUUVGL0lRUU1BUXRCZnlFRUlBZ2dCeUFESUFFb0FoaEJBV3NnRFNBQ1FSQnFJQUpCREdvUThBRkJBRWdOQUFKL0lBSW9BandpQUVFQlJ5QUNLQUlNSWdWQkFVZHlSUVJBSUFJb0FoQWhCU0FESVFBZ0FpZ0NRQXdCQ3lBQVFRSklJQVZ5UlFSQUlBSkJBRFlDUENBQ1FRQTJBZ3dnQ0NBSFFRQWdBMEVDYlNJQUlBMGdBa0ZBYXlBQ1FUeHFFUEFCUVFCSURRSWdDQ0FISUFBZ0F5QU5JQUpCRUdvZ0FrRU1haER3QVVFQVNBMENJQUlvQWp4QkFVY05BaUFDS0FJTVFRRkhEUUlnQWlnQ0VDRUFJQU1oQlNBQ0tBSkFEQUVMSUFBZ0JVRUNTSElOQVNBQktBSVlJUUFnQWtFQU5nSThJQUpCQURZQ0RDQUlJQWNnQXlBQUlBTnFRUUZyUVFKdElnQWdEU0FDUVVCcklBSkJQR29ROEFGQkFFZ05BU0FJSUFjZ0FDQUJLQUlZUVFGcklBMGdBa0VRYWlBQ1FReHFFUEFCUVFCSURRRWdBaWdDUEVFQlJ3MEJJQUlvQWd4QkFVY05BU0FDS0FJUUlRVWdBaWdDUUNFQUlBTUxJUU5CQUNFRUlBRkJBRFlDblBFRUlBRkJxUEVFYWlBRk5nSUFJQUZCcFBFRWFpQUFOZ0lBSUFGQm9QRUVhaUFETmdJQUlBRkJyUEVFYWlBQktBSVlRUUZyTmdJQUN5QUNRZkFBYWlRQUlBUUxxUWNCQ0g4akFFR0E4UVJySWdva0FDQUFJQVFvQWdBaUJpQUVLQUlJSWdnZ0FXeHFRUUYwYWlFSElBUW9BZ1FoQkFKL0FrQUNRQU5BSUFRZ0JrZ05BUUpBSUFjdUFRQWlDVUVCVGdSQUlBbEIvLzhEY1VFQ2RDQUNha0VFYXlnQ0FDQURSZzBCQ3lBSFFRSnFJUWNnQmtFQmFpRUdEQUVMQ3lBR1FYOUhEUUVMUVFCQkEwR2lDMEVBRURoQmZ3d0JDeUFGSUFnMkF0eTRBaUFGSUFZMkFod2dCVUVCTmdJWUlBVkJIR29oQ1NBR0lRSWdDQ0VFUVFFaEEwRUZJUWNDUUFOQUlBZEJCV29oQnlBQUlBRWdCR3dnQW1wQkFYUnFJUXRCQUNFRUFrQURRQUpBSUFkQkNHOGhCeUFFUVFoR0RRQWdDeUFIUVFKMElneEI0TWdBYWlnQ0FDSU5JQUZzSUF4QndNZ0FhaWdDQUNJTWFrRUJkR291QVFCQkFFb05BaUFFUVFGcUlRUWdCMEVCYWlFSERBRUxDMEVBUVFOQnFSVkJBQkE0UVg4TUF3c2dDU0FEUVFKMGFpQUNJQXhxTmdJQUlBVWdCU2dDR0VFQ2RHb2lBa0hjdUFKcUlBMGdBa0hZdUFKcUtBSUFhallDQUFKQUlBa2dCU2dDR0NJRVFRSjBJZ0pxSWdzb0FnQWdCa2NOQUNBQ0lBVnFRZHk0QW1vb0FnQWdDRWNOQUNBRVFRRWdCRUVCU2hzaEFVRUFJUUpCQUNFQVFRRWhCd3dDQ3lBRklBUkJBV29pQXpZQ0dDQURRWS9PQUVjRVFDQUNJQVZxUWR5NEFtb29BZ0FoQkNBTEtBSUFJUUlNQVFzTFFRQkJBMEcySVVFQUVEaEJmd3dCQ3dOQUlBRWdCMGNFUUNBRklBZEJBblJxSWdOQjNMZ0NhaWdDQUNBSWF5SUpJQWxzSUFNb0Fod2dCbXNpQXlBRGJHb2lBeUFDSUFJZ0EwZ2lBeHNoQWlBSElBQWdBeHNoQUNBSFFRRnFJUWNNQVFzTFFRQWhCaUFBUVFBZ0FFRUFTaHNoQVFOL0lBRWdCa1lFZnlBRlFSeHFJUUlnQlVIY3VBSnFJUU1nQUNFR0EzOGdCQ0FHVEFSL1FRQWhCZ05BSUFFZ0JrY0VRQ0FGSUFZZ0FHc2lBaUFGS0FJWWFrRUNkR29nQmtFQ2RDSURJQXBCd0xnQ2Ftb29BZ0EyQWh3Z0JTQUZLQUlZSUFKcVFRSjBha0hjdUFKcUlBTWdDbW9vQWdBMkFnQWdCa0VCYWlFR0RBRUxDeUFGUVJ4cUlBVW9BaGhCQW5ScUlBVW9BaHcyQWdBZ0JVSGN1QUpxSUFVb0FoaEJBblJxSUFVb0F0eTRBallDQUNBRklBVW9BaGhCQVdvMkFoaEJBQVVnQWlBR0lBQnJRUUowSWdScUlBSWdCa0VDZENJSWFpZ0NBRFlDQUNBRElBUnFJQU1nQ0dvb0FnQTJBZ0FnQmtFQmFpRUdJQVVvQWhnaEJBd0JDd3NGSUFaQkFuUWlBaUFLUWNDNEFtcHFJQUlnQldvaUF5Z0NIRFlDQUNBQ0lBcHFJQU5CM0xnQ2FpZ0NBRFlDQUNBR1FRRnFJUVlNQVFzTEN5RUFJQXBCZ1BFRWFpUUFJQUFMdWdFQkFYOGpBRUVRYXlJQ0pBQUNRQ0FBUlEwQUlBQW9BZ1FnQVVZTkFDQUJRUTVOQkVBQ1FBSkFRUUVnQVhSQjN4OXhCRUFnQUNBQk5nSUVJQUFnQVJDZEJUWUNDQ0FBS0FJWVFRRnJEZ1FCQkFRQ0JBc2dBQ0FCTmdJRUlBQWdBUkNkQlRZQ0NBSkFBa0FnQUNnQ0dBNEVBQVVGQVFVTElBQkJBVFlDR0F3RUN5QUFRUVEyQWhnTUF3c2dBRUVFTmdJWURBSUxJQUJCQXpZQ0dBd0JDeUFDSUFFMkFnQkJBRUVEUWFIQ0FDQUNFRGdMSUFKQkVHb2tBQXNIQUNBQUtBSU1DeUFCQVg5QmZ5RUNJQUJGSUFGQkFVdHlCSDlCZndVZ0FDQUJOZ0lVUVFBTEN6MEJBWDhnQUNnQ0dDSUNJQUFvQWh4R0JFQWdBQ0FCRU1NQklBQW9BZ0FvQWpRUkF3QVBDeUFBSUFKQkFXbzJBaGdnQWlBQk9nQUFJQUVRd3dFTEpBRUJmMEYvSVFJZ0FFVWdBVVZ5Qkg5QmZ3VWdBU0FBS0FMMGhxOEROZ0lBUVFBTEM4OFNBZzkvQVh3Z0FVRUFJQUZCQUVvYklRa2dCQ2dDQUNJR0lBSkJBV3NpRFNBQmJFRUJkR29oQnlBR0lRZ0RRQ0FGSUFsR1JRUkFJQWRCQURzQkFDQUlRUUE3QVFBZ0JVRUJhaUVGSUFoQkFtb2hDQ0FIUVFKcUlRY01BUXNMSUFKQkFDQUNRUUJLR3lFS0lBWWdBVUVCYXlJTFFRRjBhaUVIUVFBaEJTQUdJUWdEUUNBRklBcEdSUVJBSUFkQkFEc0JBQ0FJUVFBN0FRQWdCVUVCYWlFRklBY2dBVUVCZENJSmFpRUhJQWdnQ1dvaENBd0JDd3NnRFVFQklBMUJBVW9iSVE4Z0JFR1FnTWdBYWlFSklBQWdBVUVCYWlJRmFpRU9JQXRCQVNBTFFRRktHeUlRUVFGcklSRWdCaUFGUVFGMGFpRUlRUUFnQVd0QkFYUWhFa0VBSVF0QkFTRUFBa0FEUUNBQUlBOUhCRUFnRGlBUmFpRVRRUUVoQndOQUFrQUNRQUpBSUFjZ0VFY0VRQ0FESUE0dEFBQk9CRUFnQ0NBU2FpSU5Md0VBSWdaQkVIUkJFSFVpQlVFQlRnUkFJQWdnQlRzQkFDQUVJQVpCSEd4cUlnWkJqSURRQUdvZ0FEWUNBQ0FHUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBR1Fmai96d0JxSWdVZ0JTZ0NBQ0FIYWpZQ0FDQUdRZnovendCcUlnVWdCU2dDQUNBQWFqWUNBQXdGQ3lBTlFRSnJMd0VBSWdwQkVIUkJFSFVoQlNBTkxnRUNJZ1pCQVU0RVFDQUZRUUZPQkVBZ0JFR1FnTWdBYWlJRklBWkJBblJxUVFScktBSUFJZ1lnQ2tFQ2RDQUZha0VFYXlnQ0FDSUtTZ1JBSUFnZ0Nqc0JBRUVBSVF3Z0MwRUFJQXRCQUVvYklRMGdDU0VGQTBBZ0RDQU5SZ1JBSUFvaEJnd0lDeUFHSUFVb0FnQkdCRUFnQlNBS05nSUFDeUFNUVFGcUlRd2dCVUVFYWlFRkRBQUxBQXNnQ0NBR093RUFJQVlnQ2s0TkJVRUFJUXdnQzBFQUlBdEJBRW9iSVEwZ0NTRUZBMEFnRENBTlJnMEdJQW9nQlNnQ0FFWUVRQ0FGSUFZMkFnQUxJQXhCQVdvaERDQUZRUVJxSVFVTUFBc0FDeUFJUVFKckxnRUFJZ3BCQVU0RVFDQUVRWkNBeUFCcUlnVWdCa0VDZEdwQkJHc29BZ0FpQmlBS1FmLy9BM0ZCQW5RZ0JXcEJCR3NvQWdBaUNrb0VRQ0FJSUFvN0FRQkJBQ0VNSUF0QkFDQUxRUUJLR3lFTklBa2hCUU5BSUF3Z0RVWUVRQ0FLSVFZTUJ3c2dCaUFGS0FJQVJnUkFJQVVnQ2pZQ0FBc2dERUVCYWlFTUlBVkJCR29oQlF3QUN3QUxJQWdnQmpzQkFDQUdJQXBPRFFSQkFDRU1JQXRCQUNBTFFRQktHeUVOSUFraEJRTkFJQXdnRFVZTkJTQUtJQVVvQWdCR0JFQWdCU0FHTmdJQUN5QU1RUUZxSVF3Z0JVRUVhaUVGREFBTEFBc2dDQ0FHT3dFQUlBUWdCa0VIYkVFQ2RHb2lCa0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQmtINC84OEFhaUlGSUFVb0FnQWdCMm8yQWdBZ0JrSDgvODhBYWlJRklBVW9BZ0FnQUdvMkFnQWdCeUFHUVlDQTBBQnFJZ1VvQWdCSUJFQWdCU0FITmdJQUN5QUdRWXlBMEFCcUlBQTJBZ0FNQlFzZ0JVRUJUZ1JBSUFnZ0JUc0JBQ0FFSUFwQkIyeEJBblJxSWdaQjlQL1BBR29pQlNBRktBSUFRUUZxTmdJQUlBWkIrUC9QQUdvaUJTQUZLQUlBSUFkcU5nSUFJQVpCL1AvUEFHb2lCU0FGS0FJQUlBQnFOZ0lBSUFjZ0JrR0VnTkFBYWlJRktBSUFTZ1JBSUFVZ0J6WUNBQXNnQmtHTWdOQUFhaUFBTmdJQURBVUxJQWhCQW1zdkFRQWlCa0VRZEVFUWRTSUZRUUZPQkVBZ0NDQUZPd0VBSUFRZ0JrRWNiR29pQmtIMC84OEFhaUlGSUFVb0FnQkJBV28yQWdBZ0JrSDQvODhBYWlJRklBVW9BZ0FnQjJvMkFnQWdCa0g4Lzg4QWFpSUZJQVVvQWdBZ0FHbzJBZ0FnQmtHRWdOQUFhaUlGS0FJQUlBZE9EUVVnQlNBSE5nSUFEQVVMSUF0QmdJQUNUZ1JBUVFCQkEwR2dDRUVBRURoQmZ5RUdEQWtMSUFnZ0MwRUJhaUlGT3dFQUlBUWdDMEVDZEdwQmtJRElBR29nQlVFUWRFRVFkVFlDQUNBRUlBdEJIR3hxSWdaQmxJRFFBR29nQnpZQ0FDQUdRWkNBMEFCcVFRRTJBZ0FnQmtHWWdOQUFhaUFBTmdJQUlBWkJuSURRQUdvZ0J6WUNBQ0FHUWFDQTBBQnFJQWMyQWdBZ0JrR2tnTkFBYWlBQU5nSUFJQVpCcUlEUUFHb2dBRFlDQUNBRklRc01CQXNnQ0VFQU93RUFEQU1MSUFoQkJHb2hDQ0FUUVFKcUlRNGdBRUVCYWlFQURBVUxJQVFnQmtFUWRFRVFkVUVjYkdvaUJrSDAvODhBYWlJRklBVW9BZ0JCQVdvMkFnQWdCa0g0Lzg4QWFpSUZJQVVvQWdBZ0IybzJBZ0FnQmtIOC84OEFhaUlGSUFVb0FnQWdBR28yQWdBTUFRc2dCQ0FHUVJCMFFSQjFRUnhzYWlJR1FZeUEwQUJxSUFBMkFnQWdCa0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQmtINC84OEFhaUlGSUFVb0FnQWdCMm8yQWdBZ0JrSDgvODhBYWlJRklBVW9BZ0FnQUdvMkFnQUxJQWhCQW1vaENDQU9RUUZxSVE0Z0IwRUJhaUVIREFBTEFBc0xJQXRCQUNBTFFRQktHeUlHUVFGcUlRTkJBU0VGUVFFaENBTkFJQU1nQlVaRkJFQUNRQ0FGSUFrb0FnQWlBRVlFUUNBSUlnZEJBV29oQ0F3QkN5QUFRUUowSUFScVFZeUF5QUJxS0FJQUlRY0xJQWtnQnpZQ0FDQUpRUVJxSVFrZ0JVRUJhaUVGREFFTEN5QUVJQWhCQVdzaUFEWUNDQ0FBUlFSQVFRQVBDMEVBSVFjZ0JFRU1ha0VBSUFCQkFuUVFPeG9nQkVHUWdDaHFRUUFnQUVFRWRCQTdHaUFBUVFBZ0FFRUFTaHNoQUNBRVFZeUFDR29oQ1VFQUlRVURRQ0FBSUFWR0JFQWdCRUdRZ0NocUlRa0RRQ0FHSUFkR0JFQkJBQ0VHSUFRb0FnZ2lBRUVBSUFCQkFFb2JJUUlnQkVHUWdDaHFJUU5CQUNFRkEwQWdBaUFGUmcwRklBTWdCVUVFZENJQmFpSUFJQUFyQXdBZ0JDQUZRUUowYWlnQ0RMY2lGS001QXdBZ0F5QUJRUWh5YWlJQUlBQXJBd0FnRktNNUF3QWdCVUVCYWlFRkRBQUxBQXNnQkNBRUlBZEJBblJxUVpDQXlBQnFLQUlBUVFGcklnRkJBblFpQW1vaUFFRU1haUFBS0FJTUlBUWdCMEVIYkVFQ2RHb2lCVUdRZ05BQWFpZ0NBR28yQWdBZ0NTQUJRUVIwSWdOcUlnQWdBQ3NEQUNBRlFaU0EwQUJxS0FJQXQ2QTVBd0FnQ1NBRFFRaHlhaUlBSUFBckF3QWdCVUdZZ05BQWFpZ0NBTGVnT1FNQUlBVkJuSURRQUdvb0FnQWlBU0FESUFScVFZeUFDR29pQUNnQ0FFZ0VRQ0FBSUFFMkFnQUxJQVZCb0lEUUFHb29BZ0FpQVNBRUlBSkJBblFpQWtFRWNtcEJqSUFJYWlJQUtBSUFTZ1JBSUFBZ0FUWUNBQXNnQlVHa2dOQUFhaWdDQUNJQklBUWdBa0VJY21wQmpJQUlhaUlBS0FJQVNBUkFJQUFnQVRZQ0FBc2dCVUdvZ05BQWFpZ0NBQ0lCSUFRZ0FrRU1jbXBCaklBSWFpSUFLQUlBU2dSQUlBQWdBVFlDQUFzZ0IwRUJhaUVIREFBTEFBVWdDU0FGUVFSMElnTnFJQUUyQWdBZ0NTQURRUVJ5YWtFQU5nSUFJQWtnQTBFSWNtb2dBallDQUNBSklBTkJESEpxUVFBMkFnQWdCVUVCYWlFRkRBRUxBQXNBQ3lBR0N5VUFJQUVnQWlBRElBUWdCU0FHclNBSHJVSWdob1FnQ0swZ0NhMUNJSWFFSUFBUklRQUxJd0FnQVNBQ0lBTWdCQ0FGclNBR3JVSWdob1FnQjYwZ0NLMUNJSWFFSUFBUklnQUxHUUFnQVNBQ0lBTWdCQ0FGclNBR3JVSWdob1FnQUJFWkFBc1pBQ0FCSUFJZ0E2MGdCSzFDSUlhRUlBVWdCaUFBRVNrQUN5SUJBWDRnQVNBQ3JTQURyVUlnaG9RZ0JDQUFFUlVBSWdWQ0lJaW5FQUlnQmFjTEJnQWdBQ1FBQ3dRQUl3QUxXUUVCZnlBQUlBQXRBRW9pQVVFQmF5QUJjam9BU2lBQUtBSUFJZ0ZCQ0hFRVFDQUFJQUZCSUhJMkFnQkJmdzhMSUFCQ0FEY0NCQ0FBSUFBb0Fpd2lBVFlDSENBQUlBRTJBaFFnQUNBQklBQW9BakJxTmdJUVFRQUxSQUlCZmdGL0lBRkMvLy8vLy8vL1A0TWhBZ0ovSUFGQ01JaW5RZi8vQVhFaUEwSC8vd0ZIQkVCQkJDQUREUUVhUVFKQkF5QUFJQUtFVUJzUEN5QUFJQUtFVUFzTG93TUNBMzRDZndKQUlBQzlJZ05DTklpblFmOFBjU0lFUWY4UFJ3MEFJQUJFR0MxRVZQc2hHVUNpSWdBZ0FLTVBDeUFEUWdHR0lnRkNzTFNoeE9yK2tKbUFmMVlFUUFKK0lBUkZCRUJCQUNFRUlBTkNESVlpQVVJQVdRUkFBMEFnQkVFQmF5RUVJQUZDQVlZaUFVSi9WUTBBQ3dzZ0EwRUJJQVJycllZTUFRc2dBMEwvLy8vLy8vLy9CNE5DZ0lDQWdJQ0FnQWlFQ3lFQklBUkJnUWhLQkVBRFFBSkFJQUZDbU5xUW9yVy95QXg5SWdKQ0FGTU5BQ0FDSWdGQ0FGSU5BQ0FBUkFBQUFBQUFBQUFBb2c4TElBRkNBWVloQVNBRVFRRnJJZ1JCZ1FoS0RRQUxRWUVJSVFRTEFrQWdBVUtZMnBDaXRiL0lESDBpQWtJQVV3MEFJQUlpQVVJQVVnMEFJQUJFQUFBQUFBQUFBQUNpRHdzQ1FDQUJRdi8vLy8vLy8vOEhWZ1JBSUFFaEFnd0JDd05BSUFSQkFXc2hCQ0FCUW9DQWdJQ0FnSUFFVkNFRklBRkNBWVlpQWlFQklBVU5BQXNMSUFOQ2dJQ0FnSUNBZ0lDQWY0TWdBa0tBZ0lDQWdJQ0FDSDBnQksxQ05JYUVJQUpCQVNBRWE2MklJQVJCQVU0YmhMOFBDeUFBUkFBQUFBQUFBQUFBb2lBQUlBRkNzTFNoeE9yK2tKbUFmMUViQzV3SEFRbC9JQUFvQWdRaUJrRjRjU0VDQWtBZ0JrRURjVVVFUUNBQlFZQUNTUVJBUVFBUEN5QUJRUVJxSUFKTkJFQWdBQ0VESUFJZ0FXdEI4TEFFS0FJQVFRRjBUUTBDQzBFQUR3c2dBQ0FDYWlFRUFrQWdBU0FDVFFSQUlBSWdBV3NpQTBFUVNRMEJJQUFnQmtFQmNTQUJja0VDY2pZQ0JDQUFJQUZxSWdFZ0EwRURjallDQkNBRUlBUW9BZ1JCQVhJMkFnUWdBU0FERVBBRkRBRUxJQVJCcUswRUtBSUFSZ1JBUVp5dEJDZ0NBQ0FDYWlJQ0lBRk5EUUlnQUNBR1FRRnhJQUZ5UVFKeU5nSUVJQUFnQVdvaUF5QUNJQUZySWdGQkFYSTJBZ1JCbkswRUlBRTJBZ0JCcUswRUlBTTJBZ0FNQVFzZ0JFR2tyUVFvQWdCR0JFQkJtSzBFS0FJQUlBSnFJZ0lnQVVrTkFnSkFJQUlnQVdzaUEwRVFUd1JBSUFBZ0JrRUJjU0FCY2tFQ2NqWUNCQ0FBSUFGcUlnRWdBMEVCY2pZQ0JDQUFJQUpxSWdJZ0F6WUNBQ0FDSUFJb0FnUkJmbkUyQWdRTUFRc2dBQ0FHUVFGeElBSnlRUUp5TmdJRUlBQWdBbW9pQVNBQktBSUVRUUZ5TmdJRVFRQWhBMEVBSVFFTFFhU3RCQ0FCTmdJQVFaaXRCQ0FETmdJQURBRUxJQVFvQWdRaUJVRUNjUTBCSUFWQmVIRWdBbW9pQnlBQlNRMEJJQWNnQVdzaENRSkFJQVZCL3dGTkJFQWdCQ2dDQ0NJRElBVkJBM1lpQlVFRGRFRzRyUVJxUmhvZ0F5QUVLQUlNSWdKR0JFQkJrSzBFUVpDdEJDZ0NBRUYrSUFWM2NUWUNBQXdDQ3lBRElBSTJBZ3dnQWlBRE5nSUlEQUVMSUFRb0FoZ2hDQUpBSUFRZ0JDZ0NEQ0lDUndSQUlBUW9BZ2dpQTBHZ3JRUW9BZ0JKR2lBRElBSTJBZ3dnQWlBRE5nSUlEQUVMQWtBZ0JFRVVhaUlGS0FJQUlnTU5BQ0FFUVJCcUlnVW9BZ0FpQXcwQVFRQWhBZ3dCQ3dOQUlBVWhDaUFESWdKQkZHb2lCU2dDQUNJRERRQWdBa0VRYWlFRklBSW9BaEFpQXcwQUN5QUtRUUEyQWdBTElBaEZEUUFDUUNBRUlBUW9BaHdpQTBFQ2RFSEFyd1JxSWdVb0FnQkdCRUFnQlNBQ05nSUFJQUlOQVVHVXJRUkJsSzBFS0FJQVFYNGdBM2R4TmdJQURBSUxJQWhCRUVFVUlBZ29BaEFnQkVZYmFpQUNOZ0lBSUFKRkRRRUxJQUlnQ0RZQ0dDQUVLQUlRSWdNRVFDQUNJQU0yQWhBZ0F5QUNOZ0lZQ3lBRUtBSVVJZ05GRFFBZ0FpQUROZ0lVSUFNZ0FqWUNHQXNnQ1VFUFRRUkFJQUFnQmtFQmNTQUhja0VDY2pZQ0JDQUFJQWRxSWdFZ0FTZ0NCRUVCY2pZQ0JBd0JDeUFBSUFaQkFYRWdBWEpCQW5JMkFnUWdBQ0FCYWlJQklBbEJBM0kyQWdRZ0FDQUhhaUlESUFNb0FnUkJBWEkyQWdRZ0FTQUpFUEFGQ3lBQUlRTUxJQU1MR3dBZ0FDQUJLQUlJSUFVUWZnUkFJQUVnQWlBRElBUVFnUVFMQ3pnQUlBQWdBU2dDQ0NBRkVINEVRQ0FCSUFJZ0F5QUVFSUVFRHdzZ0FDZ0NDQ0lBSUFFZ0FpQURJQVFnQlNBQUtBSUFLQUlVRVF3QUM1WUNBUVovSUFBZ0FTZ0NDQ0FGRUg0RVFDQUJJQUlnQXlBRUVJRUVEd3NnQVMwQU5TRUhJQUFvQWd3aEJpQUJRUUE2QURVZ0FTMEFOQ0VJSUFGQkFEb0FOQ0FBUVJCcUlna2dBU0FDSUFNZ0JDQUZFUDhESUFjZ0FTMEFOU0lLY2lFSElBZ2dBUzBBTkNJTGNpRUlBa0FnQmtFQ1NBMEFJQWtnQmtFRGRHb2hDU0FBUVJocUlRWURRQ0FCTFFBMkRRRUNRQ0FMQkVBZ0FTZ0NHRUVCUmcwRElBQXRBQWhCQW5FTkFRd0RDeUFLUlEwQUlBQXRBQWhCQVhGRkRRSUxJQUZCQURzQk5DQUdJQUVnQWlBRElBUWdCUkQvQXlBQkxRQTFJZ29nQjNJaEJ5QUJMUUEwSWdzZ0NISWhDQ0FHUVFocUlnWWdDVWtOQUFzTElBRWdCMEgvQVhGQkFFYzZBRFVnQVNBSVFmOEJjVUVBUnpvQU5BdVNBUUFnQUNBQktBSUlJQVFRZmdSQUlBRWdBaUFERUlBRUR3c0NRQ0FBSUFFb0FnQWdCQkIrUlEwQUFrQWdBaUFCS0FJUVJ3UkFJQUVvQWhRZ0FrY05BUXNnQTBFQlJ3MEJJQUZCQVRZQ0lBOExJQUVnQWpZQ0ZDQUJJQU0yQWlBZ0FTQUJLQUlvUVFGcU5nSW9Ba0FnQVNnQ0pFRUJSdzBBSUFFb0FoaEJBa2NOQUNBQlFRRTZBRFlMSUFGQkJEWUNMQXNMOHdFQUlBQWdBU2dDQ0NBRUVINEVRQ0FCSUFJZ0F4Q0FCQThMQWtBZ0FDQUJLQUlBSUFRUWZnUkFBa0FnQWlBQktBSVFSd1JBSUFFb0FoUWdBa2NOQVFzZ0EwRUJSdzBDSUFGQkFUWUNJQThMSUFFZ0F6WUNJQUpBSUFFb0FpeEJCRVlOQUNBQlFRQTdBVFFnQUNnQ0NDSUFJQUVnQWlBQ1FRRWdCQ0FBS0FJQUtBSVVFUXdBSUFFdEFEVUVRQ0FCUVFNMkFpd2dBUzBBTkVVTkFRd0RDeUFCUVFRMkFpd0xJQUVnQWpZQ0ZDQUJJQUVvQWloQkFXbzJBaWdnQVNnQ0pFRUJSdzBCSUFFb0FoaEJBa2NOQVNBQlFRRTZBRFlQQ3lBQUtBSUlJZ0FnQVNBQ0lBTWdCQ0FBS0FJQUtBSVlFUWNBQ3d1SkJBSUZmd0Y5SXdCQjRBRnJJZ2NrQUVGL0lRWUNRQUpBSUFFUVJrRUVTUTBBQWtBZ0FSQkdRUVIwRURvaUNBUkFJQUVRUmtFWWJCQTZJZ2xGRFFOQkFDRUdBMEFnQVJCR0lBWk5SUVJBSUFnZ0JrRUVkR29pQ2lBRElBRWdCaEJRS0FJQUVHb3FBZ0M3T1FNQUlBb2dBeUFCSUFZUVVDZ0NBQkJxS2dJRXV6a0RDQ0FKSUFaQkdHeHFJZ29nQWlBQklBWVFVQ2dDQkJDY0FTb0NBTHM1QXdBZ0FpQUJJQVlRVUNnQ0JCQ2NBU29DQkNFTElBcENBRGNERUNBS0lBdTdPUU1JSUFaQkFXb2hCZ3dCQ3dzZ0J5QUpOZ0xVQVNBSElBZzJBdEFCSUFjZ0JqWUMyQUZCZnlFR0lBQkJDR29pQUNBSUlBa2dBUkJHSUFkQjhBQnFFTHNPUVg5TUJFQWdDQkF6SUFrUU13d0RDeUFISUFBUXRRUWlBRFlDM0FFZ0FFVUVRQ0FJRURNZ0NSQXpEQU1MSUFBZ0IwSFFBV29nQjBId0FHb2dCeUFIUWVnQWFoQ2pCMEYvVEEwQlFRQWhBUU5BUVFBaEJpQUJRUU5HQkVBZ0IwSGNBV29RdEFRZ0NCQXpJQWtRTXlBRklBY3JBMmkySWdzNEFnQkJmeUVHSUF0REFBQWdRVjROQkVFQUlRWU1CQVVEUUNBR1FRUkdSUVJBSUFRZ0FVRUVkR29nQmtFQ2RHb2dCeUFCUVFWMGFpQUdRUU4wYWlzREFMWTRBZ0FnQmtFQmFpRUdEQUVMQ3lBQlFRRnFJUUVNQVFzQUN3QUxEQUlMSUFnUU15QUpFRE1nQjBIY0FXb1F0QVFMSUFkQjRBRnFKQUFnQmc4TFFRQkJBMEdCMFFCQkFCQTRRUUVRQVFBTHBRUUJCSDhnQUNBQktBSUlJQVFRZmdSQUlBRWdBaUFERUlBRUR3c0NRQ0FBSUFFb0FnQWdCQkIrQkVBQ1FDQUNJQUVvQWhCSEJFQWdBU2dDRkNBQ1J3MEJDeUFEUVFGSERRSWdBVUVCTmdJZ0R3c2dBU0FETmdJZ0lBRW9BaXhCQkVjRVFDQUFRUkJxSWdVZ0FDZ0NERUVEZEdvaENDQUJBbjhDUUFOQUFrQWdCU0FJVHcwQUlBRkJBRHNCTkNBRklBRWdBaUFDUVFFZ0JCRC9BeUFCTFFBMkRRQUNRQ0FCTFFBMVJRMEFJQUV0QURRRVFFRUJJUU1nQVNnQ0dFRUJSZzBFUVFFaEIwRUJJUVlnQUMwQUNFRUNjUTBCREFRTFFRRWhCeUFHSVFNZ0FDMEFDRUVCY1VVTkF3c2dCVUVJYWlFRkRBRUxDeUFHSVFOQkJDQUhSUTBCR2d0QkF3czJBaXdnQTBFQmNRMENDeUFCSUFJMkFoUWdBU0FCS0FJb1FRRnFOZ0lvSUFFb0FpUkJBVWNOQVNBQktBSVlRUUpIRFFFZ0FVRUJPZ0EyRHdzZ0FDZ0NEQ0VHSUFCQkVHb2lCU0FCSUFJZ0F5QUVFSlFESUFaQkFrZ05BQ0FGSUFaQkEzUnFJUVlnQUVFWWFpRUZBa0FnQUNnQ0NDSUFRUUp4UlFSQUlBRW9BaVJCQVVjTkFRc0RRQ0FCTFFBMkRRSWdCU0FCSUFJZ0F5QUVFSlFESUFWQkNHb2lCU0FHU1EwQUN3d0JDeUFBUVFGeFJRUkFBMEFnQVMwQU5nMENJQUVvQWlSQkFVWU5BaUFGSUFFZ0FpQURJQVFRbEFNZ0JVRUlhaUlGSUFaSkRRQU1BZ3NBQ3dOQUlBRXRBRFlOQVNBQktBSWtRUUZHQkVBZ0FTZ0NHRUVCUmcwQ0N5QUZJQUVnQWlBRElBUVFsQU1nQlVFSWFpSUZJQVpKRFFBTEN3dW5BUUVDZndKQUEwQWdBVVVFUUVFQUR3c2dBVUdrNlFOQnRPb0RFTElCSWdGRkRRRWdBU2dDQ0NBQUtBSUlRWDl6Y1EwQklBQW9BZ3dnQVNnQ0RFRUFFSDRFUUVFQkR3c2dBQzBBQ0VFQmNVVU5BU0FBS0FJTUlnTkZEUUVnQTBHazZRTkJ0T29ERUxJQklnTUVRQ0FCS0FJTUlRRWdBeUVBREFFTEN5QUFLQUlNSWdCRkRRQWdBRUdrNlFOQnBPc0RFTElCSWdCRkRRQWdBQ0FCS0FJTUVQRUZJUUlMSUFJTGdRUUJCSDhqQUVGQWFpSUZKQUFDUUNBQlFaRHNBMEVBRUg0RVFDQUNRUUEyQWdCQkFTRUREQUVMSUFBZ0FSQ09Dd1JBUVFFaEF5QUNLQUlBSWdCRkRRRWdBaUFBS0FJQU5nSUFEQUVMQWtBZ0FVVU5BQ0FCUWFUcEEwRzA2Z01Rc2dFaUFVVU5BU0FDS0FJQUlnUUVRQ0FDSUFRb0FnQTJBZ0FMSUFFb0FnZ2lCQ0FBS0FJSUlnWkJmM054UVFkeElBUkJmM01nQm5GQjRBQnhjZzBCUVFFaEF5QUFLQUlNSUFFb0FneEJBQkIrRFFFZ0FDZ0NERUdFN0FOQkFCQitCRUFnQVNnQ0RDSUFSUTBDSUFCQnBPa0RRZWpxQXhDeUFVVWhBd3dDQ3lBQUtBSU1JZ1JGRFFCQkFDRURJQVJCcE9rRFFiVHFBeEN5QVNJRUJFQWdBQzBBQ0VFQmNVVU5BaUFFSUFFb0Fnd1FqQXNoQXd3Q0N5QUFLQUlNSWdSRkRRRWdCRUdrNlFOQnBPc0RFTElCSWdRRVFDQUFMUUFJUVFGeFJRMENJQVFnQVNnQ0RCRHhCU0VEREFJTElBQW9BZ3dpQUVVTkFTQUFRYVRwQTBIVTZRTVFzZ0VpQkVVTkFTQUJLQUlNSWdCRkRRRWdBRUdrNlFOQjFPa0RFTElCSWdCRkRRRWdCVUVJYWtFRWNrRUFRVFFRT3hvZ0JVRUJOZ0k0SUFWQmZ6WUNGQ0FGSUFRMkFoQWdCU0FBTmdJSUlBQWdCVUVJYWlBQ0tBSUFRUUVnQUNnQ0FDZ0NIQkVHQUFKQUlBVW9BaUFpQUVFQlJ3MEFJQUlvQWdCRkRRQWdBaUFGS0FJWU5nSUFDeUFBUVFGR0lRTU1BUXRCQUNFREN5QUZRVUJySkFBZ0F3dERBQUpBSUFBZ0FTQUFMUUFJUVJoeEJIOUJBUVZCQUNFQUlBRkZEUUVnQVVHazZRTkJoT29ERUxJQklnRkZEUUVnQVMwQUNFRVljVUVBUndzUWZpRUFDeUFBQzNBQkFuOGdBQ0FCS0FJSVFRQVFmZ1JBSUFFZ0FpQURFSUlFRHdzZ0FDZ0NEQ0VFSUFCQkVHb2lCU0FCSUFJZ0F4RHlCUUpBSUFSQkFrZ05BQ0FGSUFSQkEzUnFJUVFnQUVFWWFpRUFBMEFnQUNBQklBSWdBeER5QlNBQVFRaHFJZ0FnQkU4TkFTQUJMUUEyUlEwQUN3c0x0d29DQjM4Q2ZTTUFRU0JySWdVa0FBSkFJQUJCQUNBQkcwVUVRRUVBUVFOQnplSUFRUUFRT0F3QkN5QUFLQUlRSVFJZ0FDZ0NEQ0VFQWtBZ0FDZ0NGQ0lIUVFGR0RRQWdBU0FFSUFJZ0J5QUZRUnhxSUFWQkdHb1E1Z29pQVEwQURBRUxJQUFvQWdBZ0FTQUVJQUlRMVFrZ0FDQUFLQUlBRU5ZREVJTUJJZ0kyQWpBQ1FDQUNSUVJBUVFBaEFpQUFLQUk0SWdSQkFDQUVRUUJLR3lFRUEwQWdBaUFFUmcwQ0lBQW9BalFnQWtIRUFHeHFRWDgyQWp3Z0FrRUJhaUVDREFBTEFBc2dBQ2dDTEJBeklBQWdBQ2dDTUVFRGRCQTZJZ0kyQWl3Z0FnUkFJQUFvQWdBUTFnTWhCQUpBSUFkQkFVWUVRRUVBSVFJRFFDQUNJQUFvQWpCT0RRSWdCQ0FDRUdvcUFnQWhDU0FFSUFJUWFpb0NCQ0VLQWtBZ0FDZ0NCQ0lEQkVBZ0EwRzRBV29nQ1NBS0lBQW9BaXdnQWtFRGRHb2lBeUFEUVFScUVOb0JHZ3dCQ3lBQUtBSXNJQUpCQTNScUlnTWdDamdDQkNBRElBazRBZ0FMSUFKQkFXb2hBZ3dBQ3dBTEFrQUNRQUpBQWtBZ0IwRUNhdzRFQVFNQ0FBTUxRUUFoQWdOQUlBSWdBQ2dDTUU0TkJDQUVJQUlRYWlvQ0FDRUpJQVFnQWhCcUtnSUVJUW9DUUNBQUtBSUVJZ01FUUNBRFFiZ0JhaUFKUXdBQXdEK1VJQXBEQUFEQVA1UWdBQ2dDTENBQ1FRTjBhaUlESUFOQkJHb1EyZ0VhREFFTElBQW9BaXdnQWtFRGRHb2lBeUFLUXdBQXdEK1VPQUlFSUFNZ0NVTUFBTUEvbERnQ0FBc2dBa0VCYWlFQ0RBQUxBQXRCQUNFQ0EwQWdBaUFBS0FJd1RnMERJQVFnQWhCcUtnSUFJUWtnQkNBQ0VHb3FBZ1FoQ2dKQUlBQW9BZ1FpQXdSQUlBTkJ1QUZxSUFrZ0NaSWdDaUFLa2lBQUtBSXNJQUpCQTNScUlnTWdBMEVFYWhEYUFSb01BUXNnQUNnQ0xDQUNRUU4wYWlJRElBb2dDcEk0QWdRZ0F5QUpJQW1TT0FJQUN5QUNRUUZxSVFJTUFBc0FDMEVBSVFJRFFDQUNJQUFvQWpCT0RRSWdCQ0FDRUdvcUFnQWhDU0FFSUFJUWFpb0NCQ0VLQWtBZ0FDZ0NCQ0lEQkVBZ0EwRzRBV29nQ1VNQUFFQkFsQ0FLUXdBQVFFQ1VJQUFvQWl3Z0FrRURkR29pQXlBRFFRUnFFTm9CR2d3QkN5QUFLQUlzSUFKQkEzUnFJZ01nQ2tNQUFFQkFsRGdDQkNBRElBbERBQUJBUUpRNEFnQUxJQUpCQVdvaEFnd0FDd0FMUVFBaEFnTkFJQUlnQUNnQ01FNE5BU0FFSUFJUWFpb0NBQ0VKSUFRZ0FoQnFLZ0lFSVFvQ1FDQUFLQUlFSWdNRVFDQURRYmdCYWlBSlF3QUFnRUNVSUFwREFBQ0FRSlFnQUNnQ0xDQUNRUU4wYWlJRElBTkJCR29RMmdFYURBRUxJQUFvQWl3Z0FrRURkR29pQXlBS1F3QUFnRUNVT0FJRUlBTWdDVU1BQUlCQWxEZ0NBQXNnQWtFQmFpRUNEQUFMQUF0QkFDRUNJQUFvQWpnaUJFRUFJQVJCQUVvYklRUURRQ0FDSUFSR0JFQWdBQ2dDQUNnQ0FDZ0NBQkE5SVFJZ0FDZ0NBQ2dDQUNnQ0FDZ0NHQ0lEUlEwRElBQWdBMEVDZEdvb0Fqd2lCRUhFQUd3aUJpQUFLQUkwYWlnQ1FBMERJQUFvQWdRZ0FpQUFLQUlBSUFNUTBna2dBQ2dDQUJEV0F5QUFLQUkwSUFacUlnTWdBMEUwYWhDS0N3MERJQVJCeEFCc0lnTWdBQ2dDTkdwQkFEWUNQQ0FDRUVZaEJpQUFLQUkwSUFOcUlnZ2dCRFlDTUNBSUlBWTJBamdnQWhCR0lRWWdBaEJHSVFJZ0JTQUFLQUkwSUFOcUtnSTB1emtERUNBRklBSTJBZ2dnQlNBR05nSUVJQVVnQkRZQ0FFRUFRUUZCb1BNQUlBVVFPQXdEQlNBQUtBSTBJQUpCeEFCc2FrRi9OZ0k4SUFKQkFXb2hBZ3dCQ3dBTEFBdEJBRUVEUVlIUkFFRUFFRGhCQVJBQkFBc2dBQ2dDT0NJQ1FRQWdBa0VBU2hzaEJFRUFJUUlEUUNBQ0lBUkhCRUFnQUNnQ05DQUNRY1FBYkdwQkFEWUNRQ0FDUVFGcUlRSU1BUXNMSUFkQkFVWU5BQ0FCRURNTElBVkJJR29rQUFzeUFDQUFJQUVvQWdoQkFCQitCRUFnQVNBQ0lBTVFnZ1FQQ3lBQUtBSUlJZ0FnQVNBQ0lBTWdBQ2dDQUNnQ0hCRUdBQXNaQUNBQUlBRW9BZ2hCQUJCK0JFQWdBU0FDSUFNUWdnUUxDNlVCQVFGL0l3QkJRR29pQXlRQUFuOUJBU0FBSUFGQkFCQitEUUFhUVFBZ0FVVU5BQnBCQUNBQlFhVHBBMEhVNlFNUXNnRWlBVVVOQUJvZ0EwRUlha0VFY2tFQVFUUVFPeG9nQTBFQk5nSTRJQU5CZnpZQ0ZDQURJQUEyQWhBZ0F5QUJOZ0lJSUFFZ0EwRUlhaUFDS0FJQVFRRWdBU2dDQUNnQ0hCRUdBQ0FES0FJZ0lnQkJBVVlFUUNBQ0lBTW9BaGcyQWdBTElBQkJBVVlMSVFBZ0EwRkFheVFBSUFBTENnQWdBQ0FCUVFBUWZnc01BQ0FBRUlNRUdpQUFFRE1MQ1FBZ0FCQ0RCQkF6Q3dZQVFjbm5Bd3NEQUFBTE1nRUJmeU1BUVJCcklnRWtBQ0FCUVFocUlBQW9BZ1FRYnlnQ0FFRUJPZ0FBSUFBb0FnaEJBVG9BQUNBQlFSQnFKQUFMTGdFQmZ3SkFJQUFvQWdnaUFDMEFBQ0lCUVFGSEJIOGdBVUVDY1EwQklBQkJBam9BQUVFQkJVRUFDdzhMQUFzekFRSi9Jd0JCRUdzaUFTUUFJQUZCQ0dvZ0FDZ0NCQkJ2S0FJQUxRQUFSUVJBSUFBUW1nc2hBZ3NnQVVFUWFpUUFJQUlMTndFQ2Z5QUJFSWtCSWdKQkRXb1FTeUlEUVFBMkFnZ2dBeUFDTmdJRUlBTWdBallDQUNBQUlBTVFQU0FCSUFKQkFXb1FQellDQUF0WkFRSi9Jd0JCSUdzaUF5UUFJQUFRTkNJQ0lBTkJDR29nQUNBQUVKRUJRUUZxRUl3RElBQVFrUUVnQWhEM0F5SUNLQUlJSUFFUWpRTWdBaUFDS0FJSVFRRnFOZ0lJSUFBZ0FoRDJBeUFDRVBVRElBTkJJR29rQUFzaEFRRi9RWDhoQWlBQVJTQUJSWElFZjBGL0JTQUJJQUFvQWhBMkFnQkJBQXNMaUFFQkEzOGpBRUVRYXlJRUpBQWdBVUh2Ly8vL0EwMEVRQUpBSUFGQkFVMEVRQ0FBSUFFUXFnRWdBQ0VEREFFTElBQWdBUkRkQWtFQmFpSUZFTndDSWdNUXFRRWdBQ0FGRU5BQklBQWdBUkNhQVFzZ0FRUi9JQU1nQWlBQkVLc0xCU0FEQ3hvZ0JFRUFOZ0lNSUFNZ0FVRUNkR29nQkVFTWFoQ0NBU0FFUVJCcUpBQVBDeERUQVFBTGdRRUJBMzhqQUVFUWF5SUZKQUFDUUNBQ0lBQVFod1FpQkNBQUVEY2lBMnROQkVBZ0FrVU5BU0FBRUQ0aUJDQURRUUowYWlBQklBSVE1Z0VnQUNBQ0lBTnFJZ0FRa2dJZ0JVRUFOZ0lNSUFRZ0FFRUNkR29nQlVFTWFoQ0NBUXdCQ3lBQUlBUWdBaUFEYWlBRWF5QURJQU5CQUNBQ0lBRVE5UVVMSUFWQkVHb2tBQXQ0QVFOL0l3QkJFR3NpQkNRQUFrQWdBaUFBRUljRUlnTk5CRUFnQUJBK0lnVWhBeUFDQkg4Z0F5QUJJQUlRcWdzRklBTUxHaUFFUVFBMkFnd2dCU0FDUVFKMGFpQUVRUXhxRUlJQklBQWdBaENTQWd3QkN5QUFJQU1nQWlBRGF5QUFFRGNpQUVFQUlBQWdBaUFCRVBVRkN5QUVRUkJxSkFBTGZ3RURmeU1BUVJCcklnTWtBQ0FDUWUvLy8vOERUUVJBQWtBZ0FrRUJUUVJBSUFBZ0FoQ3FBU0FBSVFRTUFRc2dBQ0FDRU4wQ1FRRnFJZ1VRM0FJaUJCQ3BBU0FBSUFVUTBBRWdBQ0FDRUpvQkN5QUVJQUVnQWhEbUFTQURRUUEyQWd3Z0JDQUNRUUowYWlBRFFReHFFSUlCSUFOQkVHb2tBQThMRU5NQkFBdDNBUU4vSXdCQkVHc2lBeVFBSUFGQmIwMEVRQUpBSUFGQkNrMEVRQ0FBSUFFUXFnRWdBQ0VFREFFTElBQWdBUkRaQWtFQmFpSUZFRXNpQkJDcEFTQUFJQVVRMEFFZ0FDQUJFSm9CQ3lBRUlBRWdBaEQyQlNBRFFRQTZBQThnQVNBRWFpQURRUTlxRUpBQklBTkJFR29rQUE4TEVOTUJBQXQ2QVFOL0l3QkJFR3NpQlNRQUFrQWdBaUFBRUU4aUJDQUFFRGNpQTJ0TkJFQWdBa1VOQVNBQUVENGlCQ0FEYWlBQklBSVE1d0VnQUNBQ0lBTnFJZ0FRa2dJZ0JVRUFPZ0FQSUFBZ0JHb2dCVUVQYWhDUUFRd0JDeUFBSUFRZ0FpQURhaUFFYXlBRElBTkJBQ0FDSUFFUTl3VUxJQVZCRUdva0FBcytBUUovSXdCQkVHc2lBeVFBSUFNZ0FFRUJFSTRESVFJZ0FCQTBJQUlvQWdRZ0FSQ05BeUFDSUFJb0FnUkJBV28yQWdRZ0FoQjJJQU5CRUdva0FBdGVBUUovSXdCQkVHc2lBaVFBQWtBZ0FCQ2JBUVJBSUFBb0FnQWhBeUFDUVFBNkFBOGdBU0FEYWlBQ1FROXFFSkFCSUFBZ0FSQ2FBUXdCQ3lBQ1FRQTZBQTRnQUNBQmFpQUNRUTVxRUpBQklBQWdBUkNxQVFzZ0FrRVFhaVFBQzNBQkJIOGpBRUVRYXlJRUpBQWdBUVJBSUFBUVR5RUNJQUFRTnlJRElBRnFJUVVnQVNBQ0lBTnJTd1JBSUFBZ0FpQUZJQUpySUFNZ0F4Q0VCQXNnQXlBQUVENGlBbW9nQVVFQUVQWUZJQUFnQlJDU0FpQUVRUUE2QUE4Z0FpQUZhaUFFUVE5cUVKQUJDeUFFUVJCcUpBQUxJZ0VCZnlBQklBQVFOeUlDU3dSQUlBQWdBU0FDYXhDbkN3OExJQUFnQVJDbUN3dDdBUUovSXdCQklHc2lBeVFBSUFBUU5DSUNJQU5CQ0dvZ0FDQUFFRmRCQVdvUXNRSWdBQkJYSUFJUTdBb2lBaWdDQ0NBQkVOb0ZJQUlnQWlnQ0NFRU1hallDQ0NBQUlBSVE2d29nQWlBQ0tBSUVFT2dLSUFJb0FnQUVRQ0FDS0FJUUdpQUNLQUlBSVFBZ0FoQ1BBeG9nQUJBekN5QURRU0JxSkFBTGFBRUJmd0pBSUFJZ0FDQUJhMEVDZFVzRVFBTkFJQUFnQWtFQmF5SUNRUUowSWdOcUlBRWdBMm9vQWdBMkFnQWdBZzBBREFJTEFBc2dBa1VOQUNBQUlRTURRQ0FESUFFb0FnQTJBZ0FnQTBFRWFpRURJQUZCQkdvaEFTQUNRUUZySWdJTkFBc0xJQUFMS1FFQmZ5QUNCRUFnQUNFREEwQWdBeUFCTmdJQUlBTkJCR29oQXlBQ1FRRnJJZ0lOQUFzTElBQUxMZ0FEUUNBQUtBSUFRUUZHRFFBTElBQW9BZ0JGQkVBZ0FFRUJOZ0lBSUFGQnhnSVJBQUFnQUVGL05nSUFDd3M0QVFGL0lBQkJDR29pQVNnQ0FFVUVRQ0FBSUFBb0FnQW9BaEFSQUFBUEN5QUJFTXdEUVg5R0JFQWdBQ0FBS0FJQUtBSVFFUUFBQ3d0RkFRRi9Jd0JCRUdzaUF5UUFJQU1nQWpZQ0NBTkFJQUFnQVVjRVFDQURRUWhxSUFBb0FnQVEyQVlnQUVFRWFpRUFEQUVMQ3lBREtBSUlJUUFnQTBFUWFpUUFJQUFMUlFFQmZ5TUFRUkJySWdNa0FDQURJQUkyQWdnRFFDQUFJQUZIQkVBZ0EwRUlhaUFBTEFBQUVKY0VJQUJCQVdvaEFBd0JDd3NnQXlnQ0NDRUFJQU5CRUdva0FDQUFDejRCQW44akFFRVFheUlESkFBZ0F5QUFRUUVRMkFJaEFpQUFFRFFnQWlnQ0JDQUJFTm9GSUFJZ0FpZ0NCRUVNYWpZQ0JDQUNFSFlnQTBFUWFpUUFDek1CQVg4akFFRVFheUlESkFBZ0F5QUJJQUlRVkJDZURTQUFJQU1wQXdBM0F3QWdBQ0FES1FNSU53TUlJQU5CRUdva0FBczRBUUovSUFBb0FnQWdBQ2dDQ0NJQ1FRRjFhaUVCSUFBb0FnUWhBQ0FCSUFKQkFYRUVmeUFCS0FJQUlBQnFLQUlBQlNBQUN4RUFBQXRjQVFGL1FaQ3JCQkNNQmtHUXF3UVFrUUpCa0tzRUtBSUFRWlNyQkNnQ0FDQUFRUVJxSWdFUXNBSkJrS3NFSUFFUVNVR1Vxd1FnQUVFSWFoQkpRWkNyQkJCYklBQVFQUkJKSUFBZ0FDZ0NCRFlDQUVHUXF3UVFReEQrQlF0cEFRSi9Jd0JCRUdzaUJDUUFJQVJCQURZQ0RDQUFRUXhxSUFSQkRHb2dBeEN4QVNBQkJFQWdBQ2dDRUNBQkVQOEZJUVVMSUFBZ0JUWUNBQ0FBSUFVZ0FrRUNkR29pQWpZQ0NDQUFJQUkyQWdRZ0FCQTlJQVVnQVVFQ2RHbzJBZ0FnQkVFUWFpUUFJQUFMV2dFQ2Z5TUFRUkJySWdFa0FDQUJJQUEyQWd3Z0FCQ0FCaUlDVFFSQVFaQ3JCQkNRQWlJQUlBSkJBWFpKQkVBZ0FTQUFRUUYwTmdJSUlBRkJDR29nQVVFTWFoQjlLQUlBSVFJTElBRkJFR29rQUNBQ0R3c1FsQUVBQzFrQkFuOGpBRUVnYXlJREpBQWdBQkEwSWdJZ0EwRUlhaUFBSUFBUWd3RkJBV29RK0FNZ0FCQ0RBU0FDRU9BRklnSW9BZ2dnQVJDUkF5QUNJQUlvQWdoQkZHbzJBZ2dnQUNBQ0VOOEZJQUlRM2dVZ0EwRWdhaVFBQ3lRQUFrQWdBVUVjU3cwQUlBQXRBSEFOQUNBQVFRRTZBSEFnQUE4TElBRkJBblFRU3dzK0FRSi9Jd0JCRUdzaUF5UUFJQU1nQUVFQkVQa0RJUUlnQUJBMElBSW9BZ1FnQVJDUkF5QUNJQUlvQWdSQkZHbzJBZ1FnQWhCMklBTkJFR29rQUFzSkFFR3dvQVFRT1JvTEx3QUNRRUc4b0FRdEFBQkJBWEVOQUVHOG9BUVFjVVVOQUVHd29BUkJoTHNERUxRQ1FieWdCQkJ3QzBHd29BUUxDUUJCb0tBRUVEa2FDekFBQWtCQnJLQUVMUUFBUVFGeERRQkJyS0FFRUhGRkRRQkJvS0FFUWZpNkF4Q1lBUnBCcktBRUVIQUxRYUNnQkFzSkFFR1FvQVFRT1JvTEx3QUNRRUdjb0FRdEFBQkJBWEVOQUVHY29BUVFjVVVOQUVHUW9BUkJwTG9ERUxRQ1FaeWdCQkJ3QzBHUW9BUUxDUUJCZ0tBRUVEa2FDekFBQWtCQmpLQUVMUUFBUVFGeERRQkJqS0FFRUhGRkRRQkJnS0FFUVl5NkF4Q1lBUnBCaktBRUVIQUxRWUNnQkFzSkFFSHdud1FRT1JvTEx3QUNRRUg4bndRdEFBQkJBWEVOQUVIOG53UVFjVVVOQUVId253UkI2TGtERUxRQ1FmeWZCQkJ3QzBId253UUxJUUFnQUNnQ0JDQUFFRFFvQWdCSEJFQWdBQ0FCRUtVTER3c2dBQ0FCRUowTEN3a0FRZUNmQkJBNUdnc3dBQUpBUWV5ZkJDMEFBRUVCY1EwQVFleWZCQkJ4UlEwQVFlQ2ZCRUhjdVFNUW1BRWFRZXlmQkJCd0MwSGdud1FMQ1FCQjBKOEVFRGthQ3k4QUFrQkIzSjhFTFFBQVFRRnhEUUJCM0o4RUVIRkZEUUJCMEo4RVFiaTVBeEMwQWtIY253UVFjQXRCMEo4RUN3a0FRY0NmQkJBNUdnc3dBQUpBUWN5ZkJDMEFBRUVCY1EwQVFjeWZCQkJ4UlEwQVFjQ2ZCRUdzdVFNUW1BRWFRY3lmQkJCd0MwSEFud1FMR3dCQnVLZ0VJUUFEUUNBQVFReHJFRGtpQUVHZ3FBUkhEUUFMQzA4QkFYOENRRUc0cUFRdEFBQkJBWEVOQUVHNHFBUVFjVVVOQUVHZ3FBUWhBQU5BSUFBUVFrRU1haUlBUWJpb0JFY05BQXRCdUtnRUVIQUxRYUNvQkVHNDVBTVFVVUdzcUFSQnhPUURFRkVMTlFBQ1FFRzhud1F0QUFCQkFYRU5BRUc4bndRUWNVVU5BQkRMQzBHNG53UkJvS2dFTmdJQVFieWZCQkJ3QzBHNG53UW9BZ0FMR3dCQm1LZ0VJUUFEUUNBQVFReHJFRGtpQUVHQXFBUkhEUUFMQ3lFQUlBQW9BZ1FnQUJBMEtBSUFTUVJBSUFBZ0FSQ3dDdzhMSUFBZ0FSQ3BDd3RQQVFGL0FrQkJtS2dFTFFBQVFRRnhEUUJCbUtnRUVIRkZEUUJCZ0tnRUlRQURRQ0FBRUVKQkRHb2lBRUdZcUFSSERRQUxRWmlvQkJCd0MwR0FxQVJCc09RREVGSkJqS2dFUWJQa0F4QlNDelVBQWtCQnRKOEVMUUFBUVFGeERRQkJ0SjhFRUhGRkRRQVF6d3RCc0o4RVFZQ29CRFlDQUVHMG53UVFjQXRCc0o4RUtBSUFDeHNBUWZDbkJDRUFBMEFnQUVFTWF4QTVJZ0JCMEtVRVJ3MEFDd3VyQWdFQmZ3SkFRZkNuQkMwQUFFRUJjUTBBUWZDbkJCQnhSUTBBUWRDbEJDRUFBMEFnQUJCQ1FReHFJZ0JCOEtjRVJ3MEFDMEh3cHdRUWNBdEIwS1VFUWFqZ0F4QlJRZHlsQkVISTRBTVFVVUhvcFFSQjdPQURFRkZCOUtVRVFZVGhBeEJSUVlDbUJFR2M0UU1RVVVHTXBnUkJyT0VERUZGQm1LWUVRY0RoQXhCUlFhU21CRUhVNFFNUVVVR3dwZ1JCOE9FREVGRkJ2S1lFUVpqaUF4QlJRY2ltQkVHNDRnTVFVVUhVcGdSQjNPSURFRkZCNEtZRVFZRGpBeEJSUWV5bUJFR1E0d01RVVVINHBnUkJvT01ERUZGQmhLY0VRYkRqQXhCUlFaQ25CRUdjNFFNUVVVR2Nwd1JCd09NREVGRkJxS2NFUWREakF4QlJRYlNuQkVIZzR3TVFVVUhBcHdSQjhPTURFRkZCektjRVFZRGtBeEJSUWRpbkJFR1E1QU1RVVVIa3B3UkJvT1FERUZFTE5RQUNRRUdzbndRdEFBQkJBWEVOQUVHc253UVFjVVVOQUJEU0MwR29ud1JCMEtVRU5nSUFRYXlmQkJCd0MwR29ud1FvQWdBTEd3QkJ3S1VFSVFBRFFDQUFRUXhyRURraUFFR2dvd1JIRFFBTEM2c0NBUUYvQWtCQndLVUVMUUFBUVFGeERRQkJ3S1VFRUhGRkRRQkJvS01FSVFBRFFDQUFFRUpCREdvaUFFSEFwUVJIRFFBTFFjQ2xCQkJ3QzBHZ293UkJwTjhERUZKQnJLTUVRYXpmQXhCU1FiaWpCRUcxM3dNUVVrSEVvd1JCdTk4REVGSkIwS01FUWNIZkF4QlNRZHlqQkVIRjN3TVFVa0hvb3dSQnl0OERFRkpCOUtNRVFjL2ZBeEJTUVlDa0JFSFczd01RVWtHTXBBUkI0TjhERUZKQm1LUUVRZWpmQXhCU1FhU2tCRUh4M3dNUVVrR3dwQVJCK3Q4REVGSkJ2S1FFUWY3ZkF4QlNRY2lrQkVHQzRBTVFVa0hVcEFSQmh1QURFRkpCNEtRRVFjSGZBeEJTUWV5a0JFR0s0QU1RVWtINHBBUkJqdUFERUZKQmhLVUVRWkxnQXhCU1FaQ2xCRUdXNEFNUVVrR2NwUVJCbXVBREVGSkJxS1VFUVo3Z0F4QlNRYlNsQkVHaTRBTVFVZ3MxQUFKQVFhU2ZCQzBBQUVFQmNRMEFRYVNmQkJCeFJRMEFFTlVMUWFDZkJFR2dvd1EyQWdCQnBKOEVFSEFMUWFDZkJDZ0NBQXNiQUVHWW93UWhBQU5BSUFCQkRHc1FPU0lBUWZDaEJFY05BQXNMSVFBZ0FDZ0NCQ0FBRURRb0FnQkpCRUFnQUNBQkVMZ0xEd3NnQUNBQkVMWUxDOGNCQVFGL0FrQkJtS01FTFFBQVFRRnhEUUJCbUtNRUVIRkZEUUJCOEtFRUlRQURRQ0FBRUVKQkRHb2lBRUdZb3dSSERRQUxRWmlqQkJCd0MwSHdvUVJCME53REVGRkIvS0VFUWV6Y0F4QlJRWWlpQkVHSTNRTVFVVUdVb2dSQnFOMERFRkZCb0tJRVFkRGRBeEJSUWF5aUJFSDAzUU1RVVVHNG9nUkJrTjRERUZGQnhLSUVRYlRlQXhCUlFkQ2lCRUhFM2dNUVVVSGNvZ1JCMU40REVGRkI2S0lFUWVUZUF4QlJRZlNpQkVIMDNnTVFVVUdBb3dSQmhOOERFRkZCaktNRVFaVGZBeEJSQ3pVQUFrQkJuSjhFTFFBQVFRRnhEUUJCbko4RUVIRkZEUUFRMlF0Qm1KOEVRZkNoQkRZQ0FFR2Nud1FRY0F0Qm1KOEVLQUlBQ3hzQVFlaWhCQ0VBQTBBZ0FFRU1heEE1SWdCQndLQUVSdzBBQ3d2SEFRRUJmd0pBUWVpaEJDMEFBRUVCY1EwQVFlaWhCQkJ4UlEwQVFjQ2dCQ0VBQTBBZ0FCQkNRUXhxSWdCQjZLRUVSdzBBQzBIb29RUVFjQXRCd0tBRVFmamJBeEJTUWN5Z0JFSC8yd01RVWtIWW9BUkJodHdERUZKQjVLQUVRWTdjQXhCU1FmQ2dCRUdZM0FNUVVrSDhvQVJCb2R3REVGSkJpS0VFUWFqY0F4QlNRWlNoQkVHeDNBTVFVa0dnb1FSQnRkd0RFRkpCcktFRVFibmNBeEJTUWJpaEJFRzkzQU1RVWtIRW9RUkJ3ZHdERUZKQjBLRUVRY1hjQXhCU1FkeWhCRUhKM0FNUVVnczFBQUpBUVpTZkJDMEFBRUVCY1EwQVFaU2ZCQkJ4UlEwQUVOd0xRWkNmQkVIQW9BUTJBZ0JCbEo4RUVIQUxRWkNmQkNnQ0FBc0xBQ0FBUVpTNUF4QzBBZ3NNQUNBQVFZeTVBeENZQVJvTEN3QWdBRUg0dUFNUXRBSUxEQUFnQUVId3VBTVFtQUVhQ3d3QUlBQWdBVUVRYWhDWEF3c01BQ0FBSUFGQkRHb1Fsd01MQndBZ0FDd0FDUXNIQUNBQUxBQUlDd2tBSUFBUWd3WVFNd3NKQUNBQUVJUUdFRE1MNWdNQkIzOGdBQ0VEQTBBQ1FDQUNJQWhOSUFFZ0EwMXlEUUFnQXl3QUFDSUdRZjhCY1NFRUFrQWdCa0VBVGdSQVFRRWhCaUFFUWYvL3d3Qk5EUUVNQWdzZ0JFSENBVWtOQVNBRVFkOEJUUVJBSUFFZ0EydEJBa2dOQWlBRExRQUJJZ1ZCd0FGeFFZQUJSdzBDUVFJaEJpQUZRVDl4SUFSQkJuUkJ3QTl4Y2tILy84TUFUUTBCREFJTEFrQUNRQ0FFUWU4QlRRUkFJQUVnQTJ0QkEwZ05CQ0FETFFBQ0lRY2dBeTBBQVNFRklBUkI3UUZHRFFFZ0JFSGdBVVlFUUNBRlFlQUJjVUdnQVVZTkF3d0ZDeUFGUWNBQmNVR0FBVWNOQkF3Q0N5QUJJQU5yUVFSSUlBUkI5QUZMY2cwRElBTXRBQU1oQnlBRExRQUNJUWtnQXkwQUFTRUZBa0FDUUFKQUFrQWdCRUh3QVdzT0JRQUNBZ0lCQWdzZ0JVSHdBR3BCL3dGeFFUQkpEUUlNQmdzZ0JVSHdBWEZCZ0FGR0RRRU1CUXNnQlVIQUFYRkJnQUZIRFFRTElBbEJ3QUZ4UVlBQlJ5QUhRY0FCY1VHQUFVZHlEUU5CQkNFR0lBZEJQM0VnQ1VFR2RFSEFIM0VnQkVFU2RFR0FnUEFBY1NBRlFUOXhRUXgwY25KeVFmLy93d0JMRFFNTUFnc2dCVUhnQVhGQmdBRkhEUUlMSUFkQndBRnhRWUFCUncwQlFRTWhCaUFIUVQ5eElBUkJESFJCZ09BRGNTQUZRVDl4UVFaMGNuSkIvLy9EQUVzTkFRc2dDRUVCYWlFSUlBTWdCbW9oQXd3QkN3c2dBeUFBYXdzaEFRRi9RWDhoQWlBQVJTQUJRZjhCUzNJRWYwRi9CU0FBSUFFMkFoQkJBQXNMQ3dBZ0FpQURJQVFRNkFzTG9nUUJCbjhnQWlBQU5nSUFJQVVnQXpZQ0FBSkFBa0FEUUNBQ0tBSUFJZ1lnQVU4Z0F5QUVUM0pGQkVBZ0Jpd0FBQ0lJUWY4QmNTRUFBa0FnQ0VFQVRnUkFJQUJCLy8vREFFMEVRRUVCSVFnTUFndEJBZzhMUVFJaENpQUFRY0lCU1EwRElBQkIzd0ZOQkVBZ0FTQUdhMEVDU0EwRklBWXRBQUVpQjBIQUFYRkJnQUZIRFFSQkFpRUlJQWRCUDNFZ0FFRUdkRUhBRDNGeUlnQkIvLy9EQUUwTkFRd0VDeUFBUWU4QlRRUkFJQUVnQm10QkEwZ05CU0FHTFFBQ0lRa2dCaTBBQVNFSEFrQUNRQ0FBUWUwQlJ3UkFJQUJCNEFGSERRRWdCMEhnQVhGQm9BRkdEUUlNQndzZ0IwSGdBWEZCZ0FGR0RRRU1CZ3NnQjBIQUFYRkJnQUZIRFFVTElBbEJ3QUZ4UVlBQlJ3MEVRUU1oQ0NBSlFUOXhJQUJCREhSQmdPQURjU0FIUVQ5eFFRWjBjbklpQUVILy84TUFUUTBCREFRTElBQkI5QUZMRFFNZ0FTQUdhMEVFU0EwRUlBWXRBQU1oQ1NBR0xRQUNJUXNnQmkwQUFTRUhBa0FDUUFKQUFrQWdBRUh3QVdzT0JRQUNBZ0lCQWdzZ0IwSHdBR3BCL3dGeFFUQkpEUUlNQmdzZ0IwSHdBWEZCZ0FGR0RRRU1CUXNnQjBIQUFYRkJnQUZIRFFRTElBdEJ3QUZ4UVlBQlJ5QUpRY0FCY1VHQUFVZHlEUU5CQkNFSUlBbEJQM0VnQzBFR2RFSEFIM0VnQUVFU2RFR0FnUEFBY1NBSFFUOXhRUXgwY25KeUlnQkIvLy9EQUVzTkF3c2dBeUFBTmdJQUlBSWdCaUFJYWpZQ0FDQUZJQVVvQWdCQkJHb2lBellDQUF3QkN3c2dBU0FHU3lFS0N5QUtEd3RCQVF0TkFDTUFRUkJySWdBa0FDQUFJQUkyQWd3Z0FDQUZOZ0lJSUFJZ0F5QUFRUXhxSUFVZ0JpQUFRUWhxRU9zTElRRWdCQ0FBS0FJTU5nSUFJQWNnQUNnQ0NEWUNBQ0FBUVJCcUpBQWdBUXZXQXdFQmZ5QUNJQUEyQWdBZ0JTQUROZ0lBSUFJb0FnQWhBd0pBQTBBZ0FTQURUUVJBUVFBaEJnd0NDMEVDSVFZZ0F5Z0NBQ0lBUWYvL3d3QkxJQUJCZ0hCeFFZQ3dBMFp5RFFFQ1FBSkFJQUJCL3dCTkJFQkJBU0VHSUFRZ0JTZ0NBQ0lEYTBFQlNBMEVJQVVnQTBFQmFqWUNBQ0FESUFBNkFBQU1BUXNnQUVIL0QwMEVRQ0FFSUFVb0FnQWlBMnRCQWtnTkFpQUZJQU5CQVdvMkFnQWdBeUFBUVFaMlFjQUJjam9BQUNBRklBVW9BZ0FpQTBFQmFqWUNBQ0FESUFCQlAzRkJnQUZ5T2dBQURBRUxJQVFnQlNnQ0FDSURheUVHSUFCQi8vOERUUVJBSUFaQkEwZ05BaUFGSUFOQkFXbzJBZ0FnQXlBQVFReDJRZUFCY2pvQUFDQUZJQVVvQWdBaUEwRUJhallDQUNBRElBQkJCblpCUDNGQmdBRnlPZ0FBSUFVZ0JTZ0NBQ0lEUVFGcU5nSUFJQU1nQUVFL2NVR0FBWEk2QUFBTUFRc2dCa0VFU0EwQklBVWdBMEVCYWpZQ0FDQURJQUJCRW5aQjhBRnlPZ0FBSUFVZ0JTZ0NBQ0lEUVFGcU5nSUFJQU1nQUVFTWRrRS9jVUdBQVhJNkFBQWdCU0FGS0FJQUlnTkJBV28yQWdBZ0F5QUFRUVoyUVQ5eFFZQUJjam9BQUNBRklBVW9BZ0FpQTBFQmFqWUNBQ0FESUFCQlAzRkJnQUZ5T2dBQUN5QUNJQUlvQWdCQkJHb2lBellDQUF3QkN3dEJBUThMSUFZTFRRQWpBRUVRYXlJQUpBQWdBQ0FDTmdJTUlBQWdCVFlDQ0NBQ0lBTWdBRUVNYWlBRklBWWdBRUVJYWhEdEN5RUJJQVFnQUNnQ0REWUNBQ0FISUFBb0FnZzJBZ0FnQUVFUWFpUUFJQUVMN2dNQkJuOGdBQ0VEQTBBQ1FDQUNJQVpOSUFFZ0EwMXlEUUFnQXkwQUFDSUVRZi8vd3dCTERRQUNmeUFEUVFGcUlBUkJHSFJCR0hWQkFFNE5BQm9nQkVIQ0FVa05BU0FFUWQ4QlRRUkFJQUVnQTJ0QkFrZ05BaUFETFFBQklnVkJ3QUZ4UVlBQlJ5QUZRVDl4SUFSQkJuUkJ3QTl4Y2tILy84TUFTM0lOQWlBRFFRSnFEQUVMQWtBQ1FDQUVRZThCVFFSQUlBRWdBMnRCQTBnTkJDQURMUUFDSVFjZ0F5MEFBU0VGSUFSQjdRRkdEUUVnQkVIZ0FVWUVRQ0FGUWVBQmNVR2dBVVlOQXd3RkN5QUZRY0FCY1VHQUFVY05CQXdDQ3lBQ0lBWnJRUUpKSUFSQjlBRkxjaUFCSUFOclFRUkljZzBESUFNdEFBTWhCeUFETFFBQ0lRZ2dBeTBBQVNFRkFrQUNRQUpBQWtBZ0JFSHdBV3NPQlFBQ0FnSUJBZ3NnQlVId0FHcEIvd0Z4UVRCSkRRSU1CZ3NnQlVId0FYRkJnQUZHRFFFTUJRc2dCVUhBQVhGQmdBRkhEUVFMSUFoQndBRnhRWUFCUnlBSFFjQUJjVUdBQVVkeUlBZEJQM0VnQ0VFR2RFSEFIM0VnQkVFU2RFR0FnUEFBY1NBRlFUOXhRUXgwY25KeVFmLy93d0JMY2cwRElBWkJBV29oQmlBRFFRUnFEQUlMSUFWQjRBRnhRWUFCUncwQ0N5QUhRY0FCY1VHQUFVY2dCMEUvY1NBRVFReDBRWURnQTNFZ0JVRS9jVUVHZEhKeVFmLy93d0JMY2cwQklBTkJBMm9MSVFNZ0JrRUJhaUVHREFFTEN5QURJQUJyQ3dzQUlBSWdBeUFFRU84TEM1TUZBUVYvSUFJZ0FEWUNBQ0FGSUFNMkFnQUNRQUpBQWtBRFFDQUNLQUlBSWdBZ0FVOGdBeUFFVDNKRkJFQkJBaUVKSUFBdEFBQWlCa0gvLzhNQVN3MEVJQUlDZnlBR1FSaDBRUmgxUVFCT0JFQWdBeUFHT3dFQUlBQkJBV29NQVFzZ0JrSENBVWtOQlNBR1FkOEJUUVJBSUFFZ0FHdEJBa2dOQlNBQUxRQUJJZ2RCd0FGeFFZQUJSdzBFSUFkQlAzRWdCa0VHZEVIQUQzRnlJZ1pCLy8vREFFc05CQ0FESUFZN0FRQWdBRUVDYWd3QkN5QUdRZThCVFFSQUlBRWdBR3RCQTBnTkJTQUFMUUFDSVFnZ0FDMEFBU0VIQWtBQ1FDQUdRZTBCUndSQUlBWkI0QUZIRFFFZ0IwSGdBWEZCb0FGR0RRSU1Cd3NnQjBIZ0FYRkJnQUZHRFFFTUJnc2dCMEhBQVhGQmdBRkhEUVVMSUFoQndBRnhRWUFCUncwRUlBaEJQM0VnQjBFL2NVRUdkQ0FHUVF4MGNuSWlCa0gvL3dOeFFmLy93d0JMRFFRZ0F5QUdPd0VBSUFCQkEyb01BUXNnQmtIMEFVc05CVUVCSVFrZ0FTQUFhMEVFU0EwRElBQXRBQU1oQ0NBQUxRQUNJUWNnQUMwQUFTRUFBa0FDUUFKQUFrQWdCa0h3QVdzT0JRQUNBZ0lCQWdzZ0FFSHdBR3BCL3dGeFFUQlBEUWdNQWdzZ0FFSHdBWEZCZ0FGSERRY01BUXNnQUVIQUFYRkJnQUZIRFFZTElBZEJ3QUZ4UVlBQlJ5QUlRY0FCY1VHQUFVZHlEUVVnQkNBRGEwRUVTQTBEUVFJaENTQUlRVDl4SWdnZ0IwRUdkQ0lLUWNBZmNTQUFRUXgwUVlEZ0QzRWdCa0VIY1NJR1FSSjBjbkp5UWYvL3d3QkxEUU1nQXlBSFFRUjJRUU54SUFCQkFuUWlBRUhBQVhFZ0JrRUlkSElnQUVFOGNYSnlRY0QvQUdwQmdMQURjanNCQUNBRklBTkJBbW8yQWdBZ0F5QUtRY0FIY1NBSWNrR0F1QU55T3dFQ0lBSW9BZ0JCQkdvTE5nSUFJQVVnQlNnQ0FFRUNhaUlETmdJQURBRUxDeUFBSUFGSklRa0xJQWtQQzBFQkR3dEJBZ3ROQUNNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dnQUNBRk5nSUlJQUlnQXlBQVFReHFJQVVnQmlBQVFRaHFFUEVMSVFFZ0JDQUFLQUlNTmdJQUlBY2dBQ2dDQ0RZQ0FDQUFRUkJxSkFBZ0FRdS9CUUVDZnlBQ0lBQTJBZ0FnQlNBRE5nSUFJQUlvQWdBaEJnSkFBa0FEUUNBQklBWk5CRUJCQUNFQURBTUxRUUloQUNBR0x3RUFJZ05CLy8vREFFc05BZ0pBQWtBZ0EwSC9BRTBFUUVFQklRQWdCQ0FGS0FJQUlnWnJRUUZJRFFVZ0JTQUdRUUZxTmdJQUlBWWdBem9BQUF3QkN5QURRZjhQVFFSQUlBUWdCU2dDQUNJQWEwRUNTQTBFSUFVZ0FFRUJhallDQUNBQUlBTkJCblpCd0FGeU9nQUFJQVVnQlNnQ0FDSUFRUUZxTmdJQUlBQWdBMEUvY1VHQUFYSTZBQUFNQVFzZ0EwSC9yd05OQkVBZ0JDQUZLQUlBSWdCclFRTklEUVFnQlNBQVFRRnFOZ0lBSUFBZ0EwRU1ka0hnQVhJNkFBQWdCU0FGS0FJQUlnQkJBV28yQWdBZ0FDQURRUVoyUVQ5eFFZQUJjam9BQUNBRklBVW9BZ0FpQUVFQmFqWUNBQ0FBSUFOQlAzRkJnQUZ5T2dBQURBRUxJQU5CLzdjRFRRUkFRUUVoQUNBQklBWnJRUVJJRFFVZ0JpOEJBaUlIUVlENEEzRkJnTGdEUncwQ0lBUWdCU2dDQUd0QkJFZ05CU0FIUWY4SGNTQURRUXAwUVlENEEzRWdBMEhBQjNFaUFFRUtkSEp5UVlDQUJHcEIvLy9EQUVzTkFpQUNJQVpCQW1vMkFnQWdCU0FGS0FJQUlnWkJBV28yQWdBZ0JpQUFRUVoyUVFGcUlnQkJBblpCOEFGeU9nQUFJQVVnQlNnQ0FDSUdRUUZxTmdJQUlBWWdBRUVFZEVFd2NTQURRUUoyUVE5eGNrR0FBWEk2QUFBZ0JTQUZLQUlBSWdCQkFXbzJBZ0FnQUNBSFFRWjJRUTl4SUFOQkJIUkJNSEZ5UVlBQmNqb0FBQ0FGSUFVb0FnQWlBRUVCYWpZQ0FDQUFJQWRCUDNGQmdBRnlPZ0FBREFFTElBTkJnTUFEU1EwRUlBUWdCU2dDQUNJQWEwRURTQTBESUFVZ0FFRUJhallDQUNBQUlBTkJESFpCNEFGeU9nQUFJQVVnQlNnQ0FDSUFRUUZxTmdJQUlBQWdBMEVHZGtFL2NVR0FBWEk2QUFBZ0JTQUZLQUlBSWdCQkFXbzJBZ0FnQUNBRFFUOXhRWUFCY2pvQUFBc2dBaUFDS0FJQVFRSnFJZ1kyQWdBTUFRc0xRUUlQQzBFQkR3c2dBQXROQUNNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dnQUNBRk5nSUlJQUlnQXlBQVFReHFJQVVnQmlBQVFRaHFFUE1MSVFFZ0JDQUFLQUlNTmdJQUlBY2dBQ2dDQ0RZQ0FDQUFRUkJxSkFBZ0FRc1ZBQ0FBS0FJSUlnQkZCRUJCQVE4TElBQVFod1lMUlFFQmZ5TUFRUkJySWdRa0FDQUVJQU0yQWd3Z0JFRUlhaUFFUVF4cUVNVUJJUU5CQUNBQUlBRWdBa0dJblFRZ0Foc1F0QU1oQUNBREVNUUJJQVJCRUdva0FDQUFDMW9CQkg4RFFBSkFJQUlnQTBZZ0JDQUdUWElOQUVFQklRY0NRQUpBSUFJZ0F5QUNheUFCSUFBb0FnZ1E5Z3NpQ0VFQ2FnNERBZ0lCQUFzZ0NDRUhDeUFHUVFGcUlRWWdCU0FIYWlFRklBSWdCMm9oQWd3QkN3c2dCUXRCQVFKL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENBQlFRaHFJQUZCREdvUXhRRWhBQ01BUVJCcklnSWtBQ0FDUVJCcUpBQWdBQkRFQVNBQlFSQnFKQUJCQUFzdEFRRi9RWDhoQVFKQUlBQW9BZ2dRK0FzRWYwRi9CU0FBS0FJSUlnQU5BVUVCQ3c4TElBQVFod1pCQVVZTGtnRUJBWDhqQUVFUWF5SUZKQUFnQkNBQ05nSUFBbjlCQWlBRlFReHFRUUFnQUNnQ0NCQ0lCQ0lBUVFGcVFRSkpEUUFhUVFFZ0FFRUJheUlCSUFNZ0JDZ0NBR3RMRFFBYUlBVkJER29oQWdOL0lBRUVmeUFDTFFBQUlRQWdCQ0FFS0FJQUlnTkJBV28yQWdBZ0F5QUFPZ0FBSUFGQkFXc2hBU0FDUVFGcUlRSU1BUVZCQUFzTEN5RUNJQVZCRUdva0FDQUNDMEFCQVg4akFFRVFheUlHSkFBZ0JpQUZOZ0lNSUFaQkNHb2dCa0VNYWhERkFTRUZJQUFnQVNBQ0lBTWdCQkNqRFNFQUlBVVF4QUVnQmtFUWFpUUFJQUFMcWdFQkJuOGpBRUVnYXlJREpBQUNRQ0FEUVJocUlBQVFwZ01pQkMwQUFFVU5BQ0FEUVFocUlBQVEvQU1oQlNBQUlBQW9BZ0JCREdzb0FnQnFLQUlFSVFZZ0FDQUFLQUlBUVF4cktBSUFhaUlIRU9rRklRZ2dBeUFGS0FJQUlBRWdBU0FDYWlJQ0lBRWdCa0d3QVhGQklFWWJJQUlnQnlBSUVORUJOZ0lRSUFOQkVHb1Erd05GRFFBZ0FDQUFLQUlBUVF4cktBSUFha0VGRUxNQ0N5QUVFT01DSUFOQklHb2tBQ0FBQzdrREFRTi9Jd0JCRUdzaUNTUUFJQUloQ0FOQUFrQWdBeUFJUmdSQUlBTWhDQXdCQ3lBSUxRQUFSUTBBSUFoQkFXb2hDQXdCQ3dzZ0J5QUZOZ0lBSUFRZ0FqWUNBQU5BQWtBQ2Z3SkFJQVVnQmtZZ0FpQURSbklOQUNBSklBRXBBZ0EzQXdnQ1FBSkFBa0FDUUNBRklBUWdDQ0FDYXlBR0lBVnJRUUoxSUFFZ0FDZ0NDQkQ3Q3lJS1FYOUdCRUFEUUFKQUlBY2dCVFlDQUNBQ0lBUW9BZ0JHRFFCQkFTRUdBa0FDUUFKQUlBVWdBaUFJSUFKcklBbEJDR29nQUNnQ0NCQ0lCaUlCUVFKcURnTUlBQUlCQ3lBRUlBSTJBZ0FNQlFzZ0FTRUdDeUFDSUFacUlRSWdCeWdDQUVFRWFpRUZEQUVMQ3lBRUlBSTJBZ0FNQlFzZ0J5QUhLQUlBSUFwQkFuUnFJZ1UyQWdBZ0JTQUdSZzBESUFRb0FnQWhBaUFESUFoR0JFQWdBeUVJREFnTElBVWdBa0VCSUFFZ0FDZ0NDQkNJQmtVTkFRdEJBZ3dFQ3lBSElBY29BZ0JCQkdvMkFnQWdCQ0FFS0FJQVFRRnFJZ0kyQWdBZ0FpRUlBMEFnQXlBSVJnUkFJQU1oQ0F3R0N5QUlMUUFBUlEwRklBaEJBV29oQ0F3QUN3QUxJQVFnQWpZQ0FFRUJEQUlMSUFRb0FnQWhBZ3NnQWlBRFJ3c2hDQ0FKUVJCcUpBQWdDQThMSUFjb0FnQWhCUXdBQ3dBTFBnRUJmeU1BUVJCcklnVWtBQ0FGSUFRMkFnd2dCVUVJYWlBRlFReHFFTVVCSVFRZ0FDQUJJQUlnQXhDa0RTRUFJQVFReEFFZ0JVRVFhaVFBSUFBTDB3TUJCSDhqQUVFUWF5SUtKQUFnQWlFSUEwQUNRQ0FESUFoR0JFQWdBeUVJREFFTElBZ29BZ0JGRFFBZ0NFRUVhaUVJREFFTEN5QUhJQVUyQWdBZ0JDQUNOZ0lBQTBBQ1FBSkFJQVVnQmtZZ0FpQURSbklFZnlBQ0JTQUtJQUVwQWdBM0F3aEJBU0VKQWtBQ1FBSkFBa0FDUUNBRklBUWdDQ0FDYTBFQ2RTQUdJQVZySUFBb0FnZ1EvZ3NpQzBFQmFnNENBQVlCQ3lBSElBVTJBZ0FEUUFKQUlBSWdCQ2dDQUVZTkFDQUZJQUlvQWdBZ0FDZ0NDQkNJQkNJQlFYOUdEUUFnQnlBSEtBSUFJQUZxSWdVMkFnQWdBa0VFYWlFQ0RBRUxDeUFFSUFJMkFnQU1BUXNnQnlBSEtBSUFJQXRxSWdVMkFnQWdCU0FHUmcwQ0lBTWdDRVlFUUNBRUtBSUFJUUlnQXlFSURBY0xJQXBCQkdwQkFDQUFLQUlJRUlnRUlnaEJmMGNOQVF0QkFpRUpEQU1MSUFwQkJHb2hBaUFHSUFjb0FnQnJJQWhKQkVBTUF3c0RRQ0FJQkVBZ0FpMEFBQ0VGSUFjZ0J5Z0NBQ0lKUVFGcU5nSUFJQWtnQlRvQUFDQUlRUUZySVFnZ0FrRUJhaUVDREFFTEN5QUVJQVFvQWdCQkJHb2lBallDQUNBQ0lRZ0RRQ0FESUFoR0JFQWdBeUVJREFVTElBZ29BZ0JGRFFRZ0NFRUVhaUVJREFBTEFBc2dCQ2dDQUFzZ0EwY2hDUXNnQ2tFUWFpUUFJQWtQQ3lBSEtBSUFJUVVNQUFzQUN3a0FJQUFRa2dZUU13czNBQ01BUVJCcklnQWtBQ0FBSUFRMkFnd2dBQ0FESUFKck5nSUlJQUJCREdvZ0FFRUlhaERDQVNnQ0FDRUJJQUJCRUdva0FDQUJDelFBQTBBZ0FTQUNSa1VFUUNBRUlBRXNBQUFpQUNBRElBQkJmMG9iT2dBQUlBUkJBV29oQkNBQlFRRnFJUUVNQVFzTElBSUxEQUFnQVNBQ0lBRkJmMG9iQ3lvQUEwQWdBU0FDUmtVRVFDQURJQUV0QUFBNkFBQWdBMEVCYWlFRElBRkJBV29oQVF3QkN3c2dBZ3RBQUFOQUlBRWdBa2NFUUNBQklBRXNBQUFpQUVFQVRnUi9RWUNwQXlnQ0FDQUJMQUFBUVFKMGFpZ0NBQVVnQUFzNkFBQWdBVUVCYWlFQkRBRUxDeUFDQ3ljQUlBRkJBRTRFZjBHQXFRTW9BZ0FnQVVIL0FYRkJBblJxS0FJQUJTQUJDMEVZZEVFWWRRdEFBQU5BSUFFZ0FrY0VRQ0FCSUFFc0FBQWlBRUVBVGdSL1FmQ2NBeWdDQUNBQkxBQUFRUUowYWlnQ0FBVWdBQXM2QUFBZ0FVRUJhaUVCREFFTEN5QUNDeWNBSUFGQkFFNEVmMEh3bkFNb0FnQWdBVUgvQVhGQkFuUnFLQUlBQlNBQkMwRVlkRUVZZFFzSkFDQUFFSXNHRURNTE5RQURRQ0FCSUFKR1JRUkFJQVFnQVNnQ0FDSUFJQU1nQUVHQUFVa2JPZ0FBSUFSQkFXb2hCQ0FCUVFScUlRRU1BUXNMSUFJTEV3QWdBU0FDSUFGQmdBRkpHMEVZZEVFWWRRc3FBQU5BSUFFZ0FrWkZCRUFnQXlBQkxBQUFOZ0lBSUFOQkJHb2hBeUFCUVFGcUlRRU1BUXNMSUFJTFFRQURRQ0FCSUFKSEJFQWdBU0FCS0FJQUlnQkIvd0JOQkg5QmdLa0RLQUlBSUFFb0FnQkJBblJxS0FJQUJTQUFDellDQUNBQlFRUnFJUUVNQVFzTElBSUxIZ0FnQVVIL0FFMEVmMEdBcVFNb0FnQWdBVUVDZEdvb0FnQUZJQUVMQzBFQUEwQWdBU0FDUndSQUlBRWdBU2dDQUNJQVFmOEFUUVIvUWZDY0F5Z0NBQ0FCS0FJQVFRSjBhaWdDQUFVZ0FBczJBZ0FnQVVFRWFpRUJEQUVMQ3lBQ0N4NEFJQUZCL3dCTkJIOUI4SndES0FJQUlBRkJBblJxS0FJQUJTQUJDd3RGQUFKQUEwQWdBaUFEUmcwQkFrQWdBaWdDQUVIL0FFc05BRUhzbGdNb0FnQWdBaWdDQUVFQmRHb3ZBUUFnQVhGRkRRQWdBa0VFYWlFQ0RBRUxDeUFDSVFNTElBTUxSQUFEUUFKQUlBSWdBMGNFZnlBQ0tBSUFRZjhBU3cwQlFleVdBeWdDQUNBQ0tBSUFRUUYwYWk4QkFDQUJjVVVOQVNBQ0JTQURDdzhMSUFKQkJHb2hBZ3dBQ3dBTFJnQURRQ0FCSUFKSEJFQWdBeUFCS0FJQVFmOEFUUVIvUWV5V0F5Z0NBQ0FCS0FJQVFRRjBhaThCQUFWQkFBczdBUUFnQTBFQ2FpRURJQUZCQkdvaEFRd0JDd3NnQWdza0FDQUNRZjhBVFFSL1FleVdBeWdDQUNBQ1FRRjBhaThCQUNBQmNVRUFSd1ZCQUFzTERRQWdBQ2dDQUNnQ0FCQ3lDd3NQQUNBQUlBQW9BZ0FvQWdRUkFBQUxQQUVDZnlNQVFSQnJJZ0lrQUNBQUtBSUFRWDlIQkVBZ0FnSi9JQUpCQ0dvaUF5QUJFRzhhSUFNTEVHOGFJQUFnQWhDc0N3c2dBa0VRYWlRQUN4OEFJQUFDZjBITW5nUkJ6SjRFS0FJQVFRRnFJZ0EyQWdBZ0FBczJBZ1FMUEFBQ1FFSEluZ1F0QUFCQkFYRU5BRUhJbmdRUWNVVU5BRUhBbmdRUW5nd1Fpd1JCeEo0RVFjQ2VCRFlDQUVISW5nUVFjQXRCeEo0RUtBSUFDNDBCQVFKL0l3QkJJR3NpQWlRQUFrQWdBRUdRcXdRUVd5Z0NBRUdVcXdRb0FnQnJRUUoxVFFSQUlBQVFrUVlNQVF0QmtLc0VFSkVDSVFFZ0FrRUlha0dRcXdRUVF5QUFhaEMxQzBHUXF3UVFReUFCRUxRTElnRWdBQkRqQXlBQkVMTUxJQUVnQVNnQ0JCREFCU0FCS0FJQUJFQWdBU2dDRUNBQktBSUFJQUVRd2dVUS9RVUxDeUFDUVNCcUpBQUxDUUFnQUJDTkJoQXpDMHdCQVg4Z0FFR1Fxd1FRUXlJQlN3UkFJQUFnQVdzUW1nd1BDeUFBSUFGSkJFQkJrS3NFS0FJQUlBQkJBblJxSVFCQmtLc0VFRU1oQVVHUXF3UWdBQkQ4QlVHUXF3UWdBUkNQQmdzTEp3RUJmeU1BUVJCcklnSWtBQ0FDSUFFMkFnd2dBQ0FDUVF4cUVJSUJJQUpCRUdva0FDQUFDMEFBQWtCQnZKNEVMUUFBUVFGeERRQkJ2SjRFRUhGRkRRQVFvZ3hCdEo0RVFZQ3JCRFlDQUVHNG5nUkJ0SjRFTmdJQVFieWVCQkJ3QzBHNG5nUW9BZ0FMTXdCQjBLZ0VFR0ZCM0tnRVFRQTZBQUJCMktnRVFRQTJBZ0JCMEtnRVFjUzNBellDQUVIWXFBUkI3SllES0FJQU5nSUFDME1CQVg4UWdBWkJIRWtFUUJDVUFRQUxRWkNyQkVHUXF3UVFrUUpCSEJEL0JTSUFOZ0lBUVpTckJDQUFOZ0lBUVpDckJCQmJJQUJCOEFCcU5nSUFRUUFRL2dVTE9RRUJmeU1BUVJCcklnQWtBRUdRcXdSQ0FEY0RBQ0FBUVFBMkFneEJvS3NFSUFCQkRHb1FuQU5Cb0t3RVFRQTZBQUFnQUVFUWFpUUFDOElIQVFGL1FZQ3JCQkJoUVlDckJFR3d0d00yQWdBUW9Rd1FvQXhCSEJDUkJrR3dyQVJCcGJjREVKZ0JHa0dRcXdRUVF5RUFRWkNyQkJDUUJrR1Fxd1FnQUJDUEJrSEFxQVFRWVVIQXFBUkI2TU1ETmdJQVFjQ29CRUdNblFRUVlCQmtRY2lvQkJCaFFjaW9CRUdJeEFNMkFnQkJ5S2dFUVpTZEJCQmdFR1FRbnd4QjBLZ0VRZGllQkJCZ0VHUkI0S2dFRUdGQjRLZ0VRZlM3QXpZQ0FFSGdxQVJCMEo0RUVHQVFaRUhvcUFRUVlVSG9xQVJCaUwwRE5nSUFRZWlvQkVIZ25nUVFZQkJrUWZDb0JCQmhRZkNvQkVINHR3TTJBZ0JCK0tnRUVGUTJBZ0JCOEtnRVFlaWVCQkJnRUdSQmdLa0VFR0ZCZ0trRVFaeStBellDQUVHQXFRUkI4SjRFRUdBUVpFR0lxUVFRakFSQmlLa0VRZmllQkJCZ0VHUkJrS2tFRUdGQm1La0VRYTdZQURzQkFFR1FxUVJCcUxnRE5nSUFRWnlwQkJCQ0drR1FxUVJCZ0o4RUVHQVFaRUd3cVFRUVlVRzRxUVJDcm9DQWdNQUZOd0lBUWJDcEJFSFF1QU0yQWdCQndLa0VFRUlhUWJDcEJFR0lud1FRWUJCa1FkQ3BCQkJoUWRDcEJFR294QU0yQWdCQjBLa0VRWnlkQkJCZ0VHUkIyS2tFRUdGQjJLa0VRWnpHQXpZQ0FFSFlxUVJCcEowRUVHQVFaRUhncVFRUVlVSGdxUVJCOE1jRE5nSUFRZUNwQkVHc25RUVFZQkJrUWVpcEJCQmhRZWlwQkVIWXlRTTJBZ0JCNktrRVFiU2RCQkJnRUdSQjhLa0VFR0ZCOEtrRVFiRFJBellDQUVId3FRUkIzSjBFRUdBUVpFSDRxUVFRWVVINHFRUkJ4TklETmdJQVFmaXBCRUhrblFRUVlCQmtRWUNxQkJCaFFZQ3FCRUc0MHdNMkFnQkJnS29FUWV5ZEJCQmdFR1JCaUtvRUVHRkJpS29FUWF6VUF6WUNBRUdJcWdSQjlKMEVFR0FRWkVHUXFnUVFZVUdRcWdSQm9OVUROZ0lBUVpDcUJFSDhuUVFRWUJCa1FaaXFCQkJoUVppcUJFSEUxZ00yQWdCQm1Lb0VRWVNlQkJCZ0VHUkJvS29FRUdGQm9Lb0VRZWpYQXpZQ0FFR2dxZ1JCako0RUVHQVFaRUdvcWdRUVlVR29xZ1JCak5rRE5nSUFRYWlxQkVHVW5nUVFZQkJrUWJDcUJCQmhRYmlxQkVHYzVRTTJBZ0JCc0tvRVFhRExBellDQUVHNHFnUkIwTXNETmdJQVFiQ3FCRUc4blFRUVlCQmtRY0NxQkJCaFFjaXFCRUhBNVFNMkFnQkJ3S29FUWFqTkF6WUNBRUhJcWdSQjJNMEROZ0lBUWNDcUJFSEVuUVFRWUJCa1FkQ3FCQkJoUWRpcUJCRDdCVUhRcWdSQmxNOEROZ0lBUWRDcUJFSE1uUVFRWUJCa1FlQ3FCQkJoUWVpcUJCRDdCVUhncWdSQnNOQUROZ0lBUWVDcUJFSFVuUVFRWUJCa1FmQ3FCQkJoUWZDcUJFR3cyZ00yQWdCQjhLb0VRWnllQkJCZ0VHUkIrS29FRUdGQitLb0VRYWpiQXpZQ0FFSDRxZ1JCcEo0RUVHQVFaQXZRQVFFQ2Z5TUFRYUFCYXlJRUpBQWdCQ0FCTmdLWUFTQUVRWkFCYWlFRkFrQURRQ0FDSUFOSkJFQWdCQ0FDTmdJSUlBQWdCRUdRQVdvZ0FpQUNRU0JxSUFNZ0F5QUNhMEVnU2hzZ0JFRUlhaUFFUVJCcUlBVWdCRUVNYWlBQUtBSUFLQUlRRVE0QVFRSkdEUUlnQkVFUWFpRUJJQVFvQWdnZ0FrWU5BZ05BSUFRb0Fnd2dBVTBFUUNBRUtBSUlJUUlNQXdVZ0JDQUJLQUlBTmdJRUlBUW9BcGdCSUFSQkJHb29BZ0FRbFFNZ0FVRUVhaUVCREFFTEFBc0FDd3NnQkNnQ21BRWFJQVJCb0FGcUpBQVBDeEIzQUF1ckFRRUNmeU1BUVVCcUlnUWtBQ0FFSUFFMkFqZ2dCRUV3YWlFRkFrQURRQ0FDSUFOSkJFQWdCQ0FDTmdJSUlBQWdCRUV3YWlBQ0lBTWdCRUVJYWlBRVFSQnFJQVVnQkVFTWFpQUFLQUlBS0FJTUVRNEFRUUpHRFFJZ0JFRVFhaUVCSUFRb0FnZ2dBa1lOQWdOQUlBUW9BZ3dnQVUwRVFDQUVLQUlJSVFJTUF3VWdCRUU0YWlBQkVKTUdJQUZCQVdvaEFRd0JDd0FMQUFzTElBUW9BamdhSUFSQlFHc2tBQThMRUhjQUM0WUJBQ01BUVNCcklnRWtBQ0FCUVJCcUVFSWhCQUovSUFGQkNHb2lBaENNQkNBQ1FZVEFBellDQUNBQ0N5QUVFSW9DSUFVUVBpQUZFRDRnQlJBM1FRSjBhaENrRENBRUVENGhBaUFBRUVJaEF3Si9JQUZCQ0dvaUFCQ01CQ0FBUWVUQUF6WUNBQ0FBQ3lBREVJb0NJQUlnQWhDSkFTQUNhaENqRENBRUVEa2FJQUZCSUdva0FBdE5BQ01BUVNCcklnRWtBQ0FCUVJCcUVFSWlBeENLQWlBRkVENGdCUkErSUFVUU4yb1FsQVlnQXhBK0lRSWdBQkJDRUlvQ0lBSWdBaENKQVNBQ2FoQ1VCaUFERURrYUlBRkJJR29rQUF1TUF3RUhmeU1BUWZBRGF5SUFKQUFnQUVIb0Eyb2dBeEJLSUFCQjZBTnFFSjhCSVFvZ0FnSi9JQVVRTndSQUlBVkJBQkNoQXlnQ0FDQUtRUzBRcFFGR0lRc0xJQXNMSUFCQjZBTnFJQUJCNEFOcUlBQkIzQU5xSUFCQjJBTnFJQUJCeUFOcUVFSWlEQ0FBUWJnRGFoQkNJZ2dnQUVHb0Eyb1FRaUlISUFCQnBBTnFFSmdHSUFCQnd3STJBaEFnQUVFSWFrRUFJQUJCRUdvUVppRUpBbjhnQlJBM0lBQW9BcVFEU2dSQUlBVVFOeUVDSUFBb0FxUURJUVlnQnhBM0lBSWdCbXRCQVhScVFRRnFEQUVMSUFjUU4wRUNhZ3NoQmlBQVFSQnFJUUlDUUNBSUVEY2dCbW9nQUNnQ3BBTnFJZ1pCNVFCSkRRQWdDU0FHUVFKMEVEb1FmeUFKS0FJQUlnSU5BQkIzQUFzZ0FpQUFRUVJxSUFBZ0F5Z0NCQ0FGRUQ0Z0JSQStJQVVRTjBFQ2RHb2dDaUFMSUFCQjRBTnFJQUFvQXR3RElBQW9BdGdESUF3Z0NDQUhJQUFvQXFRREVKY0dJQUVnQWlBQUtBSUVJQUFvQWdBZ0F5QUVFT1FCSVFFZ0NSQmxJQWNRT1JvZ0NCQTVHaUFNRURrYUlBQkI2QU5xRUVRZ0FFSHdBMm9rQUNBQkM5Y0VBUXQvSXdCQnNBaHJJZ0FrQUNBQUlBVTNBeEFnQUNBR053TVlJQUFnQUVIQUIybzJBcndISUFCQndBZHFRZVFBUVorM0F5QUFRUkJxRUt3RUlRY2dBRUhEQWpZQ29BUWdBRUdZQkdwQkFDQUFRYUFFYWhCbUlRNGdBRUhEQWpZQ29BUWdBRUdRQkdwQkFDQUFRYUFFYWhCbUlRb2dBRUdnQkdvaENBSkFJQWRCNUFCUEJFQVFWQ0VISUFBZ0JUY0RBQ0FBSUFZM0F3Z2dBRUc4QjJvZ0IwR2Z0d01nQUJEWEFTRUhJQUFvQXJ3SElnaEZEUUVnRGlBSUVIOGdDaUFIUVFKMEVEb1FmeUFLRUpzR0RRRWdDaWdDQUNFSUN5QUFRWWdFYWlBREVFb2dBRUdJQkdvUW53RWlFU0FBS0FLOEJ5SUpJQWNnQ1dvZ0NCRGxBU0FDQW44Z0J3UkFJQUFvQXJ3SExRQUFRUzFHSVE4TElBOExJQUJCaUFScUlBQkJnQVJxSUFCQi9BTnFJQUJCK0FOcUlBQkI2QU5xRUVJaUVDQUFRZGdEYWhCQ0lnc2dBRUhJQTJvUVFpSUpJQUJCeEFOcUVKZ0dJQUJCd3dJMkFqQWdBRUVvYWtFQUlBQkJNR29RWmlFTUFuOGdBQ2dDeEFNaUFpQUhTQVJBSUFrUU55QUhJQUpyUVFGMFFRRnlhZ3dCQ3lBSkVEZEJBbW9MSVEwZ0FFRXdhaUVDSUFzUU55QU5haUFBS0FMRUEyb2lEVUhsQUU4RVFDQU1JQTFCQW5RUU9oQi9JQXdvQWdBaUFrVU5BUXNnQWlBQVFTUnFJQUJCSUdvZ0F5Z0NCQ0FJSUFnZ0IwRUNkR29nRVNBUElBQkJnQVJxSUFBb0F2d0RJQUFvQXZnRElCQWdDeUFKSUFBb0FzUURFSmNHSUFFZ0FpQUFLQUlrSUFBb0FpQWdBeUFFRU9RQklRRWdEQkJsSUFrUU9Sb2dDeEE1R2lBUUVEa2FJQUJCaUFScUVFUWdDaEJsSUE0UVpTQUFRYkFJYWlRQUlBRVBDeEIzQUF1RkF3RUhmeU1BUWNBQmF5SUFKQUFnQUVHNEFXb2dBeEJLSUFCQnVBRnFFSmtCSVFvZ0FnSi9JQVVRTndSQUlBVkJBQkJBTFFBQUlBcEJMUkNHQVVIL0FYRkdJUXNMSUFzTElBQkJ1QUZxSUFCQnNBRnFJQUJCcndGcUlBQkJyZ0ZxSUFCQm9BRnFFRUlpRENBQVFaQUJhaEJDSWdnZ0FFR0FBV29RUWlJSElBQkIvQUJxRUpvR0lBQkJ3d0kyQWhBZ0FFRUlha0VBSUFCQkVHb1FaaUVKQW44Z0JSQTNJQUFvQW54S0JFQWdCUkEzSVFJZ0FDZ0NmQ0VHSUFjUU55QUNJQVpyUVFGMGFrRUJhZ3dCQ3lBSEVEZEJBbW9MSVFZZ0FFRVFhaUVDQWtBZ0NCQTNJQVpxSUFBb0FueHFJZ1pCNVFCSkRRQWdDU0FHRURvUWZ5QUpLQUlBSWdJTkFCQjNBQXNnQWlBQVFRUnFJQUFnQXlnQ0JDQUZFRDRnQlJBK0lBVVFOMm9nQ2lBTElBQkJzQUZxSUFBc0FLOEJJQUFzQUs0QklBd2dDQ0FISUFBb0Fud1FtUVlnQVNBQ0lBQW9BZ1FnQUNnQ0FDQURJQVFRMFFFaEFTQUpFR1VnQnhBNUdpQUlFRGthSUF3UU9Sb2dBRUc0QVdvUVJDQUFRY0FCYWlRQUlBRUx6Z1FCQzM4akFFSFFBMnNpQUNRQUlBQWdCVGNERUNBQUlBWTNBeGdnQUNBQVFlQUNhallDM0FJZ0FFSGdBbXBCNUFCQm43Y0RJQUJCRUdvUXJBUWhCeUFBUWNNQ05nTHdBU0FBUWVnQmFrRUFJQUJCOEFGcUVHWWhEaUFBUWNNQ05nTHdBU0FBUWVBQmFrRUFJQUJCOEFGcUVHWWhDaUFBUWZBQmFpRUlBa0FnQjBIa0FFOEVRQkJVSVFjZ0FDQUZOd01BSUFBZ0JqY0RDQ0FBUWR3Q2FpQUhRWiszQXlBQUVOY0JJUWNnQUNnQzNBSWlDRVVOQVNBT0lBZ1FmeUFLSUFjUU9oQi9JQW9RbXdZTkFTQUtLQUlBSVFnTElBQkIyQUZxSUFNUVNpQUFRZGdCYWhDWkFTSVJJQUFvQXR3Q0lna2dCeUFKYWlBSUVQd0JJQUlDZnlBSEJFQWdBQ2dDM0FJdEFBQkJMVVloRHdzZ0R3c2dBRUhZQVdvZ0FFSFFBV29nQUVIUEFXb2dBRUhPQVdvZ0FFSEFBV29RUWlJUUlBQkJzQUZxRUVJaUN5QUFRYUFCYWhCQ0lna2dBRUdjQVdvUW1nWWdBRUhEQWpZQ01DQUFRU2hxUVFBZ0FFRXdhaEJtSVF3Q2Z5QUFLQUtjQVNJQ0lBZElCRUFnQ1JBM0lBY2dBbXRCQVhSQkFYSnFEQUVMSUFrUU4wRUNhZ3NoRFNBQVFUQnFJUUlnQ3hBM0lBMXFJQUFvQXB3QmFpSU5RZVVBVHdSQUlBd2dEUkE2RUg4Z0RDZ0NBQ0lDUlEwQkN5QUNJQUJCSkdvZ0FFRWdhaUFES0FJRUlBZ2dCeUFJYWlBUklBOGdBRUhRQVdvZ0FDd0F6d0VnQUN3QXpnRWdFQ0FMSUFrZ0FDZ0NuQUVRbVFZZ0FTQUNJQUFvQWlRZ0FDZ0NJQ0FESUFRUTBRRWhBU0FNRUdVZ0NSQTVHaUFMRURrYUlCQVFPUm9nQUVIWUFXb1FSQ0FLRUdVZ0RoQmxJQUJCMEFOcUpBQWdBUThMRUhjQUMxa0JBbjhqQUVFUWF5SUNKQUFnQUJDYkFRUkFJQUFvQWdBaEF5QUFFSTBDR2lBREVETUxJQUFnQVNnQ0NEWUNDQ0FBSUFFcEFnQTNBZ0FnQVVFQUVLb0JJQUpCQURZQ0RDQUJJQUpCREdvUWdnRWdBa0VRYWlRQUMxa0JBbjhqQUVFUWF5SUNKQUFnQUJDYkFRUkFJQUFvQWdBaEF5QUFFSTBDR2lBREVETUxJQUFnQVNnQ0NEWUNDQ0FBSUFFcEFnQTNBZ0FnQVVFQUVLb0JJQUpCQURvQUR5QUJJQUpCRDJvUWtBRWdBa0VRYWlRQUMyY0JBWDhqQUVFZ2F5SURKQUFnQXlBQk5nSVFJQU1nQURZQ0dDQURJQUkyQWdnRFFBSkFJQU5CR0dvZ0EwRVFhaEI4SWdCRkRRQWdBeWdDR0NBREtBSUlFTUVCUlEwQUlBTkJHR29RZ0FJZ0EwRUlhaENBQWd3QkN3c2dBMEVnYWlRQUlBQkJBWE1MM2dFQkJIOGpBRUVRYXlJRkpBQWdBQkEzSVFRZ0FCQ0hCQ0VEQWtBZ0FTQUNFS1FFSWdaRkRRQWdBU0FBRUQ0Z0FCQStJQUFRTjBFQ2RHb1ErZ1VFUUNBQUFuOGpBRUVRYXlJQUpBQWdCU0FCSUFJUXl3WWdBRUVRYWlRQUlBVWlBQXNRUGlBQUVEY1FvQXNnQUJBNUdnd0JDeUFHSUFNZ0JHdExCRUFnQUNBRElBUWdCbW9nQTJzZ0JDQUVFUFFGQ3lBQUVENGdCRUVDZEdvaEF3TkFJQUVnQWtjRVFDQURJQUVRZ2dFZ0FVRUVhaUVCSUFOQkJHb2hBd3dCQ3dzZ0JVRUFOZ0lBSUFNZ0JSQ0NBU0FBSUFRZ0Jtb1FrZ0lMSUFWQkVHb2tBQXRZQVFKL0l3QkJFR3NpQVNRQUFrQWdBQkNiQVFSQUlBQW9BZ0FoQWlBQlFRQTJBZ3dnQWlBQlFReHFFSUlCSUFCQkFCQ2FBUXdCQ3lBQlFRQTJBZ2dnQUNBQlFRaHFFSUlCSUFCQkFCQ3FBUXNnQVVFUWFpUUFDMEVCQVg4Z0FFVUVRQThMSUFBb0FvaUhyd01pQVFSQUlBRVFSU0FBUVFBMkFvaUhyd01MSUFBb0F1Q0dwd0lRTXlBQVFlU0dwd0pxS0FJQUVETWdBQkF6QzUwQ0FRRi9Jd0JCd0FOcklnQWtBQ0FBSUFJMkFyQURJQUFnQVRZQ3VBTWdBRUhFQWpZQ0ZDQUFRUmhxSUFCQklHb2dBRUVVYWhCbUlRRWdBRUVRYWlBRUVFb2dBRUVRYWhDZkFTRUhJQUJCQURvQUR5QUFRYmdEYWlBQ0lBTWdBRUVRYWlBRUtBSUVJQVVnQUVFUGFpQUhJQUVnQUVFVWFpQUFRYkFEYWhDZ0JnUkFJQVlRcnd3Z0FDMEFEd1JBSUFZZ0IwRXRFS1VCRUpVREN5QUhRVEFRcFFFaEFpQUJLQUlBSVFRZ0FDZ0NGQ0lEUVFScklRY0RRQUpBSUFRZ0IwOE5BQ0FFS0FJQUlBSkhEUUFnQkVFRWFpRUVEQUVMQ3lBR0lBUWdBeEN1REFzZ0FFRzRBMm9nQUVHd0Eyb1FnQUVFUUNBRklBVW9BZ0JCQW5JMkFnQUxJQUFvQXJnRElRSWdBRUVRYWhCRUlBRVFaU0FBUWNBRGFpUUFJQUlMbVFJQkFYOGpBRUVRYXlJS0pBQWdDUUovSUFBRVFDQUtJQUVRbmdZaUFCRDJBU0FDSUFvb0FnQTJBQUFnQ2lBQUVQVUJJQWdnQ2hEVUFTQUtFRGthSUFvZ0FCQzdBU0FISUFvUTFBRWdDaEE1R2lBRElBQVF1Z0UyQWdBZ0JDQUFFSjRCTmdJQUlBb2dBQkNkQVNBRklBb1FpZ0VnQ2hBNUdpQUtJQUFRdkFFZ0JpQUtFTlFCSUFvUU9Sb2dBQkQwQVF3QkN5QUtJQUVRblFZaUFCRDJBU0FDSUFvb0FnQTJBQUFnQ2lBQUVQVUJJQWdnQ2hEVUFTQUtFRGthSUFvZ0FCQzdBU0FISUFvUTFBRWdDaEE1R2lBRElBQVF1Z0UyQWdBZ0JDQUFFSjRCTmdJQUlBb2dBQkNkQVNBRklBb1FpZ0VnQ2hBNUdpQUtJQUFRdkFFZ0JpQUtFTlFCSUFvUU9Sb2dBQkQwQVFzMkFnQWdDa0VRYWlRQUMvQURBUUYvSXdCQjhBUnJJZ0FrQUNBQUlBSTJBdUFFSUFBZ0FUWUM2QVFnQUVIRUFqWUNFQ0FBUWNnQmFpQUFRZEFCYWlBQVFSQnFFR1loQVNBQVFjQUJhaUFFRUVvZ0FFSEFBV29RbndFaEJ5QUFRUUE2QUw4QkFrQWdBRUhvQkdvZ0FpQURJQUJCd0FGcUlBUW9BZ1FnQlNBQVFiOEJhaUFISUFFZ0FFSEVBV29nQUVIZ0JHb1FvQVpGRFFBZ0FFR2J0d01vQUFBMkFMY0JJQUJCbExjREtRQUFOd093QVNBSElBQkJzQUZxSUFCQnVnRnFJQUJCZ0FGcUVPVUJJQUJCd3dJMkFoQWdBRUVJYWtFQUlBQkJFR29RWmlFRElBQkJFR29oQWdKQUlBQW9Bc1FCSUFFb0FnQnJRWWtEVGdSQUlBTWdBQ2dDeEFFZ0FTZ0NBR3RCQW5WQkFtb1FPaEIvSUFNb0FnQkZEUUVnQXlnQ0FDRUNDeUFBTFFDL0FRUkFJQUpCTFRvQUFDQUNRUUZxSVFJTElBRW9BZ0FoQkFOQUlBQW9Bc1FCSUFSTkJFQUNRQ0FDUVFBNkFBQWdBQ0FHTmdJQUlBQkJFR3BCa0xjRElBQVEvUUZCQVVjTkFDQURFR1VNQkFzRklBSWdBRUd3QVdvZ0FFR0FBV29nQUVHb0FXb2dCQkNPQkNBQVFZQUJhbXRCQW5WcUxRQUFPZ0FBSUFKQkFXb2hBaUFFUVFScUlRUU1BUXNMRUhjQUN4QjNBQXNnQUVIb0JHb2dBRUhnQkdvUWdBRUVRQ0FGSUFVb0FnQkJBbkkyQWdBTElBQW9BdWdFSVFJZ0FFSEFBV29RUkNBQkVHVWdBRUh3Qkdva0FDQUNDMm9CQVg4akFFRWdheUlESkFBZ0F5QUJOZ0lRSUFNZ0FEWUNHQ0FESUFJMkFnZ0RRQUpBSUFOQkdHb2dBMEVRYWhCOElnQkZEUUFnQXlnQ0dDMEFBQ0FES0FJSUxRQUFSdzBBSUFOQkdHb1EzZ0lnQTBFSWFoRGVBZ3dCQ3dzZ0EwRWdhaVFBSUFCQkFYTUwzd0VCQkg4akFFRWdheUlGSkFBZ0FCQTNJUU1nQUJCUElRUUNRQ0FCSUFJUStnTWlCa1VOQUNBQklBQVFQaUFBRUQ0Z0FCQTNhaEQ2QlFSQUlBQUNmeU1BUVJCcklnQWtBQ0FGUVJCcUlnTWdBU0FDRU9RRklBQkJFR29rQUNBRElnQUxFRDRnQUJBM0VLUUxJQUFRT1JvTUFRc2dCaUFFSUFOclN3UkFJQUFnQkNBRElBWnFJQVJySUFNZ0F4Q0VCQXNnQUJBK0lBTnFJUVFEUUNBQklBSkhCRUFnQkNBQkVKQUJJQUZCQVdvaEFTQUVRUUZxSVFRTUFRc0xJQVZCQURvQUR5QUVJQVZCRDJvUWtBRWdBQ0FESUFacUVKSUNDeUFGUVNCcUpBQUxXQUVDZnlNQVFSQnJJZ0VrQUFKQUlBQVFtd0VFUUNBQUtBSUFJUUlnQVVFQU9nQVBJQUlnQVVFUGFoQ1FBU0FBUVFBUW1nRU1BUXNnQVVFQU9nQU9JQUFnQVVFT2FoQ1FBU0FBUVFBUXFnRUxJQUZCRUdva0FBdTNBZ0VDZnlNQVFhQUJheUlBSkFBZ0FDQUNOZ0tRQVNBQUlBRTJBcGdCSUFCQnhBSTJBaFFnQUVFWWFpQUFRU0JxSUFCQkZHb1FaaUVCSUFCQkVHb2dCQkJLSUFCQkVHb1FtUUVoQnlBQVFRQTZBQThDUUNBQVFaZ0JhaUFDSUFNZ0FFRVFhaUFFS0FJRUlBVWdBRUVQYWlBSElBRWdBRUVVYWlBQVFZUUJhaENvQmtVTkFDQUdFTFlNSUFBdEFBOEVRQ0FHSUFkQkxSQ0dBUkNXQXdzZ0IwRXdFSVlCSVFNZ0FTZ0NBQ0lFSUFBb0FoUWlCMEVCYXlJQ0lBSWdCRWtiSVFnZ0EwSC9BWEVoQXdOQUFrQWdCaUFDSUFSTEJIOGdCQzBBQUNBRFJnMEJJQVFGSUFnTElBY1F0UXdNQWdzZ0JFRUJhaUVFREFBTEFBc2dBRUdZQVdvZ0FFR1FBV29RZ1FFRVFDQUZJQVVvQWdCQkFuSTJBZ0FMSUFBb0FwZ0JJUUlnQUVFUWFoQkVJQUVRWlNBQVFhQUJhaVFBSUFJTG1RSUJBWDhqQUVFUWF5SUtKQUFnQ1FKL0lBQUVRQ0FLSUFFUXBRWWlBQkQyQVNBQ0lBb29BZ0EyQUFBZ0NpQUFFUFVCSUFnZ0NoQ0tBU0FLRURrYUlBb2dBQkM3QVNBSElBb1FpZ0VnQ2hBNUdpQURJQUFRdWdFNkFBQWdCQ0FBRUo0Qk9nQUFJQW9nQUJDZEFTQUZJQW9RaWdFZ0NoQTVHaUFLSUFBUXZBRWdCaUFLRUlvQklBb1FPUm9nQUJEMEFRd0JDeUFLSUFFUW93WWlBQkQyQVNBQ0lBb29BZ0EyQUFBZ0NpQUFFUFVCSUFnZ0NoQ0tBU0FLRURrYUlBb2dBQkM3QVNBSElBb1FpZ0VnQ2hBNUdpQURJQUFRdWdFNkFBQWdCQ0FBRUo0Qk9nQUFJQW9nQUJDZEFTQUZJQW9RaWdFZ0NoQTVHaUFLSUFBUXZBRWdCaUFLRUlvQklBb1FPUm9nQUJEMEFRczJBZ0FnQ2tFUWFpUUFDK0lEQVFGL0l3QkJvQUpySWdBa0FDQUFJQUkyQXBBQ0lBQWdBVFlDbUFJZ0FFSEVBallDRUNBQVFaZ0JhaUFBUWFBQmFpQUFRUkJxRUdZaEFTQUFRWkFCYWlBRUVFb2dBRUdRQVdvUW1RRWhCeUFBUVFBNkFJOEJBa0FnQUVHWUFtb2dBaUFESUFCQmtBRnFJQVFvQWdRZ0JTQUFRWThCYWlBSElBRWdBRUdVQVdvZ0FFR0VBbW9RcUFaRkRRQWdBRUdidHdNb0FBQTJBSWNCSUFCQmxMY0RLUUFBTndPQUFTQUhJQUJCZ0FGcUlBQkJpZ0ZxSUFCQjlnQnFFUHdCSUFCQnd3STJBaEFnQUVFSWFrRUFJQUJCRUdvUVppRURJQUJCRUdvaEFnSkFJQUFvQXBRQklBRW9BZ0JyUWVNQVRnUkFJQU1nQUNnQ2xBRWdBU2dDQUd0QkFtb1FPaEIvSUFNb0FnQkZEUUVnQXlnQ0FDRUNDeUFBTFFDUEFRUkFJQUpCTFRvQUFDQUNRUUZxSVFJTElBRW9BZ0FoQkFOQUlBQW9BcFFCSUFSTkJFQUNRQ0FDUVFBNkFBQWdBQ0FHTmdJQUlBQkJFR3BCa0xjRElBQVEvUUZCQVVjTkFDQURFR1VNQkFzRklBSWdBRUgyQUdvZ0FFR0FBV29nQkJDU0JDQUFheUFBYWkwQUNqb0FBQ0FDUVFGcUlRSWdCRUVCYWlFRURBRUxDeEIzQUFzUWR3QUxJQUJCbUFKcUlBQkJrQUpxRUlFQkJFQWdCU0FGS0FJQVFRSnlOZ0lBQ3lBQUtBS1lBaUVDSUFCQmtBRnFFRVFnQVJCbElBQkJvQUpxSkFBZ0FncytBUUYvSXdCQkVHc2lCU1FBSUFVZ0JEWUNEQ0FGUVFocUlBVkJER29ReFFFaEJDQUFJQUVnQWlBREVNOEdJUUFnQkJERUFTQUZRUkJxSkFBZ0FBdDlBUUYvSXdCQmtBRnJJZ1lrQUNBR0lBWkJoQUZxTmdJY0lBQWdCa0VnYWlBR1FSeHFJQU1nQkNBRkVLd0dJQVpDQURjREVDQUdJQVpCSUdvMkFnd2dBU0FHUVF4cUlBRWdBaWdDQUJENEJpQUdRUkJxSUFBb0FnQVF1Z3dpQUVGL1JnUkFFSGNBQ3lBQ0lBRWdBRUVDZEdvMkFnQWdCa0dRQVdva0FBdEtBQ01BUWFBRGF5SUNKQUFnQWlBQ1FhQURhallDRENBQVFRaHFJQUpCRUdvZ0FrRU1haUFFSUFVZ0JoQzdEQ0FDUVJCcUlBSW9BZ3dnQVJDdUN5RUFJQUpCb0FOcUpBQWdBQXRLQUNNQVFZQUJheUlDSkFBZ0FpQUNRZlFBYWpZQ0RDQUFRUWhxSUFKQkVHb2dBa0VNYWlBRUlBVWdCaENzQmlBQ1FSQnFJQUlvQWd3Z0FSQ3ZDeUVBSUFKQmdBRnFKQUFnQUF0akFRRi9Jd0JCRUdzaUJDUUFJQVFnQVRZQ0NFRUdJUUVDUUFKQUlBQWdCRUVJYWhDQUFRMEFRUVFoQVNBRElBQVFaeEMyQWtFbFJ3MEFRUUloQVNBQUVIa2dCRUVJYWhDQUFVVU5BUXNnQWlBQ0tBSUFJQUZ5TmdJQUN5QUVRUkJxSkFBTEtBQWdBU0FDSUFNZ0JFRUVFTlVCSVFFZ0F5MEFBRUVFY1VVRVFDQUFJQUZCN0E1ck5nSUFDd3MzQUNBQklBSWdBeUFFUVFFUTFRRWhBU0FES0FJQUlnSkJCSEVnQVVFR1NuSkZCRUFnQUNBQk5nSUFEd3NnQXlBQ1FRUnlOZ0lBQ3pjQUlBRWdBaUFESUFSQkFoRFZBU0VCSUFNb0FnQWlBa0VFY1NBQlFUeEtja1VFUUNBQUlBRTJBZ0FQQ3lBRElBSkJCSEkyQWdBTGV3QWdBRUVJYWlBQUtBSUlLQUlJRVFFQUlnQVFOMEVBSUFCQkRHb1FOMnRHQkVBZ0JDQUVLQUlBUVFSeU5nSUFEd3NnQWlBRElBQWdBRUVZYWlBRklBUkJBQkNpQXlBQWF5SUNJQUVvQWdBaUFFRU1SM0pGQkVBZ0FVRUFOZ0lBRHdzZ0FrRU1SeUFBUVF0S2NrVUVRQ0FCSUFCQkRHbzJBZ0FMQzE4QkFYOGpBRUVRYXlJRUpBQWdCQ0FCTmdJSUEwQUNRQ0FBSUFSQkNHb1FrZ0ZGRFFBZ0EwR0F3QUFnQUJCbkVMMEJSUTBBSUFBUWVSb01BUXNMSUFBZ0JFRUlhaENBQVFSQUlBSWdBaWdDQUVFQ2NqWUNBQXNnQkVFUWFpUUFDemNBSUFFZ0FpQURJQVJCQWhEVkFTRUJJQU1vQWdBaUFrRUVjU0FCUVR0S2NrVUVRQ0FBSUFFMkFnQVBDeUFESUFKQkJISTJBZ0FMT2dBZ0FTQUNJQU1nQkVFQ0VOVUJJUUVnQXlnQ0FDSUNRUVJ4SUFGQkRFcHlSUVJBSUFBZ0FVRUJhellDQUE4TElBTWdBa0VFY2pZQ0FBczRBQ0FCSUFJZ0F5QUVRUU1RMVFFaEFTQURLQUlBSWdKQkJIRWdBVUh0QWtweVJRUkFJQUFnQVRZQ0FBOExJQU1nQWtFRWNqWUNBQXM2QUNBQklBSWdBeUFFUVFJUTFRRWhBU0FES0FJQUlnSkJCSEVnQVVFQmEwRUxTM0pGQkVBZ0FDQUJOZ0lBRHdzZ0F5QUNRUVJ5TmdJQUN6Y0FJQUVnQWlBRElBUkJBaERWQVNFQklBTW9BZ0FpQWtFRWNTQUJRUmRLY2tVRVFDQUFJQUUyQWdBUEN5QURJQUpCQkhJMkFnQUxPZ0FnQVNBQ0lBTWdCRUVDRU5VQklRRWdBeWdDQUNJQ1FRUnhJQUZCQVd0QkhrdHlSUVJBSUFBZ0FUWUNBQThMSUFNZ0FrRUVjallDQUF2MUJ3RUJmeU1BUVVCcUlnY2tBQ0FISUFFMkFqZ2dCRUVBTmdJQUlBY2dBeEJLSUFjUW53RWhDQ0FIRUVRQ2Z3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0JrSEJBR3NPT1FBQkZ3UVhCUmNHQnhjWEZ3b1hGeGNYRGc4UUZ4Y1hFeFVYRnhjWEZ4Y1hBQUVDQXdNWEZ3RVhDQmNYQ1FzWERCY05Gd3NYRnhFU0ZCWUxJQUFnQlVFWWFpQUhRVGhxSUFJZ0JDQUlFTEFHREJnTElBQWdCVUVRYWlBSFFUaHFJQUlnQkNBSUVLOEdEQmNMSUFCQkNHb2dBQ2dDQ0NnQ0RCRUJBQ0VCSUFjZ0FDQUhLQUk0SUFJZ0F5QUVJQVVnQVJBK0lBRVFQaUFCRURkQkFuUnFFT0lCTmdJNERCWUxJQVZCREdvZ0IwRTRhaUFDSUFRZ0NCREpEQXdWQ3lBSFFmaTFBeWtEQURjREdDQUhRZkMxQXlrREFEY0RFQ0FIUWVpMUF5a0RBRGNEQ0NBSFFlQzFBeWtEQURjREFDQUhJQUFnQVNBQ0lBTWdCQ0FGSUFjZ0IwRWdhaERpQVRZQ09Bd1VDeUFIUVppMkF5a0RBRGNER0NBSFFaQzJBeWtEQURjREVDQUhRWWkyQXlrREFEY0RDQ0FIUVlDMkF5a0RBRGNEQUNBSElBQWdBU0FDSUFNZ0JDQUZJQWNnQjBFZ2FoRGlBVFlDT0F3VEN5QUZRUWhxSUFkQk9Hb2dBaUFFSUFnUXlBd01FZ3NnQlVFSWFpQUhRVGhxSUFJZ0JDQUlFTWNNREJFTElBVkJIR29nQjBFNGFpQUNJQVFnQ0JER0RBd1FDeUFGUVJCcUlBZEJPR29nQWlBRUlBZ1F4UXdNRHdzZ0JVRUVhaUFIUVRocUlBSWdCQ0FJRU1RTURBNExJQWRCT0dvZ0FpQUVJQWdRd3d3TURRc2dBQ0FGUVFocUlBZEJPR29nQWlBRUlBZ1F3Z3dNREFzZ0IwR2d0Z05CTEJBL0lnWWdBQ0FCSUFJZ0F5QUVJQVVnQmlBR1FTeHFFT0lCTmdJNERBc0xJQWRCNExZREtBSUFOZ0lRSUFkQjJMWURLUU1BTndNSUlBZEIwTFlES1FNQU53TUFJQWNnQUNBQklBSWdBeUFFSUFVZ0J5QUhRUlJxRU9JQk5nSTREQW9MSUFVZ0IwRTRhaUFDSUFRZ0NCREJEQXdKQ3lBSFFZaTNBeWtEQURjREdDQUhRWUMzQXlrREFEY0RFQ0FIUWZpMkF5a0RBRGNEQ0NBSFFmQzJBeWtEQURjREFDQUhJQUFnQVNBQ0lBTWdCQ0FGSUFjZ0IwRWdhaERpQVRZQ09Bd0lDeUFGUVJocUlBZEJPR29nQWlBRUlBZ1F3QXdNQndzZ0FDQUJJQUlnQXlBRUlBVWdBQ2dDQUNnQ0ZCRUtBQXdIQ3lBQVFRaHFJQUFvQWdnb0FoZ1JBUUFoQVNBSElBQWdCeWdDT0NBQ0lBTWdCQ0FGSUFFUVBpQUJFRDRnQVJBM1FRSjBhaERpQVRZQ09Bd0ZDeUFGUVJScUlBZEJPR29nQWlBRUlBZ1FyZ1lNQkFzZ0JVRVVhaUFIUVRocUlBSWdCQ0FJRUw4TURBTUxJQVpCSlVZTkFRc2dCQ0FFS0FJQVFRUnlOZ0lBREFFTElBZEJPR29nQWlBRUlBZ1F2Z3dMSUFjb0FqZ0xJUUFnQjBGQWF5UUFJQUFMU0FFQmZ5TUFRUkJySWdZa0FDQUdJQUUyQWdnZ0JpQURFRW9nQmhDZkFTRUJJQVlRUkNBRlFSUnFJQVpCQ0dvZ0FpQUVJQUVRcmdZZ0JpZ0NDQ0VBSUFaQkVHb2tBQ0FBQzBvQkFYOGpBRUVRYXlJR0pBQWdCaUFCTmdJSUlBWWdBeEJLSUFZUW53RWhBU0FHRUVRZ0FDQUZRUkJxSUFaQkNHb2dBaUFFSUFFUXJ3WWdCaWdDQ0NFQUlBWkJFR29rQUNBQUMwb0JBWDhqQUVFUWF5SUdKQUFnQmlBQk5nSUlJQVlnQXhCS0lBWVFud0VoQVNBR0VFUWdBQ0FGUVJocUlBWkJDR29nQWlBRUlBRVFzQVlnQmlnQ0NDRUFJQVpCRUdva0FDQUFDekVBSUFBZ0FTQUNJQU1nQkNBRklBQkJDR29nQUNnQ0NDZ0NGQkVCQUNJQUVENGdBQkErSUFBUU4wRUNkR29RNGdFTFhnRUJmeU1BUVNCcklnWWtBQ0FHUVlpM0F5a0RBRGNER0NBR1FZQzNBeWtEQURjREVDQUdRZmkyQXlrREFEY0RDQ0FHUWZDMkF5a0RBRGNEQUNBQUlBRWdBaUFESUFRZ0JTQUdJQVpCSUdvUTRnRWhBQ0FHUVNCcUpBQWdBQXRqQVFGL0l3QkJFR3NpQkNRQUlBUWdBVFlDQ0VFR0lRRUNRQUpBSUFBZ0JFRUlhaENCQVEwQVFRUWhBU0FESUFBUWFCQzNBa0VsUncwQVFRSWhBU0FBRUhvZ0JFRUlhaENCQVVVTkFRc2dBaUFDS0FJQUlBRnlOZ0lBQ3lBRVFSQnFKQUFMS0FBZ0FTQUNJQU1nQkVFRUVOWUJJUUVnQXkwQUFFRUVjVVVFUUNBQUlBRkI3QTVyTmdJQUN3czNBQ0FCSUFJZ0F5QUVRUUVRMWdFaEFTQURLQUlBSWdKQkJIRWdBVUVHU25KRkJFQWdBQ0FCTmdJQUR3c2dBeUFDUVFSeU5nSUFDemNBSUFFZ0FpQURJQVJCQWhEV0FTRUJJQU1vQWdBaUFrRUVjU0FCUVR4S2NrVUVRQ0FBSUFFMkFnQVBDeUFESUFKQkJISTJBZ0FMZXdBZ0FFRUlhaUFBS0FJSUtBSUlFUUVBSWdBUU4wRUFJQUJCREdvUU4ydEdCRUFnQkNBRUtBSUFRUVJ5TmdJQUR3c2dBaUFESUFBZ0FFRVlhaUFGSUFSQkFCQ2tBeUFBYXlJQ0lBRW9BZ0FpQUVFTVIzSkZCRUFnQVVFQU5nSUFEd3NnQWtFTVJ5QUFRUXRLY2tVRVFDQUJJQUJCREdvMkFnQUxDMThCQVg4akFFRVFheUlFSkFBZ0JDQUJOZ0lJQTBBQ1FDQUFJQVJCQ0dvUWt3RkZEUUFnQTBHQXdBQWdBQkJvRUw0QlJRMEFJQUFRZWhvTUFRc0xJQUFnQkVFSWFoQ0JBUVJBSUFJZ0FpZ0NBRUVDY2pZQ0FBc2dCRUVRYWlRQUN6Y0FJQUVnQWlBRElBUkJBaERXQVNFQklBTW9BZ0FpQWtFRWNTQUJRVHRLY2tVRVFDQUFJQUUyQWdBUEN5QURJQUpCQkhJMkFnQUxPZ0FnQVNBQ0lBTWdCRUVDRU5ZQklRRWdBeWdDQUNJQ1FRUnhJQUZCREVweVJRUkFJQUFnQVVFQmF6WUNBQThMSUFNZ0FrRUVjallDQUFzNEFDQUJJQUlnQXlBRVFRTVExZ0VoQVNBREtBSUFJZ0pCQkhFZ0FVSHRBa3B5UlFSQUlBQWdBVFlDQUE4TElBTWdBa0VFY2pZQ0FBczZBQ0FCSUFJZ0F5QUVRUUlRMWdFaEFTQURLQUlBSWdKQkJIRWdBVUVCYTBFTFMzSkZCRUFnQUNBQk5nSUFEd3NnQXlBQ1FRUnlOZ0lBQ3pjQUlBRWdBaUFESUFSQkFoRFdBU0VCSUFNb0FnQWlBa0VFY1NBQlFSZEtja1VFUUNBQUlBRTJBZ0FQQ3lBRElBSkJCSEkyQWdBTE9nQWdBU0FDSUFNZ0JFRUNFTllCSVFFZ0F5Z0NBQ0lDUVFSeElBRkJBV3RCSGt0eVJRUkFJQUFnQVRZQ0FBOExJQU1nQWtFRWNqWUNBQXVwQndFQmZ5TUFRU0JySWdja0FDQUhJQUUyQWhnZ0JFRUFOZ0lBSUFkQkNHb2dBeEJLSUFkQkNHb1FtUUVoQ0NBSFFRaHFFRVFDZndKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQmtIQkFHc09PUUFCRndRWEJSY0dCeGNYRndvWEZ4Y1hEZzhRRnhjWEV4VVhGeGNYRnhjWEFBRUNBd01YRndFWENCY1hDUXNYREJjTkZ3c1hGeEVTRkJZTElBQWdCVUVZYWlBSFFSaHFJQUlnQkNBSUVMUUdEQmdMSUFBZ0JVRVFhaUFIUVJocUlBSWdCQ0FJRUxNR0RCY0xJQUJCQ0dvZ0FDZ0NDQ2dDREJFQkFDRUJJQWNnQUNBSEtBSVlJQUlnQXlBRUlBVWdBUkErSUFFUVBpQUJFRGRxRU9NQk5nSVlEQllMSUFWQkRHb2dCMEVZYWlBQ0lBUWdDQkRiREF3VkN5QUhRcVhhdmFuQzdNdVMrUUEzQXdnZ0J5QUFJQUVnQWlBRElBUWdCU0FIUVFocUlBZEJFR29RNHdFMkFoZ01GQXNnQjBLbHNyV3AwcTNMa3VRQU53TUlJQWNnQUNBQklBSWdBeUFFSUFVZ0IwRUlhaUFIUVJCcUVPTUJOZ0lZREJNTElBVkJDR29nQjBFWWFpQUNJQVFnQ0JEYURBd1NDeUFGUVFocUlBZEJHR29nQWlBRUlBZ1EyUXdNRVFzZ0JVRWNhaUFIUVJocUlBSWdCQ0FJRU5nTURCQUxJQVZCRUdvZ0IwRVlhaUFDSUFRZ0NCRFhEQXdQQ3lBRlFRUnFJQWRCR0dvZ0FpQUVJQWdRMWd3TURnc2dCMEVZYWlBQ0lBUWdDQkRWREF3TkN5QUFJQVZCQ0dvZ0IwRVlhaUFDSUFRZ0NCRFVEQXdNQ3lBSFFjKzFBeWdBQURZQUR5QUhRY2kxQXlrQUFEY0RDQ0FISUFBZ0FTQUNJQU1nQkNBRklBZEJDR29nQjBFVGFoRGpBVFlDR0F3TEN5QUhRZGUxQXkwQUFEb0FEQ0FIUWRPMUF5Z0FBRFlDQ0NBSElBQWdBU0FDSUFNZ0JDQUZJQWRCQ0dvZ0IwRU5haERqQVRZQ0dBd0tDeUFGSUFkQkdHb2dBaUFFSUFnUTB3d01DUXNnQjBLbGtPbXAwc25Pa3RNQU53TUlJQWNnQUNBQklBSWdBeUFFSUFVZ0IwRUlhaUFIUVJCcUVPTUJOZ0lZREFnTElBVkJHR29nQjBFWWFpQUNJQVFnQ0JEU0RBd0hDeUFBSUFFZ0FpQURJQVFnQlNBQUtBSUFLQUlVRVFvQURBY0xJQUJCQ0dvZ0FDZ0NDQ2dDR0JFQkFDRUJJQWNnQUNBSEtBSVlJQUlnQXlBRUlBVWdBUkErSUFFUVBpQUJFRGRxRU9NQk5nSVlEQVVMSUFWQkZHb2dCMEVZYWlBQ0lBUWdDQkN5Qmd3RUN5QUZRUlJxSUFkQkdHb2dBaUFFSUFnUTBRd01Bd3NnQmtFbFJnMEJDeUFFSUFRb0FnQkJCSEkyQWdBTUFRc2dCMEVZYWlBQ0lBUWdDQkRRREFzZ0J5Z0NHQXNoQUNBSFFTQnFKQUFnQUF0SUFRRi9Jd0JCRUdzaUJpUUFJQVlnQVRZQ0NDQUdJQU1RU2lBR0VKa0JJUUVnQmhCRUlBVkJGR29nQmtFSWFpQUNJQVFnQVJDeUJpQUdLQUlJSVFBZ0JrRVFhaVFBSUFBTFNnRUJmeU1BUVJCcklnWWtBQ0FHSUFFMkFnZ2dCaUFERUVvZ0JoQ1pBU0VCSUFZUVJDQUFJQVZCRUdvZ0JrRUlhaUFDSUFRZ0FSQ3pCaUFHS0FJSUlRQWdCa0VRYWlRQUlBQUxTZ0VCZnlNQVFSQnJJZ1lrQUNBR0lBRTJBZ2dnQmlBREVFb2dCaENaQVNFQklBWVFSQ0FBSUFWQkdHb2dCa0VJYWlBQ0lBUWdBUkMwQmlBR0tBSUlJUUFnQmtFUWFpUUFJQUFMTGdBZ0FDQUJJQUlnQXlBRUlBVWdBRUVJYWlBQUtBSUlLQUlVRVFFQUlnQVFQaUFBRUQ0Z0FCQTNhaERqQVF0QkFRRi9Jd0JCRUdzaUJpUUFJQVpDcFpEcHFkTEp6cExUQURjRENDQUFJQUVnQWlBRElBUWdCU0FHUVFocUlBWkJFR29RNHdFaEFDQUdRUkJxSkFBZ0FBc3JBQUpBSUFBZ0FVWU5BQU5BSUFBZ0FVRUVheUlCVHcwQklBQWdBUkJKSUFCQkJHb2hBQXdBQ3dBTEN5d0FBa0FnQUNBQlJnMEFBMEFnQUNBQlFRRnJJZ0ZQRFFFZ0FDQUJFS3NHSUFCQkFXb2hBQXdBQ3dBTEM4b0JBUU4vSXdCQjBBRnJJZ0FrQUNBQVFjYTFBeThBQURzQnpBRWdBRUhDdFFNb0FBQTJBc2dCRUZRaEJTQUFJQVEyQWdBZ0FFR3dBV29nQUVHd0FXcEJGQ0FGSUFCQnlBRnFJQUFRaXdFaUJpQUFRYkFCYW1vaUJDQUNFS3NCSVFVZ0FFRVFhaUFDRUVvZ0FFRVFhaENmQVNFSElBQkJFR29RUkNBSElBQkJzQUZxSUFRZ0FFRVFhaERsQVNBQklBQkJFR29nQUVFUWFpQUdRUUowYWlJQklBVWdBR3RCQW5RZ0FHcEJzQVZySUFRZ0JVWWJJQUVnQWlBREVPUUJJUUVnQUVIUUFXb2tBQ0FCQzRzRUFRWi9Jd0JCc0FOcklnQWtBQ0FBUWlVM0E2Z0RJQUJCcUFOcVFRRnlRYnExQXlBQ0tBSUVFSjhESVFjZ0FDQUFRWUFEYWpZQy9BSVFWQ0VHQW44Z0J3UkFJQUlvQWdnaENDQUFJQVUzQTBnZ0FFRkFheUFFTndNQUlBQWdDRFlDTUNBQVFZQURha0VlSUFZZ0FFR29BMm9nQUVFd2FoQ0xBUXdCQ3lBQUlBUTNBMUFnQUNBRk53TllJQUJCZ0FOcVFSNGdCaUFBUWFnRGFpQUFRZEFBYWhDTEFRc2hCaUFBUWNNQ05nS0FBU0FBUWZBQ2FrRUFJQUJCZ0FGcUVHWWhDQUpBSUFaQkhrNEVRQkJVSVFZQ2Z5QUhCRUFnQWlnQ0NDRUhJQUFnQlRjREdDQUFJQVEzQXhBZ0FDQUhOZ0lBSUFCQi9BSnFJQVlnQUVHb0Eyb2dBQkRYQVF3QkN5QUFJQVEzQXlBZ0FDQUZOd01vSUFCQi9BSnFJQVlnQUVHb0Eyb2dBRUVnYWhEWEFRc2hCaUFBS0FMOEFpSUhSUTBCSUFnZ0J4Qi9DeUFBS0FMOEFpSUhJQVlnQjJvaUNTQUNFS3NCSVFvZ0FFSERBallDZ0FFZ0FFSDRBR3BCQUNBQVFZQUJhaEJtSVFjQ2Z5QUFLQUw4QWlBQVFZQURha1lFUUNBQVFZQUJhaUVHSUFCQmdBTnFEQUVMSUFaQkEzUVFPaUlHUlEwQklBY2dCaEIvSUFBb0F2d0NDeUVMSUFCQjZBQnFJQUlRU2lBTElBb2dDU0FHSUFCQjlBQnFJQUJCOEFCcUlBQkI2QUJxRUxZR0lBQkI2QUJxRUVRZ0FTQUdJQUFvQW5RZ0FDZ0NjQ0FDSUFNUTVBRWhBU0FIRUdVZ0NCQmxJQUJCc0FOcUpBQWdBUThMRUhjQUMrVURBUVovSXdCQmdBTnJJZ0FrQUNBQVFpVTNBL2dDSUFCQitBSnFRUUZ5UWJtMUF5QUNLQUlFRUo4RElRWWdBQ0FBUWRBQ2FqWUN6QUlRVkNFRkFuOGdCZ1JBSUFJb0FnZ2hCeUFBSUFRNUF5Z2dBQ0FITmdJZ0lBQkIwQUpxUVI0Z0JTQUFRZmdDYWlBQVFTQnFFSXNCREFFTElBQWdCRGtETUNBQVFkQUNha0VlSUFVZ0FFSDRBbW9nQUVFd2FoQ0xBUXNoQlNBQVFjTUNOZ0pRSUFCQndBSnFRUUFnQUVIUUFHb1FaaUVIQWtBZ0JVRWVUZ1JBRUZRaEJRSi9JQVlFUUNBQ0tBSUlJUVlnQUNBRU9RTUlJQUFnQmpZQ0FDQUFRY3dDYWlBRklBQkIrQUpxSUFBUTF3RU1BUXNnQUNBRU9RTVFJQUJCekFKcUlBVWdBRUg0QW1vZ0FFRVFhaERYQVFzaEJTQUFLQUxNQWlJR1JRMEJJQWNnQmhCL0N5QUFLQUxNQWlJR0lBVWdCbW9pQ0NBQ0VLc0JJUWtnQUVIREFqWUNVQ0FBUWNnQWFrRUFJQUJCMEFCcUVHWWhCZ0ovSUFBb0Fzd0NJQUJCMEFKcVJnUkFJQUJCMEFCcUlRVWdBRUhRQW1vTUFRc2dCVUVEZEJBNklnVkZEUUVnQmlBRkVIOGdBQ2dDekFJTElRb2dBRUU0YWlBQ0VFb2dDaUFKSUFnZ0JTQUFRY1FBYWlBQVFVQnJJQUJCT0dvUXRnWWdBRUU0YWhCRUlBRWdCU0FBS0FKRUlBQW9Ba0FnQWlBREVPUUJJUUVnQmhCbElBY1FaU0FBUVlBRGFpUUFJQUVQQ3hCM0FBdk9BUUVGZnlNQVFTQnJJZ0FrQUNBQVFpVTNBeGdnQUVFWWFrRUJja0cydFFOQkFDQUNLQUlFRVBvQklBSW9BZ1FoQlNBQVFTQnJJZ1lpQ0NRQUVGUWhCeUFBSUFRM0F3QWdCaUFHSUFWQkNYWkJBWEVpQlVFWGFpQUhJQUJCR0dvZ0FCQ0xBU0FHYWlJSElBSVFxd0VoQ1NBSUlBVkJBM1JCdXdGcVFmQUJjV3NpQlNRQUlBQkJDR29nQWhCS0lBWWdDU0FISUFVZ0FFRVVhaUFBUVJCcUlBQkJDR29RbmdNZ0FFRUlhaEJFSUFFZ0JTQUFLQUlVSUFBb0FoQWdBaUFERU9RQklRRWdBRUVnYWlRQUlBRUwwd0VCQkg4akFFRWdheUlBSkFBZ0FFSEF0UU12QUFBN0FSd2dBRUc4dFFNb0FBQTJBaGdnQUVFWWFrRUJja0cwdFFOQkFDQUNLQUlFRVBvQklBSW9BZ1FoQmlBQVFSQnJJZ1VpQ0NRQUVGUWhCeUFBSUFRMkFnQWdCU0FGSUFaQkNYWkJBWEZCREhJZ0J5QUFRUmhxSUFBUWl3RWdCV29pQmlBQ0VLc0JJUWNnQ0VIZ0FHc2lCQ1FBSUFCQkNHb2dBaEJLSUFVZ0J5QUdJQVFnQUVFVWFpQUFRUkJxSUFCQkNHb1FuZ01nQUVFSWFoQkVJQUVnQkNBQUtBSVVJQUFvQWhBZ0FpQURFT1FCSVFFZ0FFRWdhaVFBSUFFTHpnRUJCWDhqQUVFZ2F5SUFKQUFnQUVJbE53TVlJQUJCR0dwQkFYSkJ0clVEUVFFZ0FpZ0NCQkQ2QVNBQ0tBSUVJUVVnQUVFZ2F5SUdJZ2drQUJCVUlRY2dBQ0FFTndNQUlBWWdCaUFGUVFsMlFRRnhJZ1ZCRjJvZ0J5QUFRUmhxSUFBUWl3RWdCbW9pQnlBQ0VLc0JJUWtnQ0NBRlFRTjBRYnNCYWtId0FYRnJJZ1VrQUNBQVFRaHFJQUlRU2lBR0lBa2dCeUFGSUFCQkZHb2dBRUVRYWlBQVFRaHFFSjRESUFCQkNHb1FSQ0FCSUFVZ0FDZ0NGQ0FBS0FJUUlBSWdBeERrQVNFQklBQkJJR29rQUNBQkM5OEJBUVIvSXdCQklHc2lBQ1FBSUFCQndMVURMd0FBT3dFY0lBQkJ2TFVES0FBQU5nSVlJQUJCR0dwQkFYSkJ0TFVEUVFFZ0FpZ0NCQkQ2QVNBQ0tBSUVJUVlnQUVFUWF5SUZJZ2drQUJCVUlRY2dBQ0FFTmdJQUlBVWdCU0FHUVFsMlFRRnhJZ1JCRFdvZ0J5QUFRUmhxSUFBUWl3RWdCV29pQmlBQ0VLc0JJUWNnQ0NBRVFRTjBRZXNBYWtId0FIRnJJZ1FrQUNBQVFRaHFJQUlRU2lBRklBY2dCaUFFSUFCQkZHb2dBRUVRYWlBQVFRaHFFSjRESUFCQkNHb1FSQ0FCSUFRZ0FDZ0NGQ0FBS0FJUUlBSWdBeERrQVNFQklBQkJJR29rQUNBQkM5TUJBUUYvSXdCQk1Hc2lCU1FBSUFVZ0FUWUNLQUpBSUFJb0FnUkJBWEZGQkVBZ0FDQUJJQUlnQXlBRUlBQW9BZ0FvQWhnUkNBQWhBZ3dCQ3lBRlFSaHFJQUlRU2lBRlFSaHFFTG9DSVFBZ0JVRVlhaEJFQWtBZ0JBUkFJQVZCR0dvZ0FCQzhBUXdCQ3lBRlFSaHFJQUFRdXdFTElBVWdCVUVZYWhDc0FUWUNFQU5BSUFVZ0JVRVlhaEQ1QVRZQ0NDQUZRUkJxSUFWQkNHb1FmQVJBSUFWQktHb2dCU2dDRUNnQ0FCRFlCaUFGUVJCcUVJQUNEQUVGSUFVb0FpZ2hBaUFGUVJocUVEa2FDd3NMSUFWQk1Hb2tBQ0FDQzcwQkFRTi9Jd0JCNEFCcklnQWtBQ0FBUWNhMUF5OEFBRHNCWENBQVFjSzFBeWdBQURZQ1dCQlVJUVVnQUNBRU5nSUFJQUJCUUdzZ0FFRkFhMEVVSUFVZ0FFSFlBR29nQUJDTEFTSUdJQUJCUUd0cUlnUWdBaENyQVNFRklBQkJFR29nQWhCS0lBQkJFR29RbVFFaEJ5QUFRUkJxRUVRZ0J5QUFRVUJySUFRZ0FFRVFhaEQ4QVNBQklBQkJFR29nQmlBQVFSQnFhaUlCSUFVZ0FHc2dBR3BCTUdzZ0JDQUZSaHNnQVNBQ0lBTVEwUUVoQVNBQVFlQUFhaVFBSUFFTGl3UUJCbjhqQUVHQUFtc2lBQ1FBSUFCQ0pUY0QrQUVnQUVINEFXcEJBWEpCdXJVRElBSW9BZ1FRbndNaEJ5QUFJQUJCMEFGcU5nTE1BUkJVSVFZQ2Z5QUhCRUFnQWlnQ0NDRUlJQUFnQlRjRFNDQUFRVUJySUFRM0F3QWdBQ0FJTmdJd0lBQkIwQUZxUVI0Z0JpQUFRZmdCYWlBQVFUQnFFSXNCREFFTElBQWdCRGNEVUNBQUlBVTNBMWdnQUVIUUFXcEJIaUFHSUFCQitBRnFJQUJCMEFCcUVJc0JDeUVHSUFCQnd3STJBb0FCSUFCQndBRnFRUUFnQUVHQUFXb1FaaUVJQWtBZ0JrRWVUZ1JBRUZRaEJnSi9JQWNFUUNBQ0tBSUlJUWNnQUNBRk53TVlJQUFnQkRjREVDQUFJQWMyQWdBZ0FFSE1BV29nQmlBQVFmZ0JhaUFBRU5jQkRBRUxJQUFnQkRjRElDQUFJQVUzQXlnZ0FFSE1BV29nQmlBQVFmZ0JhaUFBUVNCcUVOY0JDeUVHSUFBb0Fzd0JJZ2RGRFFFZ0NDQUhFSDhMSUFBb0Fzd0JJZ2NnQmlBSGFpSUpJQUlRcXdFaENpQUFRY01DTmdLQUFTQUFRZmdBYWtFQUlBQkJnQUZxRUdZaEJ3Si9JQUFvQXN3QklBQkIwQUZxUmdSQUlBQkJnQUZxSVFZZ0FFSFFBV29NQVFzZ0JrRUJkQkE2SWdaRkRRRWdCeUFHRUg4Z0FDZ0N6QUVMSVFzZ0FFSG9BR29nQWhCS0lBc2dDaUFKSUFZZ0FFSDBBR29nQUVId0FHb2dBRUhvQUdvUXVnWWdBRUhvQUdvUVJDQUJJQVlnQUNnQ2RDQUFLQUp3SUFJZ0F4RFJBU0VCSUFjUVpTQUlFR1VnQUVHQUFtb2tBQ0FCRHdzUWR3QUw1UU1CQm44akFFSFFBV3NpQUNRQUlBQkNKVGNEeUFFZ0FFSElBV3BCQVhKQnViVURJQUlvQWdRUW53TWhCaUFBSUFCQm9BRnFOZ0tjQVJCVUlRVUNmeUFHQkVBZ0FpZ0NDQ0VISUFBZ0JEa0RLQ0FBSUFjMkFpQWdBRUdnQVdwQkhpQUZJQUJCeUFGcUlBQkJJR29RaXdFTUFRc2dBQ0FFT1FNd0lBQkJvQUZxUVI0Z0JTQUFRY2dCYWlBQVFUQnFFSXNCQ3lFRklBQkJ3d0kyQWxBZ0FFR1FBV3BCQUNBQVFkQUFhaEJtSVFjQ1FDQUZRUjVPQkVBUVZDRUZBbjhnQmdSQUlBSW9BZ2doQmlBQUlBUTVBd2dnQUNBR05nSUFJQUJCbkFGcUlBVWdBRUhJQVdvZ0FCRFhBUXdCQ3lBQUlBUTVBeEFnQUVHY0FXb2dCU0FBUWNnQmFpQUFRUkJxRU5jQkN5RUZJQUFvQXB3QklnWkZEUUVnQnlBR0VIOExJQUFvQXB3QklnWWdCU0FHYWlJSUlBSVFxd0VoQ1NBQVFjTUNOZ0pRSUFCQnlBQnFRUUFnQUVIUUFHb1FaaUVHQW44Z0FDZ0NuQUVnQUVHZ0FXcEdCRUFnQUVIUUFHb2hCU0FBUWFBQmFnd0JDeUFGUVFGMEVEb2lCVVVOQVNBR0lBVVFmeUFBS0FLY0FRc2hDaUFBUVRocUlBSVFTaUFLSUFrZ0NDQUZJQUJCeEFCcUlBQkJRR3NnQUVFNGFoQzZCaUFBUVRocUVFUWdBU0FGSUFBb0FrUWdBQ2dDUUNBQ0lBTVEwUUVoQVNBR0VHVWdCeEJsSUFCQjBBRnFKQUFnQVE4TEVIY0FDOEVCQVFSL0l3QkJJR3NpQUNRQUlBQkNKVGNER0NBQVFSaHFRUUZ5UWJhMUEwRUFJQUlvQWdRUStnRWdBaWdDQkNFSElBQkJJR3NpQlNJR0pBQVFWQ0VJSUFBZ0JEY0RBQ0FGSUFVZ0IwRUpka0VCY1VFWGFpQUlJQUJCR0dvZ0FCQ0xBU0FGYWlJSElBSVFxd0VoQ0NBR1FUQnJJZ1lrQUNBQVFRaHFJQUlRU2lBRklBZ2dCeUFHSUFCQkZHb2dBRUVRYWlBQVFRaHFFS0FESUFCQkNHb1FSQ0FCSUFZZ0FDZ0NGQ0FBS0FJUUlBSWdBeERSQVNFQklBQkJJR29rQUNBQkM5SUJBUVIvSXdCQklHc2lBQ1FBSUFCQndMVURMd0FBT3dFY0lBQkJ2TFVES0FBQU5nSVlJQUJCR0dwQkFYSkJ0TFVEUVFBZ0FpZ0NCQkQ2QVNBQ0tBSUVJUVlnQUVFUWF5SUZJZ2drQUJCVUlRY2dBQ0FFTmdJQUlBVWdCU0FHUVFsMlFRRnhRUXh5SUFjZ0FFRVlhaUFBRUlzQklBVnFJZ1lnQWhDckFTRUhJQWhCSUdzaUJDUUFJQUJCQ0dvZ0FoQktJQVVnQnlBR0lBUWdBRUVVYWlBQVFSQnFJQUJCQ0dvUW9BTWdBRUVJYWhCRUlBRWdCQ0FBS0FJVUlBQW9BaEFnQWlBREVORUJJUUVnQUVFZ2FpUUFJQUVMd1FFQkJIOGpBRUVnYXlJQUpBQWdBRUlsTndNWUlBQkJHR3BCQVhKQnRyVURRUUVnQWlnQ0JCRDZBU0FDS0FJRUlRY2dBRUVnYXlJRklnWWtBQkJVSVFnZ0FDQUVOd01BSUFVZ0JTQUhRUWwyUVFGeFFSZHFJQWdnQUVFWWFpQUFFSXNCSUFWcUlnY2dBaENyQVNFSUlBWkJNR3NpQmlRQUlBQkJDR29nQWhCS0lBVWdDQ0FISUFZZ0FFRVVhaUFBUVJCcUlBQkJDR29Rb0FNZ0FFRUlhaEJFSUFFZ0JpQUFLQUlVSUFBb0FoQWdBaUFERU5FQklRRWdBRUVnYWlRQUlBRUwwZ0VCQkg4akFFRWdheUlBSkFBZ0FFSEF0UU12QUFBN0FSd2dBRUc4dFFNb0FBQTJBaGdnQUVFWWFrRUJja0cwdFFOQkFTQUNLQUlFRVBvQklBSW9BZ1FoQmlBQVFSQnJJZ1VpQ0NRQUVGUWhCeUFBSUFRMkFnQWdCU0FGSUFaQkNYWkJBWEZCRFdvZ0J5QUFRUmhxSUFBUWl3RWdCV29pQmlBQ0VLc0JJUWNnQ0VFZ2F5SUVKQUFnQUVFSWFpQUNFRW9nQlNBSElBWWdCQ0FBUVJScUlBQkJFR29nQUVFSWFoQ2dBeUFBUVFocUVFUWdBU0FFSUFBb0FoUWdBQ2dDRUNBQ0lBTVEwUUVoQVNBQVFTQnFKQUFnQVF2VEFRRUJmeU1BUVRCcklnVWtBQ0FGSUFFMkFpZ0NRQ0FDS0FJRVFRRnhSUVJBSUFBZ0FTQUNJQU1nQkNBQUtBSUFLQUlZRVFnQUlRSU1BUXNnQlVFWWFpQUNFRW9nQlVFWWFoQzhBaUVBSUFWQkdHb1FSQUpBSUFRRVFDQUZRUmhxSUFBUXZBRU1BUXNnQlVFWWFpQUFFTHNCQ3lBRklBVkJHR29RckFFMkFoQURRQ0FGSUFWQkdHb1Erd0UyQWdnZ0JVRVFhaUFGUVFocUVId0VRQ0FGUVNocUlBVW9BaEFzQUFBUWx3UWdCVUVRYWhEZUFnd0JCU0FGS0FJb0lRSWdCVUVZYWhBNUdnc0xDeUFGUVRCcUpBQWdBZ3M3QVFGL0l3QkJFR3NpQWlRQUlBSkJDR29nQUJCS0lBSkJDR29RbndGQmtMVURRYXExQXlBQkVPVUJJQUpCQ0dvUVJDQUNRUkJxSkFBZ0FRdjlBZ0VCZnlNQVFlQUNheUlBSkFBZ0FDQUNOZ0xRQWlBQUlBRTJBdGdDSUFCQjBBRnFFRUloQmlBQVFSQnFJQU1RU2lBQVFSQnFFSjhCUVpDMUEwR3F0UU1nQUVIZ0FXb1E1UUVnQUVFUWFoQkVJQUJCd0FGcUVFSWlBaUFDRUU4UVFTQUFJQUpCQUJCQUlnRTJBcndCSUFBZ0FFRVFhallDRENBQVFRQTJBZ2dEUUFKQUlBQkIyQUpxSUFCQjBBSnFFSklCUlEwQUlBQW9BcndCSUFJUU55QUJha1lFUUNBQ0VEY2hBeUFDSUFJUU4wRUJkQkJCSUFJZ0FoQlBFRUVnQUNBRElBSkJBQkJBSWdGcU5nSzhBUXNnQUVIWUFtb1FaMEVRSUFFZ0FFRzhBV29nQUVFSWFrRUFJQVlnQUVFUWFpQUFRUXhxSUFCQjRBRnFFTGtDRFFBZ0FFSFlBbW9RZVJvTUFRc0xJQUlnQUNnQ3ZBRWdBV3NRUVNBQ0VENGhBUkJVSVFNZ0FDQUZOZ0lBSUFFZ0F5QUFFTDhHUVFGSEJFQWdCRUVFTmdJQUN5QUFRZGdDYWlBQVFkQUNhaENBQVFSQUlBUWdCQ2dDQUVFQ2NqWUNBQXNnQUNnQzJBSWhBU0FDRURrYUlBWVFPUm9nQUVIZ0Ftb2tBQ0FCQzlFREFRRi9Jd0JCZ0FOcklnVWtBQ0FGSUFFMkF2QUNJQVVnQURZQytBSWdCVUhZQVdvZ0FpQUZRZkFCYWlBRlFld0JhaUFGUWVnQmFoQ1FCQ0FGUWNnQmFoQkNJZ0VnQVJCUEVFRWdCU0FCUVFBUVFDSUFOZ0xFQVNBRklBVkJJR28yQWh3Z0JVRUFOZ0lZSUFWQkFUb0FGeUFGUWNVQU9nQVdBMEFDUUNBRlFmZ0NhaUFGUWZBQ2FoQ1NBVVVOQUNBRktBTEVBU0FCRURjZ0FHcEdCRUFnQVJBM0lRSWdBU0FCRURkQkFYUVFRU0FCSUFFUVR4QkJJQVVnQWlBQlFRQVFRQ0lBYWpZQ3hBRUxJQVZCK0FKcUVHY2dCVUVYYWlBRlFSWnFJQUFnQlVIRUFXb2dCU2dDN0FFZ0JTZ0M2QUVnQlVIWUFXb2dCVUVnYWlBRlFSeHFJQVZCR0dvZ0JVSHdBV29RandRTkFDQUZRZmdDYWhCNUdnd0JDd3NDUUNBRlFkZ0JhaEEzUlEwQUlBVXRBQmRGRFFBZ0JTZ0NIQ0lDSUFWQklHcHJRWjhCU2cwQUlBVWdBa0VFYWpZQ0hDQUNJQVVvQWhnMkFnQUxJQVVnQUNBRktBTEVBU0FERU1BR0lBUWdCU2tEQURjREFDQUVJQVVwQXdnM0F3Z2dCVUhZQVdvZ0JVRWdhaUFGS0FJY0lBTVFqQUVnQlVINEFtb2dCVUh3QW1vUWdBRUVRQ0FESUFNb0FnQkJBbkkyQWdBTElBVW9BdmdDSVFBZ0FSQTVHaUFGUWRnQmFoQTVHaUFGUVlBRGFpUUFJQUFMRHdBZ0FTQUNJQU1nQkNBRkVQWU1DOEFEQVFGL0l3QkI4QUpySWdVa0FDQUZJQUUyQXVBQ0lBVWdBRFlDNkFJZ0JVSElBV29nQWlBRlFlQUJhaUFGUWR3QmFpQUZRZGdCYWhDUUJDQUZRYmdCYWhCQ0lnRWdBUkJQRUVFZ0JTQUJRUUFRUUNJQU5nSzBBU0FGSUFWQkVHbzJBZ3dnQlVFQU5nSUlJQVZCQVRvQUJ5QUZRY1VBT2dBR0EwQUNRQ0FGUWVnQ2FpQUZRZUFDYWhDU0FVVU5BQ0FGS0FLMEFTQUJFRGNnQUdwR0JFQWdBUkEzSVFJZ0FTQUJFRGRCQVhRUVFTQUJJQUVRVHhCQklBVWdBaUFCUVFBUVFDSUFhallDdEFFTElBVkI2QUpxRUdjZ0JVRUhhaUFGUVFacUlBQWdCVUcwQVdvZ0JTZ0MzQUVnQlNnQzJBRWdCVUhJQVdvZ0JVRVFhaUFGUVF4cUlBVkJDR29nQlVIZ0FXb1Fqd1FOQUNBRlFlZ0NhaEI1R2d3QkN3c0NRQ0FGUWNnQmFoQTNSUTBBSUFVdEFBZEZEUUFnQlNnQ0RDSUNJQVZCRUdwclFaOEJTZzBBSUFVZ0FrRUVhallDRENBQ0lBVW9BZ2cyQWdBTElBUWdBQ0FGS0FLMEFTQURFTUlHT1FNQUlBVkJ5QUZxSUFWQkVHb2dCU2dDRENBREVJd0JJQVZCNkFKcUlBVkI0QUpxRUlBQkJFQWdBeUFES0FJQVFRSnlOZ0lBQ3lBRktBTG9BaUVBSUFFUU9Sb2dCVUhJQVdvUU9Sb2dCVUh3QW1va0FDQUFDdzhBSUFFZ0FpQURJQVFnQlJENERBdkFBd0VCZnlNQVFmQUNheUlGSkFBZ0JTQUJOZ0xnQWlBRklBQTJBdWdDSUFWQnlBRnFJQUlnQlVIZ0FXb2dCVUhjQVdvZ0JVSFlBV29Ra0FRZ0JVRzRBV29RUWlJQklBRVFUeEJCSUFVZ0FVRUFFRUFpQURZQ3RBRWdCU0FGUVJCcU5nSU1JQVZCQURZQ0NDQUZRUUU2QUFjZ0JVSEZBRG9BQmdOQUFrQWdCVUhvQW1vZ0JVSGdBbW9Ra2dGRkRRQWdCU2dDdEFFZ0FSQTNJQUJxUmdSQUlBRVFOeUVDSUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRThRUVNBRklBSWdBVUVBRUVBaUFHbzJBclFCQ3lBRlFlZ0NhaEJuSUFWQkIyb2dCVUVHYWlBQUlBVkJ0QUZxSUFVb0F0d0JJQVVvQXRnQklBVkJ5QUZxSUFWQkVHb2dCVUVNYWlBRlFRaHFJQVZCNEFGcUVJOEVEUUFnQlVIb0Ftb1FlUm9NQVFzTEFrQWdCVUhJQVdvUU4wVU5BQ0FGTFFBSFJRMEFJQVVvQWd3aUFpQUZRUkJxYTBHZkFVb05BQ0FGSUFKQkJHbzJBZ3dnQWlBRktBSUlOZ0lBQ3lBRUlBQWdCU2dDdEFFZ0F4RERCamdDQUNBRlFjZ0JhaUFGUVJCcUlBVW9BZ3dnQXhDTUFTQUZRZWdDYWlBRlFlQUNhaENBQVFSQUlBTWdBeWdDQUVFQ2NqWUNBQXNnQlNnQzZBSWhBQ0FCRURrYUlBVkJ5QUZxRURrYUlBVkI4QUpxSkFBZ0FBc1BBQ0FCSUFJZ0F5QUVJQVVRK2d3TG9RTUJBMzhqQUVIZ0Ftc2lCU1FBSUFVZ0FUWUMwQUlnQlNBQU5nTFlBaUFDRU5nQklRWWdBaUFGUWVBQmFoRGdBaUVISUFWQjBBRnFJQUlnQlVITUFtb1Ezd0lnQlVIQUFXb1FRaUlBSUFBUVR4QkJJQVVnQUVFQUVFQWlBVFlDdkFFZ0JTQUZRUkJxTmdJTUlBVkJBRFlDQ0FOQUFrQWdCVUhZQW1vZ0JVSFFBbW9Ra2dGRkRRQWdCU2dDdkFFZ0FCQTNJQUZxUmdSQUlBQVFOeUVDSUFBZ0FCQTNRUUYwRUVFZ0FDQUFFRThRUVNBRklBSWdBRUVBRUVBaUFXbzJBcndCQ3lBRlFkZ0NhaEJuSUFZZ0FTQUZRYndCYWlBRlFRaHFJQVVvQXN3Q0lBVkIwQUZxSUFWQkVHb2dCVUVNYWlBSEVMa0NEUUFnQlVIWUFtb1FlUm9NQVFzTEFrQWdCVUhRQVdvUU4wVU5BQ0FGS0FJTUlnSWdCVUVRYW10Qm53RktEUUFnQlNBQ1FRUnFOZ0lNSUFJZ0JTZ0NDRFlDQUFzZ0JDQUJJQVVvQXJ3QklBTWdCaERFQmpjREFDQUZRZEFCYWlBRlFSQnFJQVVvQWd3Z0F4Q01BU0FGUWRnQ2FpQUZRZEFDYWhDQUFRUkFJQU1nQXlnQ0FFRUNjallDQUFzZ0JTZ0MyQUloQVNBQUVEa2FJQVZCMEFGcUVEa2FJQVZCNEFKcUpBQWdBUXNQQUNBQklBSWdBeUFFSUFVUS9Bd0xvUU1CQTM4akFFSGdBbXNpQlNRQUlBVWdBVFlDMEFJZ0JTQUFOZ0xZQWlBQ0VOZ0JJUVlnQWlBRlFlQUJhaERnQWlFSElBVkIwQUZxSUFJZ0JVSE1BbW9RM3dJZ0JVSEFBV29RUWlJQUlBQVFUeEJCSUFVZ0FFRUFFRUFpQVRZQ3ZBRWdCU0FGUVJCcU5nSU1JQVZCQURZQ0NBTkFBa0FnQlVIWUFtb2dCVUhRQW1vUWtnRkZEUUFnQlNnQ3ZBRWdBQkEzSUFGcVJnUkFJQUFRTnlFQ0lBQWdBQkEzUVFGMEVFRWdBQ0FBRUU4UVFTQUZJQUlnQUVFQUVFQWlBV28yQXJ3QkN5QUZRZGdDYWhCbklBWWdBU0FGUWJ3QmFpQUZRUWhxSUFVb0Fzd0NJQVZCMEFGcUlBVkJFR29nQlVFTWFpQUhFTGtDRFFBZ0JVSFlBbW9RZVJvTUFRc0xBa0FnQlVIUUFXb1FOMFVOQUNBRktBSU1JZ0lnQlVFUWFtdEJud0ZLRFFBZ0JTQUNRUVJxTmdJTUlBSWdCU2dDQ0RZQ0FBc2dCQ0FCSUFVb0Fyd0JJQU1nQmhERkJqWUNBQ0FGUWRBQmFpQUZRUkJxSUFVb0Fnd2dBeENNQVNBRlFkZ0NhaUFGUWRBQ2FoQ0FBUVJBSUFNZ0F5Z0NBRUVDY2pZQ0FBc2dCU2dDMkFJaEFTQUFFRGthSUFWQjBBRnFFRGthSUFWQjRBSnFKQUFnQVF1aEF3RURmeU1BUWVBQ2F5SUZKQUFnQlNBQk5nTFFBaUFGSUFBMkF0Z0NJQUlRMkFFaEJpQUNJQVZCNEFGcUVPQUNJUWNnQlVIUUFXb2dBaUFGUWN3Q2FoRGZBaUFGUWNBQmFoQkNJZ0FnQUJCUEVFRWdCU0FBUVFBUVFDSUJOZ0s4QVNBRklBVkJFR28yQWd3Z0JVRUFOZ0lJQTBBQ1FDQUZRZGdDYWlBRlFkQUNhaENTQVVVTkFDQUZLQUs4QVNBQUVEY2dBV3BHQkVBZ0FCQTNJUUlnQUNBQUVEZEJBWFFRUVNBQUlBQVFUeEJCSUFVZ0FpQUFRUUFRUUNJQmFqWUN2QUVMSUFWQjJBSnFFR2NnQmlBQklBVkJ2QUZxSUFWQkNHb2dCU2dDekFJZ0JVSFFBV29nQlVFUWFpQUZRUXhxSUFjUXVRSU5BQ0FGUWRnQ2FoQjVHZ3dCQ3dzQ1FDQUZRZEFCYWhBM1JRMEFJQVVvQWd3aUFpQUZRUkJxYTBHZkFVb05BQ0FGSUFKQkJHbzJBZ3dnQWlBRktBSUlOZ0lBQ3lBRUlBRWdCU2dDdkFFZ0F5QUdFTWNHT3dFQUlBVkIwQUZxSUFWQkVHb2dCU2dDRENBREVJd0JJQVZCMkFKcUlBVkIwQUpxRUlBQkJFQWdBeUFES0FJQVFRSnlOZ0lBQ3lBRktBTFlBaUVCSUFBUU9Sb2dCVUhRQVdvUU9Sb2dCVUhnQW1va0FDQUJDdzhBSUFFZ0FpQURJQVFnQlJEL0RBdWhBd0VEZnlNQVFlQUNheUlGSkFBZ0JTQUJOZ0xRQWlBRklBQTJBdGdDSUFJUTJBRWhCaUFDSUFWQjRBRnFFT0FDSVFjZ0JVSFFBV29nQWlBRlFjd0NhaERmQWlBRlFjQUJhaEJDSWdBZ0FCQlBFRUVnQlNBQVFRQVFRQ0lCTmdLOEFTQUZJQVZCRUdvMkFnd2dCVUVBTmdJSUEwQUNRQ0FGUWRnQ2FpQUZRZEFDYWhDU0FVVU5BQ0FGS0FLOEFTQUFFRGNnQVdwR0JFQWdBQkEzSVFJZ0FDQUFFRGRCQVhRUVFTQUFJQUFRVHhCQklBVWdBaUFBUVFBUVFDSUJhallDdkFFTElBVkIyQUpxRUdjZ0JpQUJJQVZCdkFGcUlBVkJDR29nQlNnQ3pBSWdCVUhRQVdvZ0JVRVFhaUFGUVF4cUlBY1F1UUlOQUNBRlFkZ0NhaEI1R2d3QkN3c0NRQ0FGUWRBQmFoQTNSUTBBSUFVb0Fnd2lBaUFGUVJCcWEwR2ZBVW9OQUNBRklBSkJCR28yQWd3Z0FpQUZLQUlJTmdJQUN5QUVJQUVnQlNnQ3ZBRWdBeUFHRU1nR053TUFJQVZCMEFGcUlBVkJFR29nQlNnQ0RDQURFSXdCSUFWQjJBSnFJQVZCMEFKcUVJQUJCRUFnQXlBREtBSUFRUUp5TmdJQUN5QUZLQUxZQWlFQklBQVFPUm9nQlVIUUFXb1FPUm9nQlVIZ0Ftb2tBQ0FCQ3c4QUlBRWdBaUFESUFRZ0JSQ0JEUXVoQXdFRGZ5TUFRZUFDYXlJRkpBQWdCU0FCTmdMUUFpQUZJQUEyQXRnQ0lBSVEyQUVoQmlBQ0lBVkI0QUZxRU9BQ0lRY2dCVUhRQVdvZ0FpQUZRY3dDYWhEZkFpQUZRY0FCYWhCQ0lnQWdBQkJQRUVFZ0JTQUFRUUFRUUNJQk5nSzhBU0FGSUFWQkVHbzJBZ3dnQlVFQU5nSUlBMEFDUUNBRlFkZ0NhaUFGUWRBQ2FoQ1NBVVVOQUNBRktBSzhBU0FBRURjZ0FXcEdCRUFnQUJBM0lRSWdBQ0FBRURkQkFYUVFRU0FBSUFBUVR4QkJJQVVnQWlBQVFRQVFRQ0lCYWpZQ3ZBRUxJQVZCMkFKcUVHY2dCaUFCSUFWQnZBRnFJQVZCQ0dvZ0JTZ0N6QUlnQlVIUUFXb2dCVUVRYWlBRlFReHFJQWNRdVFJTkFDQUZRZGdDYWhCNUdnd0JDd3NDUUNBRlFkQUJhaEEzUlEwQUlBVW9BZ3dpQWlBRlFSQnFhMEdmQVVvTkFDQUZJQUpCQkdvMkFnd2dBaUFGS0FJSU5nSUFDeUFFSUFFZ0JTZ0N2QUVnQXlBR0VNa0dOZ0lBSUFWQjBBRnFJQVZCRUdvZ0JTZ0NEQ0FERUl3QklBVkIyQUpxSUFWQjBBSnFFSUFCQkVBZ0F5QURLQUlBUVFKeU5nSUFDeUFGS0FMWUFpRUJJQUFRT1JvZ0JVSFFBV29RT1JvZ0JVSGdBbW9rQUNBQkN3OEFJQUVnQWlBRElBUWdCUkNERFF2eUFRRUJmeU1BUVNCcklnWWtBQ0FHSUFFMkFoZ0NRQ0FES0FJRVFRRnhSUVJBSUFaQmZ6WUNBQ0FHSUFBZ0FTQUNJQU1nQkNBR0lBQW9BZ0FvQWhBUkNnQWlBVFlDR0FKQUFrQUNRQ0FHS0FJQURnSUFBUUlMSUFWQkFEb0FBQXdEQ3lBRlFRRTZBQUFNQWdzZ0JVRUJPZ0FBSUFSQkJEWUNBQXdCQ3lBR0lBTVFTaUFHRUo4QklRRWdCaEJFSUFZZ0F4QktJQVlRdWdJaEFDQUdFRVFnQmlBQUVMd0JJQVpCREhJZ0FCQzdBU0FGSUFaQkdHb2dBaUFHSUFaQkdHb2lBeUFCSUFSQkFSQ2lBeUFHUmpvQUFDQUdLQUlZSVFFRFFDQURRUXhyRURraUF5QUdSdzBBQ3dzZ0JrRWdhaVFBSUFFTC9RSUJBWDhqQUVHUUFtc2lBQ1FBSUFBZ0FqWUNnQUlnQUNBQk5nS0lBaUFBUWRBQmFoQkNJUVlnQUVFUWFpQURFRW9nQUVFUWFoQ1pBVUdRdFFOQnFyVURJQUJCNEFGcUVQd0JJQUJCRUdvUVJDQUFRY0FCYWhCQ0lnSWdBaEJQRUVFZ0FDQUNRUUFRUUNJQk5nSzhBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlBMEFDUUNBQVFZZ0NhaUFBUVlBQ2FoQ1RBVVVOQUNBQUtBSzhBU0FDRURjZ0FXcEdCRUFnQWhBM0lRTWdBaUFDRURkQkFYUVFRU0FDSUFJUVR4QkJJQUFnQXlBQ1FRQVFRQ0lCYWpZQ3ZBRUxJQUJCaUFKcUVHaEJFQ0FCSUFCQnZBRnFJQUJCQ0dwQkFDQUdJQUJCRUdvZ0FFRU1haUFBUWVBQmFoQzdBZzBBSUFCQmlBSnFFSG9hREFFTEN5QUNJQUFvQXJ3QklBRnJFRUVnQWhBK0lRRVFWQ0VESUFBZ0JUWUNBQ0FCSUFNZ0FCQy9Ca0VCUndSQUlBUkJCRFlDQUFzZ0FFR0lBbW9nQUVHQUFtb1FnUUVFUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQW9nQ0lRRWdBaEE1R2lBR0VEa2FJQUJCa0FKcUpBQWdBUXZSQXdFQmZ5TUFRYUFDYXlJRkpBQWdCU0FCTmdLUUFpQUZJQUEyQXBnQ0lBVkI0QUZxSUFJZ0JVSHdBV29nQlVIdkFXb2dCVUh1QVdvUWxBUWdCVUhRQVdvUVFpSUJJQUVRVHhCQklBVWdBVUVBRUVBaUFEWUN6QUVnQlNBRlFTQnFOZ0ljSUFWQkFEWUNHQ0FGUVFFNkFCY2dCVUhGQURvQUZnTkFBa0FnQlVHWUFtb2dCVUdRQW1vUWt3RkZEUUFnQlNnQ3pBRWdBUkEzSUFCcVJnUkFJQUVRTnlFQ0lBRWdBUkEzUVFGMEVFRWdBU0FCRUU4UVFTQUZJQUlnQVVFQUVFQWlBR28yQXN3QkN5QUZRWmdDYWhCb0lBVkJGMm9nQlVFV2FpQUFJQVZCekFGcUlBVXNBTzhCSUFVc0FPNEJJQVZCNEFGcUlBVkJJR29nQlVFY2FpQUZRUmhxSUFWQjhBRnFFSk1FRFFBZ0JVR1lBbW9RZWhvTUFRc0xBa0FnQlVIZ0FXb1FOMFVOQUNBRkxRQVhSUTBBSUFVb0Fod2lBaUFGUVNCcWEwR2ZBVW9OQUNBRklBSkJCR28yQWh3Z0FpQUZLQUlZTmdJQUN5QUZJQUFnQlNnQ3pBRWdBeERBQmlBRUlBVXBBd0EzQXdBZ0JDQUZLUU1JTndNSUlBVkI0QUZxSUFWQklHb2dCU2dDSENBREVJd0JJQVZCbUFKcUlBVkJrQUpxRUlFQkJFQWdBeUFES0FJQVFRSnlOZ0lBQ3lBRktBS1lBaUVBSUFFUU9Sb2dCVUhnQVdvUU9Sb2dCVUdnQW1va0FDQUFDdzhBSUFFZ0FpQURJQVFnQlJDSERRdkFBd0VCZnlNQVFaQUNheUlGSkFBZ0JTQUJOZ0tBQWlBRklBQTJBb2dDSUFWQjBBRnFJQUlnQlVIZ0FXb2dCVUhmQVdvZ0JVSGVBV29RbEFRZ0JVSEFBV29RUWlJQklBRVFUeEJCSUFVZ0FVRUFFRUFpQURZQ3ZBRWdCU0FGUVJCcU5nSU1JQVZCQURZQ0NDQUZRUUU2QUFjZ0JVSEZBRG9BQmdOQUFrQWdCVUdJQW1vZ0JVR0FBbW9Ra3dGRkRRQWdCU2dDdkFFZ0FSQTNJQUJxUmdSQUlBRVFOeUVDSUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRThRUVNBRklBSWdBVUVBRUVBaUFHbzJBcndCQ3lBRlFZZ0NhaEJvSUFWQkIyb2dCVUVHYWlBQUlBVkJ2QUZxSUFVc0FOOEJJQVVzQU40QklBVkIwQUZxSUFWQkVHb2dCVUVNYWlBRlFRaHFJQVZCNEFGcUVKTUVEUUFnQlVHSUFtb1FlaG9NQVFzTEFrQWdCVUhRQVdvUU4wVU5BQ0FGTFFBSFJRMEFJQVVvQWd3aUFpQUZRUkJxYTBHZkFVb05BQ0FGSUFKQkJHbzJBZ3dnQWlBRktBSUlOZ0lBQ3lBRUlBQWdCU2dDdkFFZ0F4RENCamtEQUNBRlFkQUJhaUFGUVJCcUlBVW9BZ3dnQXhDTUFTQUZRWWdDYWlBRlFZQUNhaENCQVFSQUlBTWdBeWdDQUVFQ2NqWUNBQXNnQlNnQ2lBSWhBQ0FCRURrYUlBVkIwQUZxRURrYUlBVkJrQUpxSkFBZ0FBc1BBQ0FCSUFJZ0F5QUVJQVVRaVEwTHdBTUJBWDhqQUVHUUFtc2lCU1FBSUFVZ0FUWUNnQUlnQlNBQU5nS0lBaUFGUWRBQmFpQUNJQVZCNEFGcUlBVkIzd0ZxSUFWQjNnRnFFSlFFSUFWQndBRnFFRUlpQVNBQkVFOFFRU0FGSUFGQkFCQkFJZ0EyQXJ3QklBVWdCVUVRYWpZQ0RDQUZRUUEyQWdnZ0JVRUJPZ0FISUFWQnhRQTZBQVlEUUFKQUlBVkJpQUpxSUFWQmdBSnFFSk1CUlEwQUlBVW9BcndCSUFFUU55QUFha1lFUUNBQkVEY2hBaUFCSUFFUU4wRUJkQkJCSUFFZ0FSQlBFRUVnQlNBQ0lBRkJBQkJBSWdCcU5nSzhBUXNnQlVHSUFtb1FhQ0FGUVFkcUlBVkJCbW9nQUNBRlFid0JhaUFGTEFEZkFTQUZMQURlQVNBRlFkQUJhaUFGUVJCcUlBVkJER29nQlVFSWFpQUZRZUFCYWhDVEJBMEFJQVZCaUFKcUVIb2FEQUVMQ3dKQUlBVkIwQUZxRURkRkRRQWdCUzBBQjBVTkFDQUZLQUlNSWdJZ0JVRVFhbXRCbndGS0RRQWdCU0FDUVFScU5nSU1JQUlnQlNnQ0NEWUNBQXNnQkNBQUlBVW9BcndCSUFNUXd3WTRBZ0FnQlVIUUFXb2dCVUVRYWlBRktBSU1JQU1RakFFZ0JVR0lBbW9nQlVHQUFtb1FnUUVFUUNBRElBTW9BZ0JCQW5JMkFnQUxJQVVvQW9nQ0lRQWdBUkE1R2lBRlFkQUJhaEE1R2lBRlFaQUNhaVFBSUFBTER3QWdBU0FDSUFNZ0JDQUZFSXNOQzVZREFRSi9Jd0JCa0FKcklnVWtBQ0FGSUFFMkFvQUNJQVVnQURZQ2lBSWdBaERZQVNFR0lBVkIwQUZxSUFJZ0JVSC9BV29RNFFJZ0JVSEFBV29RUWlJQUlBQVFUeEJCSUFVZ0FFRUFFRUFpQVRZQ3ZBRWdCU0FGUVJCcU5nSU1JQVZCQURZQ0NBTkFBa0FnQlVHSUFtb2dCVUdBQW1vUWt3RkZEUUFnQlNnQ3ZBRWdBQkEzSUFGcVJnUkFJQUFRTnlFQ0lBQWdBQkEzUVFGMEVFRWdBQ0FBRUU4UVFTQUZJQUlnQUVFQUVFQWlBV28yQXJ3QkN5QUZRWWdDYWhCb0lBWWdBU0FGUWJ3QmFpQUZRUWhxSUFVc0FQOEJJQVZCMEFGcUlBVkJFR29nQlVFTWFrR1F0UU1RdXdJTkFDQUZRWWdDYWhCNkdnd0JDd3NDUUNBRlFkQUJhaEEzUlEwQUlBVW9BZ3dpQWlBRlFSQnFhMEdmQVVvTkFDQUZJQUpCQkdvMkFnd2dBaUFGS0FJSU5nSUFDeUFFSUFFZ0JTZ0N2QUVnQXlBR0VNUUdOd01BSUFWQjBBRnFJQVZCRUdvZ0JTZ0NEQ0FERUl3QklBVkJpQUpxSUFWQmdBSnFFSUVCQkVBZ0F5QURLQUlBUVFKeU5nSUFDeUFGS0FLSUFpRUJJQUFRT1JvZ0JVSFFBV29RT1JvZ0JVR1FBbW9rQUNBQkN3OEFJQUVnQWlBRElBUWdCUkNORFF1V0F3RUNmeU1BUVpBQ2F5SUZKQUFnQlNBQk5nS0FBaUFGSUFBMkFvZ0NJQUlRMkFFaEJpQUZRZEFCYWlBQ0lBVkIvd0ZxRU9FQ0lBVkJ3QUZxRUVJaUFDQUFFRThRUVNBRklBQkJBQkJBSWdFMkFyd0JJQVVnQlVFUWFqWUNEQ0FGUVFBMkFnZ0RRQUpBSUFWQmlBSnFJQVZCZ0FKcUVKTUJSUTBBSUFVb0Fyd0JJQUFRTnlBQmFrWUVRQ0FBRURjaEFpQUFJQUFRTjBFQmRCQkJJQUFnQUJCUEVFRWdCU0FDSUFCQkFCQkFJZ0ZxTmdLOEFRc2dCVUdJQW1vUWFDQUdJQUVnQlVHOEFXb2dCVUVJYWlBRkxBRC9BU0FGUWRBQmFpQUZRUkJxSUFWQkRHcEJrTFVERUxzQ0RRQWdCVUdJQW1vUWVob01BUXNMQWtBZ0JVSFFBV29RTjBVTkFDQUZLQUlNSWdJZ0JVRVFhbXRCbndGS0RRQWdCU0FDUVFScU5nSU1JQUlnQlNnQ0NEWUNBQXNnQkNBQklBVW9BcndCSUFNZ0JoREZCallDQUNBRlFkQUJhaUFGUVJCcUlBVW9BZ3dnQXhDTUFTQUZRWWdDYWlBRlFZQUNhaENCQVFSQUlBTWdBeWdDQUVFQ2NqWUNBQXNnQlNnQ2lBSWhBU0FBRURrYUlBVkIwQUZxRURrYUlBVkJrQUpxSkFBZ0FRdVdBd0VDZnlNQVFaQUNheUlGSkFBZ0JTQUJOZ0tBQWlBRklBQTJBb2dDSUFJUTJBRWhCaUFGUWRBQmFpQUNJQVZCL3dGcUVPRUNJQVZCd0FGcUVFSWlBQ0FBRUU4UVFTQUZJQUJCQUJCQUlnRTJBcndCSUFVZ0JVRVFhallDRENBRlFRQTJBZ2dEUUFKQUlBVkJpQUpxSUFWQmdBSnFFSk1CUlEwQUlBVW9BcndCSUFBUU55QUJha1lFUUNBQUVEY2hBaUFBSUFBUU4wRUJkQkJCSUFBZ0FCQlBFRUVnQlNBQ0lBQkJBQkJBSWdGcU5nSzhBUXNnQlVHSUFtb1FhQ0FHSUFFZ0JVRzhBV29nQlVFSWFpQUZMQUQvQVNBRlFkQUJhaUFGUVJCcUlBVkJER3BCa0xVREVMc0NEUUFnQlVHSUFtb1FlaG9NQVFzTEFrQWdCVUhRQVdvUU4wVU5BQ0FGS0FJTUlnSWdCVUVRYW10Qm53RktEUUFnQlNBQ1FRUnFOZ0lNSUFJZ0JTZ0NDRFlDQUFzZ0JDQUJJQVVvQXJ3QklBTWdCaERIQmpzQkFDQUZRZEFCYWlBRlFSQnFJQVVvQWd3Z0F4Q01BU0FGUVlnQ2FpQUZRWUFDYWhDQkFRUkFJQU1nQXlnQ0FFRUNjallDQUFzZ0JTZ0NpQUloQVNBQUVEa2FJQVZCMEFGcUVEa2FJQVZCa0FKcUpBQWdBUXNQQUNBQklBSWdBeUFFSUFVUWtBMExsZ01CQW44akFFR1FBbXNpQlNRQUlBVWdBVFlDZ0FJZ0JTQUFOZ0tJQWlBQ0VOZ0JJUVlnQlVIUUFXb2dBaUFGUWY4QmFoRGhBaUFGUWNBQmFoQkNJZ0FnQUJCUEVFRWdCU0FBUVFBUVFDSUJOZ0s4QVNBRklBVkJFR28yQWd3Z0JVRUFOZ0lJQTBBQ1FDQUZRWWdDYWlBRlFZQUNhaENUQVVVTkFDQUZLQUs4QVNBQUVEY2dBV3BHQkVBZ0FCQTNJUUlnQUNBQUVEZEJBWFFRUVNBQUlBQVFUeEJCSUFVZ0FpQUFRUUFRUUNJQmFqWUN2QUVMSUFWQmlBSnFFR2dnQmlBQklBVkJ2QUZxSUFWQkNHb2dCU3dBL3dFZ0JVSFFBV29nQlVFUWFpQUZRUXhxUVpDMUF4QzdBZzBBSUFWQmlBSnFFSG9hREFFTEN3SkFJQVZCMEFGcUVEZEZEUUFnQlNnQ0RDSUNJQVZCRUdwclFaOEJTZzBBSUFVZ0FrRUVhallDRENBQ0lBVW9BZ2cyQWdBTElBUWdBU0FGS0FLOEFTQURJQVlReUFZM0F3QWdCVUhRQVdvZ0JVRVFhaUFGS0FJTUlBTVFqQUVnQlVHSUFtb2dCVUdBQW1vUWdRRUVRQ0FESUFNb0FnQkJBbkkyQWdBTElBVW9Bb2dDSVFFZ0FCQTVHaUFGUWRBQmFoQTVHaUFGUVpBQ2FpUUFJQUVMRHdBZ0FTQUNJQU1nQkNBRkVKSU5DNVlEQVFKL0l3QkJrQUpySWdVa0FDQUZJQUUyQW9BQ0lBVWdBRFlDaUFJZ0FoRFlBU0VHSUFWQjBBRnFJQUlnQlVIL0FXb1E0UUlnQlVIQUFXb1FRaUlBSUFBUVR4QkJJQVVnQUVFQUVFQWlBVFlDdkFFZ0JTQUZRUkJxTmdJTUlBVkJBRFlDQ0FOQUFrQWdCVUdJQW1vZ0JVR0FBbW9Ra3dGRkRRQWdCU2dDdkFFZ0FCQTNJQUZxUmdSQUlBQVFOeUVDSUFBZ0FCQTNRUUYwRUVFZ0FDQUFFRThRUVNBRklBSWdBRUVBRUVBaUFXbzJBcndCQ3lBRlFZZ0NhaEJvSUFZZ0FTQUZRYndCYWlBRlFRaHFJQVVzQVA4QklBVkIwQUZxSUFWQkVHb2dCVUVNYWtHUXRRTVF1d0lOQUNBRlFZZ0NhaEI2R2d3QkN3c0NRQ0FGUWRBQmFoQTNSUTBBSUFVb0Fnd2lBaUFGUVJCcWEwR2ZBVW9OQUNBRklBSkJCR28yQWd3Z0FpQUZLQUlJTmdJQUN5QUVJQUVnQlNnQ3ZBRWdBeUFHRU1rR05nSUFJQVZCMEFGcUlBVkJFR29nQlNnQ0RDQURFSXdCSUFWQmlBSnFJQVZCZ0FKcUVJRUJCRUFnQXlBREtBSUFRUUp5TmdJQUN5QUZLQUtJQWlFQklBQVFPUm9nQlVIUUFXb1FPUm9nQlVHUUFtb2tBQ0FCQ3c4QUlBRWdBaUFESUFRZ0JSQ1VEUXZ5QVFFQmZ5TUFRU0JySWdZa0FDQUdJQUUyQWhnQ1FDQURLQUlFUVFGeFJRUkFJQVpCZnpZQ0FDQUdJQUFnQVNBQ0lBTWdCQ0FHSUFBb0FnQW9BaEFSQ2dBaUFUWUNHQUpBQWtBQ1FDQUdLQUlBRGdJQUFRSUxJQVZCQURvQUFBd0RDeUFGUVFFNkFBQU1BZ3NnQlVFQk9nQUFJQVJCQkRZQ0FBd0JDeUFHSUFNUVNpQUdFSmtCSVFFZ0JoQkVJQVlnQXhCS0lBWVF2QUloQUNBR0VFUWdCaUFBRUx3QklBWkJESElnQUJDN0FTQUZJQVpCR0dvZ0FpQUdJQVpCR0dvaUF5QUJJQVJCQVJDa0F5QUdSam9BQUNBR0tBSVlJUUVEUUNBRFFReHJFRGtpQXlBR1J3MEFDd3NnQmtFZ2FpUUFJQUVMUUFFQmYwRUFJUUFEZnlBQklBSkdCSDhnQUFVZ0FTZ0NBQ0FBUVFSMGFpSUFRWUNBZ0lCL2NTSURRUmgySUFOeUlBQnpJUUFnQVVFRWFpRUJEQUVMQ3d0YkFRRi9JQUFvQWdBaUFVVUVRQThMSUFFb0FnQWlBUVJBSUFGQkFCQ25CUXNnQVJBeklBQW9BZ0FvQWh3UU15QUFLQUlBS0FJa0VETWdBQ2dDQUNnQ05CQXpJQUFvQWdBb0Fpd1FNeUFBS0FJQUVETWdBRUVBTmdJQUN4c0FJd0JCRUdzaUFTUUFJQUFnQWlBREVNc0dJQUZCRUdva0FBdFVBUUovQWtBRFFDQURJQVJIQkVCQmZ5RUFJQUVnQWtZTkFpQUJLQUlBSWdVZ0F5Z0NBQ0lHU0EwQ0lBVWdCa29FUUVFQkR3VWdBMEVFYWlFRElBRkJCR29oQVF3Q0N3QUxDeUFCSUFKSElRQUxJQUFMUUFFQmYwRUFJUUFEZnlBQklBSkdCSDhnQUFVZ0FTd0FBQ0FBUVFSMGFpSUFRWUNBZ0lCL2NTSURRUmgySUFOeUlBQnpJUUFnQVVFQmFpRUJEQUVMQ3dzYkFDTUFRUkJySWdFa0FDQUFJQUlnQXhEa0JTQUJRUkJxSkFBTFZBRUNmd0pBQTBBZ0F5QUVSd1JBUVg4aEFDQUJJQUpHRFFJZ0FTd0FBQ0lGSUFNc0FBQWlCa2dOQWlBRklBWktCRUJCQVE4RklBTkJBV29oQXlBQlFRRnFJUUVNQWdzQUN3c2dBU0FDUnlFQUN5QUFDeThBSXdCQkVHc2lBeVFBSUFNZ0FTQUNFSjhOSUFBZ0F5a0RBRGNEQUNBQUlBTXBBd2czQXdnZ0EwRVFhaVFBQ3pNQkFYOGpBRUVRYXlJREpBQWdBeUFCSUFKQkFoQ1ZCQ0FBSUFNcEF3QTNBd0FnQUNBREtRTUlOd01JSUFOQkVHb2tBQXN5QWdGL0FYd2pBRUVRYXlJQ0pBQWdBaUFBSUFGQkFSQ1ZCQ0FDS1FNQUlBSXBBd2dRcFFRaEF5QUNRUkJxSkFBZ0F3dWdBUUVFZjBFQlFid2dFSk1ESWdORkJFQkJBRUVEUWRjUFFRQVFPRUVCRUFFQUMwRUVFRXNpQlJEWkF3Si9RUmdRU3lJRUVOa0RJUVlnQkVFRWFoQ0dBaG9nQmtISUJoQkxFT2dKRUtZRklBUUxFS2NGSUFOQ0FEY0NIQ0FEUW9HQWdJQndOd0lVSUFNZ0FqWUNFQ0FESUFFMkFnd2dBMEVCTmdJSUlBTWdBRFlDQkNBRElBVTJBZ0FnQTBJQU53SWtJQU5DQURjQ0xDQURRZ0EzQWpRZ0F3c3lBZ0YvQVgwakFFRVFheUlDSkFBZ0FpQUFJQUZCQUJDVkJDQUNLUU1BSUFJcEF3Z1EvUVloQXlBQ1FSQnFKQUFnQXd1TkF3RUdmeU1BUVpBSWF5SUhKQUFnQnlBQktBSUFJZ2syQWd3Z0FDQUhRUkJxSUFBYklRZ0NRQUpBQWtBZ0EwR0FBaUFBR3lJRFJTQUpSWElOQUNBQ1FRSjJJZ1VnQTA4aENpQUNRWU1CVFVFQUlBTWdCVXNiRFFFRFFDQUNJQU1nQlNBS0d5SUZheUVDSUFnZ0IwRU1haUFGSUFRUXp3WWlDa0YvUmdSQVFRQWhBeUFIS0FJTUlRbEJmeUVHREFJTElBZ2dDQ0FLUVFKMGFpQUlJQWRCRUdwR0lnVWJJUWdnQmlBS2FpRUdJQU5CQUNBS0lBVWJheUlEUlNBSEtBSU1JZ2xGY2cwQklBSkJBbllpQlNBRFR5RUtJQU1nQlUwZ0FrR0RBVXR5RFFBTERBRUxJQWxGRFFFTElBTkZJQUpGY2cwQUlBWWhCUU5BQWtBQ1FDQUlJQWtnQWlBRUVMUURJZ1pCQW1wQkFrMEVRQUpBQWtBZ0JrRUJhZzRDQmdBQkN5QUhRUUEyQWd3TUFnc2dCRUVBTmdJQURBRUxJQWNnQnlnQ0RDQUdhaUlKTmdJTUlBVkJBV29oQlNBRFFRRnJJZ01OQVFzZ0JTRUdEQUlMSUFoQkJHb2hDQ0FDSUFacklRSWdCU0VHSUFJTkFBc0xJQUFFUUNBQklBY29BZ3cyQWdBTElBZEJrQWhxSkFBZ0JndmRBZ0VHZnlNQVFaQUNheUlGSkFBZ0JTQUJLQUlBSWdZMkFnd2dBQ0FGUVJCcUlBQWJJUWNDUUFKQUFrQWdBMEdBQWlBQUd5SURSU0FHUlhJTkFDQUNJQU5QSWdRZ0FrRWdTM0pGRFFFRFFDQUNJQU1nQWlBRUd5SUVheUVDSUFjZ0JVRU1haUFFRUtVTklnUkJmMFlFUUVFQUlRTWdCU2dDRENFR1FYOGhDQXdDQ3lBSElBUWdCMm9nQnlBRlFSQnFSaUlHR3lFSElBUWdDR29oQ0NBRFFRQWdCQ0FHRzJzaUEwVWdCU2dDRENJR1JYSU5BU0FDSUFOUElnUWdBa0VoVDNJTkFBc01BUXNnQmtVTkFRc2dBMFVnQWtWeURRQWdDQ0VFQTBBQ1FBSkFJQWNnQmlnQ0FCQ1hBaUlKUVFGcVFRRk5CRUJCZnlFSUlBa05CQ0FGUVFBMkFnd01BUXNnQlNBRktBSU1RUVJxSWdZMkFnd2dCQ0FKYWlFRUlBTWdDV3NpQXcwQkN5QUVJUWdNQWdzZ0J5QUphaUVISUFRaENDQUNRUUZySWdJTkFBc0xJQUFFUUNBQklBVW9BZ3cyQWdBTElBVkJrQUpxSkFBZ0NBdTNBd0VGZnlNQVFSQnJJZ2NrQUFKQUFrQUNRQUpBSUFBRVFDQUNRUVJQRFFFZ0FpRUREQUlMUVFBaEFpQUJLQUlBSWdBb0FnQWlBMFVOQXdOQVFRRWhCU0FEUVlBQlR3UkFRWDhoQmlBSFFReHFJQU1RbHdJaUJVRi9SZzBGQ3lBQUtBSUVJUU1nQUVFRWFpRUFJQUlnQldvaUFpRUdJQU1OQUFzTUF3c2dBU2dDQUNFRklBSWhBd05BQW44Z0JTZ0NBQ0lFUVFGclFmOEFUd1JBSUFSRkJFQWdBRUVBT2dBQUlBRkJBRFlDQUF3RkMwRi9JUVlnQUNBRUVKY0NJZ1JCZjBZTkJTQURJQVJySVFNZ0FDQUVhZ3dCQ3lBQUlBUTZBQUFnQTBFQmF5RURJQUVvQWdBaEJTQUFRUUZxQ3lFQUlBRWdCVUVFYWlJRk5nSUFJQU5CQTBzTkFBc0xJQU1FUUNBQktBSUFJUVVEUUFKL0lBVW9BZ0FpQkVFQmEwSC9BRThFUUNBRVJRUkFJQUJCQURvQUFDQUJRUUEyQWdBTUJRdEJmeUVHSUFkQkRHb2dCQkNYQWlJRVFYOUdEUVVnQXlBRVNRMEVJQUFnQlNnQ0FCQ1hBaG9nQXlBRWF5RURJQUFnQkdvTUFRc2dBQ0FFT2dBQUlBTkJBV3NoQXlBQktBSUFJUVVnQUVFQmFnc2hBQ0FCSUFWQkJHb2lCVFlDQUNBRERRQUxDeUFDSVFZTUFRc2dBaUFEYXlFR0N5QUhRUkJxSkFBZ0JndjdBUUVFZnlNQVFTQnJJZ0lrQUFKQVFRQVExQVlFUUFOQVFmLy8vLzhISUFGMlFRRnhCRUFnQVVFQ2RDQUJRYVczQXhEVkJqWUNBQXNnQVVFQmFpSUJRUVpIRFFBTERBRUxBMEFnQWtFSWFpQUJRUUowYWdKL1FRRWdBWFJCLy8vLy93ZHhJZ0JCQVhKRkJFQWdBVUVDZENnQ0FBd0JDeUFCUWFXM0EwSHJsZ01nQUJzUTFRWUxJZ0EyQWdBZ0F5QUFRUUJIYWlFRElBRkJBV29pQVVFR1J3MEFDMEhRbFFNaEFBSkFBa0FnQXc0Q0FnQUJDeUFDS0FJSVFiU1ZBMGNOQUVIb2xRTWhBQXdCQzBFWUVEb2lBRVVOQUNBQUlBSXBBd2czQWdBZ0FDQUNLUU1ZTndJUUlBQWdBaWtERURjQ0NBc2dBa0VnYWlRQUlBQUx2d0lCQzM4Z0FDZ0NDQ0FBS0FJQVFhTGE3OWNHYWlJR0VKUUNJUVFnQUNnQ0RDQUdFSlFDSVFVZ0FDZ0NFQ0FHRUpRQ0lRTUNRQ0FFSUFGQkFuWlBEUUFnQXlBRmNrRURjU0FGSUFFZ0JFRUNkR3NpQjA4Z0F5QUhUM0p5RFFBZ0EwRUNkaUVLSUFWQkFuWWhDMEVBSVFVRFFDQUFJQVVnQkVFQmRpSUhhaUlNUVFGMElnMGdDMnBCQW5ScUlnTW9BZ0FnQmhDVUFpRUpJQUVnQXlnQ0JDQUdFSlFDSWdOTklBa2dBU0FEYTA5eURRRWdBQ0FESUFscWFpMEFBQTBCSUFJZ0FDQURhaENiQWlJRFJRUkFJQUFnQ2lBTmFrRUNkR29pQWlnQ0FDQUdFSlFDSVFRZ0FTQUNLQUlFSUFZUWxBSWlBazBnQkNBQklBSnJUM0lOQWtFQUlBQWdBbW9nQUNBQ0lBUnFhaTBBQUJzaENBd0NDeUFFUVFGR0RRRWdCeUFFSUFkcklBTkJBRWdpQXhzaEJDQUZJQXdnQXhzaEJRd0FDd0FMSUFnTHZBRUNCbjBCZnlNQVFVQnFJZ3NrQUFKL0lBQXFBaVFpQlNBQ2xDQUFLZ0lVa3lFSUlBQXFBaXdpQmlBQ2xDRUpJQUFxQWlBaUJ5QUNsQ0FBS2dJUWt5RUNJQUFxQWd3Z0JpQUJsSk1oQmlBQUtnSWNJUXBCZnlBSElBR1VJQUFxQWdDVElnY2dDSlFnQlNBQmxDQUFLZ0lFa3lJQklBS1VreUlGUXdBQUFBQmJEUUFhSUFNZ0NDQUdsQ0FCSUFvZ0NaTWlBWlNUSUFXVk9BSUFJQVFnQnlBQmxDQUNJQWFVa3lBRmxUZ0NBRUVBQ3lFQUlBdEJRR3NrQUNBQUN6OEFJQUJCQURZQ0ZDQUFJQUUyQWhnZ0FFRUFOZ0lNSUFCQ2dxQ0FnT0FBTndJRUlBQWdBVVUyQWhBZ0FFRWdha0VBUVNnUU94b2dBRUVjYWhDS0JBc0pBQ0FBRUo4RUVETUxWd0VEZnlNQVFSQnJJZ0lrQUFKQUlBSkJDR29nQUJDbUF5SURMUUFBUlEwQUlBSWdBQkQ4QXlJRUlBRVFsd1FnQkJEN0EwVU5BQ0FBSUFBb0FnQkJER3NvQWdCcVFRRVFzd0lMSUFNUTR3SWdBa0VRYWlRQUN6Y0JBWDhnQUNnQ0dDSUNJQUFvQWh4R0JFQWdBQ0FCSUFBb0FnQW9BalFSQXdBUEN5QUFJQUpCQkdvMkFoZ2dBaUFCTmdJQUlBRUxWUUFnQUNBQk5nSUVJQUJCQURvQUFDQUJJQUVvQWdCQkRHc29BZ0JxRUpzRUJFQWdBU0FCS0FJQVFReHJLQUlBYWlnQ1NBUkFJQUVnQVNnQ0FFRU1heWdDQUdvb0FrZ1FtUVFMSUFCQkFUb0FBQXNnQUFzZ0FDQUFJQUFvQWhoRklBRnlJZ0UyQWhBZ0FDZ0NGQ0FCY1FSQUVIY0FDd3VhQndJSmZ3SjlJd0JCMEFCcklnWWtBQUpBQWtBQ1FDQUFCRUFnQUVFSWFpQUJJQVpCRUdvUS9nSWdCaUFES0FJQUlBUkJGR3hxSWdFcUFnZ2lEemdDVENBR0lBRXFBZ3dpRURnQ1NFRi9JUVJCQUNBR1FSQnFJQThnRUNBR1Fjd0FhaUFHUWNnQWFoRGlBa0VBU0EwRElBQkJ1QUZxSWcwZ0Jpb0NUQ0FHS2dKSUlBWkJ4QUJxSUFaQlFHc1Fja0VBU0EwRElBVW9BaEFoQUFKL0lBWXFBa0JEQUFBQVA1SWlENHREQUFBQVQxMEVRQ0FQcUF3QkMwR0FnSUNBZUFzaEJDQUFRUUYwSVFFQ2Z5QUdLZ0pFUXdBQUFEK1NJZytMUXdBQUFFOWRCRUFnRDZnTUFRdEJnSUNBZ0hnTElRNGdCQ0FCYXlFS1FRQWdBR3NoQ3lBRktBSVlJUWNEUUNBTElBVW9BaFJLRFFKQkFDQUZLQUlJSWdGcklRQWdEaUFCUVFGMGF5RUVJQXF5SVE4RFFBSkFBa0FnQlNnQ0RDQUFUZ1JBSUEwZ0JMSWdEeUFHUWNRQWFpQUdRVUJyRU5vQlFYOU1EUUVnQmtFUWFpQUNLQUlBSUFNb0FnaEJBblJxS0FJQUlBWXFBa1FnQmlvQ1FDQUdRUTlxRU5FR1FYOU1EUUVnQnlBR0xRQVBJZ0U3QVFBZ0NVRUJhaUVKSUFFZ0NHb2hDQ0FCSUFGc0lBeHFJUXdNQWdzZ0NrRUNhaUVLSUF0QkFXb2hDd3dEQ3lBSFFZQWdPd0VBQ3lBRVFRSnFJUVFnQUVFQmFpRUFJQWRCQW1vaEJ3d0FDd0FMQUFzZ0JpQURLQUlBSUFSQkZHeHFJZ0FxQWdnaUR6Z0NUQ0FHSUFBcUFnd2lFRGdDU0VFQUlBRWdEeUFRSUFaQnhBQnFJQVpCUUdzUTRnSkJBRWdOQVNBRktBSVFJUUFDZnlBR0tnSkFRd0FBQUQrU0lnK0xRd0FBQUU5ZEJFQWdENmdNQVF0QmdJQ0FnSGdMSVFRZ0FFRUJkQ0VIQW44Z0Jpb0NSRU1BQUFBL2tpSVBpME1BQUFCUFhRUkFJQStvREFFTFFZQ0FnSUI0Q3lFT0lBUWdCMnNoQ2tFQUlBQnJJUXNnQlNnQ0dDRUhBMEFnQ3lBRktBSVVTZzBCUVFBZ0JTZ0NDQ0lFYXlFQUlBNGdCRUVCZEdzaEJDQUtzaUVQQTBBZ0FDQUZLQUlNU2tVRVFBSkFJQUVnQWlnQ0FDQURLQUlJUVFKMGFpZ0NBQ0FFc2lBUElBWkJEMm9RMFFaQmYwd0VRQ0FIUVlBZ093RUFEQUVMSUFjZ0JpMEFEeUlOT3dFQUlBbEJBV29oQ1NBSUlBMXFJUWdnRFNBTmJDQU1haUVNQ3lBRVFRSnFJUVFnQUVFQmFpRUFJQWRCQW1vaEJ3d0JDd3NnQ2tFQ2FpRUtJQXRCQVdvaEN3d0FDd0FMSUFsRkRRQWdCU0FKTmdJa0lBVWdDRFlDSUNBRkFuOGdEQ0FJSUFoc0lBbHRhN0tSSWcrTFF3QUFBRTlkQkVBZ0Q2Z01BUXRCZ0lDQWdIZ0xOZ0ljUVFBaEJBd0JDMEYvSVFRTElBWkIwQUJxSkFBZ0JBdTBBUUVFZnlNQVFSQnJJZ1VrQUFOQUFrQWdBaUFEVEEwQUlBQW9BaGdpQkNBQUtBSWNJZ1pQQkVBZ0FDQUJLQUlBSUFBb0FnQW9BalFSQXdCQmYwWU5BU0FEUVFGcUlRTWdBVUVFYWlFQkJTQUZJQVlnQkd0QkFuVTJBZ3dnQlNBQ0lBTnJOZ0lJSUFWQkRHb2dCVUVJYWhDOUFpRUVJQUFvQWhnZ0FTQUVLQUlBSWdRUTVnRWdBQ0FFUVFKMElnWWdBQ2dDR0dvMkFoZ2dBeUFFYWlFRElBRWdCbW9oQVFzTUFRc0xJQVZCRUdva0FDQURDeXdBSUFBZ0FDZ0NBQ2dDSkJFQkFFRi9SZ1JBUVg4UEN5QUFJQUFvQWd3aUFFRUVhallDRENBQUtBSUFDOHNCQVFSL0l3QkJFR3NpQkNRQUEwQUNRQ0FDSUFWTURRQUNmeUFBS0FJTUlnTWdBQ2dDRUNJR1NRUkFJQVJCLy8vLy93YzJBZ3dnQkNBR0lBTnJRUUoxTmdJSUlBUWdBaUFGYXpZQ0JDQUVRUXhxSUFSQkNHb2dCRUVFYWhDOUFoQzlBaUVESUFFZ0FDZ0NEQ0FES0FJQUlnTVE1Z0VnQUNBQUtBSU1JQU5CQW5ScU5nSU1JQUVnQTBFQ2RHb01BUXNnQUNBQUtBSUFLQUlvRVFFQUlnTkJmMFlOQVNBQklBTTJBZ0JCQVNFRElBRkJCR29MSVFFZ0F5QUZhaUVGREFFTEN5QUVRUkJxSkFBZ0JRc0pBQ0FBRUowRUVETUxyd0VCQkg4akFFRVFheUlGSkFBRFFBSkFJQUlnQkV3TkFDQUFLQUlZSWdNZ0FDZ0NIQ0lHVHdSQUlBQWdBU3dBQUJEREFTQUFLQUlBS0FJMEVRTUFRWDlHRFFFZ0JFRUJhaUVFSUFGQkFXb2hBUVVnQlNBR0lBTnJOZ0lNSUFVZ0FpQUVhellDQ0NBRlFReHFJQVZCQ0dvUXZRSWhBeUFBS0FJWUlBRWdBeWdDQUNJREVPY0JJQUFnQXlBQUtBSVlhallDR0NBRElBUnFJUVFnQVNBRGFpRUJDd3dCQ3dzZ0JVRVFhaVFBSUFRTEx3QWdBQ0FBS0FJQUtBSWtFUUVBUVg5R0JFQkJmdzhMSUFBZ0FDZ0NEQ0lBUVFGcU5nSU1JQUFzQUFBUXd3RUxhd0VCZjBFb0VEb2lBZ1JBQWtBZ0FpQUJOZ0lVSUFJZ0FEWUNDQ0FDSUFBMkFoQWdBaUFCTmdJTUlBSWdBQ0FCYWtFQmFpSUFOZ0lFSUFJZ0FEWUNBQ0FDSUFBZ0FHeEJBWFFRT2lJQU5nSVlJQUJGRFFBZ0FnOExDMEVBUVFOQnhnOUJBQkE0UVFFUUFRQUxKQUVDZnlNQVFSQnJJZ0lrQUNBQklBQVE3QVVoQXlBQ1FSQnFKQUFnQVNBQUlBTWJDOEFCQVFSL0l3QkJFR3NpQkNRQUEwQUNRQ0FDSUFWTURRQUNRQ0FBS0FJTUlnTWdBQ2dDRUNJR1NRUkFJQVJCLy8vLy93YzJBZ3dnQkNBR0lBTnJOZ0lJSUFRZ0FpQUZhellDQkNBRVFReHFJQVJCQ0dvZ0JFRUVhaEM5QWhDOUFpRURJQUVnQUNnQ0RDQURLQUlBSWdNUTV3RWdBQ0FBS0FJTUlBTnFOZ0lNREFFTElBQWdBQ2dDQUNnQ0tCRUJBQ0lEUVg5R0RRRWdBU0FERVAwRE9nQUFRUUVoQXdzZ0FTQURhaUVCSUFNZ0JXb2hCUXdCQ3dzZ0JFRVFhaVFBSUFVTENRQWdBQkNlQkJBekM3TUNBUU4vSUFNb0FnQWlDQVJBSUFoQkFDQUlRUUJLR3lFSkEwQUNRQUpBQW44Z0J5QUpSd1JBSUFZZ0IwRUNkR29vQWdBZ0FrNE5BeUFISVFrTElBZ2dDVVlMQkVBZ0NFRUNTdzBCSUFRZ0NFRUNkQ0lIYWlBQU5nSUFJQVVnQjJvZ0FUWUNBQ0FHSUFkcUlBSTJBZ0FnQXlBREtBSUFRUUZxTmdJQUR3dEJBaUVISUFoQkEwY0VRQ0FESUFoQkFXbzJBZ0FnQ0NFSEN3TkFJQWNnQ1V4RkJFQWdCQ0FIUVFKMElnTnFJQVFnQjBFQmF5SUhRUUowSWdocUtBSUFOZ0lBSUFNZ0JXb2dCU0FJYWlnQ0FEWUNBQ0FESUFacUlBWWdDR29vQWdBMkFnQU1BUXNMSUFRZ0IwRUNkQ0lEYWlBQU5nSUFJQU1nQldvZ0FUWUNBQ0FESUFacUlBSTJBZ0FMRHdzZ0IwRUJhaUVIREFBTEFBc2dCQ0FBTmdJQUlBVWdBVFlDQUNBR0lBSTJBZ0FnQTBFQk5nSUFDendCQW44Z0FDZ0NLQ0VCQTBBZ0FRUkFRUUFnQUNBQlFRRnJJZ0ZCQW5RaUFpQUFLQUlrYWlnQ0FDQUFLQUlnSUFKcUtBSUFFUVVBREFFTEN3c3pBUUYvSUFJRVFDQUFJUU1EUUNBRElBRW9BZ0EyQWdBZ0EwRUVhaUVESUFGQkJHb2hBU0FDUVFGcklnSU5BQXNMSUFBTC9RRUJCWDhqQUVFZ2F5SUNKQUFDZndKQUFrQWdBVUYvRUxnQkRRQWdBaUFCTmdJVUlBQXRBQ3dFUUNBQ1FSUnFRUVJCQVNBQUtBSWdFTklCUVFGSERRSU1BUXNnQWlBQ1FSaHFOZ0lRSUFKQklHb2hCU0FDUVJocUlRWWdBa0VVYWlFREEwQWdBQ2dDSkNBQUtBSW9JQU1nQmlBQ1FReHFJQUpCR0dvZ0JTQUNRUkJxRUtvRElRUWdBaWdDRENBRFJnMENJQVJCQTBZRVFDQURRUUZCQVNBQUtBSWdFTklCUVFGR0RRSU1Bd3NnQkVFQlN3MENJQUpCR0dwQkFTQUNLQUlRSUFKQkdHcHJJZ01nQUNnQ0lCRFNBU0FEUncwQ0lBSW9BZ3doQXlBRVFRRkdEUUFMQ3lBQkVPMEZEQUVMUVg4TElRQWdBa0VnYWlRQUlBQUxaZ0VCZndKQUlBQXRBQ3hGQkVBZ0FrRUFJQUpCQUVvYklRSURRQ0FDSUFOR0RRSWdBQ0FCS0FJQUlBQW9BZ0FvQWpRUkF3QkJmMFlFUUNBRER3VWdBVUVFYWlFQklBTkJBV29oQXd3QkN3QUxBQXNnQVVFRUlBSWdBQ2dDSUJEU0FTRUNDeUFDQ3lZQUlBQWdBQ2dDQUNnQ0dCRUJBQm9nQUNBQkVLQUVJZ0UyQWlRZ0FDQUJFTDRDT2dBc0M1UURBZ2gvQVgwZ0JDZ0NBQ0lOUVFBZ0RVRUFTaHNoRGlBRUtBSUVJZzlCQUNBUFFRQktHeUVRSUFGQkFYUWhFU0FBSUFFZ0Eyd2dBbXBxSVFzZ0JDZ0NHQ0VNUVFBaEF3TkFJQU1nRUVaRkJFQWdDeUVBSUF3aEFrRUFJUUVEUUNBQklBNUdSUVJBSUFGQkFXb2hBU0FDTHdFQUlBQXRBQUJzSUFwcUlRb2dBRUVDYWlFQUlBSkJBbW9oQWd3QkN3c2dBMEVCYWlFRElBc2dFV29oQ3lBTUlBNUJBWFJxSVF3TUFRc0xJQWtDZjBFQUlBWWdEVUVCZENJQlFRaHFJZ0lnQ0VFQ2F5SURiQ0lJSUFkQkFtc2lBR3BCQW5RaUIyb29BZ0FnQmlBQ0lBTWdEMEVCZEdwc0lnSWdBQ0FCYWlJQmFrRUNkQ0lEYWlnQ0FHb2dCaUFBSUFKcVFRSjBJZ0JxS0FJQWF5QUdJQUVnQ0dwQkFuUWlBV29vQWdCcklBVWdCMm9vQWdBZ0F5QUZhaWdDQUdvZ0FDQUZhaWdDQUdzZ0FTQUZhaWdDQUdzaUFDQUFiQ0FFS0FJa0lnRnRheUlDUlEwQUdpQUtJQVFvQWlBZ0FHd2dBVzFyUWVRQWJDQUVLQUljYlVIa0FHd0NmeUFDc3BFaUVvdERBQUFBVDEwRVFDQVNxQXdCQzBHQWdJQ0FlQXR0Q3pZQ0FBdVlBZ0VDZjBHZ2g2OERFRG9pQVFSQUFrQWdBVUVBTmdLSWg2OERJQUZCQURZQzVJYW5BaUFCUW9DQWdJQndOd01BSUFGQkF6WUNtSWV2QXlBQlFvQ0FnSUNBZ0lEd1B6Y0RrSWV2QXlBQlFvQ0FnSUFnTndNWUlBRkM1QUEzQXhBZ0FVS0FnSUNBRURjRENDQUJJQUEyQWlBZ0FTQUFLQUlBSWdJMkFpUWdBQ2dDQkNFQUlBRkJBRFlDNklhbkFpQUJRUUEyQXJCNElBRkJBRFlDTENBQklBQTJBaWdnQVVFQU5nTDRpcVlDSUFFZ0FDQUNiRUVCZEJBNklnQTJBdUNHcHdJZ0FFVU5BQ0FCUVFBMkF2Q0dyd01nQVVFQUVNb0dJQUZCZnpZQzlJYXZBeUFCUVFBUXVRWWFJQUVFUUNBQlFRQTJBdnlHcndNZ0FVRUhOZ0w0aHE4REN5QUJEd3NMUVFCQkEwR1JDMEVBRURoQkFSQUJBQXVBQWdFRmZ5TUFRU0JySWdJa0FBSi9Ba0FDUUNBQlFYOFF1QUVOQUNBQ0lBRVEvUU02QUJjZ0FDMEFMQVJBSUFKQkYycEJBVUVCSUFBb0FpQVEwZ0ZCQVVjTkFnd0JDeUFDSUFKQkdHbzJBaEFnQWtFZ2FpRUZJQUpCR0dvaEJpQUNRUmRxSVFNRFFDQUFLQUlrSUFBb0FpZ2dBeUFHSUFKQkRHb2dBa0VZYWlBRklBSkJFR29RcWdNaEJDQUNLQUlNSUFOR0RRSWdCRUVEUmdSQUlBTkJBVUVCSUFBb0FpQVEwZ0ZCQVVZTkFnd0RDeUFFUVFGTERRSWdBa0VZYWtFQklBSW9BaEFnQWtFWWFtc2lBeUFBS0FJZ0VOSUJJQU5IRFFJZ0FpZ0NEQ0VESUFSQkFVWU5BQXNMSUFFUTdRVU1BUXRCZndzaEFDQUNRU0JxSkFBZ0FBdHBBUUYvQWtBZ0FDMEFMRVVFUUNBQ1FRQWdBa0VBU2hzaEFnTkFJQUlnQTBZTkFpQUFJQUVzQUFBUXd3RWdBQ2dDQUNnQ05CRURBRUYvUmdSQUlBTVBCU0FCUVFGcUlRRWdBMEVCYWlFRERBRUxBQXNBQ3lBQlFRRWdBaUFBS0FJZ0VOSUJJUUlMSUFJTEpnQWdBQ0FBS0FJQUtBSVlFUUVBR2lBQUlBRVFvUVFpQVRZQ0pDQUFJQUVRdmdJNkFDd0xnUUlCQTM4akFFRWdheUlDSkFBZ0FVRi9FTGdCSVFNZ0FDMEFOQ0VFQWtBZ0F3UkFJQUVoQXlBRURRRWdBQ0FBS0FJd0lnTkJmeEM0QVVFQmN6b0FOQXdCQ3lBRUJFQWdBaUFBS0FJd05nSVFBbjhDUUFKQUFrQWdBQ2dDSkNBQUtBSW9JQUpCRUdvZ0FrRVVhaUFDUVF4cUlBSkJHR29nQWtFZ2FpQUNRUlJxRUtvRFFRRnJEZ01DQWdBQkN5QUFLQUl3SVFNZ0FpQUNRUmxxTmdJVUlBSWdBem9BR0FzRFFFRUJJQUlvQWhRaUF5QUNRUmhxVFEwQ0dpQUNJQU5CQVdzaUF6WUNGQ0FETEFBQUlBQW9BaUFRcmdOQmYwY05BQXNMUVg4aEEwRUFDMFVOQVFzZ0FFRUJPZ0EwSUFBZ0FUWUNNQ0FCSVFNTElBSkJJR29rQUNBREN3a0FJQUJCQVJEc0Jnc0pBQ0FBUVFBUTdBWUxNd0FnQUNBQkVLQUVJZ0UyQWlRZ0FDQUJFT1VDTmdJc0lBQWdBQ2dDSkJDK0Fqb0FOU0FBS0FJc1FRbE9CRUFRZHdBTEN5UUJBbjhqQUVFUWF5SUNKQUFnQUNBQkVPd0ZJUU1nQWtFUWFpUUFJQUVnQUNBREd3dUVBZ0VEZnlNQVFTQnJJZ0lrQUNBQlFYOFF1QUVoQXlBQUxRQTBJUVFDUUNBREJFQWdBU0VESUFRTkFTQUFJQUFvQWpBaUEwRi9FTGdCUVFGek9nQTBEQUVMSUFRRVFDQUNJQUFvQWpBUS9RTTZBQk1DZndKQUFrQUNRQ0FBS0FJa0lBQW9BaWdnQWtFVGFpQUNRUlJxSUFKQkRHb2dBa0VZYWlBQ1FTQnFJQUpCRkdvUXFnTkJBV3NPQXdJQ0FBRUxJQUFvQWpBaEF5QUNJQUpCR1dvMkFoUWdBaUFET2dBWUN3TkFRUUVnQWlnQ0ZDSURJQUpCR0dwTkRRSWFJQUlnQTBFQmF5SUROZ0lVSUFNc0FBQWdBQ2dDSUJDdUEwRi9SdzBBQ3d0QmZ5RURRUUFMUlEwQkN5QUFRUUU2QURRZ0FDQUJOZ0l3SUFFaEF3c2dBa0VnYWlRQUlBTUxDUUFnQUVFQkVQRUdDd2tBSUFCQkFCRHhCZ3N6QUNBQUlBRVFvUVFpQVRZQ0pDQUFJQUVRNVFJMkFpd2dBQ0FBS0FJa0VMNENPZ0ExSUFBb0FpeEJDVTRFUUJCM0FBc0xrdzBCRlg4akFFRkFhaUlRSkFBZ0EwRUJheUVPSUFKQkFXc2hFeUFGS0FJVUlSUWdCU2dDRUNFVkEwQUNRQ0FTUVFOR0RRQWdDQ0FTUVFOMGFpSU1LQUlBSWc5QkFFZ05BQ0FQUVh4eFFRSnlJZzhnQm1vaURTQVRJQUlnRFVvYklSWWdEeUFHYXlJUFFRQWdEMEVBU2hzaEVTQU1LQUlFUVFSdFFRSjBRUUp5SWd3Z0Iyb2lEeUFPSUFNZ0Qwb2JJUmNnRENBSGF5SU1RUUFnREVFQVNoc2hEd05BSUE4Z0YwcEZCRUFnQVNBQ0lBOXNJQkZxYWlFTklCRWhEQU5BSUF3Z0ZrcEZCRUFnRFVFQU9nQUFJQXhCQVdvaERDQU5RUUZxSVEwTUFRc0xJQTlCQVdvaER3d0JDd3NnRWtFQmFpRVNEQUVMQ3lBUVFRQTJBandnRkVFQmRDRVNRUUFnRlVFQmRHc2hFMEVBSVExQkFTRVJBMEFDUUFKQUFrQWdEVUVEUndSQUlBZ2dEVUVEZEdvaURDZ0NBQ0lQUVg5S0RRSkJmeUVWSUJFTkFRc2dCU2dDQUVFRGRFRWdhaUFGS0FJRVFRRjBRUWhxYkNJQkVEb2lCZ1JBSUFFUU9pSUhCRUJCZnlFVklBUkJEa3NoSEVFQUlSUkJBQ0VQQTBBQ1FDQVFLQUk4SUJSS0JFQUNRQUpBUVFFZ0JIUkJvT0FCY1VVZ0JTZ0NKQ0FGS0FJRUlnZ2dCU2dDQUNJQmJFY2dISEp5RFFBZ0ZFRUNkQ0lNSUJCQkpHcHFJaDBvQWdBaURTQUZLQUlRUVFGMGEwRURheUlYUVFCSURRQWdEU0FGS0FJVVFRRjBha0VEYWlBRFRnMEFJQkJCTUdvZ0RHb2lIaWdDQUNJTUlBVW9BZ2hCQVhSclFRTnJJaHRCQUVnTkFDQU1JQVVvQWd4QkFYUnFRUU5xSUFKSURRRUxJQlJCQW5RaUFTQVFRU1JxYWlnQ0FDSUlRUU5xSVJFZ0NFRURheUVOSUJCQk1Hb2dBV29oQ0FOQUlBMGdFVW9OQXdKQUlBMGdCU2dDRUVFQmRHdEJBRWdOQUNBRktBSVVRUUYwSUExcUlBTk9EUVFnQ0NnQ0FDSUJRUU5xSVJJZ0FVRURheUVNQTBBZ0RDQVNTZzBCQWtBZ0RDQUZLQUlJUVFGMGEwRUFTQTBBSUFVb0FneEJBWFFnREdvZ0FrNE5BaUFBSUFJZ0JDQUZJQXdnRFNBUVFSUnFFTzRHSUJBb0FoUWlBU0FQVEEwQUlBa2dERFlDQUNBS0lBMDJBZ0FnQ3lBQnNrTUFRQnhHbFRnQ0FFRUFJUlVnQVNFUEN5QU1RUUZxSVF3TUFBc0FDeUFOUVFGcUlRME1BQXNBQzBFQUlRNGdBVUVDZEVFUWFpSU1RUUFnREVFQVNoc2hFU0FHSVF3Z0J5RU5BMEFnRGlBUlJrVUVRQ0FNUVFBMkFnQWdEVUVBTmdJQUlBNUJBV29oRGlBTlFRUnFJUTBnREVFRWFpRU1EQUVMQzBFQUlSTWdDRUVCZEVFR2FpSUlRUUFnQ0VFQVNoc2hIeUFCUVFGMFFRWnFJZ0ZCQUNBQlFRQktHeUVnSUFBZ0d5QUNJQmRzYW1vaEVrRUFJUllnQmlFQklBY2hDQU5BUVFBaERpQVdJQjlHUlFSQUEwQWdEa0VDUmtVRVFDQU1RUUEyQWdBZ0RVRUFOZ0lBSUE1QkFuUWlFU0FRUVFScWFrRUFOZ0lBSUJCQkRHb2dFV3BCQURZQ0FDQU9RUUZxSVE0Z0RVRUVhaUVOSUF4QkJHb2hEQXdCQ3dzZ0NFRUlhaUVJSUFGQkNHb2hBVUVBSVE0Z0VpRVJBMEFnRGlBZ1JrVUVRQ0FPUVFKMFFRUnhJaGtnRUVFTWFtb2lHaUFSTFFBQUloZ2dHaWdDQUdvaUdqWUNBQ0FRUVFScUlCbHFJaGtnR1NnQ0FDQVlJQmhzYWlJWU5nSUFJQXdnQVNnQ0FDQWFhallDQUNBTklBZ29BZ0FnR0dvMkFnQWdEa0VCYWlFT0lBMUJCR29oRFNBSVFRUnFJUWdnREVFRWFpRU1JQUZCQkdvaEFTQVJRUUZxSVJFTUFRc0xJQlpCQVdvaEZpQUNJQkpxSVJJTUFRc0xBMEFnRTBFSFJnMENJQk5CQTJzaENDQVRRUUpxSVEwZ0V5QVhhaUVSUVFBaERBTkFJQXhCQjBaRkJFQWdBQ0FDSUF3Z0cyb2dFU0FGSUFZZ0J5QU1RUUpxSUEwZ0VFRVVhaERBRFNBUElCQW9BaFFpQVVnRVFDQUpJQXdnSGlnQ0FHcEJBMnMyQWdBZ0NpQUlJQjBvQWdCcU5nSUFJQXNnQWJKREFFQWNScFU0QWdCQkFDRVZJQUVoRHdzZ0RFRUJhaUVNREFFTEN5QVRRUUZxSVJNTUFBc0FDeUFHRURNZ0J4QXpEQVFMSUJSQkFXb2hGQXdBQ3dBTERBTUxEQUlMSUJCQlFHc2tBQ0FWRHdzZ0QwRjhjVUVDY2lJUElBWnFJUlFnRHlBR2F5RVBJQXdvQWdSQkJHMUJBblJCQW5JaURDQUhhaUVWSUF3Z0Iyc2hEZ05BQWtBZ0RpQVZTZzBBQWtBZ0RpQVRha0VBU0EwQUlBNGdFbW9nQTA0TkFTQUNJQTVzSVJZZ0R5RU1BMEFnRENBVVNnMEJBa0FnRENBRktBSUlRUUYwYTBFQVNBMEFJQVVvQWd4QkFYUWdER29nQWs0TkFpQUJJQXdnRm1wcUloY3RBQUFOQUNBWFFRRTZBQUFnQUNBQ0lBUWdCU0FNSUE0Z0VFRVVhaER1QmlBTUlBNGdFQ2dDRkNBUVFUeHFJQkJCTUdvZ0VFRWthaUFRUVJocUVMb05RUUFoRVFzZ0RFRUVhaUVNREFBTEFBc2dEa0VFYWlFT0RBRUxDeUFOUVFGcUlRME1BUXNMUVFCQkEwRzFEMEVBRURoQkFSQUJBQXNlQUVHWWxnUVFwd05CN0pZRUVKa0VRZWlZQkJDbkEwRzhtUVFRbVFRTFp3RUVmeUFBUlFSQUR3c2dBRUVCTmdLWUFRTkFRUUFoQWlBRFFRTkhCRUFEUUNBQ1FRUkhCRUFnQWtFQ2RDSUVJQUFnQTBFRWRDSUZhbW9nQVNBRmFpQUVhaW9DQURnQ0NDQUNRUUZxSVFJTUFRc0xJQU5CQVdvaEF3d0JDd3NnQUVGL05nS29BUXM5QVFGL1FjaVZCQkQwQmlFQVFjQ1ZCRUc0andNMkFnQWdBRUhNandNMkFnQkJ4SlVFUVFBMkFnQkJySThES0FJQVFjQ1ZCR3BCMUpvRUVKSURDM1VCQW44akFFRVFheUlCSkFCQjFKb0VFT1FHSVFKQi9Kb0VRWXliQkRZQ0FFSDBtZ1FnQURZQ0FFSFVtZ1JCMElzRE5nSUFRWWliQkVFQU9nQUFRWVNiQkVGL05nSUFJQUZCQ0dvZ0FoQ3JBMEhVbWdRZ0FVRUlha0hVbWdRb0FnQW9BZ2dSQWdBZ0FVRUlhaEJFSUFGQkVHb2tBQXM5QVFGL1FmQ1VCQkNLQmlFQVFlaVVCRUdJandNMkFnQWdBRUdjandNMkFnQkI3SlFFUVFBMkFnQkIvSTRES0FJQVFlaVVCR3BCbEpvRUVKSURDM1VCQW44akFFRVFheUlCSkFCQmxKb0VFT2tHSVFKQnZKb0VRY3lhQkRZQ0FFRzBtZ1FnQURZQ0FFR1VtZ1JCeElvRE5nSUFRY2lhQkVFQU9nQUFRY1NhQkVGL05nSUFJQUZCQ0dvZ0FoQ3JBMEdVbWdRZ0FVRUlha0dVbWdRb0FnQW9BZ2dSQWdBZ0FVRUlhaEJFSUFGQkVHb2tBQXZQQWdFQmYwRzRpZ01vQWdBaUFCRFVEUkRURFNBQUVOSU5FTkVOUVpTYkJFSElnZ01vQWdBaUFFSEVtd1FROWdaQm1KWUVRWlNiQkJDakJFSE1td1FnQUVIOG13UVE5UVpCN0pZRVFjeWJCQkNpQkVHRW5BUkJ6SUlES0FJQUlnQkJ0SndFRVBZR1FjQ1hCRUdFbkFRUW93UkI2SmdFUWNDWEJDZ0NBRUVNYXlnQ0FFSEFsd1JxS0FJWUVLTUVRYnljQkNBQVFleWNCQkQxQmtHVW1BUkJ2SndFRUtJRVFieVpCRUdVbUFRb0FnQkJER3NvQWdCQmxKZ0VhaWdDR0JDaUJFSG9sQVFvQWdCQkRHc29BZ0JCNkpRRWFrR1lsZ1FRckFOQndKVUVLQUlBUVF4cktBSUFRY0NWQkdwQjdKWUVFS3dEUWNDWEJDZ0NBRUVNYXlnQ0FFSEFsd1JxRVBNR1FaU1lCQ2dDQUVFTWF5Z0NBRUdVbUFScUVQTUdRY0NYQkNnQ0FFRU1heWdDQUVIQWx3UnFRWmlXQkJDc0EwR1VtQVFvQWdCQkRHc29BZ0JCbEpnRWFrSHNsZ1FRckFNTGJRRUNmeU1BUVJCcklnTWtBQ0FBSUFFUXBBUWhBUU5BSUFFRVFDQURJQUEyQWd3Z0F5QURLQUlNSUFGQkFYWWlCRUVDZEdvMkFnd2dBU0FFUVg5emFpQUVJQU1vQWd3Z0FoRHhBU0lFR3lFQklBTW9BZ3hCQkdvZ0FDQUVHeUVBREFFTEN5QURRUkJxSkFBZ0FBc2hBUUYvSXdCQkVHc2lBeVFBSUFBZ0FTQUNFTllOSVFBZ0EwRVFhaVFBSUFBTEh3QkIxSXdFS0FJQVJRUkFRZGlNQkNBQk5nSUFRZFNNQkNBQU5nSUFDd3NwQUNBQUlBQWdBVUVEZEdvZ0FDQUNRUU4wYWlJQkVQb0dJQUFnQVNBQUlBTkJBM1JxRVBvR2tndkhBUUlEZndKK0l3QkJFR3NpQXlRQUFuNGdBYndpQkVILy8vLy9CM0VpQWtHQWdJQUVhMEgvLy8vM0IwMEVRQ0FDclVJWmhrS0FnSUNBZ0lDQXdEOThEQUVMSUFKQmdJQ0EvQWRQQkVBZ0JLMUNHWVpDZ0lDQWdJQ0F3UC8vQUlRTUFRc2dBa1VFUUVJQURBRUxJQU1nQXExQ0FDQUNaeUlDUWRFQWFoQ1ZBU0FES1FNQUlRVWdBeWtEQ0VLQWdJQ0FnSURBQUlWQmlmOEFJQUpyclVJd2hvUUxJUVlnQUNBRk53TUFJQUFnQmlBRVFZQ0FnSUI0Y2ExQ0lJYUVOd01JSUFOQkVHb2tBQXNFQUVFQUN3WUFRY3lNQkFzR0FFSElqQVFMQmdCQndJd0VDMlVCQTM4Z0FrVUVRRUVBRHdzQ1FDQUFMUUFBSWdORkRRQURRQUpBSUFNZ0FTMEFBQ0lGUncwQUlBSkJBV3NpQWtVZ0JVVnlEUUFnQVVFQmFpRUJJQUF0QUFFaEF5QUFRUUZxSVFBZ0F3MEJEQUlMQ3lBRElRUUxJQVJCL3dGeElBRXRBQUJyQzRRQkFRSi9Jd0JCRUdzaUFDUUFBa0FnQUVFTWFpQUFRUWhxRUNNTkFFRzhqQVFnQUNnQ0RFRUNkRUVFYWhBNklnRTJBZ0FnQVVVTkFDQUFLQUlJRURvaUFVVUVRRUc4akFSQkFEWUNBQXdCQzBHOGpBUW9BZ0FnQUNnQ0RFRUNkR3BCQURZQ0FFRzhqQVFvQWdBZ0FSQWlSUTBBUWJ5TUJFRUFOZ0lBQ3lBQVFSQnFKQUFMZGdFQmYwRUNJUUVDZnlBQVFTc1FtUUpGQkVBZ0FDMEFBRUh5QUVjaEFRc2dBVUdBQVhJTElBRWdBRUg0QUJDWkFoc2lBVUdBZ0NCeUlBRWdBRUhsQUJDWkFoc2lBU0FCUWNBQWNpQUFMUUFBSWdCQjhnQkdHeUlCUVlBRWNpQUJJQUJCOXdCR0d5SUJRWUFJY2lBQklBQkI0UUJHR3d2VUFnRUhmeU1BUVNCcklnTWtBQ0FESUFBb0Fod2lCRFlDRUNBQUtBSVVJUVVnQXlBQ05nSWNJQU1nQVRZQ0dDQURJQVVnQkdzaUFUWUNGQ0FCSUFKcUlRUkJBaUVISUFOQkVHb2hBUUovQWtBQ1FDQUFLQUk4SUFOQkVHcEJBaUFEUVF4cUVBOFFyd05GQkVBRFFDQUVJQU1vQWd3aUJVWU5BaUFGUVg5TURRTWdBU0FGSUFFb0FnUWlDRXNpQmtFRGRHb2lDU0FGSUFoQkFDQUdHMnNpQ0NBSktBSUFhallDQUNBQlFReEJCQ0FHRzJvaUNTQUpLQUlBSUFock5nSUFJQVFnQldzaEJDQUFLQUk4SUFGQkNHb2dBU0FHR3lJQklBY2dCbXNpQnlBRFFReHFFQThRcndORkRRQUxDeUFFUVg5SERRRUxJQUFnQUNnQ0xDSUJOZ0ljSUFBZ0FUWUNGQ0FBSUFFZ0FDZ0NNR28yQWhBZ0Fnd0JDeUFBUVFBMkFod2dBRUlBTndNUUlBQWdBQ2dDQUVFZ2NqWUNBRUVBSUFkQkFrWU5BQm9nQWlBQktBSUVhd3NoQkNBRFFTQnFKQUFnQkF0aUFRSi9Jd0JCRUdzaUF5UUFJQU1nQWpZQ0RDQURJQUkyQWdoQmZ5RUVBa0JCQUVFQUlBRWdBaENZQWlJQ1FRQklEUUFnQUNBQ1FRRnFJZ0lRT2lJQU5nSUFJQUJGRFFBZ0FDQUNJQUVnQXlnQ0RCQ1lBaUVFQ3lBRFFSQnFKQUFnQkFzTEFDQUFJQUVnQWhEbERRdFVBUUovSUFFZ0FDZ0NWQ0lCSUFGQkFDQUNRWUFDYWlJREVLb0VJZ1FnQVdzZ0F5QUVHeUlESUFJZ0FpQURTeHNpQWhBL0dpQUFJQUVnQTJvaUF6WUNWQ0FBSUFNMkFnZ2dBQ0FCSUFKcU5nSUVJQUlMTWdFQmZ5TUFRUkJySWdJZ0FEWUNEQ0FDSUFGQkFuUWdBR3BCQkdzZ0FDQUJRUUZMR3lJQVFRUnFOZ0lJSUFBb0FnQUx6aElDRFg4RGZpTUFRYkFDYXlJRkpBQWdBQ2dDVEJvQ1FDQUJMUUFBSWdSRkRRQUNRQUpBQTBBQ1FBSkFJQVJCL3dGeEVKWUNCRUFEUUNBQklnUkJBV29oQVNBRUxRQUJFSllDRFFBTElBQkNBQkRIQVFOQUFuOGdBQ2dDQkNJQklBQW9BbWhKQkVBZ0FDQUJRUUZxTmdJRUlBRXRBQUFNQVFzZ0FCQlRDeENXQWcwQUN5QUFLQUlFSVFFZ0FDZ0NhQVJBSUFBZ0FVRUJheUlCTmdJRUN5QUJJQUFvQWdocnJDQUFLUU40SUJCOGZDRVFEQUVMQW44Q1FBSkFJQUV0QUFBaUJFRWxSZ1JBSUFFdEFBRWlBMEVxUmcwQklBTkJKVWNOQWdzZ0FFSUFFTWNCSUFFZ0JFRWxSbW9oQkFKL0lBQW9BZ1FpQVNBQUtBSm9TUVJBSUFBZ0FVRUJhallDQkNBQkxRQUFEQUVMSUFBUVV3c2lBU0FFTFFBQVJ3UkFJQUFvQW1nRVFDQUFJQUFvQWdSQkFXczJBZ1FMUVFBaERDQUJRUUJPRFFrTUJ3c2dFRUlCZkNFUURBTUxRUUFoQnlBQlFRSnFEQUVMQWtBZ0F4RElBVVVOQUNBQkxRQUNRU1JIRFFBZ0FpQUJMUUFCUVRCckVPWU5JUWNnQVVFRGFnd0JDeUFDS0FJQUlRY2dBa0VFYWlFQ0lBRkJBV29MSVFSQkFDRU1RUUFoQVNBRUxRQUFFTWdCQkVBRFFDQUVMUUFBSUFGQkNteHFRVEJySVFFZ0JDMEFBU0VESUFSQkFXb2hCQ0FERU1nQkRRQUxDd0ovSUFRZ0JDMEFBQ0lJUWUwQVJ3MEFHa0VBSVFrZ0IwRUFSeUVNSUFRdEFBRWhDRUVBSVFvZ0JFRUJhZ3NpQTBFQmFpRUVRUU1oQmdKQUFrQUNRQUpBQWtBQ1FDQUlRY0VBYXc0NkJBa0VDUVFFQkFrSkNRa0RDUWtKQ1FrSkJBa0pDUWtFQ1FrRUNRa0pDUWtFQ1FRRUJBUUVBQVFGQ1FFSkJBUUVDUWtFQWdRSkNRUUpBZ2tMSUFOQkFtb2dCQ0FETFFBQlFlZ0FSaUlER3lFRVFYNUJmeUFER3lFR0RBUUxJQU5CQW1vZ0JDQURMUUFCUWV3QVJpSURHeUVFUVFOQkFTQURHeUVHREFNTFFRRWhCZ3dDQzBFQ0lRWU1BUXRCQUNFR0lBTWhCQXRCQVNBR0lBUXRBQUFpQTBFdmNVRURSaUlJR3lFT0FrQWdBMEVnY2lBRElBZ2JJZ3RCMndCR0RRQUNRQ0FMUWU0QVJ3UkFJQXRCNHdCSERRRWdBVUVCSUFGQkFVb2JJUUVNQWdzZ0J5QU9JQkFRaEFjTUFnc2dBRUlBRU1jQkEwQUNmeUFBS0FJRUlnTWdBQ2dDYUVrRVFDQUFJQU5CQVdvMkFnUWdBeTBBQUF3QkN5QUFFRk1MRUpZQ0RRQUxJQUFvQWdRaEF5QUFLQUpvQkVBZ0FDQURRUUZySWdNMkFnUUxJQU1nQUNnQ0NHdXNJQUFwQTNnZ0VIeDhJUkFMSUFBZ0Fhd2lFUkRIQVFKQUlBQW9BZ1FpQ0NBQUtBSm9JZ05KQkVBZ0FDQUlRUUZxTmdJRURBRUxJQUFRVTBFQVNBMEVJQUFvQW1naEF3c2dBd1JBSUFBZ0FDZ0NCRUVCYXpZQ0JBdEJFQ0VEQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQXRCMkFCckRpRUdDd3NDQ3dzTEN3c0JDd0lFQVFFQkN3VUxDd3NMQ3dNR0N3c0NDd1FMQ3dZQUN5QUxRY0VBYXlJQlFRWkxRUUVnQVhSQjhRQnhSWElOQ2dzZ0JTQUFJQTVCQUJDSEJ5QUFLUU40UWdBZ0FDZ0NCQ0FBS0FJSWE2eDlVUTBPSUFkRkRRa2dCU2tEQ0NFUklBVXBBd0FoRWlBT0RnTUZCZ2NKQ3lBTFFlOEJjVUhqQUVZRVFDQUZRU0JxUVg5QmdRSVFPeG9nQlVFQU9nQWdJQXRCOHdCSERRZ2dCVUVBT2dCQklBVkJBRG9BTGlBRlFRQTJBU29NQ0FzZ0JVRWdhaUFFTFFBQklnTkIzZ0JHSWdoQmdRSVFPeG9nQlVFQU9nQWdJQVJCQW1vZ0JFRUJhaUFJR3lFTkFuOENRQUpBSUFSQkFrRUJJQWdiYWkwQUFDSUVRUzFIQkVBZ0JFSGRBRVlOQVNBRFFkNEFSeUVHSUEwTUF3c2dCU0FEUWQ0QVJ5SUdPZ0JPREFFTElBVWdBMEhlQUVjaUJqb0FmZ3NnRFVFQmFnc2hCQU5BQWtBZ0JDMEFBQ0lEUVMxSEJFQWdBMFVORHlBRFFkMEFSdzBCREFvTFFTMGhBeUFFTFFBQklnaEZJQWhCM1FCR2NnMEFJQVJCQVdvaERRSkFJQWdnQkVFQmF5MEFBQ0lFVFFSQUlBZ2hBd3dCQ3dOQUlBUkJBV29pQkNBRlFTQnFhaUFHT2dBQUlBUWdEUzBBQUNJRFNRMEFDd3NnRFNFRUN5QURJQVZxSUFZNkFDRWdCRUVCYWlFRURBQUxBQXRCQ0NFRERBSUxRUW9oQXd3QkMwRUFJUU1MSUFBZ0F4RG9EU0VSSUFBcEEzaENBQ0FBS0FJRUlBQW9BZ2hyckgxUkRRa2dCMFVnQzBId0FFZHlSUVJBSUFjZ0VUNENBQXdGQ3lBSElBNGdFUkNFQnd3RUN5QUhJQklnRVJEOUJqZ0NBQXdEQ3lBSElCSWdFUkNsQkRrREFBd0NDeUFISUJJM0F3QWdCeUFSTndNSURBRUxJQUZCQVdwQkh5QUxRZU1BUmlJSUd5RUdBa0FnRGtFQlJ5SU5SUVJBSUFjaEF5QU1CRUFnQmtFQ2RCQTZJZ05GRFFVTElBVkNBRGNEcUFKQkFDRUJBMEFnQXlFS0FrQURRQUovSUFBb0FnUWlBeUFBS0FKb1NRUkFJQUFnQTBFQmFqWUNCQ0FETFFBQURBRUxJQUFRVXdzaUF5QUZhaTBBSVVVTkFTQUZJQU02QUJzZ0JVRWNhaUFGUVJ0cVFRRWdCVUdvQW1vUXRBTWlBMEYrUmcwQVFRQWhDU0FEUVg5R0RRa2dDZ1JBSUFvZ0FVRUNkR29nQlNnQ0hEWUNBQ0FCUVFGcUlRRUxJQXhGSUFFZ0JrZHlEUUFMSUFvZ0JrRUJkRUVCY2lJR1FRSjBFTnNDSWdORkRRZ01BUXNMUVFBaENRSi9RUUVnQlVHb0Ftb2lBMFVOQUJvZ0F5Z0NBRVVMUlEwR0RBRUxJQXdFUUVFQUlRRWdCaEE2SWdORkRRUURRQ0FESVFrRFFBSi9JQUFvQWdRaUF5QUFLQUpvU1FSQUlBQWdBMEVCYWpZQ0JDQURMUUFBREFFTElBQVFVd3NpQXlBRmFpMEFJVVVFUUVFQUlRb01CQXNnQVNBSmFpQURPZ0FBSUFGQkFXb2lBU0FHUncwQUMwRUFJUW9nQ1NBR1FRRjBRUUZ5SWdZUTJ3SWlBdzBBQ3d3R0MwRUFJUUVnQndSQUEwQUNmeUFBS0FJRUlnTWdBQ2dDYUVrRVFDQUFJQU5CQVdvMkFnUWdBeTBBQUF3QkN5QUFFRk1MSWdNZ0JXb3RBQ0VFUUNBQklBZHFJQU02QUFBZ0FVRUJhaUVCREFFRlFRQWhDaUFISVFrTUF3c0FDd0FMQTBBQ2Z5QUFLQUlFSWdFZ0FDZ0NhRWtFUUNBQUlBRkJBV28yQWdRZ0FTMEFBQXdCQ3lBQUVGTUxJQVZxTFFBaERRQUxRUUFoQ1VFQUlRcEJBQ0VCQ3lBQUtBSUVJUU1nQUNnQ2FBUkFJQUFnQTBFQmF5SUROZ0lFQ3lBQUtRTjRJQU1nQUNnQ0NHdXNmQ0lTVUNBSUlCRWdFbEp4Y2cwRkFrQWdERVVOQUNBTlJRUkFJQWNnQ2pZQ0FBd0JDeUFISUFrMkFnQUxJQWdOQUNBS0JFQWdDaUFCUVFKMGFrRUFOZ0lBQ3lBSlJRUkFRUUFoQ1F3QkN5QUJJQWxxUVFBNkFBQUxJQUFvQWdRZ0FDZ0NDR3VzSUFBcEEzZ2dFSHg4SVJBZ0R5QUhRUUJIYWlFUEN5QUVRUUZxSVFFZ0JDMEFBU0lFRFFFTUJBc0xRUUFoQ1VFQUlRb0xJQTlCZnlBUEd5RVBDeUFNUlEwQUlBa1FNeUFLRURNTElBVkJzQUpxSkFBZ0R3djJDUUlHZndSK0l3QkJFR3NpQlNRQUFuNENRQUpBQWtBQ1FBSkFJQUZCSkUwRVFBTkFBbjhnQUNnQ0JDSUNJQUFvQW1oSkJFQWdBQ0FDUVFGcU5nSUVJQUl0QUFBTUFRc2dBQkJUQ3lJQ0VKWUNEUUFMQWtBQ1FDQUNRU3RyRGdNQUFRQUJDMEYvUVFBZ0FrRXRSaHNoQmlBQUtBSUVJZ0lnQUNnQ2FFa0VRQ0FBSUFKQkFXbzJBZ1FnQWkwQUFDRUNEQUVMSUFBUVV5RUNDd0pBSUFGQmIzRWdBa0V3UjNKRkJFQUNmeUFBS0FJRUlnSWdBQ2dDYUVrRVFDQUFJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QUFFRk1MSWdKQlgzRkIyQUJHQkVCQkVDRUJBbjhnQUNnQ0JDSUNJQUFvQW1oSkJFQWdBQ0FDUVFGcU5nSUVJQUl0QUFBTUFRc2dBQkJUQ3lJQ1FiR0RBMm90QUFCQkVFa05CU0FBS0FKb1JRMElJQUFnQUNnQ0JFRUJhellDQkF3SUN5QUJEUUZCQ0NFQkRBUUxJQUZCQ2lBQkd5SUJJQUpCc1lNRGFpMEFBRXNOQUNBQUtBSm9CRUFnQUNBQUtBSUVRUUZyTmdJRUN5QUFRZ0FReHdGQmxJTUVRUncyQWdCQ0FBd0hDeUFCUVFwSERRSWdBa0V3YXlJRFFRbE5CRUJCQUNFQkEwQWdBVUVLYkNBRGFpRUJBbjhnQUNnQ0JDSUNJQUFvQW1oSkJFQWdBQ0FDUVFGcU5nSUVJQUl0QUFBTUFRc2dBQkJUQ3lJQ1FUQnJJZ05CQ1UxQkFDQUJRWm16NXN3QlNSc05BQXNnQWEwaENBc2dBMEVKU3cwQklBaENDbjRoQ1NBRHJTRUtBMEFDZnlBQUtBSUVJZ0VnQUNnQ2FFa0VRQ0FBSUFGQkFXbzJBZ1FnQVMwQUFBd0JDeUFBRUZNTElnSkJNR3NpQTBFSlN5QUpJQXA4SWdoQ21yUG16Sm16NXN3WlduSU5BaUFJUWdwK0lna2dBNjBpQ2tKL2hWZ05BQXRCQ2lFQkRBTUxRWlNEQkVFY05nSUFRZ0FNQlF0QkNpRUJJQU5CQ1UwTkFRd0NDeUFCSUFGQkFXdHhCRUFnQWtHeGd3TnFMUUFBSWdNZ0FVa0VRQU5BSUFNZ0FTQUViR29pQkVIRzQvRTRUVUVBQW44Z0FDZ0NCQ0lDSUFBb0FtaEpCRUFnQUNBQ1FRRnFOZ0lFSUFJdEFBQU1BUXNnQUJCVEN5SUNRYkdEQTJvdEFBQWlBeUFCU1JzTkFBc2dCSzBoQ0FzZ0FTQURUUTBCSUFHdElRa0RRQ0FJSUFsK0lnb2dBNjFDL3dHRElndENmNFZXRFFJZ0NpQUxmQ0VJSUFFQ2Z5QUFLQUlFSWdJZ0FDZ0NhRWtFUUNBQUlBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBQUVGTUxJZ0pCc1lNRGFpMEFBQ0lEVFEwQ0lBVWdDU0FJRU1BQklBVXBBd2hRRFFBTERBRUxJQUZCRjJ4QkJYWkJCM0ZCc1lVRGFpd0FBQ0VISUFKQnNZTURhaTBBQUNJRElBRkpCRUFEUUNBRElBUWdCM1J5SWdSQi8vLy9QMDFCQUFKL0lBQW9BZ1FpQWlBQUtBSm9TUVJBSUFBZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFBUVV3c2lBa0d4Z3dOcUxRQUFJZ01nQVVrYkRRQUxJQVN0SVFnTElBRWdBMDFDZnlBSHJTSUppQ0lLSUFoVWNnMEFBMEFnQTYxQy93R0RJQWdnQ1lhRUlRZ0NmeUFBS0FJRUlnSWdBQ2dDYUVrRVFDQUFJQUpCQVdvMkFnUWdBaTBBQUF3QkN5QUFFRk1MSVFJZ0NDQUtWZzBCSUFFZ0FrR3hnd05xTFFBQUlnTkxEUUFMQ3lBQklBSkJzWU1EYWkwQUFFME5BQU5BSUFFQ2Z5QUFLQUlFSWdJZ0FDZ0NhRWtFUUNBQUlBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBQUVGTUxRYkdEQTJvdEFBQkxEUUFMUVpTREJFSEVBRFlDQUVFQUlRWkNmeUVJQ3lBQUtBSm9CRUFnQUNBQUtBSUVRUUZyTmdJRUN5QUlRbjlSQkVBZ0JrRUJja1VFUUVHVWd3UkJ4QUEyQWdCQ2Znd0RDd3NnQ0NBR3JDSUpoU0FKZlF3QkN5QUFRZ0FReHdGQ0FBc2hDQ0FGUVJCcUpBQWdDQXVESEFNTWZ3WitBWHdqQUVHUXhnQnJJZ2NrQUVFQUlBTWdCR29pRVdzaEVnSkFBbjhEUUFKQUlBSkJNRWNFUUNBQ1FTNUhEUVFnQVNnQ0JDSUNJQUVvQW1oUERRRWdBU0FDUVFGcU5nSUVJQUl0QUFBTUF3c2dBU2dDQkNJQ0lBRW9BbWhKQkVCQkFTRUpJQUVnQWtFQmFqWUNCQ0FDTFFBQUlRSUZRUUVoQ1NBQkVGTWhBZ3NNQVFzTElBRVFVd3NoQWtFQklRb2dBa0V3UncwQUEwQWdFMElCZlNFVEFuOGdBU2dDQkNJQ0lBRW9BbWhKQkVBZ0FTQUNRUUZxTmdJRUlBSXRBQUFNQVFzZ0FSQlRDeUlDUVRCR0RRQUxRUUVoQ1FzZ0IwRUFOZ0tRQmdKK0FrQUNRQUpBQWtBZ0FrRXVSaUlJSUFKQk1Hc2lERUVKVFhJRVFBTkFBa0FnQ0VFQmNRUkFJQXBGQkVBZ0ZDRVRRUUVoQ2d3Q0N5QUpSU0VJREFRTElCUkNBWHdoRkNBTFFmd1BUQVJBSUE0Z0ZLY2dBa0V3UmhzaERpQUhRWkFHYWlBTFFRSjBhaUlJSUEwRWZ5QUNJQWdvQWdCQkNteHFRVEJyQlNBTUN6WUNBRUVCSVFsQkFDQU5RUUZxSWdJZ0FrRUpSaUlDR3lFTklBSWdDMm9oQ3d3QkN5QUNRVEJHRFFBZ0J5QUhLQUtBUmtFQmNqWUNnRVpCM0k4QklRNExBbjhnQVNnQ0JDSUNJQUVvQW1oSkJFQWdBU0FDUVFGcU5nSUVJQUl0QUFBTUFRc2dBUkJUQ3lJQ1FTNUdJZ2dnQWtFd2F5SU1RUXBKY2cwQUN3c2dFeUFVSUFvYklSTWdDVVVnQWtGZmNVSEZBRWR5UlFSQUFrQWdBU0FHRUlZSEloVkNnSUNBZ0lDQWdJQ0FmMUlOQUNBR1JRMEVRZ0FoRlNBQktBSm9SUTBBSUFFZ0FTZ0NCRUVCYXpZQ0JBc2dFeUFWZkNFVERBUUxJQWxGSVFnZ0FrRUFTQTBCQ3lBQktBSm9SUTBBSUFFZ0FTZ0NCRUVCYXpZQ0JBc2dDRVVOQVVHVWd3UkJIRFlDQUF0Q0FDRVVJQUZDQUJESEFVSUFEQUVMSUFjb0FwQUdJZ0ZGQkVBZ0J5QUZ0MFFBQUFBQUFBQUFBS0lRMlFFZ0J5a0RBQ0VVSUFjcEF3Z01BUXNnRXlBVVVpQVVRZ2xWY2lBRFFSNU1RUUFnQVNBRGRodHlSUVJBSUFkQk1Hb2dCUkN1QVNBSFFTQnFJQUVRd0FJZ0IwRVFhaUFIS1FNd0lBY3BBemdnQnlrRElDQUhLUU1vRUZ3Z0J5a0RFQ0VVSUFjcEF4Z01BUXNnQkVGK2JhMGdFMU1FUUVHVWd3UkJ4QUEyQWdBZ0IwSGdBR29nQlJDdUFTQUhRZEFBYWlBSEtRTmdJQWNwQTJoQ2YwTC8vLy8vLy8rLy8vOEFFRndnQjBGQWF5QUhLUU5RSUFjcEExaENmMEwvLy8vLy8vKy8vLzhBRUZ3Z0J5a0RRQ0VVSUFjcEEwZ01BUXNnQkVIaUFXdXNJQk5WQkVCQmxJTUVRY1FBTmdJQUlBZEJrQUZxSUFVUXJnRWdCMEdBQVdvZ0J5a0RrQUVnQnlrRG1BRkNBRUtBZ0lDQWdJREFBQkJjSUFkQjhBQnFJQWNwQTRBQklBY3BBNGdCUWdCQ2dJQ0FnSUNBd0FBUVhDQUhLUU53SVJRZ0J5a0RlQXdCQ3lBTkJFQWdEVUVJVEFSQUlBZEJrQVpxSUF0QkFuUnFJZ0lvQWdBaEFRTkFJQUZCQ213aEFTQU5RUUZxSWcxQkNVY05BQXNnQWlBQk5nSUFDeUFMUVFGcUlRc0xBa0FnRGlBVHB5SUtTaUFPUVFsT2NpQUtRUkZLY2cwQUlBcEJDVVlFUUNBSFFjQUJhaUFGRUs0QklBZEJzQUZxSUFjb0FwQUdFTUFDSUFkQm9BRnFJQWNwQThBQklBY3BBOGdCSUFjcEE3QUJJQWNwQTdnQkVGd2dCeWtEb0FFaEZDQUhLUU9vQVF3Q0N5QUtRUWhNQkVBZ0IwR1FBbW9nQlJDdUFTQUhRWUFDYWlBSEtBS1FCaERBQWlBSFFmQUJhaUFIS1FPUUFpQUhLUU9ZQWlBSEtRT0FBaUFIS1FPSUFoQmNJQWRCNEFGcVFRQWdDbXRCQW5SQmtJTURhaWdDQUJDdUFTQUhRZEFCYWlBSEtRUHdBU0FIS1FQNEFTQUhLUVBnQVNBSEtRUG9BUkQ4QmlBSEtRUFFBU0VVSUFjcEE5Z0JEQUlMSUFNZ0NrRjliR3BCRzJvaUFVRWVURUVBSUFjb0FwQUdJZ0lnQVhZYkRRQWdCMEhnQW1vZ0JSQ3VBU0FIUWRBQ2FpQUNFTUFDSUFkQndBSnFJQWNwQStBQ0lBY3BBK2dDSUFjcEE5QUNJQWNwQTlnQ0VGd2dCMEd3QW1vZ0NrRUNkRUhJZ2dOcUtBSUFFSzRCSUFkQm9BSnFJQWNwQThBQ0lBY3BBOGdDSUFjcEE3QUNJQWNwQTdnQ0VGd2dCeWtEb0FJaEZDQUhLUU9vQWd3QkN3TkFJQWRCa0FacUlBc2lBa0VCYXlJTFFRSjBhaWdDQUVVTkFBdEJBQ0VOQWtBZ0NrRUpieUlCUlFSQVFRQWhDQXdCQ3lBQklBRkJDV29nQ2tGL1Noc2hCZ0pBSUFKRkJFQkJBQ0VJUVFBaEFnd0JDMEdBbE92Y0EwRUFJQVpyUVFKMFFaQ0RBMm9vQWdBaUNXMGhDMEVBSVF4QkFDRUJRUUFoQ0FOQUlBZEJrQVpxSUFGQkFuUnFJZzRnRENBT0tBSUFJZzRnQ1c0aUQyb2lERFlDQUNBSVFRRnFRZjhQY1NBSUlBeEZJQUVnQ0VaeElnd2JJUWdnQ2tFSmF5QUtJQXdiSVFvZ0N5QU9JQWtnRDJ4cmJDRU1JQUZCQVdvaUFTQUNSdzBBQ3lBTVJRMEFJQWRCa0FacUlBSkJBblJxSUF3MkFnQWdBa0VCYWlFQ0N5QUtJQVpyUVFscUlRb0xBMEFDUUNBS1FTUk9CRUFnQ2tFa1J3MEJJQWRCa0FacUlBaEJBblJxS0FJQVFkSHArUVJQRFFFTElBSkIvdzlxSVF0QkFDRU1JQUloQ1FOQUlBa2hBZ0ovUVFBZ0RLMGdCMEdRQm1vZ0MwSC9EM0VpQVVFQ2RHb2lCalVDQUVJZGhud2lFMEtCbE92Y0ExUU5BQm9nRXlBVFFvQ1U2OXdEZ0NJVVFvQ1U2OXdEZm4waEV5QVVwd3NoRENBR0lCT25JZ1kyQWdBZ0FpQUNJQUlnQVNBR0d5QUJJQWhHR3lBQklBSkJBV3RCL3c5eFJ4c2hDU0FCUVFGcklRc2dBU0FJUncwQUN5QU5RUjFySVEwZ0RFVU5BU0FKSUFoQkFXdEIvdzl4SWdoR0JFQWdCMEdRQm1vZ0NVSCtEMnBCL3c5eFFRSjBhaUlCSUFFb0FnQWdCMEdRQm1vZ0NVRUJhMEgvRDNFaUFrRUNkR29vQWdCeU5nSUFDeUFLUVFscUlRb2dCMEdRQm1vZ0NFRUNkR29nRERZQ0FBd0JDd3NDUUFOQUlBSkJBV3BCL3c5eElRWWdCMEdRQm1vZ0FrRUJhMEgvRDNGQkFuUnFJUXdEUUNBSUlRbEJBQ0VCQWtBQ1FBTkFBa0FnQVNBSmFrSC9EM0VpQ0NBQ1JnMEFJQWRCa0FacUlBaEJBblJxS0FJQUlnZ2dBVUVDZEVIZ2dnTnFLQUlBSWd0SkRRQWdDQ0FMU3cwQ0lBRkJBV29pQVVFRVJ3MEJDd3NnQ2tFa1J3MEFRZ0FoRTBFQUlRRkNBQ0VVQTBBZ0FpQUJJQWxxUWY4UGNTSUdSZ1JBSUFKQkFXcEIvdzl4SWdKQkFuUWdCMnBCQURZQ2pBWUxJQWRCZ0FacUlCTWdGRUlBUW9DQWdJRGxtcmVPd0FBUVhDQUhRZkFGYWlBSFFaQUdhaUFHUVFKMGFpZ0NBQkRBQWlBSFFlQUZhaUFIS1FPQUJpQUhLUU9JQmlBSEtRUHdCU0FIS1FQNEJSQ21BU0FIS1FQb0JTRVVJQWNwQStBRklSTWdBVUVCYWlJQlFRUkhEUUFMSUFkQjBBVnFJQVVRcmdFZ0IwSEFCV29nRXlBVUlBY3BBOUFGSUFjcEE5Z0ZFRndnQnlrRHlBVWhGRUlBSVJNZ0J5a0R3QVVoRlNBTlFmRUFhaUlHSUFScklnUkJBQ0FFUVFCS0d5QURJQU1nQkVvaUNCc2lBVUh3QUV3TkFRd0VDMEVKUVFFZ0NrRXRTaHNpQ3lBTmFpRU5JQUloQ0NBQ0lBbEdEUUZCZ0pUcjNBTWdDM1loRGtGL0lBdDBRWDl6SVE5QkFDRUJJQWtoQ0FOQUlBZEJrQVpxSUFsQkFuUnFJaEFnQVNBUUtBSUFJaEFnQzNacUlnRTJBZ0FnQ0VFQmFrSC9EM0VnQ0NBQlJTQUlJQWxHY1NJQkd5RUlJQXBCQ1dzZ0NpQUJHeUVLSUE4Z0VIRWdEbXdoQVNBSlFRRnFRZjhQY1NJSklBSkhEUUFMSUFGRkRRRWdCaUFJUndSQUlBZEJrQVpxSUFKQkFuUnFJQUUyQWdBZ0JpRUNEQU1MSUF3Z0RDZ0NBRUVCY2pZQ0FDQUdJUWdNQVFzTEN5QUhRWkFGYWtRQUFBQUFBQUR3UDBIaEFTQUJheER6QVJEWkFTQUhRYkFGYWlBSEtRT1FCU0FIS1FPWUJTQVZJQlFRaVFjZ0J5a0R1QVVoRnlBSEtRT3dCU0VZSUFkQmdBVnFSQUFBQUFBQUFQQS9RZkVBSUFGckVQTUJFTmtCSUFkQm9BVnFJQlVnRkNBSEtRT0FCU0FIS1FPSUJSRHZCU0FIUWZBRWFpQVZJQlFnQnlrRG9BVWlFeUFIS1FPb0JTSVdFS1lFSUFkQjRBUnFJQmdnRnlBSEtRUHdCQ0FIS1FQNEJCQ21BU0FIS1FQb0JDRVVJQWNwQStBRUlSVUxBa0FnQ1VFRWFrSC9EM0VpQXlBQ1JnMEFBa0FnQjBHUUJtb2dBMEVDZEdvb0FnQWlBMEgveWJYdUFVMEVRQ0FEUlVFQUlBbEJCV3BCL3c5eElBSkdHdzBCSUFkQjhBTnFJQVczUkFBQUFBQUFBTkEvb2hEWkFTQUhRZUFEYWlBVElCWWdCeWtEOEFNZ0J5a0QrQU1RcGdFZ0J5a0Q2QU1oRmlBSEtRUGdBeUVUREFFTElBTkJnTXExN2dGSEJFQWdCMEhRQkdvZ0JiZEVBQUFBQUFBQTZEK2lFTmtCSUFkQndBUnFJQk1nRmlBSEtRUFFCQ0FIS1FQWUJCQ21BU0FIS1FQSUJDRVdJQWNwQThBRUlSTU1BUXNnQmJjaEdTQUNJQWxCQldwQi93OXhSZ1JBSUFkQmtBUnFJQmxFQUFBQUFBQUE0RCtpRU5rQklBZEJnQVJxSUJNZ0ZpQUhLUU9RQkNBSEtRT1lCQkNtQVNBSEtRT0lCQ0VXSUFjcEE0QUVJUk1NQVFzZ0IwR3dCR29nR1VRQUFBQUFBQURvUDZJUTJRRWdCMEdnQkdvZ0V5QVdJQWNwQTdBRUlBY3BBN2dFRUtZQklBY3BBNmdFSVJZZ0J5a0RvQVFoRXdzZ0FVSHZBRW9OQUNBSFFkQURhaUFUSUJaQ0FFS0FnSUNBZ0lEQS96OFE3d1VnQnlrRDBBTWdCeWtEMkFOQ0FFSUFFSlVDRFFBZ0IwSEFBMm9nRXlBV1FnQkNnSUNBZ0lDQXdQOC9FS1lCSUFjcEE4Z0RJUllnQnlrRHdBTWhFd3NnQjBHd0Eyb2dGU0FVSUJNZ0ZoQ21BU0FIUWFBRGFpQUhLUU93QXlBSEtRTzRBeUFZSUJjUXBnUWdCeWtEcUFNaEZDQUhLUU9nQXlFVkFrQkJmaUFSYXlBR1FmLy8vLzhIY1U0TkFDQUhJQlJDLy8vLy8vLy8vLy8vQUlNM0E1Z0RJQWNnRlRjRGtBTWdCMEdBQTJvZ0ZTQVVRZ0JDZ0lDQWdJQ0FnUDgvRUZ3Z0J5a0RrQU1nQnlrRG1BTkNnSUNBZ0lDQWdMakFBQkQrQmlFQ0lCUWdCeWtEaUFNZ0FrRUFTQ0lER3lFVUlCVWdCeWtEZ0FNZ0F4c2hGU0FJSUFNZ0FTQUVSM0p4SUJNZ0ZrSUFRZ0FRbFFKQkFFZHhSVUVBSUEwZ0FrRi9TbW9pRFVIdUFHb2dFa3diRFFCQmxJTUVRY1FBTmdJQUN5QUhRZkFDYWlBVklCUWdEUkNJQnlBSEtRUHdBaUVVSUFjcEEvZ0NDeUVUSUFBZ0ZEY0RBQ0FBSUJNM0F3Z2dCMEdReGdCcUpBQUxzdzBDQ0g4SGZpTUFRYkFEYXlJR0pBQUNmeUFCS0FJRUlnY2dBU2dDYUVrRVFDQUJJQWRCQVdvMkFnUWdCeTBBQUF3QkN5QUJFRk1MSVFjQ1FBSi9BMEFDUUNBSFFUQkhCRUFnQjBFdVJ3MEVJQUVvQWdRaUJ5QUJLQUpvVHcwQklBRWdCMEVCYWpZQ0JDQUhMUUFBREFNTElBRW9BZ1FpQnlBQktBSm9TUVJBUVFFaENTQUJJQWRCQVdvMkFnUWdCeTBBQUNFSEJVRUJJUWtnQVJCVElRY0xEQUVMQ3lBQkVGTUxJUWRCQVNFS0lBZEJNRWNOQUFOQUlCSkNBWDBoRWdKL0lBRW9BZ1FpQnlBQktBSm9TUVJBSUFFZ0IwRUJhallDQkNBSExRQUFEQUVMSUFFUVV3c2lCMEV3UmcwQUMwRUJJUWtMUW9DQWdJQ0FnTUQvUHlFT0EwQUNRQ0FIUVNCeUlRc0NRQUpBSUFkQk1Hc2lERUVLU1EwQUlBZEJMa2RCQUNBTFFlRUFhMEVGU3hzTkFpQUhRUzVIRFFBZ0NnMENRUUVoQ2lBUUlSSU1BUXNnQzBIWEFHc2dEQ0FIUVRsS0d5RUhBa0FnRUVJSFZ3UkFJQWNnQ0VFRWRHb2hDQXdCQ3lBUVFoeFhCRUFnQmtFd2FpQUhFSzRCSUFaQklHb2dFeUFPUWdCQ2dJQ0FnSUNBd1AwL0VGd2dCa0VRYWlBR0tRTWdJaE1nQmlrREtDSU9JQVlwQXpBZ0Jpa0RPQkJjSUFZZ0R5QVJJQVlwQXhBZ0Jpa0RHQkNtQVNBR0tRTUlJUkVnQmlrREFDRVBEQUVMSUEwZ0IwVnlEUUFnQmtIUUFHb2dFeUFPUWdCQ2dJQ0FnSUNBZ1A4L0VGd2dCa0ZBYXlBUElCRWdCaWtEVUNBR0tRTllFS1lCSUFZcEEwZ2hFVUVCSVEwZ0Jpa0RRQ0VQQ3lBUVFnRjhJUkJCQVNFSkN5QUJLQUlFSWdjZ0FTZ0NhRWtFUUNBQklBZEJBV28yQWdRZ0J5MEFBQ0VIQlNBQkVGTWhCd3NNQVFzTEFuNENRQUpBSUFsRkJFQWdBU2dDYUVVRVFDQUZEUU1NQWdzZ0FTQUJLQUlFSWdKQkFXczJBZ1FnQlVVTkFTQUJJQUpCQW1zMkFnUWdDa1VOQWlBQklBSkJBMnMyQWdRTUFnc2dFRUlIVndSQUlCQWhEZ05BSUFoQkJIUWhDQ0FPUWdGOElnNUNDRklOQUFzTEFrQWdCMEZmY1VIUUFFWUVRQ0FCSUFVUWhnY2lEa0tBZ0lDQWdJQ0FnSUIvVWcwQklBVUVRRUlBSVE0Z0FTZ0NhRVVOQWlBQklBRW9BZ1JCQVdzMkFnUU1BZ3RDQUNFUElBRkNBQkRIQVVJQURBUUxRZ0FoRGlBQktBSm9SUTBBSUFFZ0FTZ0NCRUVCYXpZQ0JBc2dDRVVFUUNBR1FmQUFhaUFFdDBRQUFBQUFBQUFBQUtJUTJRRWdCaWtEY0NFUElBWXBBM2dNQXdzZ0VpQVFJQW9iUWdLR0lBNThRaUI5SWhCQkFDQURhNjFWQkVCQmxJTUVRY1FBTmdJQUlBWkJvQUZxSUFRUXJnRWdCa0dRQVdvZ0Jpa0RvQUVnQmlrRHFBRkNmMEwvLy8vLy8vKy8vLzhBRUZ3Z0JrR0FBV29nQmlrRGtBRWdCaWtEbUFGQ2YwTC8vLy8vLy8rLy8vOEFFRndnQmlrRGdBRWhEeUFHS1FPSUFRd0RDeUFEUWVJQmE2d2dFRmNFUUNBSVFYOUtCRUFEUUNBR1FhQURhaUFQSUJGQ0FFS0FnSUNBZ0lEQS83OS9FS1lCSUE4Z0VVS0FnSUNBZ0lDQS96OFEvZ1loQVNBR1FaQURhaUFQSUJFZ0R5QUdLUU9nQXlBQlFRQklJZ1ViSUJFZ0Jpa0RxQU1nQlJzUXBnRWdFRUlCZlNFUUlBWXBBNWdESVJFZ0Jpa0RrQU1oRHlBSVFRRjBJQUZCZjBweUlnaEJmMG9OQUFzTEFuNGdFQ0FEckgxQ0lId2lEcWNpQVVFQUlBRkJBRW9iSUFJZ0RpQUNyVk1iSWdGQjhRQk9CRUFnQmtHQUEyb2dCQkN1QVNBR0tRT0lBeUVTSUFZcEE0QURJUk5DQUF3QkN5QUdRZUFDYWtRQUFBQUFBQUR3UDBHUUFTQUJheER6QVJEWkFTQUdRZEFDYWlBRUVLNEJJQVpCOEFKcUlBWXBBK0FDSUFZcEErZ0NJQVlwQTlBQ0loTWdCaWtEMkFJaUVoQ0pCeUFHS1FQNEFpRVVJQVlwQS9BQ0N5RU9JQVpCd0FKcUlBZ2dDRUVCY1VVZ0R5QVJRZ0JDQUJDVkFrRUFSeUFCUVNCSWNYRWlBV29Rd0FJZ0JrR3dBbW9nRXlBU0lBWXBBOEFDSUFZcEE4Z0NFRndnQmtHUUFtb2dCaWtEc0FJZ0Jpa0R1QUlnRGlBVUVLWUJJQVpCb0FKcVFnQWdEeUFCRzBJQUlCRWdBUnNnRXlBU0VGd2dCa0dBQW1vZ0Jpa0RvQUlnQmlrRHFBSWdCaWtEa0FJZ0Jpa0RtQUlRcGdFZ0JrSHdBV29nQmlrRGdBSWdCaWtEaUFJZ0RpQVVFS1lFSUFZcEEvQUJJZzRnQmlrRCtBRWlFa0lBUWdBUWxRSkZCRUJCbElNRVFjUUFOZ0lBQ3lBR1FlQUJhaUFPSUJJZ0VLY1FpQWNnQmlrRDRBRWhEeUFHS1FQb0FRd0RDMEdVZ3dSQnhBQTJBZ0FnQmtIUUFXb2dCQkN1QVNBR1FjQUJhaUFHS1FQUUFTQUdLUVBZQVVJQVFvQ0FnSUNBZ01BQUVGd2dCa0d3QVdvZ0Jpa0R3QUVnQmlrRHlBRkNBRUtBZ0lDQWdJREFBQkJjSUFZcEE3QUJJUThnQmlrRHVBRU1BZ3NnQVVJQUVNY0JDeUFHUWVBQWFpQUV0MFFBQUFBQUFBQUFBS0lRMlFFZ0Jpa0RZQ0VQSUFZcEEyZ0xJUkFnQUNBUE53TUFJQUFnRURjRENDQUdRYkFEYWlRQUN6Z0JBWDlCQkJBNklnRUVRQ0FCSUFBUXRRUWlBRFlDQUNBQUJIOGdBUVVnQVJBelFRQUxEd3RCQUVFRFFZQUxRUUFRT0VFQkVBRUFDd1FBUWdBTExnRUJmeUFBUVl5TUJDZ0NBRFlDT0VHTWpBUW9BZ0FpQVFSQUlBRWdBRFlDTkF0QmpJd0VJQUEyQWdBZ0FBc21BUUYvSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ0FBUWZDdkFpQUJFSXNISUFKQkVHb2tBQXNKQUNBQUtBSThFQkVMS1FBZ0FTQUJLQUlBUVE5cVFYQnhJZ0ZCRUdvMkFnQWdBQ0FCS1FNQUlBRXBBd2dRcFFRNUF3QUxsQmNERW44QmZBSitJd0JCc0FScklna2tBQ0FKUVFBMkFpd0NmeUFCdlNJWlFuOVhCRUJCQVNFU0lBR2FJZ0c5SVJsQm9JSUREQUVMUVFFaEVrR2pnZ01nQkVHQUVIRU5BQnBCcG9JRElBUkJBWEVOQUJwQkFDRVNRUUVoRTBHaGdnTUxJUlVDUUNBWlFvQ0FnSUNBZ0lENC93Q0RRb0NBZ0lDQWdJRDQvd0JSQkVBZ0FFRWdJQUlnRWtFRGFpSU5JQVJCLy85N2NSQ2dBU0FBSUJVZ0VoQ0hBU0FBUWJ1Q0EwRy9nZ01nQlVFZ2NTSURHMEd6Z2dOQnQ0SURJQU1iSUFFZ0FXSWJRUU1RaHdFTUFRc2dDVUVRYWlFUUFrQUNmd0pBSUFFZ0NVRXNhaENQQnlJQklBR2dJZ0ZFQUFBQUFBQUFBQUJpQkVBZ0NTQUpLQUlzSWdaQkFXczJBaXdnQlVFZ2NpSVdRZUVBUncwQkRBTUxJQVZCSUhJaUZrSGhBRVlOQWlBSktBSXNJUXRCQmlBRElBTkJBRWdiREFFTElBa2dCa0VkYXlJTE5nSXNJQUZFQUFBQUFBQUFzRUdpSVFGQkJpQURJQU5CQUVnYkN5RUtJQWxCTUdvZ0NVSFFBbW9nQzBFQVNCc2lEeUVJQTBBZ0NBSi9JQUZFQUFBQUFBQUE4RUZqSUFGRUFBQUFBQUFBQUFCbWNRUkFJQUdyREFFTFFRQUxJZ00yQWdBZ0NFRUVhaUVJSUFFZ0E3aWhSQUFBQUFCbHpjMUJvaUlCUkFBQUFBQUFBQUFBWWcwQUN3SkFJQXRCQVVnRVFDQUxJUU1nQ0NFR0lBOGhCd3dCQ3lBUElRY2dDeUVEQTBBZ0EwRWRJQU5CSFVnYklRd0NRQ0FJUVFScklnWWdCMGtOQUNBTXJTRWFRZ0FoR1FOQUlBWWdHVUwvLy8vL0Q0TWdCalVDQUNBYWhud2lHU0FaUW9DVTY5d0RnQ0laUW9DVTY5d0RmbjArQWdBZ0JrRUVheUlHSUFkUERRQUxJQm1uSWdORkRRQWdCMEVFYXlJSElBTTJBZ0FMQTBBZ0J5QUlJZ1pKQkVBZ0JrRUVheUlJS0FJQVJRMEJDd3NnQ1NBSktBSXNJQXhySWdNMkFpd2dCaUVJSUFOQkFFb05BQXNMSUFOQmYwd0VRQ0FLUVJscVFRbHRRUUZxSVJFZ0ZrSG1BRVloRFFOQVFRbEJBQ0FEYXlBRFFYZElHeUVYQWtBZ0JpQUhUUVJBSUFjZ0IwRUVhaUFIS0FJQUd5RUhEQUVMUVlDVTY5d0RJQmQySVJSQmZ5QVhkRUYvY3lFT1FRQWhBeUFISVFnRFFDQUlJQU1nQ0NnQ0FDSU1JQmQyYWpZQ0FDQU1JQTV4SUJSc0lRTWdDRUVFYWlJSUlBWkpEUUFMSUFjZ0IwRUVhaUFIS0FJQUd5RUhJQU5GRFFBZ0JpQUROZ0lBSUFaQkJHb2hCZ3NnQ1NBSktBSXNJQmRxSWdNMkFpd2dEeUFISUEwYklnZ2dFVUVDZEdvZ0JpQUdJQWhyUVFKMUlCRktHeUVHSUFOQkFFZ05BQXNMUVFBaENBSkFJQVlnQjAwTkFDQVBJQWRyUVFKMVFRbHNJUWhCQ2lFRElBY29BZ0FpREVFS1NRMEFBMEFnQ0VFQmFpRUlJQXdnQTBFS2JDSURUdzBBQ3dzZ0NrRUFJQWdnRmtIbUFFWWJheUFXUWVjQVJpQUtRUUJIY1dzaUF5QUdJQTlyUVFKMVFRbHNRUWxyU0FSQUlBTkJnTWdBYWlJT1FRbHRJZ3hCQW5RZ0NVRXdha0VFY2lBSlFkUUNhaUFMUVFCSUcycEJnQ0JySVExQkNpRURJQTRnREVFSmJHc2lEa0VIVEFSQUEwQWdBMEVLYkNFRElBNUJBV29pRGtFSVJ3MEFDd3NDUUVFQUlBWWdEVUVFYWlJUlJpQU5LQUlBSWc0Z0RpQURiaUlNSUFOc2F5SVVHdzBBUkFBQUFBQUFBT0EvUkFBQUFBQUFBUEEvUkFBQUFBQUFBUGcvSUJRZ0EwRUJkaUlMUmh0RUFBQUFBQUFBK0Q4Z0JpQVJSaHNnQ3lBVVN4c2hHRVFCQUFBQUFBQkFRMFFBQUFBQUFBQkFReUFNUVFGeEd5RUJBa0FnRXcwQUlCVXRBQUJCTFVjTkFDQVltaUVZSUFHYUlRRUxJQTBnRGlBVWF5SUxOZ0lBSUFFZ0dLQWdBV0VOQUNBTklBTWdDMm9pQXpZQ0FDQURRWUNVNjl3RFR3UkFBMEFnRFVFQU5nSUFJQWNnRFVFRWF5SU5Td1JBSUFkQkJHc2lCMEVBTmdJQUN5QU5JQTBvQWdCQkFXb2lBellDQUNBRFFmK1Q2OXdEU3cwQUN3c2dEeUFIYTBFQ2RVRUpiQ0VJUVFvaEF5QUhLQUlBSWd0QkNra05BQU5BSUFoQkFXb2hDQ0FMSUFOQkNtd2lBMDhOQUFzTElBMUJCR29pQXlBR0lBTWdCa2tiSVFZTEEwQWdCaUlMSUFkTklneEZCRUFnQzBFRWF5SUdLQUlBUlEwQkN3c0NRQ0FXUWVjQVJ3UkFJQVJCQ0hFaEV3d0JDeUFJUVg5elFYOGdDa0VCSUFvYklnWWdDRW9nQ0VGN1NuRWlBeHNnQm1vaENrRi9RWDRnQXhzZ0JXb2hCU0FFUVFoeEloTU5BRUYzSVFZQ1FDQU1EUUFnQzBFRWF5Z0NBQ0lNUlEwQVFRb2hEa0VBSVFZZ0RFRUtjQTBBQTBBZ0JpSURRUUZxSVFZZ0RDQU9RUXBzSWc1d1JRMEFDeUFEUVg5eklRWUxJQXNnRDJ0QkFuVkJDV3doQXlBRlFWOXhRY1lBUmdSQVFRQWhFeUFLSUFNZ0JtcEJDV3NpQTBFQUlBTkJBRW9iSWdNZ0F5QUtTaHNoQ2d3QkMwRUFJUk1nQ2lBRElBaHFJQVpxUVFscklnTkJBQ0FEUVFCS0d5SURJQU1nQ2tvYklRb0xJQW9nRTNJaUZFRUFSeUVPSUFCQklDQUNBbjhnQ0VFQUlBaEJBRW9iSUFWQlgzRWlERUhHQUVZTkFCb2dFQ0FJSUFoQkgzVWlBMm9nQTNPdElCQVF3Z0lpQm10QkFVd0VRQU5BSUFaQkFXc2lCa0V3T2dBQUlCQWdCbXRCQWtnTkFBc0xJQVpCQW1zaUVTQUZPZ0FBSUFaQkFXdEJMVUVySUFoQkFFZ2JPZ0FBSUJBZ0VXc0xJQW9nRW1vZ0RtcHFRUUZxSWcwZ0JCQ2dBU0FBSUJVZ0VoQ0hBU0FBUVRBZ0FpQU5JQVJCZ0lBRWN4Q2dBUUpBQWtBQ1FDQU1RY1lBUmdSQUlBbEJFR3BCQ0hJaEF5QUpRUkJxUVFseUlRZ2dEeUFISUFjZ0Qwc2JJZ1VoQndOQUlBYzFBZ0FnQ0JEQ0FpRUdBa0FnQlNBSFJ3UkFJQVlnQ1VFUWFrME5BUU5BSUFaQkFXc2lCa0V3T2dBQUlBWWdDVUVRYWtzTkFBc01BUXNnQmlBSVJ3MEFJQWxCTURvQUdDQURJUVlMSUFBZ0JpQUlJQVpyRUljQklBZEJCR29pQnlBUFRRMEFDeUFVQkVBZ0FFSERnZ05CQVJDSEFRc2dDa0VCU0NBSElBdFBjZzBCQTBBZ0J6VUNBQ0FJRU1JQ0lnWWdDVUVRYWtzRVFBTkFJQVpCQVdzaUJrRXdPZ0FBSUFZZ0NVRVFha3NOQUFzTElBQWdCaUFLUVFrZ0NrRUpTQnNRaHdFZ0NrRUpheUVHSUFkQkJHb2lCeUFMVHcwRElBcEJDVW9oQXlBR0lRb2dBdzBBQ3d3Q0N3SkFJQXBCQUVnTkFDQUxJQWRCQkdvZ0J5QUxTUnNoQlNBSlFSQnFRUWh5SVFNZ0NVRVFha0VKY2lFTElBY2hDQU5BSUFzZ0NEVUNBQ0FMRU1JQ0lnWkdCRUFnQ1VFd09nQVlJQU1oQmdzQ1FDQUhJQWhIQkVBZ0JpQUpRUkJxVFEwQkEwQWdCa0VCYXlJR1FUQTZBQUFnQmlBSlFSQnFTdzBBQ3d3QkN5QUFJQVpCQVJDSEFTQUdRUUZxSVFZZ0UwVkJBQ0FLUVFGSUd3MEFJQUJCdzRJRFFRRVFod0VMSUFBZ0JpQUxJQVpySWdZZ0NpQUdJQXBJR3hDSEFTQUtJQVpySVFvZ0NFRUVhaUlJSUFWUERRRWdDa0YvU2cwQUN3c2dBRUV3SUFwQkVtcEJFa0VBRUtBQklBQWdFU0FRSUJGckVJY0JEQUlMSUFvaEJnc2dBRUV3SUFaQkNXcEJDVUVBRUtBQkN3d0JDeUFWUVFscUlCVWdCVUVnY1NJTEd5RUtBa0FnQTBFTFN3MEFRUXdnQTJzaUJrVU5BRVFBQUFBQUFBQWdRQ0VZQTBBZ0dFUUFBQUFBQUFBd1FLSWhHQ0FHUVFGcklnWU5BQXNnQ2kwQUFFRXRSZ1JBSUJnZ0Fab2dHS0dnbWlFQkRBRUxJQUVnR0tBZ0dLRWhBUXNnRUNBSktBSXNJZ1lnQmtFZmRTSUdhaUFHYzYwZ0VCRENBaUlHUmdSQUlBbEJNRG9BRHlBSlFROXFJUVlMSUJKQkFuSWhEeUFKS0FJc0lRZ2dCa0VDYXlJTUlBVkJEMm82QUFBZ0JrRUJhMEV0UVNzZ0NFRUFTQnM2QUFBZ0JFRUljU0VJSUFsQkVHb2hCd05BSUFjaUJRSi9JQUdaUkFBQUFBQUFBT0JCWXdSQUlBR3FEQUVMUVlDQWdJQjRDeUlHUVpDQ0Eyb3RBQUFnQzNJNkFBQWdCVUVCYWlJSElBbEJFR3ByUVFGSElBZ2dBMEVBU25KRlFRQWdBU0FHdDZGRUFBQUFBQUFBTUVDaUlnRkVBQUFBQUFBQUFBQmhHM0pGQkVBZ0JVRXVPZ0FCSUFWQkFtb2hCd3NnQVVRQUFBQUFBQUFBQUdJTkFBc2dBRUVnSUFJZ0R5QVFJQWxCRUdwcklBeHJJQWRxSUFNZ0VHb2dER3RCQW1vZ0EwVWdCeUFKYTBFU2F5QURUbkliSWdOcUlnMGdCQkNnQVNBQUlBb2dEeENIQVNBQVFUQWdBaUFOSUFSQmdJQUVjeENnQVNBQUlBbEJFR29nQnlBSlFSQnFheUlGRUljQklBQkJNQ0FESUFVZ0VDQU1heUlEYW10QkFFRUFFS0FCSUFBZ0RDQURFSWNCQ3lBQVFTQWdBaUFOSUFSQmdNQUFjeENnQVNBSlFiQUVhaVFBSUFJZ0RTQUNJQTFLR3d1ZUJBRUpmeU1BUWFBRWF5SUNKQUFnQWlBQU5nSVFJQUpCNFE0MkFoUWdBa0VnYWtIYkRpQUNRUkJxRU1NQ0FrQUNRQ0FDUVNCcVFlTVhFT2NDSWdGRkJFQWdBaUFBTmdJQVFRQkJBMEdOSkNBQ0VEZ01BUXRCQ0JBNklnUkZEUUVDUUFKQUlBUkJCR3BCQkVFQklBRVFYMEVCUndSQVFRQkJBMEhiTEVFQUVEZ01BUXNnQkNBRUtBSUVJZ0JCRkd3UU9pSUZOZ0lBSUFWRkRRTWdBRUVBSUFCQkFFb2JJUWdEUUNBR0lBaEdEUUlDUUNBRklBWkJGR3hxSWdCQkNHcEJCRUVCSUFFUVgwRUJSdzBBSUFCQkRHcEJCRUVCSUFFUVgwRUJSdzBBSUFCQkVHcEJCRUVCSUFFUVgwRUJSdzBBSUFCQkJHcEJCRUVCSUFFUVgwRUJSdzBBSUFBZ0FDZ0NCQ0lEUVJSc0VEb2lDVFlDQUVFQUlRY2dDVVVOQlFOQUlBTWdCMG9FUUNBSFFSUnNJZ01nQUNnQ0FHcEJCRUVCSUFFUVgwRUJSdzBDSUFBb0FnQWdBMnBCQkdwQkJFRUJJQUVRWDBFQlJ3MENJQUFvQWdBZ0EycEJDR3BCQkVFQklBRVFYMEVCUncwQ0lBQW9BZ0FnQTJwQkRHcEJCRUVCSUFFUVgwRUJSdzBDSUFBb0FnQWdBMnBCRUdwQkJFRUJJQUVRWDBFQlJ3MENJQWRCQVdvaEJ5QUFLQUlFSVFNTUFRc0xJQVpCQVdvaEJnd0JDd3RCQUNFQVFRQkJBMEhiTEVFQUVEZ0RRQ0FBSUFaSEJFQWdCU0FBUVJSc2FpZ0NBQkF6SUFCQkFXb2hBQXdCQ3dzZ0JSQXpDeUFFRUROQkFDRUVDeUFCRUxNQkN5QUNRYUFFYWlRQUlBUVBDMEVBUVFOQnVDbEJBQkE0UVFFUUFRQUxMUUFnQUZCRkJFQURRQ0FCUVFGcklnRWdBS2RCQjNGQk1ISTZBQUFnQUVJRGlDSUFRZ0JTRFFBTEN5QUJDelVBSUFCUVJRUkFBMEFnQVVFQmF5SUJJQUNuUVE5eFFaQ0NBMm90QUFBZ0FuSTZBQUFnQUVJRWlDSUFRZ0JTRFFBTEN5QUJDNUFDQVFWL0lBRW9Ba3dhUWY4QklRUWdBQ0VEQWtBRFFBSkFJQVJGRFFBQ2Z5QUJLQUlFSWdKQkNpQUJLQUlJSUFKckVLb0VJZ1lFUUNBR0lBRW9BZ1FpQW10QkFXb01BUXNnQVNnQ0NDQUJLQUlFSWdKckN5RUZJQU1nQWlBRklBUWdCQ0FGU3hzaUFoQS9HaUFCSUFFb0FnUWdBbW9pQlRZQ0JDQUNJQU5xSVFNZ0JnMEFJQVFnQW1zaUJFVU5BQUpBSUFFb0FnZ2dCVXNFUUNBQklBVkJBV28yQWdRZ0JTMEFBQ0VDREFFTElBRVF0UU1pQWtGL1NnMEFRUUFoQWlBQUlBTkdEUU1nQVMwQUFFRVFjVVVOQXd3QkN5QURJQUk2QUFBZ0EwRUJhaUVESUFSQkFXc2hCQ0FDUWY4QmNVRUtSdzBCQ3dzZ0FFVUVRRUVBSVFJTUFRc2dBMEVBT2dBQUlBQWhBZ3NnQWd0Q0FRRi9Jd0JCRUdzaUF5UUFJQUFvQWp3Z0FhY2dBVUlnaUtjZ0FrSC9BWEVnQTBFSWFoQWVFSzhESVFBZ0F5a0RDQ0VCSUFOQkVHb2tBRUovSUFFZ0FCc0xFQUFnQUNnQ0FFR0VBV3BCQVJBS0FBdUtBUUVDZnlNQVFhQUJheUlESkFBZ0EwRUlha0dZL1FKQmtBRVFQeG9nQXlBQU5nSTBJQU1nQURZQ0hDQURRWDRnQUdzaUJFSC8vLy8vQnlBRVFmLy8vLzhIU1JzaUJEWUNPQ0FESUFBZ0JHb2lBRFlDSkNBRElBQTJBaGdnQTBFSWFpQUJJQUlRaXdjZ0JBUkFJQU1vQWh3aUFDQUFJQU1vQWhoR2EwRUFPZ0FBQ3lBRFFhQUJhaVFBQ3pNQkFYOGdBQ2dDRkNJRElBRWdBaUFBS0FJUUlBTnJJZ0VnQVNBQ1N4c2lBUkEvR2lBQUlBQW9BaFFnQVdvMkFoUWdBZ3ZDQWdFQ2Z5TUFRU0JySWdNa0FBSi9Ba0FDUUVHUS9RSWdBU3dBQUJDWkFrVUVRRUdVZ3dSQkhEWUNBQXdCQzBHWUNSQTZJZ0lOQVF0QkFBd0JDeUFDUVFCQmtBRVFPeG9nQVVFckVKa0NSUVJBSUFKQkNFRUVJQUV0QUFCQjhnQkdHellDQUFzQ1FDQUJMUUFBUWVFQVJ3UkFJQUlvQWdBaEFRd0JDeUFBUVFOQkFCQVFJZ0ZCZ0FoeFJRUkFJQU1nQVVHQUNISTJBaEFnQUVFRUlBTkJFR29RRUJvTElBSWdBaWdDQUVHQUFYSWlBVFlDQUFzZ0FrSC9BVG9BU3lBQ1FZQUlOZ0l3SUFJZ0FEWUNQQ0FDSUFKQm1BRnFOZ0lzQWtBZ0FVRUljUTBBSUFNZ0EwRVlhallDQUNBQVFaT29BU0FERUNZTkFDQUNRUW82QUVzTElBSkI4Z0UyQWlnZ0FrSHpBVFlDSkNBQ1FmUUJOZ0lnSUFKQjlRRTJBZ3hCcklNRUtBSUFSUVJBSUFKQmZ6WUNUQXNnQWhEdERRc2hBQ0FEUVNCcUpBQWdBQXZVQVFFRWZ5TUFRU0JySWdNa0FDQURJQUUyQWhBZ0F5QUNJQUFvQWpBaUJFRUFSMnMyQWhRZ0FDZ0NMQ0VGSUFNZ0JEWUNIQ0FESUFVMkFoaEJmeUVFQWtBQ1FDQUFLQUk4SUFOQkVHcEJBaUFEUVF4cUVDVVFyd05GQkVBZ0F5Z0NEQ0lFUVFCS0RRRUxJQUFnQUNnQ0FDQUVRVEJ4UVJCemNqWUNBQXdCQ3lBRUlBTW9BaFFpQmswTkFDQUFJQUFvQWl3aUJUWUNCQ0FBSUFVZ0JDQUdhMm8yQWdnZ0FDZ0NNQVJBSUFBZ0JVRUJhallDQkNBQklBSnFRUUZySUFVdEFBQTZBQUFMSUFJaEJBc2dBMEVnYWlRQUlBUUxJQUFnQUNnQ1RFRi9UQVJBSUFBZ0FTQUNFTFlERHdzZ0FDQUJJQUlRdGdNTHFRNEJDbjhqQUVHZ0Jtc2lDQ1FBUVNnUU9pSUpRUUEyQWdBZ0NFRzRBbXBCQUVIb0F4QTdHa0hVakFSQkFEWUNBQ0FJUVJocUVLd0hJUXRCMUl3RUtBSUFJUVZCMUl3RVFRQTJBZ0JCZnlFR1FRUWhDZ0pBQWtBZ0JVVU5BRUhZakFRb0FnQWlCMFVOQUNBRktBSUFJQWxCQkJDdEFTSUdSUVJBREFJTElBY1FBZ3NRQXlFRklBWkJBVWNFUUNBSVFRTTJBaGdnQ0NBTE5nSzRBaUFJUVp3QmFrRUJJQWxCQkJEN0JpRUpFQU1oQ2tFQUlRVUxBa0FEUUFKQUFrQUNRQUpBQWtBQ1FDQUZCRUJCMUl3RVFRQTJBZ0JCQkNBSVFiZ0NhaEFMUWRTTUJDZ0NBQ0VGUWRTTUJFRUFOZ0lBUVg4aEJpQUZSUTBDUWRpTUJDZ0NBQ0lIUlEwQ0lBVW9BZ0FnQ1NBS0VLMEJJZ1lOQVF3SkMwSFVqQVJCQURZQ0FFRUZJQWhCdUFKcVFkb0FRZWdERUIxQjFJd0VLQUlBSVFWQjFJd0VRUUEyQWdCQmZ5RUdJQVZGRFFOQjJJd0VLQUlBSWdkRkRRTWdCU2dDQUNBSklBb1FyUUVpQmcwQ0RBZ0xJQWNRQWdzUUF5RUZJQVpCQVVjTkFnd0VDeUFIRUFJTEVBTWhCU0FHUVFGR0RRSkIxSXdFUVFBMkFnQkJCaUFJUWJnQ2FpQUFFQnhCMUl3RUtBSUFJUVZCMUl3RVFRQTJBZ0JCZnlFR0FrQWdCVVVOQUVIWWpBUW9BZ0FpQjBVTkFDQUZLQUlBSUFrZ0NoQ3RBU0lHUlFSQURBWUxJQWNRQWdzUUF5RUZJQVpCQVVZTkFrSFVqQVJCQURZQ0FFRUhJQWhCdUFKcVFRRVFHeUVMUWRTTUJDZ0NBQ0VGUWRTTUJFRUFOZ0lBUVg4aEJnSkFJQVZGRFFCQjJJd0VLQUlBSWdkRkRRQWdCU2dDQUNBSklBb1FyUUVpQmtVRVFBd0dDeUFIRUFJTEVBTWhCU0FHUVFGR0RRSUNRQUpBQWtBQ1FBSkFJQXRCQVVjRVFFSFVqQVJCQURZQ0FFRUlRUUJCQTBHTFBrRUFFQXhCMUl3RUtBSUFJUVZCMUl3RVFRQTJBZ0JCZnlFR0lBVkZEUUpCMkl3RUtBSUFJZ2RGRFFJZ0JTZ0NBQ0FKSUFvUXJRRWlCZzBCREFvTFFkU01CRUVBTmdJQVFRa2dDRUc0QW1vUUdocEIxSXdFS0FJQUlRVkIxSXdFUVFBMkFnQkJmeUVHSUFWRkRRTkIySXdFS0FJQUlnZEZEUU1nQlNnQ0FDQUpJQW9RclFFaUJnMENEQWtMSUFjUUFnc1FBeUVGSUFaQkFVY05BZ3dGQ3lBSEVBSUxFQU1oQlNBR1FRRkdEUU1nQ0NnQzFBSWdDQ2dDM0FKc0lnMGdDQ2dDMkFKc0VEb2lCd1JBUVFBaEJnSkFBMEFDUUVFQUlRVWdDQ2dDeEFNZ0NDZ0NyQU5QQkVCQjFJd0VRUUEyQWdCQkNpQUlRYmdDYWhBYUdrSFVqQVFvQWdBaEJVSFVqQVJCQURZQ0FFRi9JUVlnQlVVTkEwSFlqQVFvQWdBaUMwVU5BeUFGS0FJQUlBa2dDaEN0QVNJR0RRRWdCU0FMRUFvQUN3TkFJQVZCQlVaRkJFQWdDQ0FGUVFKMGFpQUhJQVVnQm1vZ0RXeHFOZ0lBSUFWQkFXb2hCUXdCQ3d0QjFJd0VRUUEyQWdCQkN5QUlRYmdDYWlBSVFRVVFNU0VPUWRTTUJDZ0NBQ0VGUWRTTUJFRUFOZ0lBUVg4aEN3SkFJQVZGRFFCQjJJd0VLQUlBSWd4RkRRQWdCU2dDQUNBSklBb1FyUUVpQzBVRVFDQUZJQXdRQ2dBTElBd1FBZ3NRQXlFRklBdEJBVVlOQnlBR0lBNXFJUVlNQVFzTElBc1FBZ3NRQXlFRklBWkJBVVlOQkVIVWpBUkJBRFlDQUVFRUlBaEJ1QUpxRUF0QjFJd0VLQUlBSVFWQjFJd0VRUUEyQWdCQmZ5RUdBa0FnQlVVTkFFSFlqQVFvQWdBaUMwVU5BQ0FGS0FJQUlBa2dDaEN0QVNJR1JRUkFJQVVnQ3hBS0FBc2dDeEFDQ3hBRElRVWdCa0VCUmcwRUlBRUVRQ0FCSUFnb0F0UUNOZ0lBQ3lBQ0JFQWdBaUFJS0FMWUFqWUNBQXNnQXdSQUlBTWdDQ2dDM0FJMkFnQUxJQVJGRFFVQ1FBSkFBa0FDUUNBSUxRRGFCQ0lBUVFGckRnSUFBUUlMSUFndkFkd0VJZ0FnQ0M4QjNnUkhEUUlnQkNBQXN6Z0NBQXdJQ3lBSUx3SGNCQ0lBSUFndkFkNEVSdzBCSUFRZ0FMTkRYSThpUUpRNEFnQU1Cd3NnQUVFRFNRMEFJQWd2QWR3RURRQWdDQzhCM2dRTkFDQUVJQUN6T0FJQURBWUxJQVJCQURZQ0FBd0ZDMEhVakFSQkFEWUNBRUVJUVFCQkEwRytEa0VBRUF4QjFJd0VLQUlBSVFWQjFJd0VRUUEyQWdCQmZ5RUdBa0FnQlVVTkFFSFlqQVFvQWdBaUIwVU5BQ0FGS0FJQUlBa2dDaEN0QVNJR1JRUkFEQWNMSUFjUUFnc1FBeUVGSUFaQkFVWU5BMEhVakFSQkFEWUNBRUVFSUFoQnVBSnFFQXRCMUl3RUtBSUFJUVZCMUl3RVFRQTJBZ0JCZnlFR0FrQWdCVVVOQUVIWWpBUW9BZ0FpQjBVTkFDQUZLQUlBSUFrZ0NoQ3RBU0lHUlFSQURBY0xJQWNRQWdzUUF5RUZJQVpCQVVZTkF3d0NDMEhVakFSQkFEWUNBRUVFSUFoQnVBSnFFQXRCMUl3RUtBSUFJUVZCMUl3RVFRQTJBZ0JCZnlFR0FrQWdCVVVOQUVIWWpBUW9BZ0FpQjBVTkFDQUZLQUlBSUFrZ0NoQ3RBU0lHUlFSQURBWUxJQWNRQWdzUUF5RUZJQVpCQVVZTkFnd0JDMEhVakFSQkFEWUNBRUVJUVFCQkEwR2pPRUVBRUF4QjFJd0VLQUlBSVFWQjFJd0VRUUEyQWdCQmZ5RUdBa0FnQlVVTkFFSFlqQVFvQWdBaUIwVU5BQ0FGS0FJQUlBa2dDaEN0QVNJR1JRUkFEQVVMSUFjUUFnc1FBeUVGSUFaQkFVWU5BUXNMUVFBaEJ3c2dDUkF6SUFoQm9BWnFKQUFnQnc4TElBVWdCeEFLQUFzNUFRRitBbjRnQUNnQ1RFRi9UQVJBSUFBUWt3Y01BUXNnQUJDVEJ3c2lBVUtBZ0lDQUNGa0VRRUdVZ3dSQlBUWUNBRUYvRHdzZ0FhY0wyd0lCQkg4Z0FieEIvLy8vL3dkeFFZQ0FnUHdIVFVFQUlBQzhRZi8vLy84SGNVR0JnSUQ4QjBrYlJRUkFJQUFnQVpJUEN5QUJ2Q0lDUVlDQWdQd0RSZ1JBSUFBUWxBY1BDeUFDUVI1MlFRSnhJZ1VnQUx3aUEwRWZkbkloQkFKQUFrQUNRQ0FEUWYvLy8vOEhjU0lEUlFSQUFrQWdCRUVDYXc0Q0FnQURDMFBiRDBuQUR3c2dBa0gvLy8vL0IzRWlBa0dBZ0lEOEIwY0VRQ0FDUlFSQVE5c1B5VDhnQUpnUEN5QURRWUNBZ1B3SFIwRUFJQUpCZ0lDQTZBQnFJQU5QRzBVRVFFUGJEOGsvSUFDWUR3c0NmU0FDSUFOQmdJQ0E2QUJxU3dSQVF3QUFBQUFnQlEwQkdnc2dBQ0FCbFlzUWxBY0xJUUFDUUFKQUFrQWdCQTREQlFBQkFnc2dBSXdQQzBQYkQwbEFJQUJETHIyN001S1REd3NnQUVNdXZic3pra1BiRDBuQWtnOExJQU5CZ0lDQS9BZEdEUUlnQkVFQ2RFR0EvUUpxS2dJQUR3dEQydzlKUUNFQUN5QUFEd3NnQkVFQ2RFSHcvQUpxS2dJQUMwd0JBWDlCRkJBNklnRUVRQ0FCSUFBZ0FVRUlhaUFCUVF4cUlBRkJCR29nQVVFUWFoRDlEU0lBTmdJQUlBQUVmeUFCQlNBQkVETkJBQXNQQzBFQVFRTkJ2ZzVCQUJBNFFRRVFBUUFMZ0FrREIzd0Vmd0YrQWtBQ1FBSkFJQUM5SWd4Q0lJaW5JZ2hCLy8vLy93ZHhJZ2tnREtjaUNuSUVmQ0FKUVlDQXdQOEhUVUVBSUFwRklBbEJnSURBL3dkSGNodEZCRUFnQUVRQUFBQUFBQUFBUUtBUEN3SkFJQW9OQUNBSlFZQ0F3UDhIUmdSQUlBQkVBQUFBQUFBQUFBQWdDRUYvU2hzUEN5QUpRWUNBd1A4RFJnUkFJQWhCZjBvRVFFUUFBQUFBQUFBQVFBOExSQUFBQUFBQUFPQS9Ed3NnQ0VHQWdJQ0FCRVlFUUVRQUFBQUFBQUFRUUE4TElBaEJnSUNBL3dOSERRQkV6VHQvWnA2ZzlqOFBDeUFKUVlHQWdJOEVUdzBEUWNEOEFpc0RBQ0lGUkFBQUFBQUFBUEEvUWFEOEFpc0RBQ0lEb1NJRVJBQUFBQUFBQVBBL0lBTkVBQUFBQUFBQThEK2dveUlHb2lJQ3ZVS0FnSUNBY0lPL0lnRWdBU0FCb2lJSFJBQUFBQUFBQUFoQW9DQUNJQUdnSUFZZ0JDQUJJQUdnb1NBQlJBQUFBQUFBQVBBL1JBQUFBQUFBQUFCQUlBT2hvYUtob2lJRG9pQUNJQUtpSWdFZ0FhSWdBU0FCSUFFZ0FTQUJSTzlPUlVvb2Zzby9va1JsMjhtVFNvYk5QNkNpUkFGQkhhbGdkTkUvb0tKRVRTYVBVVlZWMVQrZ29rVC9xMi9idG0zYlA2Q2lSQU16TXpNek0rTS9vS0tnSWdTZ3ZVS0FnSUNBY0lPL0lnR2lJZ1lnQXlBQm9pQUNJQVFnQVVRQUFBQUFBQUFJd0tBZ0I2R2hvcUFpQXFDOVFvQ0FnSUJ3Zzc4aUFVUUFBQURnQ2NmdVA2SWlBMEd3L0FJckF3QWdBaUFCSUFhaG9VVDlBenJjQ2NmdVA2SWdBVVQxQVZzVTRDOCt2cUtnb0NJRW9LQkVBQUFBQUFBQThEK2d2VUtBZ0lDQWNJTy9JZ0pFQUFBQUFBQUE4RCtoSUFXaElBT2hJUU1nQWlBTVFvQ0FnSUJ3Zzc4aUJhSWlBU0FFSUFPaElBQ2lJQUFnQmFFZ0FxS2dJZ0NnSWdLOUlneW5JUWtDUUNBTVFpQ0lweUlJUVlDQXdJUUVUZ1JBSUFoQmdJREFoQVJySUFseURRTWdBRVQrZ2l0bFJ4V1hQS0FnQWlBQm9XUkJBWE1OQVF3REN5QUlRWUQ0Ly84SGNVR0FtTU9FQkVrTkFDQUlRWURvdlBzRGFpQUpjZzBESUFBZ0FpQUJvV1ZCQVhNTkFBd0RDMEVBSVFrQ2ZDQUlRZi8vLy84SGNTSUtRWUdBZ1A4RFR3UitRUUJCZ0lEQUFDQUtRUlIyUWY0SGEzWWdDR29pQ2tILy96OXhRWUNBd0FCeVFaTUlJQXBCRkhaQi93OXhJZ3RyZGlJSmF5QUpJQWhCQUVnYklRa2dBQ0FCUVlDQVFDQUxRZjhIYTNVZ0NuR3RRaUNHdjZFaUFhQzlCU0FNQzBLQWdJQ0FjSU8vSWdKRUFBQUFBRU11NWoraUlnTWdBQ0FDSUFHaG9VVHZPZnIrUWk3bVA2SWdBa1E1YktnTVlWd2d2cUtnSWdLZ0lnQWdBQ0FBSUFBZ0FLSWlBU0FCSUFFZ0FTQUJSTkNrdm5KcE4yWStva1R4YTlMRlFiMjd2cUNpUkN6ZUphOXFWaEUvb0tKRWs3MitGbXpCWnIrZ29rUStWVlZWVlZYRlA2Q2lvU0lCb2lBQlJBQUFBQUFBQUFEQW9LTWdBaUFBSUFPaG9TSUJJQUFnQWFLZ29hRkVBQUFBQUFBQThEK2dJZ0M5SWd4Q0lJaW5JQWxCRkhScUlnaEIvLzgvVEFSQUlBQWdDUkR6QVF3QkN5QU1Rdi8vLy84UGd5QUlyVUlnaG9TL0MwUUFBQUFBQUFEd1A2SUZSQUFBQUFBQUFQQS9DdzhMUkFBQUFBQUFBUEIvRHd0RUFBQUFBQUFBQUFBUEMwUUFBQUFBQUFEd2YwUUFBQUFBQUFBQUFDQUlRUUJLR3d1VEFRSUJmUUovSUFDOElnSkJGM1pCL3dGeElnTkJsUUZOQkgwZ0EwSDlBRTBFUUNBQVF3QUFBQUNVRHdzQ2ZTQUFJQUNNSUFKQmYwb2JJZ0JEQUFBQVM1SkRBQUFBeTVJZ0FKTWlBVU1BQUFBL1hrRUJjMFVFUUNBQUlBR1NRd0FBZ0wrU0RBRUxJQUFnQVpJaUFDQUJRd0FBQUw5ZlFRRnpEUUFhSUFCREFBQ0FQNUlMSWdBZ0FJd2dBa0YvU2hzRklBQUxDOGNCQVFKL0l3QkJFR3NpQVNRQUFud2dBTDFDSUlpblFmLy8vLzhIY1NJQ1FmdkRwUDhEVFFSQVJBQUFBQUFBQVBBL0lBSkJuc0dhOGdOSkRRRWFJQUJFQUFBQUFBQUFBQUFRNkFJTUFRc2dBQ0FBb1NBQ1FZQ0F3UDhIVHcwQUdnSkFBa0FDUUFKQUlBQWdBUkNXQjBFRGNRNERBQUVDQXdzZ0FTc0RBQ0FCS3dNSUVPZ0NEQU1MSUFFckF3QWdBU3NEQ0VFQkVPa0NtZ3dDQ3lBQkt3TUFJQUVyQXdnUTZBS2FEQUVMSUFFckF3QWdBU3NEQ0VFQkVPa0NDeUVBSUFGQkVHb2tBQ0FBQzdBQ0F3RjhBWDRCZndKQUlBQzlJZ0pDSUlpblFmLy8vLzhIY1NJRFFZQ0F3UDhEVHdSQUlBS25JQU5CZ0lEQS93TnJja1VOQVVRQUFBQUFBQUFBQUNBQUlBQ2hvdzhMQW53Z0EwSC8vLy8rQTAwRVFFUVlMVVJVK3lINVB5QURRWUdBZ09NRFNRMEJHa1FIWEJRekpxYVJQQ0FBSUFDaUVLOEVJQUNpb1NBQW9VUVlMVVJVK3lINVA2QVBDeUFDUW45WEJFQkVHQzFFVlBzaCtUOGdBRVFBQUFBQUFBRHdQNkJFQUFBQUFBQUE0RCtpSWdDZklnRWdBU0FBRUs4RW9rUUhYQlF6SnFhUnZLQ2dvU0lBSUFDZ0R3dEVBQUFBQUFBQThEOGdBS0ZFQUFBQUFBQUE0RCtpSWdDZklnRWdBQkN2QktJZ0FDQUJ2VUtBZ0lDQWNJTy9JZ0FnQUtLaElBRWdBS0Nqb0NBQW9DSUFJQUNnQ3c4TFJBQUFBQUFBQUFBQVJCZ3RSRlQ3SVFsQUlBSkNmMVViQzI0QkEzOENRQ0FBUlEwQUlBQW9BZ0FpQVVVTkFBTkFJQUVvQWdRZ0Frb0VRQ0FDUVFKMElnTWdBU2dDQUdvb0FnQW9BZ0FRTXlBQUtBSUFLQUlBSUFOcUtBSUFFRE1nQWtFQmFpRUNJQUFvQWdBaEFRd0JDd3NnQVNnQ0FCQXpJQUFvQWdBUU15QUFRUUEyQWdBTEM5NExBZ1ovQ0gxREFBQ0FQeUVKQWtBQ1FBSkFJQUM4SWdSQmdJQ0EvQU5HRFFBZ0Fid2lCVUgvLy8vL0IzRWlBa1VOQUNBRVFmLy8vLzhIY1NJRFFZQ0FnUHdIVFVFQUlBSkJnWUNBL0FkSkcwVUVRQ0FBSUFHU0R3c0Nmd0pBSUFSQmYwb05BRUVDSUFKQi8vLy8yd1JMRFFFYUlBSkJnSUNBL0FOSkRRQkJBQ0FDUVpZQklBSkJGM1pySWdaMklnY2dCblFnQWtjTkFScEJBaUFIUVFGeGF3d0JDMEVBQ3lFR0FrQWdBa0dBZ0lEOEEwY0VRQ0FDUVlDQWdQd0hSdzBCSUFOQmdJQ0EvQU5HRFFJZ0EwR0JnSUQ4QTA4RVFDQUJRd0FBQUFBZ0JVRi9TaHNQQzBNQUFBQUFJQUdNSUFWQmYwb2JEd3NnQUVNQUFJQS9JQUNWSUFWQmYwb2JEd3NnQlVHQWdJQ0FCRVlFUUNBQUlBQ1VEd3NnQlVHQWdJRDRBMGNnQkVFQVNISkZCRUFnQUpFUEN5QUFpeUVJSUFSQi8vLy8vd054UVlDQWdQd0RSMEVBSUFNYlJRUkFRd0FBZ0Q4Z0NKVWdDQ0FGUVFCSUd5RUpJQVJCZjBvTkFTQUdJQU5CZ0lDQS9BTnJja1VFUUNBSklBbVRJZ0FnQUpVUEN5QUpqQ0FKSUFaQkFVWWJEd3NDUUNBRVFYOUtEUUFDUUFKQUlBWU9BZ0FCQWdzZ0FDQUFreUlBSUFDVkR3dERBQUNBdnlFSkN3SjlJQUpCZ1lDQTZBUlBCRUFnQTBIMy8vLzdBMDBFUUNBSlE4cnlTWEdVUThyeVNYR1VJQWxEWUVLaURaUkRZRUtpRFpRZ0JVRUFTQnNQQ3lBRFFZaUFnUHdEVHdSQUlBbER5dkpKY1pSRHl2SkpjWlFnQ1VOZ1FxSU5sRU5nUXFJTmxDQUZRUUJLR3c4TElBaERBQUNBdjVJaUFFTUFxcmcvbENJSUlBQkRjS1hzTnBRZ0FDQUFsRU1BQUFBL0lBQWdBRU1BQUlDK2xFT3JxcW8ra3BTVGxFTTdxcmkvbEpJaUM1SzhRWUJnY2I0aUFDQUlrd3dCQ3lBSVF3QUFnRXVVdkNBRElBTkJnSUNBQkVraUF4c2lCRUgvLy84RGNTSUdRWUNBZ1B3RGNpRUNJQVJCRjNWQjZYNUJnWDhnQXh0cUlRTkJBQ0VFQWtBZ0JrSHlpUE1BU1EwQUlBWkIxK2YyQWtrRVFFRUJJUVFNQVFzZ0FrR0FnSUFFYXlFQ0lBTkJBV29oQXdzZ0JFRUNkQ0lHUWV6bEFtb3FBZ0FpRFNBQ3ZpSUxJQVpCM09VQ2Fpb0NBQ0lLa3lJTVF3QUFnRDhnQ2lBTGtwVWlEcFFpQ0x4QmdHQnh2aUlBSUFBZ0FKUWlEME1BQUVCQWtpQUlJQUNTSUE0Z0RDQUFJQUpCQVhWQmdPRC8vMzF4SUFSQkZYUnFRWUNBZ0lJQ2FyNGlESlNUSUFBZ0N5QU1JQXFUazVTVGxDSUxsQ0FJSUFpVUlnQWdBSlFnQUNBQUlBQWdBQ0FBUTBMeFV6NlVRMVV5YkQ2U2xFTUZvNHMra3BSRHE2cXFQcEtVUTdkdDJ6NlNsRU9hbVJrL2twU1NJZ3FTdkVHQVlIRytJZ0NVSWd3Z0N5QUFsQ0FJSUFvZ0FFTUFBRURBa2lBUGs1T1VraUlJa3J4QmdHQnh2aUlBUXdCQWRqK1VJZ29nQmtIazVRSnFLZ0lBSUFnZ0FDQU1rNU5EVHpoMlA1UWdBRVBHSS9hNGxKS1NJZ3VTa2lBRHNpSUlrcnhCZ0dCeHZpSUFJQWlUSUEyVElBcVRDeUVLSUFBZ0JVR0FZSEcrSWcyVUlnZ2dDeUFLa3lBQmxDQUJJQTJUSUFDVWtpSUFraUlCdkNJQ1FZR0FnSmdFVGcwQlFZQ0FnSmdFSVFRQ1FBSkFJQUpCZ0lDQW1BUkdCRUFnQUVNOHFqZ3praUFCSUFpVFhrRUJjdzBCREFRTElBQWdBU0FJazE5QkFYTWdBa0dBZ05pWWZFZHlSU0FDUWYvLy8vOEhjU0lFUVlHQTJKZ0VUM0lOQkVFQUlRTWdCRUdCZ0lENEEwa05BUXRCQUVHQWdJQUVJQVJCRjNaQi9nQnJkaUFDYWlJRlFmLy8vd054UVlDQWdBUnlRWllCSUFWQkYzWkIvd0Z4SWdScmRpSURheUFESUFKQkFFZ2JJUU1nQUNBSVFZQ0FnSHdnQkVIL0FHdDFJQVZ4dnBNaUNKSzhJUUlMSUFrQ2ZTQUNRWUNBZm5HK0lnRkRBSEl4UDVRaUNTQUJRNHkrdnpXVUlBQWdBU0FJazVOREdISXhQNVNTSWdpU0lnQWdBQ0FBSUFBZ0FKUWlBU0FCSUFFZ0FTQUJRMHk3TVRPVVF3N3EzYldTbEVOVnM0bzRrcFJEWVFzMnU1S1VRNnVxS2o2U2xKTWlBWlFnQVVNQUFBREFrcFVnQ0NBQUlBbVRreUlCSUFBZ0FaU1NrNU5EQUFDQVA1SWlBTHdnQTBFWGRHb2lBa0gvLy84RFRBUkFJQUFnQXhDSERnd0JDeUFDdmd1VUlRa0xJQWtQQ3lBSlE4cnlTWEdVUThyeVNYR1VEd3NnQ1VOZ1FxSU5sRU5nUXFJTmxBdWFBUUFDUUNBQlFZQUJUZ1JBSUFCREFBQUFmNVFoQUNBQlFmOEJTQVJBSUFGQi93QnJJUUVNQWdzZ0FFTUFBQUIvbENFQUlBRkIvUUlnQVVIOUFrZ2JRZjRCYXlFQkRBRUxJQUZCZ1g5S0RRQWdBRU1BQUlBQWxDRUFJQUZCZzM1S0JFQWdBVUgrQUdvaEFRd0JDeUFBUXdBQWdBQ1VJUUFnQVVHR2ZTQUJRWVo5U2h0Qi9BRnFJUUVMSUFBZ0FVRVhkRUdBZ0lEOEEycStsQXNoQVFKL0lBQVFpUUZCQVdvaUFSQTZJZ0pGQkVCQkFBOExJQUlnQUNBQkVEOEwrQUVCQVg4Q1FBSkFBa0FnQUNBQmMwRURjUTBBSUFKQkFFY2hBd0pBSUFKRklBRkJBM0ZGY2cwQUEwQWdBQ0FCTFFBQUlnTTZBQUFnQTBVTkJDQUFRUUZxSVFBZ0FVRUJhaUVCSUFKQkFXc2lBa0VBUnlFRElBSkZEUUVnQVVFRGNRMEFDd3NnQTBVTkFTQUJMUUFBUlEwQ0lBSkJCRWtOQUFOQUlBRW9BZ0FpQTBGL2N5QURRWUdDaEFocmNVR0FnWUtFZUhFTkFTQUFJQU0yQWdBZ0FFRUVhaUVBSUFGQkJHb2hBU0FDUVFScklnSkJBMHNOQUFzTElBSkZEUUFEUUNBQUlBRXRBQUFpQXpvQUFDQURSUTBDSUFCQkFXb2hBQ0FCUVFGcUlRRWdBa0VCYXlJQ0RRQUxDMEVBSVFJTElBQkJBQ0FDRURzYUM1a0ZBUVovQWtBQ1FBSkFRUWdRT2lJR0JFQUNRQ0FHUVFScVFRUkJBU0FBRUY5QkFVWUVRQ0FHS0FJRUlnUkJBRW9OQVF0QkFFRURRYXNzUVFBUU9Bd0NDeUFHSUFSQkFuUVFPaUlETmdJQUlBTUVRQU5BSUFFZ0JFWUVRRUVBSVFFQ1FBTkFJQUVnQkVZTkJ5QURJQUZCQW5ScUlnSW9BZ0JCQkdwQkJFRUJJQUFRWDBFQlJ3UkFRUUFoQWdOQUlBRWdBa1lFUUVFQUlRRURRQ0FCSUFSR0RRVWdBeUFCUVFKMGFpZ0NBQkF6SUFGQkFXb2hBUXdBQ3dBRklBTWdBa0VDZEdvb0FnQW9BZ0FRTXlBQ1FRRnFJUUlNQVFzQUN3QUxJQUlvQWdCQkNHcEJCRUVCSUFBUVgwRUJSd1JBUVFBaEFnTkFJQUVnQWtZRVFFRUFJUUVEUUNBQklBUkdEUVVnQXlBQlFRSjBhaWdDQUJBeklBRkJBV29oQVF3QUN3QUZJQU1nQWtFQ2RHb29BZ0FvQWdBUU15QUNRUUZxSVFJTUFRc0FDd0FMSUFJb0FnQkJER3BCQkVFQklBQVFYMEVCUndSQVFRQWhBZ05BSUFFZ0FrWUVRRUVBSVFFRFFDQUJJQVJHRFFVZ0F5QUJRUUowYWlnQ0FCQXpJQUZCQVdvaEFRd0FDd0FGSUFNZ0FrRUNkR29vQWdBb0FnQVFNeUFDUVFGcUlRSU1BUXNBQ3dBTElBSW9BZ0FpQlNBRktBSUlJQVVvQWdSc0VEb2lCVFlDQUNBRlJRMElJQUZCQVdvaEFTQUNLQUlBSWdVb0FnQkJBU0FGS0FJSUlBVW9BZ1JzSUFBUVh5QUNLQUlBSWdJb0FnZ2dBaWdDQkd4R0RRQUxRUUFoQWdOQUlBRWdBa1lFUUVFQUlRRURRQ0FCSUFSR0RRTWdBeUFCUVFKMGFpZ0NBQkF6SUFGQkFXb2hBUXdBQ3dBRklBTWdBa0VDZEdvb0FnQW9BZ0FRTXlBQ1FRRnFJUUlNQVFzQUN3QUxJQU1RTXd3RUN5QURJQUZCQW5ScVFSQVFPaUlDTmdJQUlBRkJBV29oQVNBQ0RRQUxEQVFMREFNTERBSUxJQVlRTTBFQUlRWUxJQUFRc3dFZ0JnOExRUUJCQTBHdERrRUFFRGhCQVJBQkFBdmFBUUVDZndKQUlBRkIvd0Z4SWdNRVFDQUFRUU54QkVBRFFDQUFMUUFBSWdKRklBSWdBVUgvQVhGR2NnMERJQUJCQVdvaUFFRURjUTBBQ3dzQ1FDQUFLQUlBSWdKQmYzTWdBa0dCZ29RSWEzRkJnSUdDaEhoeERRQWdBMEdCZ29RSWJDRURBMEFnQWlBRGN5SUNRWDl6SUFKQmdZS0VDR3R4UVlDQmdvUjRjUTBCSUFBb0FnUWhBaUFBUVFScUlRQWdBa0dCZ29RSWF5QUNRWDl6Y1VHQWdZS0VlSEZGRFFBTEN3TkFJQUFpQWkwQUFDSURCRUFnQWtFQmFpRUFJQU1nQVVIL0FYRkhEUUVMQ3lBQ0R3c2dBQkNKQVNBQWFnOExJQUFMeUFFQkFuOUJ2WU1CSVFFQ1FBSkFJQUJCdllNQmMwRURjUTBBQTBBZ0FDQUJMUUFBSWdJNkFBQWdBa1VOQWlBQVFRRnFJUUFnQVVFQmFpSUJRUU54RFFBTElBRW9BZ0FpQWtGL2N5QUNRWUdDaEFocmNVR0FnWUtFZUhFTkFBTkFJQUFnQWpZQ0FDQUJLQUlFSVFJZ0FFRUVhaUVBSUFGQkJHb2hBU0FDUVlHQ2hBaHJJQUpCZjNOeFFZQ0Jnb1I0Y1VVTkFBc0xJQUFnQVMwQUFDSUNPZ0FBSUFKRkRRQURRQ0FBSUFFdEFBRWlBam9BQVNBQVFRRnFJUUFnQVVFQmFpRUJJQUlOQUFzTEM0d0JBUU4vQWtBQ1FBTkFJQUFnQWtIdzFnSnFMUUFBUndSQVFkY0FJUU1nQWtFQmFpSUNRZGNBUncwQkRBSUxDeUFDSWdNTkFFSFExd0loQUF3QkMwSFExd0loQWdOQUlBSXRBQUFoQkNBQ1FRRnFJZ0FoQWlBRURRQWdBQ0VDSUFOQkFXc2lBdzBBQ3dzZ0FTZ0NGQ0lCQkg4Z0FTZ0NBQ0FCS0FJRUlBQVFwdzBGUVFBTElnRWdBQ0FCR3dzR0FFR1Vnd1FMSndFQmZ5TUFRUkJySWdFa0FDQUJJQUEyQWd3Z0FTZ0NEQ0VBRUtBSElBRkJFR29rQUNBQUN5b0JBWDhqQUVFUWF5SUFKQUFnQUVHdTBBSTJBZ3hCNk5ZQ1FRY2dBQ2dDREJBRklBQkJFR29rQUFzcUFRRi9Jd0JCRUdzaUFDUUFJQUJCajlBQ05nSU1RY0RXQWtFR0lBQW9BZ3dRQlNBQVFSQnFKQUFMS2dFQmZ5TUFRUkJySWdBa0FDQUFRYUhPQWpZQ0RFR1kxZ0pCQlNBQUtBSU1FQVVnQUVFUWFpUUFDOGdGQVFkL0l3QkI0QUJySWdFa0FDQUJRYVN5QVM4QUFEc0JXQ0FCUWFDeUFTZ0FBRFlDVkFKQUFuOENRQUpBSUFBUWlRRWdBVUhVQUdvUWlRRnFRUUZxRURvaUFnUkFJQUVnQURZQ1FDQUJJQUZCMUFCcU5nSkVJQUpCMHhjZ0FVRkFheEREQWlBQ1FjY2pFT2NDSVFVZ0FoQXpJQVZGQkVBZ0FTQUFOZ0lBSUFFZ0FVSFVBR28yQWdSQkFFRURRZFFvSUFFUU9FRUFEQVFMUVFnUU9pSUdSUTBFQWtBQ1FDQUdRUVJxUVFSQkFTQUZFRjlCQVVZRVFDQUdLQUlFSWdkQkFFb05BUXRCQUVFRFFhc3NRUUFRT0F3QkN5QUJJQWMyQWpCQkFFRUJRYkV5SUFGQk1Hb1FPQ0FHSUFkQkFuUVFPaUlETmdJQUlBTkZEUVVnQTBFUUVEb2lBallDQUNBQ1JRMEZJQVVRZ0E0aUJFVU5BeUFFS0FJRVFRRkhCRUFnQVNBQU5nSWdJQUVnQVVIVUFHbzJBaVJCQUVFQ1FlazNJQUZCSUdvUU9DQURLQUlBRURNZ0F4QXpJQVlRTXlBRUVETWdCUkN6QVVFQURBVUxJQU1vQWdBaUFDQUVLQUlJTmdJRUlBQWdCQ2dDRERZQ0NDQUFJQVFxQWhBNEFnd2dBQ0FFS0FJQU5nSUFJQVFRTXlBRlFRUWdCMEVDZEd0QkFoQ1NCMEVCSVFJQ1FBTkFJQUlnQjBjRVFDQUJRZHdBYWtFRVFRRWdCUkJmUVFGSEJFQkJBQ0VBQTBBZ0FDQUNSZzBFSUFNZ0FFRUNkR29pQkNnQ0FDZ0NBQkF6SUFRb0FnQVFNeUFBUVFGcUlRQU1BQXNBQ3lBRElBSkJBblJxSUFNb0FnQWdBU29DWEJDWURpSUFOZ0lBSUFBRVFDQUNRUUZxSVFJTUFnVkJBQ0VBQTBBZ0FDQUNSZzBFSUFNZ0FFRUNkR29pQkNnQ0FDZ0NBQkF6SUFRb0FnQVFNeUFBUVFGcUlRQU1BQXNBQ3dBTEN5QUZFTE1CSUFZTUJRc2dBeEF6Q3lBR0VETWdCUkN6QVVFQURBTUxEQU1MQUFzZ0FTQUFOZ0lRSUFFZ0FVSFVBR28yQWhSQkFFRUNRZWszSUFGQkVHb1FPQ0FES0FJQUVETWdBeEF6SUFZUU15QUZFSkVISUFVUWlnNExJUUlnQVVIZ0FHb2tBQ0FDRHd0QkFFRURRYTBPUVFBUU9FRUJFQUVBQ3lvQkFYOGpBRUVRYXlJQUpBQWdBRUdEemdJMkFneEI4TlVDUVFRZ0FDZ0NEQkFGSUFCQkVHb2tBQXNxQVFGL0l3QkJFR3NpQUNRQUlBQkJqOHdDTmdJTVFkalRBa0VBSUFBb0Fnd1FCU0FBUVJCcUpBQUxLZ0VCZnlNQVFSQnJJZ0FrQUNBQVFhRExBallDREVHZzdRTWdBQ2dDREVFSUVCSWdBRUVRYWlRQUN5b0JBWDhqQUVFUWF5SUFKQUFnQUVHYXl3STJBZ3hCbE8wRElBQW9BZ3hCQkJBU0lBQkJFR29rQUF1NUF3SVFmd0Y5SUFBb0FnUWhBeUFBS2dJTUlSSWdBQ2dDQ0NFQ1FSQVFPaUVHSUFLeUlBR1VJQktWRU1RQ0lRY2dBN0lnQVpRZ0VwVVF4QUloQXlBR0JFQUNRQ0FHSUFFNEFnd2dCaUFITmdJSUlBWWdBellDQkNBR0lBTWdCMndRT2lJSU5nSUFJQWhGRFFCQkFDRUNJQWRCQUNBSFFRQktHeUVPSUFOQkFDQURRUUJLR3lFUEEwQWdBaUFPUndSQUlBQW9BZ2doQkNBQUtnSU1JaElnQWtFQmFpSUhzcFFnQVpVUXhBSWhBeUFTSUFLeWxDQUJsUkRFQWlJTElBUWdBeUFESUFSS0d5SUNJQUlnQzBnYklSQkJBQ0VGQTBBZ0JTQVBSZ1JBSUFjaEFnd0RCVUVBSVFKQkFDQUFLQUlFSWd3Z0FDb0NEQ0lTSUFWQkFXb2lBN0tVSUFHVkVNUUNJZ1FnQkNBTVNoc2lCQ0FTSUFXeWxDQUJsUkRFQWlJTmF5QUVJQTFJR3lFUklBc2hDVUVBSVFvRFFDQUpJQkJHUlFSQUlBSWdFV29oQkNBQUtBSUFJQWtnREd3Z0RXcHFJUVVEUUNBQ0lBUkdSUVJBSUFKQkFXb2hBaUFLSUFVdEFBQnFJUW9nQlVFQmFpRUZEQUVMQ3lBSlFRRnFJUWtnQkNFQ0RBRUxDeUFJSUFvZ0FtMDZBQUFnQ0VFQmFpRUlJQU1oQlF3QkN3QUxBQXNMSUFZUEN3dEJBRUVEUWEwT1FRQVFPRUVCRUFFQUN5NEJBWDhqQUVFUWF5SUFKQUFnQUVHTXl3STJBZ3hCaU8wRElBQW9BZ3hCQkVFQVFYOFFCeUFBUVJCcUpBQUxOZ0VCZnlNQVFSQnJJZ0FrQUNBQVFZZkxBallDREVIODdBTWdBQ2dDREVFRVFZQ0FnSUI0UWYvLy8vOEhFQWNnQUVFUWFpUUFDeTRCQVg4akFFRVFheUlBSkFBZ0FFSDZ5Z0kyQWd4QjhPd0RJQUFvQWd4QkJFRUFRWDhRQnlBQVFSQnFKQUFMTmdFQmZ5TUFRUkJySWdBa0FDQUFRZmJLQWpZQ0RFSGs3QU1nQUNnQ0RFRUVRWUNBZ0lCNFFmLy8vLzhIRUFjZ0FFRVFhaVFBQ3pBQkFYOGpBRUVRYXlJQUpBQWdBRUhueWdJMkFneEIyT3dESUFBb0FneEJBa0VBUWYvL0F4QUhJQUJCRUdva0FBc3lBUUYvSXdCQkVHc2lBQ1FBSUFCQjRjb0NOZ0lNUWN6c0F5QUFLQUlNUVFKQmdJQitRZi8vQVJBSElBQkJFR29rQUFzdkFRRi9Jd0JCRUdzaUFDUUFJQUJCMDhvQ05nSU1RYlRzQXlBQUtBSU1RUUZCQUVIL0FSQUhJQUJCRUdva0FBc3dBUUYvSXdCQkVHc2lBQ1FBSUFCQng4b0NOZ0lNUWNEc0F5QUFLQUlNUVFGQmdIOUIvd0FRQnlBQVFSQnFKQUFMTUFFQmZ5TUFRUkJySWdBa0FDQUFRY0xLQWpZQ0RFR283QU1nQUNnQ0RFRUJRWUIvUWY4QUVBY2dBRUVRYWlRQUM2c0RBUVYvSXdCQkVHc2lCQ1FBSUFRZ0FqWUNEQUpBSUFGRkRRQkJxTzhES0FJQUlBQktEUUFnQVMwQUFFVU5BQ0FFSUFRb0Fnd2lBellDQ0VFQUlRSkJBRUVBSUFFZ0F4Q1lBaUlGUlEwQUFuOGdBRUVEVFFSQUlBQkJBblJCa0xJQmFpZ0NBQkNKQVVFRGFpRUNDeUFDSUFWcUlnWkJBV29pQndzUU9pRURJQUlFUUNBRUlBQkJBblJCa0xJQmFpZ0NBRFlDQUNBRElBSkJBV3BCa0N3Z0JCQ3NCQm9MSUFJZ0Eyb2dCVUVCYWlBQklBUW9BZ3dRbUFJYUFrQkJ3SUVFS0FJQUlnQUVRRUhFZ1FRb0FnQkZCRUFnQXlBQUVRQUFEQUlMUWNpQkJDZ0NBRUhnOFFOSEJFQkJ6SUVFS0FJQUlnSkZEUUpCMUlFRUtBSUFJZ0JCZ0NCQkFFSFFnUVF0QUFBYklnRlBEUUlnQUNBQ2FpRUNJQUVnQUd0QkJHc2dCazhFUUNBQ0lBTWdCeEN3QkVIVWdRUWdBQ0FHYWpZQ0FBd0RDeUFDUWE3Y3VBRTJBQUJCMUlFRUlBRTJBZ0FNQWd0QjFJRUVLQUlBQkVCQnpJRUVLQUlBUWNDQkJDZ0NBQkVBQUVIVWdRUkJBRFlDQUFzZ0EwSEFnUVFvQWdBUkFBQU1BUXRCeklJREtBSUFJUUFnQTBFQklBTVFpUUVnQUJEU0FSb0xJQU1RTXdzZ0JFRVFhaVFBQzVVVEFoRi9BWHdnQVVFQUlBRkJBRW9iSVFrZ0JDZ0NBQ0lJSUFKQkFXc2lFQ0FCYkVFQmRHb2hCaUFJSVFjRFFDQUZJQWxHUlFSQUlBWkJBRHNCQUNBSFFRQTdBUUFnQlVFQmFpRUZJQWRCQW1vaEJ5QUdRUUpxSVFZTUFRc0xJQUpCQUNBQ1FRQktHeUVMSUFnZ0FVRUJheUlLUVFGMGFpRUdRUUFoQlNBSUlRY0RRQ0FGSUF0R1JRUkFJQVpCQURzQkFDQUhRUUE3QVFBZ0JVRUJhaUVGSUFZZ0FVRUJkQ0lKYWlFR0lBY2dDV29oQnd3QkN3c2dFRUVCSUJCQkFVb2JJUklnQkVHUWdNZ0FhaUVKSUFNZ0FVRUJhaUlGYWlFUElBQWdCV29oRGlBRUtBSUVJQVZxSVFBZ0NrRUJJQXBCQVVvYkloTkJBV3NoRVNBSUlBVkJBWFJxSVFkQkFDQUJhMEVCZENFVVFRQWhDMEVCSVF3Q1FBTkFJQXdnRWtjRVFDQU9JQkZxSVJVZ0R5QVJhaUVRUVFFaEJnTkFBa0FDUUFKQUlBWWdFMGNFUUNBT0xRQUFJQTh0QUFCTEJFQWdBRUgvQVRvQUFDQUhJQlJxSWdvdkFRQWlCVUVRZEVFUWRTSURRUUZPQkVBZ0J5QURPd0VBSUFRZ0JVRWNiR29pQlVHTWdOQUFhaUFNTmdJQUlBVkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBeUFES0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQXlBREtBSUFJQXhxTmdJQURBVUxJQXBCQW1zdkFRQWlDRUVRZEVFUWRTRURJQW91QVFJaUNrRUJUZ1JBSUFOQkFVNEVRQ0FFUVpDQXlBQnFJZ1VnQ2tFQ2RHcEJCR3NvQWdBaUF5QUlRUUowSUFWcVFRUnJLQUlBSWdoS0JFQWdCeUFJT3dFQVFRQWhEU0FMUVFBZ0MwRUFTaHNoQ2lBSklRVURRQ0FLSUExR0JFQWdDQ0VEREFnTElBTWdCU2dDQUVZRVFDQUZJQWcyQWdBTElBMUJBV29oRFNBRlFRUnFJUVVNQUFzQUN5QUhJQU03QVFBZ0F5QUlUZzBGUVFBaERTQUxRUUFnQzBFQVNoc2hDaUFKSVFVRFFDQUtJQTFHRFFZZ0NDQUZLQUlBUmdSQUlBVWdBellDQUFzZ0RVRUJhaUVOSUFWQkJHb2hCUXdBQ3dBTElBZEJBbXN1QVFBaUNFRUJUZ1JBSUFSQmtJRElBR29pQlNBS1FRSjBha0VFYXlnQ0FDSURJQWhCLy84RGNVRUNkQ0FGYWtFRWF5Z0NBQ0lJU2dSQUlBY2dDRHNCQUVFQUlRMGdDMEVBSUF0QkFFb2JJUW9nQ1NFRkEwQWdDaUFOUmdSQUlBZ2hBd3dIQ3lBRElBVW9BZ0JHQkVBZ0JTQUlOZ0lBQ3lBTlFRRnFJUTBnQlVFRWFpRUZEQUFMQUFzZ0J5QURPd0VBSUFNZ0NFNE5CRUVBSVEwZ0MwRUFJQXRCQUVvYklRb2dDU0VGQTBBZ0NpQU5SZzBGSUFnZ0JTZ0NBRVlFUUNBRklBTTJBZ0FMSUExQkFXb2hEU0FGUVFScUlRVU1BQXNBQ3lBSElBbzdBUUFnQkNBS1FRZHNRUUowYWlJRlFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUZRZmovendCcUlnTWdBeWdDQUNBR2FqWUNBQ0FGUWZ6L3p3QnFJZ01nQXlnQ0FDQU1hallDQUNBR0lBVkJnSURRQUdvaUF5Z0NBRWdFUUNBRElBWTJBZ0FMSUFWQmpJRFFBR29nRERZQ0FBd0ZDeUFEUVFGT0JFQWdCeUFET3dFQUlBUWdDRUVIYkVFQ2RHb2lCVUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlESUFNb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJRElBTW9BZ0FnREdvMkFnQWdCaUFGUVlTQTBBQnFJZ01vQWdCS0JFQWdBeUFHTmdJQUN5QUZRWXlBMEFCcUlBdzJBZ0FNQlFzZ0IwRUNheThCQUNJRlFSQjBRUkIxSWdOQkFVNEVRQ0FISUFNN0FRQWdCQ0FGUVJ4c2FpSUZRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FGUWZqL3p3QnFJZ01nQXlnQ0FDQUdhallDQUNBRlFmei96d0JxSWdNZ0F5Z0NBQ0FNYWpZQ0FDQUZRWVNBMEFCcUlnTW9BZ0FnQms0TkJTQURJQVkyQWdBTUJRc2dDMEdBZ0FKT0JFQkJBRUVEUWVBS1FRQVFPRUYvSVE0TUNRc2dCeUFMUVFGcUlnTTdBUUFnQkNBTFFRSjBha0dRZ01nQWFpQURRUkIwUVJCMU5nSUFJQVFnQzBFY2JHb2lCVUdVZ05BQWFpQUdOZ0lBSUFWQmtJRFFBR3BCQVRZQ0FDQUZRWmlBMEFCcUlBdzJBZ0FnQlVHY2dOQUFhaUFHTmdJQUlBVkJvSURRQUdvZ0JqWUNBQ0FGUWFTQTBBQnFJQXcyQWdBZ0JVR29nTkFBYWlBTU5nSUFJQU1oQ3d3RUN5QUhRUUE3QVFBZ0FFRUFPZ0FBREFNTElBQkJBbW9oQUNBSFFRUnFJUWNnRUVFQ2FpRVBJQlZCQW1vaERpQU1RUUZxSVF3TUJRc2dCQ0FEUVJCMFFSQjFRUnhzYWlJRlFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUZRZmovendCcUlnTWdBeWdDQUNBR2FqWUNBQ0FGUWZ6L3p3QnFJZ01nQXlnQ0FDQU1hallDQUF3QkN5QUVJQU5CRUhSQkVIVkJIR3hxSWdWQmpJRFFBR29nRERZQ0FDQUZRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FGUWZqL3p3QnFJZ01nQXlnQ0FDQUdhallDQUNBRlFmei96d0JxSWdNZ0F5Z0NBQ0FNYWpZQ0FBc2dBRUVCYWlFQUlBZEJBbW9oQnlBUFFRRnFJUThnRGtFQmFpRU9JQVpCQVdvaEJnd0FDd0FMQ3lBTFFRQWdDMEVBU2hzaUNFRUJhaUVEUVFFaEJVRUJJUWNEUUNBRElBVkdSUVJBQWtBZ0JTQUpLQUlBSWdCR0JFQWdCeUlHUVFGcUlRY01BUXNnQUVFQ2RDQUVha0dNZ01nQWFpZ0NBQ0VHQ3lBSklBWTJBZ0FnQ1VFRWFpRUpJQVZCQVdvaEJRd0JDd3NnQkNBSFFRRnJJZ0EyQWdnZ0FFVUVRRUVBRHd0QkFDRUdJQVJCREdwQkFDQUFRUUowRURzYUlBUkJrSUFvYWtFQUlBQkJCSFFRT3hvZ0FFRUFJQUJCQUVvYklRQWdCRUdNZ0FocUlRbEJBQ0VGQTBBZ0FDQUZSZ1JBSUFSQmtJQW9haUVKQTBBZ0JpQUlSZ1JBUVFBaERpQUVLQUlJSWdCQkFDQUFRUUJLR3lFQ0lBUkJrSUFvYWlFRFFRQWhCUU5BSUFJZ0JVWU5CU0FESUFWQkJIUWlBV29pQUNBQUt3TUFJQVFnQlVFQ2RHb29BZ3kzSWhhak9RTUFJQU1nQVVFSWNtb2lBQ0FBS3dNQUlCYWpPUU1BSUFWQkFXb2hCUXdBQ3dBTElBUWdCQ0FHUVFKMGFrR1FnTWdBYWlnQ0FFRUJheUlCUVFKMElnSnFJZ0JCREdvZ0FDZ0NEQ0FFSUFaQkIyeEJBblJxSWdWQmtJRFFBR29vQWdCcU5nSUFJQWtnQVVFRWRDSURhaUlBSUFBckF3QWdCVUdVZ05BQWFpZ0NBTGVnT1FNQUlBa2dBMEVJY21vaUFDQUFLd01BSUFWQm1JRFFBR29vQWdDM29Ea0RBQ0FGUVp5QTBBQnFLQUlBSWdFZ0F5QUVha0dNZ0FocUlnQW9BZ0JJQkVBZ0FDQUJOZ0lBQ3lBRlFhQ0EwQUJxS0FJQUlnRWdCQ0FDUVFKMElnSkJCSEpxUVl5QUNHb2lBQ2dDQUVvRVFDQUFJQUUyQWdBTElBVkJwSURRQUdvb0FnQWlBU0FFSUFKQkNISnFRWXlBQ0dvaUFDZ0NBRWdFUUNBQUlBRTJBZ0FMSUFWQnFJRFFBR29vQWdBaUFTQUVJQUpCREhKcVFZeUFDR29pQUNnQ0FFb0VRQ0FBSUFFMkFnQUxJQVpCQVdvaEJnd0FDd0FGSUFrZ0JVRUVkQ0lEYWlBQk5nSUFJQWtnQTBFRWNtcEJBRFlDQUNBSklBTkJDSEpxSUFJMkFnQWdDU0FEUVF4eWFrRUFOZ0lBSUFWQkFXb2hCUXdCQ3dBTEFBc2dEZ3NxQVFGL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENBQktBSU1FTEVFRUlnT0lRQWdBVUVRYWlRQUlBQUxzd1lCRDM4Z0FDZ0MxQU1oQlNBQUtBS1lBZ1JBSUFVZ0JTZ0NPQ0lDQkg4Z0FnVWdBQkRxQWlBRktBSTRDMEVCYXpZQ09Bc0NRQUpBSUFVb0FoUkJmMFlOQUNBQUtBTHdBa0VCU0EwQUlBQW9BckFESVE0Z0JVRzhBV29oRHdOQUlBRWdDa0VDZENJQ2FpZ0NBQ0VOQWtBZ0FDQUZJQUFnQUNBQ2FpZ0M5QUpCQW5RaUFtb29BdGdDSWdzb0FoUWlERUVDZEdvaUVFRThhaWdDQUNBQ0lBVnFJZ1lpQ0VFb2FpZ0NBR29pQkJCZFJRUkFJQWhCQURZQ0tDQUdLQUlZSVFJTUFRdEJBQ0VIUVFBaEFnSkFJQUFnQkNBQUlBUkJBV29RWFNJSmFrRUNhaUlFRUYwaUEwVU5BQ0FESVFJZ0FDQVFLQUk4UVJScUlnUVFYVVVOQUFOQUlBSkJBWFFpQWtHQWdBSkdCRUFNQmdzZ0FDQUVRUUZxSWdRUVhRMEFDd3NDUUNBQ1FRRWdBQ0FNYWlJTUxRRG9BWFJCQVhWSURRQWdDVUVDZENFRFFRRWdEQzBBK0FGMFFRRjFJQUpJQkVBZ0EwRU1haUVIREFFTElBTkJCR29oQndzZ0NDQUhOZ0lvSUFKQkFYVWlBd1JBSUFSQkRtb2hCQU5BSUFOQkFDQUFJQVFRWFJzZ0FuSWhBaUFEUVFGMUlnY2hBeUFIRFFBTEN5QUdJQVlvQWhnZ0FrRi9jeUFDUVFGcUlBa2JhaUlDTmdJWUN5QU5JQUk3QVFBQ1FDQUFLQUswQTBVTkFDQUFJQXNvQWhnaUFtb2hDQ0FGSUFKQkFuUnFJUWRCQUNFQ0EwQWdBQ0FIS0FKOElBSWlCRUVEYkdvaUF4QmREUUVDUUFOQUlBUkJBV29oQWlBQUlBTkJBV29RWFEwQklBTkJBMm9oQXlBQ0lnUWdBQ2dDdEFOSURRQUxEQVVMSUFBZ0R4QmRJUWtDUUNBQUlBTkJBbW9pQmhCZElnTkZCRUJCQUNFRERBRUxBa0FnQUNBR0VGMUZEUUFnQTBFQmRDRURJQUFnQnlnQ2ZFRzlBVUhaQVNBRUlBZ3RBSWdDU0J0cUlnWVFYVVVOQUFOQUlBTkJBWFFpQTBHQWdBSkdCRUFNQ0FzZ0FDQUdRUUZxSWdZUVhRMEFDd3NnQTBFQmRTSUVSUTBBSUFaQkRtb2hCZ05BSUFSQkFDQUFJQVlRWFJzZ0EzSWhBeUFFUVFGMUlnc2hCQ0FMRFFBTEN5QU5JQTRnQWtFQ2RHb29BZ0JCQVhScUlBTkJmM01nQTBFQmFpQUpHenNCQUNBQ0lBQW9BclFEU0EwQUN3c2dDa0VCYWlJS0lBQW9BdkFDU0EwQUN3dEJBUThMSUFBb0FnQWlBVUgxQURZQ0ZDQUFRWDhnQVNnQ0JCRUNBQ0FGUVg4MkFoUkJBUXVQQXdFS2Z5QUFLQUxVQXlFRElBQW9BcGdDQkVBZ0F5QURLQUk0SWdJRWZ5QUNCU0FBRU9vQ0lBTW9BamdMUVFGck5nSTRDd0pBSUFNb0FoUkJmMFlOQUVGL0lBQW9BcWdESWdKMElRVkJBU0FDZENFR0lBQW9BcUFESVFRZ0FTZ0NBQ0VISUFBb0FyQURJUWdnQUNnQzJBSW9BaGdoQWdKQUEwQWdCeUFJSUFSQkFuUnFLQUlBUVFGMGFpOEJBQTBCSUFSQkFXc2lCQTBBQzBFQUlRUUxJQU5CdkFGcUlRb2dBQ2dDbkFOQkFXc2hBU0FESUFKQkFuUnFJUXNEUUNBTEtBSjhJQUZCQTJ4cUlRSWdBU0FFVGdSQUlBQWdBaEJkRFFJTEFrQUNmd0pBQTBBZ0J5QUlJQUZCQVdvaUFVRUNkR29vQWdCQkFYUnFJZ2t2QVFBRVFDQUFJQUpCQW1vUVhVVU5CQ0FKTGdFQUlnSkJmMG9OQWlBQ0lBVnFEQU1MSUFBZ0FrRUJhaEJkQkVBZ0JTQUdJQUFnQ2hCZEd3d0RDeUFDUVFOcUlRSWdBU0FBS0FLZ0EwZ05BQXNnQUNnQ0FDSUJRZlVBTmdJVUlBQkJmeUFCS0FJRUVRSUFJQU5CZnpZQ0ZFRUJEd3NnQWlBR2Fnc2hBaUFKSUFJN0FRQUxJQUVnQUNnQ29BTklEUUFMQzBFQkM0MEJBUVIvSUFBb0F0UURJUUlnQUNnQ21BSUVRQ0FDSUFJb0FqZ2lBd1IvSUFNRklBQVE2Z0lnQWlnQ09BdEJBV3MyQWpnTElBQW9BdkFDUVFGT0JFQWdBa0c4QVdvaEEwRUJJQUFvQXFnRGRDRUVRUUFoQWdOQUlBQWdBeEJkQkVBZ0FTQUNRUUowYWlnQ0FDSUZJQVV2QVFBZ0JISTdBUUFMSUFKQkFXb2lBaUFBS0FMd0FrZ05BQXNMUVFFTHhBTUJDMzhnQUNnQzFBTWhBeUFBS0FLWUFnUkFJQU1nQXlnQ09DSUVCSDhnQkFVZ0FCRHFBaUFES0FJNEMwRUJhellDT0FzQ1FBSkFJQU1vQWhSQmYwWU5BQ0FEUWJ3QmFpRUhJQUFvQXB3RFFRRnJJUVFnQUNBQUtBTFlBaWdDR0NJQ2FpRUlJQU1nQWtFQ2RHb2hCaUFCS0FJQUlRa2dBQ2dDc0FNaENnTkFJQUFnQmlnQ2ZDQUVJZ0pCQTJ4cUlnRVFYUTBCQWtBRFFDQUNRUUZxSVFRZ0FDQUJRUUZxRUYwTkFTQUJRUU5xSVFFZ0JDSUNJQUFvQXFBRFNBMEFDd3dEQ3lBQUlBY1FYU0VMQWtBZ0FDQUJRUUpxSWdVUVhTSUJSUVJBUVFBaEFRd0JDd0pBSUFBZ0JSQmRSUTBBSUFGQkFYUWhBU0FBSUFZb0FueEJ2UUZCMlFFZ0FpQUlMUUNJQWtnYmFpSUZFRjFGRFFBRFFDQUJRUUYwSWdGQmdJQUNSZ1JBREFZTElBQWdCVUVCYWlJRkVGME5BQXNMSUFGQkFYVWlBa1VOQUNBRlFRNXFJUXdEUUNBQ1FRQWdBQ0FNRUYwYklBRnlJUUVnQWtFQmRTSUZJUUlnQlEwQUN3c2dDU0FLSUFSQkFuUnFLQUlBUVFGMGFpQUJRWDl6SUFGQkFXb2dDeHNnQUNnQ3FBTjBPd0VBSUFRZ0FDZ0NvQU5JRFFBTEMwRUJEd3NnQUNnQ0FDSUJRZlVBTmdJVUlBQkJmeUFCS0FJRUVRSUFJQU5CZnpZQ0ZFRUJDK1VEQVF4L0lBQW9BdFFESVFRZ0FDZ0NtQUlFUUNBRUlBUW9BamdpQWdSL0lBSUZJQUFRNmdJZ0JDZ0NPQXRCQVdzMkFqZ0xBa0FnQkNnQ0ZFRi9SZzBBSUFBb0F2QUNRUUZJRFFBRFFDQUJJQWhCQW5RaUEyb29BZ0FoRFFKQUlBQWdCQ0FBSUFBZ0Eyb29BdlFDUVFKMElnTnFLQUxZQWlnQ0ZDSUdRUUowYWlJRlFUeHFLQUlBSUFNZ0JHb2lDU0lMUVNocUtBSUFhaUlERUYxRkJFQWdDMEVBTmdJb0lBa29BaGdoQWd3QkMwRUFJUXBCQUNFQ0FrQWdBQ0FESUFBZ0EwRUJhaEJkSWd4cVFRSnFJZ2NRWFNJRFJRMEFJQU1oQWlBQUlBVW9BanhCRkdvaUJ4QmRSUTBBQTBBZ0FrRUJkQ0lDUVlDQUFrWUVRQ0FBS0FJQUlnRkI5UUEyQWhRZ0FFRi9JQUVvQWdRUkFnQWdCRUYvTmdJVVFRRVBDeUFBSUFkQkFXb2lCeEJkRFFBTEN3SkFJQUpCQVNBQUlBWnFJZ010QU9nQmRFRUJkVWdOQUNBTVFRSjBJUVZCQVNBRExRRDRBWFJCQVhVZ0FrZ0VRQ0FGUVF4cUlRb01BUXNnQlVFRWFpRUtDeUFMSUFvMkFpZ2dBa0VCZFNJR0JFQWdCMEVPYWlFRkEwQWdCa0VBSUFBZ0JSQmRHeUFDY2lFQ0lBWkJBWFVpQXlFR0lBTU5BQXNMSUFrZ0NTZ0NHQ0FDUVg5eklBSkJBV29nREJ0cUlnSTJBaGdMSUEwZ0FpQUFLQUtvQTNRN0FRQWdDRUVCYWlJSUlBQW9BdkFDU0EwQUN3dEJBUXVqQ0FFSGZ5QUFLQUtjQXlFQ0lBQW9BdFFESVFNQ1FDQUFLQUxnQVFSQUlBQW9BcUFESVFFQ1FBSkFBa0FnQWtVRVFDQUJSUTBCREFJTElBRWdBa2dOQVNBQklBQW9BclFEU2cwQklBQW9BdFFDUVFGSERRRUxBa0FnQUNnQ3BBTWlBVVVFUUNBQUtBS29BeUVFREFFTElBRkJBV3NpQkNBQUtBS29BMGNOQVFzZ0JFRU9TQTBCQ3lBQUtBSUFJZ0VnQWpZQ0dDQUJRUkUyQWhRZ0FDZ0NBQ0FBS0FLZ0F6WUNIQ0FBS0FJQUlBQW9BcVFETmdJZ0lBQW9BZ0FnQUNnQ3FBTTJBaVFnQUNBQUtBSUFLQUlBRVFBQUN5QUFLQUxVQWlJQ1FRRk9CRUJCQUNFRUEwQWdBQ0FFUVFKMGFpZ0MyQUlvQWdRaEJpQUFLQUtnQVNFRkFuOUJBQ0FBS0FLY0F5SUJSUTBBR2lBQklBVWdCa0VJZEdvb0FnQkJmMG9OQUJvZ0FDZ0NBQ0lCSUFZMkFoZ2dBVUgyQURZQ0ZDQUFLQUlBUVFBMkFod2dBRUYvSUFBb0FnQW9BZ1FSQWdBZ0FDZ0NuQU1MSWdJZ0FDZ0NvQU5NQkVBRFFDQUFLQUtrQXlBRklBWkJDSFJxSUFKQkFuUnFJZ2NvQWdBaUFVRUFJQUZCQUVvYlJ3UkFJQUFvQWdBaUFTQUdOZ0lZSUFGQjlnQTJBaFFnQUNnQ0FDQUNOZ0ljSUFCQmZ5QUFLQUlBS0FJRUVRSUFDeUFISUFBb0FxZ0ROZ0lBSUFJZ0FDZ0NvQU5JSVFFZ0FrRUJhaUVDSUFFTkFBc0xJQVJCQVdvaUJDQUFLQUxVQWlJQ1NBMEFDd3NnQUNnQ25BTWhBU0FBS0FLa0EwVUVRQ0FCUlFSQUlBTkI3QUUyQWdRTUF3c2dBMEh0QVRZQ0JBd0NDeUFCUlFSQUlBTkI3Z0UyQWdRTUFnc2dBMEh2QVRZQ0JBd0JDd0pBQWtBZ0FnMEFJQUFvQXFRRERRQWdBQ2dDcUFNTkFDQUFLQUtnQXlJQlFUOUtEUUVnQVNBQUtBSzBBMFlOQVFzZ0FDZ0NBQ0lCUWYwQU5nSVVJQUJCZnlBQktBSUVFUUlBQ3lBRFFmQUJOZ0lFSUFBb0F0UUNJUUlMSUFKQkFVNEVRRUVBSVFRRFFDQUFJQVJCQW5RaUIyb29BdGdDSVFVQ1FBSkFJQUFvQXVBQkJFQWdBQ2dDbkFNTkFTQUFLQUtrQXcwQ0N5QUZLQUlVSWdKQkVFOEVRQ0FBS0FJQUlnRWdBallDR0NBQlFUSTJBaFFnQUNBQUtBSUFLQUlBRVFBQUN5QURJQUpCQW5ScUlnRkJQR29vQWdBaUFrVUVRQ0FCSUFCQkFVSEFBQ0FBS0FJRUtBSUFFUVFBSWdJMkFqd0xJQUpDQURjQUFDQUNRZ0EzQURnZ0FrSUFOd0F3SUFKQ0FEY0FLQ0FDUWdBM0FDQWdBa0lBTndBWUlBSkNBRGNBRUNBQ1FnQTNBQWdnQXlBSGFpSUJRUUEyQWlnZ0FVRUFOZ0lZSUFBb0F1QUJSUVJBSUFBb0FyUUREUUVNQWdzZ0FDZ0NuQU5GRFFFTElBVW9BaGdpQWtFUVR3UkFJQUFvQWdBaUFTQUNOZ0lZSUFGQk1qWUNGQ0FBSUFBb0FnQW9BZ0FSQUFBTElBTWdBa0VDZEdvaUFVSDhBR29vQWdBaUFrVUVRQ0FCSUFCQkFVR0FBaUFBS0FJRUtBSUFFUVFBSWdJMkFud0xJQUpCQUVHQUFoQTdHZ3NnQkVFQmFpSUVJQUFvQXRRQ1NBMEFDd3NnQTBGd05nSVVJQU5DQURjQ0RDQURJQUFvQXBnQ05nSTRDNXNCQVFKL0lBQWdBRUVCUWNBQklBQW9BZ1FvQWdBUkJBQWlBVFlDMUFNZ0FVSHFBVFlDQ0NBQlFlc0JOZ0lBSUFGQlBHcEJBRUdBQVJBN0dpQUJRZkVBT2dDOEFRSkFJQUFvQXVBQlJRMEFJQUFnQUVFQklBQW9BaVJCQ0hRZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0tnQVNBQUtBSWtRUUZJRFFBRFFDQUJRZjhCUVlBQ0VEdEJnQUpxSVFFZ0FrRUJhaUlDSUFBb0FpUklEUUFMQ3d1bEFnRUlmMEh3ayt2Y0F5QUNiaUVFSUFBb0FnUWhCaUFDUWZHVDY5d0RUd1JBSUFBb0FnQWlCVUhJQURZQ0ZDQUFJQVVvQWdBUkFBQUxJQVlnQkNBRElBTWdCRW9iSWdRMkFsQWdBQ0FCSUFOQkFuUVFuQUloQ1NBREJFQkJBQ0VGQTBBZ0FDQUJJQVFnQXlBRmF5SUdJQVFnQmtrYklnUWdBbXdRc2dRaEJ3SkFJQVJGRFFBZ0JDRUdJQVJCQTNFaUNBUkFBMEFnQ1NBRlFRSjBhaUFITmdJQUlBWkJBV3NoQmlBQ0lBZHFJUWNnQlVFQmFpRUZJQWhCQVdzaUNBMEFDd3NnQkVFQmEwRURTUTBBQTBBZ0NTQUZRUUowYWlJSUlBYzJBZ0FnQ0NBQ0lBZHFJZ2NnQW1vaUNpQUNhaUlMTmdJTUlBZ2dDallDQ0NBSUlBYzJBZ1FnQlVFRWFpRUZJQUlnQzJvaEJ5QUdRUVJySWdZTkFBc0xJQU1nQlVzTkFBc0xJQWtMc1FJQkNIOUI4SlByM0FNZ0FrRUhkQ0lLYmlFRUlBQW9BZ1FoQmlBS1FmR1Q2OXdEVHdSQUlBQW9BZ0FpQlVISUFEWUNGQ0FBSUFVb0FnQVJBQUFMSUFZZ0JDQURJQU1nQkVvYklnUTJBbEFnQUNBQklBTkJBblFRbkFJaENTQURCRUJCQUNFRklBSkJCM1FoQ0FOQUlBQWdBU0FLSUFRZ0F5QUZheUlDSUFJZ0JFc2JJZ1JzRUxJRUlRSUNRQ0FFUlEwQUlBUWhCaUFFUVFOeElnY0VRQU5BSUFrZ0JVRUNkR29nQWpZQ0FDQUdRUUZySVFZZ0JVRUJhaUVGSUFJZ0NHb2hBaUFIUVFGcklnY05BQXNMSUFSQkFXdEJBMGtOQUFOQUlBa2dCVUVDZEdvaUJ5QUNOZ0lBSUFjZ0FpQUlhaUlDSUFocUlnczJBZ2dnQnlBQ05nSUVJQWNnQ0NBTGFpSUNOZ0lNSUFJZ0NHb2hBaUFGUVFScUlRVWdCa0VFYXlJR0RRQUxDeUFESUFWTERRQUxDeUFKQzNvQkFuOGdBQ2dDQkNFR0lBRkJBVWNFUUNBQUtBSUFJZ2NnQVRZQ0dDQUhRUTgyQWhRZ0FDQUFLQUlBS0FJQUVRQUFDeUFBSUFGQmdBRVFuQUlpQUVFQU5nSW9JQUFnQWpZQ0lDQUFJQVUyQWd3Z0FDQUROZ0lJSUFBZ0JEWUNCQ0FBUVFBMkFnQWdBQ0FHS0FKRU5nSXNJQVlnQURZQ1JDQUFDM29CQW44Z0FDZ0NCQ0VHSUFGQkFVY0VRQ0FBS0FJQUlnY2dBVFlDR0NBSFFRODJBaFFnQUNBQUtBSUFLQUlBRVFBQUN5QUFJQUZCZ0FFUW5BSWlBRUVBTmdJb0lBQWdBallDSUNBQUlBVTJBZ3dnQUNBRE5nSUlJQUFnQkRZQ0JDQUFRUUEyQWdBZ0FDQUdLQUpJTmdJc0lBWWdBRFlDU0NBQUM5RUtBUTEvSUFBb0FnUWlDeWdDUkNJREJFQURRQ0FES0FJQVJRUkFJQU1vQWdnaUJDQURLQUlFYkNBQmFpRUJJQVFnQXlnQ0RHd2dBbW9oQWdzZ0F5Z0NMQ0lERFFBTEN5QUxLQUpJSWdNRVFBTkFJQU1vQWdCRkJFQWdBeWdDQ0NJRUlBTW9BZ1JzUVFkMElBRnFJUUVnQXlnQ0RDQUViRUVIZENBQ2FpRUNDeUFES0FJc0lnTU5BQXNMQWtBZ0FrRUJTQTBBUVlDVTY5d0RJUXdDZnlBTEtBSk1HaUFCSUFFaUJFb0xCRUFnQkNBQ2JTSUJRUUVnQVVFQlNoc2hEQXNnQ3lnQ1JDSUVCRUFEUUNBRUtBSUFSUVJBQWtBZ0RDQUVLQUlFSWdWQkFXc2dCQ2dDRENJQmJrRUJhazRFUUNBRUlBVTJBaEFNQVFzZ0JDQUJJQXhzTmdJUUlBQWdCQ2dDQ0NBRmJCQ2hCeUFFUVFFMkFpZ2dCQ2dDRUNFRkMwSHdrK3ZjQXlBRUtBSUlJZ2h1SVFFZ0FDZ0NCQ0VISUFoQjhaUHIzQU5QQkVBZ0FDZ0NBQ0lEUWNnQU5nSVVJQUFnQXlnQ0FCRUFBQXNnQnlBQklBVWdBU0FGU0JzaUJ6WUNVRUVBSVFNZ0FFRUJJQVZCQW5RUW5BSWhDaUFGQkVBRFFDQUFLQUlFSVFJZ0J5QUZJQU5ySWdFZ0FTQUhTeHNpQnlBSWJDSUJRZkdUNjl3RFR3UkFJQUFvQWdCQ3VJQ0FnREEzQWhRZ0FDQUFLQUlBS0FJQUVRQUFDeUFCUVFnZ0FVRUhjU0lHYTBFQUlBWWJhaUlHUVJCcUlna1FPaUlCUlFSQUlBQW9BZ0JDdUlDQWdNQUFOd0lVSUFBZ0FDZ0NBQ2dDQUJFQUFBc2dBaUFDS0FKTUlBbHFOZ0pNSUFKQlFHc2lBaWdDQUNFSklBRkJBRFlDQ0NBQklBWTJBZ1FnQVNBSk5nSUFJQUlnQVRZQ0FBSkFJQWRGRFFBZ0FVRVFhaUVDSUFjaUFVRURjU0lHQkVBRFFDQUtJQU5CQW5ScUlBSTJBZ0FnQVVFQmF5RUJJQUlnQ0dvaEFpQURRUUZxSVFNZ0JrRUJheUlHRFFBTEN5QUhRUUZyUVFOSkRRQURRQ0FLSUFOQkFuUnFJZ1lnQWpZQ0FDQUdJQUlnQ0dvaUFpQUlhaUlKSUFocUlnMDJBZ3dnQmlBSk5nSUlJQVlnQWpZQ0JDQURRUVJxSVFNZ0NDQU5haUVDSUFGQkJHc2lBUTBBQ3dzZ0F5QUZTUTBBQ3dzZ0JDQUtOZ0lBSUFzb0FsQWhBU0FFUVFBMkFpUWdCRUlBTndJWUlBUWdBVFlDRkFzZ0JDZ0NMQ0lFRFFBTEN5QUxLQUpJSWdWRkRRQURRQ0FGS0FJQVJRUkFBa0FnRENBRktBSUVJZ2RCQVdzZ0JTZ0NEQ0lCYmtFQmFrNEVRQ0FGSUFjMkFoQU1BUXNnQlNBQklBeHNOZ0lRSUFBZ0J5QUZLQUlJYkVFSGRCQ2hCeUFGUVFFMkFpZ2dCU2dDRUNFSEMwSHdrK3ZjQXlBRktBSUlRUWQwSWdodUlRRWdBQ2dDQkNFRUlBaEI4WlByM0FOUEJFQWdBQ2dDQUNJRFFjZ0FOZ0lVSUFBZ0F5Z0NBQkVBQUFzZ0JDQUJJQWNnQVNBSFNCc2lCRFlDVUVFQUlRTWdBRUVCSUFkQkFuUVFuQUloQ2lBSEJFQURRQ0FBS0FJRUlRSWdCQ0FISUFOcklnRWdBU0FFU3hzaUJDQUliQ0lHUWZHVDY5d0RUd1JBSUFBb0FnQkN1SUNBZ0RBM0FoUWdBQ0FBS0FJQUtBSUFFUUFBQ3lBR1FSQnlJZ2tRT2lJQlJRUkFJQUFvQWdCQ3VJQ0FnTUFBTndJVUlBQWdBQ2dDQUNnQ0FCRUFBQXNnQWlBQ0tBSk1JQWxxTmdKTUlBSkJRR3NpQWlnQ0FDRUpJQUZCQURZQ0NDQUJJQVkyQWdRZ0FTQUpOZ0lBSUFJZ0FUWUNBQUpBSUFSRkRRQWdBVUVRYWlFQ0lBUWlBVUVEY1NJR0JFQURRQ0FLSUFOQkFuUnFJQUkyQWdBZ0FVRUJheUVCSUFOQkFXb2hBeUFDSUFocUlRSWdCa0VCYXlJR0RRQUxDeUFFUVFGclFRTkpEUUFEUUNBS0lBTkJBblJxSWdZZ0FqWUNBQ0FHSUFJZ0NHb2lBaUFJYWlJSk5nSUlJQVlnQWpZQ0JDQUdJQWdnQ1dvaUFqWUNEQ0FDSUFocUlRSWdBMEVFYWlFRElBRkJCR3NpQVEwQUN3c2dBeUFIU1EwQUN3c2dCU0FLTmdJQUlBc29BbEFoQVNBRlFRQTJBaVFnQlVJQU53SVlJQVVnQVRZQ0ZBc2dCU2dDTENJRkRRQUxDd3ZPQndFSGZ3SkFBa0FnQWlBRGFpSUlJQUVvQWdSTERRQWdBU2dDRENBRFNRMEFJQUVvQWdBTkFRc2dBQ2dDQUNJRFFSYzJBaFFnQUNBREtBSUFFUUFBQ3dKQUlBSWdBU2dDR0NJRFR3UkFJQWdnQVNnQ0VDQURhazBOQVFzZ0FTZ0NLRVVFUUNBQUtBSUFJZ05CeHdBMkFoUWdBQ0FES0FJQUVRQUFDeUFCS0FJa0JFQUNRQ0FCS0FJUUlnTkJBVWdOQUNBQktBSVVJZ1VnQXlBRElBVktHeUlGSUFFb0Fod2dBU2dDR0NJRGF5SUdJQVVnQmtnYklnVWdBU2dDQkNBRGF5SUdJQVVnQmtnYklnVkJBVWdOQUNBQlFUQnFJUW9nQXlBQktBSUlJZ3RzSVFaQkFDRURBMEFnQUNBS0lBRW9BZ0FnQTBFQ2RHb29BZ0FnQmlBRklBdHNJZ2NnQVNnQ05CRUhBQ0FCS0FJUUlna2dBU2dDRkNJRklBTnFJZ05NRFFFZ0JpQUhhaUVHSUFVZ0NTQURheUlISUFVZ0IwZ2JJZ1VnQVNnQ0hDQURJQUVvQWhocUlnZHJJZ2tnQlNBSlNCc2lCU0FCS0FJRUlBZHJJZ2NnQlNBSFNCc2lCVUVBU2cwQUN3c2dBVUVBTmdJa0N5QUJJQUlnQ0NBQktBSVFJZ05ySWdWQkFDQUZRUUJLR3lBQktBSVlJQUpKR3lJR05nSVlJQU5CQVVnTkFDQUJLQUlVSWdVZ0F5QURJQVZLR3lJRElBRW9BaHdnQm1zaUJTQURJQVZJR3lJRElBRW9BZ1FnQm1zaUJTQURJQVZJR3lJRlFRRklEUUFnQVVFd2FpRUtJQUVvQWdnaUN5QUdiQ0VHUVFBaEF3TkFJQUFnQ2lBQktBSUFJQU5CQW5ScUtBSUFJQVlnQlNBTGJDSUhJQUVvQWpBUkJ3QWdBU2dDRUNJSklBRW9BaFFpQlNBRGFpSURUQTBCSUFZZ0Iyb2hCaUFGSUFrZ0Eyc2lCeUFGSUFkSUd5SUZJQUVvQWh3Z0F5QUJLQUlZYWlJSGF5SUpJQVVnQ1VnYklnVWdBU2dDQkNBSGF5SUhJQVVnQjBnYklnVkJBRW9OQUFzTEFrQUNRQUpBSUFFb0Fod2lCU0FJVHcwQUFrQUNRQUpBSUFJZ0JVc0VRQ0FDSVFVZ0JFVU5BU0FBS0FJQUlnTkJGellDRkNBQUlBTW9BZ0FSQUFBTUFnc2dCQTBCQ3lBQktBSWdEUUVnQUNnQ0FDSURRUmMyQWhRZ0FDQURLQUlBRVFBQURBUUxJQUVnQ0RZQ0hDQUJLQUlnUlEwQ0N5QUZJQUVvQWhnaUFHc2lBeUFJSUFCcklnWlBEUUFnQVNnQ0NDRUFJQWdnQlVGL2Myb2hDaUFJSUFWclFRTnhJZ1VFUUFOQUlBRW9BZ0FnQTBFQ2RHb29BZ0JCQUNBQUVEc2FJQU5CQVdvaEF5QUZRUUZySWdVTkFBc0xJQXBCQTBrTkFBTkFJQU5CQW5RaUJTQUJLQUlBYWlnQ0FFRUFJQUFRT3hvZ0JTQUJLQUlBYWlnQ0JFRUFJQUFRT3hvZ0JTQUJLQUlBYWlnQ0NFRUFJQUFRT3hvZ0JTQUJLQUlBYWlnQ0RFRUFJQUFRT3hvZ0EwRUVhaUlESUFaSERRQUxDeUFFUlEwQkN5QUJRUUUyQWlRTElBRW9BZ0FnQWlBQktBSVlhMEVDZEdvTDF3Y0JCMzhDUUFKQUlBSWdBMm9pQ0NBQktBSUVTdzBBSUFFb0Fnd2dBMGtOQUNBQktBSUFEUUVMSUFBb0FnQWlBMEVYTmdJVUlBQWdBeWdDQUJFQUFBc0NRQ0FDSUFFb0FoZ2lBMDhFUUNBSUlBRW9BaEFnQTJwTkRRRUxJQUVvQWloRkJFQWdBQ2dDQUNJRFFjY0FOZ0lVSUFBZ0F5Z0NBQkVBQUFzZ0FTZ0NKQVJBQWtBZ0FTZ0NFQ0lEUVFGSURRQWdBU2dDRkNJRklBTWdBeUFGU2hzaUJTQUJLQUljSUFFb0FoZ2lBMnNpQmlBRklBWklHeUlGSUFFb0FnUWdBMnNpQmlBRklBWklHeUlGUVFGSURRQWdBVUV3YWlFS0lBTWdBU2dDQ0VFSGRDSUxiQ0VHUVFBaEF3TkFJQUFnQ2lBQktBSUFJQU5CQW5ScUtBSUFJQVlnQlNBTGJDSUhJQUVvQWpRUkJ3QWdBU2dDRUNJSklBRW9BaFFpQlNBRGFpSURUQTBCSUFZZ0Iyb2hCaUFGSUFrZ0Eyc2lCeUFGSUFkSUd5SUZJQUVvQWh3Z0F5QUJLQUlZYWlJSGF5SUpJQVVnQ1VnYklnVWdBU2dDQkNBSGF5SUhJQVVnQjBnYklnVkJBRW9OQUFzTElBRkJBRFlDSkFzZ0FTQUNJQWdnQVNnQ0VDSURheUlGUVFBZ0JVRUFTaHNnQVNnQ0dDQUNTUnNpQmpZQ0dDQURRUUZJRFFBZ0FTZ0NGQ0lGSUFNZ0F5QUZTaHNpQXlBQktBSWNJQVpySWdVZ0F5QUZTQnNpQXlBQktBSUVJQVpySWdVZ0F5QUZTQnNpQlVFQlNBMEFJQUZCTUdvaENpQUJLQUlJUVFkMElnc2dCbXdoQmtFQUlRTURRQ0FBSUFvZ0FTZ0NBQ0FEUVFKMGFpZ0NBQ0FHSUFVZ0Myd2lCeUFCS0FJd0VRY0FJQUVvQWhBaUNTQUJLQUlVSWdVZ0Eyb2lBMHdOQVNBR0lBZHFJUVlnQlNBSklBTnJJZ2NnQlNBSFNCc2lCU0FCS0FJY0lBTWdBU2dDR0dvaUIyc2lDU0FGSUFsSUd5SUZJQUVvQWdRZ0Iyc2lCeUFGSUFkSUd5SUZRUUJLRFFBTEN3SkFBa0FDUUNBQktBSWNJZ1VnQ0U4TkFBSkFBa0FDUUNBQ0lBVkxCRUFnQWlFRklBUkZEUUVnQUNnQ0FDSURRUmMyQWhRZ0FDQURLQUlBRVFBQURBSUxJQVFOQVFzZ0FTZ0NJQTBCSUFBb0FnQWlBMEVYTmdJVUlBQWdBeWdDQUJFQUFBd0VDeUFCSUFnMkFod2dBU2dDSUVVTkFnc2dCU0FCS0FJWUlnQnJJZ01nQ0NBQWF5SUdUdzBBSUFFb0FnaEJCM1FoQUNBSUlBVkJmM05xSVFvZ0NDQUZhMEVEY1NJRkJFQURRQ0FCS0FJQUlBTkJBblJxS0FJQVFRQWdBQkE3R2lBRFFRRnFJUU1nQlVFQmF5SUZEUUFMQ3lBS1FRTkpEUUFEUUNBRFFRSjBJZ1VnQVNnQ0FHb29BZ0JCQUNBQUVEc2FJQVVnQVNnQ0FHb29BZ1JCQUNBQUVEc2FJQVVnQVNnQ0FHb29BZ2hCQUNBQUVEc2FJQVVnQVNnQ0FHb29BZ3hCQUNBQUVEc2FJQU5CQkdvaUF5QUdSdzBBQ3dzZ0JFVU5BUXNnQVVFQk5nSWtDeUFCS0FJQUlBSWdBU2dDR0d0QkFuUnFDK2NMQWhOOEFuOENRQUpBQWtBZ0FDc0RBQ0lFSUFBckF5QWlENklnQUNzRENDSURJQUFyQXhnaUNxS2hJZ1lnQnFJZ0F5QUFLd01vSWdpaUlBQXJBeEFpQnlBUG9xRWlBU0FCb2lBSElBcWlJQVFnQ0tLaElnSWdBcUtnb0o4aUNVUUFBQUFBQUFBQUFHRU5BQ0FHSUFtaklRVUNRQUo4SUFRZ0FpQUpveUlHb2lJUUlBTWdBU0FKb3lJTG9pSU9vU0lNUkFBQUFBQUFBQUFBWWdSQUlBY2hDU0FFSVEwZ0JTRUJJQXNoQlNBRERBRUxRUUVoRlNBRUlBV2lJaEFnQnlBTG9pSU9vU0lNUkFBQUFBQUFBQUFBWWdSQUlBTWhDU0FISVFJZ0JDRU5JQVloQVNBRklRWWdDeUVGREFJTElBY2dCcUlpRUNBRElBV2lJZzZoSVF4QkFTRVVJQVFoQ1NBSElRMGdDeUVCSUFNTElRSkJBQ0VWQ3lBTVJBQUFBQUFBQUFBQVlRMEFJQUlnQWFJZ0NTQUdvcUVnREtNaUVpQUVJQXFpSUFNZ0Q2S2dJQWNnQ0tLZ0lnS2FJQUlnQWtRQUFBQUFBQUFBQUdNYklnSkVBQUFBQUFBQThEK2duMFFBQUFBQUFBRHdQeUFDb1orZ1JBQUFBQUFBQU9BL29pSVRJQWFpSUF5akloR2lJQTBnQWFJZ0NTQUZvcUVnRGlBUW9TSUNveUlPSUJNZ0JhSWdBcU1pQTZLZ0lnc2dDNklnRWlBU29pQU9JQTZpb0VRQUFBQUFBQUR3UDZBaURTQVJJQkdpSUFNZ0E2S2dSQUFBQUFBQUFQQy9vS0toSWdKRUFBQUFBQUFBQUFCakRRQWdBeUFPSUF1YUlBS2ZJZ0toSUEyaklnU2lvQ0VISUJFZ0VpQUVvcUFoQ1NBRElBNGdBaUFMb1NBTm95SURvcUFoRFNBUklCSWdBNktnSVFzQ2ZDQVZCRUFnQmlFQ0lBRWhCaUFGSVFFZ0N5RVJJQU1oRGlBTklRc2dDU0VRSUFjaENTQUVEQUVMSUJSRkJFQWdBU0VDSUFVaEFTQUxJUkVnRFNFT0lBTWhDeUFKSVJBZ0JDRUpJQWNNQVFzZ0JTRUNJQU1oRVNBTklRNGdCQ0VRSUFjTElRMUJBQ0VVQWtBQ1FDQUtJQWFpSWdVZ0R5QUJvaUlNb1NJRVJBQUFBQUFBQUFBQVlnUkFJQWdoQXlBS0lRZ2dBaUVISUFFaEFnd0JDMEVCSVJVZ0NpQUNvaUlGSUFnZ0FhSWlES0VpQkVRQUFBQUFBQUFBQUdJRVFDQVBJUU1nQ0NFUElBb2hDQ0FHSVFjZ0FpRUdJQUVoQWd3Q0N5QUlJQWFpSWdVZ0R5QUNvaUlNb1NFRVFRRWhGQ0FLSVFNZ0FTRUhDMEVBSVJVTElBUkVBQUFBQUFBQUFBQmhEUUFnRHlBSG9pQURJQWFpb1NBRW95SVBJQk1nQnFJZ0JLTWlDcUlnQ0NBSG9pQURJQUtpb1NBTUlBV2hJZ0dqSWdRZ0V5QUNvaUFCb3lJSW9xQWlCU0FGb2lBUElBK2lJQVFnQktLZ1JBQUFBQUFBQVBBL29DSUJJQW9nQ3FJZ0NDQUlvcUJFQUFBQUFBQUE4TCtnb3FFaUFrUUFBQUFBQUFBQUFHTU5BQ0FJSUFRZ0Jab2dBcDhpQXFFZ0FhTWlBNktnSVFjZ0NpQVBJQU9pb0NFR0lBZ2dCQ0FDSUFXaElBR2pJZ1dpb0NFQklBb2dEeUFGb3FBaEFnSjhJQlVFUUNBQ0lRd2dCU0VJSUFFaEFpQUdJUVFnQnlFR0lBTU1BUXNnRkVVRVFDQUNJUXdnQVNFSUlBVWhBaUFHSVFRZ0F5RUdJQWNNQVFzZ0JTRU1JQUVoQ0NBRElRUWdCd3NoQlNBUUlBU2lJQTBnQmFLZ0lBa2dCcUtnSWdHYUlBRWdBVVFBQUFBQUFBQUFBR01iSVFvZ0VDQU1vaUFOSUFpaW9DQUpJQUtpb0NJQm1pQUJJQUZFQUFBQUFBQUFBQUJqR3lFREFrQUNRQUpBSUJFZ0RLSWdEaUFJb3FBZ0N5QUNvcUFpQVpvZ0FTQUJSQUFBQUFBQUFBQUFZeHNpQnlBUklBU2lJQTRnQmFLZ0lBc2dCcUtnSWdHYUlBRWdBVVFBQUFBQUFBQUFBR01iSWdGalFRRnpSUVJBSUFNZ0IyUkJBWE5GQkVBZ0J5QUtZMEVCY3cwQ0lBQWdBamtES0NBQUlBZzVBeUFnQUNBTU9RTVlEQWNMSUFBZ0NUa0RFQ0FBSUEwNUF3Z2dBQ0FRT1FNQUlBTWdDbU5CQVhNTkF3d0ZDeUFCSUFOalFRRnpEUUVnQVNBS1kwRUJjdzBBSUFBZ0Jqa0RLQ0FBSUFVNUF5QWdBQ0FFT1FNWURBVUxJQUFnQmprREtDQUFJQVU1QXlBZ0FDQUVPUU1ZSUFBZ0NUa0RFQ0FBSUEwNUF3Z2dBQ0FRT1FNQUR3c2dBQ0FKT1FNUUlBQWdEVGtEQ0NBQUlCQTVBd0FnQXlBS1kwRUJjMFVOQWdzZ0FDQUdPUU1vSUFBZ0JUa0RJQ0FBSUFRNUF4Z0xEd3NnQUNBQ09RTW9JQUFnQ0RrRElDQUFJQXc1QXhnUEN5QUFJQXM1QXhBZ0FDQU9PUU1JSUFBZ0VUa0RBQXNlQUNBQVFRRVFzd1FnQUVFQUVMTUVJQUFvQWdRUU15QUFRUUEyQWdRTHd3SUJBbjhqQUVFUWF5SUNKQUFnQUVFQU5nSUVJQUpCQURZQ0RFSFVBQkE2SWdGRkJFQWdBQ2dDQUVJNE53SVVJQUFnQUNnQ0FDZ0NBQkVBQUFzZ0FVR0FsT3ZjQXpZQ01DQUJRZDhCTmdJb0lBRkI0QUUyQWlRZ0FVSGhBVFlDSUNBQlFlSUJOZ0ljSUFGQjR3RTJBaGdnQVVIa0FUWUNGQ0FCUWVVQk5nSVFJQUZCNWdFMkFnd2dBVUhuQVRZQ0NDQUJRZWdCTmdJRUlBRkI2UUUyQWdBZ0FVSUFOd0kwSUFGQkFEWUNMQ0FCUWRRQU5nSk1JQUZDQURjQ1BDQUJRZ0EzQWtRZ0FDQUJOZ0lFQWtCQnpNWUNFTEFESWdCRkRRQWdBa0g0QURvQUN5QUNJQUpCREdvMkFnQWdBaUFDUVF0cU5nSUVJQUJCMU1ZQ0lBSVEvUUZCQVVnTkFBSkFJQUl0QUF0QklISkI3UUJIQkVBZ0FpZ0NEQ0VBREFFTElBSWdBaWdDREVIb0Iyd2lBRFlDREFzZ0FTQUFRZWdIYkRZQ0xBc2dBa0VRYWlRQUM1QURBUU4vQWtBZ0FDZ0N2QU1pQVNnQ0NBUkFJQUZCQURZQ0NDQUFRUUFnQUNnQzVBTW9BZ0FSQWdBZ0FFRUNJQUFvQXNnREtBSUFFUUlBSUFCQkFpQUFLQUxBQXlnQ0FCRUNBQXdCQ3dKQUlBQW9BbFJGRFFBZ0FDZ0NpQUVOQUFKQUlBQW9BbHhGRFFBZ0FDZ0NiRVVOQUNBQUlBRW9BaGcyQXVRRElBRkJBVFlDQ0F3QkN5QUFLQUprQkVBZ0FDQUJLQUlVTmdMa0F3d0JDeUFBS0FJQUlnSkJMellDRkNBQUlBSW9BZ0FSQUFBTElBQWdBQ2dDMkFNb0FnQVJBQUFnQUNBQUtBTEVBeWdDQ0JFQUFDQUFLQUpFRFFBZ0FTZ0NFRVVFUUNBQUlBQW9BdUFES0FJQUVRQUFDeUFBSUFBb0F0d0RLQUlBRVFBQUlBQW9BbFFFUUNBQUlBRW9BZ2dnQUNnQzVBTW9BZ0FSQWdBTElBQkJBMEVBSUFFb0FnZ2JJQUFvQXNnREtBSUFFUUlBSUFCQkFDQUFLQUxBQXlnQ0FCRUNBQXNDUUNBQUtBSUlJZ0pGRFFBZ0FpQUJLQUlNSWdNMkFnd2dBaUFEUVFKQkFTQUJLQUlJRzJvaUFUWUNFQ0FBS0FKQVJRMEFJQUFvQXN3REtBSVVEUUFnQWtFQ1FRRWdBQ2dDYkJzZ0FXbzJBaEFMQ3k4QkFYOGdBQ2dDdkFNaEFTQUFLQUpVQkVBZ0FDQUFLQUxrQXlnQ0NCRUFBQXNnQVNBQktBSU1RUUZxTmdJTUM5Y0dBUVYvSUFBZ0FFRUJRUndnQUNnQ0JDZ0NBQkVFQUNJRU5nSzhBeUFFUVFBMkFnZ2dCRUhkQVRZQ0JDQUVRZDRCTmdJQUlBQW9BdFFCSWdOQkNFY0VRQ0FBS0FJQUlnVWdBellDR0NBRlFSQTJBaFFnQUNBQUtBSUFLQUlBRVFBQUN5QUFFTGtPSUFBZ0FFRUJRWUFLSUFBb0FnUW9BZ0FSQkFCQkFFR0FCQkE3SWdWQmdBUnFJZ00yQXRBQ0EwQWdBU0FEYWlBQk9nQUFJQU1nQVVFQmNpSUNhaUFDT2dBQUlBTWdBVUVDY2lJQ2FpQUNPZ0FBSUFNZ0FVRURjaUlDYWlBQ09nQUFJQU1nQVVFRWNpSUNhaUFDT2dBQUlBTWdBVUVGY2lJQ2FpQUNPZ0FBSUFNZ0FVRUdjaUlDYWlBQ09nQUFJQU1nQVVFSGNpSUNhaUFDT2dBQUlBRkJDR29pQVVHQUFrY05BQXNnQlVHQUJtcEIvd0ZCZ0FRUU94b0NRQUpBSUFBb0FuUkZEUUFnQUNnQ2NFVU5BQ0FBS0FKNFFRQktEUUVMSUFBb0FnQWlBVUVoTmdJVUlBQWdBU2dDQUJFQUFBc2dCRUVBTmdJTUlBQVFvZ2NoQVNBRVFnQTNBaFFnQkNBQk5nSVFBa0FnQUNnQ1ZFVUVRQ0FBUVFBMkFtd2dBRUlBTndKa0RBRUxJQUFvQWtCRkJFQWdBRUVBTmdKc0lBQkNBRGNDWkFzZ0FDZ0NSQVJBSUFBb0FnQWlBVUV3TmdJVUlBQWdBU2dDQUJFQUFBc0NRQ0FBS0FKNFFRTkhCRUFnQUVFQU5nS0lBU0FBUVFBMkFtd2dBRUlCTndKa0RBRUxJQUFvQW9nQkJFQWdBRUVCTmdKb0RBRUxJQUFvQWx3RVFDQUFRUUUyQW13TUFRc2dBRUVCTmdKa0N5QUFLQUprQkVBZ0FCQ2tEeUFFSUFBb0F1UUROZ0lVQ3lBQUtBSnNSUVJBSUFBb0FtaEZEUUVMSUFBUW5BOGdCQ0FBS0FMa0F6WUNHQXNnQUNnQ1JFVUVRQUpBSUFRb0FoQUVRQ0FBRUpVUERBRUxJQUFRanc4Z0FCQ0VEd3NnQUNBQUtBSnNFUG9PQ3lBQUVOTU9Ba0FnQUNnQzVBRUVRQ0FBRUtzT0RBRUxJQUFRMFE0TFFRRWhBU0FBSUFBb0Fzd0RLQUlRQkg5QkFRVWdBQ2dDUUVFQVJ3c1F4dzRnQUNnQ1JFVUVRQ0FBRUw4T0N5QUFJQUFvQWdRb0FoZ1JBQUFnQUNBQUtBTE1BeWdDQ0JFQUFBSkFJQUFvQWdnaUFVVU5BQ0FBS0FKQURRQWdBQ2dDekFNb0FoQkZEUUFnQUNnQzRBRWhCU0FBS0FJa0lRTWdBVUVBTmdJRUlBQW9Bc3dDSVFJZ0FVRUFOZ0lNSUFFZ0FpQURRUU5zUVFKcUlBTWdCUnRzTmdJSUlBRkJBMEVDSUFBb0Ftd2JOZ0lRSUFRZ0JDZ0NERUVCYWpZQ0RBc0xoZ1FCREg4Z0FDZ0NGQ0lDUWNvQlJ3UkFJQUFvQWdBaUF5QUNOZ0lZSUFOQkZUWUNGQ0FBSUFBb0FnQW9BZ0FSQUFBTElBQVF2QThDUUNBQUtBSWtJZ1pCQVVnTkFFRUlRUVFnQUNnQ1RCc2hCeUFBS0FMSUFpRUlJQUFvQXNRQ0lRa2dBQ2dDMkFFaUJDRUZBMEFDUUNBSElBa2lBa2dOQUNBQUtBSzhBaUlESUFVb0FnZ2lDa0VCZEc4TkFFRUNJUUVEUUNBQklBbHNJZ0lnQjBvTkFTQURJQUZCQVhRaUFTQUtiRzlGRFFBTEN5QUZJQUkyQWlRQ1FDQUhJQWdpQTBnTkFDQUFLQUxBQWlJS0lBVW9BZ3dpREVFQmRHOE5BRUVDSVFFRFFDQUJJQWhzSWdNZ0Iwb05BU0FLSUFGQkFYUWlBU0FNYkc5RkRRQUxDeUFGSUFNMkFpZ0NRQ0FEUVFGMElnRWdBa2dFUUNBRklBRTJBaVFNQVFzZ0F5QUNRUUYwSWdKTURRQWdCU0FDTmdJb0N5QUZRZGdBYWlFRklBdEJBV29pQ3lBR1J3MEFDeUFHUVFGSURRQkJBQ0VCQTBBZ0JDQUVLQUlrSUFRb0FnZ2dBQ2dDSEd4c0lBQW9BcXdESUFBb0Fyd0NiQkJyTmdJc0lBUWdCQ2dDS0NBRUtBSU1JQUFvQWlCc2JDQUFLQUtzQXlBQUtBTEFBbXdRYXpZQ01DQUVRZGdBYWlFRUlBRkJBV29pQVNBQUtBSWtJZ1pJRFFBTEN5QUFLQUlzUVFGcklnSkJCazBFUUNBQ1FRSjBRYkRHQW1vb0FnQWhCZ3NnQUNBR05nSjRRUUVoQVNBQVFRRWdCaUFBS0FKVUd6WUNmQ0FBSUFBUW9nY0VmeUFBS0FMQUFnVkJBUXMyQW9BQkN4d0FJQUJCQUVFQVFRQWdBU0FDSUFNZ0FDZ0N5QU1vQWdRUkRRQUwvd29DREg4VGZDTUFRZEFBYXlJSEpBQkJmeUVOQWtBZ0EwRUVTQTBBQTBBZ0F5QUZSd1JBSUFWQkdHd2hCaUFGUVFGcUlRVWdBaUFHYWlzREVFUUFBQUFBQUFBQUFHRU5BUXdDQ3dzZ0FDc0RBRVFBQUFBQUFBQUFBR0VOQUNBQUt3TWdSQUFBQUFBQUFBQUFZZzBBSUFBckF5aEVBQUFBQUFBQUFBQmhEUUFnQUNzRFFFUUFBQUFBQUFBQUFHSU5BQ0FBS3dOSVJBQUFBQUFBQUFBQVlnMEFJQUFyQTFCRUFBQUFBQUFBOEQ5aURRQWdBQ3NER0VRQUFBQUFBQUFBQUdJTkFDQUFLd000UkFBQUFBQUFBQUFBWWcwQUlBQXJBMWhFQUFBQUFBQUFBQUJpRFFBZ0EwRUJkQ0lGUVFnUXRBRWlDRVVFUUVFQVFRTkI5ZzFCQUJBNERBRUxJQVZCQVJDMEFTSUpCRUFnQ1NnQ0FDRU9JQWdvQWdBaEJRTkFJQU1nQzBaRkJFQWdCU0FMUVFkMElnWnFJQUlnQzBFWWJHb2lDaXNEQURrREFDQUZJQVpCQ0hKcUlBb3JBd2c1QXdBZ0JTQUdRUkJ5YWtLQWdJQ0FnSUNBK0Q4M0F3QWdCU0FHUVJoeWFrSUFOd01BSUFVZ0JrRWdjbXBDQURjREFDQUZJQVpCS0hKcVFnQTNBd0FnQlNBR1FUQnlhaUFCSUF0QkJIUWlEMm9pRENzREFDQUtLd01BbXFJNUF3QWdCU0FHUVRoeWFpQU1Ld01BSUFvckF3aWFvamtEQUNBRklBOUJDSElpRUVFRGRHcENBRGNEQUNBRklBWkJ5QUJ5YWtJQU53TUFJQVVnQmtIUUFISnFRZ0EzQXdBZ0JTQUdRZGdBY21vZ0Npc0RBRGtEQUNBRklBWkI0QUJ5YWlBS0t3TUlPUU1BSUFVZ0JrSG9BSEpxUW9DQWdJQ0FnSUQ0UHpjREFDQUZJQVpCOEFCeWFpQU1Ld01JSUFvckF3Q2FvamtEQUNBRklBWkIrQUJ5YWlBTUt3TUlJQW9yQXdpYW9qa0RBQ0FPSUE5cUlBd3JBd0E1QXdBZ0RpQVFhaUFNS3dNSU9RTUFJQXRCQVdvaEN3d0JDd3NnQ0JDRUJTSUJSUVJBSUFnUVJTQUpFRVZCQUVFRFFhSWpRUUFRT0F3Q0N5QUJJQWdReXdJaUEwVUVRQ0FJRUVVZ0NSQkZJQUVRUlVFQVFRTkJtaWhCQUJBNERBSUxJQUVnQ1JETEFpSUZSUVJBSUFnUVJTQUpFRVVnQVJCRklBTVFSVUVBUVFOQjlpdEJBQkE0REFJTElBTVE5UUpCZjB3RVFDQUlFRVVnQ1JCRklBRVFSU0FERUVVZ0JSQkZRUUJCQTBIbU1VRUFFRGdNQWdzZ0F5QUZFTXNDSWdaRkJFQWdDQkJGSUFrUVJTQUJFRVVnQXhCRklBVVFSVUVBUVFOQnJEZEJBQkE0REFJTElBQXJBekFoRlNBR0tBSUFJZ0lyQXlnaElTQUNLd01RSVNJZ0Fpc0RHQ0VYSUFJckF3QWhHQ0FDS3dNd0lSRWdBQ3NEQUNFYklBQXJBd2doSENBQUt3TW9JUjBnQWlzRElDRVNJQUlyQXdnaEV5QUFLd01RSVI0Z0Fpc0RPQ0VVSUFnUVJTQUpFRVVnQVJCRklBTVFSU0FGRUVVZ0JoQkZJQWNnRkNBVUlCU2lJQklnRlNBVW9xRWdIYU1pRWlBU29pQVRJQjRnRktLaElCd2dFcUtoSUJ1akloTWdFNktnb0o4aUZLTTVBeWdnQnlBU0lCU2pPUU1nSUFjZ0V5QVVvemtER0NBSElCRWdFU0FSb2lBWElCRWdGYUtoSUIyakloSWdFcUlnR0NBUklCNmlvU0FTSUJ5aW9TQWJveUlUSUJPaW9LQ2ZJaEdqT1FNUUlBY2dFaUFSb3prRENDQUhJQk1nRWFNNUF3QWdCeEN6RGlBSFFVQnJJQWNyQXlBaUVpQUhLd01BSWhPaUlBY3JBd2dpRnlBSEt3TVlJaGlpb1NJV0lCWWdGcUlnRnlBSEt3TW9JaGFpSUFjckF4QWlIeUFTb3FFaUdTQVpvaUFmSUJpaUlCWWdFNktoSWhvZ0dxS2dvSjhpSUtNaUl6a0RBQ0FISUJvZ0lLTWlHamtET0NBSElCa2dJS01pR1RrRE1DQUVJQ0lnSHFFZ0hDQWhJQldoSUIyakloV2lvU0Fib3lBUklCU2dSQUFBQUFBQUFPQS9vaUlSb3prREdDQUVJQlVnRWFNNUF6Z2dCRVFBQUFBQUFBRHdQeUFSb3prRFdDQUVJQms1QXhBZ0JDQWFPUU13SUFRZ0l6a0RVQ0FFSUJnNUF3Z2dCQ0FTT1FNb0lBUWdGamtEU0NBRUlCYzVBeUFnQkNBZk9RTkFJQVFnRXprREFFRUFJUTBNQVFzZ0NCQkZRUUJCQTBHYkYwRUFFRGdMSUFkQjBBQnFKQUFnRFF0aEFRSi9Ba0FnQUNnQ3dBTWlCQ2dDTUNBRUtBSTBJZ1ZQQkVBZ0FDQUVRUWhxSUFBb0FzUURLQUlNRVFNQVJRMEJJQVJCQURZQ01DQUVLQUkwSVFVTElBQWdCRUVJYWlBRVFUQnFJQVVnQVNBQ0lBTWdBQ2dDeUFNb0FnUVJEUUFMQzdVSEFRMS9Ba0FnQUNnQ3dBTWlCQ2dDT0VVRVFDQUFJQVFnQkNnQ1JFRUNkR29vQWp3Z0FDZ0N4QU1vQWd3UkF3QkZEUUVnQkVFQk5nSTRJQVFnQkNnQ1RFRUJhallDVEFzQ1FBSkFBa0FnQkNnQ1NBNERBUUlBQXdzZ0FDQUVJQVFvQWtSQkFuUnFLQUk4SUFSQk1Hb2dCQ2dDTkNBQklBSWdBeUFBS0FMSUF5Z0NCQkVOQUNBRUtBSXdJQVFvQWpSSkRRSWdCRUVBTmdKSUlBSW9BZ0FnQTA4TkFnc2dCRUVBTmdJd0lBUWdBQ2dDeUFJaURFRUJhellDTkFKQUlBUW9Ba3dnQUNnQ3pBSkhEUUFnQUNnQ0pDSU5RUUZJRFFBZ0FDZ0N3QU1pRHlBUEtBSkVRUUowYWlFUUlBQW9BdGdCSVFjRFFDQUhLQUl3SUFjb0FpZ2dCeWdDREd3aUJYQWlCaUFGSUFZYklRWWdCU0FNYlNFRklBdEZCRUFnRHlBR1FRRnJJQVZ0UVFGcU5nSTBDd0pBSUFWQkFVZ05BQ0FGUVFGMElnVkJBU0FGUVFGS0d5SUpRUU54SVE0Z0VDZ0NQQ0FMUVFKMGFpZ0NBQ0lJSUFaQkFuUnFRUVJySVFwQkFDRUZJQWxCQVd0QkEwOEVRQ0FKUWZ6Ly8vOEhjU0VKQTBBZ0NDQUZJQVpxUVFKMGFpQUtLQUlBTmdJQUlBZ2dCVUVCY2lBR2FrRUNkR29nQ2lnQ0FEWUNBQ0FJSUFWQkFuSWdCbXBCQW5ScUlBb29BZ0EyQWdBZ0NDQUZRUU55SUFacVFRSjBhaUFLS0FJQU5nSUFJQVZCQkdvaEJTQUpRUVJySWdrTkFBc0xJQTVGRFFBRFFDQUlJQVVnQm1wQkFuUnFJQW9vQWdBMkFnQWdCVUVCYWlFRklBNUJBV3NpRGcwQUN3c2dCMEhZQUdvaEJ5QUxRUUZxSWdzZ0RVY05BQXNMSUFSQkFUWUNTQXNnQUNBRUlBUW9Ba1JCQW5ScUtBSThJQVJCTUdvZ0JDZ0NOQ0FCSUFJZ0F5QUFLQUxJQXlnQ0JCRU5BQ0FFS0FJd0lBUW9BalJKRFFBQ1FDQUVLQUpNUVFGSEJFQWdBQ2dDeUFJaEFRd0JDeUFBS0FMSUFpRUJJQUFvQWlRaUNrRUJTQTBBSUFBb0FzQURJUWdnQVVFQ2FpRUxJQUZCQVdvaERpQUFLQUxZQVNFQVFRQWhCd05BSUFBb0FpZ2dBQ2dDREd3Z0FXMGlBa0VCVGdSQUlBZEJBblFpQlNBSUtBSkFhaWdDQUNFRElBZ29BandnQldvb0FnQWhCaUFDSUF0c0lROGdBaUFPYkNFSlFRQWhCUU5BSUFZZ0JTQUNhMEVDZENJTWFpQUdJQVVnQ1dwQkFuUWlEV29vQWdBMkFnQWdBeUFNYWlBRElBMXFLQUlBTmdJQUlBWWdCU0FQYWtFQ2RDSU1haUFHSUFWQkFuUWlEV29vQWdBMkFnQWdBeUFNYWlBRElBMXFLQUlBTmdJQUlBVkJBV29pQlNBQ1J3MEFDd3NnQUVIWUFHb2hBQ0FIUVFGcUlnY2dDa2NOQUFzTElBUkJBRFlDT0NBRVFRSTJBa2dnQkNBQlFRSnFOZ0kwSUFRZ0FVRUJhallDTUNBRUlBUW9Ba1JCQVhNMkFrUUxDNDRIQVJCL0lBQW9Bc0FESVFjQ1FBSkFBa0FnQVE0REFBSUJBZ3NnQUNnQzNBTW9BZ2dFUUNBSFFkb0JOZ0lFSUFBb0FpUWlEMEVCVGdSQUlBQW9Bc2dDSWd4QkFtc2hFQ0FNUVFKcUlSRWdBQ2dDMkFFaEN3TkFJQTFCQW5RaUFDQUhLQUpBYWlnQ0FDRUJJQWNvQWp3Z0FHb29BZ0FoQkNBQUlBZHFLQUlJSVFVQ1FDQUxLQUlvSUFzb0FneHNJQXh0SWdZZ0VXd2lBa0VCU0EwQUlBSkJBM0VoQ0VFQUlRQWdBa0VCYTBFRFR3UkFJQUpCZkhFaENRTkFJQUVnQUVFQ2RDSUNhaUFDSUFWcUtBSUFJZ00yQWdBZ0FpQUVhaUFETmdJQUlBRWdBa0VFY2lJRGFpQURJQVZxS0FJQUlnbzJBZ0FnQXlBRWFpQUtOZ0lBSUFFZ0FrRUljaUlEYWlBRElBVnFLQUlBSWdvMkFnQWdBeUFFYWlBS05nSUFJQUVnQWtFTWNpSUNhaUFDSUFWcUtBSUFJZ00yQWdBZ0FpQUVhaUFETmdJQUlBQkJCR29oQUNBSlFRUnJJZ2tOQUFzTElBaEZEUUFEUUNBQklBQkJBblFpQW1vZ0FpQUZhaWdDQUNJSk5nSUFJQUlnQkdvZ0NUWUNBQ0FBUVFGcUlRQWdDRUVCYXlJSURRQUxDd0pBSUFaQkFVZ05BQ0FHUVFGMElnaEJBU0FJUVFGS0d5SURRUUZ4SVFvZ0JpQVFiQ0VDSUFZZ0RHd2hDVUVBSVFBZ0NFRUNUZ1JBSUFOQi92Ly8vd2R4SVFnRFFDQUJJQUFnQW1wQkFuUWlBMm9nQlNBQUlBbHFRUUowSWc1cUtBSUFOZ0lBSUFFZ0Rtb2dBeUFGYWlnQ0FEWUNBQ0FCSUFCQkFYSWlBeUFDYWtFQ2RDSU9haUFGSUFNZ0NXcEJBblFpQTJvb0FnQTJBZ0FnQVNBRGFpQUZJQTVxS0FJQU5nSUFJQUJCQW1vaEFDQUlRUUpySWdnTkFBc0xJQW9FUUNBQklBQWdBbXBCQW5RaUNHb2dCU0FBSUFscVFRSjBJZ0JxS0FJQU5nSUFJQUFnQVdvZ0JTQUlhaWdDQURZQ0FBc2dCa0VEY1NFRlFRQWhBU0FHUVFGclFRTlBCRUFnQmtGOGNTRUFBMEFnQkNBQklBWnJRUUowYWlBRUtBSUFOZ0lBSUFRZ0FVRUJjaUFHYTBFQ2RHb2dCQ2dDQURZQ0FDQUVJQUZCQW5JZ0JtdEJBblJxSUFRb0FnQTJBZ0FnQkNBQlFRTnlJQVpyUVFKMGFpQUVLQUlBTmdJQUlBRkJCR29oQVNBQVFRUnJJZ0FOQUFzTElBVkZEUUFEUUNBRUlBRWdCbXRCQW5ScUlBUW9BZ0EyQWdBZ0FVRUJhaUVCSUFWQkFXc2lCUTBBQ3dzZ0MwSFlBR29oQ3lBTlFRRnFJZzBnRDBjTkFBc0xJQWRCQURZQ1RDQUhRZ0EzQWtRZ0IwRUFOZ0k0RHdzZ0IwSGJBVFlDQkNBSElBY29BalEyQWpBUEN5QUhRZHdCTmdJRUR3c2dBQ2dDQUNJQlFRTTJBaFFnQUNBQktBSUFFUUFBQzhBREFRbC9JQUFnQUVFQlFkQUFJQUFvQWdRb0FnQVJCQUFpQmpZQ3dBTWdCa0haQVRZQ0FDQUFLQUxJQWlFQ0FuOGdBQ2dDM0FNb0FnZ0VRQ0FDUVFGTUJFQWdBQ2dDQUNJQlFUQTJBaFFnQUNBQktBSUFFUUFBSUFBb0FzZ0NJUUlMSUFBb0FzQURJZ1VnQUVFQklBQW9BaVJCQTNRZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0k4SUFWQlFHc2dBU0FBS0FJa0lnTkJBblJxTmdJQUlBTkJBVTRFUUNBQ1FRUnFJUUlnQUNnQzJBRWhBUU5BSUFCQkFTQUJLQUlvSUFFb0FneHNJQUFvQXNnQ2JTSURJQUpzSWdkQkEzUWdBQ2dDQkNnQ0FCRUVBQ0VJSUFSQkFuUWlDU0FGS0FJOGFpQUlJQU5CQW5ScUlnTTJBZ0FnQlNnQ1FDQUphaUFESUFkQkFuUnFOZ0lBSUFGQjJBQnFJUUVnQkVFQmFpSUVJQUFvQWlRaUEwZ05BQXNMSUFBb0FzZ0NJZ0pCQW1vTUFRc2dCaUFDTmdJMElBQW9BaVFoQXlBQ0N5RUZBa0FnQTBFQlNBMEFJQVpCQ0dvaEF5QUFLQUxZQVNFQlFRQWhCQU5BSUFNZ0JFRUNkR29nQUVFQklBRW9BaVFnQVNnQ0hHd2dBU2dDS0NBQktBSU1iQ0FDYlNBRmJDQUFLQUlFS0FJSUVRa0FOZ0lBSUFSQkFXb2lCQ0FBS0FJa1RnMEJJQUZCMkFCcUlRRWdBQ2dDeUFJaEFnd0FDd0FMQzR3TEFTeC9Jd0JCZ0FGcklnY2tBQ0FBS0FMTUFrRUJheUVjSUFBb0FzUURJUlFDZndKQUEwQWdBQ2dDa0FFaUF5QUFLQUtZQVNJRlNnMEJJQUFvQXN3RElnNG9BaFFOQVNBRElBVkdCRUFnQUNnQ2xBRWdBQ2dDbkFFZ0FDZ0NuQU5GYWtzTkFnc2dBQ0FPS0FJQUVRRUFEUUFMUVFBTUFRc2dBQ2dDSkVFQlRnUkFJQUFvQXRnQklRZ0RRQUpBSUFnb0FqUkZEUUFDZnlBY0lBQW9BcHdCSWhOTEJFQWdDQ2dDRENJRFFRRjBJUXNnQXd3QkN5QUlLQUlnSUFnb0Fnd2lBM0FpQlNBRElBVWJJZ3NMSVJVQ2Z5QVRCRUFnQUNBVUlCQkJBblJxS0FKSUlBTWdFMEVCYTJ3Z0F5QUxha0VBSUFBb0FnUW9BaUFSQ0FBZ0NDZ0NERUVDZEdvTUFRc2dBQ0FVSUJCQkFuUnFLQUpJUVFBZ0MwRUFJQUFvQWdRb0FpQVJDQUFMSVNvZ0ZVRUJTQTBBSUJRb0FuQWdFRUVZYkdvaEVTQVFRUUowSWc0Z0FDZ0MyQU5xS0FJRUlTc2dDQ2dDVUNJREx3RUVJZ1ZCQ0hRaEhTQUZRUWQwSVI0Z0F5OEJFaUlGUVFoMElSOGdCVUVIZENFZ0lBTXZBUUFpQlVFRmJDRXNJQU12QVNBaURFRUlkQ0VoSUF4QkIzUWhJaUFGUVFsc0lTTWdBeThCRUNJTVFRaDBJU1FnREVFSGRDRWxJQU12QVFJaUEwRUlkQ0VtSUFOQkIzUWhKeUFGUVNSc0lTZ2dGVUVCYXlFdElBRWdEbW9vQWdBaEZrRUFJUklEUUNBcUlCSkJBblJxSWdNb0FnQWlDeUVQSUJJZ0UzSUVRQ0FEUVFScktBSUFJUThMSUFnb0FoeEJBV3NoS1VFQUlSY0NmeUFUSUJ4UEJFQWdDeUFTSUMxR0RRRWFDeUFES0FJRUN5SVlMZ0VBSWhraEF5QUxMZ0VBSWd3aEJTQVBMZ0VBSWhvaERrRUFJUnNEUUNBT0lRWWdHaUVPSUFVaENTQU1JUVVnQXlFTklCa2hBeUFISUF0QmdBRVFQeG9nRnlBcFNRUkFJQmd1QVlBQklSa2dEeTRCZ0FFaEdpQUxMZ0dBQVNFTUN3SkFJQkVvQWdRaUJFVU5BQ0FITHdFQ0RRQWdCd0ovSUNnZ0NTQU1hMndpQWtFQVRnUkFJQUlnSjJvZ0ptMGlBaUFDUVFFZ0JIUWlDa0VCYXlBQ0lBcElHeUFFUVFGSUd3d0JDMEVBSUNjZ0Ftc2dKbTBpQWlBQ1FRRWdCSFFpQ2tFQmF5QUNJQXBJR3lBRVFRRklHMnNMT3dFQ0N3SkFJQkVvQWdnaUJFVU5BQ0FITHdFUURRQWdCd0ovSUNnZ0RpQURhMndpQWtFQVRnUkFJQUlnSldvZ0pHMGlBaUFDUVFFZ0JIUWlDa0VCYXlBQ0lBcElHeUFFUVFGSUd3d0JDMEVBSUNVZ0Ftc2dKRzBpQWlBQ1FRRWdCSFFpQ2tFQmF5QUNJQXBJR3lBRVFRRklHMnNMT3dFUUN3SkFJQkVvQWd3aUJFVU5BQ0FITHdFZ0RRQWdCd0ovSUNNZ0RpQUZRUUYwYXlBRGFtd2lBa0VBVGdSQUlBSWdJbW9nSVcwaUFpQUNRUUVnQkhRaUNrRUJheUFDSUFwSUd5QUVRUUZJR3d3QkMwRUFJQ0lnQW1zZ0lXMGlBaUFDUVFFZ0JIUWlDa0VCYXlBQ0lBcElHeUFFUVFGSUcyc0xPd0VnQ3dKQUlCRW9BaEFpQkVVTkFDQUhMd0VTRFFBZ0J3Si9JQ3dnQmlBTmF5QWFheUFaYW13aUJrRUFUZ1JBSUFZZ0lHb2dIMjBpQmlBR1FRRWdCSFFpRFVFQmF5QUdJQTFJR3lBRVFRRklHd3dCQzBFQUlDQWdCbXNnSDIwaUJpQUdRUUVnQkhRaURVRUJheUFHSUExSUd5QUVRUUZJRzJzTE93RVNDd0pBSUJFb0FoUWlCa1VOQUNBSEx3RUVEUUFnQndKL0lDTWdDU0FGUVFGMGF5QU1hbXdpQ1VFQVRnUkFJQWtnSG1vZ0hXMGlDU0FKUVFFZ0JuUWlEVUVCYXlBSklBMUlHeUFHUVFGSUd3d0JDMEVBSUI0Z0NXc2dIVzBpQ1NBSlFRRWdCblFpRFVFQmF5QUpJQTFJR3lBR1FRRklHMnNMT3dFRUN5QUFJQWdnQnlBV0lCc2dLeEVIQUNBWVFZQUJhaUVZSUE5QmdBRnFJUThnQzBHQUFXb2hDeUFJS0FJa0lCdHFJUnNnRjBFQmFpSVhJQ2xORFFBTElCWWdDQ2dDS0VFQ2RHb2hGaUFTUVFGcUloSWdGVWNOQUFzTElBaEIyQUJxSVFnZ0VFRUJhaUlRSUFBb0FpUklEUUFMQ3lBQUlBQW9BcHdCUVFGcUlnRTJBcHdCUVFOQkJDQUJJQUFvQXN3Q1NSc0xJUUFnQjBHQUFXb2tBQ0FBQy9vRkFSTi9JQUFvQXN3Q0lRUUNRQ0FBS0FMRUF5SUZLQUlZSWdrZ0JTZ0NIQ0lDU0FSQUlBUkJBV3NoRVNBQUtBTG9Ba0VCYXlFTklBVkJJR29oQ3lBRktBSVVJUVlEUUNBR0lBMU5CRUFEUUNBQUtBSzBBd1JBSUFzb0FnQkJBQ0FBS0FMd0FrRUhkQkE3R2dzZ0FDQUxJQUFvQXRRREtBSUVFUU1BUlEwRUlBQW9BdFFDSWdKQkFVNEVRRUVBSVFkQkFDRU9BMEFDUUNBQUlBNUJBblJxS0FMWUFpSURLQUkwUlFSQUlBTW9Ba0FnQjJvaEJ3d0JDeUFES0FJOElnUkJBVWdOQUNBREtBSkVJQVpzSVJJZ0F5Z0NCRUVDZENJQ0lBQW9BdGdEYWlnQ0JDRVBJQUVnQW1vb0FnQWdBeWdDS0NJQ0lBbHNRUUowYWlFS0lBTkJPRUhJQUNBR0lBMUpHMm9vQWdBaURFRUJJQXhCQVVvYklnaEIvdi8vL3dkeElSTWdDRUVCY1NFVVFRQWhFQU5BQWtBQ1FDQVJJQUFvQXBRQlRRUkFJQXhCQVVnTkFpQURLQUpNSUFrZ0VHcEtEUUVNQWdzZ0RFRUJTQTBCQzBFQUlRUWdFaUVDSUJNaENDQU1RUUpPQkVBRFFDQUFJQU1nQ3lBRUlBZHFRUUowYWlnQ0FDQUtJQUlnRHhFSEFDQUFJQU1nQ3lBRVFRRnlJQWRxUVFKMGFpZ0NBQ0FLSUFNb0FpUWdBbW9pQWlBUEVRY0FJQVJCQW1vaEJDQURLQUlrSUFKcUlRSWdDRUVDYXlJSURRQUxDeUFVQkVBZ0FDQURJQVVnQkNBSGFrRUNkR29vQWlBZ0NpQUNJQThSQndBTElBTW9BandoQkNBREtBSW9JUUlMSUFvZ0FrRUNkR29oQ2lBREtBSTRJQWRxSVFjZ0VFRUJhaUlRSUFSSURRQUxJQUFvQXRRQ0lRSUxJQTVCQVdvaURpQUNTQTBBQ3dzZ0JrRUJhaUlHSUExTkRRQUxJQVVvQWh3aEFndEJBQ0VHSUFWQkFEWUNGQ0FKUVFGcUlna2dBa2dOQUFzZ0FDZ0N6QUloQkF0QkFTRUNJQUFnQUNnQ25BRkJBV28yQXB3QklBQWdBQ2dDbEFGQkFXb2lBVFlDbEFFZ0FTQUVTUVJBSUFBb0FzUURJUWdnQUNnQzFBSkJBVXdFUUNBQUtBTFlBa0VNUWN3QUlBRWdCRUVCYTBrYmFpZ0NBQ0VDQ3lBSVFnQTNBaFFnQ0NBQ05nSWNRUU1QQ3lBQUlBQW9Bc3dES0FJTUVRQUFRUVFQQ3lBRklBWTJBaFFnQlNBSk5nSVlRUUFMcWdVQkUzOGpBRUVRYXlJSkpBQWdBQ2dDeEFNaEJDQUFLQUxVQWtFQlRnUkFBMEFnQ1NBQlFRSjBJZ05xSUFBZ0JDQUFJQU5xS0FMWUFpSURLQUlFUVFKMGFpZ0NTQ0FES0FJTUlnTWdBQ2dDbEFGc0lBTkJBU0FBS0FJRUtBSWdFUWdBTmdJQUlBRkJBV29pQVNBQUtBTFVBa2dOQUFzTEFuOGdCQ2dDR0NJSElBUW9BaHdpQWtnRVFDQUVRU0JxSVE0Z0FDZ0M2QUloQVNBRUtBSVVJUVlEUUNBQklBWkxCRUFEUUVFQUlRcEJBQ0VDSUFBb0F0UUNJZzlCQVU0RVFBTkFJQUFnQ2tFQ2RDSUZhaWdDMkFJaUF5Z0NQQ0lRUVFGT0JFQWdBeWdDT0NJSUlBWnNJUkVnQ0VGOGNTRUxJQWhCQTNFaEF5QUlRUUZySVJJZ0JTQUphaWdDQUNFVFFRQWhEQU5BQWtBZ0NFRUJTQTBBSUJNZ0J5QU1ha0VDZEdvb0FnQWdFVUVIZEdvaEFTQUxJUVVnRWtFRFR3UkFBMEFnQkNBQ1FRSjBhaUlOSUFGQmdBRnFOZ0lrSUEwZ0FUWUNJQ0FOSUFGQmdBSnFOZ0lvSUEwZ0FVR0FBMm8yQWl3Z0FrRUVhaUVDSUFGQmdBUnFJUUVnQlVFRWF5SUZEUUFMQ3lBRElRVWdBMFVOQUFOQUlBUWdBa0VDZEdvZ0FUWUNJQ0FDUVFGcUlRSWdBVUdBQVdvaEFTQUZRUUZySWdVTkFBc0xJQXhCQVdvaURDQVFSdzBBQ3dzZ0NrRUJhaUlLSUE5SERRQUxDeUFBSUE0Z0FDZ0MxQU1vQWdRUkF3QkZCRUFnQkNBR05nSVVJQVFnQnpZQ0dFRUFEQVVMSUFaQkFXb2lCaUFBS0FMb0FpSUJTUTBBQ3lBRUtBSWNJUUlMUVFBaEJpQUVRUUEyQWhRZ0IwRUJhaUlISUFKSURRQUxDMEVCSVFJZ0FDQUFLQUtVQVVFQmFpSUROZ0tVQVNBQUtBTE1BaUlMSUFOTEJFQWdBQ2dDeEFNaEJTQUFLQUxVQWtFQlRBUkFJQUFvQXRnQ1FReEJ6QUFnQXlBTFFRRnJTUnRxS0FJQUlRSUxJQVZDQURjQ0ZDQUZJQUkyQWh4QkF3d0JDeUFBSUFBb0Fzd0RLQUlNRVFBQVFRUUxJUUVnQ1VFUWFpUUFJQUVMcGdNQkRYOGdBQ2dDekFKQkFXc2hDeUFBS0FMRUF5RU1Ba0FEUUNBQUtBS1FBU0lESUFBb0FwZ0JJZ1JPQkVBZ0F5QUVSdzBDSUFBb0FwUUJJQUFvQXB3QlN3MENDeUFBSUFBb0Fzd0RLQUlBRVFFQURRQUxRUUFQQ3lBQUtBSWtRUUZPQkVBZ0FDZ0MyQUVoQWdOQUFrQWdBaWdDTkVVTkFDQUFJQXdnQlVFQ2RDSURhaWdDU0NBQ0tBSU1JZ1FnQUNnQ25BRnNJQVJCQUNBQUtBSUVLQUlnRVFnQUlRMENmeUFMSUFBb0Fwd0JTd1JBSUFJb0Fnd01BUXNnQWlnQ0lDQUNLQUlNSWdSd0lnWWdCQ0FHR3dzaUJrRUJTQTBBSUFBb0F0Z0RJQU5xS0FJRUlRNGdBU0FEYWlnQ0FDRUhJQUlvQWh3aEEwRUFJUWdEUUVFQUlRUWdBd1JBSUEwZ0NFRUNkR29vQWdBaEEwRUFJUWxCQUNFS0EwQWdBQ0FDSUFNZ0J5QUpJQTRSQndBZ0EwR0FBV29oQXlBQ0tBSWtJQWxxSVFrZ0NrRUJhaUlLSUFJb0Fod2lCRWtOQUFzTElBY2dBaWdDS0VFQ2RHb2hCeUFFSVFNZ0NFRUJhaUlJSUFaSERRQUxDeUFDUWRnQWFpRUNJQVZCQVdvaUJTQUFLQUlrU0EwQUN3c2dBQ0FBS0FLY0FVRUJhaUlCTmdLY0FVRURRUVFnQVNBQUtBTE1Ba2tiQzAwQkFuOGdBRUVBTmdLVUFVRUJJUUVnQUNnQ3hBTWhBaUFBS0FMVUFrRUJUQVJBSUFBb0F0Z0NRY3dBUVF3Z0FDZ0N6QUpCQVVZYmFpZ0NBQ0VCQ3lBQ1FnQTNBaFFnQWlBQk5nSWNDellCQVh3Q2YwRi9JQUFyQXdBZ0FTc0RBS0VpQWtRQUFBQUFBQUFBQUdNTkFCcEJBU0FDUkFBQUFBQUFBQUFBWkEwQUdrRUFDd3ZjQWdFSmZ5QUFLQUxFQXlJQktBSVFCRUFnQVFKL0FrQWdBQ2dDVUVVTkFDQUFLQUxnQVVVTkFDQUFLQUtnQVVVTkFDQUJLQUp3SWdKRkJFQWdBU0FBUVFFZ0FDZ0NKRUVZYkNBQUtBSUVLQUlBRVFRQUlnSTJBbkFMSUFBb0FpUkJBVWdOQUNBQUtBTFlBU0VEQTBBZ0F5Z0NVQ0lCUlEwQklBRXZBUUJGRFFFZ0FTOEJBa1VOQVNBQkx3RVFSUTBCSUFFdkFTQkZEUUVnQVM4QkVrVU5BU0FCTHdFRVJRMEJJQUFvQXFBQklBVkJDSFJxSWdFb0FnQkJBRWdOQVNBQ0lBRW9BZ1EyQWdRZ0FTZ0NCQ0VHSUFJZ0FTZ0NDRFlDQ0NBQktBSUlJUWNnQWlBQktBSU1OZ0lNSUFFb0Fnd2hDQ0FDSUFFb0FoQTJBaEFnQVNnQ0VDRUpJQUlnQVNnQ0ZEWUNGRUVCSUFRZ0FTZ0NGQ0FKSUFnZ0JpQUhjbkp5Y2hzaEJDQURRZGdBYWlFRElBSkJHR29oQWlBRlFRRnFJZ1VnQUNnQ0pFZ05BQXRCMkFFZ0JBMEJHZ3RCMUFFTE5nSU1DeUFBUVFBMkFwd0JDNFVEQVFaL0lBQWdBRUVCUWZRQUlBQW9BZ1FvQWdBUkJBQWlBallDeEFNZ0FrRUFOZ0p3SUFKQjBnRTJBZ2dnQWtIVEFUWUNBQ0FCQkVBZ0FDZ0NKRUVCVGdSQUlBSkJ5QUJxSVFVZ0FDZ0MyQUVoQVFOQUlBRW9BZ3doQkNBQUtBTGdBU0VHSUFBb0FnUW9BaFFoQnlBRklBTkJBblJxSUFCQkFVRUJJQUVvQWh3Z0FTZ0NDQkM3QXlBQktBSWdJQUVvQWd3UXV3TWdCRUVEYkNBRUlBWWJJQWNSQ2dBMkFnQWdBVUhZQUdvaEFTQURRUUZxSWdNZ0FDZ0NKRWdOQUFzTElBSkIxQUUyQWd3Z0FrSFZBVFlDQkNBQ0lBSkJ5QUJxTmdJUUR3c2dBaUFBUVFGQmdBb2dBQ2dDQkNnQ0JCRUVBQ0lCTmdJZ0lBSWdBVUdBQ1dvMkFrUWdBaUFCUVlBSWFqWUNRQ0FDSUFGQmdBZHFOZ0k4SUFJZ0FVR0FCbW8yQWpnZ0FpQUJRWUFGYWpZQ05DQUNJQUZCZ0FScU5nSXdJQUlnQVVHQUEybzJBaXdnQWlBQlFZQUNhallDS0NBQ0lBRkJnQUZxTmdJa0lBQW9BclFEUlFSQUlBRkJBRUdBQ2hBN0dnc2dBa0VBTmdJUUlBSkIxZ0UyQWd3Z0FrSFhBVFlDQkF2eUNnRU9meU1BUVRCcklnUWtBQ0FBS0FMVUF5RUhBbjhDUUNBQUtBS1lBa1VOQUNBSEtBSXNEUUFnQUNnQzBBTWlBeUFES0FJWUlBY29BaEJCQ0cxcU5nSVlJQWRCQURZQ0VFRUFJQUFnQXlnQ0NCRUJBRVVOQVJvZ0FDZ0MxQUpCQVU0RVFFRUFJUU1EUUNBSElBTkJBblJxUVFBMkFoZ2dBMEVCYWlJRElBQW9BdFFDU0EwQUN3c2dCMEVBTmdJVUlBY2dBQ2dDbUFJMkFpd2dBQ2dDdUFNTkFDQUhRUUEyQWlnTElBY29BaWhGQkVBZ0FDZ0N0QU1oRFNBQUtBS3dBeUVQSUFRZ0FEWUNLQ0FFSUFBb0FoZ2lCaWdDQUNJSU5nSVlJQVFnQmlnQ0JDSUNOZ0ljSUFjb0FoQWhBeUFIS0FJTUlRVWdCQ0FIS0FJa05nSVFJQVFnQnlrQ0hEY0RDQ0FFSUFjcEFoUTNBd0FnQUNnQzhBSkJBVTRFUUFOQUlBRWdERUVDZENJTGFpZ0NBQ0VPSUFjZ0Myb2lDaWdDWkNFR0FuOENRQUovSUFOQkIwd0VRRUVBSUFSQkdHb2dCU0FEUVFBUWFVVU5CeG9nQkNnQ0lDRUZRUUVnQkNnQ0pDSURRUWhJRFFFYUN5QUdJQVVnQTBFSWEzVkIvd0Z4SWdKQkFuUnFLQUtRQVNJSURRRkJDUXNoQWtFQUlBUkJHR29nQlNBRElBWWdBaERvQVNJQ1FRQklEUVVhSUFRb0FpQWhCU0FFS0FJa0RBRUxJQUlnQm1wQmtBbHFMUUFBSVFJZ0F5QUlhd3NoQXlBS0tBS01BU0VKQWtBQ1FDQUtLQUswQVNJS0JFQWdBZ1IvSUFJZ0Ewb0VRRUVBSUFSQkdHb2dCU0FESUFJUWFVVU5DQm9nQkNnQ0lDRUZJQVFvQWlRaEF3c2dBa0VDZENJR1FmREZBbW9vQWdBaUNDQUZJQU1nQW1zaUEzVnhJZ0pCQUNBSUlBSWdCa0hzeFFKcUtBSUFTaHRyQlVFQUN5RUNJQVFnQUNBTGFpZ0M5QUpCQW5ScUlnWkJCR29nQmlnQ0JDQUNhaUlDTmdJQUlBNGdBanNCQUVFQklRWWdDa0VDU0EwQkEwQUNmd0pBQW44Z0EwRUhUQVJBUVFBZ0JFRVlhaUFGSUFOQkFCQnBSUTBMR2lBRUtBSWdJUVZCQVNBRUtBSWtJZ05CQ0VnTkFSb0xJQWtnQlNBRFFRaHJkVUgvQVhFaUFrRUNkR29vQXBBQklnZ05BVUVKQ3lFQ1FRQWdCRUVZYWlBRklBTWdDU0FDRU9nQklnSkJBRWdOQ1JvZ0JDZ0NJQ0VGSUFRb0FpUU1BUXNnQWlBSmFrR1FDV290QUFBaEFpQURJQWhyQ3lFRElBSkJCSFloQ0FKQUlBSkJEM0VpQWdSQUlBSWdBMG9FUUVFQUlBUkJHR29nQlNBRElBSVFhVVVOQ2hvZ0JDZ0NJQ0VGSUFRb0FpUWhBd3NnRGlBUElBWWdDR29pQmtFQ2RHb29BZ0JCQVhScUlBSkJBblFpQ0VId3hRSnFLQUlBSWdzZ0JTQURJQUpySWdOMWNTSUNRUUFnQ3lBQ0lBaEI3TVVDYWlnQ0FFb2JhenNCQUF3QkN5QUlRUTlIRFFRZ0JrRVBhaUVHQ3lBR1FRRnFJZ1lnQ2tnTkFBc01BUXRCQVNFR0lBSkZEUUFnQWlBRFNnUi9RUUFnQkVFWWFpQUZJQU1nQWhCcFJRMEdHaUFFS0FJZ0lRVWdCQ2dDSkFVZ0F3c2dBbXNoQXdzZ0JpQU5TZzBBQTBBQ2Z3SkFBbjhnQTBFSFRBUkFRUUFnQkVFWWFpQUZJQU5CQUJCcFJRMEpHaUFFS0FJZ0lRVkJBU0FFS0FJa0lnTkJDRWdOQVJvTElBa2dCU0FEUVFocmRVSC9BWEVpQWtFQ2RHb29BcEFCSWdnTkFVRUpDeUVDUVFBZ0JFRVlhaUFGSUFNZ0NTQUNFT2dCSWdKQkFFZ05CeG9nQkNnQ0lDRUZJQVFvQWlRTUFRc2dBaUFKYWtHUUNXb3RBQUFoQWlBRElBaHJDeUVESUFKQkJIWWhDQUpBSUFKQkQzRWlBZ1JBSUFJZ0Ewb0VmMEVBSUFSQkdHb2dCU0FESUFJUWFVVU5DQm9nQkNnQ0lDRUZJQVFvQWlRRklBTUxJQUpySVFNTUFRc2dDRUVQUncwQ0N5QUdJQWhxUVFGcUlnWWdEVXdOQUFzTElBeEJBV29pRENBQUtBTHdBa2dOQUFzZ0FDZ0NHQ0VHSUFRb0FoZ2hDQ0FFS0FJY0lRSUxJQVlnQWpZQ0JDQUdJQWcyQWdBZ0J5QUROZ0lRSUFjZ0JUWUNEQ0FISUFRb0FoQTJBaVFnQnlBRUtRTUlOd0ljSUFjZ0JDa0RBRGNDRkFzZ0J5QUhLQUlzUVFGck5nSXNRUUVMSVFnZ0JFRXdhaVFBSUFnTDVRb0JESDhqQUVFd2F5SUVKQUFnQUNnQzFBTWhCZ0ovQWtBZ0FDZ0NtQUpGRFFBZ0JpZ0NMQTBBSUFBb0F0QURJZ01nQXlnQ0dDQUdLQUlRUVFodGFqWUNHQ0FHUVFBMkFoQkJBQ0FBSUFNb0FnZ1JBUUJGRFFFYUlBQW9BdFFDUVFGT0JFQkJBQ0VEQTBBZ0JpQURRUUowYWtFQU5nSVlJQU5CQVdvaUF5QUFLQUxVQWtnTkFBc0xJQVpCQURZQ0ZDQUdJQUFvQXBnQ05nSXNJQUFvQXJnRERRQWdCa0VBTmdJb0N5QUdLQUlvUlFSQUlBUWdBRFlDS0NBRUlBQW9BaGdpQWlnQ0FDSUlOZ0lZSUFRZ0FpZ0NCQ0lKTmdJY0lBWW9BaEFoQXlBR0tBSU1JUVVnQkNBR0tBSWtOZ0lRSUFRZ0Jpa0NIRGNEQ0NBRUlBWXBBaFEzQXdBZ0FDZ0M4QUpCQVU0RVFBTkFJQUVnQzBFQ2RDSUthaWdDQUNFTUlBWWdDbW9pQ0NnQ1pDRUNBbjhDUUFKL0lBTkJCMHdFUUVFQUlBUkJHR29nQlNBRFFRQVFhVVVOQnhvZ0JDZ0NJQ0VGUVFFZ0JDZ0NKQ0lEUVFoSURRRWFDeUFDSUFVZ0EwRUlhM1ZCL3dGeElnZEJBblJxS0FLUUFTSUpEUUZCQ1FzaENVRUFJQVJCR0dvZ0JTQURJQUlnQ1JEb0FTSUNRUUJJRFFVYUlBUW9BaUFoQlNBRUtBSWtEQUVMSUFJZ0IycEJrQWxxTFFBQUlRSWdBeUFKYXdzaEF5QUlLQUtNQVNFSkFrQUNRQ0FJS0FLMEFTSU5CRUFnQWdSL0lBSWdBMG9FUUVFQUlBUkJHR29nQlNBRElBSVFhVVVOQ0JvZ0JDZ0NJQ0VGSUFRb0FpUWhBd3NnQWtFQ2RDSUhRZkRGQW1vb0FnQWlDQ0FGSUFNZ0Ftc2lBM1Z4SWdKQkFDQUlJQUlnQjBIc3hRSnFLQUlBU2h0ckJVRUFDeUVJSUFRZ0FDQUthaWdDOUFKQkFuUnFJZ0pCQkdvZ0FpZ0NCQ0FJYWlJQ05nSUFJQXdnQWpzQkFFRUJJUWdnRFVFQ1NBMEJBMEFDZndKQUFuOGdBMEVIVEFSQVFRQWdCRUVZYWlBRklBTkJBQkJwUlEwTEdpQUVLQUlnSVFWQkFTQUVLQUlrSWdOQkNFZ05BUm9MSUFrZ0JTQURRUWhyZFVIL0FYRWlBa0VDZEdvb0FwQUJJZ2NOQVVFSkN5RUNRUUFnQkVFWWFpQUZJQU1nQ1NBQ0VPZ0JJZ0pCQUVnTkNSb2dCQ2dDSUNFRklBUW9BaVFNQVFzZ0FpQUpha0dRQ1dvdEFBQWhBaUFESUFkckN5RURJQUpCQkhZaEJ3SkFJQUpCRDNFaUFnUkFJQUlnQTBvRVFFRUFJQVJCR0dvZ0JTQURJQUlRYVVVTkNob2dCQ2dDSUNFRklBUW9BaVFoQXdzZ0RDQUhJQWhxSWdkQkFuUkJnTEFDYWlnQ0FFRUJkR29nQWtFQ2RDSUlRZkRGQW1vb0FnQWlDaUFGSUFNZ0Ftc2lBM1Z4SWdKQkFDQUtJQUlnQ0VIc3hRSnFLQUlBU2h0ck93RUFEQUVMSUFkQkQwY05CQ0FJUVE5cUlRY0xJQWRCQVdvaUNDQU5TQTBBQ3lBSFFUNU1EUUVNQWd0QkFTRUlJQUpGRFFBZ0FpQURTZ1IvUVFBZ0JFRVlhaUFGSUFNZ0FoQnBSUTBHR2lBRUtBSWdJUVVnQkNnQ0pBVWdBd3NnQW1zaEF3c0RRQUovQWtBQ2Z5QURRUWRNQkVCQkFDQUVRUmhxSUFVZ0EwRUFFR2xGRFFrYUlBUW9BaUFoQlVFQklBUW9BaVFpQTBFSVNBMEJHZ3NnQ1NBRklBTkJDR3QxUWY4QmNTSUNRUUowYWlnQ2tBRWlCdzBCUVFrTElRSkJBQ0FFUVJocUlBVWdBeUFKSUFJUTZBRWlBa0VBU0EwSEdpQUVLQUlnSVFVZ0JDZ0NKQXdCQ3lBQ0lBbHFRWkFKYWkwQUFDRUNJQU1nQjJzTElRTWdBa0VFZGlFSEFrQWdBa0VQY1NJQ0JFQWdBaUFEU2dSL1FRQWdCRUVZYWlBRklBTWdBaEJwUlEwSUdpQUVLQUlnSVFVZ0JDZ0NKQVVnQXdzZ0Ftc2hBd3dCQ3lBSFFROUhEUUlMSUFjZ0NHcEJBV29pQ0VIQUFFZ05BQXNMSUF0QkFXb2lDeUFBS0FMd0FrZ05BQXNnQkNnQ0hDRUpJQVFvQWhnaENDQUFLQUlZSVFJTElBSWdDVFlDQkNBQ0lBZzJBZ0FnQmlBRE5nSVFJQVlnQlRZQ0RDQUdJQVFvQWhBMkFpUWdCaUFFS1FNSU53SWNJQVlnQkNrREFEY0NGQXNnQmlBR0tBSXNRUUZyTmdJc1FRRUxJUWNnQkVFd2FpUUFJQWNMNXdVQkMzOGpBRUV3YXlJREpBQWdBQ2dDcUFNaENpQUFLQUxVQXlFRUFuOENRQ0FBS0FLWUFrVU5BQ0FFS0FJc0RRQWdBQ2dDMEFNaUJTQUZLQUlZSUFRb0FoQkJDRzFxTmdJWUlBUkJBRFlDRUVFQUlBQWdCU2dDQ0JFQkFFVU5BUm9nQUNnQzFBSkJBVTRFUUVFQUlRVURRQ0FFSUFWQkFuUnFRUUEyQWhnZ0JVRUJhaUlGSUFBb0F0UUNTQTBBQ3dzZ0JFRUFOZ0lVSUFRZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBRVFRQTJBaWdMSUFRb0FpaEZCRUFnQXlBQU5nSW9JQU1nQUNnQ0dDSUNLQUlBSWdnMkFoZ2dBeUFDS0FJRUlnWTJBaHdnQkNnQ0VDRUZJQVFvQWd3aEJ5QURJQVFvQWlRMkFoQWdBeUFFS1FJY053TUlJQU1nQkNrQ0ZEY0RBQ0FBS0FMd0FrRUJUZ1JBUVFBaENBTkFJQUVnQ0VFQ2RDSUNhaWdDQUNFTElBUWdBQ0FBSUFKcUtBTDBBa0VDZENJTWFpZ0MyQUlvQWhSQkFuUnFLQUl3SVFJQ2Z3SkFBbjhnQlVFSFRBUkFRUUFnQTBFWWFpQUhJQVZCQUJCcFJRMEhHaUFES0FJZ0lRZEJBU0FES0FJa0lnVkJDRWdOQVJvTElBSWdCeUFGUVFocmRVSC9BWEVpQmtFQ2RHb29BcEFCSWdrTkFVRUpDeUVKUVFBZ0EwRVlhaUFISUFVZ0FpQUpFT2dCSWdKQkFFZ05CUm9nQXlnQ0lDRUhJQU1vQWlRTUFRc2dBaUFHYWtHUUNXb3RBQUFoQWlBRklBbHJDeUVGSUFJRWZ5QUNJQVZLQkVCQkFDQURRUmhxSUFjZ0JTQUNFR2xGRFFVYUlBTW9BaUFoQnlBREtBSWtJUVVMSUFKQkFuUWlCa0h3eFFKcUtBSUFJZ2tnQnlBRklBSnJJZ1YxY1NJQ1FRQWdDU0FDSUFaQjdNVUNhaWdDQUVvYmF3VkJBQXNoQmlBRElBeHFJZ0pCQkdvZ0FpZ0NCQ0FHYWlJQ05nSUFJQXNnQWlBS2REc0JBQ0FJUVFGcUlnZ2dBQ2dDOEFKSURRQUxJQU1vQWh3aEJpQURLQUlZSVFnZ0FDZ0NHQ0VDQ3lBQ0lBWTJBZ1FnQWlBSU5nSUFJQVFnQlRZQ0VDQUVJQWMyQWd3Z0JDQURLQUlRTmdJa0lBUWdBeWtEQ0RjQ0hDQUVJQU1wQXdBM0FoUUxJQVFnQkNnQ0xFRUJhellDTEVFQkN5RUdJQU5CTUdva0FDQUdDNDhHQVF4L0l3QkJJR3NpQkNRQUlBQW9BdFFESVFVQ2Z3SkFJQUFvQXBnQ1JRMEFJQVVvQWl3TkFDQUFLQUxRQXlJQ0lBSW9BaGdnQlNnQ0VFRUliV28yQWhnZ0JVRUFOZ0lRUVFBZ0FDQUNLQUlJRVFFQVJRMEJHaUFBS0FMVUFrRUJUZ1JBUVFBaEFnTkFJQVVnQWtFQ2RHcEJBRFlDR0NBQ1FRRnFJZ0lnQUNnQzFBSklEUUFMQ3lBRlFRQTJBaFFnQlNBQUtBS1lBallDTENBQUtBSzRBdzBBSUFWQkFEWUNLQXNnQlNnQ0tFVUVRQUpBSUFVb0FoUWlBZ1JBSUFKQkFXc2hBd3dCQ3lBRUlBQTJBaGdnQkNBQUtBSVlJZ0lvQWdBMkFnZ2dCQ0FDS0FJRU5nSU1JQVVvQWhBaEFpQUZLQUlNSVFZQ1FDQUFLQUtjQXlJSElBQW9BcUFESWdwS0RRQWdCU2dDUUNFSUlBRW9BZ0FoQ3lBQUtBS3dBeUVNSUFBb0FxZ0RJUTBEUUFKL0FrQUNmeUFDUVFkTUJFQkJBQ0FFUVFocUlBWWdBa0VBRUdsRkRRZ2FJQVFvQWhBaEJrRUJJQVFvQWhRaUFrRUlTQTBCR2dzZ0NDQUdJQUpCQ0d0MVFmOEJjU0lCUVFKMGFpZ0NrQUVpQXcwQlFRa0xJUU5CQUNBRVFRaHFJQVlnQWlBSUlBTVE2QUVpQVVFQVNBMEdHaUFFS0FJUUlRWWdCQ2dDRkF3QkN5QUJJQWhxUVpBSmFpMEFBQ0VCSUFJZ0Eyc0xJUUlnQVVFRWRpRURBa0FnQVVFUGNTSUJCRUFnQVNBQ1NnUkFRUUFnQkVFSWFpQUdJQUlnQVJCcFJRMEhHaUFFS0FJUUlRWWdCQ2dDRkNFQ0N5QUxJQXdnQXlBSGFpSURRUUowYWlnQ0FFRUJkR29nQVVFQ2RDSUpRZkRGQW1vb0FnQWlCeUFHSUFJZ0FXc2lBblZ4SWdGQkFDQUhJQUVnQ1VIc3hRSnFLQUlBU2h0cklBMTBPd0VBREFFTElBTkJEMGNFUUNBRFJRMERJQUlnQTBnRVFFRUFJQVJCQ0dvZ0JpQUNJQU1RYVVVTkJ4b2dCQ2dDRUNFR0lBUW9BaFFoQWdzZ0EwRUNkRUh3eFFKcUtBSUFJQVlnQWlBRGF5SUNkWEZCZnlBRGRFRi9jMm9oQXd3REN5QUhRUTlxSVFNTElBTkJBV29oQnlBRElBcElEUUFMUVFBaEF3c2dBQ2dDR0NJQUlBUW9BZ2cyQWdBZ0FDQUVLQUlNTmdJRUlBVWdBallDRUNBRklBWTJBZ3dMSUFVZ0F6WUNGQXNnQlNBRktBSXNRUUZyTmdJc1FRRUxJUWtnQkVFZ2FpUUFJQWtMcVFNQkNIOGpBRUVnYXlJRUpBQWdBQ2dDMUFNaEF3SkFBa0FnQUNnQ21BSkZEUUFnQXlnQ0xBMEFJQUFvQXRBRElnSWdBaWdDR0NBREtBSVFRUWh0YWpZQ0dDQURRUUEyQWhBZ0FDQUNLQUlJRVFFQVJRMEJJQUFvQXRRQ1FRRk9CRUJCQUNFQ0EwQWdBeUFDUVFKMGFrRUFOZ0lZSUFKQkFXb2lBaUFBS0FMVUFrZ05BQXNMSUFOQkFEWUNGQ0FESUFBb0FwZ0NOZ0lzSUFBb0FyZ0REUUFnQTBFQU5nSW9DeUFFSUFBMkFoZ2dCQ0FBS0FJWUlnVW9BZ0FpQmpZQ0NDQUVJQVVvQWdRaUJ6WUNERUVCSVFrZ0F5Z0NFQ0VDSUFNb0Fnd2hDQ0FBS0FMd0FrRUJUZ1JBUVFFZ0FDZ0NxQU4wSVFaQkFDRUZBMEFnQWtFQVRBUkFJQVJCQ0dvZ0NDQUNRUUVRYVVVRVFFRUFJUWtNQkFzZ0JDZ0NFQ0VJSUFRb0FoUWhBZ3NnQ0NBQ1FRRnJJZ0oyUVFGeEJFQWdBU0FGUVFKMGFpZ0NBQ0lISUFjdkFRQWdCbkk3QVFBTElBVkJBV29pQlNBQUtBTHdBa2dOQUFzZ0JDZ0NEQ0VISUFRb0FnZ2hCaUFBS0FJWUlRVUxJQVVnQnpZQ0JDQUZJQVkyQWdBZ0F5QUNOZ0lRSUFNZ0NEWUNEQ0FESUFNb0FpeEJBV3MyQWl3TElBUkJJR29rQUNBSkM1MEpBZ3AvQm53akFFR2dBV3NpQ1NRQVFYOGhCUUpBSUFFb0FnZ2lCa0VFU0EwQUFuOGdBQ3NEZ0FFZ0JyZWlJaENaUkFBQUFBQUFBT0JCWXdSQUlCQ3FEQUVMUVlDQWdJQjRDeUVISUFaQjRBQnNFRG9pQ2tVRVFFRUFRUU5CeVExQkFCQTREQUVMSUFaQkJIUVFPaUlJUlFSQVFRQkJBMEhKRFVFQUVEZ2dDaEF6REFFTElBWkJBM1FpQlJBNklnMUZCRUJCQUVFRFFja05RUUFRT0NBS0VETWdDQkF6UVg4aEJRd0JDeUFGRURvaURBUkFJQWRCQVd0QkF5QUhRUU5LR3lFSFFRQWhCZ05BUVFBaEJTQUdRUU5HQkVBZ0RDQUhRUU4wYWlFT1FRQWhBZ0pBQTBBZ0FDQURJQWxCTUdvUXF3VkJBQ0VGQTBBZ0FTZ0NDQ0lHSUFWS0JFQWdDVUdRQVdvZ0NVRXdhaUFCS0FJRUlBVkJHR3hxRUs4SFFYOU1EUU1nQlVFRWRDSUdJQUVvQWdCcUlnY3JBd2doRVNBSkt3T1lBU0VTSUFZZ0NHb2dCeXNEQUNBSkt3T1FBYUVpRURrREFDQUlJQVpCQ0hKcUlCRWdFcUVpRVRrREFDQU1JQVZCQTNRaUJtb2dFQ0FRb2lBUklCR2lvQ0lRT1FNQUlBWWdEV29nRURrREFDQUZRUUZxSVFVTUFRc0xJQXdnQmtFSVFRRVFnZ2RCQUNFRklBRW9BZ2dpQmtFQUlBWkJBRW9iSVFjZ0Rpc0RBRVFBQUFBQUFBQVFRS0pFQUFBQUFBQUFNRUNsSWhKRUFBQUFBQUFBR0VDaklSQkVBQUFBQUFBQUFBQWhFd05BSUFVZ0IwY0VRQ0FRSVJFZ0RDQUZRUU4wYWlzREFDSVVJQkprUlFSQUlCQkVBQUFBQUFBQThEOUVBQUFBQUFBQThEOGdGQ0FTbzZFaUVTQVJJQkdpb3FHaUlSRUxJQVZCQVdvaEJTQVRJQkdnSVJNTUFRc0xBa0FnRXlBR3Q2TWlFQ0FBS3dOb1l3MEFBa0FnQWtVTkFDQVFJQUFyQTNoalFRRnpEUUFnQUNzRGNDQVFJQStqWXcwQkMwRUFJUWRCQUNFTElBSWdBQ2dDWUVZTkFBTkFJQVlnQjBvRVFDQU5JQWRCQTNScUt3TUFJZzhnRW1WQkFYTkZCRUFnQ2lBTFFRWnNRUU4wSWdacUlnVWdBQ0FESUFFb0FnUWdCMEVZYkdvUXF3ZEJmMHdOQlNBRlJBQUFBQUFBQVBBL0lBOGdFcU9oSWc4Z0Q2SWlEeUFGS3dNQW9qa0RBQ0FLSUFaQkNISnFJZ1lnRHlBR0t3TUFvamtEQUNBRklBOGdCU3NERUtJNUF4QWdCU0FQSUFVckF4aWlPUU1ZSUFVZ0R5QUZLd01nb2prRElDQUZJQThnQlNzREtLSTVBeWdnQlNBUElBVXJBekNpT1FNd0lBVWdEeUFGS3dNNG9qa0RPQ0FGUVVCcklnWWdEeUFHS3dNQW9qa0RBQ0FGSUE4Z0JTc0RTS0k1QTBnZ0JTQVBJQVVyQTFDaU9RTlFJQVVnRHlBRkt3TllvamtEV0NBSUlBdEJBM1JxSWdVZ0R5QUlJQWRCQkhRaUJtb3JBd0NpT1FNQUlBVWdEeUFJSUFaQkNISnFLd01Bb2prRENDQUxRUUpxSVFzZ0FTZ0NDQ0VHQ3lBSFFRRnFJUWNNQVFzTElBdEJCVXdOQWlBSklBZ2dDaUFMRUtnSFFYOU1EUUlnQXlBSkVLVUhJQUpCQVdvaEFpQVFJUThNQVFzTElBUWdFRGtEQUNBS0VETWdDQkF6SUEwUU15QU1FRE5CQUNFRkRBUUxJQW9RTXlBSUVETWdEUkF6SUF3UU0wRi9JUVVNQXdVRFFDQUZRUVJIQkVBZ0JVRURkQ0lMSUFNZ0JrRUZkQ0lPYW1vZ0FpQU9haUFMYWlzREFEa0RBQ0FGUVFGcUlRVU1BUXNMSUFaQkFXb2hCZ3dCQ3dBTEFBdEJBRUVEUWNrTlFRQVFPQ0FLRURNZ0NCQXpJQTBRTTBGL0lRVUxJQWxCb0FGcUpBQWdCUXU5Q2dFUmZ5TUFRYUFDYXlJREpBQWdBQ2dDMUFNaEJnSkFBa0FnQUNnQ21BSkZEUUFnQmlnQ0xBMEFJQUFvQXRBRElna2dDU2dDR0NBR0tBSVFRUWh0YWpZQ0dDQUdRUUEyQWhBZ0FDQUpLQUlJRVFFQVJRMEJJQUFvQXRRQ1FRRk9CRUFEUUNBR0lBSkJBblJxUVFBMkFoZ2dBa0VCYWlJQ0lBQW9BdFFDU0EwQUN3c2dCa0VBTmdJVUlBWWdBQ2dDbUFJMkFpd2dBQ2dDdUFNTkFDQUdRUUEyQWlnTEFrQWdCaWdDS0VVRVFDQUFLQUt3QXlFTklBQW9BcUFESVFzZ0FDZ0NxQU1oQkNBRElBQTJBcGdDSUFNZ0FDZ0NHQ0lKS0FJQU5nS0lBaUFESUFrb0FnUTJBb3dDUVg4Z0JIUWhEa0VCSUFSMElRd2dCaWdDRUNFQ0lBQW9BcHdESVFRZ0FTZ0NBQ0VLSUFZb0Fnd2hCUUovQWtBZ0JpZ0NGQ0lKQkVBTUFRc2dCaWdDUUNFUEEwQUNmd0pBQW44Z0FrRUhUQVJBSUFOQmlBSnFJQVVnQWtFQUVHbEZEUWdnQXlnQ2tBSWhCVUVCSUFNb0FwUUNJZ0pCQ0VnTkFSb0xJQThnQlNBQ1FRaHJkVUgvQVhFaUFVRUNkR29vQXBBQklna05BVUVKQ3lFQklBTkJpQUpxSUFVZ0FpQVBJQUVRNkFFaUFVRUFTQTBHSUFNb0FwQUNJUVVnQXlnQ2xBSU1BUXNnQVNBUGFrR1FDV290QUFBaEFTQUNJQWxyQ3lFQ0lBRkJCSFloQ0FKQUFrQUNRQUpBSUFGQkQzRU9BZ0lCQUFzZ0FDZ0NBQ0lCUWZrQU5nSVVJQUJCZnlBQktBSUVFUUlBQ3lBQ1FRQk1CRUFnQTBHSUFtb2dCU0FDUVFFUWFVVU5CeUFES0FLUUFpRUZJQU1vQXBRQ0lRSUxJQXdnRGlBRklBSkJBV3NpQW5aQkFYRWJJUkFNQVF0QkFDRVFJQWhCRDBZTkFFRUJJUWtnQ0VVTkFpQUNJQWhJQkVBZ0EwR0lBbW9nQlNBQ0lBZ1FhVVVOQmlBREtBS1FBaUVGSUFNb0FwUUNJUUlMSUFoQkFuUkI4TVVDYWlnQ0FDQUZJQUlnQ0dzaUFuVnhRUUVnQ0hScUlna05Ba0VBREFNTElBUWdDeUFFSUF0S0d5SVNRUUZxSVFrQ1FBTkFBa0FnQ2lBTklBUWlBVUVDZEdvb0FnQkJBWFJxSWdRdkFRQUVRQ0FDUVFCTUJFQWdBMEdJQW1vZ0JTQUNRUUVRYVVVTkNTQURLQUtRQWlFRklBTW9BcFFDSVFJTElBVWdBa0VCYXlJQ2RrRUJjVVVOQVNBTUlBUXVBUUFpRVhFTkFTQVJRUUJPQkVBZ0JDQU1JQkZxT3dFQURBSUxJQVFnRGlBUmFqc0JBQXdCQ3lBSVFRRklEUUlnQ0VFQmF5RUlDeUFCUVFGcUlRUWdBU0FTUncwQUN5QUpJUUVMSUJBRVFDQUtJQTBnQVVFQ2RHb29BZ0FpQkVFQmRHb2dFRHNCQUNBRElBZEJBblJxSUFRMkFnQWdCMEVCYWlFSEN5QUJRUUZxSVFRZ0FTQUxTQTBBQzBFQURBRUxJQVFnQ3lBRUlBdEtHeUVMQTBBQ1FDQUtJQTBnQkNJQlFRSjBhaWdDQUVFQmRHb2lCQzhCQUVVTkFDQUNRUUJNQkVBZ0EwR0lBbW9nQlNBQ1FRRVFhVVVOQlNBREtBS1FBaUVGSUFNb0FwUUNJUUlMSUFVZ0FrRUJheUlDZGtFQmNVVU5BQ0FNSUFRdUFRQWlDSEVOQUNBSVFRQk9CRUFnQkNBSUlBeHFPd0VBREFFTElBUWdDQ0FPYWpzQkFBc2dBVUVCYWlFRUlBRWdDMGNOQUFzZ0NVRUJhd3NoQVNBQUtBSVlJZ0FnQXlnQ2lBSTJBZ0FnQUNBREtBS01BallDQkNBR0lBRTJBaFFnQmlBQ05nSVFJQVlnQlRZQ0RBc2dCaUFHS0FJc1FRRnJOZ0lzUVFFaEJBd0JDMEVBSVFRZ0IwVU5BQ0FIUVFGcklRQWdCMEVEY1NJQ0JFQURRQ0FLSUFNZ0IwRUJheUlIUVFKMGFpZ0NBRUVCZEdwQkFEc0JBQ0FDUVFGcklnSU5BQXNMSUFCQkEwa05BQU5BSUFvZ0IwRUNkQ0FEYWlJQVFRUnJLQUlBUVFGMGFrRUFPd0VBSUFvZ0FFRUlheWdDQUVFQmRHcEJBRHNCQUNBS0lBQkJER3NvQWdCQkFYUnFRUUE3QVFBZ0NpQURJQWRCQkdzaUIwRUNkR29vQWdCQkFYUnFRUUE3QVFBZ0J3MEFDd3NnQTBHZ0Ftb2tBQ0FFQytJTEFRZC9JQUFvQXB3RElRSWdBQ2dDMUFNaEF3SkFJQUFvQXVBQkJFQWdBQ2dDb0FNaEFRSkFBa0FDUUNBQ1JRUkFJQUZGRFFFTUFnc2dBU0FDU0EwQklBRWdBQ2dDdEFOS0RRRWdBQ2dDMUFKQkFVY05BUXNDUUNBQUtBS2tBeUlCUlFSQUlBQW9BcWdESVFRTUFRc2dBVUVCYXlJRUlBQW9BcWdEUncwQkN5QUVRUTVJRFFFTElBQW9BZ0FpQVNBQ05nSVlJQUZCRVRZQ0ZDQUFLQUlBSUFBb0FxQUROZ0ljSUFBb0FnQWdBQ2dDcEFNMkFpQWdBQ2dDQUNBQUtBS29BellDSkNBQUlBQW9BZ0FvQWdBUkFBQUxJQUFvQXRRQ0lnSkJBVTRFUUVFQUlRUURRQ0FBSUFSQkFuUnFLQUxZQWlnQ0JDRUhJQUFvQXFBQklRVUNmMEVBSUFBb0Fwd0RJZ0ZGRFFBYUlBRWdCU0FIUVFoMGFpZ0NBRUYvU2cwQUdpQUFLQUlBSWdFZ0J6WUNHQ0FCUWZZQU5nSVVJQUFvQWdCQkFEWUNIQ0FBUVg4Z0FDZ0NBQ2dDQkJFQ0FDQUFLQUtjQXdzaUFpQUFLQUtnQTB3RVFBTkFJQUFvQXFRRElBVWdCMEVJZEdvZ0FrRUNkR29pQmlnQ0FDSUJRUUFnQVVFQVNodEhCRUFnQUNnQ0FDSUJJQWMyQWhnZ0FVSDJBRFlDRkNBQUtBSUFJQUkyQWh3Z0FFRi9JQUFvQWdBb0FnUVJBZ0FMSUFZZ0FDZ0NxQU0yQWdBZ0FpQUFLQUtnQTBnaEFTQUNRUUZxSVFJZ0FRMEFDd3NnQkVFQmFpSUVJQUFvQXRRQ0lnSklEUUFMQ3lBRFFjd0JRYzBCSUFBb0Fwd0RJZ1FiUWM0QlFjOEJJQVFiSUFBb0FxUURHellDQkFKQUlBSkJBVWdOQUVFQUlRSURRQ0FBSUFKQkFuUWlCbW9vQXRnQ0lRRUNRQ0FFUlFSQUlBQW9BcVFERFFFZ0FFRUJJQUVvQWhRaUFTQURJQUZCQW5ScVFUQnFFTGtEREFFTElBQkJBQ0FCS0FJWUlnRWdBeUFCUVFKMGFpSUJRVEJxRUxrRElBTWdBU2dDTURZQ1FBc2dBeUFHYWtFQU5nSVlJQUpCQVdvaUFpQUFLQUxVQWs0TkFTQUFLQUtjQXlFRURBQUxBQXNnQTBFQU5nSVVEQUVMQWtBQ1FDQUNEUUFnQUNnQ3BBTU5BQ0FBS0FLb0F3MEFJQUFvQXR3QlJVRUFJQUFvQXFBRElnRkJQMG9iRFFFZ0FTQUFLQUswQTBZTkFRc2dBQ2dDQUNJQlFmMEFOZ0lVSUFCQmZ5QUJLQUlFRVFJQUN5QURRZEFCUWRFQklBQW9BclFEUVQ5R0d6WUNCRUVBSVFJZ0FDZ0MxQUpCQUVvRVFBTkFJQUJCQVNBQUlBSkJBblFpQldvb0F0Z0NJZ1lvQWhRaUFTQURJQUZCQW5ScVFjUUFhaEM1QXlBQUtBSzBBd1JBSUFCQkFDQUdLQUlZSWdFZ0F5QUJRUUowYWtIVUFHb1F1UU1MSUFNZ0JXcEJBRFlDR0NBQ1FRRnFJZ0lnQUNnQzFBSklEUUFMQ3lBQUtBTHdBa0VBVEEwQUEwQWdBeUFFUVFKMElnRnFJZ1lnQXlBQUlBQWdBV29vQXZRQ1FRSjBhaWdDMkFJaUFTZ0NGRUVDZEdvb0FrUTJBbVFnQmlBRElBRW9BaGhCQW5ScUtBSlVOZ0tNQVFKQUlBRW9BalJGQkVCQkFDRUNEQUVMSUFFb0FpUWhCU0FCS0FJb0lRRkJBU0VDQWtBQ1FBSkFBa0FDUUFKQUFrQWdBQ2dDdEFNT01RY0dCZ0FHQmdZR0FRWUdCZ1lHQmdJR0JnWUdCZ1lHQmdNR0JnWUdCZ1lHQmdZR0JBWUdCZ1lHQmdZR0JnWUdCZ1VHQ3lBQlFRRkhRUU4wSUFWQkFVZEJBblJ5UWFDL0Ftb29BZ0JCQVdvaEFnd0dDeUFCUVFGcklnRkJBaUFCUVFKSkcwRU1iQ0FGUVFGcklnRkJBaUFCUVFKSkcwRUNkR3BCc0w4Q2FpZ0NBRUVCYWlFQ0RBVUxJQUZCQVdzaUFVRURJQUZCQTBrYlFRUjBJQVZCQVdzaUFVRURJQUZCQTBrYlFRSjBha0hndndKcUtBSUFRUUZxSVFJTUJBc2dBVUVCYXlJQlFRUWdBVUVFU1J0QkZHd2dCVUVCYXlJQlFRUWdBVUVFU1J0QkFuUnFRYURBQW1vb0FnQkJBV29oQWd3REN5QUJRUUZySWdGQkJTQUJRUVZKRzBFWWJDQUZRUUZySWdGQkJTQUJRUVZKRzBFQ2RHcEJrTUVDYWlnQ0FFRUJhaUVDREFJTElBRkJBV3NpQVVFR0lBRkJCa2tiUVJ4c0lBVkJBV3NpQVVFR0lBRkJCa2tiUVFKMGFrR2d3Z0pxS0FJQVFRRnFJUUlNQVFzZ0FVRUJheUlCUVFjZ0FVRUhTUnRCQlhRZ0JVRUJheUlCUVFjZ0FVRUhTUnRCQW5ScVFmRERBbW9vQWdCQkFXb2hBZ3NnQmlBQ05nSzBBU0FFUVFGcUlnUWdBQ2dDOEFKSURRQUxDeUFEUVFBMkFpZ2dBMElBTndJTUlBTWdBQ2dDbUFJMkFpd0xMUUVCZnlBQUtBTFFBeUlCSUFFb0FoZ2dBQ2dDMUFNaUFFRVFhaWdDQUVFSWJXbzJBaGdnQUVFQU5nSVFDNjhCQVFOL0lBQWdBRUVCUWR3QklBQW9BZ1FvQWdBUkJBQWlBVFlDMUFNZ0FVSEtBVFlDQ0NBQlFjc0JOZ0lBSUFBb0F1QUJSUVJBSUFGQ0FEY0NSQ0FCUWdBM0Fsd2dBVUlBTndKVUlBRkNBRGNDVEE4TElBQWdBRUVCSUFBb0FpUkJDSFFnQUNnQ0JDZ0NBQkVFQUNJQ05nS2dBU0FBS0FJa1FRRk9CRUFEUUNBQ1FmOEJRWUFDRUR0QmdBSnFJUUlnQTBFQmFpSURJQUFvQWlSSURRQUxDeUFCUWdBM0FqQWdBVUlBTndJNEM2c05BZ3AvQVh3Z0FDZ0NKRUVCVGdSQUlBQW9BdGdESVFvZ0FDZ0MyQUVoQndOQUlBRWhCaUFDSVFRQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0J5Z0NLQ0FIS0FJa0lnaEJDSFJxSWdOQmd4Qk1CRUFnQTBHQkNFd0VRQUpBSUFOQmdRUnJEZ1FYQXlJZUFBdEJxQUVoQVVFQUlRSUNRQ0FEUVlFQ2F3NENKaDhBQ3lBRFFZTUdhdzRFQXlFaEhDRUxJQU5CZ2d4TUJFQUNRQ0FEUVlJSWF3NEhGaUlGSWlJaUhBQUxJQU5CaFFwckRnWUZJU0VoSVJvaEN3SkFJQU5CZ3d4ckRnb1VJU0VHSVNFaElTRVpBQXNnQTBHSERtc09DQVlnSUNBZ0lDQVhJQXNnQTBHRkdFd0VRQ0FEUVlRVVRBUkFJQU5CaEJCckRnMFRJU0VoSHlFaElTRWhJU0VYSUFzZ0EwR0ZGR3NPQmhFZ0lDQWdCd2dMSUFOQmhoeE1CRUFnQTBHR0dHc09CeEFnSUNBZ0lBa0tDd0pBSUFOQmh4eHJEZ2dQSUNBZ0lDQWdDd0FMSUFOQmlDQnJEZ2tOSHg4Zkh4OGZId3dMQzBHcEFTRUJRUUFoQWd3aUMwR3FBU0VCRENFTFFhc0JJUUZCQUNFQ0RDQUxRYXdCSVFGQkFDRUNEQjhMUWEwQklRRkJBQ0VDREI0TFFhNEJJUUZCQUNFQ0RCMExRYThCSVFGQkFDRUNEQndMSUFOQml4WkhEUmRCc0FFaEFVRUFJUUlNR3d0QnNRRWhBVUVBSVFJTUdnc2dBMEdOR2tjTkZVR3lBU0VCUVFBaEFnd1pDMEd6QVNFQlFRQWhBZ3dZQ3lBRFFZOGVSdzBUUWJRQklRRkJBQ0VDREJjTFFiVUJJUUZCQUNFQ0RCWUxRYllCSVFGQkFDRUNEQlVMUWJjQklRRkJBQ0VDREJRTFFiZ0JJUUZCQUNFQ0RCTUxRYmtCSVFGQkFDRUNEQklMUWJvQklRRkJBQ0VDREJFTFFic0JJUUZCQUNFQ0RCQUxRYndCSVFGQkFDRUNEQThMUWIwQklRRkJBQ0VDREE0TFFiNEJJUUZCQUNFQ0RBMExRYjhCSVFGQkFDRUNEQXdMUWNBQklRRkJBQ0VDREFzTFFjRUJJUUZCQUNFQ0RBb0xRY0lCSVFGQkFDRUNEQWtMUWNNQklRRU1DQXRCeEFFaEFVRUFJUUlNQnd0QnhRRWhBUXdHQ3lBQUtBSklJZ0pCQTBrTkFpQUFLQUlBSWdGQk1UWUNGQ0FBSUFFb0FnQVJBQUFNQXdzZ0EwR0pFa1lOQXdzZ0FDZ0NBQ0lCSUFnMkFoZ2dBVUVITmdJVUlBQW9BZ0FnQnlnQ0tEWUNIQ0FBSUFBb0FnQW9BZ0FSQUFBTUFRc2dBa0VDZEVHUXZ3SnFLQUlBSVFFTUFnc2dCaUVCSUFRaEFnd0JDMEhHQVNFQlFRQWhBZ3NnQ2lBSlFRSjBhaUlFSUFFMkFnUUNRQ0FIS0FJMFJRMEFJQVFvQWl3Z0FrWU5BQ0FIS0FKUUlnTkZEUUFnQkNBQ05nSXNBa0FDUUFKQUFrQWdBZzREQUFFQ0F3c2dCeWdDVkNFR1FRQWhCUU5BSUFZZ0JVRUNkR29nQXlBRlFRRjBhaThCQURZQ0FDQUdJQVZCQVhJaUJFRUNkR29nQXlBRVFRRjBhaThCQURZQ0FDQUdJQVZCQW5JaUJFRUNkR29nQXlBRVFRRjBhaThCQURZQ0FDQUdJQVZCQTNJaUJFRUNkR29nQXlBRVFRRjBhaThCQURZQ0FDQUZRUVJxSWdWQndBQkhEUUFMREFNTElBY29BbFFoQmtFQUlRVURRQ0FHSUFWQkFuUnFJQVZCQVhRaUJFSFF2UUpxTGdFQUlBTWdCR292QVFCc1FZQVFha0VNZFRZQ0FDQUdJQVZCQVhJaUJFRUNkR29nQkVFQmRDSUVRZEM5QW1vdUFRQWdBeUFFYWk4QkFHeEJnQkJxUVF4MU5nSUFJQVZCQW1vaUJVSEFBRWNOQUFzTUFnc2dCeWdDVkNFSVFRQWhCa0VBSVFVRFFDQUlJQVZCQW5ScUlBWkJBM1JCMEw0Q2Fpc0RBQ0lMSUFNZ0JVRUJkR292QVFDNG9rUUFBQUFBQUFEQVA2SzJPQUlBSUFnZ0JVRUJjaUlFUVFKMGFpQUxJQU1nQkVFQmRHb3ZBUUM0b2tUdllVaXhVREgyUDZKRUFBQUFBQUFBd0QraXRqZ0NBQ0FJSUFWQkFuSWlCRUVDZEdvZ0N5QURJQVJCQVhScUx3RUF1S0pFeW05TmthN245RCtpUkFBQUFBQUFBTUEvb3JZNEFnQWdDQ0FGUVFOeUlnUkJBblJxSUFzZ0F5QUVRUUYwYWk4QkFMaWlSS29SYk85aTBQSS9va1FBQUFBQUFBREFQNksyT0FJQUlBZ2dCVUVFY2lJRVFRSjBhaUFMSUFNZ0JFRUJkR292QVFDNG9rUUFBQUFBQUFEQVA2SzJPQUlBSUFnZ0JVRUZjaUlFUVFKMGFpQUxJQU1nQkVFQmRHb3ZBUUM0b2tRN3Y2ZkFhU1RwUDZKRUFBQUFBQUFBd0QraXRqZ0NBQ0FJSUFWQkJuSWlCRUVDZEdvZ0N5QURJQVJCQVhScUx3RUF1S0pFdXlESGUzcFI0VCtpUkFBQUFBQUFBTUEvb3JZNEFnQWdDQ0FGUVFkeUlnUkJBblJxSUFzZ0F5QUVRUUYwYWk4QkFMaWlSRjJyY3Q1VnFORS9va1FBQUFBQUFBREFQNksyT0FJQUlBVkJDR29oQlNBR1FRRnFJZ1pCQ0VjTkFBc01BUXNnQUNnQ0FDSUVRVEUyQWhRZ0FDQUVLQUlBRVFBQUN5QUhRZGdBYWlFSElBbEJBV29pQ1NBQUtBSWtTQTBBQ3dzTGlnRUJCSDhnQUNBQVFRRkIxQUFnQUNnQ0JDZ0NBQkVFQUNJQk5nTFlBeUFCUWFjQk5nSUFJQUFvQWlSQkFVNEVRQ0FCUVN4cUlRTWdBQ2dDMkFFaEFRTkFJQUVnQUVFQlFZQUNJQUFvQWdRb0FnQVJCQUFpQkRZQ1ZDQUVRUUJCZ0FJUU94b2dBeUFDUVFKMGFrRi9OZ0lBSUFGQjJBQnFJUUVnQWtFQmFpSUNJQUFvQWlSSURRQUxDd3Z5Q0FJUGZRVi9Jd0JCZ0FKckloWWtBQ0FBS0FMUUFpRVhJQUVvQWxRaEFFRUlJUlFnRmlFQkEwQWdBUUovQWtBZ0FpOEJFQ0lZSUFJdkFTQWlGWElOQUVFQUlSVWdBaThCTUEwQUlBSXZBVUFOQUNBQ0x3RlFEUUFnQWk4QllBMEFJQUl2QVhBTkFDQUJJQUFxQWdBZ0FpNEJBTEtVSWdZNEFzQUJJQUVnQmpnQ29BRWdBU0FHT0FLQUFTQUJJQVk0QW1BZ0FTQUdPQUpBSUFFZ0JqZ0NJQ0FCSUFZNEFnQkJPQXdCQ3lBQklBQXFBZ0FnQWk0QkFMS1VJZ2NnQUNvQ2dBRWdBaTRCUUxLVUlnaVNJZzBnQUNvQ1FDQVZRUkIwUVJCMXNwUWlDU0FBS2dMQUFTQUNMZ0Znc3BRaUNwSWlCcElpQ3lBQUtnSmdJQUl1QVRDeWxDSU1JQUFxQXFBQklBSXVBVkN5bENJT2tpSVBJQUFxQWlBZ0dFRVFkRUVRZGJLVUloQWdBQ29DNEFFZ0FpNEJjTEtVSWhHU0loS1NJZ1dUT0FMZ0FTQUJJQXNnQlpJNEFnQWdBU0FISUFpVElnY2dDU0FLazBQekJMVS9sQ0FHa3lJSWtpSUpJQTRnREpNaUNpQVFJQkdUSWd1U1ExNkQ3RCtVSWd3Z0NrTjFQU2ZBbEpJZ0JaTWlCWk00QXNBQklBRWdDU0FGa2pnQ0lDQUJJQWNnQ0pNaUJ5QVNJQStUUS9NRXRUK1VJQVdUSWdXVE9BS2dBU0FCSUFjZ0JaSTRBa0FnQVNBTklBYVRJZ1lnRENBTFE5U0xpcitVa2lBRmt5SUZramdDWUNBR0lBV1RJUVpCSUF0QkFuUnFJQVk0QWdBZ0FrRUNhaUVDSUFCQkJHb2hBQ0FCUVFScUlRRWdGRUVCU3lFVklCUkJBV3NoRkNBVkRRQUxJQmRCZ0FOcklRQkJBQ0VVSUJZaEFnTkFJQU1nRkVFQ2RHb29BZ0FnQkdvaUFTQUFBbjhnQWlvQ0FFTUFJQUJFa2lJSElBSXFBaEFpQ0pJaURTQUNLZ0lJSWdrZ0Fpb0NHQ0lLa2lJR2tpSUxJQUlxQWhRaURDQUNLZ0lNSWc2U0lnOGdBaW9DQkNJUUlBSXFBaHdpRVpJaUVwSWlCWklpRTR0REFBQUFUMTBFUUNBVHFBd0JDMEdBZ0lDQWVBdEIvd2R4YWkwQUFEb0FBQ0FCSUFBQ2Z5QUxJQVdUSWd1TFF3QUFBRTlkQkVBZ0M2Z01BUXRCZ0lDQWdIZ0xRZjhIY1dvdEFBQTZBQWNnQVNBQUFuOGdCeUFJa3lJSElBa2dDcE5EOHdTMVA1UWdCcE1pQ0pJaUNTQU1JQTZUSWdvZ0VDQVJreUlMa2tOZWcrdy9sQ0lNSUFwRGRUMG53SlNTSUFXVElnV1NJZ3FMUXdBQUFFOWRCRUFnQ3FnTUFRdEJnSUNBZ0hnTFFmOEhjV290QUFBNkFBRWdBU0FBQW44Z0NTQUZreUlKaTBNQUFBQlBYUVJBSUFtb0RBRUxRWUNBZ0lCNEMwSC9CM0ZxTFFBQU9nQUdJQUVnQUFKL0lBY2dDSk1pQnlBU0lBK1RRL01FdFQrVUlBV1RJZ1dTSWdpTFF3QUFBRTlkQkVBZ0NLZ01BUXRCZ0lDQWdIZ0xRZjhIY1dvdEFBQTZBQUlnQVNBQUFuOGdCeUFGa3lJSGkwTUFBQUJQWFFSQUlBZW9EQUVMUVlDQWdJQjRDMEgvQjNGcUxRQUFPZ0FGSUFFZ0FBSi9JQTBnQnBNaUJpQU1JQXREMUl1S3Y1U1NJQVdUSWdXU0lnZUxRd0FBQUU5ZEJFQWdCNmdNQVF0QmdJQ0FnSGdMUWY4SGNXb3RBQUE2QUFNZ0FTQUFBbjhnQmlBRmt5SUdpME1BQUFCUFhRUkFJQWFvREFFTFFZQ0FnSUI0QzBIL0IzRnFMUUFBT2dBRUlBSkJJR29oQWlBVVFRRnFJaFJCQ0VjTkFBc2dGa0dBQW1va0FBdVFDQUVSZnlNQVFZQUNheUlRSkFBZ0FDZ0MwQUloQ1NBQktBSlVJUUFnRUNFQlFRZ2hCd05BSUFFQ2Z3SkFJQUl1QVJBaUJTQUNMd0VnSWdaeVFmLy9BM0VOQUVFQUlRWWdBaThCTUEwQUlBSXZBVUFOQUNBQ0x3RlFEUUFnQWk4QllBMEFJQUl2QVhBTkFDQUJJQUFvQWdBZ0FpNEJBR3dpQmpZQ3dBRWdBU0FHTmdLZ0FTQUJJQVkyQW9BQklBRWdCallDWUNBQklBWTJBa0FnQVNBR05nSWdJQUVnQmpZQ0FFRTREQUVMSUFFZ0FDZ0N3QUVnQWk0QllHd2lDQ0FBS0FKQUlBWkJFSFJCRUhWc0lndHFJZ1lnQUNnQ2dBRWdBaTRCUUd3aUNpQUFLQUlBSUFJdUFRQnNJZ3hxSWcxcUlnNGdBQ2dDNEFFZ0FpNEJjR3dpRHlBQUtBSWdJQVZzSWhGcUloSWdBQ2dDb0FFZ0FpNEJVR3dpRXlBQUtBSmdJQUl1QVRCc0loUnFJaFZxSWdWck5nTGdBU0FCSUFVZ0RtbzJBZ0FnQVNBTElBaHJRZW9DYkVFSWRTQUdheUlJSUF3Z0Ntc2lDMm9pQ2lBUklBOXJJZ3dnRXlBVWF5SU9ha0haQTJ4QkNIVWlEeUFPUVowRmJFRUlkV3NnQldzaUJXczJBc0FCSUFFZ0JTQUthallDSUNBQklBc2dDR3NpQ0NBU0lCVnJRZW9DYkVFSWRTQUZheUlGYXpZQ29BRWdBU0FGSUFocU5nSkFJQUVnRHlBTVFaVUNiRUVJZFdzZ0JXc2lCU0FOSUFacklnWnFOZ0pnSUFZZ0JXc2hCa0VnQzBFQ2RHb2dCallDQUNBQ1FRSnFJUUlnQUVFRWFpRUFJQUZCQkdvaEFTQUhRUUZMSVFZZ0IwRUJheUVISUFZTkFBc2dDVUdBQTJzaEFFRUFJUVlnRUNFQ0EwQWdBaWdDQUVHUWdBRnFJUVVnQXlBR1FRSjBhaWdDQUNBRWFpRUJBa0FDUUNBQ0tBSUVJZ2tnQWlnQ0NDSUhjZzBBUVFBaEJ5QUNLQUlNRFFBZ0FpZ0NFQTBBSUFJb0FoUU5BQ0FDS0FJWURRQWdBaWdDSEEwQUlBRWdBQ0FGUVFWMlFmOEhjV294QUFCQ2dZS0VpSkNnd0lBQmZqY0FBQXdCQ3lBQklBQWdBaWdDSENJS0lBbHFJZ3dnQWlnQ0RDSU5JQUlvQWhRaURtb2lEMm9pQ0NBQ0tBSVlJaEVnQjJvaUN5QUNLQUlRSWhJZ0JXb2lFMm9pRkdwQkJYWkIvd2R4YWkwQUFEb0FBQ0FCSUFBZ0ZDQUlhMEVGZGtIL0IzRnFMUUFBT2dBSElBRWdBQ0FKSUFwcklnb2dEaUFOYXlJSmFrSFpBMnhCQ0hVaURTQUpRWjBGYkVFSWRXc2dDR3NpQ1NBSElCRnJRZW9DYkVFSWRTQUxheUlJSUFVZ0Vtc2lCV29pQjJwQkJYWkIvd2R4YWkwQUFEb0FBU0FCSUFBZ0J5QUphMEVGZGtIL0IzRnFMUUFBT2dBR0lBRWdBQ0FNSUE5clFlb0NiRUVJZFNBSmF5SUhJQVVnQ0dzaUJXcEJCWFpCL3dkeGFpMEFBRG9BQWlBQklBQWdCU0FIYTBFRmRrSC9CM0ZxTFFBQU9nQUZJQUVnQUNBTklBcEJsUUpzUVFoMWF5QUhheUlISUJNZ0Myc2lCV3BCQlhaQi93ZHhhaTBBQURvQUF5QUJJQUFnQlNBSGEwRUZka0gvQjNGcUxRQUFPZ0FFQ3lBQ1FTQnFJUUlnQmtFQmFpSUdRUWhIRFFBTElCQkJnQUpxSkFBTFp3RUJmeUFES0FJQUlBUnFJQUFvQXRBQ1FZQURheUlBSUFFb0FsUWlBU2dDSUNBQ0x3RVFiQ0lGSUFFb0FnQWdBaThCQUd4QmhDQnFJZ0ZxUVFOMlFmOEhjV290QUFBNkFBQWdBeWdDQkNBRWFpQUFJQUVnQld0QkEzWkIvd2R4YWkwQUFEb0FBQXZiQXdFTmZ5QURLQUlBSUFScUlnVWdBQ2dDMEFKQmdBTnJJZ0FnQVNnQ1ZDSUJLQUpnSUFJdUFUQnNJZ1lnQVNnQ0lDQUNMZ0VRYkNJSGFrSFJJbXdpQ0NBSFFmNHdiR29pQnlBQktBSkFJQUl2QVNCc0lna2dBU2dDQUNBQ0x3RUFiQ0lLYWtFTmRDSU5ha0dBZ0lJUWFpSUxJQUVvQW1RZ0FpNEJNbXdpRGlBQktBSWtJQUl1QVJKc0lneHFRZEVpYkNJUElBeEIvakJzYWlJTUlBRW9Ba1FnQWk4Qkltd2lFQ0FCS0FJRUlBSXZBUUpzSWdGcVFRMTBJZ0pxSWhGcVFSQjJRZjhIY1dvdEFBQTZBQUFnQlNBQUlBc2dFV3RCRUhaQi93ZHhhaTBBQURvQUFTQURLQUlFSUFScUlnVWdBQ0FJSUFaQjM0bC9iR29pQmlBS0lBbHJRUTEwSWdocVFZQ0FnaEJxSWdrZ0R5QU9RZCtKZjJ4cUlnb2dBU0FRYTBFTmRDSUJhaUlMYWtFUWRrSC9CM0ZxTFFBQU9nQUFJQVVnQUNBSklBdHJRUkIyUWY4SGNXb3RBQUE2QUFFZ0F5Z0NDQ0FFYWlJRklBQWdDQ0FHYTBHQWdJSVFhaUlHSUFFZ0Ntc2lBV3BCRUhaQi93ZHhhaTBBQURvQUFDQUZJQUFnQmlBQmEwRVFka0gvQjNGcUxRQUFPZ0FCSUFNb0Fnd2dCR29pQVNBQUlBMGdCMnRCZ0lDQ0VHb2lBeUFDSUF4cklnSnFRUkIyUWY4SGNXb3RBQUE2QUFBZ0FTQUFJQU1nQW10QkVIWkIvd2R4YWkwQUFEb0FBUXZPQXdFTWZ5QUFLQUxRQWlFT0lBRW9BbFFoQVNNQVFkQUFheUlJSVFBRFFDQUJLQUpBSVFvZ0FpNEJJQ0VMSUFBZ0FpNEJBQ0FCS0FJQWJFRU5kRUdBQ0hJaURDQUNMZ0ZBSUFFb0FvQUJiRUdoTFd3aURVRUJkR3RCQzNVaUR5QUJLQUlnSUFJdUFSQnNJZ1VnQVNnQ1lDQUNMZ0V3YkNJR2F5QUJLQUtnQVNBQ0xnRlFiQ0lKYTBFQ2RDSVFhellDTUNBQUlBOGdFR28yQWd3Z0FDQUtJQXRzUWJIT0FHd2lDaUFNSUExcUlndHFJZ3dnQlNBSmFrRzJGMndpRFNBRklBWnFRUTEwYWlJRmEwRUxkVFlDUENBQUlBVWdER3BCQzNVMkFnQWdBQ0FMSUFwcklnVWdEU0FKSUFaclFRMTBhaUlHYTBFTGRUWUNKQ0FBSUFVZ0JtcEJDM1UyQWhnZ0FFRUVhaUVBSUFGQkJHb2hBU0FDUVFKcUlRSWdCMEVCYWlJSFFRTkhEUUFMSUE1QmdBTnJJUUZCQUNFQUlBZ2hBZ05BSUFNZ0FFRUNkR29vQWdBZ0JHb2lDQ0FCSUFJb0FnQkJEWFJCZ0lDSXdBQnFJZ2NnQWlnQ0NDSUZRYUV0YkdvaUJpQUNLQUlFUWJIT0FHd2lDV3BCRW5aQi93ZHhhaTBBQURvQUFDQUlJQUVnQmlBSmEwRVNka0gvQjNGcUxRQUFPZ0FDSUFnZ0FTQUZRYjZsZjJ3Z0IycEJFblpCL3dkeGFpMEFBRG9BQVNBQ1FReHFJUUlnQUVFQmFpSUFRUVpIRFFBTEM2VUdBUkovSUFBb0F0QUNJUXNnQVNnQ1ZDRUFJd0JCZ0FGcklna2hBVUVFSVFjRFFDQUJBbjhDUUNBQ0xnRVFJZ1lnQWk4QklDSUZja0gvL3dOeERRQkJBQ0VGSUFJdkFUQU5BQ0FDTHdGQURRQWdBaThCVUEwQUlBSXZBV0FOQUNBQ0x3RndEUUFnQVNBQ0xnRUFJQUFvQWdCc1FRSjBJZ1UyQW1BZ0FTQUZOZ0pRSUFFZ0JUWUNRQ0FCSUFVMkFqQWdBU0FGTmdJZ0lBRWdCVFlDRUNBQklBVTJBZ0JCSEF3QkN5QUJJQUFvQXNBQklBSXVBV0JzSWdvZ0FDZ0NRQ0FGUVJCMFFSQjFiQ0lGYWtIUkltd2lEQ0FGUWY0d2JHb2lFU0FDTGdGQUlBQW9Bb0FCYkVFTmRDSU5JQUl1QVFBZ0FDZ0NBR3hCRFhSQmdBaHlJZzVxSWhKcUlnOGdBQ2dDSUNBR2JDSUZJQUFvQXVBQklBSXVBWEJzSWdacVFiTkdiQ0lUSUFWQmkrQUFiR29nQlNBQUtBS2dBU0FDTGdGUWJDSUlhaUlRSUFBb0FtQWdBaTRCTUd3aUJTQUdhaUlVYWtHaHl3QnNJaFVnRUVHRVoyeHFJaEJxSWhaclFRdDFOZ0p3SUFFZ0R5QVdha0VMZFRZQ0FDQUJJQXdnQ2tIZmlYOXNhaUlLSUE0Z0RXc2lER29pRFNBVklCUkJ1NEovYkdvaURpQUZJQWhxUWYzYmZtd2lEeUFGUWRURUFXeHFhaUlGYTBFTGRUWUNZQ0FCSUFVZ0RXcEJDM1UyQWhBZ0FTQU1JQXBySWdVZ0R5QUlRYk9EQVd4cUlCQnFJZ2hyUVF0MU5nSlFJQUVnQlNBSWFrRUxkVFlDSUNBQklCTWdCa0dPRTJ4cUlBNXFJZ1VnRWlBUmF5SUdha0VMZFRZQ01DQUdJQVZyUVF0MUlRVkJFQXRCQW5ScUlBVTJBZ0FnQWtFQ2FpRUNJQUJCQkdvaEFDQUJRUVJxSVFFZ0IwRUJTeUVGSUFkQkFXc2hCeUFGRFFBTElBdEJnQU5ySVFCQkFDRUhJQWtoQWdOQUlBTWdCMEVDZEdvb0FnQWdCR29pQVNBQUlBSW9BZ3dpQ1NBQ0tBSUVJZ1ZxUWRFaWJDSUtJQVZCL2pCc2FpSUZJQUlvQWdCQmtJQUJhaUlHSUFJb0FnZ2lDR3BCRFhRaUMycEJFblpCL3dkeGFpMEFBRG9BQUNBQklBQWdDeUFGYTBFU2RrSC9CM0ZxTFFBQU9nQURJQUVnQUNBS0lBbEIzNGwvYkdvaUNTQUdJQWhyUVExMElnVnFRUkoyUWY4SGNXb3RBQUE2QUFFZ0FTQUFJQVVnQ1d0QkVuWkIvd2R4YWkwQUFEb0FBaUFDUVJCcUlRSWdCMEVCYWlJSFFRaEhEUUFMQzRrR0FSSi9Jd0JCMEFGcklnOGtBQ0FBS0FMUUFpRU5JQUVvQWxRaEFDQVBJUUVEUUNBQUtBTEFBU0VJSUFJdUFXQWhCaUFBS0FKQUlRa2dBaTRCSUNFT0lBRWdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlCU0FBS0FLQUFTQUNMZ0ZBYkNJTFFiNmxmMnhxUVF0MUloQWdBQ2dDSUNBQ0xnRVFiQ0lISUFBb0FxQUJJQUl1QVZCc0loRnJJQUFvQW1BZ0FpNEJNR3dpRWlBQUtBTGdBU0FDTGdGd2JDSVRheUlNYTBFQ2RDSVVhellDakFFZ0FTQVFJQlJxTmdJb0lBRWdCaUFJYkNJSUlBa2dEbXdpQm1wQm1qVnNJZ2tnQmtIeElHeHFJZ1lnQzBHZHlRQnNJQVZxSWc1cUloQWdERUhqRTJ3aUZDQVJRUTEwSWhGcUloVWdFaUFUYWlJU1FlODhiQ0lUSUFkQnM5a0FiR3BxSWhaclFRdDFOZ0swQVNBQklCQWdGbXBCQzNVMkFnQWdBU0FPSUFacklnWWdCMEdVRG13Z0Uyc2dGV29pRG10QkMzVTJBbVFnQVNBR0lBNXFRUXQxTmdKUUlBRWdDU0FJUWR6MGZteHFJZ2dnQzBHRVpHd2dCV29pQldvaUN5QUhRZFBRQUd3Z0VrSFBKV3dpQm1zZ0VTQVVheUFNUVF4MGF5SU1heUlKYTBFTGRUWUNvQUVnQVNBSklBdHFRUXQxTmdJVUlBRWdCU0FJYXlJRklBd2dCMEdNS1d3Z0JtdHFJZ2RyUVF0MU5nSjRJQUVnQlNBSGFrRUxkVFlDUENBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQUtRUUZxSWdwQkJVY05BQXNnRFVHQUEyc2hBRUVBSVFjZ0R5RUJBMEFnQXlBSFFRSjBhaWdDQUNBRWFpSUNJQUFnQVNnQ0RDSUtJQUVvQWdRaUJXcEJtalZzSWdzZ0JVSHhJR3hxSWdVZ0FTZ0NBRUVOZEVHQWdJakFBR29pRENBQktBSUlJZzBnQVNnQ0VDSUlheUlHUWRBV2JHb2lDU0FJSUExcVFjd3liQ0lOYWlJSWFrRVNka0gvQjNGcUxRQUFPZ0FBSUFJZ0FDQUlJQVZyUVJKMlFmOEhjV290QUFBNkFBUWdBaUFBSUFzZ0NrSGM5SDVzYWlJS0lBa2dEV3NpQldwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFBZ0JTQUthMEVTZGtIL0IzRnFMUUFBT2dBRElBSWdBQ0FHUWNDbGYyd2dER3BCRW5aQi93ZHhhaTBBQURvQUFpQUJRUlJxSVFFZ0IwRUJhaUlIUVFwSERRQUxJQTlCMEFGcUpBQUw2d1lCRW44akFFR2dBbXNpRWlRQUlBQW9BdEFDSVJNZ0FTZ0NWQ0VBSUJJaEFRTkFJQUFvQW9BQklRMGdBaTRCUUNFS0lBRWdBQ2dDUUNBQ0xnRWdiQ0lPSUFBb0FzQUJJQUl1QVdCc0loQnJRUTEwSWdzZ0FpNEJBQ0FBS0FJQWJFRU5kRUdBQ0hJaUJtb2lEQ0FBS0FJZ0lBSXVBUkJzSWdVZ0FDZ0M0QUVnQWk0QmNHd2lCMnNpRVNBQUtBSmdJQUl1QVRCc0lnOGdBQ2dDb0FFZ0FpNEJVR3dpQ0dzaUZHcEIwU0pzSWhVZ0VVSCtNR3hxSWhGclFRdDFOZ0x3QVNBQklBd2dFV3BCQzNVMkFoZ2dBU0FHSUF0cklnc2dGU0FVUWQrSmYyeHFJZ3hyUVF0MU5nS29BU0FCSUFzZ0RHcEJDM1UyQW1BZ0FTQUtJQTFzUWJIT0FHd2lDaUFHYWlJTElCQkJEWFFpRUNBT1FiYlhBR3hxSWd4ckloRWdCeUFGSUFocUloUnFRWTAzYkNJTklBOUJyMTFzSWhVZ0JVSGNWR3hxSUFkQmpJRi9iR3BxSWhaclFRdDFOZ0tRQVNBQklCRWdGbXBCQzNVMkFuZ2dBU0FMSUF4cUlnc2dEU0FVUWRzUWJHb2lEQ0FQUWMvVEFHd2lEeUFGUWZjUmJHcHFJZ1ZyUVF0MU5nS0lBaUFCSUFVZ0MycEJDM1UyQWdBZ0FTQU9RYllYYkNBUWF5SUZJQVlnQ21zaUJtb2lEaUFISUFocVFZdTlmMndpQ2lBSVFiQ2hmMndnRldwcUlBeHFJZ2hyUVF0MU5nTFlBU0FCSUFnZ0RtcEJDM1UyQWpBZ0FTQUdJQVZySWdZZ0IwSEc1UUJzSUE5cklBMXFJQXBxSWdkclFRdDFOZ0xBQVNBQklBWWdCMnBCQzNVMkFrZ2dBVUVFYWlFQklBQkJCR29oQUNBQ1FRSnFJUUlnQ1VFQmFpSUpRUVpIRFFBTElCTkJnQU5ySVFCQkFDRUhJQkloQVFOQUlBTWdCMEVDZEdvb0FnQWdCR29pQWlBQUlBRW9BaFFpQmlBQktBSUVJZ1ZxUWJZWGJDSU9JQUVvQWd3aUNDQUZha0VOZEdvaUR5QUJLQUlBUVExMFFZQ0FpTUFBYWlJTklBRW9BaEJCb1Mxc0lnbHFJaE1nQVNnQ0NFR3h6Z0JzSWdwcUloQnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQkFnRDJ0QkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFBZ0JTQUlheUFHYTBFTmRDSUZJQTBnQ1dzZ0NXc2lDV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnQ1NBRmEwRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FDQU9JQVlnQ0d0QkRYUnFJZ1lnRXlBS2F5SUZha0VTZGtIL0IzRnFMUUFBT2dBQ0lBSWdBQ0FGSUFaclFSSjJRZjhIY1dvdEFBQTZBQU1nQVVFWWFpRUJJQWRCQVdvaUIwRU1SdzBBQ3lBU1FhQUNhaVFBQzZNSUFSVi9Jd0JCa0FOckloTWtBQ0FBS0FMUUFpRVVJQUVvQWxRaEFDQVRJUUVEUUNBQUtBTEFBU0VOSUFJdUFXQWhDQ0FBS0FKQUlRa2dBaTRCSUNFTUlBRWdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlDaUFBS0FLQUFTQUNMZ0ZBYkNJTFFiNmxmMnhxUVF0MUlnNGdBQ2dDNEFFZ0FpNEJjR3dpRHlBQUtBSWdJQUl1QVJCc0lnY2dBQ2dDWUNBQ0xnRXdiQ0lGYXlJUklBQW9BcUFCSUFJdUFWQnNJZ1pyYWtFQ2RDSVNhellDbUFJZ0FTQU9JQkpxTmdKVUlBRWdDQ0FOYkNJSUlBa2dER3dpQ1dwQjRzWUFiQ0lNSUFoQi9KRi9iR29pRGlBTFFaSVViQ0FLYWlJU2FpSVZJQVVnQm1wQjczVnNJQTlCRFhRaURXc2lEeUFGSUFkcVFiZlZBR3dpRnlBRlFlNWtiR3BxSWhaclFRdDFOZ0xRQWlBQklCVWdGbXBCQzNVMkFod2dBU0FJUWVHbmYyd2dDVUdqSjJ4cUlnZ2dDMEhKUjJ3Z0Ntb2lGV29pRmlBUElBWWdCMm9pRDBIU3pBQnNJaGdnQmtHSjZINXNhbW9pR1d0QkMzVTJBclFDSUFFZ0ZpQVpha0VMZFRZQ09DQUJJQklnRG1zaURpQVJRZklkYkNBTmF5SVJJQVlnQld0QitOa0FiQ0lTSUFWQm1TdHNhbW9pQld0QkMzVTJBdUFCSUFFZ0JTQU9ha0VMZFRZQ2pBRWdBU0FMUWNiUkFHd2dDbW9pQlNBTUlBbEJ2UkZzYWlJS2F5SUxJQTlCbERCc0lna2dCMEdMdkg5c2FpQVJhaUlNYTBFTGRUWUN4QUVnQVNBTElBeHFRUXQxTmdLb0FTQUJJQVVnQ21vaUJTQVhJQWRCOExkL2JHb2dHR29nRFdvaUIydEJDM1UyQXV3Q0lBRWdCU0FIYWtFTGRUWUNBQ0FCSUJVZ0NHc2lCU0FTSUFaQjVwTi9iR29nQ1dvZ0RXb2lCbXRCQzNVMkF2d0JJQUVnQlNBR2FrRUxkVFlDY0NBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQVFRUUZxSWhCQkIwY05BQXNnRkVHQUEyc2hBRUVBSVFVZ0V5RUJBMEFnQXlBRlFRSjBhaWdDQUNBRWFpSUNJQUFnQVNnQ0RDSUhJQUVvQWdRaUJtcEI3enRzSWdnZ0JpQUhhMEh6Q213aUNXc2dBU2dDRkNJS0lBWnFRYU1uYkNJVWFpSU1JQUVvQWhBaUJpQUJLQUlZSWd0clFiYzRiQ0lPSUF0QmczdHNhaUFCS0FJQVFRMTBRWUNBaU1BQWFpSU5JQXNnQVNnQ0NDSVFhaUlMUWNiUkFHeHFJZzlxSWhGcVFSSjJRZjhIY1dvdEFBQTZBQUFnQWlBQUlCRWdER3RCRW5aQi93ZHhhaTBBQURvQUJpQUNJQUFnQnlBS2FrSGhwMzlzSWdjZ0NDQUphbW9pQ0NBUUlBWnJRWklVYkNJSklBWkJsWXAvYkNBTmFtb2dEbW9pREdwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFBZ0RDQUlhMEVTZGtIL0IzRnFMUUFBT2dBRklBSWdBQ0FVSUFwQjN2Y0FiR29nQjJvaUJ5QUpJQkJCOGVGK2JHb2dEMm9pQ21wQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFBZ0NpQUhhMEVTZGtIL0IzRnFMUUFBT2dBRUlBSWdBQ0FHSUF0clFjSGFBR3dnRFdwQkVuWkIvd2R4YWkwQUFEb0FBeUFCUVJ4cUlRRWdCVUVCYWlJRlFRNUhEUUFMSUJOQmtBTnFKQUFMd0FrQkduOGpBRUdBQkdzaUZDUUFJQUFvQXRBQ0lSQWdBU2dDVkNFQUlCUWhBUU5BSUFFZ0FDZ0NRQ0FDTGdFZ2JDSU1JQUFvQXNBQklBSXVBV0JzSWcxcklnbEI0OWdBYkNJT0lBMUJnNlFCYkdvaUVTQUFLQUtBQVNBQ0xnRkFiQ0lLUWMvVEFHd2lGU0FDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlMYWlJV2FpSVNJQUFvQW1BZ0FpNEJNR3dpQ0NBQUtBSWdJQUl1QVJCc0lnVnFRYzdXQUd3aUV5QUZRZGJ0Zm14cUlBQW9BcUFCSUFJdUFWQnNJZ2NnQldvaUdVSHB6d0JzSWhkcUlBQW9BdUFCSUFJdUFYQnNJZ1lnQldwQi9NVUFiQ0lhYWlJWWEwRUxkVFlDNEFNZ0FTQVNJQmhxUVF0MU5nSUFJQUVnQ1VIVUVXd2lDU0FNUWMwNWJHb2lFaUFLUWRFaWJDSUtJQXRxSWhocUloc2dCaUFJYWlJY1FhdFZiQ0lkSUFjZ0NHcEI4QWhzSWg0Z0V5QUlRYzBFYkdwcWFpSVRhMEVMZFRZQ3dBTWdBU0FUSUJ0cVFRdDFOZ0lnSUFFZ0RpQU1RY0paYkdvaURDQUxJQXBySWc1cUlnb2dCaUFIYWtHeXFYOXNJaE1nSGlBSFFmcTNmMnhxSUJkcWFpSVhhMEVMZFRZQ29BTWdBU0FLSUJkcVFRdDFOZ0pBSUFFZ0NTQU5RYkJmYkdvaURTQUxJQlZySWd0cUlna2dIU0FHUVpqRUFHeHFJQnBxSUJOcUlncHJRUXQxTmdLQUF5QUJJQWtnQ21wQkMzVTJBbUFnQVNBTElBMXJJZ3NnQmlBSGEwR2pHbXdpRFNBRklBWnJRYlk1YkNJSklCeEJsN0IvYkNJS0lBWkJoY2tCYkdwcWFpSUdhMEVMZFRZQzRBSWdBU0FHSUF0cVFRdDFOZ0tBQVNBQklBNGdER3NpQmlBWlFkVXFiQ0lMSUFjZ0NHdEJpZG9BYkNJTUlBZEIrazVzYW1vZ0RXb2lCMnRCQzNVMkFzQUNJQUVnQmlBSGFrRUxkVFlDb0FFZ0FTQVlJQkpySWdjZ0JTQUlhMEdqR213aUJpQUlRWnIrQUd4cUlBeHFJQXBxSWdoclFRdDFOZ0tnQWlBQklBY2dDR3BCQzNVMkFzQUJJQUVnRmlBUmF5SUlJQVlnQlVIQ2luOXNhaUFMYWlBSmFpSUZhMEVMZFRZQ2dBSWdBU0FGSUFocVFRdDFOZ0xnQVNBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQVBRUUZxSWc5QkNFY05BQXNnRUVHQUEyc2hBRUVBSVFnZ0ZDRUJBMEFnQXlBSVFRSjBhaWdDQUNBRWFpSUNJQUFnQVNnQ0JDSUZJQUVvQWh3aUIycEJzMFpzSWdzZ0JVR0w0QUJzYWlBRklBRW9BaFFpQm1vaUR5QUJLQUlNSWdVZ0Iyb2lER3BCb2NzQWJDSU5JQTlCaEdkc2FpSVBhaUlRSUFFb0FoZ2lDU0FCS0FJSUlnNXFRZEVpYkNJUklBNUIvakJzYWlJT0lBRW9BZ0JCa0lBQmFpSUtJQUVvQWhBaUZXcEJEWFFpRm1vaUVtcEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBQWdFaUFRYTBFU2RrSC9CM0ZxTFFBQU9nQUhJQUlnQUNBTklBeEJ1NEovYkdvaURDQUZJQVpxUWYzYmZtd2lEU0FGUWRURUFXeHFhaUlGSUJFZ0NVSGZpWDlzYWlJUUlBb2dGV3RCRFhRaUNXb2lFV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnRVNBRmEwRVNka0gvQjNGcUxRQUFPZ0FHSUFJZ0FDQU5JQVpCczRNQmJHb2dEMm9pQlNBSklCQnJJZ1pxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFBSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQlNBQ0lBQWdDeUFIUVk0VGJHb2dER29pQlNBV0lBNXJJZ2RxUVJKMlFmOEhjV290QUFBNkFBTWdBaUFBSUFjZ0JXdEJFblpCL3dkeGFpMEFBRG9BQkNBQlFTQnFJUUVnQ0VFQmFpSUlRUkJIRFFBTElCUkJnQVJxSkFBTFlRQWdBeWdDQUNBRWFpSURJQUFvQXRBQ1FZQURheUlBSUFFb0FsUWlBU2dDQkNBQ0x3RUNiQ0lFSUFFb0FnQWdBaThCQUd4QmhDQnFJZ0ZxUVFOMlFmOEhjV290QUFBNkFBQWdBeUFBSUFFZ0JHdEJBM1pCL3dkeGFpMEFBRG9BQVF1N0F3RU5meUFES0FJQUlBUnFJZ1VnQUNnQzBBSkJnQU5ySWdBZ0FTZ0NWQ0lCS0FJc0lBSXVBUlpzSWdZZ0FTZ0NEQ0FDTGdFR2JDSUhhaUlJSUFFb0FpUWdBaTRCRW13aUNpQUJLQUlFSUFJdUFRSnNJZ3RxSWdscVFkRWliQ0lNSUFsQi9qQnNhaUlKSUFFb0FpQWdBaThCRUd3aURTQUJLQUlBSUFJdkFRQnNJZzVxUVlRZ2FpSVBJQUVvQWlnZ0FpOEJGR3dpRUNBQktBSUlJQUl2QVFSc0lnSnFJZ0ZxUVExMEloRnFRUkIyUWY4SGNXb3RBQUE2QUFBZ0JTQUFJQkVnQ1d0QkVIWkIvd2R4YWkwQUFEb0FBeUFGSUFBZ0RDQUlRZCtKZjJ4cUlnZ2dEeUFCYTBFTmRDSUJha0VRZGtIL0IzRnFMUUFBT2dBQklBVWdBQ0FCSUFoclFSQjJRZjhIY1dvdEFBQTZBQUlnQXlnQ0JDQUVhaUlCSUFBZ0J5QUdheUlESUFzZ0Ntc2lCR3BCMFNKc0lnVWdCRUgrTUd4cUlnUWdEaUFOYTBHRUlHb2lCaUFDSUJCcklnSnFRUTEwSWdkcVFSQjJRZjhIY1dvdEFBQTZBQUFnQVNBQUlBY2dCR3RCRUhaQi93ZHhhaTBBQURvQUF5QUJJQUFnQlNBRFFkK0pmMnhxSWdNZ0JpQUNhMEVOZENJQ2FrRVFka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQUNJQU5yUVJCMlFmOEhjV290QUFBNkFBSUx0d2NCQzM4Z0FDZ0MwQUloQ1NBQ0xnRVFJUVVnQVNnQ1ZDSUJLQUlnSVFjakFFSFFBR3NpQUNBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJR0lBSXVBU0FnQVNnQ1FHeEJvUzFzSWdoQkFYUnJRUXQxTmdJWUlBQWdCaUFJYWlJR0lBVWdCMnhCc2M0QWJDSUZhMEVMZFRZQ01DQUFJQVVnQm1wQkMzVTJBZ0FnQVNnQ0pDRUZJQUl1QVJJaEJ5QUFJQUl1QVFJZ0FTZ0NCR3hCRFhSQmdBaHlJZ1lnQWk0QklpQUJLQUpFYkVHaExXd2lDRUVCZEd0QkMzVTJBaHdnQUNBR0lBaHFJZ1lnQlNBSGJFR3h6Z0JzSWdWclFRdDFOZ0kwSUFBZ0JTQUdha0VMZFRZQ0JDQUJLQUlvSVFVZ0FpNEJGQ0VISUFBZ0FpNEJCQ0FCS0FJSWJFRU5kRUdBQ0hJaUJpQUNMZ0VrSUFFb0FraHNRYUV0YkNJSVFRRjBhMEVMZFRZQ0lDQUFJQVlnQ0dvaUJpQUZJQWRzUWJIT0FHd2lCV3RCQzNVMkFqZ2dBQ0FGSUFacVFRdDFOZ0lJSUFFb0Fpd2hCU0FDTGdFV0lRY2dBQ0FDTGdFR0lBRW9BZ3hzUVExMFFZQUljaUlHSUFJdUFTWWdBU2dDVEd4Qm9TMXNJZ2hCQVhSclFRdDFOZ0lrSUFBZ0JpQUlhaUlHSUFVZ0IyeEJzYzRBYkNJRmEwRUxkVFlDUENBQUlBVWdCbXBCQzNVMkFnd2dBU2dDTUNFRklBSXVBUmdoQnlBQUlBSXVBUWdnQVNnQ0VHeEJEWFJCZ0FoeUlnWWdBaTRCS0NBQktBSlFiRUdoTFd3aUNFRUJkR3RCQzNVMkFpZ2dBQ0FHSUFocUlnWWdCU0FIYkVHeHpnQnNJZ1ZyUVF0MU5nSkFJQUFnQlNBR2FrRUxkVFlDRUNBQktBSTBJUVVnQWk0QkdpRUhJQUFnQWk0QkNpQUJLQUlVYkVFTmRFR0FDSElpQmlBQ0xnRXFJQUVvQWxSc1FhRXRiQ0lCUVFGMGEwRUxkVFlDTENBQUlBRWdCbW9pQVNBRklBZHNRYkhPQUd3aUFtdEJDM1UyQWtRZ0FDQUJJQUpxUVF0MU5nSVVJQWxCZ0FOcklRRkJBQ0VKSUFBaEFnTkFJQU1nQ1VFQ2RHb29BZ0FnQkdvaUFDQUJJQUlvQWhRaUJTQUNLQUlFSWdkcVFiWVhiQ0lLSUFJb0Fnd2lCaUFIYWtFTmRHb2lDeUFDS0FJQVFRMTBRWUNBaU1BQWFpSU1JQUlvQWhCQm9TMXNJZ2hxSWcwZ0FpZ0NDRUd4emdCc0lnNXFJZzlxUVJKMlFmOEhjV290QUFBNkFBQWdBQ0FCSUE4Z0MydEJFblpCL3dkeGFpMEFBRG9BQlNBQUlBRWdCeUFHYXlBRmEwRU5kQ0lISUF3Z0NHc2dDR3NpQ0dwQkVuWkIvd2R4YWkwQUFEb0FBU0FBSUFFZ0NDQUhhMEVTZGtIL0IzRnFMUUFBT2dBRUlBQWdBU0FLSUFVZ0JtdEJEWFJxSWdVZ0RTQU9heUlIYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUFnQVNBSElBVnJRUkoyUWY4SGNXb3RBQUE2QUFNZ0FrRVlhaUVDSUFsQkFXb2lDVUVEUncwQUN3dVJCUUVRZnlBQUtBTFFBaUVJSUFFb0FsUWhBU01BUVlBQmF5SUZJUUFEUUNBQUlBRW9Ba0FnQWk0QklHd2lCaUFCS0FJQUlBSXVBUUJzSWdwcVFRSjBJZ3NnQVNnQ1lDQUNMZ0V3YkNJTUlBRW9BaUFnQWk0QkVHd2lCMnBCMFNKc1FZQUlhaUlOSUFkQi9qQnNha0VMZFNJSGF6WUNZQ0FBSUFjZ0MybzJBZ0FnQUNBS0lBWnJRUUowSWdZZ0RTQU1RZCtKZjJ4cVFRdDFJZ3ByTmdKQUlBQWdCaUFLYWpZQ0lDQUFRUVJxSVFBZ0FVRUVhaUVCSUFKQkFtb2hBaUFKUVFGcUlnbEJDRWNOQUFzZ0NFR0FBMnNoQUVFQUlRa2dCU0VDQTBBZ0F5QUpRUUowYWlnQ0FDQUVhaUlCSUFBZ0FpZ0NCQ0lGSUFJb0Fod2lDR3BCczBac0lnb2dCVUdMNEFCc2FpQUZJQUlvQWhRaUJtb2lDeUFDS0FJTUlnVWdDR29pREdwQm9jc0FiQ0lISUF0QmhHZHNhaUlMYWlJTklBSW9BaGdpRGlBQ0tBSUlJZzlxUWRFaWJDSVFJQTlCL2pCc2FpSVBJQUlvQWdCQmtJQUJhaUlSSUFJb0FoQWlFbXBCRFhRaUUyb2lGR3BCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnRkNBTmEwRVNka0gvQjNGcUxRQUFPZ0FISUFFZ0FDQUhJQXhCdTRKL2JHb2lEQ0FGSUFacVFmM2JmbXdpQnlBRlFkVEVBV3hxYWlJRklCQWdEa0hmaVg5c2FpSU5JQkVnRW10QkRYUWlEbW9pRUdwQkVuWkIvd2R4YWkwQUFEb0FBU0FCSUFBZ0VDQUZhMEVTZGtIL0IzRnFMUUFBT2dBR0lBRWdBQ0FISUFaQnM0TUJiR29nQzJvaUJTQU9JQTFySWdacVFSSjJRZjhIY1dvdEFBQTZBQUlnQVNBQUlBWWdCV3RCRW5aQi93ZHhhaTBBQURvQUJTQUJJQUFnQ2lBSVFZNFRiR29nREdvaUJTQVRJQTlySWdocVFSSjJRZjhIY1dvdEFBQTZBQU1nQVNBQUlBZ2dCV3RCRW5aQi93ZHhhaTBBQURvQUJDQUNRU0JxSVFJZ0NVRUJhaUlKUVFSSERRQUxDNmNHQVJKL0l3QkJvQUZySWc4a0FDQUFLQUxRQWlFS0lBRW9BbFFoQVNBUElRQURRQ0FCS0FKZ0lRWWdBaTRCTUNFRklBRW9BaUFoQ1NBQ0xnRVFJUXNnQUNBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJTUlBRW9Ba0FnQWk0QklHd2lDQ0FCS0FLQUFTQUNMZ0ZBYkNJTmF5SU9RY0NsZjJ4cVFRdDFOZ0pBSUFBZ0RrSFFGbXdnREdvaURDQUlJQTFxUWN3eWJDSUlhaUlOSUFVZ0Jtd2lCaUFKSUF0c0lnVnFRWm8xYkNJSklBVkI4U0JzYWlJRmEwRUxkVFlDZ0FFZ0FDQUZJQTFxUVF0MU5nSUFJQUFnRENBSWF5SUZJQWtnQmtIYzlINXNhaUlHYTBFTGRUWUNZQ0FBSUFVZ0JtcEJDM1UyQWlBZ0FFRUVhaUVBSUFGQkJHb2hBU0FDUVFKcUlRSWdCMEVCYWlJSFFRaEhEUUFMSUFwQmdBTnJJUUJCQUNFS0lBOGhBUU5BSUFNZ0NrRUNkR29vQWdBZ0JHb2lBaUFBSUFFb0Fod2lCaUFCS0FJTUlnVnFJZ3RCN3p4c0lnd2dBU2dDQkNJSFFiUFpBR3hxSUFVZ0Jtc2lCa0hqRTJ3aUNDQUJLQUlVSWcxQkRYUWlEbW9pRTJvaUVDQUJLQUlZSWhFZ0FTZ0NDQ0lGYWtHYU5Xd2lFaUFGUWZFZ2JHb2lGQ0FCS0FJQVFRMTBRWUNBaU1BQWFpSUZJQUVvQWhBaUNVR2R5UUJzYWlJVmFpSVdha0VTZGtIL0IzRnFMUUFBT2dBQUlBSWdBQ0FXSUJCclFSSjJRZjhIY1dvdEFBQTZBQWtnQWlBQUlBZEIwOUFBYkNBTFFjOGxiQ0lMYXlBT0lBaHJJQVpCREhScklnaHJJZzRnRWlBUlFkejBmbXhxSWhBZ0NVR0VaR3dnQldvaUVXb2lFbXBCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnRWlBT2EwRVNka0gvQjNGcUxRQUFPZ0FJSUFJZ0FDQUhJQTFySUFaclFRMTBJZ1lnQ1VHK3BYOXNJQVZxSWdWcVFSSjJRZjhIY1dvdEFBQTZBQUlnQWlBQUlBVWdCbXRCRW5aQi93ZHhhaTBBQURvQUJ5QUNJQUFnQ0NBSFFZd3BiQ0FMYTJvaUJpQVJJQkJySWdWcVFSSjJRZjhIY1dvdEFBQTZBQU1nQWlBQUlBVWdCbXRCRW5aQi93ZHhhaTBBQURvQUJpQUNJQUFnQjBHVURtd2dER3NnRTJvaUJ5QVZJQlJySWdacVFSSjJRZjhIY1dvdEFBQTZBQVFnQWlBQUlBWWdCMnRCRW5aQi93ZHhhaTBBQURvQUJTQUJRU0JxSVFFZ0NrRUJhaUlLUVFWSERRQUxJQTlCb0FGcUpBQUxrZ2NCRkg4akFFSEFBV3NpRUNRQUlBQW9BdEFDSVFrZ0FTZ0NWQ0VCSUJBaEFBTkFJQUVvQWtBaERDQUNMZ0VnSVEwZ0FDQUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSUdJQUl1QVVBZ0FTZ0NnQUZzUWFFdGJDSU9RUUYwYTBFTGRTSVBJQUVvQWlBZ0FpNEJFR3dpQnlBQktBSmdJQUl1QVRCc0lnaHJJQUVvQXFBQklBSXVBVkJzSWdWclFRSjBJZ3RyTmdLQUFTQUFJQXNnRDJvMkFpQWdBQ0FNSUExc1FiSE9BR3dpRENBR0lBNXFJZzFxSWdZZ0JTQUhha0cyRjJ3aURpQUhJQWhxUVExMGFpSUhhMEVMZFRZQ29BRWdBQ0FHSUFkcVFRdDFOZ0lBSUFBZ0RTQU1heUlISUE0Z0JTQUlhMEVOZEdvaUNHdEJDM1UyQW1BZ0FDQUhJQWhxUVF0MU5nSkFJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUFwQkFXb2lDa0VJUncwQUN5QUpRWUFEYXlFQlFRQWhCeUFRSVFBRFFDQURJQWRCQW5ScUtBSUFJQVJxSWdJZ0FTQUFLQUlNSWd4Qno5TUFiQ0lPSUFBb0FnUWlDRUgzRVd4cUlBQW9BaFFpQlNBSWFpSUpJQUFvQWh3aUNtcEJqVGRzSWcwZ0NVSGJFR3hxSWc5cUlnc2dBQ2dDR0NJUlFRMTBJaElnQUNnQ0NDSUdRYmJYQUd4cUloUWdBQ2dDQUVFTmRFR0FnSWpBQUdvaUNTQUFLQUlRUWJIT0FHd2lGV29pRm1vaUUycEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBRWdFeUFMYTBFU2RrSC9CM0ZxTFFBQU9nQUxJQUlnQVNBSUlBcHJJZ3NnRENBRmF5SVRha0hSSW13aUZ5QUxRZjR3YkdvaUN5QUdJQkZyUVExMEloRWdDV29pR0dwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFFZ0dDQUxhMEVTZGtIL0IzRnFMUUFBT2dBS0lBSWdBU0FQSUFVZ0NtcEJpNzEvYkNJUElBeEJyMTFzSWd3Z0JVR3dvWDlzYW1wcUlnVWdCa0cyRjJ3Z0Vtc2lCaUFKSUJWcklndHFJaEpxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFCSUJJZ0JXdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBRWdDa0hHNVFCc0lBNXJJQTFxSUE5cUlnVWdDeUFHYXlJR2FrRVNka0gvQjNGcUxRQUFPZ0FESUFJZ0FTQUdJQVZyUVJKMlFmOEhjV290QUFBNkFBZ2dBaUFCSUJjZ0UwSGZpWDlzYWlJRklBa2dFV3NpQ1dwQkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFFZ0NTQUZhMEVTZGtIL0IzRnFMUUFBT2dBSElBSWdBU0FNSUFoQjNGUnNhaUFLUVl5QmYyeHFJQTFxSWdvZ0ZpQVVheUlJYWtFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQVNBSUlBcHJRUkoyUWY4SGNXb3RBQUE2QUFZZ0FFRWdhaUVBSUFkQkFXb2lCMEVHUncwQUN5QVFRY0FCYWlRQUMrY0lBUlIvSXdCQjRBRnJJaE1rQUNBQUtBTFFBaUVNSUFFb0FsUWhBU0FUSVFBRFFDQUJLQUtnQVNFSElBSXVBVkFoQ1NBQktBSWdJUTBnQWk0QkVDRU9JQUVvQW1BaENDQUNMZ0V3SVJRZ0FDQUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSUZJQUVvQW9BQklBSXVBVUJzSWdZZ0FTZ0N3QUVnQWk0QllHd2lDaUFCS0FKQUlBSXVBU0JzSWd0cUlnOXJRY0hhQUd4cVFRdDFOZ0pnSUFBZ0QwSEcwUUJzSUFWcUlnOGdCaUFLYTBHM09Hd2lFU0FLUVlON2JHcHFJaElnQnlBSmJDSUtJQTBnRG13aUIycEJveWRzSWcwZ0NDQVViQ0lKSUFkcVFlODdiQ0lPSUFjZ0NXdEI4d3BzSWdkcmFpSUlhMEVMZFRZQ3dBRWdBQ0FJSUJKcVFRdDFOZ0lBSUFBZ0N5QUdhMEdTRkd3aUNDQUxRZkhoZm14cUlBOXFJZ3NnQ1NBS2FrSGhwMzlzSWdrZ0RTQUtRZDczQUd4cWFpSUthMEVMZFRZQ2dBRWdBQ0FLSUF0cVFRdDFOZ0pBSUFBZ0JrR1ZpbjlzSUFWcUlBaHFJQkZxSWdZZ0J5QU9haUFKYWlJRmEwRUxkVFlDb0FFZ0FDQUZJQVpxUVF0MU5nSWdJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUJCQkFXb2lFRUVJUncwQUN5QU1RWUFEYXlFQlFRQWhFQ0FUSVFBRFFDQURJQkJCQW5ScUtBSUFJQVJxSWdJZ0FTQUFLQUljSWc1QkRYUWlDeUFBS0FJTUlnWWdBQ2dDQkNJS2FrRzMxUUJzSWdnZ0NrSHd0MzlzYWlBQUtBSVVJZ1VnQ21vaUZFSFN6QUJzSWc5cWFpSVJJQUFvQWhnaURDQUFLQUlJSWcxcVFlTEdBR3dpRWlBTlFiMFJiR29pRmlBQUtBSUFRUTEwUVlDQWlNQUFhaUlISUFBb0FoQWlDVUhHMFFCc2FpSVhhaUlWYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQVNBVklCRnJRUkoyUWY4SGNXb3RBQUE2QUEwZ0FpQUJJQVVnQm1wQjczVnNJQXRySWhFZ0NDQUdRZTVrYkdwcUlnZ2dFaUFNUWZ5UmYyeHFJaElnQnlBSlFaSVViR29pRldvaUdHcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBRWdHQ0FJYTBFU2RrSC9CM0ZxTFFBQU9nQU1JQUlnQVNBUElBVkJpZWgrYkdvZ0VXb2lDQ0FNUWVHbmYyd2dEVUdqSjJ4cUlnd2dDVUhKUjJ3Z0Iyb2lEV29pRDJwQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFFZ0R5QUlhMEVTZGtIL0IzRnFMUUFBT2dBTElBSWdBU0FPSUFvZ0Jtc2lDQ0FGYTJwQkRYUWlEaUFKUWI2bGYyd2dCMm9pQjJwQkVuWkIvd2R4YWkwQUFEb0FBeUFDSUFFZ0J5QU9hMEVTZGtIL0IzRnFMUUFBT2dBS0lBSWdBU0FVUVpRd2JDSUhJQVVnQm10QitOa0FiQ0lKSUFzZ0JVSG1rMzlzYW1wcUlnVWdEU0FNYXlJTWFrRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FTQU1JQVZyUVJKMlFmOEhjV290QUFBNkFBa2dBaUFCSUFoQjhoMXNJQXRySWdVZ0NTQUdRWmtyYkdwcUlnWWdGU0FTYXlJTGFrRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FTQUxJQVpyUVJKMlFmOEhjV290QUFBNkFBZ2dBaUFCSUFjZ0NrR0x2SDlzYWlBRmFpSUdJQmNnRm1zaUJXcEJFblpCL3dkeGFpMEFBRG9BQmlBQ0lBRWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUhJQUJCSUdvaEFDQVFRUUZxSWhCQkIwY05BQXNnRTBIZ0FXb2tBQXVtQ3dFWmZ5TUFRWUFDYXlJVkpBQWdBQ2dDMEFJaEVTQUJLQUpVSVFCQkNDRUtJQlVoQVFOQUlBRUNmd0pBSUFJdUFSQWlCaUFDTHdFZ0lnVnlRZi8vQTNFTkFFRUFJUVVnQWk4Qk1BMEFJQUl2QVVBTkFDQUNMd0ZRRFFBZ0FpOEJZQTBBSUFJdkFYQU5BQ0FCSUFJdUFRQWdBQ2dDQUd4QkFuUWlCVFlDd0FFZ0FTQUZOZ0tnQVNBQklBVTJBb0FCSUFFZ0JUWUNZQ0FCSUFVMkFrQWdBU0FGTmdJZ0lBRWdCVFlDQUVFNERBRUxJQUVnQUNnQ3dBRWdBaTRCWUd3aUJ5QUFLQUpBSUFWQkVIUkJFSFZzSWdWcVFkRWliQ0lMSUFWQi9qQnNhaUlRSUFJdUFVQWdBQ2dDZ0FGc1FRMTBJZ2tnQWk0QkFDQUFLQUlBYkVFTmRFR0FDSElpRW1vaURHb2lEU0FBS0FJZ0lBWnNJZ1VnQUNnQzRBRWdBaTRCY0d3aUJtcEJzMFpzSWhNZ0JVR0w0QUJzYWlBRklBQW9BcUFCSUFJdUFWQnNJZ2hxSWc0Z0FDZ0NZQ0FDTGdFd2JDSUZJQVpxSWhScVFhSExBR3dpRmlBT1FZUm5iR29pRG1vaUQydEJDM1UyQXVBQklBRWdEU0FQYWtFTGRUWUNBQ0FCSUFzZ0IwSGZpWDlzYWlJSElCSWdDV3NpQzJvaUNTQVdJQlJCdTRKL2JHb2lFaUFGSUFocVFmM2JmbXdpRFNBRlFkVEVBV3hxYWlJRmEwRUxkVFlDd0FFZ0FTQUZJQWxxUVF0MU5nSWdJQUVnQ3lBSGF5SUZJQTBnQ0VHemd3RnNhaUFPYWlJSWEwRUxkVFlDb0FFZ0FTQUZJQWhxUVF0MU5nSkFJQUVnRXlBR1FZNFRiR29nRW1vaUJTQU1JQkJySWdacVFRdDFOZ0pnSUFZZ0JXdEJDM1VoQlVFZ0MwRUNkR29nQlRZQ0FDQUNRUUpxSVFJZ0FFRUVhaUVBSUFGQkJHb2hBU0FLUVFGTElRVWdDa0VCYXlFS0lBVU5BQXNnRVVHQUEyc2hBVUVBSVJFZ0ZTRUFBMEFnQXlBUlFRSjBhaWdDQUNBRWFpSUNJQUVnQUNnQ0RDSUZJQUFvQWdRaUNtcEJ6dFlBYkNJSklBcEIxdTErYkdvZ0FDZ0NGQ0lHSUFwcUloSkI2YzhBYkNJTWFpQUFLQUljSWdnZ0NtcEIvTVVBYkNJTmFpSVRJQUFvQWdnaUN5QUFLQUlZSWhCcklnNUI0OWdBYkNJVUlCQkJnNlFCYkdvaUZpQUFLQUlBUVExMFFZQ0FpTUFBYWlJSElBQW9BaEFpRDBIUDB3QnNJaGhxSWhscUloZHFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUJJQmNnRTJ0QkVuWkIvd2R4YWkwQUFEb0FEeUFDSUFFZ0JTQUlhaUlUUWF0VmJDSVhJQVVnQm1wQjhBaHNJaG9nQ1NBRlFjMEViR3BxYWlJSklBNUIxQkZzSWc0Z0MwSE5PV3hxSWhzZ0J5QVBRZEVpYkNJUGFpSWNhaUlkYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUlnQVNBZElBbHJRUkoyUWY4SGNXb3RBQUE2QUE0Z0FpQUJJQVlnQ0dwQnNxbC9iQ0lKSUJvZ0JrSDZ0MzlzYWlBTWFtb2lEQ0FVSUF0QndsbHNhaUlMSUFjZ0Qyc2lGR29pRDJwQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFFZ0R5QU1hMEVTZGtIL0IzRnFMUUFBT2dBTklBSWdBU0FYSUFoQm1NUUFiR29nRFdvZ0NXb2lDU0FPSUJCQnNGOXNhaUlRSUFjZ0dHc2lCMm9pREdwQkVuWkIvd2R4YWkwQUFEb0FBeUFDSUFFZ0RDQUphMEVTZGtIL0IzRnFMUUFBT2dBTUlBSWdBU0FJSUFaclFhTWFiQ0lKSUFvZ0NHdEJ0amxzSWd3Z0UwR1hzSDlzSWcwZ0NFR0Z5UUZzYW1wcUlnZ2dCeUFRYXlJSGFrRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FTQUhJQWhyUVJKMlFmOEhjV290QUFBNkFBc2dBaUFCSUJKQjFTcHNJZ2dnQmlBRmEwR0oyZ0JzSWdjZ0JrSDZUbXhxYWlBSmFpSUdJQlFnQzJzaUMycEJFblpCL3dkeGFpMEFBRG9BQlNBQ0lBRWdDeUFHYTBFU2RrSC9CM0ZxTFFBQU9nQUtJQUlnQVNBS0lBVnJRYU1hYkNJR0lBVkJtdjRBYkdvZ0Iyb2dEV29pQlNBY0lCdHJJZ2RxUVJKMlFmOEhjV290QUFBNkFBWWdBaUFCSUFjZ0JXdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBRWdCaUFLUWNLS2YyeHFJQWhxSUF4cUlnVWdHU0FXYXlJS2FrRVNka0gvQjNGcUxRQUFPZ0FISUFJZ0FTQUtJQVZyUVJKMlFmOEhjV290QUFBNkFBZ2dBRUVnYWlFQUlCRkJBV29pRVVFSVJ3MEFDeUFWUVlBQ2FpUUFDNzRNQVJwL0l3QkJnQVJySWhra0FDQUFLQUxRQWlFTklBRW9BbFFoQUNBWklRRURRQ0FCSUFBb0FrQWdBaTRCSUd3aUNpQUFLQUxBQVNBQ0xnRmdiQ0lPYXlJUlFlUFlBR3dpRHlBT1FZT2tBV3hxSWhJZ0FDZ0NnQUVnQWk0QlFHd2lDMEhQMHdCc0loTWdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlER29pRkdvaUZTQUFLQUpnSUFJdUFUQnNJZ1lnQUNnQ0lDQUNMZ0VRYkNJSWFrSE8xZ0JzSWhBZ0NFSFc3WDVzYWlBQUtBS2dBU0FDTGdGUWJDSUhJQWhxSWhwQjZjOEFiQ0lXYWlBQUtBTGdBU0FDTGdGd2JDSUZJQWhxUWZ6RkFHd2lGMm9pR0d0QkMzVTJBdUFESUFFZ0ZTQVlha0VMZFRZQ0FDQUJJQkZCMUJGc0loRWdDa0hOT1d4cUloVWdDMEhSSW13aUN5QU1haUlZYWlJYklBVWdCbW9pSEVHclZXd2lIU0FHSUFkcVFmQUliQ0llSUJBZ0JrSE5CR3hxYW1vaUVHdEJDM1UyQXNBRElBRWdFQ0FiYWtFTGRUWUNJQ0FCSUE4Z0NrSENXV3hxSWdvZ0RDQUxheUlQYWlJTElBVWdCMnBCc3FsL2JDSVFJQjRnQjBINnQzOXNhaUFXYW1vaUZtdEJDM1UyQXFBRElBRWdDeUFXYWtFTGRUWUNRQ0FCSUJFZ0RrR3dYMnhxSWc0Z0RDQVRheUlNYWlJUklCMGdCVUdZeEFCc2FpQVhhaUFRYWlJTGEwRUxkVFlDZ0FNZ0FTQUxJQkZxUVF0MU5nSmdJQUVnRENBT2F5SU1JQVVnQjJ0Qm94cHNJZzRnQ0NBRmEwRzJPV3dpRVNBY1FaZXdmMndpQ3lBRlFZWEpBV3hxYW1vaUJXdEJDM1UyQXVBQ0lBRWdCU0FNYWtFTGRUWUNnQUVnQVNBUElBcHJJZ1VnR2tIVkttd2lEQ0FISUFaclFZbmFBR3dpQ2lBSFFmcE9iR3BxSUE1cUlnZHJRUXQxTmdMQUFpQUJJQVVnQjJwQkMzVTJBcUFCSUFFZ0dDQVZheUlISUFnZ0JtdEJveHBzSWdVZ0JrR2EvZ0JzYWlBS2FpQUxhaUlHYTBFTGRUWUNvQUlnQVNBR0lBZHFRUXQxTmdMQUFTQUJJQlFnRW1zaUJpQUZJQWhCd29wL2JHb2dER29nRVdvaUNHdEJDM1UyQW9BQ0lBRWdCaUFJYWtFTGRUWUM0QUVnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0NVRUJhaUlKUVFoSERRQUxJQTFCZ0FOcklRRkJBQ0VNSUJraEFBTkFJQU1nREVFQ2RHb29BZ0FnQkdvaUFpQUJJQUFvQWd3aUJpQUFLQUlFSWdocVFjN1dBR3dpRFNBSVFkYnRmbXhxSUFBb0FoUWlCeUFJYWlJUlFlblBBR3dpRDJvZ0FDZ0NIQ0lGSUFocVFmekZBR3dpRW1vaUN5QUFLQUlJSWdvZ0FDZ0NHQ0lPYXlJVFFlUFlBR3dpRkNBT1FZT2tBV3hxSWhVZ0FDZ0NBRUVOZEVHQWdJakFBR29pQ1NBQUtBSVFJaEJCejlNQWJDSWFhaUlXYWlJWGFrRVNka0gvQjNGcUxRQUFPZ0FBSUFJZ0FTQVhJQXRyUVJKMlFmOEhjV290QUFBNkFBOGdBaUFCSUFVZ0Jtb2lDMEdyVld3aUZ5QUdJQWRxUWZBSWJDSVlJQTBnQmtITkJHeHFhbW9pRFNBVFFkUVJiQ0lUSUFwQnpUbHNhaUliSUFrZ0VFSFJJbXdpRUdvaUhHb2lIV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUVnSFNBTmEwRVNka0gvQjNGcUxRQUFPZ0FPSUFJZ0FTQUZJQWRxUWJLcGYyd2lEU0FZSUFkQityZC9iR29nRDJwcUlnOGdGQ0FLUWNKWmJHb2lDaUFKSUJCckloUnFJaEJxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFCSUJBZ0QydEJFblpCL3dkeGFpMEFBRG9BRFNBQ0lBRWdGeUFGUVpqRUFHeHFJQkpxSUExcUlnMGdFeUFPUWJCZmJHb2lEaUFKSUJwcklnbHFJZzlxUVJKMlFmOEhjV290QUFBNkFBTWdBaUFCSUE4Z0RXdEJFblpCL3dkeGFpMEFBRG9BRENBQ0lBRWdCU0FIYTBHakdtd2lEU0FJSUFWclFiWTViQ0lQSUF0Qmw3Qi9iQ0lTSUFWQmhja0JiR3BxYWlJRklBa2dEbXNpQ1dwQkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFFZ0NTQUZhMEVTZGtIL0IzRnFMUUFBT2dBTElBSWdBU0FSUWRVcWJDSUZJQWNnQm10Qmlkb0FiQ0lKSUFkQitrNXNhbW9nRFdvaUJ5QVVJQXBySWdwcVFSSjJRZjhIY1dvdEFBQTZBQVVnQWlBQklBb2dCMnRCRW5aQi93ZHhhaTBBQURvQUNpQUNJQUVnQ0NBR2EwR2pHbXdpQnlBR1FacitBR3hxSUFscUlCSnFJZ1lnSENBYmF5SUpha0VTZGtIL0IzRnFMUUFBT2dBR0lBSWdBU0FKSUFaclFSSjJRZjhIY1dvdEFBQTZBQWtnQWlBQklBY2dDRUhDaW45c2FpQUZhaUFQYWlJR0lCWWdGV3NpQ0dwQkVuWkIvd2R4YWkwQUFEb0FCeUFDSUFFZ0NDQUdhMEVTZGtIL0IzRnFMUUFBT2dBSUlBQkJJR29oQUNBTVFRRnFJZ3hCRUVjTkFBc2dHVUdBQkdva0FBdWxDd0VZZnlNQVFlQURheUlZSkFBZ0FDZ0MwQUloRlNBQktBSlVJUUFnR0NFQkEwQWdBQ2dDb0FFaEJTQUNMZ0ZRSVE4Z0FDZ0NJQ0VLSUFJdUFSQWhDeUFBS0FMZ0FTRUhJQUl1QVhBaERDQUFLQUpnSVJZZ0FpNEJNQ0VOSUFFZ0FpNEJBQ0FBS0FJQWJFRU5kRUdBQ0hJaURpQUFLQUxBQVNBQ0xnRmdiQ0lJUWI2bGYyeHFJaE1nQUNnQ1FDQUNMZ0VnYkNJSklBQW9Bb0FCSUFJdUFVQnNJaEJySWdaQndLVi9iR3BCQzNVMkF1QUJJQUVnQ0VHZHlRQnNJQTVxSWhFZ0JrSDJBbXdpRkNBSklCQnFJaEJCenRVQWJDSVphbW9pRnlBSElBeHNJZ2RCbzUwQmJDQU5JQlpzSWd4QjlxbC9iQ0lXYXlBRklBOXNRYkhPQUd3aUR5QUtJQXRzSWdVZ0Iyc2lDa0dDMmdCc2FpSUxhaUlOYTBFTGRUWUN3QU1nQVNBTklCZHFRUXQxTmdJQUlBRWdDRUdFWkd3Z0Rtb2lEaUFHUWRBV2JDSUlJQkJCekRKc0lnMXFhaUlYSUF3Z0Iyc2lHaUFGYWtHYU5Xd2lHeUFGUWZFZ2JHb2lIR3RCQzNVMkFxQURJQUVnRnlBY2FrRUxkVFlDSUNBQklCTWdCa0dnTFd4cUloTWdDa0d4emdCc0lBOXJJZ3ByUVF0MU5nS0FBeUFCSUFvZ0UycEJDM1UyQWtBZ0FTQUpRWlBjQUd3aUNTQVpheUFVYWlBT2FpSUtJQVVnQjJwQjZDUnNJaE1nREVIbVNtd2lEQ0FGUWJrZWJHb2dEMnRxSWhSclFRdDFOZ0xnQWlBQklBb2dGR3BCQzNVMkFtQWdBU0FSSUExcklBaHFJZ2dnR3lBYVFkejBmbXhxSWdwclFRdDFOZ0xBQWlBQklBZ2dDbXBCQzNVMkFvQUJJQUVnQmtHNVptd2lCaUFSSUJCQmdpTnNJZ2hyYWlJUklBOGdGbW9nQjBHdlNHeHFJQk5xSWdkclFRdDFOZ0tnQWlBQklBY2dFV3BCQzNVMkFxQUJJQUVnQ0NBSmF5QUdhaUFPYWlJR0lBd2dCVUhudUg5c2FpQUxhaUlGYTBFTGRUWUNnQUlnQVNBRklBWnFRUXQxTmdMQUFTQUJRUVJxSVFFZ0FFRUVhaUVBSUFKQkFtb2hBaUFTUVFGcUloSkJDRWNOQUFzZ0ZVR0FBMnNoQVVFQUlROGdHQ0VBQTBBZ0F5QVBRUUowYWlnQ0FDQUVhaUlDSUFFZ0FDZ0NIQ0lHUWFPZEFXd2dBQ2dDRENJT1FmYXBmMndpQ21zZ0FDZ0NGRUd4emdCc0loSWdBQ2dDQkNJRklBWnJJZ3RCZ3RvQWJHb2lGbW9pRlNBQUtBSUFRUTEwUVlDQWlNQUFhaUlJSUFBb0FoZ2lDVUdkeVFCc2FpSVJJQUFvQWdnaUVDQUFLQUlRSWd4cklnZEI5Z0pzSWcwZ0RDQVFhaUlNUWM3VkFHd2lFMnBxSWhScVFSSjJRZjhIY1dvdEFBQTZBQUFnQWlBQklCUWdGV3RCRW5aQi93ZHhhaTBBQURvQURpQUNJQUVnQlNBT0lBWnJJaFJxUVpvMWJDSVpJQVZCOFNCc2FpSVhJQWxCaEdSc0lBaHFJaFVnQjBIUUZtd2lHaUFNUWN3eWJDSWJhbW9pSEdwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFFZ0hDQVhhMEVTZGtIL0IzRnFMUUFBT2dBTklBSWdBU0FMUWJIT0FHd2dFbXNpQ3lBSlFiNmxmMndnQ0dvaUNDQUhRYUF0YkdvaUNXcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBRWdDU0FMYTBFU2RrSC9CM0ZxTFFBQU9nQU1JQUlnQVNBRklBWnFRZWdrYkNJSklBNUI1a3BzSWc0Z0JVRzVIbXhxSUJKcmFpSUxJQkJCazl3QWJDSVFJQk5ySUExcUlCVnFJZzFxUVJKMlFmOEhjV290QUFBNkFBTWdBaUFCSUEwZ0MydEJFblpCL3dkeGFpMEFBRG9BQ3lBQ0lBRWdHU0FVUWR6MGZteHFJZ3NnRVNBYmF5QWFhaUlOYWtFU2RrSC9CM0ZxTFFBQU9nQUVJQUlnQVNBTklBdHJRUkoyUWY4SGNXb3RBQUE2QUFvZ0FpQUJJQW9nRW1vZ0JrR3ZTR3hxSUFscUlnWWdCMEc1Wm13aUVpQVJJQXhCZ2lOc0lnbHJhaUlSYWtFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQVNBUklBWnJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUJJQTRnQlVIbnVIOXNhaUFXYWlJRklBa2dFR3NnRW1vZ0ZXb2lCbXBCRW5aQi93ZHhhaTBBQURvQUJpQUNJQUVnQmlBRmEwRVNka0gvQjNGcUxRQUFPZ0FJSUFJZ0FTQUhRY0NsZjJ3Z0NHcEJFblpCL3dkeGFpMEFBRG9BQnlBQVFTQnFJUUFnRDBFQmFpSVBRUTlIRFFBTElCaEI0QU5xSkFBTHh3b0JGWDhqQUVIQUEyc2lGaVFBSUFBb0F0QUNJUlFnQVNnQ1ZDRUFJQlloQVFOQUlBQW9Bc0FCSVFjZ0FpNEJZQ0VJSUFBb0FrQWhDaUFDTGdFZ0lRa2dBU0FDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlOSUFBb0FvQUJJQUl1QVVCc0lndEJ2cVYvYkdwQkMzVWlFU0FBS0FMZ0FTQUNMZ0Z3YkNJT0lBQW9BaUFnQWk0QkVHd2lEQ0FBS0FKZ0lBSXVBVEJzSWdWckloSWdBQ2dDb0FFZ0FpNEJVR3dpQm10cVFRSjBJZzlyTmdMQUFpQUJJQThnRVdvMkFtQWdBU0FISUFoc0lnZ2dDU0FLYkNJS2FrSGl4Z0JzSWdrZ0NFSDhrWDlzYWlJUklBdEJraFJzSUExcUlnOXFJaFVnQlNBR2FrSHZkV3dnRGtFTmRDSUhheUlPSUFVZ0RHcEJ0OVVBYkNJWElBVkI3bVJzYW1vaUUydEJDM1UyQW9BRElBRWdFeUFWYWtFTGRUWUNJQ0FCSUFoQjRhZC9iQ0FLUWFNbmJHb2lDQ0FMUWNsSGJDQU5haUlWYWlJVElBNGdCaUFNYWlJT1FkTE1BR3dpR0NBR1FZbm9mbXhxYWlJWmEwRUxkVFlDNEFJZ0FTQVRJQmxxUVF0MU5nSkFJQUVnRHlBUmF5SVJJQkpCOGgxc0lBZHJJaElnQmlBRmEwSDQyUUJzSWc4Z0JVR1pLMnhxYWlJRmEwRUxkVFlDZ0FJZ0FTQUZJQkZxUVF0MU5nS2dBU0FCSUF0Qnh0RUFiQ0FOYWlJRklBa2dDa0c5RVd4cUlnMXJJZ3NnRGtHVU1Hd2lDaUFNUVl1OGYyeHFJQkpxSWdsclFRdDFOZ0xnQVNBQklBa2dDMnBCQzNVMkFzQUJJQUVnQlNBTmFpSUZJQmNnREVId3QzOXNhaUFZYWlBSGFpSU1hMEVMZFRZQ29BTWdBU0FGSUF4cVFRdDFOZ0lBSUFFZ0ZTQUlheUlGSUE4Z0JrSG1rMzlzYWlBS2FpQUhhaUlHYTBFTGRUWUNvQUlnQVNBRklBWnFRUXQxTmdLQUFTQUJRUVJxSVFFZ0FFRUVhaUVBSUFKQkFtb2hBaUFRUVFGcUloQkJDRWNOQUFzZ0ZFR0FBMnNoQVVFQUlRMGdGaUVBQTBBZ0F5QU5RUUowYWlnQ0FDQUVhaUlDSUFFZ0FDZ0NIQ0lVUVExMElnc2dBQ2dDRENJRklBQW9BZ1FpREdwQnQ5VUFiQ0lKSUF4QjhMZC9iR29nQUNnQ0ZDSUdJQXhxSWhGQjBzd0FiQ0lPYW1vaUVpQUFLQUlZSWdnZ0FDZ0NDQ0lLYWtIaXhnQnNJZzhnQ2tHOUVXeHFJaFVnQUNnQ0FFRU5kRUdBZ0lqQUFHb2lCeUFBS0FJUUloQkJ4dEVBYkdvaUYyb2lFMnBCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUVnRXlBU2EwRVNka0gvQjNGcUxRQUFPZ0FOSUFJZ0FTQUZJQVpxUWU5MWJDQUxheUlTSUFrZ0JVSHVaR3hxYWlJSklBOGdDRUg4a1g5c2FpSVBJQWNnRUVHU0ZHeHFJaE5xSWhocVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQklCZ2dDV3RCRW5aQi93ZHhhaTBBQURvQURDQUNJQUVnRGlBR1FZbm9mbXhxSUJKcUlna2dDRUhocDM5c0lBcEJveWRzYWlJSUlCQkJ5VWRzSUFkcUlncHFJZzVxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFCSUE0Z0NXdEJFblpCL3dkeGFpMEFBRG9BQ3lBQ0lBRWdGQ0FNSUFWcklna2dCbXRxUVExMEloUWdFRUcrcFg5c0lBZHFJZ2RxUVJKMlFmOEhjV290QUFBNkFBTWdBaUFCSUFjZ0ZHdEJFblpCL3dkeGFpMEFBRG9BQ2lBQ0lBRWdFVUdVTUd3aUJ5QUdJQVZyUWZqWkFHd2lFQ0FMSUFaQjVwTi9iR3BxYWlJR0lBb2dDR3NpQ0dwQkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFFZ0NDQUdhMEVTZGtIL0IzRnFMUUFBT2dBSklBSWdBU0FKUWZJZGJDQUxheUlHSUJBZ0JVR1pLMnhxYWlJRklCTWdEMnNpQzJwQkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFFZ0N5QUZhMEVTZGtIL0IzRnFMUUFBT2dBSUlBSWdBU0FISUF4Qmk3eC9iR29nQm1vaUJTQVhJQlZySWdacVFSSjJRZjhIY1dvdEFBQTZBQVlnQWlBQklBWWdCV3RCRW5aQi93ZHhhaTBBQURvQUJ5QUFRU0JxSVFBZ0RVRUJhaUlOUVE1SERRQUxJQlpCd0FOcUpBQUwvd29CRm44akFFR2dBMnNpRmlRQUlBQW9BdEFDSVFrZ0FTZ0NWQ0VBSUJZaEFRTkFJQUFvQXVBQklRb2dBaTRCY0NFUUlBQW9BbUFoQlNBQ0xnRXdJUVlnQUNnQ29BRWhFU0FDTGdGUUlSTWdBQ2dDSUNFSUlBSXVBUkFoQ3lBQklBSXVBUUFnQUNnQ0FHeEJEWFJCZ0FoeUlnd2dBQ2dDZ0FFZ0FpNEJRR3dpRFNBQUtBTEFBU0FDTGdGZ2JDSU9heUlQSUFBb0FrQWdBaTRCSUd3aUIydEJ3ZG9BYkdwQkMzVTJBc0FCSUFFZ0QwR1pCbXdnREdvaUZ5QU5JQTVxSWcxQitja0FiQ0lPSUFkQjhkY0FiR3BxSWhRZ0JTQUdiQ0lGSUFnZ0Myd2lDR3BCME5RQWJDSUxJQWhCMi81K2JHb2dFU0FUYkNJR0lBaHFRYjdLQUd3aUVXb2dDaUFRYkNJS0lBaHFJaEJCZ2p4c0loTnFJaFZyUVF0MU5nS0FBeUFCSUJRZ0ZXcEJDM1UyQWdBZ0FTQVBRWlVmYkNBTWFpSVVJQWRCNE1NQWJDQU5RYUFVYkNJVmEyb2lHQ0FGSUFwcVFjSzFmMndpR1NBRklBWnFRYXRxYkNJYUlBc2dCVUhMTld4cWFtb2lDMnRCQzNVMkF1QUNJQUVnQ3lBWWFrRUxkVFlDSUNBQklBZEJqQ0JzSUE1cklCZHFJZ3NnQmlBS2FrSDRWV3dpRGlBYUlBWkJzWnQvYkdvZ0VXcHFJaEZyUVF0MU5nTEFBaUFCSUFzZ0VXcEJDM1UyQWtBZ0FTQVBRWUpFYkNBTWFpSU1JQWRCakhWc0lBMUI4aHRzSWc5cmFpSU5JQmtnQ2tHVWpRRnNhaUFUYWlBT2FpSVJhMEVMZFRZQ29BSWdBU0FOSUJGcVFRdDFOZ0pnSUFFZ0R5QUhRY3RNYkdvZ0RHb2lEQ0FRUWRVVmJDQUdJQVZyUVlJOGJHb2lEeUFJUWJNVWJHb2dCVUdXWW14cUlnVnJRUXQxTmdLQUFpQUJJQVVnREdwQkMzVTJBb0FCSUFFZ0ZTQUhRZTZ2ZjJ4cUlCUnFJZ2NnRHlBR1FjNFliR29nQ2tHL2tIOXNhaUlGYTBFTGRUWUM0QUVnQVNBRklBZHFRUXQxTmdLZ0FTQUJRUVJxSVFFZ0FFRUVhaUVBSUFKQkFtb2hBaUFTUVFGcUloSkJDRWNOQUFzZ0NVR0FBMnNoQVVFQUlRd2dGaUVBQTBBZ0F5QU1RUUowYWlnQ0FDQUVhaUlDSUFFZ0FDZ0NEQ0lGSUFBb0FnUWlDR3BCME5RQWJDSUpJQWhCMi81K2JHb2dBQ2dDRkNJR0lBaHFRYjdLQUd3aUVHb2dBQ2dDSENJS0lBaHFJaEZCZ2p4c0loTnFJZ3NnQUNnQ0dDSVNJQUFvQWhBaURtb2lEVUg1eVFCc0loY2dBQ2dDQ0NJSFFmSFhBR3hxSUFBb0FnQkJEWFJCZ0lDSXdBQnFJZzhnRGlBU2F5SVNRWmtHYkdvaURtb2lGR3BCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUVnRkNBTGEwRVNka0gvQjNGcUxRQUFPZ0FNSUFJZ0FTQUZJQXBxUWNLMWYyd2lDeUFGSUFacVFhdHFiQ0lVSUFrZ0JVSExOV3hxYW1vaUNTQVNRWlVmYkNBUGFpSVZJQWRCNE1NQWJDQU5RYUFVYkNJWWEyb2lHV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUVnR1NBSmEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FTQUdJQXBxUWZoVmJDSUpJQlFnQmtHeG0zOXNhaUFRYW1vaUVDQUhRWXdnYkNBWGF5QU9haUlPYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUlnQVNBT0lCQnJRUkoyUWY4SGNXb3RBQUE2QUFvZ0FpQUJJQXNnQ2tHVWpRRnNhaUFUYWlBSmFpSUpJQkpCZ2tSc0lBOXFJaEFnQjBHTWRXd2dEVUh5RzJ3aURXdHFJaE5xUVJKMlFmOEhjV290QUFBNkFBTWdBaUFCSUJNZ0NXdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBRWdFVUhWRld3Z0JpQUZhMEdDUEd4cUlna2dDRUd6Rkd4cUlBVkJsbUpzYWlJRklBMGdCMEhMVEd4cUlCQnFJZ2hxUVJKMlFmOEhjV290QUFBNkFBUWdBaUFCSUFnZ0JXdEJFblpCL3dkeGFpMEFBRG9BQ0NBQ0lBRWdDU0FHUWM0WWJHb2dDa0cva0g5c2FpSUZJQmdnQjBIdXIzOXNhaUFWYWlJR2FrRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FTQUdJQVZyUVJKMlFmOEhjV290QUFBNkFBY2dBaUFCSUJJZ0IydEJ3ZG9BYkNBUGFrRVNka0gvQjNGcUxRQUFPZ0FHSUFCQklHb2hBQ0FNUVFGcUlneEJEVWNOQUFzZ0ZrR2dBMm9rQUF1WUNRRVVmeU1BUVlBRGF5SVZKQUFnQUNnQzBBSWhGaUFCS0FKVUlRQWdGU0VCQTBBZ0FDZ0NnQUVoQ0NBQ0xnRkFJUTRnQVNBQUtBSkFJQUl1QVNCc0lnOGdBQ2dDd0FFZ0FpNEJZR3dpQ1d0QkRYUWlDaUFDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlMYWlJTUlBQW9BaUFnQWk0QkVHd2lCaUFBS0FMZ0FTQUNMZ0Z3YkNJSGF5SVFJQUFvQW1BZ0FpNEJNR3dpRVNBQUtBS2dBU0FDTGdGUWJDSUZheUlTYWtIUkltd2lFeUFRUWY0d2JHb2lFR3RCQzNVMkFzQUNJQUVnRENBUWFrRUxkVFlDSUNBQklBc2dDbXNpQ2lBVElCSkIzNGwvYkdvaURHdEJDM1UyQXVBQklBRWdDaUFNYWtFTGRUWUNnQUVnQVNBSUlBNXNRYkhPQUd3aURpQUxhaUlLSUFsQkRYUWlDU0FQUWJiWEFHeHFJZ3hySWhBZ0J5QUZJQVpxSWhKcVFZMDNiQ0lJSUJGQnIxMXNJaE1nQmtIY1ZHeHFJQWRCaklGL2JHcHFJaFJyUVF0MU5nTEFBU0FCSUJBZ0ZHcEJDM1UyQXFBQklBRWdDaUFNYWlJS0lBZ2dFa0hiRUd4cUlnd2dFVUhQMHdCc0loRWdCa0gzRVd4cWFpSUdhMEVMZFRZQzRBSWdBU0FHSUFwcVFRdDFOZ0lBSUFFZ0QwRzJGMndnQ1dzaUJpQUxJQTVySWd0cUlnOGdCU0FIYWtHTHZYOXNJZzRnQlVHd29YOXNJQk5xYWlBTWFpSUZhMEVMZFRZQ29BSWdBU0FGSUE5cVFRdDFOZ0pBSUFFZ0N5QUdheUlMSUFkQnh1VUFiQ0FSYXlBSWFpQU9haUlIYTBFTGRUWUNnQUlnQVNBSElBdHFRUXQxTmdKZ0lBRkJCR29oQVNBQVFRUnFJUUFnQWtFQ2FpRUNJQTFCQVdvaURVRUlSdzBBQ3lBV1FZQURheUVCUVFBaEN5QVZJUUFEUUNBRElBdEJBblJxS0FJQUlBUnFJZ0lnQVNBQUtBSU1JZzlCejlNQWJDSVdJQUFvQWdRaUJrSDNFV3hxSUFBb0FoUWlCU0FHYWlJTklBQW9BaHdpQjJwQmpUZHNJaEVnRFVIYkVHeHFJZzVxSWdrZ0FDZ0NHQ0lLUVExMElnd2dBQ2dDQ0NJSVFiYlhBR3hxSWhBZ0FDZ0NBRUVOZEVHQWdJakFBR29pRFNBQUtBSVFRYkhPQUd3aUVtb2lFMm9pRkdwQkVuWkIvd2R4YWkwQUFEb0FBQ0FDSUFFZ0ZDQUphMEVTZGtIL0IzRnFMUUFBT2dBTElBSWdBU0FHSUFkcklna2dEeUFGYXlJVWFrSFJJbXdpRnlBSlFmNHdiR29pQ1NBSUlBcHJRUTEwSWdvZ0RXb2lHR3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUVnR0NBSmEwRVNka0gvQjNGcUxRQUFPZ0FLSUFJZ0FTQU9JQVVnQjJwQmk3MS9iQ0lPSUE5QnIxMXNJZzhnQlVHd29YOXNhbXBxSWdVZ0NFRzJGMndnREdzaUNDQU5JQkpySWdscUlneHFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQXdnQld0QkVuWkIvd2R4YWkwQUFEb0FDU0FDSUFFZ0IwSEc1UUJzSUJacklCRnFJQTVxSWdVZ0NTQUlheUlJYWtFU2RrSC9CM0ZxTFFBQU9nQURJQUlnQVNBSUlBVnJRUkoyUWY4SGNXb3RBQUE2QUFnZ0FpQUJJQmNnRkVIZmlYOXNhaUlGSUEwZ0Ntc2lEV3BCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUVnRFNBRmEwRVNka0gvQjNGcUxRQUFPZ0FISUFJZ0FTQVBJQVpCM0ZSc2FpQUhRWXlCZjJ4cUlCRnFJZ2NnRXlBUWF5SUdha0VTZGtIL0IzRnFMUUFBT2dBRklBSWdBU0FHSUFkclFSSjJRZjhIY1dvdEFBQTZBQVlnQUVFZ2FpRUFJQXRCQVdvaUMwRU1SdzBBQ3lBVlFZQURhaVFBQytVSkFSUi9Jd0JCNEFKckloWWtBQ0FBS0FMUUFpRVJJQUVvQWxRaEFDQVdJUUVEUUNBQUtBTGdBU0VGSUFJdUFYQWhEU0FBS0FKZ0lRWWdBaTRCTUNFSUlBQW9BcUFCSVE0Z0FpNEJVQ0VQSUFBb0FpQWhDU0FDTGdFUUlSQWdBU0FDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlMSUFBb0FzQUJJQUl1QVdCc0lnd2dBQ2dDUUNBQ0xnRWdiQ0lIYWlJWElBQW9Bb0FCSUFJdUFVQnNJZ3BySWhOQnY2Vi9iR3BCQzNVMkFxQUJJQUVnRTBIczFnQnNJQXRxSWdzZ0NpQU1hMEgrb2dGc2FpSVRJQXhCdFljQmJHb2lGQ0FHSUFoc0lnWWdDU0FRYkNJSmFpSVFRZW80YkNJVklBbEI5a1JzYWlBT0lBOXNJZ2dnQ1dwQjlDcHNJZzVxSUFVZ0RXd2lCU0FJSUJCcWFrSEFHV3dpRFNBRklBbHFRYmdYYkdvaUNXb2lEMnRCQzNVMkFzQUNJQUVnRHlBVWFrRUxkVFlDQUNBQklBc2dGMEdGdG45c2FpSVBJQXhCdzAxc2FpSU1JQTBnQmlBSWFrSEp0WDlzYWlJUUlBNGdDRUhhczM5c2Ftb2lEbXRCQzNVMkFvQUNJQUVnRENBT2FrRUxkVFlDUUNBQklBc2dDaUFIYTBISkcyd2lER29nQjBHUm4zOXNhaUlMSUFrZ0JTQUdha0gxakg5c0lna2dCVUhIaGdGc2Ftb2lEbXRCQzNVMkF1QUJJQUVnQ3lBT2FrRUxkVFlDWUNBQklBcEJ1ZndBYkNBSFFmMm1mMnhxSUE5cUlnY2dDRUdMd0FCc0lBWkJqYUovYkdvZ0JVR1dsSDlzYWlBTmFpSUlhMEVMZFRZQ3dBRWdBU0FISUFocVFRdDFOZ0tBQVNBQklCTWdDa0cwaTM5c2FpQU1haUlLSUJVZ0JrSFloQUZzYWlBSmFpQVFhaUlHYTBFTGRUWUNvQUlnQVNBR0lBcHFRUXQxTmdJZ0lBRkJCR29oQVNBQVFRUnFJUUFnQWtFQ2FpRUNJQkpCQVdvaUVrRUlSdzBBQ3lBUlFZQURheUVCUVFBaERDQVdJUUFEUUNBRElBeEJBblJxS0FJQUlBUnFJZ0lnQVNBQUtBSU1JZ29nQUNnQ0JDSUZhaUlIUWVvNGJDSU5JQVZCOWtSc2FpQUFLQUlVSWdZZ0JXcEI5Q3BzSWhGcUlBQW9BaHdpQ0NBR0lBZHFha0hBR1d3aUVpQUZJQWhxUWJnWGJHb2lEbW9pRHlBQUtBSUFRUTEwUVlDQWlNQUFhaUlRSUFBb0FoZ2lCeUFBS0FJSUlnbHFJaGNnQUNnQ0VDSUZheUlUUWV6V0FHeHFJZ3NnQlNBSGEwSCtvZ0ZzYWlJVUlBZEJ0WWNCYkdvaUZXcEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBRWdGU0FQYTBFU2RrSC9CM0ZxTFFBQU9nQUtJQUlnQVNBU0lBWWdDbXBCeWJWL2JHb2lEeUFJSUFwcVFmV01mMndpRlNBTklBcEIySVFCYkdwcWFpSU5JQVVnQ1d0QnlSdHNJaGdnRkNBRlFiU0xmMnhxYWlJVWFrRVNka0gvQjNGcUxRQUFPZ0FCSUFJZ0FTQVVJQTFyUVJKMlFmOEhjV290QUFBNkFBa2dBaUFCSUJFZ0JrSGFzMzlzYWlBUGFpSU5JQXNnRjBHRnRuOXNhaUlSSUFkQncwMXNhaUlIYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUlnQVNBSElBMXJRUkoyUWY4SGNXb3RBQUE2QUFnZ0FpQUJJQlVnQ0VISGhnRnNhaUFPYWlJSElBc2dHR29nQ1VHUm4zOXNhaUlMYWtFU2RrSC9CM0ZxTFFBQU9nQURJQUlnQVNBTElBZHJRUkoyUWY4SGNXb3RBQUE2QUFjZ0FpQUJJQVpCaThBQWJDQUtRWTJpZjJ4cUlBaEJscFIvYkdvZ0Vtb2lDaUFGUWJuOEFHd2dDVUg5cG45c2FpQVJhaUlHYWtFU2RrSC9CM0ZxTFFBQU9nQUVJQUlnQVNBR0lBcHJRUkoyUWY4SGNXb3RBQUE2QUFZZ0FpQUJJQk5CdjZWL2JDQVFha0VTZGtIL0IzRnFMUUFBT2dBRklBQkJJR29oQUNBTVFRRnFJZ3hCQzBjTkFBc2dGa0hnQW1va0FBdUhDQUVTZnlNQVFjQUNheUlVSkFBZ0FDZ0MwQUloRVNBQktBSlVJUUFnRkNFQkEwQWdBQ2dDd0FFaENpQUNMZ0ZnSVFjZ0FDZ0NRQ0VMSUFJdUFTQWhDU0FCSUFJdUFRQWdBQ2dDQUd4QkRYUkJnQWh5SWdVZ0FDZ0NnQUVnQWk0QlFHd2lCa0crcFg5c2FrRUxkU0lTSUFBb0FpQWdBaTRCRUd3aUNDQUFLQUtnQVNBQ0xnRlFiQ0lNYXlBQUtBSmdJQUl1QVRCc0lnMGdBQ2dDNEFFZ0FpNEJjR3dpRG1zaUQydEJBblFpRTJzMkF1QUJJQUVnRWlBVGFqWUNRQ0FCSUFjZ0Ntd2lDaUFKSUF0c0lnZHFRWm8xYkNJTElBZEI4U0JzYWlJSElBWkJuY2tBYkNBRmFpSUphaUlTSUE5QjR4TnNJaE1nREVFTmRDSU1haUlWSUEwZ0Rtb2lEVUh2UEd3aURpQUlRYlBaQUd4cWFpSVdhMEVMZFRZQ29BSWdBU0FTSUJacVFRdDFOZ0lBSUFFZ0NTQUhheUlISUFoQmxBNXNJQTVySUJWcUlnbHJRUXQxTmdLZ0FTQUJJQWNnQ1dwQkMzVTJBb0FCSUFFZ0N5QUtRZHowZm14cUlnb2dCa0dFWkd3Z0JXb2lCV29pQmlBSVFkUFFBR3dnRFVIUEpXd2lCMnNnRENBVGF5QVBRUXgwYXlJUGF5SUxhMEVMZFRZQ2dBSWdBU0FHSUF0cVFRdDFOZ0lnSUFFZ0JTQUtheUlGSUE4Z0NFR01LV3dnQjJ0cUlnaHJRUXQxTmdMQUFTQUJJQVVnQ0dwQkMzVTJBbUFnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0VFRUJhaUlRUVFoSERRQUxJQkZCZ0FOcklRQkJBQ0VRSUJRaEFnTkFJQU1nRUVFQ2RHb29BZ0FnQkdvaUFTQUFJQUlvQWh3aUJTQUNLQUlNSWdacUloRkI3enhzSWdvZ0FpZ0NCQ0lJUWJQWkFHeHFJQVlnQldzaUJVSGpFMndpQnlBQ0tBSVVJZ3RCRFhRaUNXb2lFbW9pRENBQ0tBSVlJZzBnQWlnQ0NDSUdha0dhTld3aURpQUdRZkVnYkdvaUV5QUNLQUlBUVExMFFZQ0FpTUFBYWlJR0lBSW9BaEFpRDBHZHlRQnNhaUlWYWlJV2FrRVNka0gvQjNGcUxRQUFPZ0FBSUFFZ0FDQVdJQXhyUVJKMlFmOEhjV290QUFBNkFBa2dBU0FBSUFoQjA5QUFiQ0FSUWM4bGJDSVJheUFKSUFkcklBVkJESFJySWdkcklna2dEaUFOUWR6MGZteHFJZ3dnRDBHRVpHd2dCbW9pRFdvaURtcEJFblpCL3dkeGFpMEFBRG9BQVNBQklBQWdEaUFKYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUVnQUNBSUlBdHJJQVZyUVExMElnVWdEMEcrcFg5c0lBWnFJZ1pxUVJKMlFmOEhjV290QUFBNkFBSWdBU0FBSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQnlBQklBQWdCeUFJUVl3cGJDQVJhMm9pQlNBTklBeHJJZ1pxUVJKMlFmOEhjV290QUFBNkFBTWdBU0FBSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQmlBQklBQWdDRUdVRG13Z0Ntc2dFbW9pQ0NBVklCTnJJZ1ZxUVJKMlFmOEhjV290QUFBNkFBUWdBU0FBSUFVZ0NHdEJFblpCL3dkeGFpMEFBRG9BQlNBQ1FTQnFJUUlnRUVFQmFpSVFRUXBIRFFBTElCUkJ3QUpxSkFBTGtRY0JFbjhqQUVHZ0Ftc2lEeVFBSUFBb0F0QUNJUkFnQVNnQ1ZDRUFJQThoQVFOQUlBRWdBaTRCWUNBQUtBTEFBV3hCb1Mxc0lnVWdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlFV29pQmlBQUtBS0FBU0FDTGdGQWJDSUhJQUFvQWtBZ0FpNEJJR3dpQ0dwQmg5VUFiQ0lOSUFkQjNBOXNJaEpyYWlJVElBQW9BcUFCSUFJdUFWQnNJZ2tnQUNnQ0lDQUNMZ0VRYkNJT2FrR1hPbXdpRkNBQ0xnRXdJQUFvQW1Cc1FjK3hmMndpQ21zZ0FDZ0M0QUVnQWk0QmNHd2lDeUFPYWtINkhtd2lGV29pRm10QkMzVTJBb0FDSUFFZ0V5QVdha0VMZFRZQ0FDQUJJQkVnQldzZ0JXc2lCU0FJSUFkcklnZEJ2cVYvYkdwQkMzVTJBb0FCSUFFZ0JTQUhRYUV0YkdvaUJTQU9JQWxySUF0clFiSE9BR3dpQjJ0QkMzVTJBdUFCSUFFZ0JTQUhha0VMZFRZQ0lDQUJJQWhCcThVQWJDSUZJQVlnRFd0cUlnY2dDaUFKSUF0clFaSFpBR3dpQ0dzZ0ZHb2lDV3RCQzNVMkFzQUJJQUVnQnlBSmFrRUxkVFlDUUNBQklBWWdCV3NnRW1vaUJTQUlJQXBxSUJWcUlnWnJRUXQxTmdLZ0FTQUJJQVVnQm1wQkMzVTJBbUFnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0RFRUJhaUlNUVFoSERRQUxJQkJCZ0FOcklRQkJBQ0VNSUE4aEFRTkFJQU1nREVFQ2RHb29BZ0FnQkdvaUFpQUFJQUVvQWhRaUJTQUJLQUlFSWdacVFaYzZiQ0lRSUFFb0FneEJ6N0YvYkNJSGF5QUJLQUljSWdnZ0JtcEIraDVzSWhGcUlnMGdBU2dDR0VHaExXd2lDU0FCS0FJQVFRMTBRWUNBaU1BQWFpSVNhaUlPSUFFb0FoQWlDaUFCS0FJSUlndHFRWWZWQUd3aUV5QUtRZHdQYkNJVWEyb2lGV3BCRW5aQi93ZHhhaTBBQURvQUFDQUNJQUFnRlNBTmEwRVNka0gvQjNGcUxRQUFPZ0FJSUFJZ0FDQUdJQVZySUFoclFiSE9BR3dpQmlBU0lBbHJJQWxySWdrZ0N5QUtheUlLUWFFdGJHb2lEV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUFnRFNBR2EwRVNka0gvQjNGcUxRQUFPZ0FISUFJZ0FDQUhJQVVnQ0d0Qmtka0FiQ0lGYXlBUWFpSUdJQXRCcThVQWJDSUlJQTRnRTJ0cUlndHFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUFJQXNnQm10QkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFBZ0JTQUhhaUFSYWlJRklBNGdDR3NnRkdvaUJtcEJFblpCL3dkeGFpMEFBRG9BQXlBQ0lBQWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQUNBS1FiNmxmMndnQ1dwQkVuWkIvd2R4YWkwQUFEb0FCQ0FCUVNCcUlRRWdERUVCYWlJTVFRbEhEUUFMSUE5Qm9BSnFKQUFMTkFBZ0F5Z0NBQ0FFYWlBQUtBTFFBaUFCS0FKVUtBSUFJQUl2QVFCc1FZUWdha0VEZGtIL0IzRnFRWUFEYXkwQUFEb0FBQXZEQVFFRmZ5QURLQUlBSUFScUlnVWdBQ2dDMEFKQmdBTnJJZ0FnQVNnQ1ZDSUJLQUlrSUFJdkFSSnNJZ1lnQVNnQ0JDQUNMd0VDYkNJSGFpSUlJQUVvQWlBZ0FpOEJFR3dpQ1NBQktBSUFJQUl2QVFCc1FZUWdhaUlCYWlJQ2FrRURka0gvQjNGcUxRQUFPZ0FBSUFVZ0FDQUNJQWhyUVFOMlFmOEhjV290QUFBNkFBRWdBeWdDQkNBRWFpSUNJQUFnQnlBR2F5SURJQUVnQ1dzaUFXcEJBM1pCL3dkeGFpMEFBRG9BQUNBQ0lBQWdBU0FEYTBFRGRrSC9CM0ZxTFFBQU9nQUJDOGNFQVE5L0lBTW9BZ0FnQkdvaUJTQUFLQUxRQWtHQUEyc2lBQ0FDTGdFUUlBRW9BbFFpQVNnQ0lHeEJzYzRBYkNJSUlBSXVBU0FnQVNnQ1FHeEJvUzFzSWdZZ0FpNEJBQ0FCS0FJQWJFRU5kRUdBQ0hJaUIyb2lDV3BCQW5SQmdJQ0l3QUJxUVlCQWNTSUtJQUl1QVJRZ0FTZ0NLR3hCc2M0QWJDSUxJQUl1QVNRZ0FTZ0NTR3hCb1Mxc0lnd2dBaTRCQkNBQktBSUliRUVOZEVHQUNISWlEV29pRG1wQkMzVWlEMEdoTFd4cUloQWdBaTRCRWlBQktBSWtiRUd4emdCc0loRWdBaTRCSWlBQktBSkViRUdoTFd3aUVpQUNMZ0VDSUFFb0FnUnNRUTEwUVlBSWNpSUNhaUlUYWtFTGRVR3h6Z0JzSWdGcVFSSjJRZjhIY1dvdEFBQTZBQUFnQlNBQUlCQWdBV3RCRW5aQi93ZHhhaTBBQURvQUFpQUZJQUFnRDBHK3BYOXNJQXBxUVJKMlFmOEhjV290QUFBNkFBRWdBeWdDQkNBRWFpSUJJQUFnQnlBR1FRRjBhMEVDZEVHQWdJakFBR3BCZ0VCeElnVWdEU0FNUVFGMGEwRUxkU0lHUWFFdGJHb2lCeUFDSUJKQkFYUnJRUXQxUWJIT0FHd2lBbXBCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnQnlBQ2EwRVNka0gvQjNGcUxRQUFPZ0FDSUFFZ0FDQUdRYjZsZjJ3Z0JXcEJFblpCL3dkeGFpMEFBRG9BQVNBREtBSUlJQVJxSWdFZ0FDQUpJQWhyUVFKMFFZQ0FpTUFBYWtHQVFIRWlBaUFPSUF0clFRdDFJZ05Cb1Mxc2FpSUVJQk1nRVd0QkMzVkJzYzRBYkNJRmFrRVNka0gvQjNGcUxRQUFPZ0FBSUFFZ0FDQUVJQVZyUVJKMlFmOEhjV290QUFBNkFBSWdBU0FBSUFOQnZxVi9iQ0FDYWtFU2RrSC9CM0ZxTFFBQU9nQUJDNU1HQVFkL0lBQW9BdEFDSVFzakFFRkFhaUlBSUFFb0FsUWlBU2dDUUNBQ0xnRWdiQ0lHSUFFb0FnQWdBaTRCQUd3aUJXcEJBblFpQ0NBQktBSmdJQUl1QVRCc0lna2dBU2dDSUNBQ0xnRVFiQ0lIYWtIUklteEJnQWhxSWdvZ0IwSCtNR3hxUVF0MUlnZHJOZ0l3SUFBZ0J5QUlhallDQUNBQUlBVWdCbXRCQW5RaUJpQUtJQWxCMzRsL2JHcEJDM1VpQldzMkFpQWdBQ0FGSUFacU5nSVFJQUFnQVNnQ1JDQUNMZ0VpYkNJR0lBRW9BZ1FnQWk0QkFtd2lCV3BCQW5RaUNDQUJLQUprSUFJdUFUSnNJZ2tnQVNnQ0pDQUNMZ0VTYkNJSGFrSFJJbXhCZ0FocUlnb2dCMEgrTUd4cVFRdDFJZ2RyTmdJMElBQWdCeUFJYWpZQ0JDQUFJQVVnQm10QkFuUWlCaUFLSUFsQjM0bC9iR3BCQzNVaUJXczJBaVFnQUNBRklBWnFOZ0lVSUFBZ0FTZ0NTQ0FDTGdFa2JDSUdJQUVvQWdnZ0FpNEJCR3dpQldwQkFuUWlDQ0FCS0FKb0lBSXVBVFJzSWdrZ0FTZ0NLQ0FDTGdFVWJDSUhha0hSSW14QmdBaHFJZ29nQjBIK01HeHFRUXQxSWdkck5nSTRJQUFnQnlBSWFqWUNDQ0FBSUFVZ0JtdEJBblFpQmlBS0lBbEIzNGwvYkdwQkMzVWlCV3MyQWlnZ0FDQUZJQVpxTmdJWUlBQWdBU2dDVENBQ0xnRW1iQ0lHSUFFb0Fnd2dBaTRCQm13aUJXcEJBblFpQ0NBQktBSnNJQUl1QVRac0lna2dBU2dDTENBQ0xnRVdiQ0lCYWtIUklteEJnQWhxSWdJZ0FVSCtNR3hxUVF0MUlnRnJOZ0k4SUFBZ0FTQUlhallDRENBQUlBVWdCbXRCQW5RaUFTQUNJQWxCMzRsL2JHcEJDM1VpQW1zMkFpd2dBQ0FCSUFKcU5nSWNJQXRCZ0FOcklRRkJBQ0VMSUFBaEFnTkFJQU1nQzBFQ2RHb29BZ0FnQkdvaUFDQUJJQUlvQWd3aUJpQUNLQUlFSWdWcVFkRWliQ0lJSUFWQi9qQnNhaUlGSUFJb0FnQkJrSUFCYWlJSklBSW9BZ2dpQjJwQkRYUWlDbXBCRW5aQi93ZHhhaTBBQURvQUFDQUFJQUVnQ2lBRmEwRVNka0gvQjNGcUxRQUFPZ0FESUFBZ0FTQUlJQVpCMzRsL2JHb2lCaUFKSUFkclFRMTBJZ1ZxUVJKMlFmOEhjV290QUFBNkFBRWdBQ0FCSUFVZ0JtdEJFblpCL3dkeGFpMEFBRG9BQWlBQ1FSQnFJUUlnQzBFQmFpSUxRUVJIRFFBTEM1OEVBUXQvSUFBb0F0QUNJUVlnQVNnQ1ZDRUJJd0JCOEFCcklnb2hBQU5BSUFFb0FtQWhCeUFDTGdFd0lRVWdBU2dDSUNFSUlBSXVBUkFoQ3lBQUlBSXVBUUFnQVNnQ0FHeEJEWFJCZ0FoeUlnd2dBU2dDUUNBQ0xnRWdiQ0lOSUFFb0FvQUJJQUl1QVVCc0lnNXJJZzlCd0tWL2JHcEJDM1UyQWlnZ0FDQVBRZEFXYkNBTWFpSU1JQTBnRG1wQnpESnNJZzFxSWc0Z0JTQUhiQ0lISUFnZ0Myd2lCV3BCbWpWc0lnZ2dCVUh4SUd4cUlnVnJRUXQxTmdKUUlBQWdCU0FPYWtFTGRUWUNBQ0FBSUF3Z0RXc2lCU0FJSUFkQjNQUitiR29pQjJ0QkMzVTJBandnQUNBRklBZHFRUXQxTmdJVUlBQkJCR29oQUNBQlFRUnFJUUVnQWtFQ2FpRUNJQWxCQVdvaUNVRUZSdzBBQ3lBR1FZQURheUVBUVFBaENTQUtJUUlEUUNBRElBbEJBblJxS0FJQUlBUnFJZ0VnQUNBQ0tBSU1JZ29nQWlnQ0JDSUdha0dhTld3aUJ5QUdRZkVnYkdvaUJpQUNLQUlBUVExMFFZQ0FpTUFBYWlJRklBSW9BZ2dpQ0NBQ0tBSVFJZ3RySWd4QjBCWnNhaUlOSUFnZ0MycEJ6REpzSWdocUlndHFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FTQUFJQXNnQm10QkVuWkIvd2R4YWkwQUFEb0FCQ0FCSUFBZ0J5QUtRZHowZm14cUlnb2dEU0FJYXlJR2FrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQUdJQXByUVJKMlFmOEhjV290QUFBNkFBTWdBU0FBSUF4QndLVi9iQ0FGYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUpCRkdvaEFpQUpRUUZxSWdsQkJVY05BQXNMNVFRQkRIOGpBRUdRQVdzaURpUUFJQUFvQXRBQ0lRY2dBU2dDVkNFQklBNGhBQU5BSUFFb0FrQWhDU0FDTGdFZ0lRb2dBQ0FDTGdFQUlBRW9BZ0JzUVExMFFZQUljaUlMSUFJdUFVQWdBU2dDZ0FGc1FhRXRiQ0lNUVFGMGEwRUxkU0lQSUFFb0FpQWdBaTRCRUd3aUJTQUJLQUpnSUFJdUFUQnNJZ1pySUFFb0FxQUJJQUl1QVZCc0lnMXJRUUowSWhCck5nSmdJQUFnRHlBUWFqWUNHQ0FBSUFrZ0NteEJzYzRBYkNJSklBc2dER29pQ21vaUN5QUZJQTFxUWJZWGJDSU1JQVVnQm1wQkRYUnFJZ1ZyUVF0MU5nSjRJQUFnQlNBTGFrRUxkVFlDQUNBQUlBb2dDV3NpQlNBTUlBMGdCbXRCRFhScUlnWnJRUXQxTmdKSUlBQWdCU0FHYWtFTGRUWUNNQ0FBUVFScUlRQWdBVUVFYWlFQklBSkJBbW9oQWlBSVFRRnFJZ2hCQmtjTkFBc2dCMEdBQTJzaEFFRUFJUWdnRGlFQ0EwQWdBeUFJUVFKMGFpZ0NBQ0FFYWlJQklBQWdBaWdDRkNJRklBSW9BZ1FpQm1wQnRoZHNJZ2tnQWlnQ0RDSU5JQVpxUVExMGFpSUtJQUlvQWdCQkRYUkJnSUNJd0FCcUlnc2dBaWdDRUVHaExXd2lCMm9pRENBQ0tBSUlRYkhPQUd3aUQyb2lFR3BCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnRUNBS2EwRVNka0gvQjNGcUxRQUFPZ0FGSUFFZ0FDQUdJQTFySUFWclFRMTBJZ1lnQ3lBSGF5QUhheUlIYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUVnQUNBSElBWnJRUkoyUWY4SGNXb3RBQUE2QUFRZ0FTQUFJQWtnQlNBTmEwRU5kR29pQlNBTUlBOXJJZ1pxUVJKMlFmOEhjV290QUFBNkFBSWdBU0FBSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQXlBQ1FSaHFJUUlnQ0VFQmFpSUlRUVpIRFFBTElBNUJrQUZxSkFBTHd3WUJFSDhqQUVIUUFXc2lFU1FBSUFBb0F0QUNJUTRnQVNnQ1ZDRUJJQkVoQUFOQUlBRW9BcUFCSVFnZ0FpNEJVQ0VKSUFFb0FpQWhEU0FDTGdFUUlROGdBU2dDWUNFS0lBSXVBVEFoRWlBQUlBSXVBUUFnQVNnQ0FHeEJEWFJCZ0FoeUlnWWdBU2dDZ0FFZ0FpNEJRR3dpQ3lBQktBTEFBU0FDTGdGZ2JDSUZJQUVvQWtBZ0FpNEJJR3dpREdvaUVHdEJ3ZG9BYkdwQkMzVTJBbFFnQUNBUVFjYlJBR3dnQm1vaUVDQUxJQVZyUWJjNGJDSVRJQVZCZzN0c2Ftb2lGQ0FJSUFsc0lnVWdEU0FQYkNJSWFrR2pKMndpRFNBS0lCSnNJZ2tnQ0dwQjd6dHNJZzhnQ0NBSmEwSHpDbXdpQ0d0cUlncHJRUXQxTmdLb0FTQUFJQW9nRkdwQkMzVTJBZ0FnQUNBTUlBdHJRWklVYkNJS0lBeEI4ZUYrYkdvZ0VHb2lEQ0FGSUFscVFlR25mMndpQ1NBTklBVkIzdmNBYkdwcUlnVnJRUXQxTmdKd0lBQWdCU0FNYWtFTGRUWUNPQ0FBSUF0QmxZcC9iQ0FHYWlBS2FpQVRhaUlMSUFnZ0Qyb2dDV29pQm10QkMzVTJBb3dCSUFBZ0JpQUxha0VMZFRZQ0hDQUFRUVJxSVFBZ0FVRUVhaUVCSUFKQkFtb2hBaUFIUVFGcUlnZEJCMGNOQUFzZ0RrR0FBMnNoQUVFQUlRc2dFU0VDQTBBZ0F5QUxRUUowYWlnQ0FDQUVhaUlCSUFBZ0FpZ0NEQ0lHSUFJb0FnUWlCMnBCN3p0c0lnNGdCeUFHYTBIekNtd2lEV3NnQWlnQ0ZDSUZJQWRxUWFNbmJDSVBhaUlLSUFJb0FoQWlCeUFDS0FJWUlneHJRYmM0YkNJU0lBeEJnM3RzYWlBQ0tBSUFRUTEwUVlDQWlNQUFhaUlJSUF3Z0FpZ0NDQ0lKYWlJTVFjYlJBR3hxSWhCcUloTnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FTQUFJQk1nQ210QkVuWkIvd2R4YWkwQUFEb0FCaUFCSUFBZ0JTQUdha0hocDM5c0lnWWdEU0FPYW1vaURpQUpJQWRyUVpJVWJDSU5JQWRCbFlwL2JDQUlhbW9nRW1vaUNtcEJFblpCL3dkeGFpMEFBRG9BQVNBQklBQWdDaUFPYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUVnQUNBUElBVkIzdmNBYkdvZ0Jtb2lCaUFOSUFsQjhlRitiR29nRUdvaUJXcEJFblpCL3dkeGFpMEFBRG9BQWlBQklBQWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUVJQUVnQUNBSElBeHJRY0hhQUd3Z0NHcEJFblpCL3dkeGFpMEFBRG9BQXlBQ1FSeHFJUUlnQzBFQmFpSUxRUWRIRFFBTElCRkIwQUZxSkFBTGdRa0JFbjhqQUVHQUFtc2lFaVFBSUFBb0F0QUNJUkVnQVNnQ1ZDRUFRUWdoQmlBU0lRRURRQ0FCQW44Q1FDQUNMZ0VRSWdnZ0FpOEJJQ0lGY2tILy93TnhEUUJCQUNFRklBSXZBVEFOQUNBQ0x3RkFEUUFnQWk4QlVBMEFJQUl2QVdBTkFDQUNMd0Z3RFFBZ0FTQUNMZ0VBSUFBb0FnQnNRUUowSWdVMkFzQUJJQUVnQlRZQ29BRWdBU0FGTmdLQUFTQUJJQVUyQW1BZ0FTQUZOZ0pBSUFFZ0JUWUNJQ0FCSUFVMkFnQkJPQXdCQ3lBQklBQW9Bc0FCSUFJdUFXQnNJZ2tnQUNnQ1FDQUZRUkIwUVJCMWJDSUZha0hSSW13aURTQUZRZjR3YkdvaURpQUNMZ0ZBSUFBb0FvQUJiRUVOZENJS0lBSXVBUUFnQUNnQ0FHeEJEWFJCZ0FoeUlndHFJZzlxSWd3Z0FDZ0NJQ0FJYkNJRklBQW9BdUFCSUFJdUFYQnNJZ2hxUWJOR2JDSVRJQVZCaStBQWJHb2dCU0FBS0FLZ0FTQUNMZ0ZRYkNJSGFpSVFJQUFvQW1BZ0FpNEJNR3dpQlNBSWFpSVVha0doeXdCc0loVWdFRUdFWjJ4cUloQnFJaFpyUVF0MU5nTGdBU0FCSUF3Z0ZtcEJDM1UyQWdBZ0FTQU5JQWxCMzRsL2JHb2lDU0FMSUFwcklnMXFJZ29nRlNBVVFidUNmMnhxSWdzZ0JTQUhha0g5MjM1c0lnd2dCVUhVeEFGc2Ftb2lCV3RCQzNVMkFzQUJJQUVnQlNBS2FrRUxkVFlDSUNBQklBMGdDV3NpQlNBTUlBZEJzNE1CYkdvZ0VHb2lCMnRCQzNVMkFxQUJJQUVnQlNBSGFrRUxkVFlDUUNBQklCTWdDRUdPRTJ4cUlBdHFJZ1VnRHlBT2F5SUlha0VMZFRZQ1lDQUlJQVZyUVF0MUlRVkJJQXRCQW5ScUlBVTJBZ0FnQWtFQ2FpRUNJQUJCQkdvaEFDQUJRUVJxSVFFZ0JrRUJTeUVGSUFaQkFXc2hCaUFGRFFBTElCRkJnQU5ySVFCQkFDRUlJQkloQWdOQUlBSW9BZ0JCa0lBQmFpRUdJQU1nQ0VFQ2RHb29BZ0FnQkdvaEFRSkFBa0FnQWlnQ0JDSUhJQUlvQWdnaUJYSU5BRUVBSVFVZ0FpZ0NEQTBBSUFJb0FoQU5BQ0FDS0FJVURRQWdBaWdDR0EwQUlBSW9BaHdOQUNBQklBQWdCa0VGZGtIL0IzRnFNUUFBUW9HQ2hJaVFvTUNBQVg0M0FBQU1BUXNnQVNBQUlBSW9BaHdpRVNBSGFrR3pSbXdpRFNBSFFZdmdBR3hxSUFJb0Fnd2lDU0FSYWlJT0lBY2dBaWdDRkNJSGFpSUtha0doeXdCc0lnc2dDa0dFWjJ4cUlncHFJZzhnQWlnQ0dDSU1JQVZxUWRFaWJDSVRJQVZCL2pCc2FpSUZJQUlvQWhBaUVDQUdha0VOZENJVWFpSVZha0VTZGtIL0IzRnFMUUFBT2dBQUlBRWdBQ0FWSUE5clFSSjJRZjhIY1dvdEFBQTZBQWNnQVNBQUlBc2dEa0c3Z245c2FpSU9JQWNnQ1dwQi9kdCtiQ0lMSUFsQjFNUUJiR3BxSWdrZ0V5QU1RZCtKZjJ4cUlnOGdCaUFRYTBFTmRDSUdhaUlNYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUVnQUNBTUlBbHJRUkoyUWY4SGNXb3RBQUE2QUFZZ0FTQUFJQXNnQjBHemd3RnNhaUFLYWlJSElBWWdEMnNpQm1wQkVuWkIvd2R4YWkwQUFEb0FBaUFCSUFBZ0JpQUhhMEVTZGtIL0IzRnFMUUFBT2dBRklBRWdBQ0FOSUJGQmpoTnNhaUFPYWlJR0lCUWdCV3NpQldwQkVuWkIvd2R4YWkwQUFEb0FBeUFCSUFBZ0JTQUdhMEVTZGtIL0IzRnFMUUFBT2dBRUN5QUNRU0JxSVFJZ0NFRUJhaUlJUVFoSERRQUxJQkpCZ0FKcUpBQUwyQUVBQWtBZ0FDZ0N5QU1pQVNnQ0dDSUNCRUFnQVNnQ0RDRUREQUVMSUFFZ0FDQUJLQUlJSUFFb0FoUWdBU2dDRUVFQUlBQW9BZ1FvQWh3UkNBQWlBellDRENBQktBSVlJUUlMSUFBZ0F5QUNRUUowYWlBRUlBVW9BZ0FpQTBFQ2RHb2dBQ2dDZENBQktBSVVheUlFSUFZZ0Eyc2lBeUFCS0FJUUlBSnJJZ0lnQWlBRFN4c2lBaUFDSUFSTEd5SUNJQUFvQXVRREtBSUVFUVlBSUFVZ0JTZ0NBQ0FDYWpZQ0FDQUJJQUVvQWhnZ0Ftb2lBRFlDR0NBQUlBRW9BaEFpQUU4RVFDQUJRUUEyQWhnZ0FTQUJLQUlVSUFCcU5nSVVDd3ZUQVFFQ2Z5QUFLQUxJQXlJRVFSaHFJUWdDUUNBRUtBSVlJZ1lFUUNBRUtBSU1JUWNNQVFzZ0JDQUFJQVFvQWdnZ0JDZ0NGQ0FFS0FJUVFRRWdBQ2dDQkNnQ0hCRUlBQ0lITmdJTUlBUW9BaGdoQmdzZ0FDQUJJQUlnQXlBSElBZ2dCQ2dDRUNBQUtBTGNBeWdDQkJFTkFDQUdJQVFvQWhnaUFVa0VmeUFBSUFRb0Fnd2dCa0VDZEdwQkFDQUJJQVpySWdFZ0FDZ0M1QU1vQWdRUkJnQWdCU0FGS0FJQUlBRnFOZ0lBSUFRb0FoZ0ZJQUVMSUFRb0FoQWlBRThFUUNBRVFRQTJBaGdnQkNBRUtBSVVJQUJxTmdJVUN3dVBBUUVFZnlNQVFSQnJJZ2NrQUNBQUtBTElBeUlJS0FJUUlRa2dCU2dDQUNFS0lBZEJBRFlDRENBQUlBRWdBaUFESUFnb0Fnd2dCMEVNYWlBSklBWWdDbXNpQVNBQklBbExHeUFBS0FMY0F5Z0NCQkVOQUNBQUlBZ29BZ3dnQkNBRktBSUFRUUowYWlBSEtBSU1JQUFvQXVRREtBSUVFUVlBSUFVZ0JTZ0NBQ0FIS0FJTWFqWUNBQ0FIUVJCcUpBQUwzQUVCQVg4Z0FDZ0N5QU1oQWdKQUFrQUNRQUpBQWtBZ0FRNEVBQU1DQVFNTElBQW9BbFFFUUNBQ1FhUUJOZ0lFSUFJb0Fnd05CQ0FDSUFBZ0FpZ0NDRUVBSUFJb0FoQkJBU0FBS0FJRUtBSWNFUWdBTmdJTURBUUxJQUlnQUNnQzNBTW9BZ1EyQWdRTUF3c2dBaWdDQ0VVRVFDQUFLQUlBSWdGQkF6WUNGQ0FBSUFFb0FnQVJBQUFMSUFKQnBRRTJBZ1FNQWdzZ0FpZ0NDRVVFUUNBQUtBSUFJZ0ZCQXpZQ0ZDQUFJQUVvQWdBUkFBQUxJQUpCcGdFMkFnUU1BUXNnQUNnQ0FDSUJRUU0yQWhRZ0FDQUJLQUlBRVFBQUN5QUNRZ0EzQWhRTG5RRUJBMzhnQUNBQVFRRkJIQ0FBS0FJRUtBSUFFUVFBSWdJMkFzZ0RJQUpDQURjQ0NDQUNRYU1CTmdJQUlBQW9BbFFFUUNBQ0lBQW9Bc0FDSWdNMkFoQWdBQ2dDQkNFRUlBRUVRQ0FFS0FJUUlRRWdBaUFBUVFGQkFDQUFLQUo0SUFBb0FuQnNJQUFvQW5RZ0F4QzdBeUFDS0FJUUlBRVJDZ0EyQWdnUEN5QUNJQUJCQVNBQUtBSjRJQUFvQW5Cc0lBTWdCQ2dDQ0JFSkFEWUNEQXNMd1FFQkIzOGdBQ2dDd0FKQkFVNEVRQ0FBS0FMY0F5QUJLQUlFYWlJQkxRQ01BU0VGSUFNb0FnQWhCaUFCTFFDV0FTSUlRUUZySVFrRFFDQUFLQUp3SWdGQkFVNEVRQ0FCSUFZZ0JFRUNkR29vQWdBaUFXb2hDaUFDSUFkQkFuUnFLQUlBSVFNRFFDQUZCRUFnQVNBRExRQUFJQVVRT3lBRmFpRUJDeUFEUVFGcUlRTWdBU0FLU1EwQUN3c2dDRUVDVHdSQUlBWWdCQ0FHSUFSQkFXb2dDU0FBS0FKd0VMb0RDeUFIUVFGcUlRY2dCQ0FJYWlJRUlBQW9Bc0FDU0EwQUN3c0xuZ0VCQlg4Z0FDZ0N3QUpCQVU0RVFDQURLQUlBSVFVRFFDQUZJQVFnQlNBRVFRRnlRUUVnQUNnQ2NDSUJRUUZPQkg4Z0JTQUVRUUowYWlnQ0FDSURJQUZxSVFjZ0FpQUdRUUowYWlnQ0FDRUJBMEFnQXlBQkxRQUFJZ2c2QUFFZ0F5QUlPZ0FBSUFGQkFXb2hBU0FEUVFKcUlnTWdCMGtOQUFzZ0FDZ0NjQVVnQVFzUXVnTWdCa0VCYWlFR0lBUkJBbW9pQkNBQUtBTEFBa2dOQUFzTEM0UUJBUVIvSUFBb0FzQUNJZ0ZCQVU0RVFDQURLQUlBSVFVRFFDQUFLQUp3SWdOQkFVNEVRQ0FESUFVZ0JFRUNkQ0lEYWlnQ0FDSUJhaUVHSUFJZ0Eyb29BZ0FoQXdOQUlBRWdBeTBBQUNJSE9nQUJJQUVnQnpvQUFDQURRUUZxSVFNZ0FVRUNhaUlCSUFaSkRRQUxJQUFvQXNBQ0lRRUxJQVJCQVdvaUJDQUJTQTBBQ3dzTENRQWdBeUFDTmdJQUN3a0FJQU5CQURZQ0FBdWtBZ0VFZkNBQUlBRXJBeGdpQXhDRERpSUVJQUVyQXdBaUFpQUNva1FBQUFBQUFBRHdQeUFFb1NJQ29xQTVBd0FnQUNBQ0lBRXJBd0FnQVNzRENLS2lJQUVyQXhBZ0F4QzNBeUlEb3FFNUF3Z2dBQ0FDSUFFckF3QWdBU3NERUtLaUlBTWdBU3NEQ0tLZ09RTVFJQUFnQVNzRElEa0RHQ0FBSUFJZ0FTc0RDQ0FCS3dNQW9xSWdBeUFCS3dNUW9xQTVBeUFnQUNBRUlBSWdBU3NEQ0NJRklBV2lvcUE1QXlnZ0FDQUNJQUVyQXdnZ0FTc0RFS0tpSUFNZ0FTc0RBS0toT1FNd0lBQWdBU3NES0RrRE9DQUFJQUlnQVNzREVDQUJLd01Bb3FJZ0F5QUJLd01Jb3FFNUEwQWdBQ0FDSUFFckF4QWdBU3NEQ0tLaUlBTWdBU3NEQUtLZ09RTklJQUFnQkNBQ0lBRXJBeEFpQWlBQ29xS2dPUU5RSUFBZ0FTc0RNRGtEV0F2MkVnSVFmd0Y4SUFGQkFDQUJRUUJLR3lFSklBUW9BZ0FpQ0NBQ1FRRnJJaEFnQVd4QkFYUnFJUVlnQ0NFSEEwQWdCU0FKUmtVRVFDQUdRUUE3QVFBZ0IwRUFPd0VBSUFWQkFXb2hCU0FIUVFKcUlRY2dCa0VDYWlFR0RBRUxDeUFDUVFBZ0FrRUFTaHNoQ3lBSUlBRkJBV3NpQ2tFQmRHb2hCa0VBSVFVZ0NDRUhBMEFnQlNBTFJrVUVRQ0FHUVFBN0FRQWdCMEVBT3dFQUlBVkJBV29oQlNBR0lBRkJBWFFpQ1dvaEJpQUhJQWxxSVFjTUFRc0xJQkJCQVNBUVFRRktHeUVSSUFSQmtJRElBR29oQ1NBQUlBRkJBV29pQldvaER5QUVLQUlFSUFWcUlRNGdDa0VCSUFwQkFVb2JJaEpCQVdzaEV5QUlJQVZCQVhScUlRZEJBQ0FCYTBFQmRDRVVRUUFoQzBFQklRd0NRQU5BSUF3Z0VVY0VRQ0FQSUJOcUlSQkJBU0VHQTBBQ1FBSkFBa0FnQmlBU1J3UkFJQU1nRHkwQUFFZ0VRQ0FPUWY4Qk9nQUFJQWNnRkdvaUNpOEJBQ0lGUVJCMFFSQjFJZ0JCQVU0RVFDQUhJQUE3QVFBZ0JDQUZRUnhzYWlJRlFZeUEwQUJxSUF3MkFnQWdCVUgwLzg4QWFpSUFJQUFvQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlBSUFBb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJQUlBQW9BZ0FnREdvMkFnQU1CUXNnQ2tFQ2F5OEJBQ0lJUVJCMFFSQjFJUUFnQ2k0QkFpSUtRUUZPQkVBZ0FFRUJUZ1JBSUFSQmtJRElBR29pQlNBS1FRSjBha0VFYXlnQ0FDSUFJQWhCQW5RZ0JXcEJCR3NvQWdBaUNFb0VRQ0FISUFnN0FRQkJBQ0VOSUF0QkFDQUxRUUJLR3lFS0lBa2hCUU5BSUFvZ0RVWUVRQ0FJSVFBTUNBc2dBQ0FGS0FJQVJnUkFJQVVnQ0RZQ0FBc2dEVUVCYWlFTklBVkJCR29oQlF3QUN3QUxJQWNnQURzQkFDQUFJQWhPRFFWQkFDRU5JQXRCQUNBTFFRQktHeUVLSUFraEJRTkFJQW9nRFVZTkJpQUlJQVVvQWdCR0JFQWdCU0FBTmdJQUN5QU5RUUZxSVEwZ0JVRUVhaUVGREFBTEFBc2dCMEVDYXk0QkFDSUlRUUZPQkVBZ0JFR1FnTWdBYWlJRklBcEJBblJxUVFScktBSUFJZ0FnQ0VILy93TnhRUUowSUFWcVFRUnJLQUlBSWdoS0JFQWdCeUFJT3dFQVFRQWhEU0FMUVFBZ0MwRUFTaHNoQ2lBSklRVURRQ0FLSUExR0JFQWdDQ0VBREFjTElBQWdCU2dDQUVZRVFDQUZJQWcyQWdBTElBMUJBV29oRFNBRlFRUnFJUVVNQUFzQUN5QUhJQUE3QVFBZ0FDQUlUZzBFUVFBaERTQUxRUUFnQzBFQVNoc2hDaUFKSVFVRFFDQUtJQTFHRFFVZ0NDQUZLQUlBUmdSQUlBVWdBRFlDQUFzZ0RVRUJhaUVOSUFWQkJHb2hCUXdBQ3dBTElBY2dDanNCQUNBRUlBcEJCMnhCQW5ScUlnVkI5UC9QQUdvaUFDQUFLQUlBUVFGcU5nSUFJQVZCK1AvUEFHb2lBQ0FBS0FJQUlBWnFOZ0lBSUFWQi9QL1BBR29pQUNBQUtBSUFJQXhxTmdJQUlBWWdCVUdBZ05BQWFpSUFLQUlBU0FSQUlBQWdCallDQUFzZ0JVR01nTkFBYWlBTU5nSUFEQVVMSUFCQkFVNEVRQ0FISUFBN0FRQWdCQ0FJUVFkc1FRSjBhaUlGUWZUL3p3QnFJZ0FnQUNnQ0FFRUJhallDQUNBRlFmai96d0JxSWdBZ0FDZ0NBQ0FHYWpZQ0FDQUZRZnovendCcUlnQWdBQ2dDQUNBTWFqWUNBQ0FHSUFWQmhJRFFBR29pQUNnQ0FFb0VRQ0FBSUFZMkFnQUxJQVZCaklEUUFHb2dERFlDQUF3RkN5QUhRUUpyTHdFQUlnVkJFSFJCRUhVaUFFRUJUZ1JBSUFjZ0FEc0JBQ0FFSUFWQkhHeHFJZ1ZCOVAvUEFHb2lBQ0FBS0FJQVFRRnFOZ0lBSUFWQitQL1BBR29pQUNBQUtBSUFJQVpxTmdJQUlBVkIvUC9QQUdvaUFDQUFLQUlBSUF4cU5nSUFJQVZCaElEUUFHb2lBQ2dDQUNBR1RnMEZJQUFnQmpZQ0FBd0ZDeUFMUVlDQUFrNEVRRUVBUVFOQndBcEJBQkE0UVg4aERnd0pDeUFISUF0QkFXb2lBRHNCQUNBRUlBdEJBblJxUVpDQXlBQnFJQUJCRUhSQkVIVTJBZ0FnQkNBTFFSeHNhaUlGUVpTQTBBQnFJQVkyQWdBZ0JVR1FnTkFBYWtFQk5nSUFJQVZCbUlEUUFHb2dERFlDQUNBRlFaeUEwQUJxSUFZMkFnQWdCVUdnZ05BQWFpQUdOZ0lBSUFWQnBJRFFBR29nRERZQ0FDQUZRYWlBMEFCcUlBdzJBZ0FnQUNFTERBUUxJQWRCQURzQkFDQU9RUUE2QUFBTUF3c2dEa0VDYWlFT0lBZEJCR29oQnlBUVFRSnFJUThnREVFQmFpRU1EQVVMSUFRZ0FFRVFkRUVRZFVFY2JHb2lCVUgwLzg4QWFpSUFJQUFvQWdCQkFXbzJBZ0FnQlVINC84OEFhaUlBSUFBb0FnQWdCbW8yQWdBZ0JVSDgvODhBYWlJQUlBQW9BZ0FnREdvMkFnQU1BUXNnQkNBQVFSQjBRUkIxUVJ4c2FpSUZRWXlBMEFCcUlBdzJBZ0FnQlVIMC84OEFhaUlBSUFBb0FnQkJBV28yQWdBZ0JVSDQvODhBYWlJQUlBQW9BZ0FnQm1vMkFnQWdCVUg4Lzg4QWFpSUFJQUFvQWdBZ0RHbzJBZ0FMSUE1QkFXb2hEaUFIUVFKcUlRY2dEMEVCYWlFUElBWkJBV29oQmd3QUN3QUxDeUFMUVFBZ0MwRUFTaHNpQ0VFQmFpRURRUUVoQlVFQklRY0RRQ0FESUFWR1JRUkFBa0FnQlNBSktBSUFJZ0JHQkVBZ0J5SUdRUUZxSVFjTUFRc2dBRUVDZENBRWFrR01nTWdBYWlnQ0FDRUdDeUFKSUFZMkFnQWdDVUVFYWlFSklBVkJBV29oQlF3QkN3c2dCQ0FIUVFGcklnQTJBZ2dnQUVVRVFFRUFEd3RCQUNFR0lBUkJER3BCQUNBQVFRSjBFRHNhSUFSQmtJQW9ha0VBSUFCQkJIUVFPeG9nQUVFQUlBQkJBRW9iSVFBZ0JFR01nQWhxSVFsQkFDRUZBMEFnQUNBRlJnUkFJQVJCa0lBb2FpRUpBMEFnQmlBSVJnUkFRUUFoRGlBRUtBSUlJZ0JCQUNBQVFRQktHeUVDSUFSQmtJQW9haUVEUVFBaEJRTkFJQUlnQlVZTkJTQURJQVZCQkhRaUFXb2lBQ0FBS3dNQUlBUWdCVUVDZEdvb0FneTNJaFdqT1FNQUlBTWdBVUVJY21vaUFDQUFLd01BSUJXak9RTUFJQVZCQVdvaEJRd0FDd0FMSUFRZ0JDQUdRUUowYWtHUWdNZ0FhaWdDQUVFQmF5SUJRUUowSWdKcUlnQkJER29nQUNnQ0RDQUVJQVpCQjJ4QkFuUnFJZ1ZCa0lEUUFHb29BZ0JxTmdJQUlBa2dBVUVFZENJRGFpSUFJQUFyQXdBZ0JVR1VnTkFBYWlnQ0FMZWdPUU1BSUFrZ0EwRUljbW9pQUNBQUt3TUFJQVZCbUlEUUFHb29BZ0Mzb0RrREFDQUZRWnlBMEFCcUtBSUFJZ0VnQXlBRWFrR01nQWhxSWdBb0FnQklCRUFnQUNBQk5nSUFDeUFGUWFDQTBBQnFLQUlBSWdFZ0JDQUNRUUowSWdKQkJISnFRWXlBQ0dvaUFDZ0NBRW9FUUNBQUlBRTJBZ0FMSUFWQnBJRFFBR29vQWdBaUFTQUVJQUpCQ0hKcVFZeUFDR29pQUNnQ0FFZ0VRQ0FBSUFFMkFnQUxJQVZCcUlEUUFHb29BZ0FpQVNBRUlBSkJESEpxUVl5QUNHb2lBQ2dDQUVvRVFDQUFJQUUyQWdBTElBWkJBV29oQmd3QUN3QUZJQWtnQlVFRWRDSURhaUFCTmdJQUlBa2dBMEVFY21wQkFEWUNBQ0FKSUFOQkNISnFJQUkyQWdBZ0NTQURRUXh5YWtFQU5nSUFJQVZCQVdvaEJRd0JDd0FMQUFzZ0Rnc2ZBUUYvSUFBb0F0d0RJZ0VnQUNnQ3dBSTJBbHdnQVNBQUtBSjBOZ0pnQzV3Q0FRTi9JQUFvQXR3RElnTW9BbHdpQnlBQUtBTEFBaUlJVGdSQUlBQW9BaVJCQVU0RVFDQUFLQUxZQVNFSVFRQWhCd05BSUFBZ0NDQUJJQWRCQW5RaUNXb29BZ0FnQXlBSmFpSUpLQUprSUFJb0FnQnNRUUowYWlBSlFReHFJQWtvQWpRUkJnQWdDRUhZQUdvaENDQUhRUUZxSWdjZ0FDZ0NKRWdOQUFzZ0FDZ0N3QUloQ0FzZ0EwRUFOZ0pjUVFBaEJ3c2dBQ0FEUVF4cUlBY2dCQ0FGS0FJQUlnRkJBblJxSUFZZ0FXc2lBU0FES0FKZ0lnUWdDQ0FIYXlJR0lBUWdCa2tiSWdRZ0FTQUVTUnNpQVNBQUtBTGdBeWdDQkJFSEFDQUZJQVVvQWdBZ0FXbzJBZ0FnQXlBREtBSmdJQUZyTmdKZ0lBTWdBeWdDWENBQmFpSUJOZ0pjSUFBb0FzQUNJQUZNQkVBZ0FpQUNLQUlBUVFGcU5nSUFDd3YwQXdFT2Z5QUFJQUJCQVVHZ0FTQUFLQUlFS0FJQUVRUUFJZ0UyQXR3RElBRkJBRFlDQ0NBQlFad0JOZ0lFSUFGQm5RRTJBZ0FnQUNnQ3RBSUVRQ0FBS0FJQUlnTkJHallDRkNBQUlBTW9BZ0FSQUFBTElBQW9BaVJCQVU0RVFDQUJRUXhxSVFvZ0FVR1dBV29oQ3lBQlFZd0JhaUVNSUFGQk5Hb2hCaUFCUWVRQWFpRU5JQUFvQXRnQklRRURRQ0FBS0FMQUFpRUNJQUFvQXJ3Q0lRUWdBQ2dDeEFJaEJTQUJLQUlrSVFrZ0FTZ0NDQ0VPSUEwZ0IwRUNkQ0lEYWlBQktBSW9JQUVvQWd4c0lBQW9Bc2dDYlNJSU5nSUFJQWtnRG13Z0JXMGhCUUpBSUFFb0FqUkZCRUFnQXlBR2FrR2VBVFlDQUF3QkN5QUVJQVZISUFJZ0NFZHlSUVJBSUFNZ0JtcEJud0UyQWdBTUFRc0NRQ0FGUVFGMElBUkhJZ2tnQWlBSVIzSkZCRUFnQXlBR2FrR2dBVFlDQUF3QkN5QUpJQWhCQVhRZ0FrZHlSUVJBSUFNZ0JtcEJvUUUyQWdBTUFRc0NRQ0FFSUFRZ0JXMGlCQ0FGYkdzTkFDQUNJQUlnQ0cwaUFpQUliR3NOQUNBRElBWnFRYUlCTmdJQUlBY2dER29nQkRvQUFDQUhJQXRxSUFJNkFBQU1BUXNnQUNnQ0FDSUNRU2MyQWhRZ0FDQUNLQUlBRVFBQUN5QUFLQUlFS0FJSUlRSWdBeUFLYWlBQVFRRWdBQ2dDY0NBQUtBSzhBaEM3QXlBQUtBTEFBaUFDRVFrQU5nSUFDeUFCUWRnQWFpRUJJQWRCQVdvaUJ5QUFLQUlrU0EwQUN3c0xud0lCQ1g4Z0JFRUJUZ1JBSUFBb0FuQWlDVUY4Y1NFS0lBbEJBM0VoQ3lBQUtBSWtJZ1pCQVVnaERDQUpRUUZyUVFOSklRMERRRUVBSVFnZ0RFVUVRQU5BQWtBZ0NVVU5BQ0FCSUFoQkFuUnFLQUlBSUFKQkFuUnFLQUlBSVFBZ0F5Z0NBQ0FJYWlFRklBb2hCeUFOUlFSQUEwQWdCU0FBTFFBQU9nQUFJQVVnQm1vaUJTQUFMUUFCT2dBQUlBVWdCbW9pQlNBQUxRQUNPZ0FBSUFVZ0Jtb2lCU0FBTFFBRE9nQUFJQUJCQkdvaEFDQUZJQVpxSVFVZ0IwRUVheUlIRFFBTEN5QUxJZ2RGRFFBRFFDQUZJQUF0QUFBNkFBQWdCU0FHYWlFRklBQkJBV29oQUNBSFFRRnJJZ2NOQUFzTElBaEJBV29pQ0NBR1J3MEFDd3NnQTBFRWFpRURJQUpCQVdvaEFpQUVRUUZLSVFBZ0JFRUJheUVFSUFBTkFBc0xDOEFDQVE1L0lBUkJBVTRFUUNBQUtBTFFBaUVGSUFBb0FuQWhCeUFBS0FMZ0F5SUFLQUlVSVFvZ0FDZ0NFQ0VMSUFBb0Fnd2hEQ0FBS0FJSUlRMERRQ0FFSVFnZ0J3UkFJQUpCQW5RaUFDQUJLQUlNYWlnQ0FDRU9JQUVvQWdnZ0FHb29BZ0FoRHlBQktBSUVJQUJxS0FJQUlSQWdBU2dDQUNBQWFpZ0NBQ0VSSUFNb0FnQWhCRUVBSVFBRFFDQUFJQkJxTFFBQUlRWWdCQ0FGSUFBZ0VXb3RBQUJCL3dGeklna2dEU0FBSUE5cUxRQUFRUUowSWhKcUtBSUFhMm90QUFBNkFBQWdCQ0FGSUFrZ0N5QVNhaWdDQUNBS0lBWkJBblFpQm1vb0FnQnFRUkIxYTJvdEFBQTZBQUVnQkNBRklBa2dCaUFNYWlnQ0FHdHFMUUFBT2dBQ0lBUWdBQ0FPYWkwQUFEb0FBeUFFUVFScUlRUWdBRUVCYWlJQUlBZEhEUUFMQ3lBRFFRUnFJUU1nQWtFQmFpRUNJQWhCQVdzaEJDQUlRUUpPRFFBTEN3dnVBZ0VMZnlBRVFRRk9CRUFnQUNnQ2NDSUlRWDV4SVE0Z0NFRUJjU0VQQTBBZ0JDRU5Ba0FnQ0VVTkFDQUNRUUowSWdBZ0FTZ0NDR29vQWdBaEJpQUJLQUlFSUFCcUtBSUFJUWtnQVNnQ0FDQUFhaWdDQUNFS0lBTW9BZ0FoQkVFQUlRQWdEaUVISUFoQkFVY0VRQU5BSUFBZ0Ntb3RBQUFoQ3lBQUlBWnFMUUFBSVF3Z0JDQUFJQWxxTFFBQUlnVTZBQUVnQkNBRklBeHFRWUFCY3pvQUFpQUVJQVVnQzJwQmdBRnpPZ0FBSUFvZ0FFRUJjaUlGYWkwQUFDRUxJQVVnQm1vdEFBQWhEQ0FFSUFVZ0NXb3RBQUFpQlRvQUJDQUVJQVVnREdwQmdBRnpPZ0FGSUFRZ0JTQUxha0dBQVhNNkFBTWdBRUVDYWlFQUlBUkJCbW9oQkNBSFFRSnJJZ2NOQUFzTElBOUZEUUFnQUNBS2FpMEFBQ0VISUFBZ0Jtb3RBQUFoQmlBRUlBQWdDV290QUFBaUFEb0FBU0FFSUFBZ0JtcEJnQUZ6T2dBQ0lBUWdBQ0FIYWtHQUFYTTZBQUFMSUFOQkJHb2hBeUFDUVFGcUlRSWdEVUVCYXlFRUlBMUJBazROQUFzTEM2WUNBUWwvSUFSQkFVNEVRQ0FBS0FKd0lnVkJmbkVoRENBRlFRRnhJUTBEUUNBRUlRa0NRQ0FGUlEwQUlBSkJBblFpQUNBQktBSUlhaWdDQUNFR0lBRW9BZ1FnQUdvb0FnQWhCeUFCS0FJQUlBQnFLQUlBSVFnZ0F5Z0NBQ0VFUVFBaEFDQU1JUW9nQlVFQlJ3UkFBMEFnQkNBQUlBaHFMUUFBT2dBQUlBUWdBQ0FIYWkwQUFEb0FBU0FFSUFBZ0Jtb3RBQUE2QUFJZ0JDQUlJQUJCQVhJaUMyb3RBQUE2QUFNZ0JDQUhJQXRxTFFBQU9nQUVJQVFnQmlBTGFpMEFBRG9BQlNBQVFRSnFJUUFnQkVFR2FpRUVJQXBCQW1zaUNnMEFDd3NnRFVVTkFDQUVJQUFnQ0dvdEFBQTZBQUFnQkNBQUlBZHFMUUFBT2dBQklBUWdBQ0FHYWkwQUFEb0FBZ3NnQTBFRWFpRURJQUpCQVdvaEFpQUpRUUZySVFRZ0NVRUNUZzBBQ3dzTG9nSUJEWDhnQkVFQlRnUkFJQUFvQXRBQ0lRVWdBQ2dDY0NFSElBQW9BdUFESWdBb0FoUWhDaUFBS0FJUUlRc2dBQ2dDRENFTUlBQW9BZ2doRFFOQUlBUWhDQ0FIQkVBZ0FrRUNkQ0lBSUFFb0FnaHFLQUlBSVE0Z0FTZ0NCQ0FBYWlnQ0FDRVBJQUVvQWdBZ0FHb29BZ0FoRUNBREtBSUFJUVJCQUNFQUEwQWdBQ0FQYWkwQUFDRUdJQVFnQlNBQUlCQnFMUUFBSWdrZ0RTQUFJQTVxTFFBQVFRSjBJaEZxS0FJQWFtb3RBQUE2QUFBZ0JDQUZJQWtnQ3lBUmFpZ0NBQ0FLSUFaQkFuUWlCbW9vQWdCcVFSQjFhbW90QUFBNkFBRWdCQ0FGSUFrZ0JpQU1haWdDQUdwcUxRQUFPZ0FDSUFSQkEyb2hCQ0FBUVFGcUlnQWdCMGNOQUFzTElBTkJCR29oQXlBQ1FRRnFJUUlnQ0VFQmF5RUVJQWhCQWs0TkFBc0xDODRDQVFoL0lBUkJBVTRFUUNBQUtBSndJZ2hCZkhFaENpQUlRUU54SVFzZ0NFRUJhMEVEU1NFTUEwQWdCQ0VKQWtBZ0NFVU5BQ0FCS0FJQUlBSkJBblJxS0FJQUlRWWdBeWdDQUNFRVFRQWhBQ0FLSVFjZ0RFVUVRQU5BSUFRZ0FDQUdhaTBBQUNJRk9nQUJJQVFnQlRvQUFpQUVJQVU2QUFBZ0JDQUdJQUJCQVhKcUxRQUFJZ1U2QUFRZ0JDQUZPZ0FGSUFRZ0JUb0FBeUFFSUFZZ0FFRUNjbW90QUFBaUJUb0FCeUFFSUFVNkFBZ2dCQ0FGT2dBR0lBUWdCaUFBUVFOeWFpMEFBQ0lGT2dBS0lBUWdCVG9BQ3lBRUlBVTZBQWtnQUVFRWFpRUFJQVJCREdvaEJDQUhRUVJySWdjTkFBc0xJQXNpQjBVTkFBTkFJQVFnQUNBR2FpMEFBQ0lGT2dBQklBUWdCVG9BQWlBRUlBVTZBQUFnQUVFQmFpRUFJQVJCQTJvaEJDQUhRUUZySWdjTkFBc0xJQU5CQkdvaEF5QUNRUUZxSVFJZ0NVRUJheUVFSUFsQkFrNE5BQXNMQzZrQkFRTjhBa0FnQVNzREFDSUNJQUtpSUFFckF3Z2lBeUFEb3FBZ0FTc0RFQ0lESUFPaW9DSURSQUFBQUFBQUFBQUFZUVJBSUFCQ0FEY0RDQ0FBUW9DQWdJQ0FnSUQ0UHpjREFFUUFBQUFBQUFBQUFDRUNEQUVMSUFBZ0FpQURueUlDb3prREFDQUFJQUVyQXdnZ0FxTTVBd2dnQVNzREVDQUNveUVFQ3lBQUlBSTVBeGdnQUNBRU9RTVFJQUFnQVNzREdEa0RJQ0FBSUFFckF5QTVBeWdnQUNBQkt3TW9PUU13QytvQkFRZC9JQVJCQVU0RVFDQUFLQUp3SVFjZ0FDZ0M0QU1vQWhnaEJRTkFJQVFoQUNBSEJFQWdBa0VDZENJRUlBRW9BZ2hxS0FJQUlRZ2dBU2dDQkNBRWFpZ0NBQ0VKSUFFb0FnQWdCR29vQWdBaENpQURLQUlBSVF0QkFDRUVBMEFnQkNBTGFpQUZJQVFnQ1dvdEFBQWlCa0VDZEVHQUNISnFLQUlBSUFVZ0JrR0FBV29pQmlBRUlBcHFMUUFBYWtIL0FYRkJBblJxS0FJQWFpQUZJQVlnQkNBSWFpMEFBR3BCL3dGeFFRSjBRWUFRY21vb0FnQnFRUkIyT2dBQUlBUkJBV29pQkNBSFJ3MEFDd3NnQTBFRWFpRURJQUpCQVdvaEFpQUFRUUZySVFRZ0FFRUNUZzBBQ3dzTDFBRUJCbjhnQkVFQlRnUkFJQUFvQW5BaEJpQUFLQUxnQXlnQ0dDRUZBMEFnQkNFQUlBWUVRQ0FDUVFKMElnUWdBU2dDQ0dvb0FnQWhCeUFCS0FJRUlBUnFLQUlBSVFnZ0FTZ0NBQ0FFYWlnQ0FDRUpJQU1vQWdBaENrRUFJUVFEUUNBRUlBcHFJQVVnQkNBSGFpMEFBRUVDZEVHQUVISnFLQUlBSUFVZ0JDQUlhaTBBQUVFQ2RFR0FDSEpxS0FJQUlBVWdCQ0FKYWkwQUFFRUNkR29vQWdCcWFrRVFkam9BQUNBRVFRRnFJZ1FnQmtjTkFBc0xJQU5CQkdvaEF5QUNRUUZxSVFJZ0FFRUJheUVFSUFCQkFrNE5BQXNMQ3hjQUlBRW9BZ0FnQWlBRFFRQWdCQ0FBS0FKd0VMb0RDN0lMQVFkL0lBQWdBRUVCUVJ3Z0FDZ0NCQ2dDQUJFRUFDSUJOZ0xnQXlBQlFaSUJOZ0lBQWtBQ1FDQUFLQUlvSWdKQkIwc05BQUpBUVFFZ0FuUkJ6QUZ4UlFSQVFRRWdBblJCTUhFTkFTQUNRUUZIRFFJZ0FDZ0NKRUVCUmcwRElBQW9BZ0FpQWtFTE5nSVVJQUFnQWlnQ0FCRUFBQXdEQ3lBQUtBSWtRUU5HRFFJZ0FDZ0NBQ0lDUVFzMkFoUWdBQ0FDS0FJQUVRQUFEQUlMSUFBb0FpUkJCRVlOQVNBQUtBSUFJZ0pCQ3pZQ0ZDQUFJQUlvQWdBUkFBQU1BUXNnQUNnQ0pFRUFTZzBBSUFBb0FnQWlBa0VMTmdJVUlBQWdBaWdDQUJFQUFBc0NRQ0FBS0FLd0FrVU5BQUpBSUFBb0FpaEJBbXNPQlFFQUFBQUJBQXNnQUNnQ0FDSUNRUncyQWhRZ0FDQUNLQUlBRVFBQUN3SkFBa0FDUUFKQUFrQUNRQ0FBS0FJc0lnSkJBV3NPQmdBQkJBTUVBZ1FMSUFCQkFUWUNlQUpBQWtBQ1FDQUFLQUlvUVFGckRnY0FBUUFDQWdJQUFnc2dBVUdUQVRZQ0JDQUFLQUlrSWdOQkFrZ05CaUFEUVFGcklnVkJCM0VoQWlBQUtBTFlBU0VFUVFFaEFTQURRUUpyUVFkUEJFQWdCVUY0Y1NFRkEwQWdCQ0FCUWRnQWJHb2lBMEVBTmdJMElBTkJBRFlDakFFZ0EwRUFOZ0xrQVNBRFFRQTJBcndDSUFOQkFEWUNsQU1nQTBFQU5nTHNBeUFEUVFBMkFzUUVJQU5CQURZQ25BVWdBVUVJYWlFQklBVkJDR3NpQlEwQUN3c2dBa1VOQmdOQUlBUWdBVUhZQUd4cVFRQTJBalFnQVVFQmFpRUJJQUpCQVdzaUFnMEFDd3dHQ3dKQUFrQUNRQUpBSUFBb0FyQUNEZ0lBQVFJTElBRkJsQUUyQWdRTUFnc2dBVUdWQVRZQ0JBd0JDeUFBS0FJQUlnRkJIRFlDRkNBQUlBRW9BZ0FSQUFBTElBQW9BdUFESUFCQkFVR0FHQ0FBS0FJRUtBSUFFUVFBSWdRMkFoaEJBQ0VCQTBBZ0JDQUJRUUowYWlJQ0lBRkJpNWtCYkRZQ0FDQUNRWUFRYWlBQlFhODZiRUdBZ0FKcU5nSUFJQUpCZ0FocUlBRkJ4cXdDYkRZQ0FDQUVJQUZCQVhJaUEwRUNkR29nQTBHTG1RRnNOZ0lBSUFKQmhCQnFJQU5Ccnpwc1FZQ0FBbW8yQWdBZ0FrR0VDR29nQTBIR3JBSnNOZ0lBSUFGQkFtb2lBVUdBQWtjTkFBc01CUXNnQUNnQ0FDSUJRUncyQWhRZ0FDQUJLQUlBRVFBQURBUUxJQUJCQXpZQ2VBSkFBa0FDUUFKQUFrQWdBQ2dDS0VFQmF3NEhBQU1CQkFRRUFnUUxJQUZCbGdFMkFnUU1Cd3NnQVVHWEFUWUNCQ0FBRUtRSERBWUxJQUZCbHdFMkFnUWdBQ2dDNEFNaUFTQUFRUUZCZ0FnZ0FDZ0NCQ2dDQUJFRUFEWUNDQ0FCSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBTmdJTUlBRWdBRUVCUVlBSUlBQW9BZ1FvQWdBUkJBQTJBaEFnQVNBQVFRRkJnQWdnQUNnQ0JDZ0NBQkVFQUNJRU5nSVVJQUVvQWhBaEJTQUJLQUlNSVFZZ0FTZ0NDQ0VIUVFBaEFrR0FmeUVCQTBBZ0J5QUNRUUowSWdOcUlBRkIwNXNMYkVHQWdBSnFRUkIxTmdJQUlBTWdCbW9nQVVIRWxnNXNRWUNBQW1wQkVIVTJBZ0FnQXlBRmFpQUJRZDJrZW13MkFnQWdBeUFFYWlBQlFjMmZmV3hCZ0lBQ2FqWUNBQ0FCUVFGcUlRRWdBa0VCYWlJQ1FZQUNSdzBBQ3d3RkN3SkFBa0FDUUNBQUtBS3dBZzRDQUFFQ0N5QUJRWmdCTmdJRURBWUxJQUZCbVFFMkFnUU1CUXNnQUNnQ0FDSUJRUncyQWhRZ0FDQUJLQUlBRVFBQURBUUxJQUFvQWdBaUFVRWNOZ0lVSUFBZ0FTZ0NBQkVBQUF3REN5QUFRUU0yQW5nZ0FDZ0NLRUVHUmdSQUFrQUNRQUpBSUFBb0FyQUNEZ0lBQVFJTElBRkJtQUUyQWdRTUJRc2dBVUdaQVRZQ0JBd0VDeUFBS0FJQUlnRkJIRFlDRkNBQUlBRW9BZ0FSQUFBTUF3c2dBQ2dDQUNJQlFSdzJBaFFnQUNBQktBSUFFUUFBREFJTElBQkJCRFlDZUFKQUFrQUNRQ0FBS0FJb1FRUnJEZ0lCQUFJTElBRkJtZ0UyQWdRZ0FCQ2tCd3dEQ3lBQlFac0JOZ0lFREFJTElBQW9BZ0FpQVVFY05nSVVJQUFnQVNnQ0FCRUFBQXdCQ3lBQUtBSW9JQUpHQkVBZ0FDQUFLQUlrTmdKNElBRkJtd0UyQWdRTUFRc2dBQ2dDQUNJQlFSdzJBaFFnQUNBQktBSUFFUUFBQzBFQklRRWdBQ0FBS0FKVUJIOUJBUVVnQUNnQ2VBczJBbndMUEFBZ0FDQUJJQUlvQWdBZ0JDQUZLQUlBUVFKMGFpQUFLQUxjQXlnQ0RCRUdBQ0FGSUFVb0FnQkJBV28yQWdBZ0FpQUNLQUlBUVFGcU5nSUFDNzBEQVF4L0lBSkJBblFpQWlBQktBSUlhaWdDQUNFRklBRW9BZ1FnQW1vb0FnQWhCaUFCS0FJQUlBSnFLQUlBSVFjZ0F5Z0NBQ0VCSUFBb0F0QUNJUUlnQUNnQzNBTWlBeWdDSENFSUlBTW9BaGdoQ3lBREtBSVVJUXdnQXlnQ0VDRU5JQUFvQW5BaUEwRUJkaUlPQkg4RFFDQU1JQVl0QUFCQkFuUWlCR29vQWdBaEF5QUxJQVV0QUFCQkFuUWlDV29vQWdBaENpQUVJQWhxS0FJQUlROGdBU0FDSUFrZ0RXb29BZ0FpQ1NBSExRQUFJZ1JxYWkwQUFEb0FBQ0FCSUFJZ0JDQUtJQTlxUVJCMUlncHFhaTBBQURvQUFTQUJJQUlnQXlBRWFtb3RBQUE2QUFJZ0FTQUNJQWtnQnkwQUFTSUVhbW90QUFBNkFBTWdBU0FDSUFRZ0NtcHFMUUFBT2dBRUlBRWdBaUFESUFScWFpMEFBRG9BQlNBQlFRWnFJUUVnQjBFQ2FpRUhJQVZCQVdvaEJTQUdRUUZxSVFZZ0RrRUJheUlPRFFBTElBQW9BbkFGSUFNTFFRRnhCRUFnRENBR0xRQUFRUUowSWdCcUtBSUFJUU1nQ3lBRkxRQUFRUUowSWdWcUtBSUFJUVlnQUNBSWFpZ0NBQ0VJSUFFZ0FpQUhMUUFBSWdBZ0JTQU5haWdDQUdwcUxRQUFPZ0FBSUFFZ0FpQUFJQVlnQ0dwQkVIVnFhaTBBQURvQUFTQUJJQUlnQUNBRGFtb3RBQUE2QUFJTEM0c0NBUVIvSXdCQkVHc2lCeVFBQWtBQ1FDQUFLQUxjQXlJREtBSWtCRUFnQTBFZ2FrRUFJQVFnQlNnQ0FFRUNkR3BCQUVFQklBTW9BaWdRdWdNZ0EwRUFOZ0lrSUFVZ0JTZ0NBRUVCYWpZQ0FDQURJQU1vQWl4QkFXczJBaXdNQVFzZ0F5Z0NMQ0VJSUFjZ0JDQUZLQUlBSWdsQkFuUnFJZ29vQWdBMkFnZ2dCd0ovSUFZZ0NXc2lCQ0FJUVFJZ0NFRUNTUnNpQmlBRUlBWkpHeUlFUVFKUEJFQWdDaWdDQkF3QkN5QURRUUUyQWlRZ0F5Z0NJQXMyQWd3Z0FDQUJJQUlvQWdBZ0IwRUlhaUFES0FJTUVRWUFJQU1vQWlRaEFDQUZJQVVvQWdBZ0JHbzJBZ0FnQXlBREtBSXNJQVJyTmdJc0lBQU5BUXNnQWlBQ0tBSUFRUUZxTmdJQUN5QUhRUkJxSkFBTGlRVUJEbjhnQWtFQ2RDSUZJQUVvQWdocUtBSUFJUW9nQVNnQ0JDQUZhaWdDQUNFTElBRW9BZ0FpQlNBQ1FRTjBJZ0ZxS0FJQUlRY2dCU0FCUVFSeWFpZ0NBQ0VJSUFNb0FnUWhBaUFES0FJQUlRTWdBQ2dDMEFJaEJDQUFLQUxjQXlJQktBSWNJUTRnQVNnQ0dDRVBJQUVvQWhRaEVDQUJLQUlRSVJFZ0FDZ0NjQ0lCUVFGMklna0Vmd05BSUJBZ0N5MEFBRUVDZENJQmFpZ0NBQ0VNSUE4Z0NpMEFBRUVDZENJR2FpZ0NBQ0VGSUFFZ0Rtb29BZ0FoQVNBRElBUWdCaUFSYWlnQ0FDSU5JQWN0QUFBaUJtcHFMUUFBT2dBQUlBTWdCQ0FHSUFFZ0JXcEJFSFVpQldwcUxRQUFPZ0FCSUFNZ0JDQUdJQXhxYWkwQUFEb0FBaUFESUFRZ0RTQUhMUUFCSWdGcWFpMEFBRG9BQXlBRElBUWdBU0FGYW1vdEFBQTZBQVFnQXlBRUlBRWdER3BxTFFBQU9nQUZJQUlnQkNBTklBZ3RBQUFpQVdwcUxRQUFPZ0FBSUFJZ0JDQUJJQVZxYWkwQUFEb0FBU0FDSUFRZ0FTQU1hbW90QUFBNkFBSWdBaUFFSUEwZ0NDMEFBU0lCYW1vdEFBQTZBQU1nQWlBRUlBRWdCV3BxTFFBQU9nQUVJQUlnQkNBQklBeHFhaTBBQURvQUJTQUNRUVpxSVFJZ0NFRUNhaUVJSUFOQkJtb2hBeUFIUVFKcUlRY2dDa0VCYWlFS0lBdEJBV29oQ3lBSlFRRnJJZ2tOQUFzZ0FDZ0NjQVVnQVF0QkFYRUVRQ0FRSUFzdEFBQkJBblFpQUdvb0FnQWhDU0FQSUFvdEFBQkJBblFpQVdvb0FnQWhCU0FBSUE1cUtBSUFJUUFnQXlBRUlBRWdFV29vQWdBaUFTQUhMUUFBSWdacWFpMEFBRG9BQUNBRElBUWdCaUFBSUFWcVFSQjFJZ0JxYWkwQUFEb0FBU0FESUFRZ0JpQUphbW90QUFBNkFBSWdBaUFFSUFFZ0NDMEFBQ0lEYW1vdEFBQTZBQUFnQWlBRUlBQWdBMnBxTFFBQU9nQUJJQUlnQkNBRElBbHFhaTBBQURvQUFnc0xHd0VCZnlBQUtBTGNBeUlCUVFBMkFpUWdBU0FBS0FKME5nSXNDL29EQVFaL0lBQWdBRUVCUVRBZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0xjQXlBQlFRQTJBZ2dnQVVHTkFUWUNBQ0FCSUFBb0FuZ2dBQ2dDY0d3aUF6WUNLQUpBSUFBb0FzQUNRUUpHQkVBZ0FVR09BVFlDRENBQlFZOEJOZ0lFSUFCQkFTQURJQUFvQWdRb0FnUVJCQUFoQWd3QkN5QUJRWkFCTmdJTUlBRkJrUUUyQWdRTElBRWdBallDSUNBQUtBSW9JUUlnQUNnQzNBTWlBU0FBUVFGQmdBZ2dBQ2dDQkNnQ0FCRUVBRFlDRUNBQklBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQU5nSVVJQUVnQUVFQlFZQUlJQUFvQWdRb0FnQVJCQUEyQWhnZ0FTQUFRUUZCZ0FnZ0FDZ0NCQ2dDQUJFRUFDSUROZ0ljSUFFb0FoZ2hCQ0FCS0FJVUlRVWdBU2dDRUNFR1FRQWhBVUdBZnlFQUFrQWdBa0VIUmdSQUEwQWdCaUFCUVFKMElnSnFJQUJCMDVzTGJFR0FnQUpxUVJCMU5nSUFJQUlnQldvZ0FFSEVsZzVzUVlDQUFtcEJFSFUyQWdBZ0FpQUVhaUFBUWQya2VtdzJBZ0FnQWlBRGFpQUFRYzJmZld4QmdJQUNhallDQUNBQVFRRnFJUUFnQVVFQmFpSUJRWUFDUncwQURBSUxBQXNEUUNBR0lBRkJBblFpQW1vZ0FFSHB6UVZzUVlDQUFtcEJFSFUyQWdBZ0FpQUZhaUFBUWFLTEIyeEJnSUFDYWtFUWRUWUNBQ0FDSUFScUlBQkJycEo5YkRZQ0FDQUNJQU5xSUFCQjU4OStiRUdBZ0FKcU5nSUFJQUJCQVdvaEFDQUJRUUZxSWdGQmdBSkhEUUFMQ3d1ZkFRRUVmeUFEUVFGT0JFQWdBQ2dDY0NFQ0lBQW9BdVFES0FJWUlRY0RRQ0FDQkVBZ0FTQUZRUUowYWlnQ0FDRUFJQUloQmdOQUlBY2dBQzBBQUVFQmRrSDhBSEZxS0FJQUlBQXRBQUZCQkhSQndCOXhhaUFBTFFBQ1FRSjJRVDV4YWlJRUlBUXZBUUFpQkNBRVFRRnFJZ1FnQkNBRVFmLy9BM0ZIR3pzQkFDQUFRUU5xSVFBZ0JrRUJheUlHRFFBTEN5QUZRUUZxSWdVZ0EwY05BQXNMQy80S0FScC9JQUFnQUNnQzVBTWlFeWdDRURZQ2lBRWdBRUVCSUJNb0FoUWlCMEVGZENBQUtBSUVLQUlBRVFRQUlncENnSUNBZ1BBRE53SVFJQXBDZ0lDQWdQQUhOd0lJSUFwQ2dJQ0FnUEFETndJQUlBQWdDaEMyQkVFQklRd0NRQUpBSUFkQkFrZ05BQU5BSUFGQkFXb2hEUUpBQWtBQ1FBSkFBa0FnQnlBTVFRRjBUZ1JBSUExQkFYRWhCQ0FCRFFGQkFDRUNRUUFoQXlBS0lRRU1CQXNnRFVFRGNTRUlJQUZCQTA4TkFVRUFJUUpCQUNFRElBb2hBUXdDQ3lBTlFYNXhJUWhCQUNFQ1FRQWhBeUFLSVFFRFFDQURJQUVvQWh3aUJVZ0VRQ0FCSUFJZ0FTZ0NHRUVBU2lJR0d5RUNJQVVnQXlBR0d5RURDeUFESUFFb0Fqd2lCVWdFUUNBQlFTQnFJQUlnQVNnQ09FRUFTaUlHR3lFQ0lBVWdBeUFHR3lFREN5QUJRVUJySVFFZ0NFRUNheUlJRFFBTERBSUxJQTFCZkhFaEJFRUFJUUpCQUNFRElBb2hBUU5BSUFGQjRBQnFJQUZCUUdzZ0FVRWdhaUFCSUFJZ0FTZ0NHQ0lDSUFOS0lnVWJJQUVvQWpnaUJpQUNJQU1nQlJzaUFrb2lBeHNnQVNnQ1dDSUZJQVlnQWlBREd5SUNTaUlER3lBQktBSjRJZ1lnQlNBQ0lBTWJJZ05LSWdVYklRSWdCaUFESUFVYklRTWdBVUdBQVdvaEFTQUVRUVJySWdRTkFBc0xJQWhGRFFFRFFDQUJJQUlnQVNnQ0dDSUVJQU5LSWdVYklRSWdCQ0FESUFVYklRTWdBVUVnYWlFQklBaEJBV3NpQ0EwQUN3d0JDeUFFUlEwQUlBRW9BaHdnQTB3TkFDQUJJQUlnQVNnQ0dFRUFTaHNoQWdzZ0FrVU5BU0FLSUF4QkJYUnFJZ0VnQWlnQ0JEWUNCQ0FCSUFJb0FndzJBZ3dnQVNBQ0tBSVVOZ0lVSUFFZ0FpZ0NBRFlDQUNBQklBSW9BZ2cyQWdnZ0FTQUNLQUlRTmdJUUFrQUNmd0pBQWtBQ1FFRUNJQUlvQWdRaUJDQUNLQUlBSWdWclFRUjBJZ2dnQWlnQ0RDSUdJQUlvQWdnaUNXdEJER3dpQTB3Z0FpZ0NGQ0lPSUFJb0FoQWlEMnRCQTNRZ0NDQURJQU1nQ0VnYlNoc09Bd0FCQWdRTElBSWdCQ0FGYWtFQ2JTSUROZ0lFSUFFTUFnc2dBaUFHSUFscVFRSnRJZ00yQWd3Z0FVRUlhZ3dCQ3lBQ0lBNGdEMnBCQW0waUF6WUNGQ0FCUVJCcUN5QURRUUZxTmdJQUN5QUFJQUlRdGdRZ0FDQUJFTFlFSUEwaEFTQU1RUUZxSWd3Z0IwY05BQXNnQnlFTUlBZEJBVWdOQVF0QkFDRU9BMEJCQUNFRVFRQWhCVUVBSVFaQkFDRUpJQW9nRGtFRmRHb2lBU2dDQUNJUElBRW9BZ1FpRmt3RVFDQUJLQUlNSVJRZ0FTZ0NDQ0VOSUFBb0F1UURLQUlZSVJjZ0FTZ0NFQ0lIUVFGcUlRTWdCMEVEZEVFRWNpRVlJQUVvQWhRaUVDQUhhMEVCYWtFQmNTRVpBMEFnRFNBVVRBUkFJQTlCQTNSQkJISWhFU0FYSUE5QkFuUnFLQUlBSVJvZ0RTRUJBMEFnQVNFSUFrQWdCeUFRU2cwQUlCb2dDRUVHZEdvZ0IwRUJkR29oQWlBSVFRSjBRUUp5SVJJQ2Z5QVpSUVJBSUFJaEFTQUhEQUVMSUFKQkFtb2hBU0FDTHdFQUlnSUVRQ0FDSUJoc0lBbHFJUWtnQWlBU2JDQUdhaUVHSUFJZ0VXd2dCV29oQlNBQ0lBUnFJUVFMSUFNTElRSWdCeUFRUmcwQUEwQWdBUzhCQUNJTEJFQWdDeUFTYkNBR2FpRUdJQXNnRVd3Z0JXb2hCU0FDUVFOMFFRUnlJQXRzSUFscUlRa2dCQ0FMYWlFRUN5QUNRUUZxSVJVZ0FTOEJBaUlMQkVBZ0N5QVNiQ0FHYWlFR0lBc2dFV3dnQldvaEJTQVZRUU4wUVFSeUlBdHNJQWxxSVFrZ0JDQUxhaUVFQ3lBQlFRUnFJUUVnQWtFQ2FpRUNJQkFnRlVjTkFBc0xJQWhCQVdvaEFTQUlJQlJIRFFBTEN5QVBJQlpISVFFZ0QwRUJhaUVQSUFFTkFBc0xJQUFvQW9nQktBSUFJQTVxSUFVZ0JFRUJkU0lCYWlBRWJUb0FBQ0FBS0FLSUFTZ0NCQ0FPYWlBQklBWnFJQVJ0T2dBQUlBQW9Bb2dCS0FJSUlBNXFJQUVnQ1dvZ0JHMDZBQUFnRGtFQmFpSU9JQXhIRFFBTElBd2hCd3NnQUNBSE5nS0VBU0FBS0FJQUlnRWdCellDR0NBQlFlSUFOZ0lVSUFCQkFTQUFLQUlBS0FJRUVRSUFJQk5CQVRZQ0hBdXpCUUVqZnlBRFFRRk9CRUFnQUNnQzBBSWhFaUFBS0FLSUFTSUZLQUlJSVJzZ0JTZ0NCQ0VjSUFVb0FnQWhIU0FBS0FMa0F5SUtLQUlvSVJNZ0NpZ0NHQ0VlSUFBb0FuQWlGRUVCYXlFZklCUkJBMndpQlVFRGF5RWdJQVZCQTJwQkFYUWhJUU5BSUFJZ0ZVRUNkQ0lGYWlnQ0FDRUxJQUVnQldvb0FnQWhCd0ovSUFvb0FpUUVRQ0FMSUI5cUlRc2dCeUFnYWlFSFFYMGhERUYvSVJaQkFDRUVJQW9vQWlBZ0lXb01BUXRCQXlFTVFRRWhCRUVCSVJZZ0NpZ0NJQXNoQlNBS0lBUTJBaVFDUUNBVVJRUkFRUUFoRFVFQUlRNUJBQ0VQREFFTElBeEJBbW9oSWlBTVFRRnFJU05CQUNFUVFRQWhDVUVBSVJGQkFDRVhRUUFoR0VFQUlSbEJBQ0VQUVFBaERrRUFJUTBnRkNFYUlBVWhCQU5BSUFzZ0hpQVNJQk1nRUNBRUlBeEJBWFJxSWdVdUFRQnFRUWhxUVFSMVFRSjBhaWdDQUNBSExRQUFhbW90QUFBaUpFRURkaUlsUVFKMGFpZ0NBQ0FTSUJNZ0NTQUVJQ05CQVhScUxnRUFha0VJYWtFRWRVRUNkR29vQWdBZ0J5MEFBV3BxTFFBQUloQkJBbllpQ1VFR2RHb2dFaUFUSUJFZ0JDQWlRUUYwYWk0QkFHcEJDR3BCQkhWQkFuUnFLQUlBSUFjdEFBSnFhaTBBQUNJUlFRTjJJZ1pCQVhScUlnZ3ZBUUFpSmdSL0lDWUZJQUFnSlNBSklBWVFwZ2NnQ0M4QkFBdEJBV3NpQmpvQUFDQUdJQjFxTFFBQUlRa2dCaUFjYWkwQUFDRUlJQVFnRVNBR0lCdHFMUUFBYXlJR1FRTnNJQTFxT3dFRUlBUWdFQ0FJYXlJSVFRTnNJQTVxT3dFQ0lBUWdKQ0FKYXlJRVFRTnNJQTlxT3dFQUlBc2dGbW9oQ3lBSElBeHFJUWNnQmtFSGJDRVJJQWhCQjJ3aENTQUVRUWRzSVJBZ0JrRUZiQ0FaYWlFTklBaEJCV3dnR0dvaERpQUVRUVZzSUJkcUlROGdCQ0VYSUFnaEdDQUdJUmtnQlNFRUlCcEJBV3NpR2cwQUN3c2dCU0FOT3dFRUlBVWdEanNCQWlBRklBODdBUUFnRlVFQmFpSVZJQU5IRFFBTEN3dS9BUUVMZnlBRFFRRk9CRUFnQUNnQ2NDRUpJQUFvQXVRREtBSVlJUW9EUUNBSkJFQWdBU0FHUVFKMElnVnFLQUlBSVFRZ0FpQUZhaWdDQUNFSElBa2hCUU5BSUFvZ0JDMEFBRUVEZGlJTFFRSjBhaWdDQUNBRUxRQUJRUUoySWd4QkJuUnFJQVF0QUFKQkEzWWlEVUVCZEdvaURpOEJBQ0lJUlFSQUlBQWdDeUFNSUEwUXBnY2dEaTBBQUNFSUN5QUVRUU5xSVFRZ0J5QUlRUUZyT2dBQUlBZEJBV29oQnlBRlFRRnJJZ1VOQUFzTElBWkJBV29pQmlBRFJ3MEFDd3NMdlFVQkEzOGdBQ2dDNUFNaUF5Z0NHQ0VDQWtBQ1FBSi9JQUFvQWxoRkJFQWdBUTBDUVlnQkRBRUxJQUJCQWpZQ1dDQUJEUUZCaVFFTElRRWdBMEdLQVRZQ0NDQURJQUUyQWdRQ1FDQUFLQUtFQVNJQlFRQk1CRUFnQUNnQ0FFSzZnSUNBRURjQ0ZDQUFJQUFvQWdBb0FnQVJBQUFNQVFzZ0FVR0JBa2dOQUNBQUtBSUFRcnVBZ0lDQUlEY0NGQ0FBSUFBb0FnQW9BZ0FSQUFBTElBQW9BbGhCQWtjTkFTQUFLQUp3UVFac1FReHFJUUVnQXlnQ0lDSUVSUVJBSUFNZ0FFRUJJQUVnQUNnQ0JDZ0NCQkVFQUNJRU5nSWdDeUFFUVFBZ0FSQTdHaUFES0FJb1JRUkFJQUFRcHdjTElBTkJBRFlDSkF3QkN5QURRUUUyQWh3Z0EwR0xBVFlDQ0NBRFFZd0JOZ0lFQ3lBREtBSWNCRUFnQWlnQ0FFRUFRWUFnRURzYUlBSW9BZ1JCQUVHQUlCQTdHaUFDS0FJSVFRQkJnQ0FRT3hvZ0FpZ0NERUVBUVlBZ0VEc2FJQUlvQWhCQkFFR0FJQkE3R2lBQ0tBSVVRUUJCZ0NBUU94b2dBaWdDR0VFQVFZQWdFRHNhSUFJb0FoeEJBRUdBSUJBN0dpQUNLQUlnUVFCQmdDQVFPeG9nQWlnQ0pFRUFRWUFnRURzYUlBSW9BaWhCQUVHQUlCQTdHaUFDS0FJc1FRQkJnQ0FRT3hvZ0FpZ0NNRUVBUVlBZ0VEc2FJQUlvQWpSQkFFR0FJQkE3R2lBQ0tBSTRRUUJCZ0NBUU94b2dBaWdDUEVFQVFZQWdFRHNhSUFJb0FrQkJBRUdBSUJBN0dpQUNLQUpFUVFCQmdDQVFPeG9nQWlnQ1NFRUFRWUFnRURzYUlBSW9Ba3hCQUVHQUlCQTdHaUFDS0FKUVFRQkJnQ0FRT3hvZ0FpZ0NWRUVBUVlBZ0VEc2FJQUlvQWxoQkFFR0FJQkE3R2lBQ0tBSmNRUUJCZ0NBUU94b2dBaWdDWUVFQVFZQWdFRHNhSUFJb0FtUkJBRUdBSUJBN0dpQUNLQUpvUVFCQmdDQVFPeG9nQWlnQ2JFRUFRWUFnRURzYUlBSW9BbkJCQUVHQUlCQTdHaUFDS0FKMFFRQkJnQ0FRT3hvZ0FpZ0NlRUVBUVlBZ0VEc2FJQUlvQW54QkFFR0FJQkE3R2lBRFFRQTJBaHdMQ3cwQUlBQW9BdVFEUVFFMkFod0xqd01CQkg4Z0FDQUFRUUZCTENBQUtBSUVLQUlBRVFRQUlnRTJBdVFESUFGQkFEWUNLQ0FCUVFBMkFpQWdBVUdHQVRZQ0RDQUJRWWNCTmdJQUlBQW9BbmhCQTBjRVFDQUFLQUlBSWdOQk1EWUNGQ0FBSUFNb0FnQVJBQUFMSUFFZ0FFRUJRWUFCSUFBb0FnUW9BZ0FSQkFBMkFoZ0RRQ0FBUVFGQmdDQWdBQ2dDQkNnQ0JCRUVBQ0VESUFKQkFuUWlCQ0FCS0FJWWFpQUROZ0lBSUFCQkFVR0FJQ0FBS0FJRUtBSUVFUVFBSVFNZ0FTZ0NHQ0FFUVFSeWFpQUROZ0lBSUFKQkFtb2lBa0VnUncwQUN5QUJRUUUyQWh3Q1FDQUFLQUpzQkVBQ1FDQUFLQUpnSWdKQkIwd0VRQ0FBS0FJQVFycUFnSUNBQVRjQ0ZDQUFJQUFvQWdBb0FnQVJBQUFNQVFzZ0FrR0JBa2dOQUNBQUtBSUFRcnVBZ0lDQUlEY0NGQ0FBSUFBb0FnQW9BZ0FSQUFBTElBQkJBU0FDUVFNZ0FDZ0NCQ2dDQ0JFSkFDRURJQUVnQWpZQ0ZDQUJJQU0yQWhBTUFRc2dBVUVBTmdJUUN5QUFLQUpZQkVBZ0FFRUNOZ0pZSUFFZ0FFRUJJQUFvQW5CQkJteEJER29nQUNnQ0JDZ0NCQkVFQURZQ0lDQUFFS2NIQ3d1M0F3RVlmeUFEUVFGT0JFQWdBQ2dDMEFJaEVpQUFLQUxrQXlFRlFRQWdBQ2dDZUNJSmF5RVRJQUFvQW5BaUNrRUJheUlVSUFsc0lSVWdDa0VCYWtFQmRDRVdBMEFnQWlBTlFRSjBJZ0JxSWhjb0FnQkJBQ0FLRURzYUlBbEJBVTRFUUNBQUlBRnFJUmhCQUNFR0EwQWdHQ2dDQUNBR2FpRUhJQmNvQWdBaEFBSi9JQVVvQWxRRVFDQUFJQlJxSVFBZ0J5QVZhaUVIUVg4aERpQVRJUThnQlNBR1FRSjBhaWdDUkNBV2Fnd0JDMEVCSVE0Z0NTRVBJQVVnQmtFQ2RHb29Ba1FMSVFSQkFDRUxBa0FnQ2tVRVFDQUVJUWhCQUNFTURBRUxJQVpCQW5RaUNDQUZLQUlRYWlnQ0FDRVpJQVVvQWhnZ0NHb29BZ0FoR2tFQUlSQWdDaUVSUVFBaERBTkFJQUFnR2lBU0lBY3RBQUFnQ3lBRUlBNUJBWFJxSWdndUFRQnFRUWhxUVFSMWFtb3RBQUFpQzJvdEFBQWlHeUFBTFFBQWFqb0FBQ0FFSUFzZ0dTQWJhaTBBQUdzaUJFRURiQ0FNYWpzQkFDQUVRUWRzSVFzZ0JFRUZiQ0FRYWlFTUlBQWdEbW9oQUNBSElBOXFJUWNnQkNFUUlBZ2hCQ0FSUVFGckloRU5BQXNMSUFnZ0REc0JBQ0FHUVFGcUlnWWdDVWNOQUFzTElBVWdCU2dDVkVVMkFsUWdEVUVCYWlJTklBTkhEUUFMQ3d2MkFnRVFmeUFEUVFGT0JFQWdBQ2dDZUNFR0lBQW9BdVFESVFjZ0FDZ0NjQ0lJUVg1eElROGdDRUVCY1NFUUEwQWdBaUFLUVFKMElnQnFJaEVvQWdCQkFDQUlFRHNhSUFjb0FqQWhDeUFHUVFGT0JFQWdBQ0FCYWlFU1FRQWhDUU5BQWtBZ0NFVU5BQ0FKUVFKMElnQWdCeWdDR0dvb0FnQWhEQ0FBSUFkcUtBSTBJUTBnRWlnQ0FDQUphaUVFSUJFb0FnQWhBRUVBSVFVZ0R5RU9JQWhCQVVjRVFBTkFJQUFnQUMwQUFDQU1JQTBnQzBFR2RHb2lFeUFGUVFKMGFpZ0NBQ0FFTFFBQWFtb3RBQUJxT2dBQUlBQWdBQzBBQVNBTUlCTWdCVUVCYWtFUGNVRUNkR29vQWdBZ0JDQUdhaUlFTFFBQWFtb3RBQUJxT2dBQklBQkJBbW9oQUNBRlFRSnFRUTl4SVFVZ0JDQUdhaUVFSUE1QkFtc2lEZzBBQ3dzZ0VFVU5BQ0FBSUFBdEFBQWdEQ0FOSUF0QkJuUnFJQVZCQW5ScUtBSUFJQVF0QUFCcWFpMEFBR282QUFBTElBbEJBV29pQ1NBR1J3MEFDd3NnQnlBTFFRRnFRUTl4TmdJd0lBcEJBV29pQ2lBRFJ3MEFDd3NMalFJQkQzOGdBMEVCVGdSQUlBQW9BbkFoQ2lBQUtBTGtBeUlFS0FJWUlnQW9BZ2doRFNBQUtBSUVJUTRnQUNnQ0FDRVBJQVFvQWpBaEJnTkFJQW9FUUNBRUtBSThJUkFnQkNnQ09DRVJJQVFvQWpRaEVpQUJJQWRCQW5RaUJXb29BZ0FoQUNBQ0lBVnFLQUlBSVFoQkFDRUpJQW9oQlFOQUlBZ2dEaUFKUVFKMElnc2dFU0FHUVFaMElneHFhaWdDQUNBQUxRQUJhbW90QUFBZ0R5QU1JQkpxSUF0cUtBSUFJQUF0QUFCcWFpMEFBR29nRFNBTUlCQnFJQXRxS0FJQUlBQXRBQUpxYWkwQUFHbzZBQUFnQ0VFQmFpRUlJQUJCQTJvaEFDQUpRUUZxUVE5eElRa2dCVUVCYXlJRkRRQUxDeUFFSUFaQkFXcEJEM0VpQmpZQ01DQUhRUUZxSWdjZ0EwY05BQXNMQzlrQ0FRNS9JQU5CQVU0RVFDQUFLQUp3SVEwZ0FDZ0M1QU1vQWhnaEJTQUFLQUo0SWdoQmZIRWhEeUFJUVFOeElSQWdDRUVCYTBFRFNTRVJBMEFnRFFSQUlBRWdDa0VDZENJQWFpZ0NBQ0VKSUFBZ0Ftb29BZ0FoQ3lBTklRNERRRUVBSVFZZ0NFRUJUZ1JBUVFBaEJDQUpJUUFnRHlFSElCRkZCRUFEUUNBR0lBVWdCRUVDZENJTWFpZ0NBQ0FBTFFBQWFpMEFBR29nQlNBTVFRUnlhaWdDQUNBQUxRQUJhaTBBQUdvZ0JTQU1RUWh5YWlnQ0FDQUFMUUFDYWkwQUFHb2dCU0FNUVF4eWFpZ0NBQ0FBTFFBRGFpMEFBR29oQmlBRVFRUnFJUVFnQUVFRWFpRUFJQWRCQkdzaUJ3MEFDd3NnRUNJSEJFQURRQ0FHSUFVZ0JFRUNkR29vQWdBZ0FDMEFBR290QUFCcUlRWWdCRUVCYWlFRUlBQkJBV29oQUNBSFFRRnJJZ2NOQUFzTElBZ2dDV29oQ1FzZ0N5QUdPZ0FBSUF0QkFXb2hDeUFPUVFGcklnNE5BQXNMSUFwQkFXb2lDaUFEUncwQUN3c0xvQUlCQ1g4Z0EwRUJUZ1JBSUFBb0F1UURLQUlZSWdRb0FnZ2hCeUFFS0FJRUlRZ2dCQ2dDQUNFSklBQW9BbkFpQmtFQmF5RUxJQVpCQVhFaERBTkFBa0FnQmtVTkFDQUJJQXBCQW5RaUJHb29BZ0FoQUNBQ0lBUnFLQUlBSVFVZ0RBUi9JQVVnQnlBQUxRQUNhaTBBQUNBSUlBQXRBQUZxTFFBQUlBa2dBQzBBQUdvdEFBQnFham9BQUNBRlFRRnFJUVVnQUVFRGFpRUFJQXNGSUFZTElRUWdCa0VCUmcwQUEwQWdCU0FISUFBdEFBSnFMUUFBSUFnZ0FDMEFBV290QUFBZ0NTQUFMUUFBYWkwQUFHcHFPZ0FBSUFVZ0J5QUFMUUFGYWkwQUFDQUlJQUF0QUFScUxRQUFJQWtnQUMwQUEyb3RBQUJxYWpvQUFTQUZRUUpxSVFVZ0FFRUdhaUVBSUFSQkFtc2lCQTBBQ3dzZ0NrRUJhaUlLSUFOSERRQUxDd3ZmQkFFSGZ5QUFJQUFvQXVRRElnSW9BaEEyQW9nQklBQWdBaWdDRkRZQ2hBRUNRQUpBQWtBQ1FBSkFJQUFvQWxnT0F3QUJBZ01MSUFBb0FuaEJBMFlFUUNBQ1FZRUJOZ0lFRHdzZ0FrR0NBVFlDQkE4TElBQW9BbmdoQVNBQ1FRQTJBakFnQWtHREFVR0VBU0FCUVFOR0d6WUNCQ0FDS0FJY1JRUkFJQUFRcVFjTElBSW9BalFOQWlBQUtBSjRJZ05CQVVnTkFpQUFLQUxrQXlFR1FRQWhBZ05BSUFZZ0FrRUNkR29pQ0NnQ0lDRUVRUUFoQVFKQUFrQWdBa1VOQUFOQUlBWWdBVUVDZEdvaUJTZ0NJQ0FFUndSQUlBRkJBV29pQVNBQ1J3MEJEQUlMQ3lBRktBSTBJZ1VOQVFzZ0JFRUpkRUdBQkdzaEIwRUFJUVFnQUVFQlFZQUlJQUFvQWdRb0FnQVJCQUFoQlFOQVFRQWhBUU5BSUFVZ0JFRUdkR29nQVVFQ2RHb0NmeUFFUVFSMElBRnFRY0M3QW1vdEFBQkJnbnhzSWdOQi9vTjhUQVJBUVFCQi80TjhJQU5ySUFkdGF3d0JDeUFEUVlIOEEyb2dCMjBMTmdJQUlBRkJBV29pQVVFUVJ3MEFDeUFFUVFGcUlnUkJFRWNOQUFzZ0FDZ0NlQ0VEQ3lBSUlBVTJBalFnQWtFQmFpSUNJQU5JRFFBTERBSUxJQUpCQURZQ1ZDQUNRWVVCTmdJRUFrQWdBaWdDUkFSQUlBQW9BbmdoQXd3QkN5QUFLQUo0UVFGSURRSWdBQ2dDY0VFQmRFRUVhaUVFUVFBaEFRTkFJQUlnQVVFQ2RHb2dBRUVCSUFRZ0FDZ0NCQ2dDQkJFRUFEWUNSQ0FCUVFGcUlnRWdBQ2dDZUNJRFNBMEFDd3NnQTBFQlNBMEJJQUFvQW5CQkFYUkJCR29oQTBFQUlRRURRQ0FDSUFGQkFuUnFLQUpFUVFBZ0F4QTdHaUFCUVFGcUlnRWdBQ2dDZUVnTkFBc01BUXNnQUNnQ0FDSUJRVEUyQWhRZ0FDQUJLQUlBRVFBQUN3c2FBUUYvSUFBb0FnQWlBVUV2TmdJVUlBQWdBU2dDQUJFQUFBdjhDUUVTZnlBQUlBQkJBVUhZQUNBQUtBSUVLQUlBRVFRQUlnSTJBdVFESUFKQkFEWUNSQ0FDUWY0QU5nSU1JQUpCL3dBMkFnZ2dBa0dBQVRZQ0FDQUNRUUEyQWpRZ0FDZ0NlRUVGVGdSQUlBQW9BZ0JDdVlDQWdNQUFOd0lVSUFBZ0FDZ0NBQ2dDQUJFQUFBc2dBQ2dDWUNJR1FZRUNUZ1JBSUFBb0FnQkN1NENBZ0lBZ053SVVJQUFnQUNnQ0FDZ0NBQkVBQUNBQUtBSmdJUVlMSUFBb0FuZ2lCMEVCYXlJQ1FYaHhJUWdnQWtFSGNTRURJQUFvQXVRRElRb2dCMEVDU0NFTUlBZEJBbXRCQjBraENVRUJJUUVEUUNBQklnVkJBV29pQVNFRUFrQWdEQTBBSUFFaEJDQUlJUUlnQ1VVRVFBTkFJQUVnQkd3Z0FXd2dBV3dnQVd3Z0FXd2dBV3dnQVd3Z0FXd2hCQ0FDUVFocklnSU5BQXNMSUFNaUFrVU5BQU5BSUFFZ0JHd2hCQ0FDUVFGcklnSU5BQXNMSUFRZ0Jrd05BQXRCQVNFRElBVkJBVTBFUUNBQUtBSUFJZ0lnQkRZQ0dDQUNRVG8yQWhRZ0FDQUFLQUlBS0FJQUVRQUFDd0pBSUFkQkFVZ05BQ0FIUVFOeElRc0NRQ0FIUVFGclFRTkpCRUJCQUNFQkRBRUxJQWRCZkhFaEFrRUFJUUVnQ2tFZ2FpRUlBMEFnQ0NBQlFRSjBJZ1JxSUFVMkFnQWdDQ0FFUVFSeWFpQUZOZ0lBSUFnZ0JFRUljbW9nQlRZQ0FDQUlJQVJCREhKcUlBVTJBZ0FnQVVFRWFpRUJJQU1nQld3Z0JXd2dCV3dnQld3aEF5QUNRUVJySWdJTkFBc0xJQXRGRFFBRFFDQUtJQUZCQW5ScUlBVTJBaUFnQVVFQmFpRUJJQU1nQld3aEF5QUxRUUZySWdzTkFBc0xJQWRCQVVnaERDQURJUUlEUUFKQUlBd0VRQ0FESVFJTUFRc2dBQ2dDTENFSlFRQWhBVUVCSVFzRFFDQUJJUVFnQmlBQ0lBb2dDVUVDUmdSL0lBRkJBblJCd0wwQ2FpZ0NBQVVnQkF0QkFuUnFJZ1ZCSUdvb0FnQWlCRzBnQkVFQmFpSUliQ0lFVGdSQUlBVWdDRFlDSUVFQUlRc2dCQ0VDSUFGQkFXb2lBU0FIUncwQkN3c2dDMEVCY1VVTkFRc0xJQUFvQWdBaEF3SkFJQUFvQW5oQkEwWUVRQ0FESUFJMkFoZ2dBeUFLS0FJZ05nSWNJQU1nQ2lnQ0pEWUNJQ0FLS0FJb0lRRWdBMEhnQURZQ0ZDQURJQUUyQWlRZ0FFRUJJQU1vQWdRUkFnQU1BUXNnQXlBQ05nSVlJQU5CNFFBMkFoUWdBRUVCSUFBb0FnQW9BZ1FSQWdBTElBQkJBU0FDSUFBb0FuZ2dBQ2dDQkNnQ0NCRUpBQ0VTSUFBb0FuZ2lBVUVCVGdSQUlBSWhBd05BSUFNZ0NpQVFRUUowSWdacUtBSWdJaEZ0SVFrZ0VVRUJUZ1JBSUFsQmZIRWhCU0FKUVFOeElRZ2dDVUVCYXlFSElBWWdFbW9oRFNBUlFRRnJJZ3RCQW0waERFRUFJUThEUUNBQ0lBa2dEMndpQkVvRVFDQVBRZjhCYkNBTWFpQUxiU0VPQTBBQ1FDQUpRUUZJRFFCQkFDRUJJQVVoQmlBSFFRTlBCRUFEUUNBTktBSUFJQUVnQkdwcUlBNDZBQUFnRFNnQ0FDQUJRUUZ5SUFScWFpQU9PZ0FBSUEwb0FnQWdBVUVDY2lBRWFtb2dEam9BQUNBTktBSUFJQUZCQTNJZ0JHcHFJQTQ2QUFBZ0FVRUVhaUVCSUFaQkJHc2lCZzBBQ3dzZ0NDSUdSUTBBQTBBZ0RTZ0NBQ0FCSUFScWFpQU9PZ0FBSUFGQkFXb2hBU0FHUVFGcklnWU5BQXNMSUFNZ0JHb2lCQ0FDU0EwQUN3c2dEMEVCYWlJUElCRkhEUUFMSUFBb0FuZ2hBUXNnQ1NFRElCQkJBV29pRUNBQlNBMEFDd3NnQ2lBQ05nSVVJQW9nRWpZQ0VDQUFFS2tIQWtBZ0FDZ0NXRUVDUncwQUlBQW9BbmhCQVVnTkFDQUFLQUp3UVFGMFFRUnFJUU1nQUNnQzVBTWhBa0VBSVFFRFFDQUNJQUZCQW5ScUlBQkJBU0FESUFBb0FnUW9BZ1FSQkFBMkFrUWdBVUVCYWlJQklBQW9BbmhJRFFBTEN3dkxCUUVGZnlBQ0lBTnFJUVFDUUFKQUFrQUNRQ0FDUVE1UEJFQWdBUzBBQUVIS0FFY05BaUFCTFFBQlFjWUFSdzBCSUFFdEFBSkJ5UUJIRFFFZ0FTMEFBMEhHQUVjTkFTQUJMUUFFRFFFZ0FFRUJOZ0tjQWlBQUlBRXRBQVVpQXpvQW9BSWdBQ0FCTFFBR0lnVTZBS0VDSUFBZ0FTMEFCeUlHT2dDaUFpQUFJQUV2QUFnaUFrRUlkQ0FDUVFoMmNpSUhPd0drQWlBQUlBRXZBQW9pQWtFSWRDQUNRUWgyY2lJSU93R21BaUFEUVFGclFmOEJjVUVCU3dSQUlBQW9BZ0FpQWlBRE5nSVlJQUpCK2dBMkFoUWdBQ2dDQUNBQUxRQ2hBallDSENBQVFYOGdBQ2dDQUNnQ0JCRUNBQ0FBTFFDaUFpRUdJQUF2QWFZQ0lRZ2dBQzhCcEFJaEJ5QUFMUUNoQWlFRklBQXRBS0FDSVFNTElBQW9BZ0FpQWlBRE5nSVlJQUpCMlFBMkFoUWdBaUFHTmdJb0lBSWdDRUgvL3dOeE5nSWtJQUlnQjBILy93TnhOZ0lnSUFJZ0JUWUNIQ0FBUVFFZ0FpZ0NCQkVDQUNBQkxRQU5JZ0lnQVMwQURDSURjZ1JBSUFBb0FnQWlBa0hjQURZQ0ZDQUNJQUV0QUF3MkFoZ2dBQ2dDQUNBQkxRQU5OZ0ljSUFCQkFTQUFLQUlBS0FJRUVRSUFJQUV0QUF3aEF5QUJMUUFOSVFJTElBUkJEbXNpQVNBRElBSkIvd0Z4YkVFRGJFWU5BeUFBS0FJQUlnSWdBVFlDR0NBQ1Fkb0FOZ0lVREFRTElBSkJCa2tOQVNBQkxRQUFRY29BUncwQkN5QUJMUUFCUWNZQVJ3MEFJQUV0QUFKQjJBQkhEUUFnQVMwQUEwSFlBRWNOQUNBQkxRQUVEUUFDUUFKQUFrQUNRQ0FCTFFBRlFSQnJEZ1FBQVFNQ0F3c2dBQ2dDQUNJQklBUTJBaGdnQVVIdUFEWUNGQXdGQ3lBQUtBSUFJZ0VnQkRZQ0dDQUJRZThBTmdJVURBUUxJQUFvQWdBaUFTQUVOZ0lZSUFGQjhBQTJBaFFNQXdzZ0FDZ0NBQ0lDUWRzQU5nSVVJQUlnQVMwQUJUWUNHQ0FBS0FJQUlBUTJBaHdNQWdzZ0FDZ0NBQ0lCSUFRMkFoZ2dBVUhQQURZQ0ZDQUFRUUVnQUNnQ0FDZ0NCQkVDQUFzUEN5QUFRUUVnQUNnQ0FDZ0NCQkVDQUF1ckFnQWdBRUVBUWNBQUVEc2lBRUlBTndOSUlBQkJRR3RDZ0lDQWdJQ0FnUGkvZnpjREFDQUFRZ0EzQTFBZ0FFSUFOd05ZSUFCQ0FEY0RZQ0FBUW9DQWdJQ0FnSUQ0UHpjRGFDQUFRZkFBYWtFQVFUQVFPeG9nQUVLQWdJQ0FnSUNBK0Q4M0E2QUJJQUJCcUFGcVFRQkJ5QUFRT3hvZ0FFS0FnSUNBZ0lDQStMOS9Od1B3QVNBQVFmZ0Jha0VBUVRBUU94b2dBRUlBTndPd0FpQUFRb0NBZ0lDQWdJRDR2MzgzQTZnQ0lBQkNBRGNEdUFJZ0FFSUFOd1BBQWlBQVFnQTNBOGdDSUFCQ2dJQ0FnSUNBZ1BnL053UFFBaUFBUWRnQ2FrRUFRZkFBRURzYUlBQkNnSUNBZ0lDQWdQZy9Od1BJQXlBQVFkQURha0VBUVRBUU94b2dBRUtBZ0lDQWdJQ0ErRDgzQTRBRUlBQkJpQVJxUVFCQk1CQTdHaUFBUW9DQWdJQ0FnSUQ0UHpjRHVBUUxoZ1VCRFg4akFFRVFheUlESkFBQ1FDQUFLQUlZSWdRb0FnUWlBa1VFUUNBQUlBUW9BZ3dSQVFCRkJFQkJBQ0VDREFJTElBUW9BZ1FoQWdzZ0JDZ0NBQ0lHTFFBQUlRVUNmeUFHUVFGcUlBSkJBV3NpQWcwQUdpQUFJQVFvQWd3UkFRQkZCRUJCQUNFQ0RBSUxJQVFvQWdRaEFpQUVLQUlBQ3lFQklBRkJBV29oQmlBQ1FRRnJJUUpCRGtFQUlBRXRBQUFnQlVFSWRISWlBVUVDYXlJRklBRWdCVWtiSUFGQkQwc2JJZ0VFUUFOQUlBSkZCRUFnQUNBRUtBSU1FUUVBUlFSQVFRQWhBZ3dFQ3lBRUtBSUFJUVlnQkNnQ0JDRUNDeUFEUVFKcUlBZHFJQVl0QUFBNkFBQWdCa0VCYWlFR0lBSkJBV3NoQWlBSFFRRnFJZ2NnQVVjTkFBc0xJQVVnQVdzaEJ3SkFBa0FDUUNBQUtBSzRBeUlJUWVBQmF5SUpCRUFnQ1VFT1JnUkFEQUlGREFNTEFBc2dBQ0FEUVFKcUlBRWdCeENsRHd3Q0N3SkFJQUZCREVrTkFDQURMUUFDUWNFQVJ3MEFJQU10QUFOQjVBQkhEUUFnQXkwQUJFSHZBRWNOQUNBRExRQUZRZUlBUncwQUlBTXRBQVpCNVFCSERRQWdBeTBBQ0NFSUlBTXRBQWNoQ1NBRExRQUtJUW9nQXkwQUNTRUxJQU10QUF3aERDQURMUUFMSVEwZ0F5MEFEU0VGSUFBb0FnQWlBVUhPQURZQ0ZDQUJJQVUyQWlRZ0FTQU1JQTFCQ0hSeU5nSWdJQUVnQ2lBTFFRaDBjallDSENBQklBZ2dDVUVJZEhJMkFoZ2dBRUVCSUFFb0FnUVJBZ0FnQUNBRk9nQ3NBaUFBUVFFMkFxZ0NEQUlMSUFBb0FnQWlBU0FGTmdJWUlBRkIwQUEyQWhRZ0FFRUJJQUFvQWdBb0FnUVJBZ0FNQVFzZ0FDZ0NBQ0lCSUFnMkFoZ2dBVUhHQURZQ0ZDQUFJQUFvQWdBb0FnQVJBQUFMSUFRZ0FqWUNCQ0FFSUFZMkFnQkJBU0VDSUFkQkFVZ05BQ0FBSUFjZ0FDZ0NHQ2dDRUJFQ0FBc2dBMEVRYWlRQUlBSUxOZ0FnQUVFQU5nTFlBU0FBUVFBMkFyZ0RJQUJCQURZQ2tBRWdBQ2dDMEFNaUFFRUFOZ0trQVNBQVFRQTJBaGdnQUVJQU53SU1DNmc3QVE1L0l3QkJvQUpySWdra0FDQUFLQUs0QXlFQkEwQUNRQUpBQWtBZ0FRMEFJQUFvQXRBREtBSU1SUVJBSUFBb0FoZ2lBaWdDQkNJQlJRUkFJQUFnQWlnQ0RCRUJBRVVFUUVFQUlRRU1CQXNnQWlnQ0JDRUJDeUFDS0FJQUlnUXRBQUFoQlFKL0lBUkJBV29nQVVFQmF5SUVEUUFhSUFBZ0FpZ0NEQkVCQUVVRVFFRUFJUUVNQkFzZ0FpZ0NCQ0VFSUFJb0FnQUxJZ0ZCQVdvaEF5QUZRZjhCUmtFQUlBRXRBQUFpQVVIWUFVWWJSUVJBSUFBb0FnQWlCaUFGTmdJWUlBWkJOellDRkNBQUtBSUFJQUUyQWh3Z0FDQUFLQUlBS0FJQUVRQUFDeUFBSUFFMkFyZ0RJQUlnQkVFQmF6WUNCQ0FDSUFNMkFnQU1BUXNnQUJDM0JFVUVRRUVBSVFFTUFnc2dBQ2dDdUFNaEFRc0NRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFGQkFXc08vZ0VQRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJJQkFnVUpCUVVGQlFNRUJRZ0ZCUVVQRHc4UER3OFBEd0FIQmdvUUN4RVJEUTBORFEwTkRRME5EUTBORFEwTkRSRVJFUkVSRVJFUkRCRVJFUkVSRGhFTElBQW9BZ0FpQWtIb0FEWUNGQ0FBUVFFZ0FpZ0NCQkVDQUNBQUtBTFFBeUlCS0FJTUJFQWdBQ2dDQUNJQ1FjQUFOZ0lVSUFBZ0FpZ0NBQkVBQUNBQUtBTFFBeUVCQ3lBQVFnQTNBT2dCSUFCQ0FEY0E4QUVnQUVLQmdvU0lrS0RBZ0FFM0FJQUNJQUJDZ1lLRWlKQ2d3SUFCTndENEFTQUFRb1dLbEtqUW9NR0NCVGNBa0FJZ0FFS0ZpcFNvMEtEQmdnVTNBSWdDSUFCQ0FEY0RzQUlnQUVFQU5nSW9JQUJDQURjRG1BSWdBRUVBT2dDc0FpQUFRb0dBQkRjQ3BBSWdBRUVBT2dDaUFpQUFRWUVDT3dHZ0FpQUJRUUUyQWd3TUZBdEJBQ0VCSUFCQkFFRUFRUUFRN0FJTkV3d1NDMEVBSVFFZ0FFRUFRUUZCQUJEc0FnMFNEQkVMUVFBaEFTQUFRUUJCQUVFQkVPd0NEUkVNRUF0QkFDRUJJQUJCQUVFQlFRRVE3QUlORUF3UEN5QUFLQUlBSWdJZ0FUWUNHQ0FDUVQ4MkFoUWdBQ0FBS0FJQUtBSUFFUUFBREE4TElBQW9BaGdpQmlnQ0JDRUJJQVlvQWdBaEF5QUFLQUxRQXlnQ0VFVUVRQ0FBS0FJQUlnSkJQRFlDRkNBQ1FSaHFRWkM2QWtIUUFCQS9HaUFBSUFBb0FnQW9BZ0FSQUFBTElBRkZCRUFnQUNBR0tBSU1FUUVBUlFSQVFRQWhBUXdQQ3lBR0tBSUFJUU1nQmlnQ0JDRUJDeUFETFFBQUlRVUNmeUFEUVFGcUlBRkJBV3NpQWcwQUdpQUFJQVlvQWd3UkFRQkZCRUJCQUNFQkRBOExJQVlvQWdRaEFpQUdLQUlBQ3lJRUxRQUFJUUVDZnlBRVFRRnFJQUpCQVdzaUF3MEFHaUFBSUFZb0Fnd1JBUUJGQkVCQkFDRUJEQThMSUFZb0FnUWhBeUFHS0FJQUN5RUVJQUFvQWdBaUFpQUVMUUFBSWdzMkFoZ2dBa0hwQURZQ0ZFRUJJUUlnQUVFQklBQW9BZ0FvQWdRUkFnQUNRQUpBQWtBZ0MwRUJkRUVHYWlBRlFRaDBJQUZ5UnlBTFFRUkxjZzBBSUFzRVFDQUFJQXMyQXRRQ0lBUkJBV29oQ2lBRFFRRnJJUWdNQWdzZ0FDZ0M0QUZGRFFBZ0FDQUxOZ0xVQWlBRVFRRnFJUW9nQTBFQmF5RUlEQUlMSUFBb0FnQWlBVUVNTmdJVUlBQWdBU2dDQUJFQUFDQUFJQXMyQXRRQ0lBUkJBV29oQ2lBRFFRRnJJUWdnQzBVTkFRdEJBQ0VFQTBBZ0NFVUVRQ0FBSUFZb0Fnd1JBUUJGQkVCQkFDRUJEQkVMSUFZb0FnQWhDaUFHS0FJRUlRZ0xJQW90QUFBaEF3SkFJQVJGRFFBZ0JFRUNheUVISUFSQkFXc2hBa0VBSVFFRFFDQURJQUFnQVVFQ2RHb29BdGdDS0FJQVJ3UkFJQVFnQVVFQmFpSUJSdzBCREFJTEN5QUFLQUxZQWlnQ0FDRUJBa0FnQkVFQ1NRMEFJQUpCQTNFaEJVRUJJUU1nQjBFRFR3UkFJQUpCZkhFaEJ3TkFJQUFnQTBFQ2RHb2lBaWdDNUFJb0FnQWlEQ0FDS0FMZ0FpZ0NBQ0lOSUFJb0F0d0NLQUlBSWc0Z0FpZ0MyQUlvQWdBaUFpQUJJQUVnQWtnYklnSWdBaUFPU0JzaUFpQUNJQTFJR3lJQ0lBSWdERWdiSVFFZ0EwRUVhaUVESUFkQkJHc2lCdzBBQ3dzZ0JVVU5BQU5BSUFBZ0EwRUNkR29vQXRnQ0tBSUFJZ0lnQVNBQklBSklHeUVCSUFOQkFXb2hBeUFGUVFGcklnVU5BQXNMSUFGQkFXb2hBd3NnQ0VFQmF5RUhJQUFvQXRnQklRRUNRQ0FBS0FJa0lnaEJBVTRFUUNBQklBaEIyQUJzYWlFRlFRQWhBZ05BSUFNZ0FTZ0NBRVlOQWlBQlFkZ0FhaUVCSUFKQkFXb2lBaUFJUncwQUN5QUZJUUVMSUFBb0FnQWlBaUFETmdJWUlBSkJCRFlDRkNBQUlBQW9BZ0FvQWdBUkFBQUxJQUFnQkVFQ2RHb2dBVFlDMkFJZ0J3Ui9JQXBCQVdvRklBQWdCaWdDREJFQkFFVUVRRUVBSVFFTUVRc2dCaWdDQkNFSElBWW9BZ0FMSVFVZ0FTQUZMUUFBSWdKQkQzRTJBaGdnQVNBQ1FRUjJOZ0lVSUFBb0FnQWlBaUFCS0FJQU5nSVlJQUlnQVNnQ0ZEWUNIQ0FCS0FJWUlRRWdBa0hxQURZQ0ZDQUNJQUUyQWlBZ0FFRUJJQUlvQWdRUkFnQWdCVUVCYWlFS0lBZEJBV3NoQ0NBRVFRRnFJZ1FnQzBjTkFBdEJBQ0VDQ3lBSVJRUkFJQUFnQmlnQ0RCRUJBRVVFUUVFQUlRRU1Ed3NnQmlnQ0FDRUtJQVlvQWdRaENBc2dBQ0FLTFFBQU5nS2NBeUFBQW44Z0NrRUJhaUFJUVFGcklnTU5BQm9nQUNBR0tBSU1FUUVBUlFSQVFRQWhBUXdQQ3lBR0tBSUVJUU1nQmlnQ0FBc2lCQzBBQURZQ29BTWdBQUovSUFSQkFXb2dBMEVCYXlJRkRRQWFJQUFnQmlnQ0RCRUJBRVVFUUVFQUlRRU1Ed3NnQmlnQ0JDRUZJQVlvQWdBTElnTXRBQUFpQkVFUGNUWUNxQU1nQUNBRVFRUjJOZ0trQXlBQUtBSUFJZ1FnQUNnQ25BTTJBaGdnQkNBQUtBS2dBellDSENBRUlBQW9BcVFETmdJZ0lBUWdBQ2dDcUFNMkFpUWdCRUhyQURZQ0ZFRUJJUUVnQUVFQklBUW9BZ1FSQWdBZ0FDZ0MwQU5CQURZQ0ZDQUNSUVJBSUFBZ0FDZ0NrQUZCQVdvMkFwQUJDeUFHSUFWQkFXczJBZ1FnQmlBRFFRRnFOZ0lBSUFCQkFEWUN1QU1NRFFzZ0FDZ0NBQ0lDUWRjQU5nSVVJQUJCQVNBQ0tBSUVFUUlBSUFCQkFEWUN1QU5CQWlFQkRBd0xJQUFvQWhnaUJTZ0NCQ0lCUlFSQUlBQWdCU2dDREJFQkFFVUVRRUVBSVFFTURRc2dCU2dDQkNFQkN5QUZLQUlBSWdJdEFBQWhCQUovSUFKQkFXb2dBVUVCYXlJRERRQWFJQUFnQlNnQ0RCRUJBRVVFUUVFQUlRRU1EUXNnQlNnQ0JDRURJQVVvQWdBTElnRkJBV29oQWlBRFFRRnJJUU1nQVMwQUFDQUVRUWgwY2lJRVFRSnJJUUVnQkVFRFR3UkFBMEFnQVNFRUlBTkZCRUFnQUNBRktBSU1FUUVBUlFSQVFRQWhBUXdQQ3lBRktBSUVJUU1nQlNnQ0FDRUNDeUFDTFFBQUlRRUNmeUFDUVFGcUlBTkJBV3NpQncwQUdpQUFJQVVvQWd3UkFRQkZCRUJCQUNFQkRBOExJQVVvQWdRaEJ5QUZLQUlBQ3lJRExRQUFJUUlnQUNnQ0FDSUdJQUUyQWhnZ0JrSFJBRFlDRkNBQUtBSUFJQUkyQWh3Z0FFRUJJQUFvQWdBb0FnUVJBZ0FDUUFKQUFrQWdBVUVnVHdSQUlBQW9BZ0FpQmlBQk5nSVlJQVpCSFRZQ0ZDQUFJQUFvQWdBb0FnQVJBQUFNQVFzZ0FVRVFTUTBCQ3lBQUlBRnFJQUk2QVBnQkRBRUxJQUFnQVdvaUFTQUNRUVIySWdZNkFQZ0JJQUVnQWtFUGNTSUJPZ0RvQVNBQklBWk5EUUFnQUNnQ0FDSUJJQUkyQWhnZ0FVRWVOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQUFBc2dBMEVCYWlFQ0lBZEJBV3NoQXlBRVFRSnJJUUVnQkVFQ1NnMEFDd3NnQVFSQUlBQW9BZ0FpQkVFTU5nSVVJQUFnQkNnQ0FCRUFBQXNnQlNBRE5nSUVJQVVnQWpZQ0FBd01DeUFBS0FJWUlnWW9BZ1FpQVVVRVFDQUFJQVlvQWd3UkFRQkZEUW9nQmlnQ0JDRUJDeUFHS0FJQUlnSXRBQUFoQkFKL0lBSkJBV29nQVVFQmF5SUJEUUFhSUFBZ0JpZ0NEQkVCQUVVTkNpQUdLQUlFSVFFZ0JpZ0NBQXNpQWtFQmFpRURJQUZCQVdzaEFTQUNMUUFBSUFSQkNIUnlJZ0pCQW1zaEJTQUNRUk5QQkVBRFFDQUJSUVJBSUFBZ0JpZ0NEQkVCQUVVTkRDQUdLQUlBSVFNZ0JpZ0NCQ0VCQ3lBQUtBSUFJZ0lnQXkwQUFDSUlOZ0lZSUFKQjBnQTJBaFJCQVNFQ0lBQkJBU0FBS0FJQUtBSUVFUUlBUVFBaEJDQUpRUUE2QUlBQ0lBTkJBV29oQXlBQlFRRnJJUUVEUUNBQlJRUkFJQUFnQmlnQ0RCRUJBRVVORFNBR0tBSUFJUU1nQmlnQ0JDRUJDeUFKUVlBQ2FpQUNhaUFETFFBQUlnYzZBQUFnQTBFQmFpRURJQUZCQVdzaEFTQUVJQWRxSVFRZ0FrRUJhaUlDUVJGSERRQUxJQUFvQWdBaUFpQUpMUUNCQWpZQ0dDQUNJQWt0QUlJQ05nSWNJQUlnQ1MwQWd3STJBaUFnQWlBSkxRQ0VBallDSkNBQ0lBa3RBSVVDTmdJb0lBSWdDUzBBaGdJMkFpd2dBaUFKTFFDSEFqWUNNQ0FKTFFDSUFpRUhJQUpCMkFBMkFoUWdBaUFITmdJMElBQkJBaUFDS0FJRUVRSUFJQUFvQWdBaUFpQUpMUUNKQWpZQ0dDQUNJQWt0QUlvQ05nSWNJQUlnQ1MwQWl3STJBaUFnQWlBSkxRQ01BallDSkNBQ0lBa3RBSTBDTmdJb0lBSWdDUzBBamdJMkFpd2dBaUFKTFFDUEFqWUNNQ0FKTFFDUUFpRUhJQUpCMkFBMkFoUWdBaUFITmdJMElBQkJBaUFDS0FJRUVRSUFJQVJCZ0FKTlFRQWdCVUVSYXlJRklBUk9HMFVFUUNBQUtBSUFJZ0pCQ1RZQ0ZDQUFJQUlvQWdBUkFBQUxRUUFoQWlBSlFRQkJnQUlRT3lFSElBUUVRQU5BSUFGRkJFQWdBQ0FHS0FJTUVRRUFSUTBPSUFZb0FnQWhBeUFHS0FJRUlRRUxJQUlnQjJvZ0F5MEFBRG9BQUNBRFFRRnFJUU1nQVVFQmF5RUJJQUpCQVdvaUFpQUVSdzBBQ3dzZ0FDQUlRUkJySWdKQkFuUnFRY1FCYWlBQUlBaEJBblJxUWJRQmFpQUlRUkJ4SWdzYklRb2dBaUFJSUFzYklnSkJCRThFUUNBQUtBSUFJZ2dnQWpZQ0dDQUlRUjgyQWhRZ0FDQUFLQUlBS0FJQUVRQUFDeUFGSUFScklRVWdDaWdDQUNJQ1JRUkFJQUJCQUVHWUFpQUFLQUlFS0FJQUVRUUFJZ0pCQURZQ2xBSWdDaUFDTmdJQUN5QUNJQWNwQTRBQ053SUFJQUlnQnlrRGlBSTNBZ2dnQWlBSExRQ1FBam9BRUNBS0tBSUFRUkZxSUFkQmdBSVFQeG9nQlVFUVNnMEFDd3NnQlFSQUlBQW9BZ0FpQWtFTU5nSVVJQUFnQWlnQ0FCRUFBQXNnQmlBQk5nSUVJQVlnQXpZQ0FBd0xDeUFBS0FJWUlnWW9BZ1FpQVVVRVFDQUFJQVlvQWd3UkFRQkZCRUJCQUNFQkRBc0xJQVlvQWdRaEFRc2dCaWdDQUNJQ0xRQUFJUVVDZnlBQ1FRRnFJQUZCQVdzaUF3MEFHaUFBSUFZb0Fnd1JBUUJGQkVCQkFDRUJEQXNMSUFZb0FnUWhBeUFHS0FJQUN5SUJRUUZxSVFJZ0EwRUJheUVFSUFFdEFBQWdCVUVJZEhJaUFVRUNheUVESUFGQkEwOEVRQU5BSUFSRkJFQWdBQ0FHS0FJTUVRRUFSUVJBUVFBaEFRd05DeUFHS0FJRUlRUWdCaWdDQUNFQ0N5QUNMUUFBSVFVZ0FDZ0NBQ0lCUWRNQU5nSVVJQUVnQlVFUGNTSUJOZ0lZSUFBb0FnQWdCVUVFZGlJS05nSWNJQUJCQVNBQUtBSUFLQUlFRVFJQUlBRkJCRThFUUNBQUtBSUFJZ1VnQVRZQ0dDQUZRU0EyQWhRZ0FDQUFLQUlBS0FJQUVRQUFDeUFBSUFGQkFuUnFJZ1VvQXFRQklnRkZCRUFnQUVFQVFZUUJJQUFvQWdRb0FnQVJCQUFpQVVFQU5nS0FBU0FGSUFFMkFxUUJDeUFEUVFGcklRc0NRQUpBQWtBQ1FBSi9JQW9FUUVFQUlRVWdBMEdBQVVvTkFnTkFJQUVnQlVFQmRDSURha0VCT3dFQUlBRWdBMEVDY21wQkFUc0JBQ0FCSUFOQkJISnFRUUU3QVFBZ0FTQURRUVp5YWtFQk93RUFJQUVnQTBFSWNtcEJBVHNCQUNBQklBTkJDbkpxUVFFN0FRQWdBU0FEUVF4eWFrRUJPd0VBSUFFZ0EwRU9jbXBCQVRzQkFDQUZRUWhxSWdWQndBQkhEUUFMSUF0QkFYVU1BUXRCQUNFRklBTkJ3QUJLRFFFRFFDQUJJQVZCQVhRaUEycEJBVHNCQUNBQklBTkJBbkpxUVFFN0FRQWdBU0FEUVFSeWFrRUJPd0VBSUFFZ0EwRUdjbXBCQVRzQkFDQUJJQU5CQ0hKcVFRRTdBUUFnQVNBRFFRcHlha0VCT3dFQUlBRWdBMEVNY21wQkFUc0JBQ0FCSUFOQkRuSnFRUUU3QVFBZ0JVRUlhaUlGUWNBQVJ3MEFDeUFMQ3lFSVFjQzVBaUVIQWtBQ1FBSkFBa0FDUUFKQUlBaEJCR3NPTGdVSEJ3Y0hBQWNIQndjSEJ3RUhCd2NIQndjSEJ3SUhCd2NIQndjSEJ3Y0hBd2NIQndjSEJ3Y0hCd2NIQndRSEMwSFF1QUloQnd3RUMwSFF0d0loQnd3REMwR2d0Z0loQnd3Q0MwSFF0QUloQnd3QkMwSEFzZ0loQndzZ0FrRUJhaUVDSUFSQkFXc2hCQXdDQ3lBQ1FRRnFJUUlnQkVFQmF5RUVRY0FBSVFoQmdMQUNJUWNNQVFzZ0FrRUJhaUVDSUFSQkFXc2hCRUdBc0FJaEJ5QUlRUUZJRFFFTFFRQWhBd05BQW44Z0NnUkFJQVJGQkVBZ0FDQUdLQUlNRVFFQVJRUkFRUUFoQVF3UkN5QUdLQUlFSVFRZ0JpZ0NBQ0VDQ3lBQ0xRQUFJUVVDZnlBQ1FRRnFJQVJCQVdzaUJBMEFHaUFBSUFZb0Fnd1JBUUJGQkVCQkFDRUJEQkVMSUFZb0FnUWhCQ0FHS0FJQUN5SUNMUUFBSUFWQkNIUnlEQUVMSUFSRkJFQWdBQ0FHS0FJTUVRRUFSUVJBUVFBaEFRd1FDeUFHS0FJRUlRUWdCaWdDQUNFQ0N5QUNMUUFBQ3lFRklBRWdCeUFEUVFKMGFpZ0NBRUVCZEdvZ0JUc0JBQ0FDUVFGcUlRSWdCRUVCYXlFRUlBTkJBV29pQXlBSVJ3MEFDd3RCQUNFSEFrQWdBQ2dDQUNJREtBSm9RUUpJRFFBRFFDQURJQUVnQjBFQmRDSUZhaThCQURZQ0dDQURJQUVnQlVFQ2Ntb3ZBUUEyQWh3Z0F5QUJJQVZCQkhKcUx3RUFOZ0lnSUFNZ0FTQUZRUVp5YWk4QkFEWUNKQ0FESUFFZ0JVRUljbW92QVFBMkFpZ2dBeUFCSUFWQkNuSnFMd0VBTmdJc0lBTWdBU0FGUVF4eWFpOEJBRFlDTUNBQklBVkJEbkpxTHdFQUlRVWdBMEhmQURZQ0ZDQURJQVUyQWpRZ0FFRUNJQU1vQWdRUkFnQWdCMEUzU3cwQklBZEJDR29oQnlBQUtBSUFJUU1NQUFzQUN5QUxJQWhySUFoQkFDQUtHMnNpQTBFQVNnMEFDd3NnQXdSQUlBQW9BZ0FpQVVFTU5nSVVJQUFnQVNnQ0FCRUFBQXNnQmlBRU5nSUVJQVlnQWpZQ0FBd0tDeUFBS0FJWUlnSW9BZ1FpQTBVRVFDQUFJQUlvQWd3UkFRQkZCRUJCQUNFQkRBb0xJQUlvQWdRaEF3c2dBaWdDQUNJRUxRQUFJUUVDZnlBRVFRRnFJQU5CQVdzaUF3MEFHaUFBSUFJb0Fnd1JBUUJGQkVCQkFDRUJEQW9MSUFJb0FnUWhBeUFDS0FJQUN5RUVJQU5CQVdzaEF5QUVMUUFBSUFGQkNIUnlRUVJIQkVBZ0FDZ0NBQ0lCUVF3MkFoUWdBQ0FCS0FJQUVRQUFDeUFEQkg4Z0JFRUJhZ1VnQUNBQ0tBSU1FUUVBUlFSQVFRQWhBUXdLQ3lBQ0tBSUVJUU1nQWlnQ0FBc2lCQzBBQUNFQkFuOGdCRUVCYWlBRFFRRnJJZ1FOQUJvZ0FDQUNLQUlNRVFFQVJRUkFRUUFoQVF3S0N5QUNLQUlFSVFRZ0FpZ0NBQXNpQlMwQUFDRURJQUFvQWdBaUJrSFVBRFlDRkNBR0lBTWdBVUVJZEhJaUFUWUNHQ0FBUVFFZ0FDZ0NBQ2dDQkJFQ0FDQUFJQUUyQXBnQ0lBSWdCRUVCYXpZQ0JDQUNJQVZCQVdvMkFnQU1DUXNnQUNnQ0dDSUJLQUlFSVFNZ0FTZ0NBQ0VDSUFBb0F0QURLQUlRUlFSQUlBQW9BZ0FpQkVFOE5nSVVJQVJCR0dwQjRib0NRZEFBRUQ4YUlBQWdBQ2dDQUNnQ0FCRUFBQXNDUUFKQUlBQW9BaVJCQTBnTkFDQURSUVJBSUFBZ0FTZ0NEQkVCQUVVRVFFRUFJUUVNQ3dzZ0FTZ0NCQ0VESUFFb0FnQWhBZ3NnQWkwQUFDRUVBbjhnQWtFQmFpQURRUUZySWdNTkFCb2dBQ0FCS0FJTUVRRUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUFzaEFpQURRUUZySVFNZ0FpMEFBQ0FFUVFoMGNrRVlSd1JBSUFBb0FnQWlCRUVNTmdJVUlBQWdCQ2dDQUJFQUFBc2dBd1IvSUFKQkFXb0ZJQUFnQVNnQ0RCRUJBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBTElRSWdBMEVCYXlFRElBSXRBQUJCRFVjRVFDQUFLQUlBSWdSQnhnQTJBaFFnQkNBQUtBSzRBellDR0NBQUlBQW9BZ0FvQWdBUkFBQUxJQU1FZnlBQ1FRRnFCU0FBSUFFb0Fnd1JBUUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUN5SUNMUUFBSVFRQ2Z5QUNRUUZxSUFOQkFXc2lBdzBBR2lBQUlBRW9BZ3dSQVFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISkIvd0ZIRFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBUUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUpCQVdvaEJDQURRUUZySVFNZ0FpMEFBRUVEUndSQUlBUWhBZ3dCQ3lBRFJRUkFJQUFnQVNnQ0RCRUJBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBaEJBc2dCRUVCYWlFQ0lBTkJBV3NoQXlBQUtBTFlBU0lGS0FKWUlBUXRBQUJIRFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBUUJGQkVCQkFDRUJEQXNMSUFBb0F0Z0JJUVVnQVNnQ0JDRURJQUVvQWdBaEFnc2dBa0VCYWlFRUlBTkJBV3NoQXlBRktBSUFJQUl0QUFCSEJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUVBUlFSQVFRQWhBUXdMQ3lBQUtBTFlBU0VGSUFFb0FnUWhBeUFCS0FJQUlRUUxJQVJCQVdvaEFpQURRUUZySVFNZ0JTZ0NzQUVnQkMwQUFFY05BQ0FEUlFSQUlBQWdBU2dDREJFQkFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FrRUJhaUVFSUFOQkFXc2hBeUFDTFFBQVFZQUJSd1JBSUFRaEFnd0JDeUFEUlFSQUlBQWdBU2dDREJFQkFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQkFzZ0JDMEFBQ0VGQW44Z0JFRUJhaUFEUVFGcklnTU5BQm9nQUNBQktBSU1FUUVBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FBc2lCRUVCYWlFQ0lBTkJBV3NoQXlBRUxRQUFJQVZCQ0hSeURRQWdBMFVFUUNBQUlBRW9BZ3dSQVFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFJUUlMSUFJdEFBQWhCQUovSUFKQkFXb2dBMEVCYXlJRERRQWFJQUFnQVNnQ0RCRUJBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBTElnVkJBV29oQWlBRFFRRnJJUU1nQlMwQUFDQUVRUWgwY2cwQUlBTkZCRUFnQUNBQktBSU1FUUVBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUNDeUFDUVFGcUlRUWdBMEVCYXlFRElBSXRBQUFFUUNBRUlRSU1BUXNnQTBVRVFDQUFJQUVvQWd3UkFRQkZCRUJCQUNFQkRBc0xJQUVvQWdRaEF5QUJLQUlBSVFRTElBUXRBQUFoQlFKL0lBUkJBV29nQTBFQmF5SUREUUFhSUFBZ0FTZ0NEQkVCQUVVRVFFRUFJUUVNQ3dzZ0FTZ0NCQ0VESUFFb0FnQUxJZ1JCQVdvaEFpQURRUUZySVFNZ0JDMEFBQ0FGUVFoMGNrRUJSdzBBSUFORkJFQWdBQ0FCS0FJTUVRRUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUNFQ0N5QUNMUUFBSVFRQ2Z5QUNRUUZxSUFOQkFXc2lBdzBBR2lBQUlBRW9BZ3dSQVFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISU5BQ0FEUlFSQUlBQWdBU2dDREJFQkFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FrRUJhaUVFSUFOQkFXc2hBeUFDTFFBQUJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUVBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUVDeUFFTFFBQUlRVUNmeUFFUVFGcUlBTkJBV3NpQXcwQUdpQUFJQUVvQWd3UkFRQkZCRUJCQUNFQkRBc0xJQUVvQWdRaEF5QUJLQUlBQ3lJRVFRRnFJUUlnQTBFQmF5RURJQVF0QUFBZ0JVRUlkSEpCQVVjTkFDQURSUVJBSUFBZ0FTZ0NEQkVCQUVVRVFFRUFJUUVNQ3dzZ0FTZ0NCQ0VESUFFb0FnQWhBZ3NnQWkwQUFDRUVBbjhnQWtFQmFpQURRUUZySWdNTkFCb2dBQ0FCS0FJTUVRRUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUFzaUJVRUJhaUVDSUFOQkFXc2hBeUFGTFFBQUlBUkJDSFJ5UlEwQkN5QUFLQUlBSWdSQkhEWUNGQ0FBSUFRb0FnQVJBQUFMSUFCQkFUWUNzQUlnQVNBRE5nSUVJQUVnQWpZQ0FBd0lDeUFBSUFBb0F0QURJQUZCQW5ScVFlQUdheWdDQUJFQkFBMEhRUUFoQVF3R0N5QUFJQUFvQXRBREtBSWNFUUVBRFFaQkFDRUJEQVVMSUFBb0FnQWlBaUFCTmdJWUlBSkIzZ0EyQWhRZ0FFRUJJQUFvQWdBb0FnUVJBZ0FNQlFzZ0FDZ0NHQ0lFS0FJRUlnTkZCRUFnQUNBRUtBSU1FUUVBUlFSQVFRQWhBUXdGQ3lBRUtBSUVJUU1MSUFRb0FnQWlBaTBBQUNFQkFuOGdBa0VCYWlBRFFRRnJJZ0lOQUJvZ0FDQUVLQUlNRVFFQVJRUkFRUUFoQVF3RkN5QUVLQUlFSVFJZ0JDZ0NBQXNpQlMwQUFDRURJQUFvQWdBaUJrSGRBRFlDRkNBR0lBQW9BcmdETmdJWUlBQW9BZ0FnQXlBQlFRaDBjaUlCUVFKcklnTTJBaHdnQUVFQklBQW9BZ0FvQWdRUkFnQWdCQ0FDUVFGck5nSUVJQVFnQlVFQmFqWUNBQ0FCUVFOSkRRUWdBQ0FESUFBb0FoZ29BaEFSQWdBTUJBc2dBQ2dDQUNJQ0lBRTJBaGdnQWtIR0FEWUNGQ0FBSUFBb0FnQW9BZ0FSQUFBTUF3dEJBQ0VCSUFCQkFVRUFRUUFRN0FJTkFnd0JDMEVBSVFFTElBbEJvQUpxSkFBZ0FROExRUUFoQVNBQVFRQTJBcmdEREFBTEFBdVNBUUVDZndKQUFrQWdBQ2dDdUFNaUFRUi9JQUVGSUFBUXR3UkZEUUVnQUNnQ3VBTUxJQUFvQXRBREtBSVVJZ0ZCMEFGcVJnUkFJQUFvQWdBaUFpQUJOZ0lZSUFKQjVBQTJBaFFnQUVFRElBQW9BZ0FvQWdRUkFnQWdBRUVBTmdLNEF3d0NDeUFBSUFFZ0FDZ0NHQ2dDRkJFREFBMEJDMEVBRHdzZ0FDZ0MwQU1pQUNBQUtBSVVRUUZxUVFkeE5nSVVRUUVMMlFFQkJuOGdBQ2dDR0NJQktBSUVJZ0pGQkVBZ0FDQUJLQUlNRVFFQVJRUkFRUUFQQ3lBQktBSUVJUUlMSUFFb0FnQWlBeTBBQUNFRUFuOGdBMEVCYWlBQ1FRRnJJZ1VOQUJvZ0FDQUJLQUlNRVFFQVJRUkFRUUFQQ3lBQktBSUVJUVVnQVNnQ0FBc2lBaTBBQUNFRElBQW9BZ0FpQmtIZEFEWUNGQ0FHSUFBb0FyZ0ROZ0lZSUFBb0FnQWdBeUFFUVFoMGNpSURRUUpySWdRMkFod2dBRUVCSUFBb0FnQW9BZ1FSQWdBZ0FTQUZRUUZyTmdJRUlBRWdBa0VCYWpZQ0FDQURRUU5QQkVBZ0FDQUVJQUFvQWhnb0FoQVJBZ0FMUVFFTHZRSUJBWDhnQUNBQVFRQkJyQUVnQUNnQ0JDZ0NBQkVFQUNJQk5nTFFBeUFCUWdBM0FtQWdBVUg1QURZQ0hDQUJRZm9BTmdJSUlBRkIrd0EyQWdRZ0FVSDhBRFlDQUNBQlFRQTJBbWdnQVVINUFEWUNKQ0FCUWZrQU5nSW9JQUZDQURjQ2JDQUJRZmtBTmdJc0lBRkIrUUEyQWpBZ0FVSUFOd0owSUFGQitRQTJBalFnQVVINUFEWUNPQ0FCUWdBM0Fud2dBVUg1QURZQ1BDQUJRUUEyQW9RQklBRkIrUUEyQWtBZ0FVSUFOd0tJQVNBQlFma0FOZ0pFSUFGQitRQTJBa2dnQVVINUFEWUNUQ0FCUWZrQU5nSlFJQUZDQURjQ2tBRWdBVUg1QURZQ1ZDQUJRZ0EzQXBnQklBRkJBRFlDb0FFZ0FVSDVBRFlDWENBQlFmMEFOZ0lnSUFGQi9RQTJBbGdnQUVFQU5nSzRBeUFBUVFBMkFwQUJJQUJCQURZQzJBRWdBQ2dDMEFNaUFFRUFOZ0trQVNBQVFRQTJBaGdnQUVJQU53SU1DNW9DQVFoL0lBQW9BZ0FpQkNBQUtBSzRBeUlDTmdJWUlBUkIvQUEyQWhRZ0FDZ0NBQ0FCTmdJY0lBQkJmeUFBS0FJQUtBSUVFUUlBSUFGQkJtcEJCM0ZCMEFGeUlRUWdBVUVCYTBFSGNVSFFBWEloQlNBQlFRSnFRUWR4UWRBQmNpRUdJQUZCQVdwQkIzRkIwQUZ5SVFFQ1FBTkFJQUVnQWtZZ0FrRjRjVUhRQVVkeUlBSWdCa1p5SVFkQkFrRUJJQUlnQkVZYklRZ0NRQU5BQWtBZ0FDZ0NBQ0lESUFJMkFoZ2dBMEhqQURZQ0ZDQUFLQUlBUVFKQkF5QUNRY0FCU0NJREd5SUpJQWxCQWlBSUlBSWdCVVliSUFjYklBTWJJZ00yQWh3Z0FFRUVJQUFvQWdBb0FnUVJBZ0FnQTBFQmF3NERBZ0FFQVFzTElBQVF0d1JGQkVCQkFBOExJQUFvQXJnRElRSU1BUXNMSUFCQkFEWUN1QU1MUVFFTHpRRUJCSDhqQUVFUWF5SUVKQUFnQUNnQ0ZDSURRYzBCUndSQUlBQW9BZ0FpQlNBRE5nSVlJQVZCRlRZQ0ZDQUFJQUFvQWdBb0FnQVJBQUFMQWtBZ0FDZ0NqQUVpQlNBQUtBSjBJZ1pQQkVBZ0FDZ0NBQ0lCUWY0QU5nSVVJQUJCZnlBQktBSUVFUUlBUVFBaEFRd0JDeUFBS0FJSUlnTUVRQ0FESUFZMkFnZ2dBeUFGTmdJRUlBQWdBeWdDQUJFQUFBc2dCRUVBTmdJTUlBQWdBU0FFUVF4cUlBSWdBQ2dDd0FNb0FnUVJCZ0FnQUNBRUtBSU1JZ0VnQUNnQ2pBRnFOZ0tNQVFzZ0JFRVFhaVFBSUFFTHRnSUNDbndCZjBGL0lRMGdBU3NEV0NBQ0t3TUFJZ1VnQVNzRFFDSUVvaUFDS3dNSUlnY2dBU3NEU0tLZ0lBSXJBeEFpQ0NBQkt3TlFvcUNnSWdORUFBQUFBQUFBQUFCaUJIOGdBU3NESUNFSklBRXJBeWdoQ2lBQkt3TXdJUXNnQVNzRE9DRU1JQUFnQVNzREFDSUdJQU9pSUFFckF4Z2dCaUFGb2lBQkt3TUlJQWVpb0NBQkt3TVFJQWlpb0tBaUJpQUVvcUVnQXlBRG9pSUVvemtEQUNBQUlBTWdBU3NEQ0tJZ0JpQUJLd05Jb3FFZ0JLTTVBd2dnQUNBRElBRXJBeENpSUFZZ0FTc0RVS0toSUFTak9RTVFJQUFnQXlBQkt3TWdvaUFNSUFVZ0NhSWdCeUFLb3FBZ0NDQUxvcUNnSWdVZ0FTc0RRS0toSUFTak9RTVlJQUFnQXlBQkt3TW9vaUFGSUFFckEwaWlvU0FFb3prRElDQUFJQU1nQVNzRE1LSWdCU0FCS3dOUW9xRWdCS001QXloQkFBVkJmd3NMK0FFQkJIOGdBQ2dDRkVITUFVY0VRQ0FBSUFBb0Fyd0RLQUlBRVFBQUlBQkJ6QUUyQWhRZ0FFRUFOZ0tNQVFzQ1FDQUFLQUs4QXlnQ0NBUkFJQUJCakFGcUlRUWdBQ2dDakFFaEFRTkFJQUFvQW5RaUFpQUJTd1JBSUFBb0FnZ2lBd1JBSUFNZ0FqWUNDQ0FESUFFMkFnUWdBQ0FES0FJQUVRQUFJQUFvQW93QklRRUxRUUFoQWlBQVFRQWdCRUVBSUFBb0FzQURLQUlFRVFZQUlBRWdBQ2dDakFFaUFVY05BUXdEQ3lBQUlBQW9BcndES0FJRUVRQUFJQUFnQUNnQ3ZBTW9BZ0FSQUFCQkFDRUJJQUJCQURZQ2pBRWdBQ2dDdkFNb0FnZ05BQXNMSUFCQnpnRkJ6UUVnQUNnQ1JCczJBaFJCQVNFQ0N5QUNDL3NCQVFOL0FrQUNRQUpBQWtBQ1FDQUFLQUlVSWdGQnlnRnJEZ01BQVFNQ0N5QUFFTGdPSUFBb0FrQUVRQ0FBUWM4Qk5nSVVRUUVQQ3lBQVFjc0JOZ0lVQ3dKQUlBQW9Bc3dES0FJUVJRMEFJQUFvQWdnaEFRTkFJQUVFUUNBQUlBRW9BZ0FSQUFBTEFrQWdBQ0FBS0FMTUF5Z0NBQkVCQUNJQ0RnTUZBQUlBQ3lBQUtBSUlJZ0ZGSUFKQmZYRkJBVWR5RFFBZ0FTQUJLQUlFUVFGcUlnSTJBZ1FnQWlBQktBSUlJZ05JRFFBZ0FTQUFLQUxNQWlBRGFqWUNDQXdBQ3dBTElBQWdBQ2dDa0FFMkFwZ0JEQUVMSUFBb0FnQWlBaUFCTmdJWUlBSkJGVFlDRkNBQUlBQW9BZ0FvQWdBUkFBQUxJQUFRc0E4aEFnc2dBZ3ZTQVFFQ2Z3SkFBa0FnQUNnQ0ZDSUJRYzBCYTBFQlN3MEFJQUFvQWtBTkFDQUFLQUtNQVNBQUtBSjBTUVJBSUFBb0FnQWlBVUhGQURZQ0ZDQUFJQUVvQWdBUkFBQUxJQUFnQUNnQ3ZBTW9BZ1FSQUFBZ0FFSFNBVFlDRkF3QkN3SkFBa0FnQVVIUEFXc09CQUFCQVFJQkN5QUFRZElCTmdJVURBRUxJQUFvQWdBaUFpQUJOZ0lZSUFKQkZUWUNGQ0FBSUFBb0FnQW9BZ0FSQUFBTEFrQURRQ0FBS0FMTUF5SUJLQUlVRFFFZ0FDQUJLQUlBRVFFQURRQUxRUUFQQ3lBQUlBQW9BaGdvQWhnUkFBQWdBQkN1QjBFQkM3d0ZBUVYvUVFFaEFRSkFBa0FDUUFKQUFrQWdBQ2dDRkNJQ1FjZ0JhdzRMQUFFRUFnSUNBZ0lDQXdJREN5QUFJQUFvQXN3REtBSUVFUUFBSUFBZ0FDZ0NHQ2dDQ0JFQUFDQUFRY2tCTmdJVUN5QUFJQUFvQXN3REtBSUFFUUVBSWdGQkFVY05BaUFBS0FJa0lnRWhBd0pBQWtBQ1FBSkFJQUZCQVdzT0JBTUNBQUVDQ3lBQUtBTFlBU0lDS0FLd0FTRUVRUUloQXlBQ0tBSUFJZ1ZCQVVjaUFTQUNLQUpZSWdKQkFrZHlJQVJCQTBkeVJRUkFRUU1oQVF3REN5QUJJQUpCSWtkeVJRUkFRUWNoQVNBRVFTTkdEUU1MSUFWQjBnQkhJQUpCeHdCSGNpQUVRY0lBUjNKRkJFQkJBaUVCREFNTElBVkI4Z0JISUFKQjV3Qkhja1VFUUVFR0lRRWdCRUhpQUVZTkF3c2dBQ2dDbkFJRVFFRURJUUVNQXdzZ0FDZ0NxQUlFUUVFQ0lRRUNRQUpBSUFBdEFLd0NJZ0lPQWdVQUFRdEJBeUVCREFRTElBQW9BZ0FpQVNBQ05nSVlJQUZCOUFBMkFoUWdBRUYvSUFBb0FnQW9BZ1FSQWdCQkF5RUJEQU1MSUFBb0FnQWlBU0FGTmdJWUlBRkI4UUEyQWhRZ0FTQUVOZ0lnSUFFZ0FqWUNIQ0FBUVFFZ0FTZ0NCQkVDQUVFRElRRU1BZ3RCQkNFRElBQW9BcWdDUlFSQVFRUWhBUXdDQzBFRUlRRUNRQUpBSUFBdEFLd0NJZ0lPQXdNQkFBRUxRUVVoQVF3Q0N5QUFLQUlBSWdFZ0FqWUNHQ0FCUWZRQU5nSVVJQUJCZnlBQUtBSUFLQUlFRVFJQVFRVWhBUXdCQzBFQUlRRkJBQ0VEQ3lBQUlBTTJBaXdnQUNBQk5nSW9JQUJCQURZQ2lBRWdBRUdBQWpZQ1lDQUFRb0tBZ0lBUU53TllJQUJDQVRjRFVDQUFRb0NBZ0lBUU53TklJQUJDQURjRFFDQUFRb0NBZ0lDQWdJRDRQemNET0NBQVFRQTJBbXdnQUVJQU53SmtJQUJCeWdFMkFoUWdBQ0FBS0FLc0F5SUJOZ0kwSUFBZ0FUWUNNRUVCRHdzZ0FDQUFLQUxNQXlnQ0FCRUJBQThMSUFBb0FnQWlBU0FDTmdJWUlBRkJGVFlDRkNBQUlBQW9BZ0FvQWdBUkFBQkJBQ0VCQ3lBQkMyUUJBbjhnQUNnQ0ZDSUNRWDV4UWNnQlJ3UkFJQUFvQWdBaUF5QUNOZ0lZSUFOQkZUWUNGQ0FBSUFBb0FnQW9BZ0FSQUFBTElBQVFzdzhpQWtFQ1JnUkFJQUVFUUNBQUtBSUFJZ0ZCTlRZQ0ZDQUFJQUVvQWdBUkFBQUxJQUFRcmdjTElBSUxCd0FnQUJDdEJ3djBBUUFnQUVFQU5nSUVJQUZCMmdCSEJFQWdBQ2dDQUVLTmdJQ0FvQXMzQWhRZ0FDZ0NBQ0FCTmdJY0lBQWdBQ2dDQUNnQ0FCRUFBQXNnQWtIb0EwY0VRQ0FBS0FJQVFwYUFnSUNBUFRjQ0ZDQUFLQUlBSUFJMkFod2dBQ0FBS0FJQUtBSUFFUUFBQ3lBQUtBSUFJUUVnQUNnQ0RDRUNJQUJCQkdwQkFFSGtBeEE3R2lBQVFRRTJBaEFnQUNBQ05nSU1JQUFnQVRZQ0FDQUFFTFVPSUFCQkFEWUN1QUlnQUVFQU5nSVlJQUJCQURZQ0NDQUFRZ0EzQXFRQklBQkNBRGNDckFFZ0FFSUFOd0swQVNBQVFnQTNBcndCSUFCQ0FEY0N4QUVnQUVJQU53TE1BU0FBRUt3UElBQVF1dzhnQUVISUFUWUNGQXZCRFFFSWYwRUNJUUVDUUNBQUtBTE1BeUlGS0FJVURRQURRQUpBSUFBQ2Z3SkFBa0FnQUNBQUtBTFFBeWdDQkJFQkFDSUJRUUZIQkVBZ0FVRUNSdzBHSUFWQkFUWUNGQ0FGS0FJWVJRMEJRUUloQVNBQUtBTFFBeWdDRUVVTkJpQUFLQUlBSWdGQlBqWUNGQ0FBSUFFb0FnQVJBQUJCQWc4TEFrQUNRQUpBSUFVb0FoZ09BZ0lCQUFzZ0FDZ0MxQUloQVF3RkN3SkFJQUFvQWlCQjNQOERUQVJBSUFBb0FoeEIzZjhEU0EwQkN5QUFLQUlBUXFxQWdJREErejgzQWhRZ0FDQUFLQUlBS0FJQUVRQUFDeUFBS0FMVUFTSUJRUWhyUVFWUEJFQWdBQ2dDQUNJQ0lBRTJBaGdnQWtFUU5nSVVJQUFnQUNnQ0FDZ0NBQkVBQUFzZ0FDZ0NKQ0lEUVF0T0JFQWdBQ2dDQUNJQklBTTJBaGdnQVVFYk5nSVVJQUFvQWdCQkNqWUNIQ0FBSUFBb0FnQW9BZ0FSQUFBZ0FDZ0NKQ0VEQ3lBQVFvR0FnSUFRTndLOEFpQURRUUZPQkVBZ0FDZ0MyQUVoQVVFQUlRaEJBU0VDUVFFaEJBTkFBa0FnQVNnQ0NDSUdRUUZyUVFOTkJFQWdBU2dDRENJSFFRRnJRUVJKRFFFTElBQW9BZ0FpQWtFVE5nSVVJQUFnQWlnQ0FCRUFBQ0FBS0FJa0lRTWdBU2dDRENFSElBQW9Bc0FDSVFJZ0FTZ0NDQ0VHSUFBb0Fyd0NJUVFMSUFBZ0FpQUhJQUlnQjBvYklnSTJBc0FDSUFBZ0JDQUdJQVFnQmtvYklnUTJBcndDSUFGQjJBQnFJUUVnQ0VFQmFpSUlJQU5JRFFBTEN5QUFLQUxjQVEwQ0lBQW9BdUFCQkVBZ0FDZ0MxQUlOQXdzQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBQW9BcUFESWdGQjl3Qk1CRUFnQVE1a0FRNE9BZzRPRGc0RERnNE9EZzRPQkE0T0RnNE9EZzRPQlE0T0RnNE9EZzRPRGc0R0RnNE9EZzRPRGc0T0RnNE9CdzRPRGc0T0RnNE9EZzRPRGc0T0VRNE9EZzRPRGc0T0RnNE9EZzRPRGc0SURnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0NRNExJQUZCd2dGTUJFQWdBVUg0QUVZTkNpQUJRWThCUmcwTElBRkJxQUZIRFE0Z0FFRS9OZ0swQXlBQVFZQ3dBallDc0FNZ0FFRU5OZ0tzQTBFTkRCSUxJQUZCd3dGR0RRc2dBVUhnQVVZTkRDQUJRZjhCUncwTklBQkJQellDdEFNZ0FFR0FzQUkyQXJBRElBQkJFRFlDckFOQkVBd1JDeUFBUVFBMkFyUURJQUJCZ0xBQ05nS3dBeUFBUVFFMkFxd0RRUUVNRUFzZ0FFRUROZ0swQXlBQVFjQzVBallDc0FNZ0FFRUNOZ0tzQTBFQ0RBOExJQUJCQ0RZQ3RBTWdBRUhRdUFJMkFyQURJQUJCQXpZQ3JBTkJBd3dPQ3lBQVFRODJBclFESUFCQjBMY0NOZ0t3QXlBQVFRUTJBcXdEUVFRTURRc2dBRUVZTmdLMEF5QUFRYUMyQWpZQ3NBTWdBRUVGTmdLc0EwRUZEQXdMSUFCQkl6WUN0QU1nQUVIUXRBSTJBckFESUFCQkJqWUNyQU5CQmd3TEN5QUFRVEEyQXJRRElBQkJ3TElDTmdLd0F5QUFRUWMyQXF3RFFRY01DZ3NnQUVFL05nSzBBeUFBUVlDd0FqWUNzQU1nQUVFSk5nS3NBMEVKREFrTElBQkJQellDdEFNZ0FFR0FzQUkyQXJBRElBQkJDallDckFOQkNnd0lDeUFBUVQ4MkFyUURJQUJCZ0xBQ05nS3dBeUFBUVFzMkFxd0RRUXNNQndzZ0FFRS9OZ0swQXlBQVFZQ3dBallDc0FNZ0FFRU1OZ0tzQTBFTURBWUxJQUJCUHpZQ3RBTWdBRUdBc0FJMkFyQURJQUJCRGpZQ3JBTkJEZ3dGQ3lBQVFUODJBclFESUFCQmdMQUNOZ0t3QXlBQVFRODJBcXdEUVE4TUJBc2dBQ2dDQUNJQlFSRTJBaFFnQVNBQUtBS2NBellDR0NBQUtBSUFJQUFvQXFBRE5nSWNJQUFvQWdBZ0FDZ0NwQU0yQWlBZ0FDZ0NBQ0FBS0FLb0F6WUNKQ0FBSUFBb0FnQW9BZ0FSQUFBZ0FDZ0NKQ0VESUFBb0Fxd0REQU1MSUFVb0FoQkZCRUFnQUNnQ0FDSUJRU1EyQWhRZ0FDQUJLQUlBRVFBQUN5QUFLQUxVQWtVTkJDQUFFS29IUVFFUEMwRUNJUUVnQUNnQ2tBRWlBaUFBS0FLWUFVNE5CQ0FBSUFJMkFwZ0JEQVFMSUFCQlB6WUN0QU1nQUVHQXNBSTJBckFESUFCQkNEWUNyQU5CQ0FzaUFqWUN5QUlnQUNBQ05nTEVBaUFEUVFGT0JFQWdBQ2dDMkFFaEFVRUFJUVFEUUNBQklBSTJBaWdnQVNBQ05nSWtJQUVnQVNnQ0NDQUFLQUljYkNBQUtBSzhBaUFDYkJCck5nSWNJQUVnQVNnQ0RDQUFLQUlnYkNBQUtBS3NBeUFBS0FMQUFtd1FhellDSUNBQklBRW9BZ2dnQUNnQ0hHd2dBQ2dDdkFJUWF6WUNMQ0FCS0FJTUlBQW9BaUJzSUFBb0FzQUNFR3NoQWlBQlFRQTJBbEFnQVVFQk5nSTBJQUVnQWpZQ01DQUVRUUZxSWdRZ0FDZ0NKRTVGQkVBZ0FVSFlBR29oQVNBQUtBS3NBeUVDREFFTEN5QUFLQUtzQXlFQ0N5QUFJQUFvQWlBZ0FpQUFLQUxBQW13UWF6WUN6QUlDUUNBQUtBTFVBaUlCSUFBb0FpUk9CRUFnQUNnQzRBRkZEUUVMSUFBb0Fzd0RRUUUyQWhBTUFRc2dBQ2dDekFOQkFEWUNFQXNnQVVVRVFDQUZRUUkyQWhnTUFRc0xJQVZCQURZQ0dFRUJEd3NnQVF0REFRRi9JQUFvQXN3RElnRkJBVFlDR0NBQlFnQTNBaEFnQVVINEFEWUNBQ0FBSUFBb0FnQW9BaEFSQUFBZ0FDQUFLQUxRQXlnQ0FCRUFBQ0FBUVFBMkFxQUJDL0lGQWdOL0Jud2pBRUhnQm1zaUJDUUFJQUVnQWlzREdDQUNLd01BSUFNckF3Q2lJQUlyQXdnZ0F5c0RDQ0lJb3FBZ0Fpc0RFQ0FES3dNUUlnbWlvS0E1QXdBZ0FTQUNLd000SUFJckF5QWdBeXNEQUNJSG9pQUlJQUpCS0dvckF3Q2lvQ0FKSUFKQk1Hb3JBd0Npb0tBNUF3Z2dBU0FDS3dOWUlBY2dBaXNEUUtJZ0FrSElBR29yQXdBZ0F5c0RDQ0lJb3FBZ0NTQUNRZEFBYWlzREFLS2dvRGtERUNBRUlBZ2dBaXNEQUNJS29qa0R5QVFnQkNBSElBcWlPUVBBQkNBRUlBb2dBeXNERUNJSm9qa0QwQVFnQkNBSklBSXJBd2dpQzZJNUErZ0VJQVFnQ0NBTG9qa0Q0QVFnQkNBSElBdWlPUVBZQkNBRUlBSXJBeEFpRERrRG1BVWdCQ0FMT1FPUUJTQUVJQW81QTRnRklBUWdDU0FNb2prRGdBVWdCQ0FJSUF5aU9RUDRCQ0FFSUFjZ0RLSTVBL0FFSUFRZ0NTQUNLd01nSWdxaU9RT3dCU0FFSUFnZ0NxSTVBNmdGSUFRZ0J5QUtvamtEb0FVZ0JDQUpJQUlyQXlnaUM2STVBOGdGSUFRZ0NDQUxvamtEd0FVZ0JDQUhJQXVpT1FPNEJTQUVJQUlyQXpBaUREa0QrQVVnQkNBTE9RUHdCU0FFSUFvNUErZ0ZJQVFnQ1NBTW9qa0Q0QVVnQkNBSUlBeWlPUVBZQlNBRUlBY2dES0k1QTlBRklBUWdDU0FDS3dOQUlncWlPUU9RQmlBRUlBZ2dDcUk1QTRnR0lBUWdCeUFLb2prRGdBWWdCQ0FKSUFJckEwZ2lDNkk1QTZnR0lBUWdDQ0FMb2prRG9BWWdCQ0FISUF1aU9RT1lCaUFFSUFJckExQWlERGtEMkFZZ0JDQUxPUVBRQmlBRUlBbzVBOGdHSUFRZ0NTQU1vamtEd0FZZ0JDQUlJQXlpT1FPNEJpQUVJQWNnREtJNUE3QUdJQVFRcGc5QkFDRURBMEJCQUNFQklBTkJBMFpGQkVBRFFDQUJRUVpHUlFSQUlBRkJBM1FpQlNBQUlBTkJNR3hxYWlJR1FnQTNBd0JCQUNFQ1JBQUFBQUFBQUFBQUlRY0RRQ0FDUVF4R1JRUkFJQWNnQkVIQUJHb2dBMEhnQUd4cUlBSkJBM1JxS3dNQUlBUWdBa0V3YkdvZ0JXb3JBd0Npb0NFSElBSkJBV29oQWd3QkN3c2dCaUFIT1FNQUlBRkJBV29oQVF3QkN3c2dBMEVCYWlFRERBRUxDeUFFUWVBR2FpUUFDeHdBSUFBZ0FDZ0MxQU1vQWdnUkFBQWdBQ2dDekFOQitBQTJBZ0FMU1FBZ0FDQUFRUUJCSENBQUtBSUVLQUlBRVFRQUlnQTJBc3dESUFCQkFUWUNHQ0FBUWdBM0FoQWdBRUgxQURZQ0RDQUFRZllBTmdJSUlBQkI5d0EyQWdRZ0FFSDRBRFlDQUF1dUJ3RUZmd0ovSUFBb0Fxd0RJZ0lnQUNnQ01Hd2lBeUFBS0FJMElnUk5CRUFnQUNBQUtBSWNJQUlRYXpZQ2NFRUJJUUVnQUNnQ0lBd0JDeUFFUVFGMElBTlBCRUFnQUNBQUtBSWNRUUYwSUFJUWF6WUNjRUVDSVFFZ0FDZ0NJRUVCZEF3QkMwRURJUUVnQkVFRGJDQURUd1JBSUFBZ0FDZ0NIRUVEYkNBQ0VHczJBbkFnQUNnQ0lFRURiQXdCQ3lBRVFRSjBJQU5QQkVBZ0FDQUFLQUljUVFKMElBSVFhellDY0VFRUlRRWdBQ2dDSUVFQ2RBd0JDMEVGSVFFZ0JFRUZiQ0FEVHdSQUlBQWdBQ2dDSEVFRmJDQUNFR3MyQW5BZ0FDZ0NJRUVGYkF3QkMwRUdJUUVnQkVFR2JDQURUd1JBSUFBZ0FDZ0NIRUVHYkNBQ0VHczJBbkFnQUNnQ0lFRUdiQXdCQzBFSElRRWdCRUVIYkNBRFR3UkFJQUFnQUNnQ0hFRUhiQ0FDRUdzMkFuQWdBQ2dDSUVFSGJBd0JDeUFFUVFOMElBTlBCRUFnQUNBQUtBSWNRUU4wSUFJUWF6WUNjRUVJSVFFZ0FDZ0NJRUVEZEF3QkMwRUpJUUVnQkVFSmJDQURUd1JBSUFBZ0FDZ0NIRUVKYkNBQ0VHczJBbkFnQUNnQ0lFRUpiQXdCQzBFS0lRRWdCRUVLYkNBRFR3UkFJQUFnQUNnQ0hFRUtiQ0FDRUdzMkFuQWdBQ2dDSUVFS2JBd0JDMEVMSVFFZ0JFRUxiQ0FEVHdSQUlBQWdBQ2dDSEVFTGJDQUNFR3MyQW5BZ0FDZ0NJRUVMYkF3QkMwRU1JUUVnQkVFTWJDQURUd1JBSUFBZ0FDZ0NIRUVNYkNBQ0VHczJBbkFnQUNnQ0lFRU1iQXdCQzBFTklRRWdCRUVOYkNBRFR3UkFJQUFnQUNnQ0hFRU5iQ0FDRUdzMkFuQWdBQ2dDSUVFTmJBd0JDMEVPSVFFZ0JFRU9iQ0FEVHdSQUlBQWdBQ2dDSEVFT2JDQUNFR3MyQW5BZ0FDZ0NJRUVPYkF3QkMwRVBJUUVnQUNnQ0hDRUZJQVJCRDJ3Z0EwOEVRQ0FBSUFWQkQyd2dBaEJyTmdKd0lBQW9BaUJCRDJ3TUFRc2dBQ0FGUVFSMElBSVFhellDY0VFUUlRRWdBQ2dDSUVFRWRBc2dBQ2dDckFNUWF5RUNJQUFnQVRZQ3lBSWdBQ0FCTmdMRUFpQUFJQUkyQW5RQ1FDQUFLQUlrSWdOQkFVZ05BQ0FEUVFkeElRSWdBQ2dDMkFFaEFDQURRUUZyUVFkUEJFQWdBMEY0Y1NFREEwQWdBQ0FCTmdJb0lBQWdBVFlDSkNBQUlBRTJBcEFGSUFBZ0FUWUNqQVVnQUNBQk5nSzRCQ0FBSUFFMkFyUUVJQUFnQVRZQzRBTWdBQ0FCTmdMY0F5QUFJQUUyQW9nRElBQWdBVFlDaEFNZ0FDQUJOZ0t3QWlBQUlBRTJBcXdDSUFBZ0FUWUMyQUVnQUNBQk5nTFVBU0FBSUFFMkFvQUJJQUFnQVRZQ2ZDQUFRY0FGYWlFQUlBTkJDR3NpQXcwQUN3c2dBa1VOQUFOQUlBQWdBVFlDS0NBQUlBRTJBaVFnQUVIWUFHb2hBQ0FDUVFGcklnSU5BQXNMQ3hrQUlBQWdBQ2dDQUNnQ0NCRUFBQ0FBRUswSFFRRVFBUUFMV3dFQmZ5QUFLQUlBSVFJZ0FVRi9UQVJBQWtBZ0FpZ0NiQ0lCQkVBZ0FpZ0NhRUVEU0EwQkN5QUFJQUlvQWdnUkFBQWdBaWdDYkNFQkN5QUNJQUZCQVdvMkFtd1BDeUFCSUFJb0FtaE1CRUFnQUNBQ0tBSUlFUUFBQ3dzK0FRRi9Jd0JCNEFGcklnRWtBQ0FBSUFGQkVHb2dBQ2dDQUNnQ0RCRUNBQ0FCSUFGQkVHbzJBZ0JCeklJREtBSUFJQUVRN2cwZ0FVSGdBV29rQUF1VEFnSUVmd04rSXdCQk1Hc2lBeVFBQWtBQ1FBSi9Ba0FnQUNnQ0FDSUNLQUlVSWdCQkFVZ05BQ0FBSUFJb0FuUktEUUFnQWlnQ2NDQUFRUUowYWd3QkN5QUNLQUo0SWdSRkRRRWdBQ0FDS0FKOElnVklEUUVnQUNBQ0tBS0FBVW9OQVNBRUlBQWdCV3RCQW5ScUN5Z0NBQ0lFRFFFTElBSWdBRFlDR0NBQ0tBSndLQUlBSVFRTElBUWhBQUpBQWtBRFFDQUFMUUFBSWdWRkRRRWdBRUVCYWlFQUlBVkJKVWNOQUFzZ0FDMEFBRUh6QUVjTkFDQURJQUpCR0dvMkFpQWdBU0FFSUFOQklHb1F3d0lNQVFzZ0Fpa0NJQ0VHSUFJcEFpZ2hCeUFDS1FJWUlRZ2dBeUFDS1FJd053TVlJQU1nQnpjREVDQURJQVkzQXdnZ0F5QUlOd01BSUFFZ0JDQURFTU1DQ3lBRFFUQnFKQUFMRlFBZ0FDZ0NBQ0lBUVFBMkFoUWdBRUVBTmdKc0N3d0FJQUFvQWhoQkFUWUNKQXVMQVFFQ2Z5QUFLQUlZSWdFb0FpQkJBVUdBSUNBQktBSWNFRjhpQWtVRVFDQUJLQUlrQkVBZ0FDZ0NBQ0lDUVNzMkFoUWdBQ0FDS0FJQUVRQUFDeUFBS0FJQUlnSkIrd0EyQWhRZ0FFRi9JQUlvQWdRUkFnQWdBU2dDSUVIL0FUb0FBQ0FCS0FJZ1Fka0JPZ0FCUVFJaEFnc2dBVUVBTmdJa0lBRWdBallDQkNBQklBRW9BaUEyQWdCQkFRdFVBUUovSUFGQkFVNEVRQ0FCSUFBb0FoZ2lBaWdDQkNJRFNnUkFBMEFnQUNBQ0tBSU1FUUVBR2lBQklBTnJJZ0VnQWlnQ0JDSURTZzBBQ3dzZ0FpQURJQUZyTmdJRUlBSWdBaWdDQUNBQmFqWUNBQXNMZXdFQmZ5QUFLQUlZSWdKRkJFQWdBQ0FBUVFCQktDQUFLQUlFS0FJQUVRUUFJZ0kyQWhnZ0FpQUFRUUJCZ0NBZ0FDZ0NCQ2dDQUJFRUFEWUNJQ0FBS0FJWUlRSUxJQUlnQVRZQ0hDQUNRZXNBTmdJWUlBSkI3QUEyQWhRZ0FrSHRBRFlDRUNBQ1FlNEFOZ0lNSUFKQjd3QTJBZ2dnQWtJQU53SUFDNE1GQVFkL0l3QkJNR3NpQ0NRQUlBSW9BZ2doQ1NBQ0tBSUVJUW9nQWlnQ0FDRUNJQVVvQWdBaUIwVUVRQ0FGSUFBb0Fod2dBQ2dDSUJDMkRTSUhOZ0lBQzBGL0lRc0NRQ0FBS0FJTUlBQWdBa0V3YkdwQk1Hb2lEQ0FCS0FJQUlBSkI4QUJzYWlJTktBSUFJQTBvQWdRb0FnQWdDa0VVYkdvZ0NTQUhFSzhOUVFCSURRQWdCU2dDQUNJSEtBSVFJQWNvQWhScVFRRnFJQWNvQWdnZ0J5Z0NER3BCQVdwc3NrTUFBS0JBbEVNQUFLQkFsQ0FIS0FJY0lnY2dCMnl5WGcwQUFrQUNRQUpBQWtBZ0FTZ0NtQUZCQVdzT0FnQUJBZ3NnQUNnQ0RDQU1RUUJCQUNBQktBSUFJQUpCOEFCc2FpZ0NCQ2dDQUNBS1FSUnNhaWdDQUNBSlFSUnNhaUFJUVJCcUVKb0VEQUlMSUFBb0Fnd2dEQ0FBSUFKQk1HeHFRWkFFYWtFQUlBRW9BZ0FnQWtId0FHeHFLQUlFS0FJQUlBcEJGR3hxS0FJQUlBbEJGR3hxSUFoQkVHb1FtZ1FNQVFzZ0FDZ0NEQ0FNSUFBZ0FrRXdiR29pQjBHUUJHb2dCMEh3QjJvZ0FTZ0NBQ0FDUWZBQWJHb29BZ1FvQWdBZ0NrRVViR29vQWdBZ0NVRVViR29nQ0VFUWFoQ2FCQXRCQUNFTElBTWdCQ0FBS0FJRUlBQW9BZ2dnQUNnQ0ZDQUZLQUlBSUFBb0FoZ2lBQ0FBSUFoQkVHb2dDRUVNYWlBSVFRaHFJQVlRemcxQkFFZ0VRRUYvSVFzTUFRc2dCaUFJS0FJTXNqZ0NCQ0FHSUFnb0FnaXlPQUlJSUFZZ0FTZ0NBQ0FDUWZBQWJHb2lBQ29DR0NBQUtnSU1JQUFvQWdRb0FnQWdDa0VVYkdvb0FnQWdDVUVVYkdvaUFTb0NDSlFnQUNvQ0VDQUJLZ0lNbEpLU09BSU1JQVlnQUNvQ0tDQUFLZ0ljSUFFcUFnaVVJQUFxQWlBZ0FTb0NESlNTa2pnQ0VDQUdJQUFxQWpnZ0FDb0NMQ0FCS2dJSWxDQUFLZ0l3SUFFcUFneVVrcEk0QWhRTElBaEJNR29rQUNBTEN5NEJBWDBDZjBGL0lBQXFBZ0FnQVNvQ0FKTWlBa01BQUFBQVhRMEFHa0VCSUFKREFBQUFBRjROQUJwQkFBc0w5QTBDQzM4UmZTTUFRU0JySWdza0FFTWd2TDVNSVJFQ1FDQURRUVJJRFFBZ0FDb0NMRU1BQUFBQVd3MEFBbjhnQTdJaUZ5QUZsQ0lGaTBNQUFBQlBYUVJBSUFXb0RBRUxRWUNBZ0lCNEN5RUdJQU5CQm5RUU9pSUhSUVJBUVFCQkEwR0Vod0pCQUJBNFF3QUFnTDhoRVF3QkN5QURRUU4wRURvaUNrVUVRRUVBUVFOQmhJY0NRUUFRT0NBSEVETkRBQUNBdnlFUkRBRUxJQU5CQW5RaUNCQTZJZzVGQkVCQkFFRURRWVNIQWtFQUVEZ2dCeEF6SUFvUU0wTUFBSUMvSVJFTUFRc2dDQkE2SWcwRVFDQUdRUUZyUVFRZ0JrRUVTaHNoQ1VFQUlRZ0RRRUVBSVFZZ0NFRURSZ1JBSUEwZ0NVRUNkR29oRUVFQUlROENRQU5BSUFRcUFpUWhHQ0FFS2dJZ0lSa2dCQ29DSENFYUlBUXFBaFFoR3lBRUtnSVFJUndnQkNvQ0RDRWRJQVFxQWdRaEhpQUVLZ0lBSVI5QkFDRUFBMEFnQUNBRFJ3UkFJQUlnQUVFTWJHb2lCaW9DQUNJUklCbVVJQVlxQWdRaUVpQVlsSkpEQUFDQVA1SWlCVU1BQUFBQVd3MERJQUVnQUVFRGRDSUdhaUlJS2dJRUlSVWdCaUFLYWlBSUtnSUFJQjBnSHlBUmxDQWVJQktVa3BJaUZDQUZsWk1pRXpnQ0FDQUtJQVpCQkhKcUlCVWdHaUFSSUJ5VUlCSWdHNVNTa2lJVklBV1ZreUlXT0FJQUlBMGdBRUVDZENJR2FpQVRJQk9VSUJZZ0ZwU1NJaE00QWdBZ0JpQU9haUFUT0FJQUlBY2dBRUVHZENJR2FpQVJJQVdWSWhNNEFnQWdCeUFHUVFSeWFpQVNJQVdWSWhZNEFnQWdCeUFHUVFoeWFrTUFBSUEvSUFXVklpQTRBZ0FnQnlBR1FReHlha0VBTmdJQUlBY2dCa0VRY21wQkFEWUNBQ0FISUFaQkZISnFRUUEyQWdBZ0J5QUdRUmh5YWlBVUlCR01JaEdVSUFVZ0JaUWlCWlU0QWdBZ0J5QUdRUnh5YWlBVUlCS01JaEtVSUFXVk9BSUFJQWNnQmtFZ2NtcEJBRFlDQUNBSElBWkJKSEpxUVFBMkFnQWdCeUFHUVNoeWFrRUFOZ0lBSUFjZ0JrRXNjbW9nRXpnQ0FDQUhJQVpCTUhKcUlCWTRBZ0FnQnlBR1FUUnlhaUFnT0FJQUlBY2dCa0U0Y21vZ0ZTQVJsQ0FGbFRnQ0FDQUhJQVpCUEhKcUlCVWdFcFFnQlpVNEFnQWdBRUVCYWlFQURBRUxDeUFOSUFOQkJFSHFBQkNDQnlBUUtnSUFRd0FBZ0VDVVF3QUFnRUdYSWhSREFBREFRSlVoRWtFQUlRWkRBQUFBQUNFUkEwQWdBeUFHUmtVRVFDQVNJUVVnRFNBR1FRSjBhaW9DQUNJVElCUmVSUVJBSUJKREFBQ0FQME1BQUlBL0lCTWdGSldUSWdVZ0JTQUZsSlNUbENFRkN5QUdRUUZxSVFZZ0VTQUZraUVSREFFTEN3SkFJQTlCQ2tZZ0VTQVhsU0lSUTgzTXpEMWRjZzBBUVFBaEFFRUFJUWdnRDBFQVJ5QVJRd0FBZ0VCZGNTQVJJQ0dWUTZSd2ZUOWVjUTBBQTBBZ0FDQURSa1VFUUNBT0lBQkJBblJxS2dJQUlnVWdGRjlCQVhORkJFQWdCeUFJUVFWMElneHFJZ2xEQUFDQVB5QUZJQlNWa3lJRklBV1VJZ1VnQnlBQVFRWjBJZ1pxS2dJQWxEZ0NBQ0FISUF4QkJISnFJQVVnQnlBR1FRUnlhaW9DQUpRNEFnQWdCeUFNUVFoeWFpQUZJQWNnQmtFSWNtb3FBZ0NVT0FJQUlBY2dERUVNY21vZ0JTQUhJQVpCREhKcUtnSUFsRGdDQUNBSElBeEJFSEpxSUFVZ0J5QUdRUkJ5YWlvQ0FKUTRBZ0FnQnlBTVFSUnlhaUFGSUFjZ0JrRVVjbW9xQWdDVU9BSUFJQWNnREVFWWNtb2dCU0FISUFaQkdISnFLZ0lBbERnQ0FDQUhJQXhCSEhKcUlBVWdCeUFHUVJ4eWFpb0NBSlE0QWdBZ0NTQUZJQWNnQmtFZ2Ntb3FBZ0NVT0FJZ0lBa2dCU0FISUFaQkpISnFLZ0lBbERnQ0pDQUpJQVVnQnlBR1FTaHlhaW9DQUpRNEFpZ2dDU0FGSUFjZ0JrRXNjbW9xQWdDVU9BSXNJQWtnQlNBSElBWkJNSEpxS2dJQWxEZ0NNQ0FKSUFVZ0J5QUdRVFJ5YWlvQ0FKUTRBalFnQ1NBRklBY2dCa0U0Y21vcUFnQ1VPQUk0SUFrZ0JTQUhJQVpCUEhKcUtnSUFsRGdDUENBS0lBaEJBblJxSWdZZ0JTQUtJQUJCQTNRaUNXb3FBZ0NVT0FJQUlBWWdCU0FLSUFsQkJISnFLZ0lBbERnQ0JDQUlRUUpxSVFnTElBQkJBV29oQUF3QkN3c2dDRUVGVEFSQUlBY1FNeUFLRURNZ0RoQXpJQTBRTTBNQUFJQy9JUkVNQndzZ0N5QUtJQWNnQ0JDd0IwRi9UQTBDSUFRZ0N5b0NBQ0FFS2dJQWtqZ0NBQ0FFSUFzcUFnUWdCQ29DQkpJNEFnUWdCQ0FMS2dJSUlBUXFBZ3lTT0FJTUlBUWdDeW9DRENBRUtnSVFramdDRUNBRUlBc3FBaEFnQkNvQ0ZKSTRBaFFnQkNBTEtnSVVJQVFxQWh5U09BSWNJQVFnQ3lvQ0dDQUVLZ0lna2pnQ0lDQUVJQXNxQWh3Z0JDb0NKSkk0QWlRZ0QwRUJhaUVQSUJFaElRd0JDd3NnQnhBeklBb1FNeUFPRURNZ0RSQXpEQVFMSUFjUU15QUtFRE1nRGhBeklBMFFNME1ndkw1TUlSRU1Bd1VEUUNBR1FRUkdSUVJBSUFaQkFuUWlEQ0FFSUFoQkJIUWlEMnBxSUFBZ0Qyb2dER29xQWdBZ0FDb0NMSlU0QWdBZ0JrRUJhaUVHREFFTEN5QUlRUUZxSVFnTUFRc0FDd0FMUVFCQkEwR0Vod0pCQUJBNElBY1FNeUFLRURNZ0RoQXpRd0FBZ0w4aEVRc2dDMEVnYWlRQUlCRUx2d2NDQjM4VmZTTUFRU0JySWdja0FFTWd2TDVNSVF3Q1FDQURRUVJJRFFBZ0FDb0NMRU1BQUFBQVd3MEFJQU5CQm5RUU9pSUdSUVJBUVFCQkEwR0Vod0pCQUJBNFF3QUFnTDhoREF3QkN5QURRUU4wRURvaUNRUkFBMEJCQUNFSUlBVkJBMFlFUUNBRFFRRjBJUW9nQTdJaEZBSkFBMEFnQkNvQ0pDRVZJQVFxQWlBaEZpQUVLZ0ljSVJjZ0JDb0NGQ0VZSUFRcUFoQWhHU0FFS2dJTUlSb2dCQ29DQkNFYklBUXFBZ0FoSEVNQUFBQUFJUkJCQUNFQUEwQWdBQ0FEUndSQUlBSWdBRUVNYkdvaUJTb0NBQ0lOSUJhVUlBVXFBZ1FpRGlBVmxKSkRBQUNBUDVJaURFTUFBQUFBV3cwRElBRWdBRUVEZENJRmFpSUxLZ0lFSVE4Z0JTQUphaUFMS2dJQUlCb2dIQ0FObENBYklBNlVrcElpRVNBTWxaTWlFamdDQUNBSklBVkJCSEpxSUE4Z0Z5QU5JQm1VSUE0Z0dKU1NraUlQSUF5Vmt5SVRPQUlBSUFZZ0FFRUdkQ0lGYWlBTklBeVZJaDA0QWdBZ0JpQUZRUVJ5YWlBT0lBeVZJaDQ0QWdBZ0JpQUZRUWh5YWtNQUFJQS9JQXlWSWg4NEFnQWdCaUFGUVF4eWFrRUFOZ0lBSUFZZ0JVRVFjbXBCQURZQ0FDQUdJQVZCRkhKcVFRQTJBZ0FnQmlBRlFSaHlhaUFSSUEyTUlnMlVJQXdnREpRaURKVTRBZ0FnQmlBRlFSeHlhaUFSSUE2TUlnNlVJQXlWT0FJQUlBWWdCVUVnY21wQkFEWUNBQ0FHSUFWQkpISnFRUUEyQWdBZ0JpQUZRU2h5YWtFQU5nSUFJQVlnQlVFc2Ntb2dIVGdDQUNBR0lBVkJNSEpxSUI0NEFnQWdCaUFGUVRSeWFpQWZPQUlBSUFZZ0JVRTRjbW9nRHlBTmxDQU1sVGdDQUNBR0lBVkJQSEpxSUE4Z0RwUWdESlU0QWdBZ0VDQVNJQktVSUJNZ0U1U1NraUVRSUFCQkFXb2hBQXdCQ3dzZ0NFRUtSaUFRSUJTVklneER6Y3pNUFYxeUlBaEJBRWNnREVNQUFJQkFYWEVnRENBZ2xVT2tjSDAvWG5GeVJRUkFJQWNnQ1NBR0lBb1FzQWRCZjB3TkFpQUVJQWNxQWdBZ0JDb0NBSkk0QWdBZ0JDQUhLZ0lFSUFRcUFnU1NPQUlFSUFRZ0J5b0NDQ0FFS2dJTWtqZ0NEQ0FFSUFjcUFnd2dCQ29DRUpJNEFoQWdCQ0FIS2dJUUlBUXFBaFNTT0FJVUlBUWdCeW9DRkNBRUtnSWNramdDSENBRUlBY3FBaGdnQkNvQ0lKSTRBaUFnQkNBSEtnSWNJQVFxQWlTU09BSWtJQWhCQVdvaENDQU1JU0FNQVFzTElBWVFNeUFKRURNTUJBc2dCaEF6SUFrUU0wTWd2TDVNSVF3TUF3VURRQ0FJUVFSR1JRUkFJQWhCQW5RaUNpQUVJQVZCQkhRaUMycHFJQUFnQzJvZ0Ntb3FBZ0FnQUNvQ0xKVTRBZ0FnQ0VFQmFpRUlEQUVMQ3lBRlFRRnFJUVVNQVFzQUN3QUxRUUJCQTBHRWh3SkJBQkE0SUFZUU0wTUFBSUMvSVF3TElBZEJJR29rQUNBTUM4MEZBZ2wvQkgwakFFSFFBR3NpQmlRQUlBR3lJUkVnQUxJaEVnSi9BMEFDUUVFQUlRRWdDQ0FES0FJRVRnMEFBMEJCQUNFQUlBRkJBMFlFUUNBREtBSUFJZ0VnQ0VId0FHd2lDMm9vQWdRaERFRUFJUWNEUUNBTUtBSUVJQWRLQkVCQkFDRUFBMEFnQjBFVWJDSU5JQUVnQzJvb0FnUWlEQ2dDQUdvaURpZ0NCQ0FBU2dSQUFrQkJBQ0FHUVNCcUlBQkJGR3dpQVNBT0tBSUFhaUlNS2dJSUlBd3FBZ3dnQmtFY2FpQUdRUmhxRU40R1FRQklEUUFnQmlvQ0hDSVBRd0FBQUFCZERRQWdCaW9DR0NJUUlCRmdJQThnRW1CeUlCQkRBQUFBQUYxeURRQWdCaUFES0FJQUlBdHFLQUlFS0FJQUlBMXFLQUlBSUFGcUlnRXFBZ2c0QWhBZ0JpQUJLZ0lNT0FJVVFRQWdCa0VnYWlBR1FSQnFJQVpCQ0dvUWlnY0NRQ0FHS2dJTUlnOGdBeWdDQUNBTGFpZ0NCQ2dDQUNBTmFpSUJLZ0lNSWhCZlFRRnpEUUFnRHlBQktnSVFZRUVCY3cwQUlBcEJ5QUZHQkVCQkFFRURRZEdHQWtFQUVEZ2dCRUhNSldvTUN3c2dCQ0FLUVJoc2FpSUJJQUEyQWdnZ0FTQUhOZ0lFSUFFZ0NEWUNBQ0FCSUFZcUFodzRBaEFnQmlvQ0dDRVBJQUZCQURZQ0RDQUJJQTg0QWhRZ0NrRUJhaUVLREFFTElBOGdFQ0FRa2w5QkFYTU5BQ0FQSUFFcUFoQkRBQUFBUDVSZ1FRRnpEUUFnQ1VISUFVWUVRQ0FGUVg4MkFzd2xRY2dCSVFrTUFRc2dCU0FKUVJoc2FpSUJJQUEyQWdnZ0FTQUhOZ0lFSUFFZ0NEWUNBQ0FCSUFZcUFodzRBaEFnQmlvQ0dDRVBJQUZCQURZQ0RDQUJJQTg0QWhRZ0NVRUJhaUVKQ3lBQVFRRnFJUUFnQXlnQ0FDRUJEQUVMQ3lBSFFRRnFJUWNNQVFzTElBaEJBV29oQ0F3REJRTkFJQUJCQkVaRkJFQWdBRUVDZENJSElBRkJCSFFpQ3lBR1FTQnFhbW9nQWlBSVFUQnNhaUFMYWlBSGFpb0NBRGdDQUNBQVFRRnFJUUFNQVFzTElBRkJBV29oQVF3QkN3QUxBQXNMSUFRZ0NrRVliR3BCZnpZQ0RDQUZJQWxCR0d4cVFReHFDMEYvTmdJQUlBWkIwQUJxSkFBTDNBWUNDMzhHZlNNQVFkQUFheUlGSkFBZ0FDZ0NCTEloRkNBQUtBSUFzaUVWQW44RFFBSkFRUUFoQnlBSklBSW9BZ1JPRFFBRFFFRUFJUWdnQjBFRFJnUkFJQUlvQWdBaUJpQUpRZkFBYkNJTWFpZ0NCQ0VOUVFBaEJ3TkFJQTBvQWdRZ0Iwb0VRRUVBSVFnRFFDQUhRUlJzSWc0Z0JpQU1haWdDQkNJTktBSUFhaUlQS0FJRUlBaEtCRUFDUUNBQUlBVkJJR29nQ0VFVWJDSUdJQThvQWdCcUlnMHFBZ2dnRFNvQ0RDQUZRUnhxSUFWQkdHb1EzZ1pCQUVnTkFDQUZLZ0ljSWhCREFBQUFBRjBOQUNBRktnSVlJaEVnRkdBZ0VDQVZZSElnRVVNQUFBQUFYWElOQUNBRktnSklJQVVxQWt3Z0FpZ0NBQ0FNYWlnQ0JDZ0NBQ0FPYWlnQ0FDQUdhaUlHS2dJSUloQWdCU29DUUpRZ0Jpb0NEQ0lSSUFVcUFrU1VrcElpRWlBRktnSXNJQVVxQWlBZ0VKUWdCU29DSkNBUmxKS1NJaE1nRTVRZ0JTb0NQQ0FRSUFVcUFqQ1VJQkVnQlNvQ05KU1NraUlSSUJHVWtpQVNJQktVa3BFaUVwV1VJQVVxQWlnZ0V5QVNsWlFnQlNvQ09DQVJJQktWbEpLU1E4M016TDFlRFFBZ0JTQVFPQUlRSUFVZ0Jpb0NERGdDRkNBQUlBVkJJR29nQlVFUWFpQUZRUWhxRUlvSEFrQWdCU29DRENJUUlBSW9BZ0FnREdvb0FnUW9BZ0FnRG1vaUJpb0NEQ0lSWDBFQmN3MEFJQkFnQmlvQ0VHQkJBWE1OQUNBTFFjZ0JSZ1JBUVFCQkEwSFJoZ0pCQUJBNElBTkJ6Q1ZxREFzTElBTWdDMEVZYkdvaUJpQUlOZ0lJSUFZZ0J6WUNCQ0FHSUFrMkFnQWdCaUFGS2dJY09BSVFJQVVxQWhnaEVDQUdRUUEyQWd3Z0JpQVFPQUlVSUF0QkFXb2hDd3dCQ3lBUUlCRWdFWkpmUVFGekRRQWdFQ0FHS2dJUVF3QUFBRCtVWUVFQmN3MEFJQXBCeUFGR0JFQWdCRUYvTmdMTUpVSElBU0VLREFFTElBUWdDa0VZYkdvaUJpQUlOZ0lJSUFZZ0J6WUNCQ0FHSUFrMkFnQWdCaUFGS2dJY09BSVFJQVVxQWhnaEVDQUdRUUEyQWd3Z0JpQVFPQUlVSUFwQkFXb2hDZ3NnQ0VFQmFpRUlJQUlvQWdBaEJnd0JDd3NnQjBFQmFpRUhEQUVMQ3lBSlFRRnFJUWtNQXdVRFFDQUlRUVJHUlFSQUlBaEJBblFpQmlBSFFRUjBJZ3dnQlVFZ2FtcHFJQUVnQ1VFd2JHb2dER29nQm1vcUFnQTRBZ0FnQ0VFQmFpRUlEQUVMQ3lBSFFRRnFJUWNNQVFzQUN3QUxDeUFESUF0QkdHeHFRWDgyQWd3Z0JDQUtRUmhzYWtFTWFndEJmellDQUNBRlFkQUFhaVFBQzhzUEFnNS9BWDBqQUVFd2F5SUxKQUJCZnlFR0FrQWdCRVVnQUVVZ0FVVnlJQUpGSUFORmNuSnlEUUFnQVNnQ21BRkJBVWdFUUVGK0lRWU1BUXNnQkVFQU5nSUFJQUZCNkFCcUlRY2dBVUU0YWlFR0lBRkJDR29oRHdOQUlBVWdBU2dDQkU1RkJFQWdEeUFGUWZBQWJDSUlJQUVvQWdCcVFReHFJQUFnQlVFd2JHb2lERUV3YWhEYUF3SkFJQUVvQXBnQlFRSklEUUFnQmlBQktBSUFJQWhxUVF4cUlBeEJrQVJxRU5vRElBRW9BcGdCUVFOSURRQWdCeUFCS0FJQUlBaHFRUXhxSUF4QjhBZHFFTm9EQ3lBRlFRRnFJUVVNQVFzTEFrQWdBQ2dDQUVFQlJnUkFJQUFvQWd3Z0FFRXdhaUFCSUFCQjhCUnFJQUJCeURwcUVNc1BEQUVMSUFBb0FnUWdBQ2dDQ0NBQVFUQnFJQUVnQUVId0ZHb2dBRUhJT21vUXlnOExJQUJCMEF0cUlSQWdBVUdjQVdvaEVTQUFRY2c2YWlFTUlBQkI4QlJxSWhJaENFRUFJUWNEUUFKQUlBY2hCVUVBSVFvZ0RTQUFLQUlrVGcwQUEwQUNRQUpBSUFvZ0FDZ0M0R2RPRFFBZ0RTQUFLQUlrUmcwQUlBZ2dFU0FGSUJBZ0FDZ0NCQ0FBS0FJSUVJRUhJZ1pCZjBvTkFTQUlJQkpIRFFBZ0RDSUlJQkVnQlNBUUlBQW9BZ1FnQUNnQ0NCQ0JCeUlHUVFCT0RRRUxRUUFoQmlBS1JRMENBMEFnQmlBS1JnMEVJQUFnQmtFMGJHb2lCVUdVNkFCcUlBVkI1T2NBYWlnQ0FDQUZRZWpuQUdvb0FnQWdCVUhzNXdCcUtBSUFJQVZCOE9jQWFpZ0NBQ0FGUWZUbkFHb29BZ0FnQlVINDV3QnFJQVZCL09jQWFpSUpFTVlQSWc0MkFnQUNRQ0FPRFFBZ0NTb0NBQ0FBS2dJb1hrRUJjdzBBQW4wZ0FDZ0NBRUVCUmdSQUlBQW9BZ3dpQ1VIb0FHb2dCVUdBNkFCcUtnSUF1eUFGUVlUb0FHb3FBZ0M3SUF0QkNHb2dDeUFKS0FLd0FSRFZCQ0FBSUFkQkEzUnFRZEFPYWlBTEt3TUl0amdDQUNBTEt3TUF0Z3dCQ3lBQUlBZEJBM1JxUWRBT2FpQUZRWURvQUdvcUFnQTRBZ0FnQlVHRTZBQnFLZ0lBQ3lFVElBQWdCMEVEZEdvaUNVSFVEbW9nRXpnQ0FDQUFJQWRCREd4cUlnNUJrQkZxSUFWQmlPZ0FhaW9DQURnQ0FDQU9RWlFSYWlBRlFZem9BR29xQWdBNEFnQWdEa0dZRVdvZ0JVR1E2QUJxS2dJQU9BSUFJQWxCMEF0cUlBdEJFR29nQmtFQ2RHb29BZ0FpQlNvQ0VEZ0NBQ0FKUWRRTGFpQUZLZ0lVT0FJQUlBQWdCMEVZYkdvaUNVR2c0QUJxSUFVb0FnQTJBZ0FnQ1VHazRBQnFJQVVvQWdRMkFnQWdCU2dDQ0NFRklBbEJyT0FBYWtFQU5nSUFJQWxCcU9BQWFpQUZOZ0lBSUFkQkFXb2hCd3NnQmtFQmFpRUdEQUFMQUFzZ0MwRVFhaUFLUVFKMGFpQUlJQVpCR0d4cUlnWTJBZ0FnQUNBRlFRTjBhaUlKUWRBTGFpQUdLZ0lRT0FJQUlBbEIxQXRxSUFZcUFoUTRBZ0FnQUNBS1FUUnNhaUlKUWZEbkFHb2dBallDQUNBSlFlem5BR29nQmpZQ0FDQUpRZWpuQUdvZ0FUWUNBQ0FKUWVUbkFHb2dBRFlDQUNBSElBVkJBV29pQlNBRlFRVkdHeUVGSUFwQkFXb2hDaUFOUVFGcUlRME1BQXNBQ3d0QkFDRUZJQWRCQUNBSFFRQktHeUVNQTBBZ0JTQU1Sa1VFUUNBQklBVkJHR3dpQ0dvaUFpQUFJQWhxSWdoQnNPQUFhaWtDQURjQ3JBRWdBaUFJUWFqZ0FHb3BBZ0EzQXFRQklBSWdDRUdnNEFCcUtRSUFOd0tjQVNBRlFRRnFJUVVNQVFzTElBRWdCMEVZYkdwQmZ6WUNxQUVDUUFKQUlBQW9BZ0JCQVVZRVFDQUhRUUpNQkVBZ0FVRUFOZ0tZQVVGOUlRWU1CQXNnQkNBQUtBSVFJQThnQUVIUURtb2lBaUFBUVpBUmFpSUlJQWNnQTBFQUVPNENJaE00QWdBZ0V5QUFLZ0lzWGtFQmN3MENJQUFvQWhCRUFBQUFvSm1aNlQ4UTZ3SWdCQ0FBS0FJUUlBTWdBaUFJSUFjZ0EwRUJFTzRDSWhNNEFnQWdFeUFBS2dJc1hrRUJjdzBDSUFBb0FoQkVBQUFBUURNejR6OFE2d0lnQkNBQUtBSVFJQU1nQWlBSUlBY2dBMEVCRU80Q0loTTRBZ0FnRXlBQUtnSXNYa0VCY3cwQ0lBQW9BaEJFQUFBQW9KbVoyVDhRNndJZ0JDQUFLQUlRSUFNZ0FpQUlJQWNnQTBFQkVPNENJaE00QWdBZ0V5QUFLZ0lzWGtFQmN3MENJQUFvQWhCRUFBQUFBQUFBQUFBUTZ3SWdCQ0FBS0FJUUlBTWdBaUFJSUFjZ0EwRUJFTzRDSWhNNEFnQU1BUXNnQjBFQ1RBUkFJQUZCQURZQ21BRkJmU0VHREFNTElBUWdEeUFBUWRBT2FpSUNJQUJCa0JGcUlnZ2dCeUFEUVFCREFBQ0FQeER0QWlJVE9BSUFJQk1nQUNvQ0xGNUJBWE1OQVNBRUlBTWdBaUFJSUFjZ0EwRUJRODNNVEQ4UTdRSWlFemdDQUNBVElBQXFBaXhlUVFGekRRRWdCQ0FESUFJZ0NDQUhJQU5CQVVPYW1Say9FTzBDSWhNNEFnQWdFeUFBS2dJc1hrRUJjdzBCSUFRZ0F5QUNJQWdnQnlBRFFRRkR6Y3pNUGhEdEFpSVRPQUlBSUJNZ0FDb0NMRjVCQVhNTkFTQUVJQU1nQWlBSUlBY2dBMEVCUXdBQUFBQVE3UUlpRXpnQ0FBc2dFeUFBS2dJc1hrRUJjdzBBSUFGQkFEWUNtQUZCZkNFR0RBRUxJQUVnQVNnQ21BRkJBV28yQXBnQlFRQWhCa0VBSVFvRFFFRUFJUVVnQ2tFRFJnUkFBMEJCQUNFRklBWkJBMFlFUUFOQVFRQWhCaUFGUVFOR0RRVURRQ0FHUVFSR1JRUkFJQVpCQW5RaUFDQUJJQVZCQkhRaUFtcHFJQUlnQTJvZ0FHb3FBZ0E0QWdnZ0JrRUJhaUVHREFFTEN5QUZRUUZxSVFVTUFBc0FCUU5BSUFWQkJFWkZCRUFnQVNBR1FRUjBhaUFGUVFKMGFpSUFJQUFxQWdnNEFqZ2dCVUVCYWlFRkRBRUxDeUFHUVFGcUlRWU1BUXNBQ3dBRkEwQWdCVUVFUmtVRVFDQUJJQXBCQkhScUlBVkJBblJxSWdBZ0FDb0NPRGdDYUNBRlFRRnFJUVVNQVFzTElBcEJBV29oQ2d3QkN3QUxBQXNnQzBFd2FpUUFJQVlMaHdFQkFYOUJwT3NBRURvaUF3UkFBa0FnQTBFQk5nTGdaeUFEUXBxejV2aURnSUNBd0FBM0FpZ2dBMEtMZ0lDQW9BRTNBaUFnQTBLWmdJQ0FzQUUzQWhnZ0F5QUNOZ0lJSUFNZ0FUWUNCQ0FESUFBMkFoUWdBeUFCSUFKc0VEb2lBRFlDOUdjZ0FFVU5BQ0FEUVFBMkF2aG5JQU1QQ3d0QkFFRURRY0NHQWtFQUVEaEJBUkFCQUFzK0FDQUJJQUFvQWdBZ0FDZ0NCQkRORHlJQklBQTJBZ3dnQVVFQk5nSUFJQUVnQUVFSWFoQzFCQ0lBTmdJUUlBQkVBQUFBQUFBQUFBQVE2d0lnQVF1RENBSU5md044SXdCQkVHc2lCaVFBUVg4aENBSkFJQUFvQWdnaUJTQUFLQUlFUncwQUlBVWdBU2dDQkVjTkFDQUZJQUlvQWdSQkFXcEhEUUFnQlVFQ2F5SU5RUUFnRFVFQVNoc2hEZ05BQWtBZ0RpQUhJZ2hIQkVBZ0NFRURkQ0lFSUFFb0FnQnFJQUFvQWdBZ0JTQUliRUVEZEdvaUNTQUVhaXNEQURrREFDQUdJQWtnQ0VFQmFpSUhRUU4wSWdwcUlnczJBZ2dnQmlBRklBaEJmM05xSWd3MkFnd2dCa0VJYWhDM0J5RVFJQUlvQWdBZ0JHb2dFRGtEQUNBSElRUWdFRVFBQUFBQUFBQUFBR0VOQWdOQVJBQUFBQUFBQUFBQUlSQWdCeUVESUFRZ0JVNE5BZ05BSUFNZ0JFOEVRQ0FFSUFWc0lROGdCQ0VEQTBBZ0F5QUZUa1VFUUNBUUlBQW9BZ0FnQXlBUGFrRURkR29yQXdBZ0NTQURRUU4wYWlzREFLS2dJUkFnQTBFQmFpRUREQUVMQ3lBQktBSUFJQVJCQTNScUlCQTVBd0FnQkVFQmFpRUVEQUlGSUJBZ0FDZ0NBQ0FESUFWc0lBUnFRUU4wYWlzREFDQUpJQU5CQTNScUt3TUFvcUFoRUNBRFFRRnFJUU1NQVFzQUN3QUxBQXNDUUFKQUlBVkJBazRFUUNBQktBSUFJZ1FnRFVFRGRDSURhaUFBS0FJQUlnRWdCU0FOYkNJSElBMXFRUU4wYWlzREFEa0RBQ0FDS0FJQUlBTnFJQUVnQlVFQmF5SURJQWRxUVFOMGFpc0RBRGtEQUF3QkN5QUZRUUZIRFFFZ0FTZ0NBQ0VFSUFBb0FnQWhBVUVBSVFNTElBUWdBMEVEZEdvZ0FTQURJQVZzSUFOcVFRTjBhaXNEQURrREFBdEJBQ0VJSUFWQkFDQUZRUUJLR3lFTUlBVWhCQU5BSUFSQkFVZ05BeUFBS0FJQUlBUkJBV3NpQVNBRmJFRURkR29oQndKQUlBUWdEVW9OQUNBRklBUnJJUWtnQnlBRVFRTjBhaUVPSUFRaEFnTkFJQUlnQlU0TkFTQUdJQWsyQWd3Z0JpQUpOZ0lFSUFZZ0RqWUNDQ0FHSUFBb0FnQWdBaUFGYkNJS0lBUnFRUU4wYWpZQ0FDQUdRUWhxSUFZUXVBUWhFQ0FFSVFNRFFDQURJQVZPUlFSQUlBQW9BZ0FnQXlBS2FrRURkR29pQ3lBTEt3TUFJQkFnQnlBRFFRTjBhaXNEQUtLaE9RTUFJQU5CQVdvaEF3d0JDd3NnQWtFQmFpRUNEQUFMQUF0QkFDRURBMEFnQXlBTVJrVUVRQ0FISUFOQkEzUnFRZ0EzQXdBZ0EwRUJhaUVEREFFTEN5QUhJQUZCQTNScVFvQ0FnSUNBZ0lENFB6Y0RBQ0FCSVFRTUFBc0FDeUFHSUF3MkFnd2dCaUFNTmdJRUlBWWdDellDQ0NBR0lBRW9BZ0FnQ21vMkFnQWdCa0VJYWlBR0VMZ0VSQUFBQUFBQUFPQS9vaUVRSUFVaEJBTkFJQVJCQVdzaUJDQUlUQTBCSUFFb0FnQWlEQ0FFUVFOMElnTnFJZ29nQ2lzREFDQVFJQU1nQ1dvckF3QWlFYUtoSWhJNUF3QWdCQ0FGYkNFS0lBUWhBd05BSUFNZ0JVNE5BU0FBS0FJQUlBTWdDbXBCQTNScUlnc2dDeXNEQUNBUklBd2dBMEVEZENJTGFpc0RBS0lnRWlBSklBdHFLd01Bb3FDaE9RTUFJQU5CQVdvaEF3d0FDd0FMQUFzQUN5QUdRUkJxSkFBZ0NBczBBUUYvSXdCQkVHc2lCQ1FBSUFBb0FnQWhBQ0FFSUFNMkFnd2dBU0FDSUFSQkRHb2dBQkVFQUNFQUlBUkJFR29rQUNBQUN5b0JBWDhqQUVFUWF5SUNKQUFnQWlBQU5nSU1JQUpCREdvZ0FTZ0NBQkN5QnlBQ1FSQnFKQUFnQUF0VUFRSi9Jd0JCRUdzaUJDUUFJQUFvQWdRaUJVRUJkU0FCYWlFQklBQW9BZ0FoQUNBRlFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QUVJQU0yQWd3Z0FTQUNJQVJCREdvZ0FCRUZBQ0FFUVJCcUpBQUxVZ0VDZnlNQVFSQnJJZ01rQUNBQUtBSUVJZ1JCQVhVZ0FXb2hBU0FBS0FJQUlRQWdCRUVCY1FSQUlBRW9BZ0FnQUdvb0FnQWhBQXNnQXlBQ05nSU1JQUVnQTBFTWFpQUFFUUlBSUFOQkVHb2tBQXNwQVFGL0l3QkJFR3NpQWlRQUlBQkI1T3dESUFKQkNHb2dBUkRSRHhBVU5nSUFJQUpCRUdva0FBczJBUUYvSXdCQkVHc2lCQ1FBSUFBb0FnQWhBQ0FFSUFNUXhRSWdBU0FDSUFRZ0FCRUVBQ0VBSUFRUU9Sb2dCRUVRYWlRQUlBQUxLQUVCZnlBQUVEZEJCR29RT2lJQklBQVFOellDQUNBQlFRUnFJQUFRUGlBQUVEY1FQeG9nQVFzcUFRRi9Jd0JCRUdzaUFpUUFJQUlnQURZQ0RDQUNRUXhxSUFFUTFnOFFzZ2NnQWtFUWFpUUFJQUFMZ1JNQ0QzOEJmQ0FCUVFKdElnMUJBQ0FOUVFCS0d5RUhJQVFvQWdBaUNTQUNRUUp0SWhCQkFXc2lDQ0FOYkVFQmRHb2hCa0VBSVFJZ0NTRUZBMEFnQWlBSFJrVUVRQ0FHUVFBN0FRQWdCVUVBT3dFQUlBSkJBV29oQWlBRlFRSnFJUVVnQmtFQ2FpRUdEQUVMQ3lBUVFRQWdFRUVBU2hzaENpQUpJQTFCQVdzaUIwRUJkR29oQmtFQUlRSWdDU0VGQTBBZ0FpQUtSa1VFUUNBR1FRQTdBUUFnQlVFQU93RUFJQUpCQVdvaEFpQUdJQTFCQVhRaUMyb2hCaUFGSUF0cUlRVU1BUXNMSUFoQkFTQUlRUUZLR3lFUklBZEJBU0FIUVFGS0d5RVNJQVJCa0lESUFHb2hDQ0FOUVFGcUlnSWdCQ2dDQkdvaER5QUJRUUYwSUFCcVFRSnFJUXdnQ1NBQ1FRRjBhaUVGUVFBZ0RXdEJBWFFoRTBFQUlRbEJBU0VLQWtBRFFDQUtJQkZIQkVCQkFTRUdBMEFDUUFKQUFrQWdCaUFTUndSQUlBTWdEQzBBQUVnRVFDQVBRZjhCT2dBQUlBVWdFMm9pQUM4QkFDSUNRUkIwUVJCMUlnZEJBVTRFUUNBRklBYzdBUUFnQkNBQ1FSeHNhaUlBUVl5QTBBQnFJQW8yQWdBZ0FFSDAvODhBYWlJQ0lBSW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSUNJQUlvQWdBZ0JtbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTUJRc2dBRUVDYXk4QkFDSUhRUkIwUVJCMUlRSWdBQzRCQWlJQVFRRk9CRUFnQWtFQlRnUkFJQVJCa0lESUFHb2lBaUFBUVFKMGFrRUVheWdDQUNJQUlBZEJBblFnQW1wQkJHc29BZ0FpQjBvRVFDQUZJQWM3QVFCQkFDRUxJQWxCQUNBSlFRQktHeUVPSUFnaEFnTkFJQXNnRGtZRVFDQUhJUUFNQ0FzZ0FDQUNLQUlBUmdSQUlBSWdCellDQUFzZ0MwRUJhaUVMSUFKQkJHb2hBZ3dBQ3dBTElBVWdBRHNCQUNBQUlBZE9EUVZCQUNFTElBbEJBQ0FKUVFCS0d5RU9JQWdoQWdOQUlBc2dEa1lOQmlBSElBSW9BZ0JHQkVBZ0FpQUFOZ0lBQ3lBTFFRRnFJUXNnQWtFRWFpRUNEQUFMQUFzZ0JVRUNheTRCQUNJQ1FRRk9CRUFnQkVHUWdNZ0FhaUlISUFCQkFuUnFRUVJyS0FJQUlnQWdBa0gvL3dOeFFRSjBJQWRxUVFScktBSUFJZ2RLQkVBZ0JTQUhPd0VBUVFBaEN5QUpRUUFnQ1VFQVNoc2hEaUFJSVFJRFFDQUxJQTVHQkVBZ0J5RUFEQWNMSUFBZ0FpZ0NBRVlFUUNBQ0lBYzJBZ0FMSUF0QkFXb2hDeUFDUVFScUlRSU1BQXNBQ3lBRklBQTdBUUFnQUNBSFRnMEVRUUFoQ3lBSlFRQWdDVUVBU2hzaERpQUlJUUlEUUNBTElBNUdEUVVnQnlBQ0tBSUFSZ1JBSUFJZ0FEWUNBQXNnQzBFQmFpRUxJQUpCQkdvaEFnd0FDd0FMSUFVZ0FEc0JBQ0FFSUFCQkIyeEJBblJxSWdCQjlQL1BBR29pQWlBQ0tBSUFRUUZxTmdJQUlBQkIrUC9QQUdvaUFpQUNLQUlBSUFacU5nSUFJQUJCL1AvUEFHb2lBaUFDS0FJQUlBcHFOZ0lBSUFZZ0FFR0FnTkFBYWlJQ0tBSUFTQVJBSUFJZ0JqWUNBQXNnQUVHTWdOQUFhaUFLTmdJQURBVUxJQUpCQVU0RVFDQUZJQUk3QVFBZ0JDQUhRUWRzUVFKMGFpSUFRZlQvendCcUlnSWdBaWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ0lnQWlnQ0FDQUdhallDQUNBQVFmei96d0JxSWdJZ0FpZ0NBQ0FLYWpZQ0FDQUdJQUJCaElEUUFHb2lBaWdDQUVvRVFDQUNJQVkyQWdBTElBQkJqSURRQUdvZ0NqWUNBQXdGQ3lBRlFRSnJMd0VBSWdCQkVIUkJFSFVpQWtFQlRnUkFJQVVnQWpzQkFDQUVJQUJCSEd4cUlnQkI5UC9QQUdvaUFpQUNLQUlBUVFGcU5nSUFJQUJCK1AvUEFHb2lBaUFDS0FJQUlBWnFOZ0lBSUFCQi9QL1BBR29pQWlBQ0tBSUFJQXBxTmdJQUlBQkJoSURRQUdvaUFDZ0NBQ0FHVGcwRklBQWdCallDQUF3RkN5QUpRWUNBQWs0RVFFRUFRUU5Cb0FwQkFCQTRRWDhoREF3SkN5QUZJQWxCQVdvaUFEc0JBQ0FFSUFsQkFuUnFRWkNBeUFCcUlBQkJFSFJCRUhVMkFnQWdCQ0FKUVJ4c2FpSUNRWlNBMEFCcUlBWTJBZ0FnQWtHUWdOQUFha0VCTmdJQUlBSkJtSURRQUdvZ0NqWUNBQ0FDUVp5QTBBQnFJQVkyQWdBZ0FrR2dnTkFBYWlBR05nSUFJQUpCcElEUUFHb2dDallDQUNBQ1FhaUEwQUJxSUFvMkFnQWdBQ0VKREFRTElBVkJBRHNCQUNBUFFRQTZBQUFNQXdzZ0QwRUNhaUVQSUFWQkJHb2hCU0FLUVFGcUlRb2dBU0FNYWtFRWFpRU1EQVVMSUFRZ0FFRVFkRUVRZFVFY2JHb2lBRUgwLzg4QWFpSUNJQUlvQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlDSUFJb0FnQWdCbW8yQWdBZ0FFSDgvODhBYWlJQUlBQW9BZ0FnQ21vMkFnQU1BUXNnQkNBQVFSQjBRUkIxUVJ4c2FpSUFRWXlBMEFCcUlBbzJBZ0FnQUVIMC84OEFhaUlDSUFJb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJQ0lBSW9BZ0FnQm1vMkFnQWdBRUg4Lzg4QWFpSUFJQUFvQWdBZ0NtbzJBZ0FMSUE5QkFXb2hEeUFGUVFKcUlRVWdERUVDYWlFTUlBWkJBV29oQmd3QUN3QUxDeUFKUVFBZ0NVRUFTaHNpQTBFQmFpRUFRUUVoQWtFQklRVURRQ0FBSUFKR1JRUkFBa0FnQWlBSUtBSUFJZ0ZHQkVBZ0JTSUdRUUZxSVFVTUFRc2dBVUVDZENBRWFrR01nTWdBYWlnQ0FDRUdDeUFJSUFZMkFnQWdDRUVFYWlFSUlBSkJBV29oQWd3QkN3c2dCQ0FGUVFGcklnQTJBZ2dnQUVVRVFFRUFEd3RCQUNFR0lBUkJER3BCQUNBQVFRSjBFRHNhSUFSQmtJQW9ha0VBSUFCQkJIUVFPeG9nQUVFQUlBQkJBRW9iSVFnZ0JFR01nQWhxSVFCQkFDRUNBMEFnQWlBSVJnUkFJQVJCa0lBb2FpRUJBMEFnQXlBR1JnUkFRUUFoRENBRUtBSUlJZ0JCQUNBQVFRQktHeUVCSUFSQmtJQW9haUVBUVFBaEFnTkFJQUVnQWtZTkJTQUFJQUpCQkhRaUEyb2lDQ0FJS3dNQUlBUWdBa0VDZEdvb0FneTNJaFNqT1FNQUlBQWdBMEVJY21vaUF5QURLd01BSUJTak9RTUFJQUpCQVdvaEFnd0FDd0FMSUFRZ0JDQUdRUUowYWtHUWdNZ0FhaWdDQUVFQmF5SUNRUUowSWdocUlnQkJER29nQUNnQ0RDQUVJQVpCQjJ4QkFuUnFJZ0JCa0lEUUFHb29BZ0JxTmdJQUlBRWdBa0VFZENJQ2FpSUZJQVVyQXdBZ0FFR1VnTkFBYWlnQ0FMZWdPUU1BSUFFZ0FrRUljbW9pQlNBRkt3TUFJQUJCbUlEUUFHb29BZ0Mzb0RrREFDQUFRWnlBMEFCcUtBSUFJZ1VnQWlBRWFrR01nQWhxSWdJb0FnQklCRUFnQWlBRk5nSUFDeUFBUWFDQTBBQnFLQUlBSWdVZ0JDQUlRUUowSWdKQkJISnFRWXlBQ0dvaUNDZ0NBRW9FUUNBSUlBVTJBZ0FMSUFCQnBJRFFBR29vQWdBaUNDQUVJQUpCQ0hKcVFZeUFDR29pQlNnQ0FFZ0VRQ0FGSUFnMkFnQUxJQUJCcUlEUUFHb29BZ0FpQUNBRUlBSkJESEpxUVl5QUNHb2lBaWdDQUVvRVFDQUNJQUEyQWdBTElBWkJBV29oQmd3QUN3QUZJQUFnQWtFRWRDSUJhaUFOTmdJQUlBQWdBVUVFY21wQkFEWUNBQ0FBSUFGQkNISnFJQkEyQWdBZ0FDQUJRUXh5YWtFQU5nSUFJQUpCQVdvaEFnd0JDd0FMQUFzZ0RBdllFZ0lPZndGOElBRkJBbTBpREVFQUlBeEJBRW9iSVFvZ0JDZ0NBQ0lGSUFKQkFtMGlEMEVCYXlJSUlBeHNRUUYwYWlFSFFRQWhBaUFGSVFZRFFDQUNJQXBHUlFSQUlBZEJBRHNCQUNBR1FRQTdBUUFnQWtFQmFpRUNJQVpCQW1vaEJpQUhRUUpxSVFjTUFRc0xJQTlCQUNBUFFRQktHeUVMSUFVZ0RFRUJheUlLUVFGMGFpRUhRUUFoQWlBRklRWURRQ0FDSUF0R1JRUkFJQWRCQURzQkFDQUdRUUE3QVFBZ0FrRUJhaUVDSUFjZ0RFRUJkQ0lKYWlFSElBWWdDV29oQmd3QkN3c2dDRUVCSUFoQkFVb2JJUkFnQ2tFQklBcEJBVW9iSVJFZ0JFR1FnTWdBYWlFSUlBRkJBWFFnQUdwQkFtb2hEaUFNUVFGMElBVnFRUUpxSVFaQkFDQU1hMEVCZENFU1FRQWhDa0VCSVFBQ1FBTkFJQUFnRUVjRVFFRUJJUWNEUUFKQUFrQUNRQ0FISUJGSEJFQWdBeUFPTFFBQVRnUkFJQVlnRW1vaUFpOEJBQ0lGUVJCMFFSQjFJZ3RCQVU0RVFDQUdJQXM3QVFBZ0JDQUZRUnhzYWlJQ1FZeUEwQUJxSUFBMkFnQWdBa0gwLzg4QWFpSUZJQVVvQWdCQkFXbzJBZ0FnQWtINC84OEFhaUlGSUFVb0FnQWdCMm8yQWdBZ0FrSDgvODhBYWlJQ0lBSW9BZ0FnQUdvMkFnQU1CUXNnQWtFQ2F5OEJBQ0lMUVJCMFFSQjFJUVVnQWk0QkFpSUNRUUZPQkVBZ0JVRUJUZ1JBSUFSQmtJRElBR29pQ1NBQ1FRSjBha0VFYXlnQ0FDSUZJQXRCQW5RZ0NXcEJCR3NvQWdBaUMwb0VRQ0FHSUFzN0FRQkJBQ0VKSUFwQkFDQUtRUUJLR3lFTklBZ2hBZ05BSUFrZ0RVWUVRQ0FMSVFVTUNBc2dCU0FDS0FJQVJnUkFJQUlnQ3pZQ0FBc2dDVUVCYWlFSklBSkJCR29oQWd3QUN3QUxJQVlnQlRzQkFDQUZJQXRPRFFWQkFDRUpJQXBCQUNBS1FRQktHeUVOSUFnaEFnTkFJQWtnRFVZTkJpQUxJQUlvQWdCR0JFQWdBaUFGTmdJQUN5QUpRUUZxSVFrZ0FrRUVhaUVDREFBTEFBc2dCa0VDYXk0QkFDSUxRUUZPQkVBZ0JFR1FnTWdBYWlJSklBSkJBblJxUVFScktBSUFJZ1VnQzBILy93TnhRUUowSUFscVFRUnJLQUlBSWd0S0JFQWdCaUFMT3dFQVFRQWhDU0FLUVFBZ0NrRUFTaHNoRFNBSUlRSURRQ0FKSUExR0JFQWdDeUVGREFjTElBVWdBaWdDQUVZRVFDQUNJQXMyQWdBTElBbEJBV29oQ1NBQ1FRUnFJUUlNQUFzQUN5QUdJQVU3QVFBZ0JTQUxUZzBFUVFBaENTQUtRUUFnQ2tFQVNoc2hEU0FJSVFJRFFDQUpJQTFHRFFVZ0N5QUNLQUlBUmdSQUlBSWdCVFlDQUFzZ0NVRUJhaUVKSUFKQkJHb2hBZ3dBQ3dBTElBWWdBanNCQUNBRUlBSkJCMnhCQW5ScUlnSkI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQUpCK1AvUEFHb2lCU0FGS0FJQUlBZHFOZ0lBSUFKQi9QL1BBR29pQlNBRktBSUFJQUJxTmdJQUlBY2dBa0dBZ05BQWFpSUZLQUlBU0FSQUlBVWdCellDQUFzZ0FrR01nTkFBYWlBQU5nSUFEQVVMSUFWQkFVNEVRQ0FHSUFVN0FRQWdCQ0FMUVFkc1FRSjBhaUlDUWZUL3p3QnFJZ1VnQlNnQ0FFRUJhallDQUNBQ1Fmai96d0JxSWdVZ0JTZ0NBQ0FIYWpZQ0FDQUNRZnovendCcUlnVWdCU2dDQUNBQWFqWUNBQ0FISUFKQmhJRFFBR29pQlNnQ0FFb0VRQ0FGSUFjMkFnQUxJQUpCaklEUUFHb2dBRFlDQUF3RkN5QUdRUUpyTHdFQUlnSkJFSFJCRUhVaUJVRUJUZ1JBSUFZZ0JUc0JBQ0FFSUFKQkhHeHFJZ0pCOVAvUEFHb2lCU0FGS0FJQVFRRnFOZ0lBSUFKQitQL1BBR29pQlNBRktBSUFJQWRxTmdJQUlBSkIvUC9QQUdvaUJTQUZLQUlBSUFCcU5nSUFJQUpCaElEUUFHb2lBaWdDQUNBSFRnMEZJQUlnQnpZQ0FBd0ZDeUFLUVlDQUFrNEVRRUVBUVFOQmdBaEJBQkE0UVg4aEJRd0pDeUFHSUFwQkFXb2lBanNCQUNBRUlBcEJBblJxUVpDQXlBQnFJQUpCRUhSQkVIVTJBZ0FnQkNBS1FSeHNhaUlGUVpTQTBBQnFJQWMyQWdBZ0JVR1FnTkFBYWtFQk5nSUFJQVZCbUlEUUFHb2dBRFlDQUNBRlFaeUEwQUJxSUFjMkFnQWdCVUdnZ05BQWFpQUhOZ0lBSUFWQnBJRFFBR29nQURZQ0FDQUZRYWlBMEFCcUlBQTJBZ0FnQWlFS0RBUUxJQVpCQURzQkFBd0RDeUFHUVFScUlRWWdBRUVCYWlFQUlBRWdEbXBCQkdvaERnd0ZDeUFFSUFWQkVIUkJFSFZCSEd4cUlnSkI5UC9QQUdvaUJTQUZLQUlBUVFGcU5nSUFJQUpCK1AvUEFHb2lCU0FGS0FJQUlBZHFOZ0lBSUFKQi9QL1BBR29pQWlBQ0tBSUFJQUJxTmdJQURBRUxJQVFnQlVFUWRFRVFkVUVjYkdvaUFrR01nTkFBYWlBQU5nSUFJQUpCOVAvUEFHb2lCU0FGS0FJQVFRRnFOZ0lBSUFKQitQL1BBR29pQlNBRktBSUFJQWRxTmdJQUlBSkIvUC9QQUdvaUFpQUNLQUlBSUFCcU5nSUFDeUFHUVFKcUlRWWdEa0VDYWlFT0lBZEJBV29oQnd3QUN3QUxDeUFLUVFBZ0NrRUFTaHNpQTBFQmFpRUFRUUVoQWtFQklRWURRQ0FBSUFKR1JRUkFBa0FnQWlBSUtBSUFJZ0ZHQkVBZ0JpSUhRUUZxSVFZTUFRc2dBVUVDZENBRWFrR01nTWdBYWlnQ0FDRUhDeUFJSUFjMkFnQWdDRUVFYWlFSUlBSkJBV29oQWd3QkN3c2dCQ0FHUVFGcklnQTJBZ2dnQUVVRVFFRUFEd3RCQUNFSElBUkJER3BCQUNBQVFRSjBFRHNhSUFSQmtJQW9ha0VBSUFCQkJIUVFPeG9nQUVFQUlBQkJBRW9iSVFnZ0JFR01nQWhxSVFCQkFDRUNBMEFnQWlBSVJnUkFJQVJCa0lBb2FpRUJBMEFnQXlBSFJnUkFRUUFoQlNBRUtBSUlJZ0JCQUNBQVFRQktHeUVCSUFSQmtJQW9haUVBUVFBaEFnTkFJQUVnQWtZTkJTQUFJQUpCQkhRaUEyb2lDQ0FJS3dNQUlBUWdBa0VDZEdvb0FneTNJaE9qT1FNQUlBQWdBMEVJY21vaUF5QURLd01BSUJPak9RTUFJQUpCQVdvaEFnd0FDd0FMSUFRZ0JDQUhRUUowYWtHUWdNZ0FhaWdDQUVFQmF5SUNRUUowSWdocUlnQkJER29nQUNnQ0RDQUVJQWRCQjJ4QkFuUnFJZ0JCa0lEUUFHb29BZ0JxTmdJQUlBRWdBa0VFZENJQ2FpSUdJQVlyQXdBZ0FFR1VnTkFBYWlnQ0FMZWdPUU1BSUFFZ0FrRUljbW9pQmlBR0t3TUFJQUJCbUlEUUFHb29BZ0Mzb0RrREFDQUFRWnlBMEFCcUtBSUFJZ1lnQWlBRWFrR01nQWhxSWdJb0FnQklCRUFnQWlBR05nSUFDeUFBUWFDQTBBQnFLQUlBSWdZZ0JDQUlRUUowSWdKQkJISnFRWXlBQ0dvaUNDZ0NBRW9FUUNBSUlBWTJBZ0FMSUFCQnBJRFFBR29vQWdBaUNDQUVJQUpCQ0hKcVFZeUFDR29pQmlnQ0FFZ0VRQ0FHSUFnMkFnQUxJQUJCcUlEUUFHb29BZ0FpQUNBRUlBSkJESEpxUVl5QUNHb2lBaWdDQUVvRVFDQUNJQUEyQWdBTElBZEJBV29oQnd3QUN3QUZJQUFnQWtFRWRDSUJhaUFNTmdJQUlBQWdBVUVFY21wQkFEWUNBQ0FBSUFGQkNISnFJQTgyQWdBZ0FDQUJRUXh5YWtFQU5nSUFJQUpCQVdvaEFnd0JDd0FMQUFzZ0JRc0wrczhEU1FCQmdBZ0x0MEJGY25KdmNqb2diR0ZpWld4cGJtY2dkMjl5YXlCdmRtVnlabXh2ZHk0S0FFVnljbTl5T2lCc1lXSmxiR2x1WnlCM2IzSnJJRzkyWlhKbWJHOTNMZ29BUlhKeWIzSTZJR3hoWW1Wc2FXNW5JSGR2Y21zZ2IzWmxjbVpzYjNjdUNnQkZjbkp2Y2pvZ2JHRmlaV3hwYm1jZ2QyOXlheUJ2ZG1WeVpteHZkeTRLQUVWeWNtOXlPaUJzWVdKbGJHbHVaeUIzYjNKcklHOTJaWEptYkc5M0xnb0FSWEp5YjNJNklHeGhZbVZzYVc1bklIZHZjbXNnYjNabGNtWnNiM2N1Q2dCRmNuSnZjam9nYkdGaVpXeHBibWNnZDI5eWF5QnZkbVZ5Wm14dmR5NEtBRVZ5Y205eU9pQnNZV0psYkdsdVp5QjNiM0pySUc5MlpYSm1iRzkzTGdvQVJYSnliM0k2SUd4aFltVnNhVzVuSUhkdmNtc2diM1psY21ac2IzY3VDZ0JGY25KdmNqb2diR0ZpWld4cGJtY2dkMjl5YXlCdmRtVnlabXh2ZHk0S0FFVnljbTl5T2lCc1lXSmxiR2x1WnlCM2IzSnJJRzkyWlhKbWJHOTNMZ29BUlhKeWIzSTZJR3hoWW1Wc2FXNW5JSGR2Y21zZ2IzWmxjbVpzYjNjdUNnQlBkWFFnYjJZZ2JXVnRiM0o1SVNFS0FFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVB6OC9JREVLQUUxaGNtdGxjaUJQU3k0QVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0FnQ1FvTkFFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dBZ1BUMDlJRzFoZEhKcGVDQW9KV1FzSldRcElEMDlQUW9BZDJJQVlYSm5iRU5oYldWeVlVWnlkWE4wZFcxU1NDZ3BPaUJoY2xCaGNtRnRSR1ZqYjIxd1RXRjBLQ2tnYVc1a2FXTmhkR1ZrSUhCaGNtRnRaWFJsY2lCbGNuSnZjaTRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BSUQwOVBTQjJaV04wYjNJZ0tDVmtLU0E5UFQwS0FFUmhkR0VnYm5WdElHVnljbTl5SVNFS0FFVnljbTl5T2lCdFlXeHNiMk1LQUVWeWNtOXlPaUJ0WVd4c2IyTUtBRVZ5Y205eU9pQnRZV3hzYjJNS0FFVnljbTl5T2lCdFlXeHNiMk1LQUVWeWNtOXlJREU2SUdsamNFZGxkRWx1YVhSWWR6SllZd29BWkdWaWRXY0FKWE12SlhNQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BSlhNdUpYTUFKWE11SlhNQUpYTXVKWE1BWm5ObGRBQWpJeU1nUm1WaGRIVnlaU0JqWVc1a2FXUmhkR1Z6SUdadmNpQjBjbUZqYTJsdVp5QmhjbVVnYjNabGNtWnNiM2N1Q2dCVGRHRnlkQ0IwY21GamEybHVaMTkwYUhKbFlXUWdJeVZrTGdvQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BYTNCdFJHVnNaWFJsVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUhKbFprUmhkR0ZUWlhSUWRISXZjbVZtU1cxaFoyVXVDZ0FzQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG5OcGVtVW9LU0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzYVdSMGFDQStQU0ExWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdkMmxrZEdnZ1BqMGdNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHRMbmRwWkhSb0tDa2dQVDBnYVcwdWMzUmxjQ2dwTDNOcGVtVnZaaWhtYkc5aGRDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdBb2MzSmpYM2RwWkhSb0pUSXBJRDA5SURCZ0lHWmhhV3hsWkNCcGJpQUFZV3hzYjJOaGRHOXlQRlErT2pwaGJHeHZZMkYwWlNoemFYcGxYM1FnYmlrZ0oyNG5JR1Y0WTJWbFpITWdiV0Y0YVcxMWJTQnpkWEJ3YjNKMFpXUWdjMmw2WlFCQmMzTmxjblJwYjI0Z1lIZ2dQajBnYlUxcGJsaGdJR1poYVd4bFpDQnBiaUFBWVd4c2IyTmhkRzl5UEZRK09qcGhiR3h2WTJGMFpTaHphWHBsWDNRZ2Jpa2dKMjRuSUdWNFkyVmxaSE1nYldGNGFXMTFiU0J6ZFhCd2IzSjBaV1FnYzJsNlpRQWxiUzBsWkMwbFdTMGxTQzBsVFMwbFV3QkJjM05sY25ScGIyNGdZSGRwWkhSb0lENGdNR0FnWm1GcGJHVmtJR2x1SUFCaGJHeHZZMkYwYjNJOFZENDZPbUZzYkc5allYUmxLSE5wZW1WZmRDQnVLU0FuYmljZ1pYaGpaV1ZrY3lCdFlYaHBiWFZ0SUhOMWNIQnZjblJsWkNCemFYcGxBRUZ6YzJWeWRHbHZiaUJnYlZOMFlYSjBWR2x0WlNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUZWdWEyNXZkMjRnYjNJZ2RXNXpkWEJ3YjNKMFpXUWdiR0ZpWld4cGJtY2dkR2h5WlhOb2IyeGtJRzF2WkdVZ2NtVnhkV1Z6ZEdWa0xpQlRaWFFnZEc4Z2JXRnVkV0ZzTGdvQVB6OC9JRElLQUZCaGRIUmxjbTRnWlhoMGNtRmpkR2x2YmlCbVlXbHNaV1F1QUVWeWNtOXlPaUIxYm5OMWNIQnZjblJsWkNCd2FYaGxiQ0JtYjNKdFlYUXVDZ0JGY25KdmNqb2dUbFZNVENCd1lYUjBTR0Z1Wkd4bExnb0Fkd0JCVWw5UVNWaEZURjlHVDFKTlFWUmZVa2RDQUZOSldrVWdQU0FsWkN3Z0pXUUtBRVZ5Y205eUlDZ2xaQ2s2SUhWdVlXSnNaU0IwYnlCdmNHVnVJR05oYldWeVlTQndZWEpoYldWMFpYSnpJR1pwYkdVZ0lpVnpJaUJtYjNJZ2QzSnBkR2x1Wnk0S0FDVnpMaVZ6QUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BUlhKeWIzSTZJR2xqY0VkbGRFcGZWVjlZWXdCRmNuSnZjaUF5T2lCcFkzQkhaWFJKYm1sMFdIY3lXR01LQUdsdVptOEFjbUlBVkhKaFkydHBibWNnZEdoeVpXRmtJRDBnSldRS0FDVnpKWE1BSlhNdUpYTUFjZ0IzWWdCeVlnQWxjeTRsY3dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUVWdVpDQjBjbUZqYTJsdVoxOTBhSEpsWVdRZ0l5VmtMZ29BYTNCdFJHVnNaWFJsVW1WbVJHRjBZVk5sZENncE9pQXdJSGh6YVhwbEwzbHphWHBsTDJSd2FTNEtBQW9BSlhNdUpYTUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5a1pYUmxZM1J2Y25NdlJHOUhYM05qWVd4bFgybHVkbUZ5YVdGdWRGOWtaWFJsWTNSdmNpNWpjSEFBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDNkbFltRnlhMmwwTFc5eVp5OXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOWtaWFJsWTNSdmNuTXZaMkYxYzNOcFlXNWZjMk5oYkdWZmMzQmhZMlZmY0hseVlXMXBaQzVqY0hBQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwzZGxZbUZ5YTJsMExXOXlaeTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTlrWlhSbFkzUnZjbk12YUdGeWNtbHpMbU53Y0FBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmQyVmlZWEpyYVhRdGIzSm5MMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTl2Y21sbGJuUmhkR2x2Ymw5aGMzTnBaMjV0Wlc1MExtTndjQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OXdlWEpoYldsa0xtTndjQUJKUkNCaGJISmxZV1I1SUdWNGFYTjBjd0F2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyMWhkR05vWlhKekwyaHZkV2RvWDNOcGJXbHNZWEpwZEhsZmRtOTBhVzVuTG1Od2NBQkJjM05sY25ScGIyNGdZSEI1Y21GdGFXUmdJR1poYVd4bFpDQnBiaUFBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDNkbFltRnlhMmwwTFc5eVp5OXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOW1jbUZ0WlhkdmNtc3ZhVzFoWjJVdVkzQndBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpuSmhiV1YzYjNKckwzUnBiV1Z5Y3k1amNIQUFUVUZPVlVGTUFEOC9QeUF6Q2dCSFpXNWxjbWxqSUdWeWNtOXlJR1IxY21sdVp5QnRZWFJqYUdsdVp5QndhR0Z6WlM0QVJYSnliM0k2SUdOaGJpZDBJR3h2WVdRZ2NHRjBkR1Z5YmlCbWNtOXRJRTVWVEV3Z1luVm1abVZ5TGdvQUpUUmtBRUZTWDFCSldFVk1YMFpQVWsxQlZGOUNSMUlBSUNVeE1HY0FSR2x6ZEc5eWRHbHZiaUJtWVdOMGIzSTZJR3N4UFNVeExqRXdaaXdnYXpJOUpURXVNVEJtTENCd01UMGxNUzR4TUdZc0lIQXlQU1V4TGpFd1pnb0FKWE1sY3dvQWQySUFJQ1V4TUdjQVJYSnliM0lnYVdOd1IyVjBTbDlWWDFNS0FEMDlQVDA5UFNBbGN5QTlQVDA5UFQwOVBRb0FSWEp5YjNJZ016b2dhV053UjJWMFNXNXBkRmgzTWxoakNnQjNZWEp1YVc1bkFIZGlBSEppQUhkaUFFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVJYSnliM0lnYzJGMmFXNW5JR1psWVhSMWNtVWdiV0Z3T2lCbGNuSnZjaUIzY21sMGFXNW5JR1JoZEdFdUNnQkdhV3hsSUc5d1pXNGdaWEp5YjNJdUlDVnpDZ0J5QUVWeWNtOXlPaUJ0WVd4c2IyTUtBRTkxZENCdlppQnRaVzF2Y25raElRb0FhM0J0VTJWMFVtVm1SR0YwWVZObGRDZ3BPaUJPVlV4TUlHdHdiVWhoYm1Sc1pTOW1hV3hsYm1GdFpTNEtBQ0JzYVc1bElBQWdiR2x1WlNBQUlHeHBibVVnQUNCc2FXNWxJQUFnYkdsdVpTQUFRblZwYkdRZ1VIbHlZVzFwWkFBZ2JHbHVaU0FBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDNkbFltRnlhMmwwTFc5eVp5OXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOXRZWFJqYUdWeWN5OW1jbVZoYXk1b0FDQnNhVzVsSUFBZ2JHbHVaU0FBUVZWVVQxOU5SVVJKUVU0QVNXNXpkV1ptYVdOcFpXNTBJR052Ym5SeVlYTjBJR1IxY21sdVp5QnRZWFJqYUdsdVp5NEFSWEp5YjNJNklHOTFkQ0J2WmlCdFpXMXZjbmt1Q2dCQlVsOVFTVmhGVEY5R1QxSk5RVlJmVWtkQ1FRQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1lRDBsWml3Z1puazlKV1lzSUhnd1BTVm1MQ0I1TUQwbFppd2djejBsWmdvQUFFVnljbTl5T2lCVmJtRmliR1VnZEc4Z2IzQmxiaUJtYVd4bElDY2xjeWNnWm05eUlIZHlhWFJwYm1jdUNnQkZjbkp2Y2lCcFkzQkhaWFJWWDJaeWIyMWZXRjlpZVY5TllYUllNbFVLQUNVM0xqVm1JQUJGY25KdmNpQTBPaUJwWTNCSFpYUkpibWwwV0hjeVdHTUtBR1Z5Y205eUFFVnljbTl5SUdGc2JHOWpZWFJwYm1jZ2JXVnRiM0o1TGdvQVJYSnliM0k2SUhWdVlXSnNaU0IwYnlCdmNHVnVJR1pwYkdVZ0p5VnpKWE1uSUdadmNpQnlaV0ZrYVc1bkxnb0FSWEp5YjNJNklGVnVZV0pzWlNCMGJ5QnZjR1Z1SUdacGJHVWdKeVZ6SnlCbWIzSWdkM0pwZEdsdVp5NEtBQ1ZrQUhKaUFFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVJYSnliM0lnYjNCbGJtbHVaeUJtYVd4bElDY2xjeWM2SUFCR2NtVmhheUJtWldGMGRYSmxjeUF0SUNWa0FISmlBRG9nQURvZ0FEb2dBRG9nQURvZ0FFVjRkSEpoWTNRZ1JtVmhkSFZ5WlhNQU9pQUFJR3hwYm1VZ0FEb2dBRG9nQUVGVlZFOWZUMVJUVlFCQ1lYSmpiMlJsSUcxaGRHTm9hVzVuSUdOdmRXeGtJRzV2ZENCbWFXNWtJR052Y25KbFkzUWdZbUZ5WTI5a1pTQnNiMk5oZEc5eUlIQmhkSFJsY200dUFGQmhkSFJsY200Z1JHRjBZU0J5WldGa0lHVnljbTl5SVNFS0FFRlNYMUJKV0VWTVgwWlBVazFCVkY5Q1IxSkJBRVJwYzNSdmNuUnBiMjRnWm1GamRHOXlJRDBnSldZZ0pXWWdKV1lnSldZZ0pXWWdKV1lLQUhKaUFISmlBRVZ5Y205eUlHbGpjRWRsZEZoalgyWnliMjFmV0hkZllubGZUV0YwV0hjeVdHTUtBRVZ5Y205eUlEVTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FXeVZ6WFNBQVJYSnliM0lnYjNCbGJtbHVaeUFuSlhNbkxnb0FSWEp5YjNJZ2NtVmhaR2x1WnlCcGJXRm5aVk5sZEM0S0FISmlBQ1Z6QUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVW1WaFpDQmxjbkp2Y2lFaENnQWxjeVZ6Q2dCRmNuSnZjaUIzYUdsc1pTQmhaR1JwYm1jZ2NtVm1aWEpsYm1ObElHUmhkR0VnYzJWME9pQnJjRzFIWlc1U1pXWkVZWFJoVTJWMEtDa2dabUZwYkdWa0xnb0FRMkZ1SjNRZ2IzQmxiaUJLVUVWSElHWnBiR1VnSnlWekp3b0FVSGx5WVcxcFpDQnBjeUJ1YjNRZ1lXeHNiMk5oZEdWa0FFbHRZV2RsSUdseklIUnZieUJ6YldGc2JBQjNjQ0J0ZFhOMElHSmxJR0YwSUd4bFlYTjBJREVBVTNSbGNDQnphWHBsSUcxMWMzUWdZbVVnWlhGMVlXd2dkRzhnZDJsa2RHZ2dabTl5SUc1dmR3QlRiM1Z5WTJVZ2QybGtkR2dnYlhWemRDQmlaU0JsZG1WdUFGc2xjMTBnV3lWelhTQmJKWE5kSURvZ1JtOTFibVFnSldRZ1ptVmhkSFZ5WlhNQWVDQnZkWFFnYjJZZ2NtRnVaMlVBT2lBQVYybGtkR2dnWTJGdWJtOTBJR0psSUhwbGNtOEFRMnh2WTJzZ2FHRnpJRzV2ZENCaVpXVnVJSE4wWVhKMFpXUUFRVlZVVDE5QlJFRlFWRWxXUlFCQ1lYSmpiMlJsSUcxaGRHTm9hVzVuSUdWeWNtOXlJR1JsZEdWamRHbHZiaTlqYjNKeVpXTjBhVzl1SUdadmRXNWtJSFZ1Y21WamIzWmxjbUZpYkdVZ1pYSnliM0l1QUVWeWNtOXlJSEpsWVdScGJtY2djR0YwZEdWeWJpQm1hV3hsSUNjbGN5Y3VDZ0JCVWw5UVNWaEZURjlHVDFKTlFWUmZRVUpIVWdCRWFYTjBiM0owYVc5dUlHWmhZM1J2Y2lBOUlDVm1JQ1ZtSUNWbUlDVm1JQ1ZtQ2dCRmNuSnZjaUFvSldRcE9pQjFibUZpYkdVZ2RHOGdiM0JsYmlCallXMWxjbUVnY0dGeVlXMWxkR1Z5Y3lCbWFXeGxJQ0lsY3lJZ1ptOXlJSEpsWVdScGJtY3VDZ0JGY25KdmNqb2dWVzVoWW14bElIUnZJRzl3Wlc0Z1ptbHNaU0FuSlhNbklHWnZjaUJ5WldGa2FXNW5MZ29BUlhKeWIzSWdQU0FsWmdvQVJYSnliM0lnTmpvZ2FXTndSMlYwU1c1cGRGaDNNbGhqQ2dCRmNuSnZjaUJqY21WaGRHbHVaeUJtZFd4c0lHWnBiR1VnY0dGMGFDQm1jbTl0SUNjbGN5Y2dZVzVrSUNjbGN5Y0FTVzFoWjJWelpYUWdZMjl1ZEdGcGJuTWdKV1FnYVcxaFoyVnpMZ29BUlhKeWIzSTZJRlZ1WVdKc1pTQjBieUJ2Y0dWdUlHWnBiR1VnSnlWekp5Qm1iM0lnY21WaFpHbHVaeTRLQUNWbUFDQWdJQ0FnSUNBZ0lFbHRZV2RsVTJsNlpTQTlJQ1UzWkZ0d2FYaGxiRjBLQUhkaUFBQTlQVDA5UFQwOVBUMGdKV1FnUFQwOVBUMDlQVDA5UFQwS0FDVnpKWE1LQUVGemMyVnlkR2x2YmlCZ2JVbHRZV2RsY3k1emFYcGxLQ2tnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYUdWcFoyaDBJRDQ5SURWZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JvWldsbmFIUWdQajBnTVdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGdnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdSemRDQWhQU0F3WUNCbVlXbHNaV1FnYVc0Z0FDQkpUa1pQSUNBQVFYTnpaWEowYVc5dUlHQjRJRHdnYlUxaGVGaGdJR1poYVd4bFpDQnBiaUFBVUhseVlXMXBaQ0JwY3lCT1ZVeE1BRUZ6YzJWeWRHbHZiaUJnYUdWcFoyaDBJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZRzFUZEc5d1ZHbHRaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZWVkU5ZlFsSkJRMHRGVkVsT1J3Qk5ZWFJqYUdsdVp5QmpiMjVtYVdSbGJtTmxJR04xZEc5bVppQjJZV3gxWlNCdWIzUWdjbVZoWTJobFpDNEFKWE1sY3dvQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWDAxUFRrOEFSR2x6ZEc5eWRHbHZiaUJtWVdOMGIzSWdQU0FsWmlBbFppQWxaaUFsWmdvQVJYSnliM0lnS0NWa0tUb2dkVzVoWW14bElIUnZJR1JsZEdWeWJXbHVaU0JtYVd4bElHeGxibWQwYUM0QVJYSnliM0lnYVdOd01rZGxkRlJUQ2dCRmNuSnZjaUEzT2lCcFkzQkhaWFJKYm1sMFdIY3lXR01LQUVWeWNtOXlJR2x1SUc5d1pXNXBibWNnSnlWekp5QnBiaUI2YVhCbWFXeGxMZ29BUm1Gc2JHbHVaeUJpWVdOcklIUnZJSEpsWVdScGJtY2dKeVZ6SlhNbklHbHVJRUZTVkc5dmJFdHBkQ0IyTkM1NElHWnZjbTFoZEM0S0FFVnljbTl5SUhKbFlXUnBibWNnU2xCRlJ5Qm1hV3hsTGdvQUpXWWdKV1lnSldZZ0pXWUFSWGgwY21GamRHVmtJR1psWVhSMWNtVnpJRDBnSlRka1czQnBlR1ZzWFFvQVJYSnliM0lnYzJGMmFXNW5JR1psWVhSMWNtVWdjMlYwT2lCbGNuSnZjaUIzY21sMGFXNW5JR1JoZEdFdUNnQlBkWFFnYjJZZ2JXVnRiM0o1SVNFS0FFVnljbTl5SUhkb2FXeGxJR0ZrWkdsdVp5QnlaV1psY21WdVkyVWdaR0YwWVNCelpYUTZJR3R3YlUxbGNtZGxVbVZtUkdGMFlWTmxkQ2dwSUdaaGFXeGxaQzRLQUFCTVlYQnNZV05wWVc0Z2NIbHlZVzFwWkNCb1lYTWdibTkwSUdKbFpXNGdZV3hzYjJOaGRHVmtBRUZ6YzJWeWRHbHZiaUJnYVcxaFoyVXVkSGx3WlNncElEMDlJRWxOUVVkRlgxVkpUbFE0WUNCbVlXbHNaV1FnYVc0Z0FHaHdJRzExYzNRZ1ltVWdZWFFnYkdWaGMzUWdNUUI0SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBUkdWemRHbHVZWFJwYjI0Z2FYTWdUbFZNVEFCQ2RXbHNaQ0JKYm1SbGVBQkJjM05sY25ScGIyNGdZSGtnUGowZ2JVMXBibGxnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnpkRzl5WlM1emFYcGxLQ2tnUFQwZ2NHOXBiblJ6TG5OcGVtVW9LV0FnWm1GcGJHVmtJR2x1SUFCSVpXbG5hSFFnWTJGdWJtOTBJR0psSUhwbGNtOEFRMnh2WTJzZ2FHRnpJRzV2ZENCaVpXVnVJSE4wYjNCd1pXUUFBQUFBcnhBQUFERVRBQUFxRlFBQXR4Y0FBUFFhQUFCTVlXSmxiR2x1WnlCMGFISmxjMmh2YkdRZ2JXOWtaU0J6WlhRZ2RHOGdKWE11Q2dCTllYaHBiWFZ0SUdGc2JHOTNZV0pzWlNCd2IzTmxJR1Z5Y205eUlHVjRZMlZsWkdWa0xnQUFRVkpmVUVsWVJVeGZSazlTVFVGVVgwRlNSMElBUlhKeWIzSTZJSE4xY0hCc2FXVmtJR1pwYkdVZ1pHOWxjeUJ1YjNRZ1lYQndaV0Z5SUhSdklHSmxJR0Z1SUVGU1ZHOXZiRXRwZENCallXMWxjbUVnY0dGeVlXMWxkR1Z5SUdacGJHVXVDZ0JGY25KdmNpQnBiaUJ2Y0dWdWFXNW5JQ2NsY3ljZ1ptOXlJSEpsWVdScGJtY0tBSGRpQUVWeWNtOXlJSEpsWVdScGJtY2dTbEJGUnlCbWFXeGxJR2hsWVdSbGNpNEtBQ0JHYVd4MFpYSmxaQ0JtWldGMGRYSmxjeUE5SUNVM1pGdHdhWGhsYkYwS0FDVmtBR3R3YlVSbGJHVjBaVkpsWmtSaGRHRlRaWFFvS1RvZ1RsVk1UQ0J5WldaRVlYUmhVMlYwVUhSeU1TOXlaV1pFWVhSaFUyVjBVSFJ5TWk0S0FFTmhiaWQwSUhKbFlXUWdTbEJGUnlCbWFXeGxJQ2NsY3ljS0FFRnpjMlZ5ZEdsdmJpQmdjSGx5WVcxcFpDMCtiblZ0VDJOMFlYWmxjeWdwSUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJKYldGblpTQnRkWE4wSUdKbElHZHlZWGx6WTJGc1pRQkJjM05sY25ScGIyNGdZR2tyTVN0amFIVnVhMTl6YVhwbElEd2dkMmxrZEdoZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0I0SUR3Z2JVZHlZV1JwWlc1MGMxdHZZM1JoZG1VcWJVNTFiVk5qWVd4bGMxQmxjazlqZEdGMlpTdHpZMkZzWlYwdWQybGtkR2dvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSE55WXlBaFBTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2NIbHlZVzFwWkdBZ1ptRnBiR1ZrSUdsdUlBQjVJRzkxZENCdlppQnlZVzVuWlFCR1pXRjBkWEpsSUhOMGIzSmxJR2hoY3lCdWIzUWdZbVZsYmlCaGJHeHZZMkYwWldRQVFYTnpaWEowYVc5dUlHQnpkR1Z3SUQ0OUlIZHBaSFJvWUNCbVlXbHNaV1FnYVc0Z0FGc2xjMTBnV3lWelhTQmJKWE5kSURvZ0pYTTZJQ1ZtSUcxekFFVnljbTl5T2lCVmJuTjFjSEJ2Y25SbFpDQndhWGhsYkNCbWIzSnRZWFFnS0NWa0tTQnlaWEYxWlhOMFpXUXVDZ0JOZFd4MGFTMXRZWEpyWlhJZ2NHOXpaU0JsY25KdmNpQjJZV3gxWlNCbGVHTmxaV1JsWkM0QVFWSmZVRWxZUlV4ZlJrOVNUVUZVWHpKMmRYa0FKVGN1TldZZ0FFVnljbTl5SUNnbFpDazZJSFZ1WVdKc1pTQjBieUJ5WldGa0lHWnliMjBnWm1sc1pTNEFSWEp5YjNJZ2FXNGdjbVZoWkdsdVp5QW5KWE1uTGdvQVJYSnliM0k2SUhWdVlXSnNaU0IwYnlCdmNHVnVJR1pwYkdVZ0p5VnpKeUJtYjNJZ2QzSnBkR2x1Wnk0S0FBMGxOR1F2SlRSa0xnQUtJeU1qSUZOMWNtWmhZMlVnVG04dUpXUWdJeU1qQ2dCcmNHMUVaV3hsZEdWU1pXWkVZWFJoVTJWMEtDazZJRTVWVEV3Z2NtVm1SR0YwWVZObGRGQjBjaTRLQUd0d2JWTmxkRkpsWmtSaGRHRlRaWFFvS1RvZ1RsVk1UQ0JyY0cxSVlXNWtiR1V2Y21WbVJHRjBZVk5sZEM0S0FGQjVjbUZ0YVdRZ1pHOWxjeUJ1YjNRZ1kyOXVkR0ZwYmlCaGJua2diR1YyWld4ekFFRnpjMlZ5ZEdsdmJpQmdhVzFoWjJVdVkyaGhibTVsYkhNb0tTQTlQU0F4WUNCbVlXbHNaV1FnYVc0Z0FFVjRkR1Z1WkdsdVp5QmlaWGx2Ym1RZ2RHaGxJSGRwWkhSb0lHOW1JSFJvWlNCcGJXRm5aUUI0SUcxMWMzUWdZbVVnYkdWemN5QjBhR0Z1SUhSb1pTQnBiV0ZuWlNCM2FXUjBhQUJUYjNWeVkyVWdhWE1nVGxWTVRBQXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZkMlZpWVhKcmFYUXRiM0puTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDIxaGRHTm9aWEp6TDNacGMzVmhiRjlrWVhSaFltRnpaUzVvQUVGemMyVnlkR2x2YmlCZ2VTQThJRzFOWVhoWllDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYm5WdFgzQnZhVzUwY3lBOVBTQndiMmx1ZEhNdWMybDZaU2dwWUNCbVlXbHNaV1FnYVc0Z0FGTjBaWEFnYlhWemRDQmlaU0JuY21WaGRHVnlJSFJvWVc0Z2IzSWdaWEYxWVd3Z2RHaGxJSGRwWkhSb0FDQkpUa1pQSUNBQVFjVElBQXV0SFFFQUFBQUJBQUFBQVFBQUFBQUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3dBQUFBQUJBQUFBQVFBQUFBRUFBQUFBQUFBQS8vLy8vMUpsYW1WamRHVmtJR1p5WlhGMVpXNTBiSGtnYldsemNtVmpiMmR1YVhObFpDQnRZWFJ5YVhnZ2JXRnlhMlZ5TGdCQlVsOVFTVmhGVEY5R1QxSk5RVlJmZVhWMmN3QkZjbkp2Y2pvZ2MzVndjR3hwWldRZ1luVm1abVZ5SUdSdlpYTWdibTkwSUdGd2NHVmhjaUIwYnlCaVpTQkJVbFJ2YjJ4TGFYUWdZMkZ0WlhKaElIQmhjbUZ0WlhSbGNuTXVDZ0JGY25KdmNpQnBiaUIzY21sMGFXNW5JQ2NsY3ljZ2FXNGdkR2hsSUhwcGNHWnBiR1V1Q2dCRmNuSnZjaUJ6WVhacGJtY2dhVzFoWjJVZ2MyVjBPaUJsY25KdmNpQjNjbWwwYVc1bklHUmhkR0V1Q2dBS0FDVnpBR3R3YlZOaGRtVlNaV1pFWVhSaFUyVjBLQ2s2SUU1VlRFd2dabWxzWlc1aGJXVXZjbVZtUkdGMFlWTmxkQzRLQUd0d2JWTmxkRkpsWmtSaGRHRlRaWFFvS1RvZ2NtVm1SR0YwWVZObGRDNEtBRUZ6YzJWeWRHbHZiaUJnWkhsdVlXMXBZMTlqWVhOMFBHTnZibk4wSUVKcGJtOXRhV0ZzVUhseVlXMXBaRE15WmlvK0tIQjVjbUZ0YVdRcFlDQm1ZV2xzWldRZ2FXNGdBRWx0WVdkbElHMTFjM1FnYUdGMlpTQXhJR05vWVc1dVpXd0FRWE56WlhKMGFXOXVJR0JpZFdOclpYUmJNRjB1Wm1seWMzUWdQajBnWW5WamEyVjBXMjVkTG1acGNuTjBZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2VTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjM0pqWDNkcFpIUm9JRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQWdiR2x1WlNBQVFYTnpaWEowYVc5dUlHQmhibWRzWlNBK0lDMVFTV0FnWm1GcGJHVmtJR2x1SUFCVGFHOTFiR1FnWW1VZ2MyRnRaU0J6YVhwbEFFRnpjMlZ5ZEdsdmJpQmdZMmhoYm01bGJITWdQaUF3WUNCbVlXbHNaV1FnYVc0Z0FFRjFkRzhnZEdoeVpYTm9iMnhrSUNoaWNtRmphMlYwS1NCdFlYSnJaWElnWTI5MWJuUnpJQzFiSlROa09pQWxNMlJkSUZzbE0yUTZJQ1V6WkYwZ1d5VXpaRG9nSlROa1hTc3VDZ0JCVWw5UVNWaEZURjlHVDFKTlFWUmZVa2RDWHpVMk5RQkdhV1ZzWkMxdlppMTJhV1YzSUhabGNuUnBZMkZzSUQwZ0pTNHhaaXdnYUc5eWFYcHZiblJoYkNBOUlDVXVNV1lnWkdWbmNtVmxjeXdnWVhOd1pXTjBJSEpoZEdsdklEMGdKUzR6WmdvQVJYSnliM0lnS0NWa0tUb2dkVzVoWW14bElIUnZJRzl3Wlc0Z1pYaDBaWEp1WVd3Z2NHRnlZVzFsZEdWeWN5Qm1hV3hsSUNJbGN5SWdabTl5SUhkeWFYUnBibWN1Q2dCRmNuSnZjaUJwYmlCamJHOXphVzVuSUNWeklHbHVJSFJvWlNCNmFYQm1hV3hsTGdvQVRXRjRJR1psWVhSMWNtVWdQU0FsWkFvQUlDQlNaV0ZrSUVsdFlXZGxVMlYwTGdvQVJYSnliM0lnYzJGMmFXNW5JRXRRVFNCa1lYUmhPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQm1hV3hsSUNjbGN5VnpKWE1uSUdadmNpQjNjbWwwYVc1bkxnb0FUM1YwSUc5bUlHMWxiVzl5ZVNFaENnQlBibXg1SUdKcGJtOXRhV0ZzSUhCNWNtRnRhV1FnYVhNZ2MzVndjRzl5ZEdWa0FFRnpjMlZ5ZEdsdmJpQmdiVkI1Y21GdGFXUXVjMmw2WlNncElEMDlJRzFPZFcxUFkzUmhkbVZ6S20xT2RXMVRZMkZzWlhOUVpYSlBZM1JoZG1WZ0lHWmhhV3hsWkNCcGJpQUFiblJvWDJWc1pXMWxiblFnWm1GcGJHVmtBSGtnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJYYVdSMGFDQnRkWE4wSUdKbElIQnZjMmwwYVhabEFEb2dBR0Z1WjJ4bElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUc5amRHRjJaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRTUxYldKbGNpQnZaaUJqYUdGdWJtVnNjeUJqWVc1dWIzUWdZbVVnZW1WeWJ3QkJkWFJ2SUhSb2NtVnphRzlzWkNBb1luSmhZMnRsZENrZ1lXUnFkWE4wWldRZ2RHaHlaWE5vYjJ4a0lIUnZJQ1ZrTGdvQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWDFKSFFrRmZOVFUxTVFCRmNuSnZjaUFvSldRcE9pQjFibUZpYkdVZ2RHOGdiM0JsYmlCbGVIUmxjbTVoYkNCd1lYSmhiV1YwWlhKeklHWnBiR1VnSWlWeklpQm1iM0lnY21WaFpHbHVaeTRLQUVWeWNtOXlJR2x1SUdOc2IzTnBibWNnSnlWekp5NEtBQ1V6WkRvZ0tDVXpaQ3dsTTJRcElEb2dKV1lnYldsdVBTVm1JRzFoZUQwbFppd2djMlE5SldZS0FFVnljbTl5SUc5d1pXNXBibWNnWm1sc1pTQW5KWE11YVhObGRDY3VDZ0F1QUhCaFoyVWdKV1FzSUdsdFlXZGxJRzUxYlNBbFpDd2djRzlwYm5SeklDMGdKV1FLQUVGemMyVnlkR2x2YmlCZ1pDNTBlWEJsS0NrZ1BUMGdTVTFCUjBWZlJqTXlZQ0JtWVdsc1pXUWdhVzRnQUZCNWNtRnRhV1FnYUdGeklHNXZkQ0JpWldWdUlHRnNiRzlqWVhSbFpDQjVaWFFBUVhOelpYSjBhVzl1SUdCd1d6QmRJRDRnY0cweFd5MHhYV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lIa2dQQ0J0UjNKaFpHbGxiblJ6VzI5amRHRjJaU3B0VG5WdFUyTmhiR1Z6VUdWeVQyTjBZWFpsSzNOallXeGxYUzVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lITnlZMTlvWldsbmFIUWdQaUF3WUNCbVlXbHNaV1FnYVc0Z0FGQjVjbUZ0YVdRZ2FYTWdUbFZNVEFCQmMzTmxjblJwYjI0Z1lHRnVaMnhsSUR3OUlGQkpZQ0JtWVdsc1pXUWdhVzRnQUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5M1pXSmhjbXRwZEMxdmNtY3Zhbk5oY25SdmIyeHJhWFJPUmxRdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMmRoZFhOemFXRnVYM05qWVd4bFgzTndZV05sWDNCNWNtRnRhV1F1YUFCQmMzTmxjblJwYjI0Z1lHMUVZWFJoTG1kbGRDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGMWRHOGdkR2h5WlhOb2IyeGtJQ2dsY3lrZ1lXUnFkWE4wWldRZ2RHaHlaWE5vYjJ4a0lIUnZJQ1ZrTGdvQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWDFKSFFrRmZORFEwTkFCYkpTQXVNMllnSlNBdU0yWWdKU0F1TTJaZElGc2xJRFl1TVdaZENnQkZjbkp2Y2lBb0pXUXBPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQnZjSFJwWTJGc0lIQmhjbUZ0WlhSbGNuTWdabWxzWlNBaUpYTWlJR1p2Y2lCM2NtbDBhVzVuTGdvQUxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdENnQWdJQ0FnWlc1a0xnb0FBR3R3YlZObGRGSmxaa1JoZEdGVFpYUkdhV3hsS0NrNklFNVZURXdnYTNCdFNHRnVaR3hsTDJacGJHVnVZVzFsTGdvQVQyNXNlU0JHTXpJZ2FXMWhaMlZ6SUhOMWNIQnZjblJsWkFCQmMzTmxjblJwYjI0Z1lHbHRZV2RsTG5kcFpIUm9LQ2tnUFQwZ2JWQjVjbUZ0YVdSYk1GMHVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUJUYUc5MWJHUWdZbVVnYldGNGFXMWhBSGtnYlhWemRDQmlaU0JzWlhOeklIUm9ZVzRnZEdobElHbHRZV2RsSUdobGFXZG9kQUJJWldsbmFIUWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQkJjM05sY25ScGIyNGdZR1JsZEdWamRHOXlZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2MyTmhiR1VnUGowZ2JVMXBibE5qWVd4bFlDQm1ZV2xzWldRZ2FXNGdBRTlqZEdGMlpTQnRkWE4wSUdKbElIQnZjMmwwYVhabEFFUmhkR0VnY0c5cGJuUmxjaUJwY3lCT1ZVeE1BRzFsWkdsaGJnQkJVbDlRU1ZoRlRGOUdUMUpOUVZSZk5ESXdkZ0JGY25KdmNpQW9KV1FwT2lCMWJtRmliR1VnZEc4Z2IzQmxiaUJ2Y0hScFkyRnNJSEJoY21GdFpYUmxjbk1nWm1sc1pTQWlKWE1pSUdadmNpQnlaV0ZrYVc1bkxnb0FKVE5rTENBbE0yUTZJRzFoZUY5emFXMGdQU0FsWmdvQUlDQlNaV0ZrSUVabFlYUjFjbVZUWlhRdUNnQkZjbkp2Y2lCellYWnBibWNnUzFCTklHUmhkR0U2SUdWeWNtOXlJSGR5YVhScGJtY2daR0YwWVM0S0FFTmhibTV2ZENCbWFXNWtJSFJvWlNCd1lXZGxJR1p2Y2lCemEybHdjR2x1Wnk0S0FFRnpjMlZ5ZEdsdmJpQmdhVzB4TG5SNWNHVW9LU0E5UFNCSlRVRkhSVjlHTXpKZ0lHWmhhV3hsWkNCcGJpQUFTVzFoWjJVZ2IyWWdkM0p2Ym1jZ2MybDZaU0JtYjNJZ2NIbHlZVzFwWkFCQmMzTmxjblJwYjI0Z1lIQmJNRjBnUGlCd2JURmJNRjFnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQm5MbU5vWVc1dVpXeHpLQ2tnUFQwZ01tQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhOeVkxOXpkR1Z3SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJFWlhSbFkzUnZjaUJwY3lCT1ZVeE1BSE5qWVd4bElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUc5amRHRjJaU0E4SUcxT2RXMVBZM1JoZG1WellDQm1ZV2xzWldRZ2FXNGdBRlZ1WVdKc1pTQjBieUJoYkd4dlkyRjBaU0JwYldGblpTQmtZWFJoQUU5MGMzVUFRVkpmVUVsWVJVeGZSazlTVFVGVVh6UXlNR1lBSlRjdU5HWWdBRVZ5Y205eUlHOXdaVzVwYm1jZ1ptbHNaU0FuSlhNdVpuTmxkQ2N1Q2dCcmNHMU1iMkZrVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUdacGJHVnVZVzFsTDNKbFprUmhkR0ZUWlhSUWRISXVDZ0JyY0cxTllYUmphR2x1WnlncE9pQk9WVXhNSUd0d2JVaGhibVJzWlM5cGJrbHRZV2RsVEhWdFlTNEtBRUZ6YzJWeWRHbHZiaUJnYVcweUxuUjVjR1VvS1NBOVBTQkpUVUZIUlY5R016SmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCcGJXRm5aUzVvWldsbmFIUW9LU0E5UFNCdFVIbHlZVzFwWkZzd1hTNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhCYk1GMGdQaUJ3YlRGYk1WMWdJR1poYVd4bFpDQnBiaUFBVG5WdFltVnlJRzltSUdOb1lXNXVaV3h6SUhOb2IzVnNaQ0JpWlNBeUFGTjBaWEFnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG1sdFlXZGxjeWdwTG5OcGVtVW9LU0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J6WTJGc1pTQThJRzFOWVhoVFkyRnNaV0FnWm1GcGJHVmtJR2x1SUFCUFkzUmhkbVVnYlhWemRDQmlaU0JzWlhOeklIUm9ZVzRnYm5WdFltVnlJRzltSUc5amRHRjJaWE1BU1c1MllXeHBaQ0JwYldGblpTQjBlWEJsQUFBQkFBQUFDUUFBQUFVQUFBQUVBQUFBQXdBQUFBSUFRWVBtQUF2Tm13RUJBQUVCQVFBQ0JQLy9CUU1CQUFML0JnZi9Bd0VDQWdNQ0F3SURBd0QvQkFZSEJmOEJCQVVFQkFVRkJBVUhCZ1lHQndjSEJ2OENCQVlIQlFQL0FQLy9BLzhGQnYvL0NRci9EUC8vRC84UkV2OFUvLzhYR1AvL0cvOGRIdi8vQVFML0JQLy9Cd2ovL3d2L0RRNy9FUC8vRS84VkZ2Ly9HUnIvSFAvL0h3RUFBQUFDQUFBQUJBQUFBQWdBQUFBREFBQUFCZ0FBQUF3QUFBQUxBQUFBQlFBQUFBb0FBQUFIQUFBQURnQUFBQThBQUFBTkFBQUFDUUFBQUFBQUFBRC8vLy8vQUFBQUFBRUFBQUFFQUFBQUFnQUFBQWdBQUFBRkFBQUFDZ0FBQUFNQUFBQU9BQUFBQ1FBQUFBY0FBQUFHQUFBQURRQUFBQXNBQUFBTUFBQUFBUUFBQUFJQUFBQUVBQUFBQ0FBQUFCQUFBQUFGQUFBQUNnQUFBQlFBQUFBTkFBQUFHZ0FBQUJFQUFBQUhBQUFBRGdBQUFCd0FBQUFkQUFBQUh3QUFBQnNBQUFBVEFBQUFBd0FBQUFZQUFBQU1BQUFBR0FBQUFCVUFBQUFQQUFBQUhnQUFBQmtBQUFBWEFBQUFDd0FBQUJZQUFBQUpBQUFBRWdBQUFBQUFBQUQvLy8vL0FBQUFBQUVBQUFBU0FBQUFBZ0FBQUFVQUFBQVRBQUFBQ3dBQUFBTUFBQUFkQUFBQUJnQUFBQnNBQUFBVUFBQUFDQUFBQUF3QUFBQVhBQUFBQkFBQUFBb0FBQUFlQUFBQUVRQUFBQWNBQUFBV0FBQUFIQUFBQUJvQUFBQVZBQUFBR1FBQUFBa0FBQUFRQUFBQURRQUFBQTRBQUFBWUFBQUFEd0FBQUFFQUFBQUNBQUFBQkFBQUFBZ0FBQUFRQUFBQUlBQUFBRUFBQUFBREFBQUFCZ0FBQUF3QUFBQVlBQUFBTUFBQUFHQUFBQUJEQUFBQUJRQUFBQW9BQUFBVUFBQUFLQUFBQUZBQUFBQWpBQUFBUmdBQUFBOEFBQUFlQUFBQVBBQUFBSGdBQUFCekFBQUFaUUFBQUVrQUFBQVJBQUFBSWdBQUFFUUFBQUFMQUFBQUZnQUFBQ3dBQUFCWUFBQUFNd0FBQUdZQUFBQlBBQUFBSFFBQUFEb0FBQUIwQUFBQWF3QUFBRlVBQUFBcEFBQUFVZ0FBQUNjQUFBQk9BQUFBSHdBQUFENEFBQUI4QUFBQWV3QUFBSFVBQUFCcEFBQUFVUUFBQUNFQUFBQkNBQUFBQndBQUFBNEFBQUFjQUFBQU9BQUFBSEFBQUFCakFBQUFSUUFBQUFrQUFBQVNBQUFBSkFBQUFFZ0FBQUFUQUFBQUpnQUFBRXdBQUFBYkFBQUFOZ0FBQUd3QUFBQmJBQUFBTlFBQUFHb0FBQUJYQUFBQUxRQUFBRm9BQUFBM0FBQUFiZ0FBQUY4QUFBQTlBQUFBZWdBQUFIY0FBQUJ0QUFBQVdRQUFBREVBQUFCaUFBQUFSd0FBQUEwQUFBQWFBQUFBTkFBQUFHZ0FBQUJUQUFBQUpRQUFBRW9BQUFBWEFBQUFMZ0FBQUZ3QUFBQTdBQUFBZGdBQUFHOEFBQUJkQUFBQU9RQUFBSElBQUFCbkFBQUFUUUFBQUJrQUFBQXlBQUFBWkFBQUFFc0FBQUFWQUFBQUtnQUFBRlFBQUFBckFBQUFWZ0FBQUM4QUFBQmVBQUFBUHdBQUFINEFBQUIvQUFBQWZRQUFBSGtBQUFCeEFBQUFZUUFBQUVFQUFBQUFBQUFBLy8vLy93QUFBQUFCQUFBQUJ3QUFBQUlBQUFBT0FBQUFDQUFBQURnQUFBQURBQUFBUHdBQUFBOEFBQUFmQUFBQUNRQUFBRm9BQUFBNUFBQUFGUUFBQUFRQUFBQWNBQUFBUUFBQUFFTUFBQUFRQUFBQWNBQUFBQ0FBQUFCaEFBQUFDZ0FBQUd3QUFBQmJBQUFBUmdBQUFEb0FBQUFtQUFBQUZnQUFBQzhBQUFBRkFBQUFOZ0FBQUIwQUFBQVRBQUFBUVFBQUFGOEFBQUJFQUFBQUxRQUFBQkVBQUFBckFBQUFjUUFBQUhNQUFBQWhBQUFBVFFBQUFHSUFBQUIxQUFBQUN3QUFBRmNBQUFCdEFBQUFJd0FBQUZ3QUFBQktBQUFBUndBQUFFOEFBQUE3QUFBQWFBQUFBQ2NBQUFCa0FBQUFGd0FBQUZJQUFBQXdBQUFBZHdBQUFBWUFBQUIrQUFBQU53QUFBQTBBQUFBZUFBQUFQZ0FBQUJRQUFBQlpBQUFBUWdBQUFCc0FBQUJnQUFBQWJ3QUFBRVVBQUFCckFBQUFMZ0FBQUNVQUFBQVNBQUFBTlFBQUFDd0FBQUJlQUFBQWNnQUFBQ29BQUFCMEFBQUFUQUFBQUNJQUFBQldBQUFBVGdBQUFFa0FBQUJqQUFBQVp3QUFBSFlBQUFCUkFBQUFEQUFBQUgwQUFBQllBQUFBUFFBQUFHNEFBQUFhQUFBQUpBQUFBR29BQUFCZEFBQUFOQUFBQUVzQUFBQXBBQUFBU0FBQUFGVUFBQUJRQUFBQVpnQUFBRHdBQUFCOEFBQUFhUUFBQUJrQUFBQW9BQUFBTXdBQUFHVUFBQUJVQUFBQUdBQUFBSHNBQUFCVEFBQUFNZ0FBQURFQUFBQjZBQUFBZUFBQUFIa0FBQUJCVWw5UVNWaEZURjlHVDFKTlFWUmZUbFl5TVFBbE0yUXNJQ1V6WkRvZ2JXRjRYM05wYlNBOUlDVm1MQ0FvYldGNExHMXBiaWtnUFNBbFppd2dKV1lzSUhOa0lEMGdKV1lLQUNBZ1VtVmhaQ0JOWVhKclpYSlRaWFF1Q2dCRmNuSnZjaUJzYjJGa2FXNW5JRXRRVFNCa1lYUmhPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQm1hV3hsSUNjbGN5VnpKWE1uSUdadmNpQnlaV0ZrYVc1bkxnb0FVR0ZuWlZzbFpGMGdJSEJ5WlRvbE0yUXNJR0ZtZERvbE0yUXNJR1Z5Y205eUlEMGdKV1lLQUVGemMyVnlkR2x2YmlCZ1pDNWphR0Z1Ym1Wc2N5Z3BJRDA5SURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JrYzNRdWRIbHdaU2dwSUQwOUlFbE5RVWRGWDBZek1tQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhCYk1GMGdQaUJ3V3kweFhXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUcxaGVGOW9aV2xuYUhRZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1pITjBYM2RwWkhSb0lENGdNR0FnWm1GcGJHVmtJR2x1SUFCUWVYSmhiV2xrSUdseklHVnRjSFI1QUVGemMyVnlkR2x2YmlCZ2MybDZaU0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J6WTJGc1pTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FHRnlWWFJwYkVkbGRGQnBlR1ZzUm05eWJXRjBUbUZ0WlRvZ1JYSnliM0lzSUhWdWNtVmpiMmR1YVhObFpDQndhWGhsYkNCbWIzSnRZWFFnS0NWa0tTNEtBRzF5YXdCRmNuSnZjaUJzYjJGa2FXNW5JRXRRVFNCa1lYUmhPaUJsY25KdmNpQnlaV0ZrYVc1bklHUmhkR0V1Q2dCS1VFVkhJR1pwYkdVZ2FHRnpJSFZ1YzNWd2NHOXlkR1ZrSUNWa0xXTnZiWEJ2Ym1WdWRDQndhWGhsYkhNS0FFOXViSGtnYzJsdVoyeGxJR05vWVc1dVpXd2dhVzFoWjJWeklITjFjSEJ2Y25SbFpBQkVaWE4wYVc1aGRHbHZiaUJwYldGblpTQnphRzkxYkdRZ1ltVWdZU0JtYkc5aGRBQkJjM05sY25ScGIyNGdZSEJiTUYwZ1BpQndXekZkWUNCbVlXbHNaV1FnYVc0Z0FFMWhlR2x0ZFcwZ1ltbHVJSE5vYjNWc1pDQmlaU0J3YjNOcGRHbDJaUUJCYzNObGNuUnBiMjRnWUdSemRGOXpkR1Z3SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG1sdFlXZGxjeWdwV3pCZExuZHBaSFJvS0NrZ1BUMGdaR1YwWldOMGIzSXRQbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBYzJsNlpTQnRkWE4wSUdKbElIQnZjMmwwYVhabEFGTmpZV3hsSUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBVDNWMElHOW1JRzFsYlc5eWVTNEtBRVZ5Y205eUlHOXdaVzVwYm1jZ1ptbHNaU0FuSlhNdWJYSnJKeTRLQUd0d2JVTm9ZVzVuWlZCaFoyVk9iMDltVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUhKbFprUmhkR0ZUWlhRdUNnQmhiR3h2WTJGMGIzSThWRDQ2T21Gc2JHOWpZWFJsS0hOcGVtVmZkQ0J1S1NBbmJpY2daWGhqWldWa2N5QnRZWGhwYlhWdElITjFjSEJ2Y25SbFpDQnphWHBsQUVGemMyVnlkR2x2YmlCZ2FXMHhMbU5vWVc1dVpXeHpLQ2tnUFQwZ01XQWdabUZwYkdWa0lHbHVJQUJWYm10dWIzZHVJR2x0WVdkbElIUjVjR1VBUVhOelpYSjBhVzl1SUdCd1d6QmRJRDRnY0hBeFd5MHhYV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHaHBjM1FnSVQwZ1RsVk1UR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaHpjbU5mZDJsa2RHZ2xNaWtnUFQwZ01XQWdabUZwYkdWa0lHbHVJQUJRZVhKaGJXbGtJR0Z1WkNCa1pYUmxZM1J2Y2lCemFYcGxJRzFwYzIxaGRHTm9BRUZ6YzJWeWRHbHZiaUJnYlZKbFprbHRZV2RsVjJsa2RHZ2dQaUF3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjMk5oYkdVZ1BDQnRUblZ0VTJOaGJHVnpVR1Z5VDJOMFlYWmxZQ0JtWVdsc1pXUWdhVzRnQUNVbEpUQXllQUFsWmlBbFppQWxaaUFsWmdCQmMzTmxjblJwYjI0Z1lHbHRNaTVqYUdGdWJtVnNjeWdwSUQwOUlERmdJR1poYVd4bFpDQnBiaUFBVlc1emRYQndiM0owWldRZ2FXMWhaMlVnZEhsd1pRQkJjM05sY25ScGIyNGdZSEJiTUYwZ1BpQndjREZiTUYxZ0lHWmhhV3hsWkNCcGJpQUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5a1pYUmxZM1J2Y25NdmIzSnBaVzUwWVhScGIyNWZZWE56YVdkdWJXVnVkQzVvQUZOdmRYSmpaU0IzYVdSMGFDQnRkWE4wSUdKbElHOWtaQUJCYzNObGNuUnBiMjRnWUhCNWNtRnRhV1F0UG1sdFlXZGxjeWdwV3pCZExtaGxhV2RvZENncElEMDlJR1JsZEdWamRHOXlMVDVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCM2FXUjBhQ0J0ZFhOMElHSmxJSEJ2YzJsMGFYWmxBRk5qWVd4bElHMTFjM1FnWW1VZ2JHVnpjeUIwYUdGdUlHNTFiV0psY2lCdlppQnpZMkZzWlNCd1pYSWdiMk4wWVhabEFDOXdjbTlqTDNObGJHWXZaWGhsQUZSeVlXNXpabTl5YldGMGFXOXVJRzFoZEhKcGVDQnlaV0ZrSUdWeWNtOXlJU0VLQUVGemMyVnlkR2x2YmlCZ1pDNTNhV1IwYUNncElEMDlJR2x0TWk1M2FXUjBhQ2dwWUNCbVlXbHNaV1FnYVc0Z0FHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBUVhOelpYSjBhVzl1SUdCd1d6QmRJRDRnY0hBeFd6RmRZQ0JtWVdsc1pXUWdhVzRnQUVocGMzUnZaM0poYlNCd2IybHVkR1Z5SUdseklFNVZURXdBUVhOelpYSjBhVzl1SUdBb1kyaDFibXRmYzJsNlpTVXlLVDA5TUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR0Z6YzJsbmJtMWxiblF1YzJsNlpTZ3BJRDA5SUc1MWJWOXBibVJwWTJWellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYlZKbFprbHRZV2RsU0dWcFoyaDBJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQlBZM1JoZG1VZ2IzVjBJRzltSUhKaGJtZGxBQ1Z6SlhNS0FHcHdad0JKYldGblpYTWdiWFZ6ZENCb1lYWmxJSFJvWlNCellXMWxJSGRwWkhSb0FFRnpjMlZ5ZEdsdmJpQmdJV2x6YVc1bUtIVmJNRjBwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR1ppYVc0ck1DNDFaaWtnUGlBd0lDWW1JQ2htWW1sdUxUQXVOV1lwSUR3Z2JuVnRYMkpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFWVzUwWlhOMFpXUWdZbVZvWVhacGIzSWdabTl5SUc5a1pDQmphSFZ1YXlCemFYcGxBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmJXRjBZMmhsY25NdlltbHVZWEo1WDJocFpYSmhjbU5vYVdOaGJGOWpiSFZ6ZEdWeWFXNW5MbWdBYUdWcFoyaDBJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFVMk5oYkdVZ2IzVjBJRzltSUhKaGJtZGxBQUJCYzNObGNuUnBiMjRnWUdRdWFHVnBaMmgwS0NrZ1BUMGdhVzB5TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFbE9SZ0JFWldOcGJXRnNJR0pwYmlCd2IzTnBkR2x2YmlCcGJtUmxlQ0J2ZFhRZ2IyWWdjbUZ1WjJVQVYybGtkR2dnYVhNZ2VtVnlid0JCYzNOcFoyNXRaVzUwSUhOcGVtVWdkM0p2Ym1jQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwzZGxZbUZ5YTJsMExXOXlaeTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTl0WVhSamFHVnljeTlvYjNWbmFGOXphVzFwYkdGeWFYUjVYM1p2ZEdsdVp5NW9BRUZ6YzJWeWRHbHZiaUJnS0dsdWRDbHpkR1E2T21ac2IyOXlLSGdwSUQwOUlDaHBiblFwZUdBZ1ptRnBiR1ZrSUdsdUlBQXZMaTR2YzJoaGNtVXZKWE1BU1cxaFoyVnpJRzExYzNRZ2FHRjJaU0IwYUdVZ2MyRnRaU0JvWldsbmFIUUFRWE56WlhKMGFXOXVJR0FoYVhOcGJtWW9kVnN4WFNsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J0WVdkdWFYUjFaR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJJWldsbmFIUWdhWE1nZW1WeWJ3QkJjM05sY25ScGIyNGdZR0Z6YzJsbmJtMWxiblJiYVYwZ0lUMGdMVEZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnBibVJsZUNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5M1pXSmhjbXRwZEMxdmNtY3Zhbk5oY25SdmIyeHJhWFJPUmxRdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMmx1ZEdWeWNHOXNZWFJsTG1nQVNFOU5SUUJCYzNObGNuUnBiMjRnWUdsdE1TNTNhV1IwYUNncElEMDlJR2x0TWk1M2FXUjBhQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFMWhaMjVwZEhWa1pTQmpZVzV1YjNRZ1ltVWdibVZuWVhScGRtVUFVM1JsY0NCcGN5QjZaWEp2QUVGemMybG5ibTFsYm5RZ2FYTWdhVzUyWVd4cFpBQnBibVJsZUNCdmRYUWdiMllnY21GdVoyVUFabXh2YjNJb0tTQmhibVFnWTJGemRDQnViM1FnZEdobElITmhiV1VBTDNCeWIyTXZjMlZzWmk5amJXUnNhVzVsQUVGemMyVnlkR2x2YmlCZ2FXMHhMbWhsYVdkb2RDZ3BJRDA5SUdsdE1pNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OW9ZWEp5YVhNdGFXNXNhVzVsTG1nQVFYTnpaWEowYVc5dUlHQnVkVzFmWW1sdWN5QStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR2srUGpFcElEd2djM1JrT2pwalpXbHNLQ2h6Y21OZmFHVnBaMmgwTFRFcEx6SXVaaWxnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmhjM05wWjI1dFpXNTBXMmxkSUR3Z2JuVnRYMmx1WkdsalpYTmdJR1poYVd4bFpDQnBiaUFBWVd4c2IyTmhkRzl5UEZRK09qcGhiR3h2WTJGMFpTaHphWHBsWDNRZ2Jpa2dKMjRuSUdWNFkyVmxaSE1nYldGNGFXMTFiU0J6ZFhCd2IzSjBaV1FnYzJsNlpRQkJjM05sY25ScGIyNGdZQ2hwYm5RcGMzUmtPanBtYkc5dmNpaDVLU0E5UFNBb2FXNTBLWGxnSUdaaGFXeGxaQ0JwYmlBQWNtSUFSRzlISUZCNWNtRnRhV1FBVDNWMElHOW1JSEpoYm1kbEFFNTFiV0psY2lCaWFXNXpJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFTVzVrWlhnZ2FYTWdiM1YwSUc5bUlHSnZkVzVrY3dCQmMzTnBaMjV0Wlc1MElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUdKcGJsZ2dQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGx3SUQ0OUlEQWdKaVlnZVhBZ1BDQm9aV2xuYUhSZ0lHWmhhV3hsWkNCcGJpQUFKWE02SUNWekNnQk9iMjR0YldGNElITjFjSEJ5WlhOemFXOXVBRUZ6YzJWeWRHbHZiaUJnZHpFZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHRZV2RsTG5SNWNHVW9LU0E5UFNCSlRVRkhSVjlWU1U1VU9HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdsdVpHbGpaWE5iWVhOemFXZHViV1Z1ZEZ0cFhWMGdQQ0J1ZFcxZlptVmhkSFZ5WlhOZ0lHWmhhV3hsWkNCcGJpQUFZbWx1V0NCdmRYUWdiMllnY21GdVoyVUFlWEFnYjNWMElHOW1JR0p2ZFc1a2N3QlZibUZpYkdVZ2RHOGdaR1YwWlhKdGFXNWxJSEJ5YjJObGMzTWdibUZ0WlFCVGRXSndhWGhsYkFCM01TQnRkWE4wSUdKbElIQnZjMmwwYVhabEFFOXViSGtnWjNKaGVTQnpZMkZzWlNCcGJXRm5aWE1nWVhKbElITjFjSEJ2Y25SbFpBQkJjM05sY25ScGIyNGdZR2wwTFQ1elpXTnZibVF1YzJsNlpTZ3BJQ0U5SURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JpYVc1WUlEd2diVTUxYlZoQ2FXNXpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2VYQmZjR3gxYzE4eElENDlJREFnSmlZZ2VYQmZjR3gxYzE4eElEd2dhR1ZwWjJoMFlDQm1ZV2xzWldRZ2FXNGdBQ1Z6SlhNQWNISjFibVZHWldGMGRYSmxjd0JCYzNObGNuUnBiMjRnWUhjeUlENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnZZM1JoZG1VZ1BDQnRUblZ0VDJOMFlYWmxjMkFnWm1GcGJHVmtJR2x1SUFCRGJIVnpkR1Z5SUcxMWMzUWdhR0YyWlNCaGRHeGxZWE5sZENBeElHWmxZWFIxY21VQVFYTnpaWEowYVc5dUlHQmlhVzVaSUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBZVhCZmNHeDFjMTh4SUc5MWRDQnZaaUJpYjNWdVpITUFMM1poY2k5allXTm9aUUJHYVc1a0lFOXlhV1Z1ZEdGMGFXOXVjd0JCYzNObGNuUnBiMjRnWUdSemRGdHBYU0ErUFNBdE1qVTRNRFkwWUNCbVlXbHNaV1FnYVc0Z0FIY3lJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5a1pYUmxZM1J2Y25NdloyRjFjM05wWVc1ZmMyTmhiR1ZmYzNCaFkyVmZjSGx5WVcxcFpDNW9BRUZ6YzJWeWRHbHZiaUJnYlVzZ1BUMGdiVU5sYm5SbGNuTXVjMmw2WlNncFlDQm1ZV2xzWldRZ2FXNGdBR0pwYmxrZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnZUhBZ1BqMGdNQ0FtSmlCNGNDQThJSGRwWkhSb1lDQm1ZV2xzWldRZ2FXNGdBQzh1WTJGamFHVUFRWE56WlhKMGFXOXVJR0JwYlRBdWFHVnBaMmgwS0NrZ1BUMGdhVzB4TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdaSE4wVzJsZElEdzlJREkxT0RBMk5HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdJeElENDlJREFnSmlZZ1lqRWdQQ0J1ZFcxZlltbHVjMkFnWm1GcGJHVmtJR2x1SUFCUFkzUmhkbVVnYjNWMElHOW1JSEpoYm1kbEFDOW9iMjFsTDNkaGJIUmxjaTlyWVd4M1lXeDBMV2RwZEdoMVlpOTNaV0poY210cGRDMXZjbWN2YW5OaGNuUnZiMnhyYVhST1JsUXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2YldGMFkyaGxjbk12YTIxbFpHOXBaSE11YUFCQmMzTmxjblJwYjI0Z1lHSnBibGtnUENCdFRuVnRXVUpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFlSEFnYjNWMElHOW1JR0p2ZFc1a2N3QWxjeThsY3dCSVpXbG5hSFFnYVhNZ2FXNWpiMjV6YVhOMFpXNTBBRUZ6YzJWeWRHbHZiaUJnWkhOMFcybGRJRHc5SURReE1qa3dNalJnSUdaaGFXeGxaQ0JwYmlBQVlqRWdZbWx1SUdsdVpHVjRJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lITmpZV3hsSUR3Z2JVNTFiVk5qWVd4bGMxQmxjazlqZEdGMlpXQWdabUZwYkdWa0lHbHVJQUJySUhOb2IzVnNaQ0J0WVhSamFDQjBhR1VnYm5WdFltVnlJRzltSUdOc2RYTjBaWElnWTJWdWRHVnljd0JCYzNObGNuUnBiMjRnWUdKcGJrRnVaMnhsSUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNGNGOXdiSFZ6WHpFZ1BqMGdNQ0FtSmlCNGNGOXdiSFZ6WHpFZ1BDQjNhV1IwYUdBZ1ptRnBiR1ZrSUdsdUlBQXZkbUZ5TDJ4cFlnQkJjM05sY25ScGIyNGdZR2x0TUM1b1pXbG5hSFFvS1NBOVBTQnBiVEl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmtjM1JiYVYwZ1BqMGdMVFF4TWprd01qUmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaU1pQStQU0F3SUNZbUlHSXlJRHdnYm5WdFgySnBibk5nSUdaaGFXeGxaQ0JwYmlBQVUyTmhiR1VnYjNWMElHOW1JSEpoYm1kbEFFRnpjMlZ5ZEdsdmJpQmdiblZ0WDJabFlYUjFjbVZ6SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJpYVc1QmJtZHNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQWVIQmZjR3gxYzE4eElHOTFkQ0J2WmlCaWIzVnVaSE1BTHk1amIyNW1hV2NBUVhOelpYSjBhVzl1SUdBb2FXMHhMbWhsYVdkb2RDZ3BQajR4S1NBOVBTQnBiVEl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVlXeHNiMk5oZEc5eVBGUStPanBoYkd4dlkyRjBaU2h6YVhwbFgzUWdiaWtnSjI0bklHVjRZMlZsWkhNZ2JXRjRhVzExYlNCemRYQndiM0owWldRZ2MybDZaUUJpTWlCaWFXNGdhVzVrWlhnZ2IzVjBJRzltSUhKaGJtZGxBR0ZzYkc5allYUnZjanhVUGpvNllXeHNiMk5oZEdVb2MybDZaVjkwSUc0cElDZHVKeUJsZUdObFpXUnpJRzFoZUdsdGRXMGdjM1Z3Y0c5eWRHVmtJSE5wZW1VQVRuVnRZbVZ5SUc5bUlHWmxZWFIxY21WeklHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVFYTnpaWEowYVc5dUlHQmlhVzVCYm1kc1pTQThJRzFPZFcxQmJtZHNaVUpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTUNBK1BTQXdJQ1ltSUhjd0lEdzlJREV1TURBd01XQWdabUZwYkdWa0lHbHVJQUJVVFZCRVNWSUFRWE56WlhKMGFXOXVJR0FvYVcwd0xtaGxhV2RvZENncFBqNHhLU0E5UFNCcGJURXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCbmVIZ2dQRDBnTkRFeU9UQXlOR0FnWm1GcGJHVmtJR2x1SUFCaGJHeHZZMkYwYjNJOFZENDZPbUZzYkc5allYUmxLSE5wZW1WZmRDQnVLU0FuYmljZ1pYaGpaV1ZrY3lCdFlYaHBiWFZ0SUhOMWNIQnZjblJsWkNCemFYcGxBRUZ6YzJWeWRHbHZiaUJnYm5WdFgybHVaR2xqWlhNZ1BEMGdiblZ0WDJabFlYUjFjbVZ6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZbWx1VTJOaGJHVWdQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQlBkWFFnYjJZZ2NtRnVaMlVBTDNSdGNBQkJjM05sY25ScGIyNGdZQ2hwYlRBdWFHVnBaMmgwS0NrK1BqRXBJRDA5SUdsdE1pNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdkNGVDQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjbTkzSUR3Z2JVaGxhV2RvZEdBZ1ptRnBiR1ZrSUdsdUlBQk5iM0psSUdsdVpHbGpaWE1nZEdoaGJpQm1aV0YwZFhKbGN3QmlhVzVUWTJGc1pTQnZkWFFnYjJZZ2NtRnVaMlVBUVhOelpYSjBhVzl1SUdCM01TQStQU0F3SUNZbUlIY3hJRHc5SURFdU1EQXdNV0FnWm1GcGJHVmtJR2x1SUFCRmNuSnZjaUJzYjI5cmFXNW5JR1p2Y2lCeVpYTnZkWEpqWlhNZ1pHbHlaV04wYjNKNUlIQmhkR2dBUVhOelpYSjBhVzl1SUdCdFFuVmphMlYwY3k1emFYcGxLQ2tnUFQwZ2JVNTFiVUoxWTJ0bGRITllZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ozbDVJRHc5SURReE1qa3dNalJnSUdaaGFXeGxaQ0JwYmlBQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwzZGxZbUZ5YTJsMExXOXlaeTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTltY21GdFpYZHZjbXN2YVcxaFoyVXVhQUJCYzNObGNuUnBiMjRnWUc1MWJWOXBibVJwWTJWeklENDlJRzFMWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZbWx1VTJOaGJHVWdQQ0J0VG5WdFUyTmhiR1ZDYVc1ellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZHpJZ1BqMGdNQ0FtSmlCM01pQThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBUlhKeWIzSWdZM0psWVhScGJtY2djbVZ6YjNWeVkyVnpJR1JwY21WamRHOXllU0J3WVhSb0FFSjFZMnRsZEhNZ1lYSmxJRzV2ZENCaGJHeHZZMkYwWldRQVFYTnpaWEowYVc5dUlHQm5lWGtnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJ5YjNjZ2IzVjBJRzltSUdKdmRXNWtjd0JPYjNRZ1pXNXZkV2RvSUdabFlYUjFjbVZ6QUVGemMyVnlkR2x2YmlCZ2FXNWtaWGdnUEQwZ0tHSnBibGdnS3lCaWFXNVpLbTFPZFcxWVFtbHVjeUFySUdKcGJrRnVaMnhsS20xT2RXMVlRbWx1Y3lwdFRuVnRXVUpwYm5NZ0t5QmlhVzVUWTJGc1pTcHRUblZ0V0VKcGJuTXFiVTUxYlZsQ2FXNXpLbTFPZFcxQmJtZHNaVUpwYm5NcFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZHpNZ1BqMGdNQ0FtSmlCM015QThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBUlhKeWIzSTZJRlZ1WVdKc1pTQjBieUJqYUdGdVoyVWdkMjl5YTJsdVp5QmthWEpsWTNSdmNua2dkRzhnSnlWekp5NEtBRUZ6YzJWeWRHbHZiaUJnYlVKMVkydGxkSE5iTUYwdWMybDZaU2dwSUQwOUlHMU9kVzFDZFdOclpYUnpXV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHZDRlU0E4UFNBME1USTVNREkwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMmxuYm0xbGJuUWdjMmw2WlNCcGN5QnBibU52Y25KbFkzUUFRWE56WlhKMGFXOXVJR0J1SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoM01DdDNNU3QzTWl0M015a2dQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUZzbElDNHpaaUFsSUM0elppQWxJQzR6WmwwZ1d5VWdOaTR4WmwwS0FFRnpjMlZ5ZEdsdmJpQmdiVVpsWVhSMWNtVlFiMmx1ZEhNdWMybDZaU2dwSUR3OUlHMU5ZWGhPZFcxR1pXRjBkWEpsVUc5cGJuUnpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ozaDVJRDQ5SUMwME1USTVNREkwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiblZ0WDJObGJuUmxjbk1nUGlBd1lDQm1ZV2xzWldRZ2FXNGdBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmRYUnBiSE12Y0dGeWRHbGhiRjl6YjNKMExtZ0FRWE56WlhKMGFXOXVJR0J3YjNNZ1BUMGdOalkyWUNCbVlXbHNaV1FnYVc0Z0FBQUFBd0FBQUFNQUFBQUVBQUFBQkFBQUFBUUFBQUFCQUFBQUJBQUFBQUlBQUFBQ0FBQUFBZ0FBQUFJQUFBQUNBQUFBQVFBQUFBRUFBQUFCQUFBQUJBQUFBSWdBQUFBRkFBQUFrQUFBQUFZQUFBQ1lBQUFBQ1FBQUFMQUFBQUFRQndBQXRRc0FBTHdSQUFBMEZBQUFMbWx6WlhRQWNtSUFUaloyYVhOcGIyNHlOVWRoZFhOemFXRnVVMk5oYkdWVGNHRmpaVkI1Y21GdGFXUkZBRTQyZG1semFXOXVNalZIWVhWemMybGhibE5qWVd4bFUzQmhZMlZRZVhKaGJXbGtSUUJPTm5acGMybHZiakkxUjJGMWMzTnBZVzVUWTJGc1pWTndZV05sVUhseVlXMXBaRVVBc1BZQUFDbFpBQUN3OWdBQUtWa0FBTEQyQUFBcFdRQUFWRzl2SUcxaGJua2dabVZoZEhWeVpTQndiMmx1ZEhNQVZHaGxjbVVnYlhWemRDQmlaU0JoZENCc1pXRnpkQ0F4SUdObGJuUmxjZ0J1SUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBVUc5emFYUnBiMjRnYVhNZ2JtOTBJSGRwZEdocGJpQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lHdHdMbk5qWVd4bElEd2diVXhoY0d4aFkybGhibEI1Y21GdGFXUXViblZ0VTJOaGJHVlFaWEpQWTNSaGRtVW9LV0FnWm1GcGJHVmtJR2x1SUFCYkpYTmRJRnNsYzEwZ1d5VnpYU0E2SUVadmRXNWtJQ1ZrSUdabFlYUjFjbVZ6SUdsdUlIRjFaWEo1QUVGemMyVnlkR2x2YmlCZ2F5QStJREJnSUdaaGFXeGxaQ0JwYmlBQVJtVmhkSFZ5WlNCd2IybHVkQ0J6WTJGc1pTQnBjeUJ2ZFhRZ2IyWWdZbTkxYm1SekFFWnBibVFnVFdGMFkyaGxjeUFvTVNrQWF5QnRkWE4wSUdKbElIQnZjMmwwYVhabEFFRnpjMlZ5ZEdsdmJpQmdhM0F1YzJOdmNtVWdQVDBnYkdGd01TNW5aWFE4Wm14dllYUStLSGtwVzNoZFlDQm1ZV2xzWldRZ2FXNGdBRWh2ZFdkb0lGWnZkR2x1WnlBb01Ta0FVMk52Y21VZ2FYTWdibTkwSUdOdmJuTnBjM1JsYm5RZ2QybDBhQ0IwYUdVZ1JHOUhJR2x0WVdkbEFFWnBibVFnU0c5MVoyZ2dUV0YwWTJobGN5QW9NU2tBUVhOelpYSjBhVzl1SUdCaWRXTnJaWFJiTUYwdVptbHljM1FnUGowZ1luVmphMlYwVzI1ZExtWnBjbk4wWUNCbVlXbHNaV1FnYVc0Z0FFVnpkR2x0WVhSbElFaHZiVzluY21Gd2FIa2dLREVwQUc1MGFGOWxiR1Z0Wlc1MElHWmhhV3hsWkFCR2FXNWtJRWx1YkdsbGNuTWdLREVwQUVGemMyVnlkR2x2YmlCZ2IyTjBZWFpsSUR3Z2JVNTFiVTlqZEdGMlpYTmdJR1poYVd4bFpDQnBiaUFBUm1sdVpDQk5ZWFJqYUdWeklDZ3lLUUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OW5ZWFZ6YzJsaGJsOXpZMkZzWlY5emNHRmpaVjl3ZVhKaGJXbGtMbWdBU0c5MVoyZ2dWbTkwYVc1bklDZ3lLUUJQWTNSaGRtVWdiM1YwSUc5bUlISmhibWRsQUVacGJtUWdTRzkxWjJnZ1RXRjBZMmhsY3lBb01pa0FRWE56WlhKMGFXOXVJR0J6WTJGc1pTQThJRzFPZFcxVFkyRnNaWE5RWlhKUFkzUmhkbVZnSUdaaGFXeGxaQ0JwYmlBQVJYTjBhVzFoZEdVZ1NHOXRiMmR5WVhCb2VTQW9NaWtBVTJOaGJHVWdiM1YwSUc5bUlISmhibWRsQUVacGJtUWdTVzVzYVdWeWN5QW9NaWtBUVhOelpYSjBhVzl1SUdCcGJtUmxlQ0E4SUcxSmJXRm5aWE11YzJsNlpTZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ltVnpkRjlwYm1SbGVDQWhQU0J6ZEdRNk9tNTFiV1Z5YVdOZmJHbHRhWFJ6UEhOcGVtVmZkRDQ2T20xaGVDZ3BZQ0JtWVdsc1pXUWdhVzRnQUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5M1pXSmhjbXRwZEMxdmNtY3Zhbk5oY25SdmIyeHJhWFJPUmxRdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMFJ2UjE5elkyRnNaVjlwYm5aaGNtbGhiblJmWkdWMFpXTjBiM0l1YUFBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmQyVmlZWEpyYVhRdGIzSm5MMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMjFoZEdOb1pYSnpMMlpsWVhSMWNtVmZiV0YwWTJobGNpMXBibXhwYm1VdWFBQkpibVJsZUNCcGN5QnZkWFFnYjJZZ2NtRnVaMlVBVTI5dFpYUm9hVzVuSUhOMGNtRnVaMlVBUVhOelpYSjBhVzl1SUdCelkyRnNaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYlUxaGRHTm9aWE11YzJsNlpTZ3BJRHc5SUdabFlYUjFjbVZ6TVMwK2MybDZaU2dwWUNCbVlXbHNaV1FnYVc0Z0FGTmpZV3hsSUcxMWMzUWdZbVVnY0c5emFYUnBkbVVBVG5WdFltVnlJRzltSUcxaGRHTm9aWE1nYzJodmRXeGtJR0psSUd4dmQyVnlBRk5qWVd4bElHMTFjM1FnWW1VZ2JHVnpjeUIwYUdGdUlHNTFiV0psY2lCdlppQnpZMkZzWlNCd1pYSWdiMk4wWVhabEFFRnpjMlZ5ZEdsdmJpQmdiVkp2YjNRdVoyVjBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnNZWEF3TG1obGFXZG9kQ2dwSUQwOUlHeGhjREV1YUdWcFoyaDBLQ2tnUFQwZ2JHRndNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCU2IyOTBJR05oYm01dmRDQmlaU0JPVlV4TUFGZHBaSFJvTDJobGFXZG9kQ0JoY21VZ2JtOTBJR052Ym5OcGMzUmxiblFBUVhOelpYSjBhVzl1SUdCdGFXNXBJQ0U5SUMweFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0d4aGNEQXVhR1ZwWjJoMEtDa2dQVDBnYkdGd01TNW9aV2xuYUhRb0tTa2dKaVlnS0Noc1lYQXhMbWhsYVdkb2RDZ3BQajR4S1NBOVBTQnNZWEF5TG1obGFXZG9kQ2dwS1dBZ1ptRnBiR1ZrSUdsdUlBQk5hVzVwYlhWdElHbHVaR1Y0SUc1dmRDQnpaWFFBUVhOelpYSjBhVzl1SUdBb0tHeGhjREF1ZDJsa2RHZ29LVDQrTVNrZ1BUMGdiR0Z3TVM1M2FXUjBhQ2dwS1NBbUppQW9iR0Z3TVM1M2FXUjBhQ2dwSUQwOUlHeGhjREl1ZDJsa2RHZ29LU2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnVJRHc5SUdsdVgyMWhkR05vWlhNdWMybDZaU2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdNR0FnWm1GcGJHVmtJR2x1SUFCVGFHOTFiR1FnWW1VZ2RHaGxJSE5oYldVQVNXMWhaMlVnYzJsNlpYTWdZWEpsSUdsdVkyOXVjMmx6ZEdWdWRBQkJjM05sY25ScGIyNGdZR0pwYmxnZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaDRMVEVwSUQ0OUlEQWdKaVlnS0hnck1Ta2dQQ0JzWVhBeExuZHBaSFJvS0NsZ0lHWmhhV3hsWkNCcGJpQUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5dFlYUmphR1Z5Y3k5b2IzVm5hRjl6YVcxcGJHRnlhWFI1WDNadmRHbHVaeTVvQUhnZ2IzVjBJRzltSUdKdmRXNWtjd0JpYVc1WUlHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUNoNUxURXBJRDQ5SURBZ0ppWWdLSGtyTVNrZ1BDQnNZWEF4TG1obGFXZG9kQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZbWx1V0NBOElHMU9kVzFZUW1sdWMyQWdabUZwYkdWa0lHbHVJQUI1SUc5MWRDQnZaaUJpYjNWdVpITUFRWE56WlhKMGFXOXVJR0JpYVc1WklENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnNZWEF3TG5kcFpIUm9LQ2tnUFQwZ2JHRndNUzUzYVdSMGFDZ3BZQ0JtWVdsc1pXUWdhVzRnQUdKcGJsa2diM1YwSUc5bUlISmhibWRsQUVsdFlXZGxJR1JwYldWdWMybHZibk1nYVc1amIyNXphWE4wWlc1MEFFRnpjMlZ5ZEdsdmJpQmdZbWx1V1NBOElHMU9kVzFaUW1sdWMyQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUd4aGNEQXVkMmxrZEdnb0tTQTlQU0JzWVhBeUxuZHBaSFJvS0NsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JpYVc1QmJtZHNaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYkdGd01DNW9aV2xuYUhRb0tTQTlQU0JzWVhBeExtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBR0pwYmtGdVoyeGxJRzkxZENCdlppQnlZVzVuWlFCQmMzTmxjblJwYjI0Z1lHeGhjREF1YUdWcFoyaDBLQ2tnUFQwZ2JHRndNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHSnBia0Z1WjJ4bElEd2diVTUxYlVGdVoyeGxRbWx1YzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2g0TFRFcElENDlJREFnSmlZZ0tIZ3JNU2tnUENCcGJTNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWW1sdVUyTmhiR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoNUxURXBJRDQ5SURBZ0ppWWdLSGtyTVNrZ1BDQnBiUzVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCaWFXNVRZMkZzWlNCdmRYUWdiMllnY21GdVoyVUFRWE56WlhKMGFXOXVJR0FvYkdGd01DNTNhV1IwYUNncFBqNHhLU0E5UFNCc1lYQXlMbmRwWkhSb0tDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCaWFXNVRZMkZzWlNBOElHMU9kVzFUWTJGc1pVSnBibk5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9iR0Z3TUM1b1pXbG5hSFFvS1Q0K01Ta2dQVDBnYkdGd01pNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdScGMzUkNhVzVCYm1kc1pTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdlRjlrYVhaZk1pMHdMalZtSUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBWkdsemRFSnBia0Z1WjJ4bElHMTFjM1FnYm05MElHSmxJRzVsWjJGMGFYWmxBSGhmWkdsMlh6SWdiM1YwSUc5bUlHSnZkVzVrY3lCdmRYUWdiMllnWW05MWJtUnpJR1p2Y2lCcGJuUmxjbkJ2YkdGMGFXOXVBRUZ6YzJWeWRHbHZiaUJnYUhsd0xuTnBlbVVvS1NBK1BTQTVLbTFoZUY5dWRXMWZhSGx3YjNSb1pYTmxjMkFnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lIbGZaR2wyWHpJdE1DNDFaaUErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmFHOXRiMmR5WVhCb2VWOWxjM1JwYldGMGFXOXVMM0p2WW5WemRGOW9iMjF2WjNKaGNHaDVMbWdBZVY5a2FYWmZNaUJ2ZFhRZ2IyWWdZbTkxYm1SeklHOTFkQ0J2WmlCaWIzVnVaSE1nWm05eUlHbHVkR1Z5Y0c5c1lYUnBiMjRBYUhsd0lIWmxZM1J2Y2lCemFHOTFiR1FnWW1VZ2IyWWdjMmw2WlNBNUttMWhlRjl1ZFcxZmFIbHdiM1JvWlhObGN3QkJjM05sY25ScGIyNGdZSGhmWkdsMlh6SXJNQzQxWmlBOElHeGhjREl1ZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lIUnRjRjlwTG5OcGVtVW9LU0ErUFNCdWRXMWZjRzlwYm5SellDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZVY5a2FYWmZNaXN3TGpWbUlEd2diR0Z3TWk1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQjBiWEJmYVNCMlpXTjBiM0lnYzJodmRXeGtJR0psSUc5bUlITnBlbVVnYm5WdFgzQnZhVzUwY3dCQmMzTmxjblJwYjI0Z1lDaHNZWEF3TG5kcFpIUm9LQ2srUGpFcElEMDlJR3hoY0RFdWQybGtkR2dvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR2g1Y0Y5amIzTjBjeTV6YVhwbEtDa2dQajBnYldGNFgyNTFiVjlvZVhCdmRHaGxjMlZ6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR3hoY0RBdWFHVnBaMmgwS0NrK1BqRXBJRDA5SUd4aGNERXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBYUhsd1gyTnZjM1J6SUhabFkzUnZjaUJ6YUc5MWJHUWdZbVVnYjJZZ2MybDZaU0J0WVhoZmJuVnRYMmg1Y0c5MGFHVnpaWE1BWVd4c2IyTmhkRzl5UEZRK09qcGhiR3h2WTJGMFpTaHphWHBsWDNRZ2Jpa2dKMjRuSUdWNFkyVmxaSE1nYldGNGFXMTFiU0J6ZFhCd2IzSjBaV1FnYzJsNlpRQkJjM05sY25ScGIyNGdZRzRnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnY205M0lEd2diVWhsYVdkb2RHQWdabUZwYkdWa0lHbHVJQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwzVjBhV3h6TDNCaGNuUnBZV3hmYzI5eWRDNW9BQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpuSmhiV1YzYjNKckwybHRZV2RsTG1nQWJpQnRkWE4wSUdKbElIQnZjMmwwYVhabEFISnZkeUJ2ZFhRZ2IyWWdZbTkxYm1SekFFRnpjMlZ5ZEdsdmJpQmdheUErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvYVc1MEtYTjBaRG82Wm14dmIzSW9lQ2tnUFQwZ0tHbHVkQ2w0WUNCbVlXbHNaV1FnYVc0Z0FHc2diWFZ6ZENCaVpTQndiM05wZEdsMlpRQXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZkMlZpWVhKcmFYUXRiM0puTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJSbGRHVmpkRzl5Y3k5cGJuUmxjbkJ2YkdGMFpTNW9BRUZ6YzJWeWRHbHZiaUJnTUdBZ1ptRnBiR1ZrSUdsdUlBQm1iRzl2Y2lncElHRnVaQ0JqWVhOMElHNXZkQ0IwYUdVZ2MyRnRaUUJHWVdsc1pXUWdkRzhnWTI5dGNIVjBaU0J0WVhSeWFYZ2dhVzUyWlhKelpRQkJjM05sY25ScGIyNGdZQ2hwYm5RcGMzUmtPanBtYkc5dmNpaDVLU0E5UFNBb2FXNTBLWGxnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjVjQ0ErUFNBd0lDWW1JSGx3SUR3Z2FHVnBaMmgwWUNCbVlXbHNaV1FnYVc0Z0FIbHdJRzkxZENCdlppQmliM1Z1WkhNQVFYTnpaWEowYVc5dUlHQjVjRjl3YkhWelh6RWdQajBnTUNBbUppQjVjRjl3YkhWelh6RWdQQ0JvWldsbmFIUmdJR1poYVd4bFpDQnBiaUFBZVhCZmNHeDFjMTh4SUc5MWRDQnZaaUJpYjNWdVpITUFRWE56WlhKMGFXOXVJR0I0Y0NBK1BTQXdJQ1ltSUhod0lEd2dkMmxrZEdoZ0lHWmhhV3hsWkNCcGJpQUFlSEFnYjNWMElHOW1JR0p2ZFc1a2N3QkJjM05sY25ScGIyNGdZSGh3WDNCc2RYTmZNU0ErUFNBd0lDWW1JSGh3WDNCc2RYTmZNU0E4SUhkcFpIUm9ZQ0JtWVdsc1pXUWdhVzRnQUhod1gzQnNkWE5mTVNCdmRYUWdiMllnWW05MWJtUnpBRUZ6YzJWeWRHbHZiaUJnZHpBZ1BqMGdNQ0FtSmlCM01DQThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBVDNWMElHOW1JSEpoYm1kbEFFRnpjMlZ5ZEdsdmJpQmdkekVnUGowZ01DQW1KaUIzTVNBOFBTQXhMakF3TURGZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTWlBK1BTQXdJQ1ltSUhjeUlEdzlJREV1TURBd01XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhjeklENDlJREFnSmlZZ2R6TWdQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ0tIY3dLM2N4SzNjeUszY3pLU0E4UFNBeExqQXdNREZnSUdaaGFXeGxaQ0JwYmlBQUFBQUFBQUFBbUZrQUFCQUFBQUFSQUFBQUFBQUFBSmhaQUFBUUFBQUFFUUFBQUFBQUFBQVFjQUFBRWdBQUFCTUFBQUJPTm5acGMybHZiamxGZUdObGNIUnBiMjVGQUU0MmRtbHphVzl1T1VWNFkyVndkR2x2YmtVQVRqWjJhWE5wYjI0NVJYaGpaWEIwYVc5dVJRRFk5Z0FBa0c4QUFQenpBQURZOWdBQWtHOEFBUHp6QUFEWTlnQUFrRzhBQVB6ekFBQk9OblpwYzJsdmJqRTRRbWx1YjIxcFlXeFFlWEpoYldsa016Sm1SUUFBQU5qMkFBRHdid0FBbUZrQUFBQUFBQURNYndBQURnQUFBQlFBQUFBVkFBQUFBQUFBQU14dkFBQU9BQUFBRkFBQUFCVUFBQUFBQUFBQXpHOEFBQTRBQUFBVUFBQUFGUUFBQUxsU2pENk9XdWMrdVZLTVBnQUFBQUFBQUFBQTdIQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBVGxOME0xOWZNakl3WDE5emFHRnlaV1JmY0hSeVgzQnZhVzUwWlhKSlVFNDJkbWx6YVc5dU9FdGxlV1p5WVcxbFNVeHBPVFpGUlVWT1UxOHhOR1JsWm1GMWJIUmZaR1ZzWlhSbFNWTXpYMFZGVGxOZk9XRnNiRzlqWVhSdmNrbFRNMTlGUlVWRkFBRFk5Z0FBaEhBQUFGRHpBQUJPVTNRelgxOHlNVFJrWldaaGRXeDBYMlJsYkdWMFpVbE9OblpwYzJsdmJqaExaWGxtY21GdFpVbE1hVGsyUlVWRlJVVUFZbTl2YkNCMmFYTnBiMjQ2T2xacGMzVmhiRVJoZEdGaVlYTmxQSFpwYzJsdmJqbzZSbEpGUVV0RmVIUnlZV04wYjNJc0lIWnBjMmx2YmpvNlFtbHVZWEo1Um1WaGRIVnlaVk4wYjNKbExDQjJhWE5wYjI0Nk9rSnBibUZ5ZVVabFlYUjFjbVZOWVhSamFHVnlQRGsyUGo0Nk9uRjFaWEo1S0dOdmJuTjBJSFpwYzJsdmJqbzZSMkYxYzNOcFlXNVRZMkZzWlZOd1lXTmxVSGx5WVcxcFpDQXFLU0JiUmtWQlZGVlNSVjlGV0ZSU1FVTlVUMUlnUFNCMmFYTnBiMjQ2T2taU1JVRkxSWGgwY21GamRHOXlMQ0JUVkU5U1JTQTlJSFpwYzJsdmJqbzZRbWx1WVhKNVJtVmhkSFZ5WlZOMGIzSmxMQ0JOUVZSRFNFVlNJRDBnZG1semFXOXVPanBDYVc1aGNubEdaV0YwZFhKbFRXRjBZMmhsY2p3NU5qNWRBQUFBQUFBQUFBQ3l2cmsrRXR5Z3ZwQytPVDRTM0tDK2tMNDV2Z0FBQUlDeXZybStFdHlnUHBDK09iNFMzS0Era0w0NVB0SnlHTDhBQUFBQTBuS1l2am9HQkwvU2NwZytPZ1lFdjlKeUdEOEFBQUNBMG5LWVBqb0dCRC9TY3BpK09nWUVQd0FBQUlCV3VEMi9aazBrUDFhNHZiNW1UU1EvVnJpOVBnQUFBQUJXdUQwL1prMGt2MWE0dlQ1bVRTUy9Wcmk5dmd6cFdEOEFBQUNBRE9uWVBwblpPejhNNmRpK21kazdQd3pwV0w4QUFBQUFET25ZdnBuWk83OE02ZGcrbWRrN3Z3QUFBQUQ4VTI0LzhXVk92dzFVN2o3eFpVNi9EVlR1dmdBQUFJRDhVMjYvOFdWT1B3MVU3cjd4WlU0L0RWVHVQZ0FBZ0w4QUFBQUFBQUFBdjlDelhiOEFBQUEvMExOZHZ3QUFnRDhBQUFDQUFBQUFQOUN6WFQ4QUFBQy8wTE5kUHdBQUFBRFljd0FBRmdBQUFCc0FBQUFjQUFBQUhRQUFBQjRBQUFCT1UzUXpYMTh5TWpCZlgzTm9ZWEpsWkY5d2RISmZjRzlwYm5SbGNrbFFhREUyVG5Wc2JFRnljbUY1UkdWc1pYUmxja2xvUlU1VFh6bGhiR3h2WTJGMGIzSkphRVZGUlVVQUFBQUEyUFlBQUl4ekFBQlE4d0FBTVRaT2RXeHNRWEp5WVhsRVpXeGxkR1Z5U1doRkFBQUFBQUFBQUdSMEFBQVdBQUFBSHdBQUFDQUFBQUFoQUFBQUlnQUFBRTVUZEROZlh6SXlNRjlmYzJoaGNtVmtYM0IwY2w5d2IybHVkR1Z5U1ZCb1RsTmZNVFJrWldaaGRXeDBYMlJsYkdWMFpVbG9SVVZPVTE4NVlXeHNiMk5oZEc5eVNXaEZSVVZGQUFEWTlnQUFHSFFBQUZEekFBQk9VM1F6WDE4eU1UUmtaV1poZFd4MFgyUmxiR1YwWlVsb1JVVUFkbWx6YVc5dU9qcFRZMjl3WldSVWFXMWxjam82ZmxOamIzQmxaRlJwYldWeUtDa0FZWEpHYVd4MFpYSlVjbUZ1YzAxaGRDQmxjbkp2Y2lCM2FYUm9JRzFoY210bGNpQWxaQzRLQUZSeVlXTnJhVzVuSUd4dmMzUXVJQ1ZrQ2dCVWNtRmphMlZrSUhCaFoyVWdKV1FnS0cxaGVDQWxaQ2t1Q2dCcFpHUmtaR1JrWkdSa1pHUmtaQUJwQUVWeWNtOXlPaUJoY2pKRGNtVmhkR1ZJWVc1a2JHVXVDZ0JTWldGa2FXNW5JQ1Z6TG1aelpYUXpDZ0JtYzJWME13QkZjbkp2Y2lCeVpXRmthVzVuSUV0UVRTQmtZWFJoSUdaeWIyMGdKWE11Wm5ObGRETUtBQ0FnUVhOemFXZHVaV1FnY0dGblpTQnVieTRnSldRdUNnQkZjbkp2Y2pvZ2EzQnRRMmhoYm1kbFVHRm5aVTV2VDJaU1pXWkVZWFJoVTJWMENnQkZjbkp2Y2pvZ2EzQnRUV1Z5WjJWU1pXWkVZWFJoVTJWMENnQWdJRVJ2Ym1VdUNnQlNaV0ZrYVc1bklDVnpMbVp6WlhRS0FHWnpaWFFBUlhKeWIzSWdjbVZoWkdsdVp5QmtZWFJoSUdaeWIyMGdKWE11Wm5ObGRBb0FUa1pVSUc1MWJTNGdiMllnU1cxaFoyVlRaWFE2SUNWcENnQk9SbFFnYldGeWEyVnlJSGRwWkhSb09pQWxhUW9BVGtaVUlHMWhjbXRsY2lCb1pXbG5hSFE2SUNWcENnQk9SbFFnYldGeWEyVnlJR1J3YVRvZ0pXa0tBRVZ5Y205eU9pQnJjRzFUWlhSU1pXWkVZWFJoVTJWMENnQk1iMkZrYVc1bklHOW1JRTVHVkNCa1lYUmhJR052YlhCc1pYUmxMZ29BYkc5aFpFTmhiV1Z5WVNncE9pQkZjbkp2Y2lCc2IyRmthVzVuSUhCaGNtRnRaWFJsY2lCbWFXeGxJQ1Z6SUdadmNpQmpZVzFsY21FdUNnQXFLaW9nUTJGdFpYSmhJRkJoY21GdFpYUmxjaUJ5WlhOcGVtVmtJR1p5YjIwZ0pXUXNJQ1ZrTGlBcUtpb0tBSE5sZEVOaGJXVnlZU2dwT2lCRmNuSnZjam9nWVhKUVlYSmhiVXhVUTNKbFlYUmxMZ29BYzJWMFEyRnRaWEpoS0NrNklFVnljbTl5T2lCaGNrTnlaV0YwWlVoaGJtUnNaUzRLQUhObGRFTmhiV1Z5WVNncE9pQkZjbkp2Y2lCamNtVmhkR2x1WnlBelJDQm9ZVzVrYkdVQVFWSlViMjlzUzJsMFNsTW9LVG9nVlc1aFlteGxJSFJ2SUhObGRDQjFjQ0JPUmxRZ2JXRnlhMlZ5TGdvQVJYSnliM0lnWlhoalpXVmtJRzFoZUdsdGRXMGdjR0ZuWlhNS0FHRmtaQ0JPUmxRZ2JXRnlhMlZ5TFNBbkpYTW5JQW9BUkc5dVpTNEtBRlJvY21WemFHOXNaQ0J6WlhRZ2RHOGdKV1FLQUZSb2NtVnphRzlzWkNCdGIyUmxJSE5sZENCMGJ5QWxaQW9BUkdWaWRXY2diVzlrWlNCelpYUWdkRzhnSlhNS0FHOXVMZ0J2Wm1ZdUFFbHRZV2RsSUhCeWIyTXVJRzF2WkdVZ2MyVjBJSFJ2SUNWa0xnb0FRV3hzYjJOaGRHVmtJSFpwWkdWdlJuSmhiV1ZUYVhwbElDVmtDZ0JwYVdscGFXa0FVM1J5YVc1blRHbHpkQUJKYm5STWFYTjBBSE5sZEhWd0FIUmxZWEprYjNkdUFITmxkSFZ3UVZJeUFGOWhaR1JPUmxSTllYSnJaWElBWDJGa1pFNUdWRTFoY210bGNuTUFYMnh2WVdSRFlXMWxjbUVBWkdWMFpXTjBUV0Z5YTJWeUFHUmxkR1ZqZEU1R1ZFMWhjbXRsY2dCblpYUk9SbFJOWVhKclpYSUFaMlYwVGtaVVJHRjBZUUJ1Wm5STllYSnJaWElBYVdRQWQybGtkR2dBYUdWcFoyaDBBR1J3YVFCelpYUkVaV0oxWjAxdlpHVUFaMlYwUkdWaWRXZE5iMlJsQUdkbGRGQnliMk5sYzNOcGJtZEpiV0ZuWlFCelpYUk1iMmRNWlhabGJBQm5aWFJNYjJkTVpYWmxiQUJ6WlhSUWNtOXFaV04wYVc5dVRtVmhjbEJzWVc1bEFHZGxkRkJ5YjJwbFkzUnBiMjVPWldGeVVHeGhibVVBYzJWMFVISnZhbVZqZEdsdmJrWmhjbEJzWVc1bEFHZGxkRkJ5YjJwbFkzUnBiMjVHWVhKUWJHRnVaUUJ6WlhSVWFISmxjMmh2YkdSTmIyUmxBR2RsZEZSb2NtVnphRzlzWkUxdlpHVUFjMlYwVkdoeVpYTm9iMnhrQUdkbGRGUm9jbVZ6YUc5c1pBQnpaWFJKYldGblpWQnliMk5OYjJSbEFHZGxkRWx0WVdkbFVISnZZMDF2WkdVQVJWSlNUMUpmUVZKRFQwNVVVazlNVEVWU1gwNVBWRjlHVDFWT1JBQkZVbEpQVWw5TlZVeFVTVTFCVWt0RlVsOU9UMVJmUms5VlRrUUFSVkpTVDFKZlRVRlNTMFZTWDBsT1JFVllYMDlWVkY5UFJsOUNUMVZPUkZNQVFWSmZSRVZDVlVkZlJFbFRRVUpNUlFCQlVsOUVSVUpWUjE5RlRrRkNURVVBUVZKZlJFVkdRVlZNVkY5RVJVSlZSMTlOVDBSRkFFRlNYMFJGUmtGVlRGUmZURUZDUlV4SlRrZGZWRWhTUlZOSUFFRlNYMGxOUVVkRlgxQlNUME5mUmxKQlRVVmZTVTFCUjBVQVFWSmZTVTFCUjBWZlVGSlBRMTlHU1VWTVJGOUpUVUZIUlFCQlVsOUVSVVpCVlV4VVgwbE5RVWRGWDFCU1QwTmZUVTlFUlFCQlVsOU5RVmhmVEU5UFVGOURUMVZPVkFCQlVsOU1UMDlRWDBKU1JVRkxYMVJJVWtWVFNBQkJVbDlNVDBkZlRFVldSVXhmUkVWQ1ZVY0FRVkpmVEU5SFgweEZWa1ZNWDBsT1JrOEFRVkpmVEU5SFgweEZWa1ZNWDFkQlVrNEFRVkpmVEU5SFgweEZWa1ZNWDBWU1VrOVNBRUZTWDB4UFIxOU1SVlpGVEY5U1JVeGZTVTVHVHdCQlVsOU1RVUpGVEVsT1IxOVVTRkpGVTBoZlRVOUVSVjlOUVU1VlFVd0FRVkpmVEVGQ1JVeEpUa2RmVkVoU1JWTklYMDFQUkVWZlFWVlVUMTlOUlVSSlFVNEFRVkpmVEVGQ1JVeEpUa2RmVkVoU1JWTklYMDFQUkVWZlFWVlVUMTlQVkZOVkFFRlNYMHhCUWtWTVNVNUhYMVJJVWtWVFNGOU5UMFJGWDBGVlZFOWZRVVJCVUZSSlZrVUFRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMDVQVGtVQVFWSmZUVUZTUzBWU1gwbE9SazlmUTFWVVQwWkdYMUJJUVZORlgxQkJWRlJGVWs1ZlJWaFVVa0ZEVkVsUFRnQkJVbDlOUVZKTFJWSmZTVTVHVDE5RFZWUlBSa1pmVUVoQlUwVmZUVUZVUTBoZlIwVk9SVkpKUXdCQlVsOU5RVkpMUlZKZlNVNUdUMTlEVlZSUFJrWmZVRWhCVTBWZlRVRlVRMGhmUTA5T1ZGSkJVMVFBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDAxQlZFTklYMEpCVWtOUFJFVmZUazlVWDBaUFZVNUVBRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlOUVZSRFNGOUNRVkpEVDBSRlgwVkVRMTlHUVVsTUFFRlNYMDFCVWt0RlVsOUpUa1pQWDBOVlZFOUdSbDlRU0VGVFJWOU5RVlJEU0Y5RFQwNUdTVVJGVGtORkFFRlNYMDFCVWt0RlVsOUpUa1pQWDBOVlZFOUdSbDlRU0VGVFJWOVFUMU5GWDBWU1VrOVNBRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlRVDFORlgwVlNVazlTWDAxVlRGUkpBRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlJUlZWU1NWTlVTVU5mVkZKUFZVSk1SVk5QVFVWZlRVRlVVa2xZWDBOUFJFVlRBQUJoYkd4dlkyRjBiM0k4VkQ0Nk9tRnNiRzlqWVhSbEtITnBlbVZmZENCdUtTQW5iaWNnWlhoalpXVmtjeUJ0WVhocGJYVnRJSE4xY0hCdmNuUmxaQ0J6YVhwbEFIQjFjMmhmWW1GamF3QnlaWE5wZW1VQWMybDZaUUJuWlhRQWMyVjBBRTVUZEROZlh6STJkbVZqZEc5eVNVNVRYekV5WW1GemFXTmZjM1J5YVc1blNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVTVUWHpsaGJHeHZZMkYwYjNKSlkwVkZSVVZPVXpSZlNWTTJYMFZGUlVVQVRsTjBNMTlmTWpFelgxOTJaV04wYjNKZlltRnpaVWxPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRsTTBYMGxUTmw5RlJVVkZBRTVUZEROZlh6SXlNRjlmZG1WamRHOXlYMkpoYzJWZlkyOXRiVzl1U1V4aU1VVkZSUUFBc1BZQUFQNStBQUEwOXdBQW9INEFBQUFBQUFBQkFBQUFKSDhBQUFBQUFBQTA5d0FBU240QUFBQUFBQUFCQUFBQUxIOEFBQUFBQUFCUVRsTjBNMTlmTWpaMlpXTjBiM0pKVGxOZk1USmlZWE5wWTE5emRISnBibWRKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlRsTmZPV0ZzYkc5allYUnZja2xqUlVWRlJVNVRORjlKVXpaZlJVVkZSUUFBa1BjQUFGeC9BQUFBQUFBQVJIOEFBRkJMVGxOME0xOWZNaloyWldOMGIzSkpUbE5mTVRKaVlYTnBZMTl6ZEhKcGJtZEpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGVGxOZk9XRnNiRzlqWVhSdmNrbGpSVVZGUlU1VE5GOUpVelpmUlVWRlJRQ1E5d0FBeEg4QUFBRUFBQUJFZndBQWFXa0FkZ0IyYVFDMGZ3QUFCUFlBQUxSL0FBQzBnQUFBVGxOME0xOWZNakV5WW1GemFXTmZjM1J5YVc1blNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVTVUWHpsaGJHeHZZMkYwYjNKSlkwVkZSVVVBVGxOME0xOWZNakl4WDE5aVlYTnBZMTl6ZEhKcGJtZGZZMjl0Ylc5dVNVeGlNVVZGUlFBQUFBQ3c5Z0FBZzRBQUFEVDNBQUJFZ0FBQUFBQUFBQUVBQUFDc2dBQUFBQUFBQUhacGFXa0FRZUNCQWd0UUJQWUFBTFIvQUFDSTlnQUF0SUFBQUhacGFXbHBBQUFBaVBZQUFCeUFBQUJwYVdrQUpJRUFBRVIvQUFDSTlnQUFUakV3WlcxelkzSnBjSFJsYmpOMllXeEZBQUN3OWdBQUVJRUFBR2xwYVdrQVFjQ0NBZ3VXQWh6MkFBQkVmd0FBaVBZQUFMU0FBQUJwYVdscGFRQk9VM1F6WDE4eU5uWmxZM1J2Y2tscFRsTmZPV0ZzYkc5allYUnZja2xwUlVWRlJRQk9VM1F6WDE4eU1UTmZYM1psWTNSdmNsOWlZWE5sU1dsT1UxODVZV3hzYjJOaGRHOXlTV2xGUlVWRkFBQUFOUGNBQUhxQkFBQUFBQUFBQVFBQUFDUi9BQUFBQUFBQU5QY0FBRmFCQUFBQUFBQUFBUUFBQUtpQkFBQUFBQUFBVUU1VGRETmZYekkyZG1WamRHOXlTV2xPVTE4NVlXeHNiMk5oZEc5eVNXbEZSVVZGQUFBQUFKRDNBQURZZ1FBQUFBQUFBTUNCQUFCUVMwNVRkRE5mWHpJMmRtVmpkRzl5U1dsT1UxODVZV3hzYjJOaGRHOXlTV2xGUlVWRkFBQUFrUGNBQUJDQ0FBQUJBQUFBd0lFQUFBQ0NBQUFFOWdBQUFJSUFBR1QyQUVIZ2hBSUxJZ1QyQUFBQWdnQUFpUFlBQUdUMkFBQ0k5Z0FBT0lJQUFDU0JBQURBZ1FBQWlQWUFRWkNGQWd2V0poejJBQURBZ1FBQWlQWUFBR1QyQUFCazlnQUFaUFlBQUdUMkFBQms5Z0FBWlBZQUFHVDJBQURRZ2dBQVpQWUFBTFNBQUFBNWJtWjBUV0Z5YTJWeUFBQ3c5Z0FBeElJQUFNQ0JBQUJrOWdBQVJIOEFBR1QyQUFDMGdBQUFaUFlBQUdUMkFBQms5Z0FBMElJQUFHVDJBQUJwQUFBQUJQWUFBR1QyQUFCMmFXa0FaUFlBQUFUMkFBQms5Z0FBb1BZQUFIWnBhV1FBQUFBQW9QWUFBR1QyQUFCa2FXa0FCUFlBQUdUMkFBQms5Z0FBVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0FqSXlNZ1JtVmhkSFZ5WlNCallXNWthV1JoZEdWeklHWnZjaUIwY21GamEybHVaeUJoY21VZ2IzWmxjbVpzYjNjdUNnQkZjbkp2Y2pvZ2JXRnNiRzlqQ2dCQ2IyZDFjeUJ0WlhOellXZGxJR052WkdVZ0pXUUFRVXhKUjA1ZlZGbFFSU0JwY3lCM2NtOXVaeXdnY0d4bFlYTmxJR1pwZUFCTlFWaGZRVXhNVDBOZlEwaFZUa3NnYVhNZ2QzSnZibWNzSUhCc1pXRnpaU0JtYVhnQVFtOW5kWE1nWW5WbVptVnlJR052Ym5SeWIyd2diVzlrWlFCSmJuWmhiR2xrSUdOdmJYQnZibVZ1ZENCSlJDQWxaQ0JwYmlCVFQxTUFTVzUyWVd4cFpDQmpjbTl3SUhKbGNYVmxjM1FBUkVOVUlHTnZaV1ptYVdOcFpXNTBJRzkxZENCdlppQnlZVzVuWlFCRVExUWdjMk5oYkdWa0lHSnNiMk5ySUhOcGVtVWdKV1I0SldRZ2JtOTBJSE4xY0hCdmNuUmxaQUJEYjIxd2IyNWxiblFnYVc1a1pYZ2dKV1E2SUcxcGMyMWhkR05vYVc1bklITmhiWEJzYVc1bklISmhkR2x2SUNWa09pVmtMQ0FsWkRvbFpDd2dKV01BUW05bmRYTWdTSFZtWm0xaGJpQjBZV0pzWlNCa1pXWnBibWwwYVc5dUFFSnZaM1Z6SUdsdWNIVjBJR052Ykc5eWMzQmhZMlVBUW05bmRYTWdTbEJGUnlCamIyeHZjbk53WVdObEFFSnZaM1Z6SUcxaGNtdGxjaUJzWlc1bmRHZ0FWM0p2Ym1jZ1NsQkZSeUJzYVdKeVlYSjVJSFpsY25OcGIyNDZJR3hwWW5KaGNua2dhWE1nSldRc0lHTmhiR3hsY2lCbGVIQmxZM1J6SUNWa0FGTmhiWEJzYVc1bklHWmhZM1J2Y25NZ2RHOXZJR3hoY21kbElHWnZjaUJwYm5SbGNteGxZWFpsWkNCelkyRnVBRWx1ZG1Gc2FXUWdiV1Z0YjNKNUlIQnZiMndnWTI5a1pTQWxaQUJWYm5OMWNIQnZjblJsWkNCS1VFVkhJR1JoZEdFZ2NISmxZMmx6YVc5dUlDVmtBRWx1ZG1Gc2FXUWdjSEp2WjNKbGMzTnBkbVVnY0dGeVlXMWxkR1Z5Y3lCVGN6MGxaQ0JUWlQwbFpDQkJhRDBsWkNCQmJEMGxaQUJKYm5aaGJHbGtJSEJ5YjJkeVpYTnphWFpsSUhCaGNtRnRaWFJsY25NZ1lYUWdjMk5oYmlCelkzSnBjSFFnWlc1MGNua2dKV1FBUW05bmRYTWdjMkZ0Y0d4cGJtY2dabUZqZEc5eWN3QkpiblpoYkdsa0lITmpZVzRnYzJOeWFYQjBJR0YwSUdWdWRISjVJQ1ZrQUVsdGNISnZjR1Z5SUdOaGJHd2dkRzhnU2xCRlJ5QnNhV0p5WVhKNUlHbHVJSE4wWVhSbElDVmtBRXBRUlVjZ2NHRnlZVzFsZEdWeUlITjBjblZqZENCdGFYTnRZWFJqYURvZ2JHbGljbUZ5ZVNCMGFHbHVhM01nYzJsNlpTQnBjeUFsZFN3Z1kyRnNiR1Z5SUdWNGNHVmpkSE1nSlhVQVFtOW5kWE1nZG1seWRIVmhiQ0JoY25KaGVTQmhZMk5sYzNNQVFuVm1abVZ5SUhCaGMzTmxaQ0IwYnlCS1VFVkhJR3hwWW5KaGNua2dhWE1nZEc5dklITnRZV3hzQUZOMWMzQmxibk5wYjI0Z2JtOTBJR0ZzYkc5M1pXUWdhR1Z5WlFCRFEwbFNOakF4SUhOaGJYQnNhVzVuSUc1dmRDQnBiWEJzWlcxbGJuUmxaQ0I1WlhRQVZHOXZJRzFoYm5rZ1kyOXNiM0lnWTI5dGNHOXVaVzUwY3pvZ0pXUXNJRzFoZUNBbFpBQlZibk4xY0hCdmNuUmxaQ0JqYjJ4dmNpQmpiMjUyWlhKemFXOXVJSEpsY1hWbGMzUUFRbTluZFhNZ1JFRkRJR2x1WkdWNElDVmtBRUp2WjNWeklFUkJReUIyWVd4MVpTQXdlQ1Y0QUVKdlozVnpJRVJJVkNCcGJtUmxlQ0FsWkFCQ2IyZDFjeUJFVVZRZ2FXNWtaWGdnSldRQVJXMXdkSGtnU2xCRlJ5QnBiV0ZuWlNBb1JFNU1JRzV2ZENCemRYQndiM0owWldRcEFGSmxZV1FnWm5KdmJTQkZUVk1nWm1GcGJHVmtBRmR5YVhSbElIUnZJRVZOVXlCbVlXbHNaV1FBUkdsa2JpZDBJR1Y0Y0dWamRDQnRiM0psSUhSb1lXNGdiMjVsSUhOallXNEFTVzV3ZFhRZ1ptbHNaU0J5WldGa0lHVnljbTl5QUU5MWRIQjFkQ0JtYVd4bElIZHlhWFJsSUdWeWNtOXlJQzB0TFNCdmRYUWdiMllnWkdsemF5QnpjR0ZqWlQ4QVJuSmhZM1JwYjI1aGJDQnpZVzF3YkdsdVp5QnViM1FnYVcxd2JHVnRaVzUwWldRZ2VXVjBBRWgxWm1adFlXNGdZMjlrWlNCemFYcGxJSFJoWW14bElHOTJaWEptYkc5M0FFMXBjM05wYm1jZ1NIVm1abTFoYmlCamIyUmxJSFJoWW14bElHVnVkSEo1QUUxaGVHbHRkVzBnYzNWd2NHOXlkR1ZrSUdsdFlXZGxJR1JwYldWdWMybHZiaUJwY3lBbGRTQndhWGhsYkhNQVJXMXdkSGtnYVc1d2RYUWdabWxzWlFCUWNtVnRZWFIxY21VZ1pXNWtJRzltSUdsdWNIVjBJR1pwYkdVQVEyRnVibTkwSUhSeVlXNXpZMjlrWlNCa2RXVWdkRzhnYlhWc2RHbHdiR1VnZFhObElHOW1JSEYxWVc1MGFYcGhkR2x2YmlCMFlXSnNaU0FsWkFCVFkyRnVJSE5qY21sd2RDQmtiMlZ6SUc1dmRDQjBjbUZ1YzIxcGRDQmhiR3dnWkdGMFlRQkpiblpoYkdsa0lHTnZiRzl5SUhGMVlXNTBhWHBoZEdsdmJpQnRiMlJsSUdOb1lXNW5aUUJPYjNRZ2FXMXdiR1Z0Wlc1MFpXUWdlV1YwQUZKbGNYVmxjM1JsWkNCbVpXRjBkWEpsSUhkaGN5QnZiV2wwZEdWa0lHRjBJR052YlhCcGJHVWdkR2x0WlFCQmNtbDBhRzFsZEdsaklIUmhZbXhsSURCNEpUQXllQ0IzWVhNZ2JtOTBJR1JsWm1sdVpXUUFRbUZqYTJsdVp5QnpkRzl5WlNCdWIzUWdjM1Z3Y0c5eWRHVmtBRWgxWm1adFlXNGdkR0ZpYkdVZ01IZ2xNREo0SUhkaGN5QnViM1FnWkdWbWFXNWxaQUJLVUVWSElHUmhkR0Z6ZEhKbFlXMGdZMjl1ZEdGcGJuTWdibThnYVcxaFoyVUFVWFZoYm5ScGVtRjBhVzl1SUhSaFlteGxJREI0SlRBeWVDQjNZWE1nYm05MElHUmxabWx1WldRQVRtOTBJR0VnU2xCRlJ5Qm1hV3hsT2lCemRHRnlkSE1nZDJsMGFDQXdlQ1V3TW5nZ01IZ2xNREo0QUVsdWMzVm1abWxqYVdWdWRDQnRaVzF2Y25rZ0tHTmhjMlVnSldRcEFFTmhibTV2ZENCeGRXRnVkR2w2WlNCdGIzSmxJSFJvWVc0Z0pXUWdZMjlzYjNJZ1kyOXRjRzl1Wlc1MGN3QkRZVzV1YjNRZ2NYVmhiblJwZW1VZ2RHOGdabVYzWlhJZ2RHaGhiaUFsWkNCamIyeHZjbk1BUTJGdWJtOTBJSEYxWVc1MGFYcGxJSFJ2SUcxdmNtVWdkR2hoYmlBbFpDQmpiMnh2Y25NQVNXNTJZV3hwWkNCS1VFVkhJR1pwYkdVZ2MzUnlkV04wZFhKbE9pQWxjeUJpWldadmNtVWdVMDlHQUVsdWRtRnNhV1FnU2xCRlJ5Qm1hV3hsSUhOMGNuVmpkSFZ5WlRvZ2RIZHZJRk5QUmlCdFlYSnJaWEp6QUVsdWRtRnNhV1FnU2xCRlJ5Qm1hV3hsSUhOMGNuVmpkSFZ5WlRvZ2JXbHpjMmx1WnlCVFQxTWdiV0Z5YTJWeUFGVnVjM1Z3Y0c5eWRHVmtJRXBRUlVjZ2NISnZZMlZ6Y3pvZ1UwOUdJSFI1Y0dVZ01IZ2xNREo0QUVsdWRtRnNhV1FnU2xCRlJ5Qm1hV3hsSUhOMGNuVmpkSFZ5WlRvZ2RIZHZJRk5QU1NCdFlYSnJaWEp6QUVaaGFXeGxaQ0IwYnlCamNtVmhkR1VnZEdWdGNHOXlZWEo1SUdacGJHVWdKWE1BVW1WaFpDQm1ZV2xzWldRZ2IyNGdkR1Z0Y0c5eVlYSjVJR1pwYkdVQVUyVmxheUJtWVdsc1pXUWdiMjRnZEdWdGNHOXlZWEo1SUdacGJHVUFWM0pwZEdVZ1ptRnBiR1ZrSUc5dUlIUmxiWEJ2Y21GeWVTQm1hV3hsSUMwdExTQnZkWFFnYjJZZ1pHbHpheUJ6Y0dGalpUOEFRWEJ3YkdsallYUnBiMjRnZEhKaGJuTm1aWEp5WldRZ2RHOXZJR1psZHlCelkyRnViR2x1WlhNQVZXNXpkWEJ3YjNKMFpXUWdiV0Z5YTJWeUlIUjVjR1VnTUhnbE1ESjRBRlpwY25SMVlXd2dZWEp5WVhrZ1kyOXVkSEp2Ykd4bGNpQnRaWE56WldRZ2RYQUFTVzFoWjJVZ2RHOXZJSGRwWkdVZ1ptOXlJSFJvYVhNZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRBVW1WaFpDQm1jbTl0SUZoTlV5Qm1ZV2xzWldRQVYzSnBkR1VnZEc4Z1dFMVRJR1poYVd4bFpBQkRiM0I1Y21sbmFIUWdLRU1wSURJd01UZ3NJRlJvYjIxaGN5QkhMaUJNWVc1bExDQkhkV2xrYnlCV2IyeHNZbVZrYVc1bkFEbGpJQ0F4TkMxS1lXNHRNakF4T0FCRFlYVjBhVzl1T2lCeGRXRnVkR2w2WVhScGIyNGdkR0ZpYkdWeklHRnlaU0IwYjI4Z1kyOWhjbk5sSUdadmNpQmlZWE5sYkdsdVpTQktVRVZIQUVGa2IySmxJRUZRVURFMElHMWhjbXRsY2pvZ2RtVnljMmx2YmlBbFpDd2dabXhoWjNNZ01IZ2xNRFI0SURCNEpUQTBlQ3dnZEhKaGJuTm1iM0p0SUNWa0FGVnVhMjV2ZDI0Z1FWQlFNQ0J0WVhKclpYSWdLRzV2ZENCS1JrbEdLU3dnYkdWdVozUm9JQ1YxQUZWdWEyNXZkMjRnUVZCUU1UUWdiV0Z5YTJWeUlDaHViM1FnUVdSdlltVXBMQ0JzWlc1bmRHZ2dKWFVBUkdWbWFXNWxJRUZ5YVhSb2JXVjBhV01nVkdGaWJHVWdNSGdsTURKNE9pQXdlQ1V3TW5nQVJHVm1hVzVsSUVoMVptWnRZVzRnVkdGaWJHVWdNSGdsTURKNEFFUmxabWx1WlNCUmRXRnVkR2w2WVhScGIyNGdWR0ZpYkdVZ0pXUWdJSEJ5WldOcGMybHZiaUFsWkFCRVpXWnBibVVnVW1WemRHRnlkQ0JKYm5SbGNuWmhiQ0FsZFFCR2NtVmxaQ0JGVFZNZ2FHRnVaR3hsSUNWMUFFOWlkR0ZwYm1Wa0lFVk5VeUJvWVc1a2JHVWdKWFVBUlc1a0lFOW1JRWx0WVdkbEFDQWdJQ0FnSUNBZ0pUTmtJQ1V6WkNBbE0yUWdKVE5rSUNVelpDQWxNMlFnSlROa0lDVXpaQUJLUmtsR0lFRlFVREFnYldGeWEyVnlPaUIyWlhKemFXOXVJQ1ZrTGlVd01tUXNJR1JsYm5OcGRIa2dKV1I0SldRZ0lDVmtBRmRoY201cGJtYzZJSFJvZFcxaWJtRnBiQ0JwYldGblpTQnphWHBsSUdSdlpYTWdibTkwSUcxaGRHTm9JR1JoZEdFZ2JHVnVaM1JvSUNWMUFFcEdTVVlnWlhoMFpXNXphVzl1SUcxaGNtdGxjam9nZEhsd1pTQXdlQ1V3TW5nc0lHeGxibWQwYUNBbGRRQWdJQ0FnZDJsMGFDQWxaQ0I0SUNWa0lIUm9kVzFpYm1GcGJDQnBiV0ZuWlFCTmFYTmpaV3hzWVc1bGIzVnpJRzFoY210bGNpQXdlQ1V3TW5nc0lHeGxibWQwYUNBbGRRQlZibVY0Y0dWamRHVmtJRzFoY210bGNpQXdlQ1V3TW5nQUlDQWdJQ0FnSUNBbE5IVWdKVFIxSUNVMGRTQWxOSFVnSlRSMUlDVTBkU0FsTkhVZ0pUUjFBRkYxWVc1MGFYcHBibWNnZEc4Z0pXUWdQU0FsWkNvbFpDb2xaQ0JqYjJ4dmNuTUFVWFZoYm5ScGVtbHVaeUIwYnlBbFpDQmpiMnh2Y25NQVUyVnNaV04wWldRZ0pXUWdZMjlzYjNKeklHWnZjaUJ4ZFdGdWRHbDZZWFJwYjI0QVFYUWdiV0Z5YTJWeUlEQjRKVEF5ZUN3Z2NtVmpiM1psY25rZ1lXTjBhVzl1SUNWa0FGSlRWQ1ZrQUZOdGIyOTBhR2x1WnlCdWIzUWdjM1Z3Y0c5eWRHVmtJSGRwZEdnZ2JtOXVjM1JoYm1SaGNtUWdjMkZ0Y0d4cGJtY2djbUYwYVc5ekFGTjBZWEowSUU5bUlFWnlZVzFsSURCNEpUQXllRG9nZDJsa2RHZzlKWFVzSUdobGFXZG9kRDBsZFN3Z1kyOXRjRzl1Wlc1MGN6MGxaQUFnSUNBZ1EyOXRjRzl1Wlc1MElDVmtPaUFsWkdoNEpXUjJJSEU5SldRQVUzUmhjblFnYjJZZ1NXMWhaMlVBVTNSaGNuUWdUMllnVTJOaGJqb2dKV1FnWTI5dGNHOXVaVzUwY3dBZ0lDQWdRMjl0Y0c5dVpXNTBJQ1ZrT2lCa1l6MGxaQ0JoWXowbFpBQWdJRk56UFNWa0xDQlRaVDBsWkN3Z1FXZzlKV1FzSUVGc1BTVmtBRU5zYjNObFpDQjBaVzF3YjNKaGNua2dabWxzWlNBbGN3QlBjR1Z1WldRZ2RHVnRjRzl5WVhKNUlHWnBiR1VnSlhNQVNrWkpSaUJsZUhSbGJuTnBiMjRnYldGeWEyVnlPaUJLVUVWSExXTnZiWEJ5WlhOelpXUWdkR2gxYldKdVlXbHNJR2x0WVdkbExDQnNaVzVuZEdnZ0pYVUFTa1pKUmlCbGVIUmxibk5wYjI0Z2JXRnlhMlZ5T2lCd1lXeGxkSFJsSUhSb2RXMWlibUZwYkNCcGJXRm5aU3dnYkdWdVozUm9JQ1YxQUVwR1NVWWdaWGgwWlc1emFXOXVJRzFoY210bGNqb2dVa2RDSUhSb2RXMWlibUZwYkNCcGJXRm5aU3dnYkdWdVozUm9JQ1YxQUZWdWNtVmpiMmR1YVhwbFpDQmpiMjF3YjI1bGJuUWdTVVJ6SUNWa0lDVmtJQ1ZrTENCaGMzTjFiV2x1WnlCWlEySkRjZ0JHY21WbFpDQllUVk1nYUdGdVpHeGxJQ1YxQUU5aWRHRnBibVZrSUZoTlV5Qm9ZVzVrYkdVZ0pYVUFWVzVyYm05M2JpQkJaRzlpWlNCamIyeHZjaUIwY21GdWMyWnZjbTBnWTI5a1pTQWxaQUJEYjNKeWRYQjBJRXBRUlVjZ1pHRjBZVG9nWW1Ga0lHRnlhWFJvYldWMGFXTWdZMjlrWlFCSmJtTnZibk5wYzNSbGJuUWdjSEp2WjNKbGMzTnBiMjRnYzJWeGRXVnVZMlVnWm05eUlHTnZiWEJ2Ym1WdWRDQWxaQ0JqYjJWbVptbGphV1Z1ZENBbFpBQkRiM0p5ZFhCMElFcFFSVWNnWkdGMFlUb2dKWFVnWlhoMGNtRnVaVzkxY3lCaWVYUmxjeUJpWldadmNtVWdiV0Z5YTJWeUlEQjRKVEF5ZUFCRGIzSnlkWEIwSUVwUVJVY2daR0YwWVRvZ2NISmxiV0YwZFhKbElHVnVaQ0J2WmlCa1lYUmhJSE5sWjIxbGJuUUFRMjl5Y25Wd2RDQktVRVZISUdSaGRHRTZJR0poWkNCSWRXWm1iV0Z1SUdOdlpHVUFWMkZ5Ym1sdVp6b2dkVzVyYm05M2JpQktSa2xHSUhKbGRtbHphVzl1SUc1MWJXSmxjaUFsWkM0bE1ESmtBRkJ5WlcxaGRIVnlaU0JsYm1RZ2IyWWdTbEJGUnlCbWFXeGxBRU52Y25KMWNIUWdTbEJGUnlCa1lYUmhPaUJtYjNWdVpDQnRZWEpyWlhJZ01IZ2xNREo0SUdsdWMzUmxZV1FnYjJZZ1VsTlVKV1FBU1c1MllXeHBaQ0JUVDFNZ2NHRnlZVzFsZEdWeWN5Qm1iM0lnYzJWeGRXVnVkR2xoYkNCS1VFVkhBRUZ3Y0d4cFkyRjBhVzl1SUhSeVlXNXpabVZ5Y21Wa0lIUnZieUJ0WVc1NUlITmpZVzVzYVc1bGN3QkI4S3NDQzRNRWs0TUFBS21EQUFESmd3QUE3b01BQUFpRUFBQW5oQUFBUElRQUFGbUVBQUNEaEFBQXc0UUFBT0tFQUFENWhBQUFENFVBQUNPRkFBQmdoUUFBa0lVQUFLeUZBQURQaFFBQUJvWUFBRDJHQUFCVWhnQUFkSVlBQUo2R0FBRHJoZ0FBQm9jQUFER0hBQUJOaHdBQWNvY0FBSmlIQUFDOWh3QUEwSWNBQU9XSEFBRDRod0FBQzRnQUFEQ0lBQUJGaUFBQVdZZ0FBSHFJQUFDUWlBQUF2NGdBQU9lSUFBQUlpUUFBS1lrQUFGaUpBQUJwaVFBQWhZa0FBTU9KQUFEcWlRQUFFWW9BQUNXS0FBQlRpZ0FBZTRvQUFKZUtBQUM4aWdBQTNvb0FBQWlMQUFBeml3QUFVWXNBQUgrTEFBQ25pd0FBem9zQUFQbUxBQUFtakFBQVZvd0FBSUNNQUFDdGpBQUEwSXdBQU82TUFBQU1qUUFBUW8wQUFHeU5BQUNMalFBQXJvMEFBTldOQUFEcWpRQUEvbzBBQURPT0FBQkRqZ0FBZ1k0QUFNT09BQUR0amdBQUdZOEFBRUNQQUFCY2p3QUFoNDhBQUtLUEFBQzJqd0FBelk4QUFOcVBBQUFDa0FBQU41QUFBSE9RQUFDaGtBQUF3cEFBQU9tUUFBQUNrUUFBS3BFQUFFMlJBQUJsa1FBQWlaRUFBSzZSQUFDMGtRQUE3WkVBQUNlU0FBQkdrZ0FBVlpJQUFIS1NBQUNRa2dBQXJaSUFBTWFTQUFEZmtnQUFJWk1BQUZ1VEFBQ1Jrd0FBeFpNQUFObVRBQUR3a3dBQUZwUUFBRDJVQUFCL2xBQUF1NVFBQU95VUFBQVFsUUFBUHBVQUFGbVZBQUNSbFFBQXZKVUFBQUFBQUFBbGN3b0FRWVN3QWd1OUJBRUFBQUFJQUFBQUVBQUFBQWtBQUFBQ0FBQUFBd0FBQUFvQUFBQVJBQUFBR0FBQUFDQUFBQUFaQUFBQUVnQUFBQXNBQUFBRUFBQUFCUUFBQUF3QUFBQVRBQUFBR2dBQUFDRUFBQUFvQUFBQU1BQUFBQ2tBQUFBaUFBQUFHd0FBQUJRQUFBQU5BQUFBQmdBQUFBY0FBQUFPQUFBQUZRQUFBQndBQUFBakFBQUFLZ0FBQURFQUFBQTRBQUFBT1FBQUFESUFBQUFyQUFBQUpBQUFBQjBBQUFBV0FBQUFEd0FBQUJjQUFBQWVBQUFBSlFBQUFDd0FBQUF6QUFBQU9nQUFBRHNBQUFBMEFBQUFMUUFBQUNZQUFBQWZBQUFBSndBQUFDNEFBQUExQUFBQVBBQUFBRDBBQUFBMkFBQUFMd0FBQURjQUFBQStBQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQUFBQUFBQVFBQUFBZ0FBQUFRQUFBQUNRQUFBQUlBQUFBREFBQUFDZ0FBQUJFQUFBQVlBQUFBSUFBQUFCa0FBQUFTQUFBQUN3QUFBQVFBQUFBRkFBQUFEQUFBQUJNQUFBQWFBQUFBSVFBQUFDZ0FBQUF3QUFBQUtRQUFBQ0lBQUFBYkFBQUFGQUFBQUEwQUFBQUdBQUFBRGdBQUFCVUFBQUFjQUFBQUl3QUFBQ29BQUFBeEFBQUFNZ0FBQUNzQUFBQWtBQUFBSFFBQUFCWUFBQUFlQUFBQUpRQUFBQ3dBQUFBekFBQUFOQUFBQUMwQUFBQW1BQUFBTGdBQUFEVUFBQUEyQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdCQjFMUUNDKzBDQVFBQUFBZ0FBQUFRQUFBQUNRQUFBQUlBQUFBREFBQUFDZ0FBQUJFQUFBQVlBQUFBSUFBQUFCa0FBQUFTQUFBQUN3QUFBQVFBQUFBRkFBQUFEQUFBQUJNQUFBQWFBQUFBSVFBQUFDZ0FBQUFwQUFBQUlnQUFBQnNBQUFBVUFBQUFEUUFBQUJVQUFBQWNBQUFBSXdBQUFDb0FBQUFyQUFBQUpBQUFBQjBBQUFBbEFBQUFMQUFBQUMwQUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFBQUFBQUFFQUFBQUlBQUFBRUFBQUFBa0FBQUFDQUFBQUF3QUFBQW9BQUFBUkFBQUFHQUFBQUNBQUFBQVpBQUFBRWdBQUFBc0FBQUFFQUFBQURBQUFBQk1BQUFBYUFBQUFJUUFBQUNJQUFBQWJBQUFBRkFBQUFCd0FBQUFqQUFBQUpBQUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFRZFMzQWd2ZEFRRUFBQUFJQUFBQUVBQUFBQWtBQUFBQ0FBQUFBd0FBQUFvQUFBQVJBQUFBR0FBQUFCa0FBQUFTQUFBQUN3QUFBQk1BQUFBYUFBQUFHd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBQUFBQUFBUUFBQUFnQUFBQVFBQUFBQ1FBQUFBSUFBQUFLQUFBQUVRQUFBQklBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUVIRXVRSUxUd0VBQUFBSUFBQUFDUUFBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFCVFQxTUFRZUc2QWdzRFRGTkZBRUhCdXdJTDJBUEFNUEFNekR6OEE4TXo4dy9QUC8rQVFMQndqRXk4ZklORHMzT1BUNzkvSU9BUTBDenNITndqNHhQVEwrOGYzNkJna0ZDc2JKeGNvMk9UVTY5dm4xOEl5RGo0Qk1RMDlBdkxPL3NIeHpmM2lFaTRlSVJFdEhTTFM3dDdoMGUzZHlqb0dOZ2s1QlRVSytzYjJ5Zm5GOWVvYUpoWXBHU1VWS3RybTF1blo1ZFhBc0l5OGc3T1B2NEJ3VEh4RGMwOS9ZSkNzbktPVHI1K2dVR3hjWTFOdlgwaTRoTFNMdTRlM2lIaEVkRXQ3UjNkb21LU1VxNXVubDZoWVpGUnJXMmRYUXJLT3ZvR3hqYjJDY2s1K1FYRk5mV0tTcnA2aGthMmRvbEp1WG1GUmJWMUt1b2EyaWJtRnRZcDZSblpKZVVWMWFwcW1scW1acFpXcVdtWldhVmxsVlVCQUFBQUFBQUFBQUlBQUFBQUFBQUFBRURGV0o5VFFrc0FRRWt5b3lLb0VjVllJWHY4YzJKb3hWaS9SUXN3ZmhpZlUveHpRVzFVWXA5VHMwRkJMUklYUWt0aWFGUmlmbGhDU3lFN3VpakRGQUJBeFZpZlUwSkxBRUJKTXFNaXFCRkpNcjlGczBFaE8wa3lnaWMzRytBTm95SUxNRUV0dWlpaklqY2J2eEtPQ2FnUmZoZ1NGOE1VcUJIZ0RZNEozd1FBQUFBQUFBRHdQKzloU0xGUU1mWS95bTlOa2E3bjlEK3FFV3p2WXREeVB3QUFBQUFBQVBBL083K253R2trNlQrN0lNZDdlbEhoUDEycmN0NVZxTkUveHdBQUFNZ0FBQURKQUVHa3Z3SUxMUUVBQUFBQ0FBQUFBd0FBQUFBQUFBQUJBQUFBQlFBQUFBSUFBQUFFQUFBQUJnQUFBQU1BQUFBSEFBQUFDQUJCNUw4Q0M1MEJBUUFBQUFVQUFBQUdBQUFBQWdBQUFBUUFBQUFIQUFBQURBQUFBQU1BQUFBSUFBQUFDd0FBQUEwQUFBQUpBQUFBQ2dBQUFBNEFBQUFQQUFBQUFBQUFBQUVBQUFBRkFBQUFCZ0FBQUE0QUFBQUNBQUFBQkFBQUFBY0FBQUFOQUFBQUR3QUFBQU1BQUFBSUFBQUFEQUFBQUJBQUFBQVZBQUFBQ1FBQUFBc0FBQUFSQUFBQUZBQUFBQllBQUFBS0FBQUFFZ0FBQUJNQUFBQVhBQUFBR0FCQmxNRUNDODBDQVFBQUFBVUFBQUFHQUFBQURnQUFBQThBQUFBQ0FBQUFCQUFBQUFjQUFBQU5BQUFBRUFBQUFCa0FBQUFEQUFBQUNBQUFBQXdBQUFBUkFBQUFHQUFBQUJvQUFBQUpBQUFBQ3dBQUFCSUFBQUFYQUFBQUd3QUFBQ0FBQUFBS0FBQUFFd0FBQUJZQUFBQWNBQUFBSHdBQUFDRUFBQUFVQUFBQUZRQUFBQjBBQUFBZUFBQUFJZ0FBQUNNQUFBQUFBQUFBQVFBQUFBVUFBQUFHQUFBQURnQUFBQThBQUFBYkFBQUFBZ0FBQUFRQUFBQUhBQUFBRFFBQUFCQUFBQUFhQUFBQUhBQUFBQU1BQUFBSUFBQUFEQUFBQUJFQUFBQVpBQUFBSFFBQUFDWUFBQUFKQUFBQUN3QUFBQklBQUFBWUFBQUFIZ0FBQUNVQUFBQW5BQUFBQ2dBQUFCTUFBQUFYQUFBQUh3QUFBQ1FBQUFBb0FBQUFMUUFBQUJRQUFBQVdBQUFBSUFBQUFDTUFBQUFwQUFBQUxBQUFBQzRBQUFBVkFBQUFJUUFBQUNJQUFBQXFBQUFBS3dBQUFDOEFBQUF3QUVIMHd3SUwweE1CQUFBQUJRQUFBQVlBQUFBT0FBQUFEd0FBQUJzQUFBQWNBQUFBQWdBQUFBUUFBQUFIQUFBQURRQUFBQkFBQUFBYUFBQUFIUUFBQUNvQUFBQURBQUFBQ0FBQUFBd0FBQUFSQUFBQUdRQUFBQjRBQUFBcEFBQUFLd0FBQUFrQUFBQUxBQUFBRWdBQUFCZ0FBQUFmQUFBQUtBQUFBQ3dBQUFBMUFBQUFDZ0FBQUJNQUFBQVhBQUFBSUFBQUFDY0FBQUF0QUFBQU5BQUFBRFlBQUFBVUFBQUFGZ0FBQUNFQUFBQW1BQUFBTGdBQUFETUFBQUEzQUFBQVBBQUFBQlVBQUFBaUFBQUFKUUFBQUM4QUFBQXlBQUFBT0FBQUFEc0FBQUE5QUFBQUl3QUFBQ1FBQUFBd0FBQUFNUUFBQURrQUFBQTZBQUFBUGdBQUFEOEFBQUFBQUFBQUFRQUFBQU1BQUFBSEFBQUFEd0FBQUI4QUFBQS9BQUFBZndBQUFQOEFBQUQvQVFBQS93TUFBUDhIQUFEL0R3QUEveDhBQVA4L0FBRC9md0FBQVFBQUFBTUFBQUFEQUFBQUJBQUFBQVFBQUFBREFBQUFBd0FBQUVwUVJVZE5SVTBBSld4a0pXTUFBQUJBQmdBQWdENEFBQUFBQUFDSUV3QUFBQUFBQUlFQkhWb09Bb1lsRUFNVUVSSUVDd2dVQmRnREZ3YmFBUmtINVFBY0NHOEFIZ2syQUNFS0dnQWpDdzBBQ1F3R0FBb05Bd0FNRFFFQWp3OS9XaVFRSlQ4bUVmSXNKeEo4SUNnVHVSY3FGSUlSS3hYdkRDMFdvUWt1Rnk4SE1CaGNCVEVaQmdRekdnTUROQnRBQWpZY3NRRTRIVVFCT1I3MUFEc2Z0d0E4SUlvQVBpRm9BRDhpVGdBZ0l6c0FJUWtzQUtVbDRWcEFKa3hJUVNjTk9rTW84UzVFS1I4bVJTb3pIMFlycUJsSUxCZ1ZTUzEzRVVvdWRBNUxML3NMVFRENENVNHhZUWhQTWdZSE1EUE5CVEkwM2dReU5ROEVNelpqQXpRMzFBSTFPRndDTmpuNEFUYzZwQUU0TzJBQk9Ud2xBVG85OWdBN1Bzc0FQVCtyQUQwZ2p3REJRUkpiVUVJRVRWRkRMRUZTUk5nM1UwWG9MMVJHUENsV1Iza2pWMGpmSGxkSnFScElTazRYU0Vza0ZFcE1uQkZLVFdzUFMwNVJEVTFQdGd0Tk1FQUswRkV5V0ZoU0hFMVpVNDVEV2xUZE8xdFY3alJjVnE0dVhWZWFLVlpIRmlYWVdYQlZYMXFwVEdCYjJVUmhYQ0krWTEwa09HTmV0REpkVmhjdTMyQ29WbVZoUms5bVl1VkhaMlBQUVdoa1BUeGpYVjQzYVdZeFVtcG5EMHhyYURsR1oyTmVRZWxxSjFac2ErZFFiV2VGUzI1dGwxVnZhMDlRN204UVduQnRJbFh3Yit0WmNYRWRXblp2YVdRQVltOXZiQUJqYUdGeUFITnBaMjVsWkNCamFHRnlBSFZ1YzJsbmJtVmtJR05vWVhJQWMyaHZjblFBZFc1emFXZHVaV1FnYzJodmNuUUFhVzUwQUhWdWMybG5ibVZrSUdsdWRBQnNiMjVuQUhWdWMybG5ibVZrSUd4dmJtY0FabXh2WVhRQVpHOTFZbXhsQUhOMFpEbzZjM1J5YVc1bkFITjBaRG82WW1GemFXTmZjM1J5YVc1blBIVnVjMmxuYm1Wa0lHTm9ZWEkrQUhOMFpEbzZkM04wY21sdVp3QnpkR1E2T25VeE5uTjBjbWx1WndCemRHUTZPblV6TW5OMGNtbHVad0JsYlhOamNtbHdkR1Z1T2pwMllXd0FaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOFkyaGhjajRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhjMmxuYm1Wa0lHTm9ZWEkrQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZ1YzJsbmJtVmtJR05vWVhJK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEhOb2IzSjBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eDFibk5wWjI1bFpDQnphRzl5ZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YVc1MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWJuTnBaMjVsWkNCcGJuUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHeHZibWMrQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZ1YzJsbmJtVmtJR3h2Ym1jK0FHVnRjMk55YVhCMFpXNDZPbTFsYlc5eWVWOTJhV1YzUEdsdWREaGZkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhkV2x1ZERoZmRENEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGFXNTBNVFpmZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4ZFdsdWRERTJYM1ErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQR2x1ZERNeVgzUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BIVnBiblF6TWw5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4bWJHOWhkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhaRzkxWW14bFBnQk9VM1F6WDE4eU1USmlZWE5wWTE5emRISnBibWRKYUU1VFh6RXhZMmhoY2w5MGNtRnBkSE5KYUVWRlRsTmZPV0ZzYkc5allYUnZja2xvUlVWRlJRQUFBQUEwOXdBQVRxZ0FBQUFBQUFBQkFBQUFySUFBQUFBQUFBQk9VM1F6WDE4eU1USmlZWE5wWTE5emRISnBibWRKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlRsTmZPV0ZzYkc5allYUnZja2wzUlVWRlJRQUFOUGNBQUtpb0FBQUFBQUFBQVFBQUFLeUFBQUFBQUFBQVRsTjBNMTlmTWpFeVltRnphV05mYzNSeWFXNW5TVVJ6VGxOZk1URmphR0Z5WDNSeVlXbDBjMGxFYzBWRlRsTmZPV0ZzYkc5allYUnZja2xFYzBWRlJVVUFBQUEwOXdBQUFLa0FBQUFBQUFBQkFBQUFySUFBQUFBQUFBQk9VM1F6WDE4eU1USmlZWE5wWTE5emRISnBibWRKUkdsT1UxOHhNV05vWVhKZmRISmhhWFJ6U1VScFJVVk9VMTg1WVd4c2IyTmhkRzl5U1VScFJVVkZSUUFBQURUM0FBQmNxUUFBQUFBQUFBRUFBQUNzZ0FBQUFBQUFBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV05GUlFBQXNQWUFBTGlwQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsaFJVVUFBTEQyQUFEZ3FRQUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEphRVZGQUFDdzlnQUFDS29BQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1hORlJRQUFzUFlBQURDcUFBQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbDBSVVVBQUxEMkFBQllxZ0FBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYVVWRkFBQ3c5Z0FBZ0tvQUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXcEZSUUFBc1BZQUFLaXFBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxzUlVVQUFMRDJBQURRcWdBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSmJVVkZBQUN3OWdBQStLb0FBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV1pGUlFBQXNQWUFBQ0NyQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBsa1JVVUFBTEQyQUFCSXF3QUFHUkpFT3dJL0xFY1VQVE13Q2hzR1JrdEZOdzlKRG80WEEwQWRQR2tyTmg5S0xSd0JJQ1VwSVFnTUZSWWlMaEE0UGdzME1SaGtkSFYyTDBFSmZ6a1JJME15UW9tS2l3VUVKaWduRFNvZU5Zd0hHa2lURTVTVkFFSFExd0lMcEE1SmJHeGxaMkZzSUdKNWRHVWdjMlZ4ZFdWdVkyVUFSRzl0WVdsdUlHVnljbTl5QUZKbGMzVnNkQ0J1YjNRZ2NtVndjbVZ6Wlc1MFlXSnNaUUJPYjNRZ1lTQjBkSGtBVUdWeWJXbHpjMmx2YmlCa1pXNXBaV1FBVDNCbGNtRjBhVzl1SUc1dmRDQndaWEp0YVhSMFpXUUFUbThnYzNWamFDQm1hV3hsSUc5eUlHUnBjbVZqZEc5eWVRQk9ieUJ6ZFdOb0lIQnliMk5sYzNNQVJtbHNaU0JsZUdsemRITUFWbUZzZFdVZ2RHOXZJR3hoY21kbElHWnZjaUJrWVhSaElIUjVjR1VBVG04Z2MzQmhZMlVnYkdWbWRDQnZiaUJrWlhacFkyVUFUM1YwSUc5bUlHMWxiVzl5ZVFCU1pYTnZkWEpqWlNCaWRYTjVBRWx1ZEdWeWNuVndkR1ZrSUhONWMzUmxiU0JqWVd4c0FGSmxjMjkxY21ObElIUmxiWEJ2Y21GeWFXeDVJSFZ1WVhaaGFXeGhZbXhsQUVsdWRtRnNhV1FnYzJWbGF3QkRjbTl6Y3kxa1pYWnBZMlVnYkdsdWF3QlNaV0ZrTFc5dWJIa2dabWxzWlNCemVYTjBaVzBBUkdseVpXTjBiM0o1SUc1dmRDQmxiWEIwZVFCRGIyNXVaV04wYVc5dUlISmxjMlYwSUdKNUlIQmxaWElBVDNCbGNtRjBhVzl1SUhScGJXVmtJRzkxZEFCRGIyNXVaV04wYVc5dUlISmxablZ6WldRQVNHOXpkQ0JwY3lCa2IzZHVBRWh2YzNRZ2FYTWdkVzV5WldGamFHRmliR1VBUVdSa2NtVnpjeUJwYmlCMWMyVUFRbkp2YTJWdUlIQnBjR1VBU1M5UElHVnljbTl5QUU1dklITjFZMmdnWkdWMmFXTmxJRzl5SUdGa1pISmxjM01BUW14dlkyc2daR1YyYVdObElISmxjWFZwY21Wa0FFNXZJSE4xWTJnZ1pHVjJhV05sQUU1dmRDQmhJR1JwY21WamRHOXllUUJKY3lCaElHUnBjbVZqZEc5eWVRQlVaWGgwSUdacGJHVWdZblZ6ZVFCRmVHVmpJR1p2Y20xaGRDQmxjbkp2Y2dCSmJuWmhiR2xrSUdGeVozVnRaVzUwQUVGeVozVnRaVzUwSUd4cGMzUWdkRzl2SUd4dmJtY0FVM2x0WW05c2FXTWdiR2x1YXlCc2IyOXdBRVpwYkdWdVlXMWxJSFJ2YnlCc2IyNW5BRlJ2YnlCdFlXNTVJRzl3Wlc0Z1ptbHNaWE1nYVc0Z2MzbHpkR1Z0QUU1dklHWnBiR1VnWkdWelkzSnBjSFJ2Y25NZ1lYWmhhV3hoWW14bEFFSmhaQ0JtYVd4bElHUmxjMk55YVhCMGIzSUFUbThnWTJocGJHUWdjSEp2WTJWemN3QkNZV1FnWVdSa2NtVnpjd0JHYVd4bElIUnZieUJzWVhKblpRQlViMjhnYldGdWVTQnNhVzVyY3dCT2J5QnNiMk5yY3lCaGRtRnBiR0ZpYkdVQVVtVnpiM1Z5WTJVZ1pHVmhaR3h2WTJzZ2QyOTFiR1FnYjJOamRYSUFVM1JoZEdVZ2JtOTBJSEpsWTI5MlpYSmhZbXhsQUZCeVpYWnBiM1Z6SUc5M2JtVnlJR1JwWldRQVQzQmxjbUYwYVc5dUlHTmhibU5sYkdWa0FFWjFibU4wYVc5dUlHNXZkQ0JwYlhCc1pXMWxiblJsWkFCT2J5QnRaWE56WVdkbElHOW1JR1JsYzJseVpXUWdkSGx3WlFCSlpHVnVkR2xtYVdWeUlISmxiVzkyWldRQVJHVjJhV05sSUc1dmRDQmhJSE4wY21WaGJRQk9ieUJrWVhSaElHRjJZV2xzWVdKc1pRQkVaWFpwWTJVZ2RHbHRaVzkxZEFCUGRYUWdiMllnYzNSeVpXRnRjeUJ5WlhOdmRYSmpaWE1BVEdsdWF5Qm9ZWE1nWW1WbGJpQnpaWFpsY21Wa0FGQnliM1J2WTI5c0lHVnljbTl5QUVKaFpDQnRaWE56WVdkbEFFWnBiR1VnWkdWelkzSnBjSFJ2Y2lCcGJpQmlZV1FnYzNSaGRHVUFUbTkwSUdFZ2MyOWphMlYwQUVSbGMzUnBibUYwYVc5dUlHRmtaSEpsYzNNZ2NtVnhkV2x5WldRQVRXVnpjMkZuWlNCMGIyOGdiR0Z5WjJVQVVISnZkRzlqYjJ3Z2QzSnZibWNnZEhsd1pTQm1iM0lnYzI5amEyVjBBRkJ5YjNSdlkyOXNJRzV2ZENCaGRtRnBiR0ZpYkdVQVVISnZkRzlqYjJ3Z2JtOTBJSE4xY0hCdmNuUmxaQUJUYjJOclpYUWdkSGx3WlNCdWIzUWdjM1Z3Y0c5eWRHVmtBRTV2ZENCemRYQndiM0owWldRQVVISnZkRzlqYjJ3Z1ptRnRhV3g1SUc1dmRDQnpkWEJ3YjNKMFpXUUFRV1JrY21WemN5Qm1ZVzFwYkhrZ2JtOTBJSE4xY0hCdmNuUmxaQ0JpZVNCd2NtOTBiMk52YkFCQlpHUnlaWE56SUc1dmRDQmhkbUZwYkdGaWJHVUFUbVYwZDI5eWF5QnBjeUJrYjNkdUFFNWxkSGR2Y21zZ2RXNXlaV0ZqYUdGaWJHVUFRMjl1Ym1WamRHbHZiaUJ5WlhObGRDQmllU0J1WlhSM2IzSnJBRU52Ym01bFkzUnBiMjRnWVdKdmNuUmxaQUJPYnlCaWRXWm1aWElnYzNCaFkyVWdZWFpoYVd4aFlteGxBRk52WTJ0bGRDQnBjeUJqYjI1dVpXTjBaV1FBVTI5amEyVjBJRzV2ZENCamIyNXVaV04wWldRQVEyRnVibTkwSUhObGJtUWdZV1owWlhJZ2MyOWphMlYwSUhOb2RYUmtiM2R1QUU5d1pYSmhkR2x2YmlCaGJISmxZV1I1SUdsdUlIQnliMmR5WlhOekFFOXdaWEpoZEdsdmJpQnBiaUJ3Y205bmNtVnpjd0JUZEdGc1pTQm1hV3hsSUdoaGJtUnNaUUJTWlcxdmRHVWdTUzlQSUdWeWNtOXlBRkYxYjNSaElHVjRZMlZsWkdWa0FFNXZJRzFsWkdsMWJTQm1iM1Z1WkFCWGNtOXVaeUJ0WldScGRXMGdkSGx3WlFCT2J5Qmxjbkp2Y2lCcGJtWnZjbTFoZEdsdmJnQUFBQUNBUHdBQXdEOEFBQUFBM00vUk5RQUFBQUFBd0JVL0FFR0E1Z0lMMXhVREFBQUFCQUFBQUFRQUFBQUdBQUFBZy9taUFFUk9iZ0Q4S1JVQTBWY25BTjAwOVFCaTI4QUFQSm1WQUVHUVF3QmpVZjRBdTk2ckFMZGh4UUE2YmlRQTBrMUNBRWtHNEFBSjZpNEFISkxSQU9zZC9nQXBzUndBNkQ2bkFQVTFnZ0JFdXk0QW5PbUVBTFFtY0FCQmZsOEExcEU1QUZPRE9RQ2M5RGtBaTErRUFDajV2UUQ0SHpzQTN2K1hBQStZQlFBUkwrOEFDbHFMQUcwZmJRRFBmallBQ2NzbkFFWlB0d0NlWmo4QUxlcGZBTG9uZFFEbDY4Y0FQWHZ4QVBjNUJ3Q1NVb29BKzJ2cUFCK3hYd0FJWFkwQU1BTldBSHY4UmdEd3Eyc0FJTHpQQURiMG1nRGpxUjBBWG1HUkFBZ2I1Z0NGbVdVQW9CUmZBSTFBYUFDQTJQOEFKM05OQUFZR01RREtWaFVBeWFoekFIdmlZQUJyak1BQUdjUkhBTTFud3dBSjZOd0FXWU1xQUl0MnhBQ21ISllBUksvZEFCbFgwUUNsUGdVQUJRZi9BRE4rUHdEQ011Z0FtRS9lQUx0OU1nQW1QY01BSG12dkFKLzRYZ0ExSHpvQWYvTEtBUEdISFFCOGtDRUFhaVI4QU5WdStnQXdMWGNBRlR0REFMVVV4Z0RER1owQXJjVENBQ3hOUVFBTUFGMEFobjFHQU9OeExRQ2J4cG9BTTJJQUFMVFNmQUMwcDVjQU4xWFZBTmMrOWdDakVCZ0FUWGI4QUdTZEtnQncxNnNBWTN6NEFIcXdWd0FYRmVjQXdFbFdBRHZXMlFDbmhEZ0FKQ1BMQU5hS2R3QmFWQ01BQUIrNUFQRUtHd0FaenQ4QW56SC9BR1llYWdDWlYyRUFyUHRIQUg1LzJBQWlaYmNBTXVpSkFPYS9ZQUR2eE0wQWJEWUpBRjAvMUFBVzN0Y0FXRHZlQU42YmtnRFNJaWdBS0lib0FPSllUUURHeWpJQUNPTVdBT0I5eXdBWHdGQUE4eDJuQUJqZ1d3QXVFelFBZ3hKaUFJTklBUUQxamxzQXJiQi9BQjdwOGdCSVNrTUFFR2ZUQUtyZDJBQ3VYMElBYW1IT0FBb29wQURUbWJRQUJxYnlBRngzZndDandvTUFZVHlJQUlwemVBQ3ZqRm9BYjllOUFDMm1Zd0QwdjhzQWpZSHZBQ2JCWndCVnlrVUF5dGsyQUNpbzBnRENZWTBBRXNsM0FBUW1GQUFTUnBzQXhGbkVBTWpGUkFCTnNwRUFBQmZ6QU5SRHJRQXBTZVVBL2RVUUFBQysvQUFlbE13QWNNN3VBQk0rOVFEczhZQUFzK2ZEQU1mNEtBQ1RCWlFBd1hFK0FDNEpzd0FMUmZNQWlCS2NBS3NnZXdBdXRaOEFSNUxDQUhzeUx3QU1WVzBBY3FlUUFHdm5Id0F4eTVZQWVSWktBRUY1NGdEMDM0a0E2SlNYQU9MbWhBQ1pNWmNBaU8xckFGOWZOZ0M3L1E0QVNKcTBBR2VrYkFCeGNrSUFqVjB5QUo4VnVBQzg1UWtBalRFbEFQZDBPUUF3QlJ3QURRd0JBRXNJYUFBczdsZ0FSNnFRQUhUbkFnQzkxaVFBOTMybUFHNUljZ0NmRnU4QWpwU21BTFNSOWdEUlUxRUF6d3J5QUNDWU13RDFTMzRBc21Ob0FOMCtYd0JBWFFNQWhZbC9BRlZTS1FBM1pNQUFiZGdRQURKSU1nQmJUSFVBVG5IVUFFVlViZ0FMQ2NFQUt2VnBBQlJtMVFBbkI1MEFYUVJRQUxRNzJ3RHFkc1VBaC9rWEFFbHJmUUFkSjdvQWxta3BBTWJNckFDdEZGUUFrT0pxQUlqWmlRQXNjbEFBQktTK0FIY0hsQUR6TUhBQUFQd25BT3B4cUFCbXdra0FaT0E5QUpmZGd3Q2pQNWNBUTVUOUFBMkdqQUF4UWQ0QWtqbWRBTjF3akFBWHQrY0FDTjg3QUJVM0t3QmNnS0FBV29DVEFCQVJrZ0FQNk5nQWJJQ3ZBTnYvU3dBNGtBOEFXUmgyQUdLbEZRQmh5N3NBeDRtNUFCQkF2UURTOGdRQVNYVW5BT3UyOWdEYklyc0FDaFNxQUlrbUx3QmtnM1lBQ1RzekFBNlVHZ0JST3FvQUhhUENBSy90cmdCY0poSUFiY0pOQUMxNm5BREFWcGNBQXorREFBbnc5Z0FyUUl3QWJUR1pBRG0wQndBTUlCVUEyTU5iQVBXU3hBREdyVXNBVHNxbEFLYzN6UURtcVRZQXE1S1VBTjFDYUFBWlk5NEFkb3p2QUdpTFVnRDgyemNBcnFHckFOOFZNUUFBcnFFQURQdmFBR1JOWmdEdEJiY0FLV1V3QUZkV3Z3Qkgvem9BYXZtNUFIVys4d0Fvazk4QXE0QXdBR2FNOWdBRXl4VUEraUlHQU5ua0hRQTlzNlFBVnh1UEFEYk5DUUJPUXVrQUU3NmtBRE1qdFFEd3Fob0FUMldvQU5MQnBRQUxQdzhBVzNqTkFDUDVkZ0I3aXdRQWlSZHlBTWFtVXdCdmJ1SUE3K3NBQUp0S1dBREUycmNBcW1hNkFIYlB6d0RSQWgwQXNmRXRBSXlad1FERHJYY0Foa2phQVBkZG9BREdnUFFBclBBdkFOM3NtZ0EvWEx3QTBONXRBSkRISHdBcTI3WUFveVU2QUFDdm1nQ3RVNU1BdGxjRUFDa3R0QUJMZ0g0QTJnZW5BSGFxRGdCN1dhRUFGaElxQU55M0xRRDY1ZjBBaWR2K0FJbSsvUURrZG13QUJxbjhBRDZBY0FDRmJoVUEvWWYvQUNnK0J3Qmhaek1BS2hpR0FFMjk2Z0N6NTY4QWoyMXVBSlZuT1FBeHYxc0FoTmRJQUREZkZnREhMVU1BSldFMUFNbHd6Z0F3eTdnQXYyejlBS1FBb2dBRmJPUUFXdDJnQUNGdlJ3QmlFdElBdVZ5RUFIQmhTUUJyVnVBQW1WSUJBRkJWTndBZTFiY0FNL0hFQUJOdVh3QmRNT1FBaFM2cEFCMnl3d0NoTWpZQUNMZWtBT3F4MUFBVzl5RUFqMm5rQUNmL2R3QU1BNEFBalVBdEFFL05vQUFncFprQXM2TFRBQzlkQ2dDMCtVSUFFZHJMQUgyKzBBQ2IyOEVBcXhlOUFNcWlnUUFJYWx3QUxsVVhBQ2NBVlFCL0ZQQUE0UWVHQUJRTFpBQ1dRWTBBaDc3ZUFOcjlLZ0JySmJZQWU0azBBQVh6L2dDNXY1NEFhR3BQQUVvcXFBQlB4Rm9BTGZpOEFOZGFtQUQweDVVQURVMk5BQ0E2cGdDa1YxOEFGRCt4QUlBNGxRRE1JQUVBY2QyR0FNbmV0Z0MvWVBVQVRXVVJBQUVIYXdDTXNLd0Fzc0RRQUZGVlNBQWUrdzRBbFhMREFLTUdPd0RBUURVQUJ0eDdBT0JGekFCT0tmb0Exc3JJQU9qelFRQjhaTjRBbTJUWUFObStNUUNrbDhNQWQxalVBR25qeFFEdzJoTUF1am84QUVZWVJnQlZkVjhBMHIzMUFHNlN4Z0NzTGwwQURrVHRBQncrUWdCaHhJY0FLZjNwQU9mVzh3QWlmTW9BYjVFMUFBamd4UUQvMTQwQWJtcmlBTEQ5eGdDVENNRUFmRjEwQUd1dHNnRE5icDBBUG5KN0FNWVJhZ0QzejZrQUtYUGZBTFhKdWdDM0FGRUE0cklOQUhTNkpBRGxmV0FBZE5pS0FBMFZMQUNCR0F3QWZtYVVBQUVwRmdDZmVuWUEvZjIrQUZaRjd3RFpmallBN05rVEFJdTZ1UURFbC93QU1hZ25BUEZ1d3dDVXhUWUEyS2hXQUxTb3RRRFB6QTRBRW9rdEFHOVhOQUFzVm9rQW1jN2pBTllndVFCclhxb0FQaXFjQUJGZnpBRDlDMG9BNGZUN0FJNDdiUURpaGl3QTZkU0VBUHkwcVFEdjd0RUFMalhKQUM4NVlRQTRJVVFBRzluSUFJSDhDZ0Q3U21vQUx4ellBRk8waEFCT21Zd0FWQ0xNQUNwVjNBREF4dFlBQ3htV0FCcHd1QUJwbFdRQUpscGdBRDlTN2dCL0VROEE5TFVSQVB6TDlRQTB2QzBBTkx6dUFPaGR6QURkWG1BQVo0NmJBSkl6N3dESkY3Z0FZVmliQU9GWHZBQlJnOFlBMkQ0UUFOMXhTQUF0SE4wQXJ4aWhBQ0VzUmdCWjg5Y0EyWHFZQUo1VXdBQlBodm9BVmdiOEFPVjVyZ0NKSWpZQU9LMGlBR2VUM0FCVjZLb0FnaVk0QU1ybm13QlJEYVFBbVRPeEFLblhEZ0JwQlVnQVpiTHdBSCtJcHdDSVRKY0ErZEUyQUNHU3N3Qjdna29BbU04aEFFQ2YzQURjUjFVQTRYUTZBR2ZyUWdEK25kOEFYdFJmQUh0bnBBQzZySG9BVmZhaUFDdUlJd0JCdWxVQVdXNElBQ0VxaGdBNVI0TUFpZVBtQU9XZTFBQkorMEFBLzFicEFCd1B5Z0RGV1lvQWxQb3JBTlBCeFFBUHhjOEEyMXF1QUVmRmhnQ0ZRMklBSVlZN0FDeDVsQUFRWVljQUtreDdBSUFzR2dCRHZ4SUFpQ2FRQUhnOGlRQ294T1FBNWR0N0FNUTZ3Z0FtOU9vQTkyZUtBQTJTdndCbG95c0FQWk94QUwxOEN3Q2tVZHdBSjkxakFHbmgzUUNhbEJrQXFDbVZBR2pPS0FBSjdiUUFSSjhnQUU2WXlnQndnbU1BZm53akFBKzVNZ0NuOVk0QUZGYm5BQ0h4Q0FDMW5Tb0FiMzVOQUtVWlVRQzErYXNBZ3QvV0FKYmRZUUFXTmdJQXhEcWZBSU9pb1FCeTdXMEFPWTE2QUlLNHFRQnJNbHdBUmlkYkFBQTA3UURTQUhjQS9QUlZBQUZaVFFEZ2NZQUFRZVA3QWd0ZFFQc2grVDhBQUFBQUxVUjBQZ0FBQUlDWVJ2ZzhBQUFBWUZITWVEc0FBQUNBZ3h2d09RQUFBRUFnSlhvNEFBQUFnQ0tDNHpZQUFBQUFIZk5wTlFBQUFBQUFBUEEvQUFBQUFBQUErRDhBQUFBQUFBQUFBQWJRejBQci9VdytBRUhML0FJTFRFQUR1T0kvT0dQdFB0b1BTVDllbUhzLzJnL0pQMmszckRGb0lTSXp0QThVTTJnaG9qUGJEMGsvMnc5SnYrVExGa0RreXhiQUFBQUFBQUFBQUlEYkQwbEEydzlKd0hKM1lRQnlkMkVBUWJ6OUFnc0I5Z0JCNC8wQ0N3WC8vLy8vL3dCQnFQNENDMWt0S3lBZ0lEQllNSGdBS0c1MWJHd3BBQUFBQUFBQUFBQVJBQW9BRVJFUkFBQUFBQVVBQUFBQUFBQUpBQUFBQUFzQUFBQUFBQUFBQUJFQUR3b1JFUkVEQ2djQUFRQUpDd3NBQUFrR0N3QUFDd0FHRVFBQUFCRVJFUUJCa2Y4Q0N5RUxBQUFBQUFBQUFBQVJBQW9LRVJFUkFBb0FBQUlBQ1FzQUFBQUpBQXNBQUFzQVFjdi9BZ3NCREFCQjEvOENDeFVNQUFBQUFBd0FBQUFBQ1F3QUFBQUFBQXdBQUF3QVFZV0FBd3NCRGdCQmtZQURDeFVOQUFBQUJBMEFBQUFBQ1E0QUFBQUFBQTRBQUE0QVFiK0FBd3NCRUFCQnk0QURDeDRQQUFBQUFBOEFBQUFBQ1JBQUFBQUFBQkFBQUJBQUFCSUFBQUFTRWhJQVFZS0JBd3NPRWdBQUFCSVNFZ0FBQUFBQUFBa0FRYk9CQXdzQkN3QkJ2NEVEQ3hVS0FBQUFBQW9BQUFBQUNRc0FBQUFBQUFzQUFBc0FRZTJCQXdzQkRBQkIrWUVEQzVrRkRBQUFBQUFNQUFBQUFBa01BQUFBQUFBTUFBQU1BQUF3TVRJek5EVTJOemc1UVVKRFJFVkdMVEJZS3pCWUlEQllMVEI0S3pCNElEQjRBR2x1WmdCSlRrWUFibUZ1QUU1QlRnQXVBQUFBQUxqM0FBQlErQUFBYVc1bWFXNXBkSGtBYm1GdUFBQUFBTkYwbmdCWG5iMHFnSEJTRC8vL1BpY0tBQUFBWkFBQUFPZ0RBQUFRSndBQW9JWUJBRUJDRHdDQWxwZ0FBT0gxQlJnQUFBQTFBQUFBY1FBQUFHdi8vLy9PKy8vL2tyLy8vd0FBQUFBQUFBQUEvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3dBQkFnTUVCUVlIQ0FuLy8vLy8vLy8vQ2dzTURRNFBFQkVTRXhRVkZoY1lHUm9iSEIwZUh5QWhJaVAvLy8vLy8vOEtDd3dORGc4UUVSSVRGQlVXRnhnWkdoc2NIUjRmSUNFaUkvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy84QUFRSUVCd01HQlFBQUFBQUFBQUFDQUFEQUF3QUF3QVFBQU1BRkFBREFCZ0FBd0FjQUFNQUlBQURBQ1FBQXdBb0FBTUFMQUFEQURBQUF3QTBBQU1BT0FBREFEd0FBd0JBQUFNQVJBQURBRWdBQXdCTUFBTUFVQUFEQUZRQUF3QllBQU1BWEFBREFHQUFBd0JrQUFNQWFBQURBR3dBQXdCd0FBTUFkQUFEQUhnQUF3QjhBQU1BQUFBQ3pBUUFBd3dJQUFNTURBQUREQkFBQXd3VUFBTU1HQUFEREJ3QUF3d2dBQU1NSkFBRERDZ0FBd3dzQUFNTU1BQURERFFBQTB3NEFBTU1QQUFEREFBQU11d0VBRE1NQ0FBekRBd0FNd3dRQUROTjJaV04wYjNJQVFhU0hBd3VmRGdJQUFBQURBQUFBQlFBQUFBY0FBQUFMQUFBQURRQUFBQkVBQUFBVEFBQUFGd0FBQUIwQUFBQWZBQUFBSlFBQUFDa0FBQUFyQUFBQUx3QUFBRFVBQUFBN0FBQUFQUUFBQUVNQUFBQkhBQUFBU1FBQUFFOEFBQUJUQUFBQVdRQUFBR0VBQUFCbEFBQUFad0FBQUdzQUFBQnRBQUFBY1FBQUFIOEFBQUNEQUFBQWlRQUFBSXNBQUFDVkFBQUFsd0FBQUowQUFBQ2pBQUFBcHdBQUFLMEFBQUN6QUFBQXRRQUFBTDhBQUFEQkFBQUF4UUFBQU1jQUFBRFRBQUFBQVFBQUFBc0FBQUFOQUFBQUVRQUFBQk1BQUFBWEFBQUFIUUFBQUI4QUFBQWxBQUFBS1FBQUFDc0FBQUF2QUFBQU5RQUFBRHNBQUFBOUFBQUFRd0FBQUVjQUFBQkpBQUFBVHdBQUFGTUFBQUJaQUFBQVlRQUFBR1VBQUFCbkFBQUFhd0FBQUcwQUFBQnhBQUFBZVFBQUFIOEFBQUNEQUFBQWlRQUFBSXNBQUFDUEFBQUFsUUFBQUpjQUFBQ2RBQUFBb3dBQUFLY0FBQUNwQUFBQXJRQUFBTE1BQUFDMUFBQUF1d0FBQUw4QUFBREJBQUFBeFFBQUFNY0FBQURSQUFBQVgxOXVaWGgwWDNCeWFXMWxJRzkyWlhKbWJHOTNBQUFBeVBrQUFBQUFBQUNVeFFBQS9RQUFBUDRBQUFEL0FBQUFBQUVBQUFFQkFBQUNBUUFBQXdFQUFBUUJBQUFGQVFBQUJnRUFBQWNCQUFBSUFRQUFDUUVBQUFvQkFBQk9VM1F6WDE4eU1UQmZYM04wWkdsdVluVm1TV05GUlFEWTlnQUFmTVVBQUR6SkFBQjFibk4xY0hCdmNuUmxaQ0JzYjJOaGJHVWdabTl5SUhOMFlXNWtZWEprSUdsdWNIVjBBQUFBQUFBQUFDREdBQUFMQVFBQURBRUFBQTBCQUFBT0FRQUFEd0VBQUJBQkFBQVJBUUFBRWdFQUFCTUJBQUFVQVFBQUZRRUFBQllCQUFBWEFRQUFHQUVBQUU1VGRETmZYekl4TUY5ZmMzUmthVzVpZFdaSmQwVkZBTmoyQUFBSXhnQUFlTWtBQUFBQUFBQ0l4Z0FBL1FBQUFCa0JBQUFhQVFBQUFBRUFBQUVCQUFBQ0FRQUFHd0VBQUFRQkFBQUZBUUFBSEFFQUFCMEJBQUFlQVFBQUh3RUFBQ0FCQUFCT1UzUXpYMTh5TVRGZlgzTjBaRzkxZEdKMVprbGpSVVVBQUFBQTJQWUFBR3pHQUFBOHlRQUFBQUFBQVBER0FBQUxBUUFBSVFFQUFDSUJBQUFPQVFBQUR3RUFBQkFCQUFBakFRQUFFZ0VBQUJNQkFBQWtBUUFBSlFFQUFDWUJBQUFuQVFBQUtBRUFBRTVUZEROZlh6SXhNVjlmYzNSa2IzVjBZblZtU1hkRlJRQUFBQURZOWdBQTFNWUFBSGpKQUFBQUFBQUFQTWtBQVAwQUFBQXBBUUFBS2dFQUFBQUJBQUFCQVFBQUFnRUFBQU1CQUFBRUFRQUFCUUVBQUJ3QkFBQWRBUUFBSGdFQUFBa0JBQUFLQVFBQUFBQUFBSGpKQUFBTEFRQUFLd0VBQUN3QkFBQU9BUUFBRHdFQUFCQUJBQUFSQVFBQUVnRUFBQk1CQUFBa0FRQUFKUUVBQUNZQkFBQVhBUUFBR0FFQUFBZ0FBQUFBQUFBQXNNa0FBQzBCQUFBdUFRQUErUC8vLy9qLy8vK3d5UUFBTHdFQUFEQUJBQUNJeHdBQW5NY0FBQWdBQUFBQUFBQUErTWtBQURFQkFBQXlBUUFBK1AvLy8vai8vLy80eVFBQU13RUFBRFFCQUFDNHh3QUF6TWNBQUFRQUFBQUFBQUFBUU1vQUFEVUJBQUEyQVFBQS9QLy8vL3ovLy85QXlnQUFOd0VBQURnQkFBRG94d0FBL01jQUFBUUFBQUFBQUFBQWlNb0FBRGtCQUFBNkFRQUEvUC8vLy96Ly8vK0l5Z0FBT3dFQUFEd0JBQUFZeUFBQUxNZ0FBQUFBQUFCd3lBQUFQUUVBQUQ0QkFBQnBiM05mWW1GelpUbzZZMnhsWVhJQVRsTjBNMTlmTWpocGIzTmZZbUZ6WlVVQUFBQ3c5Z0FBWE1nQUFBQUFBQUMweUFBQVB3RUFBRUFCQUFCT1UzUXpYMTh5T1dKaGMybGpYMmx2YzBsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSUUFBQU5qMkFBQ0l5QUFBY01nQUFBQUFBQUQ4eUFBQVFRRUFBRUlCQUFCT1UzUXpYMTh5T1dKaGMybGpYMmx2YzBsM1RsTmZNVEZqYUdGeVgzUnlZV2wwYzBsM1JVVkZSUUFBQU5qMkFBRFF5QUFBY01nQUFFNVRkRE5mWHpJeE5XSmhjMmxqWDNOMGNtVmhiV0oxWmtsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSUUFBQUFDdzlnQUFDTWtBQUU1VGRETmZYekl4TldKaGMybGpYM04wY21WaGJXSjFaa2wzVGxOZk1URmphR0Z5WDNSeVlXbDBjMGwzUlVWRlJRQUFBQUN3OWdBQVJNa0FBRTVUZEROZlh6SXhNMkpoYzJsalgybHpkSEpsWVcxSlkwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlkwVkZSVVVBQURUM0FBQ0F5UUFBQUFBQUFBRUFBQUMweUFBQUEvVC8vMDVUZEROZlh6SXhNMkpoYzJsalgybHpkSEpsWVcxSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZSVVVBQURUM0FBREl5UUFBQUFBQUFBRUFBQUQ4eUFBQUEvVC8vMDVUZEROZlh6SXhNMkpoYzJsalgyOXpkSEpsWVcxSlkwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlkwVkZSVVVBQURUM0FBQVF5Z0FBQUFBQUFBRUFBQUMweUFBQUEvVC8vMDVUZEROZlh6SXhNMkpoYzJsalgyOXpkSEpsWVcxSmQwNVRYekV4WTJoaGNsOTBjbUZwZEhOSmQwVkZSVVVBQURUM0FBQll5Z0FBQUFBQUFBRUFBQUQ4eUFBQUEvVC8vOTRTQkpVQUFBQUEvLy8vLy8vLy8vLy8vLy8vb01vQUFCUUFBQUJETGxWVVJpMDRBRUhvbFFNTEFyVEtBRUdBbGdNTEJreERYMEZNVEFCQmtKWURDMTVNUTE5RFZGbFFSUUFBQUFCTVExOU9WVTFGVWtsREFBQk1RMTlVU1UxRkFBQUFBQUJNUTE5RFQweE1RVlJGQUFCTVExOU5UMDVGVkVGU1dRQk1RMTlOUlZOVFFVZEZVd0JNUVU1SEFFTXVWVlJHTFRnQVVFOVRTVmdBQUhETUFFSHdtQU1ML3dFQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQWdBRElBSWdBaUFDSUFJZ0FnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFXQUV3QVRBQk1BRXdBVEFCTUFFd0FUQUJNQUV3QVRBQk1BRXdBVEFCTUFJMkFqWUNOZ0kyQWpZQ05nSTJBallDTmdJMkFUQUJNQUV3QVRBQk1BRXdBVEFDTlVJMVFqVkNOVUkxUWpWQ01VSXhRakZDTVVJeFFqRkNNVUl4UWpGQ01VSXhRakZDTVVJeFFqRkNNVUl4UWpGQ01VSXhRVEFCTUFFd0FUQUJNQUV3QWpXQ05ZSTFnaldDTllJMWdqR0NNWUl4Z2pHQ01ZSXhnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZSXhnakdDTVlJeGdqR0NNWUV3QVRBQk1BRXdBSUFRZkNjQXdzQ2dOQUFRWVNoQXd2NUF3RUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFFQUFBQUJCQUFBQVFnQUFBRU1BQUFCRUFBQUFSUUFBQUVZQUFBQkhBQUFBU0FBQUFFa0FBQUJLQUFBQVN3QUFBRXdBQUFCTkFBQUFUZ0FBQUU4QUFBQlFBQUFBVVFBQUFGSUFBQUJUQUFBQVZBQUFBRlVBQUFCV0FBQUFWd0FBQUZnQUFBQlpBQUFBV2dBQUFGc0FBQUJjQUFBQVhRQUFBRjRBQUFCZkFBQUFZQUFBQUVFQUFBQkNBQUFBUXdBQUFFUUFBQUJGQUFBQVJnQUFBRWNBQUFCSUFBQUFTUUFBQUVvQUFBQkxBQUFBVEFBQUFFMEFBQUJPQUFBQVR3QUFBRkFBQUFCUkFBQUFVZ0FBQUZNQUFBQlVBQUFBVlFBQUFGWUFBQUJYQUFBQVdBQUFBRmtBQUFCYUFBQUFld0FBQUh3QUFBQjlBQUFBZmdBQUFIOEFRWUNwQXdzQ2tOWUFRWlN0QXd2NUF3RUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFFQUFBQUJoQUFBQVlnQUFBR01BQUFCa0FBQUFaUUFBQUdZQUFBQm5BQUFBYUFBQUFHa0FBQUJxQUFBQWF3QUFBR3dBQUFCdEFBQUFiZ0FBQUc4QUFBQndBQUFBY1FBQUFISUFBQUJ6QUFBQWRBQUFBSFVBQUFCMkFBQUFkd0FBQUhnQUFBQjVBQUFBZWdBQUFGc0FBQUJjQUFBQVhRQUFBRjRBQUFCZkFBQUFZQUFBQUdFQUFBQmlBQUFBWXdBQUFHUUFBQUJsQUFBQVpnQUFBR2NBQUFCb0FBQUFhUUFBQUdvQUFBQnJBQUFBYkFBQUFHMEFBQUJ1QUFBQWJ3QUFBSEFBQUFCeEFBQUFjZ0FBQUhNQUFBQjBBQUFBZFFBQUFIWUFBQUIzQUFBQWVBQUFBSGtBQUFCNkFBQUFld0FBQUh3QUFBQjlBQUFBZmdBQUFIOEFRWkMxQXd2UkFUQXhNak0wTlRZM09EbGhZbU5rWldaQlFrTkVSVVo0V0NzdGNGQnBTVzVPQUNWd0FHd0FiR3dBQUV3QUpRQUFBQUFBSlhBQUFBQUFKVWs2SlUwNkpWTWdKWEFsU0RvbFRRQUFBQUFBQUFBQUpRQUFBRzBBQUFBdkFBQUFKUUFBQUdRQUFBQXZBQUFBSlFBQUFIa0FBQUFsQUFBQVdRQUFBQzBBQUFBbEFBQUFiUUFBQUMwQUFBQWxBQUFBWkFBQUFDVUFBQUJKQUFBQU9nQUFBQ1VBQUFCTkFBQUFPZ0FBQUNVQUFBQlRBQUFBSUFBQUFDVUFBQUJ3QUFBQUFBQUFBQ1VBQUFCSUFBQUFPZ0FBQUNVQUFBQk5BRUh3dGdNTHZRUWxBQUFBU0FBQUFEb0FBQUFsQUFBQVRRQUFBRG9BQUFBbEFBQUFVd0FBQUNWTVpnQXdNVEl6TkRVMk56ZzVBQ1V1TUV4bUFFTUFBQUFBQUFBWTRRQUFWUUVBQUZZQkFBQlhBUUFBQUFBQUFIamhBQUJZQVFBQVdRRUFBRmNCQUFCYUFRQUFXd0VBQUZ3QkFBQmRBUUFBWGdFQUFGOEJBQUJnQVFBQVlRRUFBQUFBQUFEZzRBQUFZZ0VBQUdNQkFBQlhBUUFBWkFFQUFHVUJBQUJtQVFBQVp3RUFBR2dCQUFCcEFRQUFhZ0VBQUFBQUFBQ3c0UUFBYXdFQUFHd0JBQUJYQVFBQWJRRUFBRzRCQUFCdkFRQUFjQUVBQUhFQkFBQUFBQUFBMU9FQUFISUJBQUJ6QVFBQVZ3RUFBSFFCQUFCMUFRQUFkZ0VBQUhjQkFBQjRBUUFBZEhKMVpRQUFBQUIwQUFBQWNnQUFBSFVBQUFCbEFBQUFBQUFBQUdaaGJITmxBQUFBWmdBQUFHRUFBQUJzQUFBQWN3QUFBR1VBQUFBQUFBQUFKVzB2SldRdkpYa0FBQUFBSlFBQUFHMEFBQUF2QUFBQUpRQUFBR1FBQUFBdkFBQUFKUUFBQUhrQUFBQUFBQUFBSlVnNkpVMDZKVk1BQUFBQUpRQUFBRWdBQUFBNkFBQUFKUUFBQUUwQUFBQTZBQUFBSlFBQUFGTUFBQUFBQUFBQUpXRWdKV0lnSldRZ0pVZzZKVTA2SlZNZ0pWa0FBQUFBSlFBQUFHRUFBQUFnQUFBQUpRQUFBR0lBQUFBZ0FBQUFKUUFBQUdRQUFBQWdBQUFBSlFBQUFFZ0FBQUE2QUFBQUpRQUFBRTBBQUFBNkFBQUFKUUFBQUZNQUFBQWdBQUFBSlFBQUFGa0FBQUFBQUFBQUpVazZKVTA2SlZNZ0pYQUFKUUFBQUVrQUFBQTZBQUFBSlFBQUFFMEFBQUE2QUFBQUpRQUFBRk1BQUFBZ0FBQUFKUUFBQUhBQVFiaTdBd3ZXQ3VEZEFBQjVBUUFBZWdFQUFGY0JBQUJPVTNRelgxOHlObXh2WTJGc1pUVm1ZV05sZEVVQUFBRFk5Z0FBeU4wQUFBenpBQUFBQUFBQVlONEFBSGtCQUFCN0FRQUFWd0VBQUh3QkFBQjlBUUFBZmdFQUFIOEJBQUNBQVFBQWdRRUFBSUlCQUFDREFRQUFoQUVBQUlVQkFBQ0dBUUFBaHdFQUFFNVRkRE5mWHpJMVkzUjVjR1ZKZDBWRkFFNVRkRE5mWHpJeE1HTjBlWEJsWDJKaGMyVkZBQUN3OWdBQVF0NEFBRFQzQUFBdzNnQUFBQUFBQUFJQUFBRGczUUFBQWdBQUFGamVBQUFDQUFBQUFBQUFBUFRlQUFCNUFRQUFpQUVBQUZjQkFBQ0pBUUFBaWdFQUFJc0JBQUNNQVFBQWpRRUFBSTRCQUFDUEFRQUFUbE4wTTE5Zk1qZGpiMlJsWTNaMFNXTmpNVEZmWDIxaWMzUmhkR1ZmZEVWRkFFNVRkRE5mWHpJeE1tTnZaR1ZqZG5SZlltRnpaVVVBQUFBQXNQWUFBTkxlQUFBMDl3QUFzTjRBQUFBQUFBQUNBQUFBNE4wQUFBSUFBQURzM2dBQUFnQUFBQUFBQUFCbzN3QUFlUUVBQUpBQkFBQlhBUUFBa1FFQUFKSUJBQUNUQVFBQWxBRUFBSlVCQUFDV0FRQUFsd0VBQUU1VGRETmZYekkzWTI5a1pXTjJkRWxFYzJNeE1WOWZiV0p6ZEdGMFpWOTBSVVVBQURUM0FBQkUzd0FBQUFBQUFBSUFBQURnM1FBQUFnQUFBT3plQUFBQ0FBQUFBQUFBQU56ZkFBQjVBUUFBbUFFQUFGY0JBQUNaQVFBQW1nRUFBSnNCQUFDY0FRQUFuUUVBQUo0QkFBQ2ZBUUFBVGxOME0xOWZNamRqYjJSbFkzWjBTVVJwWXpFeFgxOXRZbk4wWVhSbFgzUkZSUUFBTlBjQUFMamZBQUFBQUFBQUFnQUFBT0RkQUFBQ0FBQUE3TjRBQUFJQUFBQUFBQUFBVU9BQUFIa0JBQUNnQVFBQVZ3RUFBSmtCQUFDYUFRQUFtd0VBQUp3QkFBQ2RBUUFBbmdFQUFKOEJBQUJPVTNRelgxOHlNVFpmWDI1aGNuSnZkMTkwYjE5MWRHWTRTVXh0TXpKRlJVVUFBQURZOWdBQUxPQUFBTnpmQUFBQUFBQUFzT0FBQUhrQkFBQ2hBUUFBVndFQUFKa0JBQUNhQVFBQW13RUFBSndCQUFDZEFRQUFuZ0VBQUo4QkFBQk9VM1F6WDE4eU1UZGZYM2RwWkdWdVgyWnliMjFmZFhSbU9FbE1iVE15UlVWRkFBRFk5Z0FBak9BQUFOemZBQUJPVTNRelgxOHlOMk52WkdWamRuUkpkMk14TVY5ZmJXSnpkR0YwWlY5MFJVVUFBQUEwOXdBQXZPQUFBQUFBQUFBQ0FBQUE0TjBBQUFJQUFBRHMzZ0FBQWdBQUFFNVRkRE5mWHpJMmJHOWpZV3hsTlY5ZmFXMXdSUUFBQU5qMkFBQUE0UUFBNE4wQUFFNVRkRE5mWHpJM1kyOXNiR0YwWlVsalJVVUEyUFlBQUNUaEFBRGczUUFBVGxOME0xOWZNamRqYjJ4c1lYUmxTWGRGUlFEWTlnQUFST0VBQU9EZEFBQk9VM1F6WDE4eU5XTjBlWEJsU1dORlJRQUFBRFQzQUFCazRRQUFBQUFBQUFJQUFBRGczUUFBQWdBQUFGamVBQUFDQUFBQVRsTjBNMTlmTWpodWRXMXdkVzVqZEVsalJVVUFBQUFBMlBZQUFKamhBQURnM1FBQVRsTjBNMTlmTWpodWRXMXdkVzVqZEVsM1JVVUFBQUFBMlBZQUFMemhBQURnM1FBQUFBQUFBRGpoQUFDaUFRQUFvd0VBQUZjQkFBQ2tBUUFBcFFFQUFLWUJBQUFBQUFBQVdPRUFBS2NCQUFDb0FRQUFWd0VBQUtrQkFBQ3FBUUFBcXdFQUFBQUFBQUQwNGdBQWVRRUFBS3dCQUFCWEFRQUFyUUVBQUs0QkFBQ3ZBUUFBc0FFQUFMRUJBQUN5QVFBQXN3RUFBTFFCQUFDMUFRQUF0Z0VBQUxjQkFBQk9VM1F6WDE4eU4yNTFiVjluWlhSSlkwNVRYekU1YVhOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSVVZGQUU1VGRETmZYekk1WDE5dWRXMWZaMlYwU1dORlJRQk9VM1F6WDE4eU1UUmZYMjUxYlY5blpYUmZZbUZ6WlVVQUFMRDJBQUM2NGdBQU5QY0FBS1RpQUFBQUFBQUFBUUFBQU5UaUFBQUFBQUFBTlBjQUFHRGlBQUFBQUFBQUFnQUFBT0RkQUFBQ0FBQUEzT0lBUVpqR0F3dktBY2pqQUFCNUFRQUF1QUVBQUZjQkFBQzVBUUFBdWdFQUFMc0JBQUM4QVFBQXZRRUFBTDRCQUFDL0FRQUF3QUVBQU1FQkFBRENBUUFBd3dFQUFFNVRkRE5mWHpJM2JuVnRYMmRsZEVsM1RsTmZNVGxwYzNSeVpXRnRZblZtWDJsMFpYSmhkRzl5U1hkT1UxOHhNV05vWVhKZmRISmhhWFJ6U1hkRlJVVkZSVVVBVGxOME0xOWZNamxmWDI1MWJWOW5aWFJKZDBWRkFBQUFOUGNBQUpqakFBQUFBQUFBQVFBQUFOVGlBQUFBQUFBQU5QY0FBRlRqQUFBQUFBQUFBZ0FBQU9EZEFBQUNBQUFBc09NQVFlekhBd3ZlQWJEa0FBQjVBUUFBeEFFQUFGY0JBQURGQVFBQXhnRUFBTWNCQUFESUFRQUF5UUVBQU1vQkFBRExBUUFBekFFQUFFNVRkRE5mWHpJM2JuVnRYM0IxZEVsalRsTmZNVGx2YzNSeVpXRnRZblZtWDJsMFpYSmhkRzl5U1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVVkZSVVVBVGxOME0xOWZNamxmWDI1MWJWOXdkWFJKWTBWRkFFNVRkRE5mWHpJeE5GOWZiblZ0WDNCMWRGOWlZWE5sUlFBQXNQWUFBSGJrQUFBMDl3QUFZT1FBQUFBQUFBQUJBQUFBa09RQUFBQUFBQUEwOXdBQUhPUUFBQUFBQUFBQ0FBQUE0TjBBQUFJQUFBQ1k1QUJCMU1rREM3NEJlT1VBQUhrQkFBRE5BUUFBVndFQUFNNEJBQURQQVFBQTBBRUFBTkVCQUFEU0FRQUEwd0VBQU5RQkFBRFZBUUFBVGxOME0xOWZNamR1ZFcxZmNIVjBTWGRPVTE4eE9XOXpkSEpsWVcxaWRXWmZhWFJsY21GMGIzSkpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVWRlJRQk9VM1F6WDE4eU9WOWZiblZ0WDNCMWRFbDNSVVVBQUFBMDl3QUFTT1VBQUFBQUFBQUJBQUFBa09RQUFBQUFBQUEwOXdBQUJPVUFBQUFBQUFBQ0FBQUE0TjBBQUFJQUFBQmc1UUJCbk1zREM1b0xlT1lBQU5ZQkFBRFhBUUFBVndFQUFOZ0JBQURaQVFBQTJnRUFBTnNCQUFEY0FRQUEzUUVBQU40QkFBRDQvLy8vZU9ZQUFOOEJBQURnQVFBQTRRRUFBT0lCQUFEakFRQUE1QUVBQU9VQkFBQk9VM1F6WDE4eU9IUnBiV1ZmWjJWMFNXTk9VMTh4T1dsemRISmxZVzFpZFdaZmFYUmxjbUYwYjNKSlkwNVRYekV4WTJoaGNsOTBjbUZwZEhOSlkwVkZSVVZGUlFCT1UzUXpYMTh5T1hScGJXVmZZbUZ6WlVVQXNQWUFBREhtQUFCT1UzUXpYMTh5TWpCZlgzUnBiV1ZmWjJWMFgyTmZjM1J2Y21GblpVbGpSVVVBQUFDdzlnQUFUT1lBQURUM0FBRHM1UUFBQUFBQUFBTUFBQURnM1FBQUFnQUFBRVRtQUFBQ0FBQUFjT1lBQUFBSUFBQUFBQUFBWk9jQUFPWUJBQURuQVFBQVZ3RUFBT2dCQUFEcEFRQUE2Z0VBQU9zQkFBRHNBUUFBN1FFQUFPNEJBQUQ0Ly8vL1pPY0FBTzhCQUFEd0FRQUE4UUVBQVBJQkFBRHpBUUFBOUFFQUFQVUJBQUJPVTNRelgxOHlPSFJwYldWZloyVjBTWGRPVTE4eE9XbHpkSEpsWVcxaWRXWmZhWFJsY21GMGIzSkpkMDVUWHpFeFkyaGhjbDkwY21GcGRITkpkMFZGUlVWRlJRQk9VM1F6WDE4eU1qQmZYM1JwYldWZloyVjBYMk5mYzNSdmNtRm5aVWwzUlVVQUFMRDJBQUE1NXdBQU5QY0FBUFRtQUFBQUFBQUFBd0FBQU9EZEFBQUNBQUFBUk9ZQUFBSUFBQUJjNXdBQUFBZ0FBQUFBQUFBSTZBQUE5Z0VBQVBjQkFBQlhBUUFBK0FFQUFFNVRkRE5mWHpJNGRHbHRaVjl3ZFhSSlkwNVRYekU1YjNOMGNtVmhiV0oxWmw5cGRHVnlZWFJ2Y2tsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVkZSVVZGQUU1VGRETmZYekl4TUY5ZmRHbHRaVjl3ZFhSRkFBQUFzUFlBQU9ubkFBQTA5d0FBcE9jQUFBQUFBQUFDQUFBQTROMEFBQUlBQUFBQTZBQUFBQWdBQUFBQUFBQ0k2QUFBK1FFQUFQb0JBQUJYQVFBQSt3RUFBRTVUZEROZlh6STRkR2x0WlY5d2RYUkpkMDVUWHpFNWIzTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbDNUbE5mTVRGamFHRnlYM1J5WVdsMGMwbDNSVVZGUlVWRkFBQUFBRFQzQUFCQTZBQUFBQUFBQUFJQUFBRGczUUFBQWdBQUFBRG9BQUFBQ0FBQUFBQUFBQnpwQUFCNUFRQUEvQUVBQUZjQkFBRDlBUUFBL2dFQUFQOEJBQUFBQWdBQUFRSUFBQUlDQUFBREFnQUFCQUlBQUFVQ0FBQk9VM1F6WDE4eU1UQnRiMjVsZVhCMWJtTjBTV05NWWpCRlJVVUFUbE4wTTE5Zk1qRXdiVzl1WlhsZlltRnpaVVVBQUFBQXNQWUFBUHpvQUFBMDl3QUE0T2dBQUFBQUFBQUNBQUFBNE4wQUFBSUFBQUFVNlFBQUFnQUFBQUFBQUFDUTZRQUFlUUVBQUFZQ0FBQlhBUUFBQndJQUFBZ0NBQUFKQWdBQUNnSUFBQXNDQUFBTUFnQUFEUUlBQUE0Q0FBQVBBZ0FBVGxOME0xOWZNakV3Ylc5dVpYbHdkVzVqZEVsalRHSXhSVVZGQURUM0FBQjA2UUFBQUFBQUFBSUFBQURnM1FBQUFnQUFBQlRwQUFBQ0FBQUFBQUFBQUFUcUFBQjVBUUFBRUFJQUFGY0JBQUFSQWdBQUVnSUFBQk1DQUFBVUFnQUFGUUlBQUJZQ0FBQVhBZ0FBR0FJQUFCa0NBQUJPVTNRelgxOHlNVEJ0YjI1bGVYQjFibU4wU1hkTVlqQkZSVVVBTlBjQUFPanBBQUFBQUFBQUFnQUFBT0RkQUFBQ0FBQUFGT2tBQUFJQUFBQUFBQUFBZU9vQUFIa0JBQUFhQWdBQVZ3RUFBQnNDQUFBY0FnQUFIUUlBQUI0Q0FBQWZBZ0FBSUFJQUFDRUNBQUFpQWdBQUl3SUFBRTVUZEROZlh6SXhNRzF2Ym1WNWNIVnVZM1JKZDB4aU1VVkZSUUEwOXdBQVhPb0FBQUFBQUFBQ0FBQUE0TjBBQUFJQUFBQVU2UUFBQWdBQUFBQUFBQUFjNndBQWVRRUFBQ1FDQUFCWEFRQUFKUUlBQUNZQ0FBQk9VM1F6WDE4eU9XMXZibVY1WDJkbGRFbGpUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGUlVVQVRsTjBNMTlmTWpFeFgxOXRiMjVsZVY5blpYUkpZMFZGQUFDdzlnQUErdW9BQURUM0FBQzA2Z0FBQUFBQUFBSUFBQURnM1FBQUFnQUFBQlRyQUVIQTFnTUxtZ0hBNndBQWVRRUFBQ2NDQUFCWEFRQUFLQUlBQUNrQ0FBQk9VM1F6WDE4eU9XMXZibVY1WDJkbGRFbDNUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVVZGUlVVQVRsTjBNMTlmTWpFeFgxOXRiMjVsZVY5blpYUkpkMFZGQUFDdzlnQUFudXNBQURUM0FBQlk2d0FBQUFBQUFBSUFBQURnM1FBQUFnQUFBTGpyQUVIazF3TUxtZ0ZrN0FBQWVRRUFBQ29DQUFCWEFRQUFLd0lBQUN3Q0FBQk9VM1F6WDE4eU9XMXZibVY1WDNCMWRFbGpUbE5mTVRsdmMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGUlVVQVRsTjBNMTlmTWpFeFgxOXRiMjVsZVY5d2RYUkpZMFZGQUFDdzlnQUFRdXdBQURUM0FBRDg2d0FBQUFBQUFBSUFBQURnM1FBQUFnQUFBRnpzQUVHSTJRTUxtZ0VJN1FBQWVRRUFBQzBDQUFCWEFRQUFMZ0lBQUM4Q0FBQk9VM1F6WDE4eU9XMXZibVY1WDNCMWRFbDNUbE5mTVRsdmMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVVZGUlVVQVRsTjBNMTlmTWpFeFgxOXRiMjVsZVY5d2RYUkpkMFZGQUFDdzlnQUE1dXdBQURUM0FBQ2c3QUFBQUFBQUFBSUFBQURnM1FBQUFnQUFBQUR0QUVHczJnTUw5aFNBN1FBQWVRRUFBREFDQUFCWEFRQUFNUUlBQURJQ0FBQXpBZ0FBVGxOME0xOWZNamh0WlhOellXZGxjMGxqUlVVQVRsTjBNMTlmTWpFemJXVnpjMkZuWlhOZlltRnpaVVVBQUFBQXNQWUFBRjN0QUFBMDl3QUFTTzBBQUFBQUFBQUNBQUFBNE4wQUFBSUFBQUI0N1FBQUFnQUFBQUFBQUFEWTdRQUFlUUVBQURRQ0FBQlhBUUFBTlFJQUFEWUNBQUEzQWdBQVRsTjBNMTlmTWpodFpYTnpZV2RsYzBsM1JVVUFBQUFBTlBjQUFNRHRBQUFBQUFBQUFnQUFBT0RkQUFBQ0FBQUFlTzBBQUFJQUFBQlRkVzVrWVhrQVRXOXVaR0Y1QUZSMVpYTmtZWGtBVjJWa2JtVnpaR0Y1QUZSb2RYSnpaR0Y1QUVaeWFXUmhlUUJUWVhSMWNtUmhlUUJUZFc0QVRXOXVBRlIxWlFCWFpXUUFWR2gxQUVaeWFRQlRZWFFBQUFBQVV3QUFBSFVBQUFCdUFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFFMEFBQUJ2QUFBQWJnQUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQlVBQUFBZFFBQUFHVUFBQUJ6QUFBQVpBQUFBR0VBQUFCNUFBQUFBQUFBQUZjQUFBQmxBQUFBWkFBQUFHNEFBQUJsQUFBQWN3QUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQlVBQUFBYUFBQUFIVUFBQUJ5QUFBQWN3QUFBR1FBQUFCaEFBQUFlUUFBQUFBQUFBQkdBQUFBY2dBQUFHa0FBQUJrQUFBQVlRQUFBSGtBQUFBQUFBQUFVd0FBQUdFQUFBQjBBQUFBZFFBQUFISUFBQUJrQUFBQVlRQUFBSGtBQUFBQUFBQUFVd0FBQUhVQUFBQnVBQUFBQUFBQUFFMEFBQUJ2QUFBQWJnQUFBQUFBQUFCVUFBQUFkUUFBQUdVQUFBQUFBQUFBVndBQUFHVUFBQUJrQUFBQUFBQUFBRlFBQUFCb0FBQUFkUUFBQUFBQUFBQkdBQUFBY2dBQUFHa0FBQUFBQUFBQVV3QUFBR0VBQUFCMEFBQUFBQUFBQUVwaGJuVmhjbmtBUm1WaWNuVmhjbmtBVFdGeVkyZ0FRWEJ5YVd3QVRXRjVBRXAxYm1VQVNuVnNlUUJCZFdkMWMzUUFVMlZ3ZEdWdFltVnlBRTlqZEc5aVpYSUFUbTkyWlcxaVpYSUFSR1ZqWlcxaVpYSUFTbUZ1QUVabFlnQk5ZWElBUVhCeUFFcDFiZ0JLZFd3QVFYVm5BRk5sY0FCUFkzUUFUbTkyQUVSbFl3QUFBRW9BQUFCaEFBQUFiZ0FBQUhVQUFBQmhBQUFBY2dBQUFIa0FBQUFBQUFBQVJnQUFBR1VBQUFCaUFBQUFjZ0FBQUhVQUFBQmhBQUFBY2dBQUFIa0FBQUFBQUFBQVRRQUFBR0VBQUFCeUFBQUFZd0FBQUdnQUFBQUFBQUFBUVFBQUFIQUFBQUJ5QUFBQWFRQUFBR3dBQUFBQUFBQUFUUUFBQUdFQUFBQjVBQUFBQUFBQUFFb0FBQUIxQUFBQWJnQUFBR1VBQUFBQUFBQUFTZ0FBQUhVQUFBQnNBQUFBZVFBQUFBQUFBQUJCQUFBQWRRQUFBR2NBQUFCMUFBQUFjd0FBQUhRQUFBQUFBQUFBVXdBQUFHVUFBQUJ3QUFBQWRBQUFBR1VBQUFCdEFBQUFZZ0FBQUdVQUFBQnlBQUFBQUFBQUFFOEFBQUJqQUFBQWRBQUFBRzhBQUFCaUFBQUFaUUFBQUhJQUFBQUFBQUFBVGdBQUFHOEFBQUIyQUFBQVpRQUFBRzBBQUFCaUFBQUFaUUFBQUhJQUFBQUFBQUFBUkFBQUFHVUFBQUJqQUFBQVpRQUFBRzBBQUFCaUFBQUFaUUFBQUhJQUFBQUFBQUFBU2dBQUFHRUFBQUJ1QUFBQUFBQUFBRVlBQUFCbEFBQUFZZ0FBQUFBQUFBQk5BQUFBWVFBQUFISUFBQUFBQUFBQVFRQUFBSEFBQUFCeUFBQUFBQUFBQUVvQUFBQjFBQUFBYmdBQUFBQUFBQUJLQUFBQWRRQUFBR3dBQUFBQUFBQUFRUUFBQUhVQUFBQm5BQUFBQUFBQUFGTUFBQUJsQUFBQWNBQUFBQUFBQUFCUEFBQUFZd0FBQUhRQUFBQUFBQUFBVGdBQUFHOEFBQUIyQUFBQUFBQUFBRVFBQUFCbEFBQUFZd0FBQUFBQUFBQkJUUUJRVFFBQUFFRUFBQUJOQUFBQUFBQUFBRkFBQUFCTkFBQUFBQUFBQUdGc2JHOWpZWFJ2Y2p4VVBqbzZZV3hzYjJOaGRHVW9jMmw2WlY5MElHNHBJQ2R1SnlCbGVHTmxaV1J6SUcxaGVHbHRkVzBnYzNWd2NHOXlkR1ZrSUhOcGVtVUFBQUFBQUhEbUFBRGZBUUFBNEFFQUFPRUJBQURpQVFBQTR3RUFBT1FCQUFEbEFRQUFBQUFBQUZ6bkFBRHZBUUFBOEFFQUFQRUJBQUR5QVFBQTh3RUFBUFFCQUFEMUFRQUFBQUFBQUF6ekFBQVdBQUFBT0FJQUFEa0NBQUJPVTNRelgxOHlNVFJmWDNOb1lYSmxaRjlqYjNWdWRFVUFBQUFBc1BZQUFQRHlBQUFBQUFBQVVQTUFBQllBQUFBNkFnQUFPUUlBQURzQ0FBQTVBZ0FBVGxOME0xOWZNakU1WDE5emFHRnlaV1JmZDJWaGExOWpiM1Z1ZEVVQUFBQTA5d0FBTVBNQUFBQUFBQUFCQUFBQURQTUFBQUFBQUFCaVlYTnBZMTl6ZEhKcGJtY0FYMTlqZUdGZlozVmhjbVJmWVdOeGRXbHlaU0JrWlhSbFkzUmxaQ0J5WldOMWNuTnBkbVVnYVc1cGRHbGhiR2w2WVhScGIyNEFVSFZ5WlNCMmFYSjBkV0ZzSUdaMWJtTjBhVzl1SUdOaGJHeGxaQ0VBYzNSa09qcGxlR05sY0hScGIyNEFBQUFBQVB6ekFBQThBZ0FBUFFJQUFENENBQUJUZERsbGVHTmxjSFJwYjI0QUFBQUFzUFlBQU96ekFBQUFBQUFBS1BRQUFBd0FBQUEvQWdBQVFBSUFBRk4wTVRGc2IyZHBZMTlsY25KdmNnRFk5Z0FBR1BRQUFQenpBQUFBQUFBQVhQUUFBQXdBQUFCQkFnQUFRQUlBQUZOME1USnNaVzVuZEdoZlpYSnliM0lBQUFBQTJQWUFBRWowQUFBbzlBQUFVM1E1ZEhsd1pWOXBibVp2QUFBQUFMRDJBQUJvOUFBQVRqRXdYMTlqZUhoaFltbDJNVEUyWDE5emFHbHRYM1I1Y0dWZmFXNW1iMFVBQUFBQTJQWUFBSUQwQUFCNDlBQUFUakV3WDE5amVIaGhZbWwyTVRFM1gxOWpiR0Z6YzE5MGVYQmxYMmx1Wm05RkFBQUEyUFlBQUxEMEFBQ2s5QUFBVGpFd1gxOWplSGhoWW1sMk1URTNYMTl3WW1GelpWOTBlWEJsWDJsdVptOUZBQUFBMlBZQUFPRDBBQUNrOUFBQVRqRXdYMTlqZUhoaFltbDJNVEU1WDE5d2IybHVkR1Z5WDNSNWNHVmZhVzVtYjBVQTJQWUFBQkQxQUFBRTlRQUFUakV3WDE5amVIaGhZbWwyTVRJd1gxOW1kVzVqZEdsdmJsOTBlWEJsWDJsdVptOUZBQUFBQU5qMkFBQkE5UUFBcFBRQUFFNHhNRjlmWTNoNFlXSnBkakV5T1Y5ZmNHOXBiblJsY2w5MGIxOXRaVzFpWlhKZmRIbHdaVjlwYm1adlJRQUFBTmoyQUFCMDlRQUFCUFVBQUFBQUFBRDA5UUFBUWdJQUFFTUNBQUJFQWdBQVJRSUFBRVlDQUFCT01UQmZYMk40ZUdGaWFYWXhNak5mWDJaMWJtUmhiV1Z1ZEdGc1gzUjVjR1ZmYVc1bWIwVUEyUFlBQU16MUFBQ2s5QUFBZGdBQUFMajFBQUFBOWdBQVJHNEFBTGoxQUFBTTlnQUFZZ0FBQUxqMUFBQVk5Z0FBWXdBQUFMajFBQUFrOWdBQWFBQUFBTGoxQUFBdzlnQUFZUUFBQUxqMUFBQTg5Z0FBY3dBQUFMajFBQUJJOWdBQWRBQUFBTGoxQUFCVTlnQUFhUUFBQUxqMUFBQmc5Z0FBYWdBQUFMajFBQUJzOWdBQWJBQUFBTGoxQUFCNDlnQUFiUUFBQUxqMUFBQ0U5Z0FBWmdBQUFMajFBQUNROWdBQVpBQUFBTGoxQUFDYzlnQUFBQUFBQU5UMEFBQkNBZ0FBUndJQUFFUUNBQUJGQWdBQVNBSUFBRWtDQUFCS0FnQUFTd0lBQUFBQUFBQWc5d0FBUWdJQUFFd0NBQUJFQWdBQVJRSUFBRWdDQUFCTkFnQUFUZ0lBQUU4Q0FBQk9NVEJmWDJONGVHRmlhWFl4TWpCZlgzTnBYMk5zWVhOelgzUjVjR1ZmYVc1bWIwVUFBQUFBMlBZQUFQajJBQURVOUFBQUFBQUFBSHozQUFCQ0FnQUFVQUlBQUVRQ0FBQkZBZ0FBU0FJQUFGRUNBQUJTQWdBQVV3SUFBRTR4TUY5ZlkzaDRZV0pwZGpFeU1WOWZkbTFwWDJOc1lYTnpYM1I1Y0dWZmFXNW1iMFVBQUFEWTlnQUFWUGNBQU5UMEFBQUFBQUFBTlBVQUFFSUNBQUJVQWdBQVJBSUFBRVVDQUFCVkFnQkJxTzhEQ3hFQkFBQUEvLy8vLy8zLy8vLysvLy8vQlFCQnhPOERDd0g1QUVIYzd3TUxEdk1BQUFENkFBQUErQUVCQUFBRUFFSDA3d01MQVFFQVFZUHdBd3NGQ3YvLy8vOEFRY2p3QXdzSnVQY0FBQUFBQUFBRkFFSGM4QU1MQWZVQVFmVHdBd3NMOHdBQUFQSUFBQUFBQmdFQVFZenhBd3NCQWdCQm0vRURDd1gvLy8vLy93QkJqUE1EQ3dQUUFRRUFRY2p6QXdzQkNRQkIxUE1EQ3dIMUFFSG84d01MRXZRQUFBQUFBQUFBOGdBQUFHZ0dBUUFBQkFCQmxQUURDd1QvLy8vL0FFSFk5QU1MQTRBWVVRPT1cIjtpZighaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSl7d2FzbUJpbmFyeUZpbGU9bG9jYXRlRmlsZSh3YXNtQmluYXJ5RmlsZSl9ZnVuY3Rpb24gZ2V0QmluYXJ5KGZpbGUpe3RyeXtpZihmaWxlPT13YXNtQmluYXJ5RmlsZSYmd2FzbUJpbmFyeSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHdhc21CaW5hcnkpfXZhciBiaW5hcnk9dHJ5UGFyc2VBc0RhdGFVUkkoZmlsZSk7aWYoYmluYXJ5KXtyZXR1cm4gYmluYXJ5fWlmKHJlYWRCaW5hcnkpe3JldHVybiByZWFkQmluYXJ5KGZpbGUpfWVsc2V7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCJ9fWNhdGNoKGVycil7YWJvcnQoZXJyKX19ZnVuY3Rpb24gZ2V0QmluYXJ5UHJvbWlzZSgpe2lmKCF3YXNtQmluYXJ5JiYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpKXtpZih0eXBlb2YgZmV0Y2g9PT1cImZ1bmN0aW9uXCImJiFpc0ZpbGVVUkkod2FzbUJpbmFyeUZpbGUpKXtyZXR1cm4gZmV0Y2god2FzbUJpbmFyeUZpbGUse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe2lmKCFyZXNwb25zZVtcIm9rXCJdKXt0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrd2FzbUJpbmFyeUZpbGUrXCInXCJ9cmV0dXJuIHJlc3BvbnNlW1wiYXJyYXlCdWZmZXJcIl0oKX0pLmNhdGNoKGZ1bmN0aW9uKCl7cmV0dXJuIGdldEJpbmFyeSh3YXNtQmluYXJ5RmlsZSl9KX1lbHNle2lmKHJlYWRBc3luYyl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtyZWFkQXN5bmMod2FzbUJpbmFyeUZpbGUsZnVuY3Rpb24ocmVzcG9uc2Upe3Jlc29sdmUobmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UpKX0scmVqZWN0KX0pfX19cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKX0pfWZ1bmN0aW9uIGNyZWF0ZVdhc20oKXt2YXIgaW5mbz17XCJhXCI6YXNtTGlicmFyeUFyZ307ZnVuY3Rpb24gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlLG1vZHVsZSl7dmFyIGV4cG9ydHM9aW5zdGFuY2UuZXhwb3J0cztNb2R1bGVbXCJhc21cIl09ZXhwb3J0czt3YXNtTWVtb3J5PU1vZHVsZVtcImFzbVwiXVtcIllcIl07dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpO3dhc21UYWJsZT1Nb2R1bGVbXCJhc21cIl1bXCJiYVwiXTtyZW1vdmVSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKX1hZGRSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtmdW5jdGlvbiByZWNlaXZlSW5zdGFudGlhdGVkU291cmNlKG91dHB1dCl7cmVjZWl2ZUluc3RhbmNlKG91dHB1dFtcImluc3RhbmNlXCJdKX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKHJlY2VpdmVyKXtyZXR1cm4gZ2V0QmluYXJ5UHJvbWlzZSgpLnRoZW4oZnVuY3Rpb24oYmluYXJ5KXtyZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYmluYXJ5LGluZm8pfSkudGhlbihyZWNlaXZlcixmdW5jdGlvbihyZWFzb24pe2VycihcImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206IFwiK3JlYXNvbik7YWJvcnQocmVhc29uKX0pfWZ1bmN0aW9uIGluc3RhbnRpYXRlQXN5bmMoKXtpZighd2FzbUJpbmFyeSYmdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nPT09XCJmdW5jdGlvblwiJiYhaXNEYXRhVVJJKHdhc21CaW5hcnlGaWxlKSYmIWlzRmlsZVVSSSh3YXNtQmluYXJ5RmlsZSkmJnR5cGVvZiBmZXRjaD09PVwiZnVuY3Rpb25cIil7cmV0dXJuIGZldGNoKHdhc21CaW5hcnlGaWxlLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXt2YXIgcmVzdWx0PVdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKHJlc3BvbnNlLGluZm8pO3JldHVybiByZXN1bHQudGhlbihyZWNlaXZlSW5zdGFudGlhdGVkU291cmNlLGZ1bmN0aW9uKHJlYXNvbil7ZXJyKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiK3JlYXNvbik7ZXJyKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZSl9KX0pfWVsc2V7cmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRlZFNvdXJjZSl9fWlmKE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXSl7dHJ5e3ZhciBleHBvcnRzPU1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXShpbmZvLHJlY2VpdmVJbnN0YW5jZSk7cmV0dXJuIGV4cG9ydHN9Y2F0Y2goZSl7ZXJyKFwiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogXCIrZSk7cmV0dXJuIGZhbHNlfX1pbnN0YW50aWF0ZUFzeW5jKCkuY2F0Y2gocmVhZHlQcm9taXNlUmVqZWN0KTtyZXR1cm57fX12YXIgdGVtcERvdWJsZTt2YXIgdGVtcEk2NDt2YXIgQVNNX0NPTlNUUz17NjQwOTI6ZnVuY3Rpb24oKXt2YXIgJGE9YXJndW1lbnRzO3ZhciBpPTA7aWYoIWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl0pe2FydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl09e2lkOjAsZXJyb3I6LTEsZm91bmQ6MCxwb3NlOlswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF19fXZhciBtYXJrZXJJbmZvPWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl07bWFya2VySW5mb1tcImlkXCJdPSRhW2krK107bWFya2VySW5mb1tcImVycm9yXCJdPSRhW2krK107bWFya2VySW5mb1tcImZvdW5kXCJdPTE7bWFya2VySW5mb1tcInBvc2VcIl1bMF09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsxXT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzJdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bM109JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVs0XT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzVdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bNl09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVs3XT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzhdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bOV09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsxMF09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsxMV09JGFbaSsrXX0sNjQ3OTg6ZnVuY3Rpb24oKXt2YXIgJGE9YXJndW1lbnRzO3ZhciBpPTA7aWYoIWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl0pe2FydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl09e2lkOjAsZXJyb3I6LTEsZm91bmQ6MCxwb3NlOlswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF19fXZhciBtYXJrZXJJbmZvPWFydG9vbGtpdE5GVFtcIk5GVE1hcmtlckluZm9cIl07bWFya2VySW5mb1tcImlkXCJdPSRhW2krK107bWFya2VySW5mb1tcImVycm9yXCJdPS0xO21hcmtlckluZm9bXCJmb3VuZFwiXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzBdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMV09MDttYXJrZXJJbmZvW1wicG9zZVwiXVsyXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzNdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bNF09MDttYXJrZXJJbmZvW1wicG9zZVwiXVs1XT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzZdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bN109MDttYXJrZXJJbmZvW1wicG9zZVwiXVs4XT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzldPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMTBdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMTFdPTB9LDY1NDI3OmZ1bmN0aW9uKCQwLCQxLCQyLCQzLCQ0LCQ1KXtpZighYXJ0b29sa2l0TkZUW1wiZnJhbWVNYWxsb2NcIl0pe2FydG9vbGtpdE5GVFtcImZyYW1lTWFsbG9jXCJdPXt9fXZhciBmcmFtZU1hbGxvYz1hcnRvb2xraXRORlRbXCJmcmFtZU1hbGxvY1wiXTtmcmFtZU1hbGxvY1tcImZyYW1lcG9pbnRlclwiXT0kMTtmcmFtZU1hbGxvY1tcImZyYW1lc2l6ZVwiXT0kMjtmcmFtZU1hbGxvY1tcImNhbWVyYVwiXT0kMztmcmFtZU1hbGxvY1tcInRyYW5zZm9ybVwiXT0kNDtmcmFtZU1hbGxvY1tcInZpZGVvTHVtYVBvaW50ZXJcIl09JDV9fTtmdW5jdGlvbiBjYWxsUnVudGltZUNhbGxiYWNrcyhjYWxsYmFja3Mpe3doaWxlKGNhbGxiYWNrcy5sZW5ndGg+MCl7dmFyIGNhbGxiYWNrPWNhbGxiYWNrcy5zaGlmdCgpO2lmKHR5cGVvZiBjYWxsYmFjaz09XCJmdW5jdGlvblwiKXtjYWxsYmFjayhNb2R1bGUpO2NvbnRpbnVlfXZhciBmdW5jPWNhbGxiYWNrLmZ1bmM7aWYodHlwZW9mIGZ1bmM9PT1cIm51bWJlclwiKXtpZihjYWxsYmFjay5hcmc9PT11bmRlZmluZWQpe3dhc21UYWJsZS5nZXQoZnVuYykoKX1lbHNle3dhc21UYWJsZS5nZXQoZnVuYykoY2FsbGJhY2suYXJnKX19ZWxzZXtmdW5jKGNhbGxiYWNrLmFyZz09PXVuZGVmaW5lZD9udWxsOmNhbGxiYWNrLmFyZyl9fX12YXIgRXhjZXB0aW9uSW5mb0F0dHJzPXtERVNUUlVDVE9SX09GRlNFVDowLFJFRkNPVU5UX09GRlNFVDo0LFRZUEVfT0ZGU0VUOjgsQ0FVR0hUX09GRlNFVDoxMixSRVRIUk9XTl9PRkZTRVQ6MTMsU0laRToxNn07ZnVuY3Rpb24gX19fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvbihzaXplKXtyZXR1cm4gX21hbGxvYyhzaXplK0V4Y2VwdGlvbkluZm9BdHRycy5TSVpFKStFeGNlcHRpb25JbmZvQXR0cnMuU0laRX1mdW5jdGlvbiBFeGNlcHRpb25JbmZvKGV4Y1B0cil7dGhpcy5leGNQdHI9ZXhjUHRyO3RoaXMucHRyPWV4Y1B0ci1FeGNlcHRpb25JbmZvQXR0cnMuU0laRTt0aGlzLnNldF90eXBlPWZ1bmN0aW9uKHR5cGUpe0hFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuVFlQRV9PRkZTRVQ+PjJdPXR5cGV9O3RoaXMuZ2V0X3R5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5UWVBFX09GRlNFVD4+Ml19O3RoaXMuc2V0X2Rlc3RydWN0b3I9ZnVuY3Rpb24oZGVzdHJ1Y3Rvcil7SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5ERVNUUlVDVE9SX09GRlNFVD4+Ml09ZGVzdHJ1Y3Rvcn07dGhpcy5nZXRfZGVzdHJ1Y3Rvcj1mdW5jdGlvbigpe3JldHVybiBIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLkRFU1RSVUNUT1JfT0ZGU0VUPj4yXX07dGhpcy5zZXRfcmVmY291bnQ9ZnVuY3Rpb24ocmVmY291bnQpe0hFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVGQ09VTlRfT0ZGU0VUPj4yXT1yZWZjb3VudH07dGhpcy5zZXRfY2F1Z2h0PWZ1bmN0aW9uKGNhdWdodCl7Y2F1Z2h0PWNhdWdodD8xOjA7SEVBUDhbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLkNBVUdIVF9PRkZTRVQ+PjBdPWNhdWdodH07dGhpcy5nZXRfY2F1Z2h0PWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVA4W3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5DQVVHSFRfT0ZGU0VUPj4wXSE9MH07dGhpcy5zZXRfcmV0aHJvd249ZnVuY3Rpb24ocmV0aHJvd24pe3JldGhyb3duPXJldGhyb3duPzE6MDtIRUFQOFt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVUSFJPV05fT0ZGU0VUPj4wXT1yZXRocm93bn07dGhpcy5nZXRfcmV0aHJvd249ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFVEhST1dOX09GRlNFVD4+MF0hPTB9O3RoaXMuaW5pdD1mdW5jdGlvbih0eXBlLGRlc3RydWN0b3Ipe3RoaXMuc2V0X3R5cGUodHlwZSk7dGhpcy5zZXRfZGVzdHJ1Y3RvcihkZXN0cnVjdG9yKTt0aGlzLnNldF9yZWZjb3VudCgwKTt0aGlzLnNldF9jYXVnaHQoZmFsc2UpO3RoaXMuc2V0X3JldGhyb3duKGZhbHNlKX07dGhpcy5hZGRfcmVmPWZ1bmN0aW9uKCl7dmFyIHZhbHVlPUhFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVGQ09VTlRfT0ZGU0VUPj4yXTtIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFRkNPVU5UX09GRlNFVD4+Ml09dmFsdWUrMX07dGhpcy5yZWxlYXNlX3JlZj1mdW5jdGlvbigpe3ZhciBwcmV2PUhFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVGQ09VTlRfT0ZGU0VUPj4yXTtIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlJFRkNPVU5UX09GRlNFVD4+Ml09cHJldi0xO3JldHVybiBwcmV2PT09MX19dmFyIGV4Y2VwdGlvbkxhc3Q9MDt2YXIgdW5jYXVnaHRFeGNlcHRpb25Db3VudD0wO2Z1bmN0aW9uIF9fX2N4YV90aHJvdyhwdHIsdHlwZSxkZXN0cnVjdG9yKXt2YXIgaW5mbz1uZXcgRXhjZXB0aW9uSW5mbyhwdHIpO2luZm8uaW5pdCh0eXBlLGRlc3RydWN0b3IpO2V4Y2VwdGlvbkxhc3Q9cHRyO3VuY2F1Z2h0RXhjZXB0aW9uQ291bnQrKzt0aHJvdyBwdHJ9ZnVuY3Rpb24gX3R6c2V0KCl7aWYoX3R6c2V0LmNhbGxlZClyZXR1cm47X3R6c2V0LmNhbGxlZD10cnVlO3ZhciBjdXJyZW50WWVhcj0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCk7dmFyIHdpbnRlcj1uZXcgRGF0ZShjdXJyZW50WWVhciwwLDEpO3ZhciBzdW1tZXI9bmV3IERhdGUoY3VycmVudFllYXIsNiwxKTt2YXIgd2ludGVyT2Zmc2V0PXdpbnRlci5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBzdW1tZXJPZmZzZXQ9c3VtbWVyLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHN0ZFRpbWV6b25lT2Zmc2V0PU1hdGgubWF4KHdpbnRlck9mZnNldCxzdW1tZXJPZmZzZXQpO0hFQVAzMltfX2dldF90aW1lem9uZSgpPj4yXT1zdGRUaW1lem9uZU9mZnNldCo2MDtIRUFQMzJbX19nZXRfZGF5bGlnaHQoKT4+Ml09TnVtYmVyKHdpbnRlck9mZnNldCE9c3VtbWVyT2Zmc2V0KTtmdW5jdGlvbiBleHRyYWN0Wm9uZShkYXRlKXt2YXIgbWF0Y2g9ZGF0ZS50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pO3JldHVybiBtYXRjaD9tYXRjaFsxXTpcIkdNVFwifXZhciB3aW50ZXJOYW1lPWV4dHJhY3Rab25lKHdpbnRlcik7dmFyIHN1bW1lck5hbWU9ZXh0cmFjdFpvbmUoc3VtbWVyKTt2YXIgd2ludGVyTmFtZVB0cj1hbGxvY2F0ZVVURjgod2ludGVyTmFtZSk7dmFyIHN1bW1lck5hbWVQdHI9YWxsb2NhdGVVVEY4KHN1bW1lck5hbWUpO2lmKHN1bW1lck9mZnNldDx3aW50ZXJPZmZzZXQpe0hFQVAzMltfX2dldF90em5hbWUoKT4+Ml09d2ludGVyTmFtZVB0cjtIRUFQMzJbX19nZXRfdHpuYW1lKCkrND4+Ml09c3VtbWVyTmFtZVB0cn1lbHNle0hFQVAzMltfX2dldF90em5hbWUoKT4+Ml09c3VtbWVyTmFtZVB0cjtIRUFQMzJbX19nZXRfdHpuYW1lKCkrND4+Ml09d2ludGVyTmFtZVB0cn19ZnVuY3Rpb24gX2xvY2FsdGltZV9yKHRpbWUsdG1QdHIpe190enNldCgpO3ZhciBkYXRlPW5ldyBEYXRlKEhFQVAzMlt0aW1lPj4yXSoxZTMpO0hFQVAzMlt0bVB0cj4+Ml09ZGF0ZS5nZXRTZWNvbmRzKCk7SEVBUDMyW3RtUHRyKzQ+PjJdPWRhdGUuZ2V0TWludXRlcygpO0hFQVAzMlt0bVB0cis4Pj4yXT1kYXRlLmdldEhvdXJzKCk7SEVBUDMyW3RtUHRyKzEyPj4yXT1kYXRlLmdldERhdGUoKTtIRUFQMzJbdG1QdHIrMTY+PjJdPWRhdGUuZ2V0TW9udGgoKTtIRUFQMzJbdG1QdHIrMjA+PjJdPWRhdGUuZ2V0RnVsbFllYXIoKS0xOTAwO0hFQVAzMlt0bVB0cisyND4+Ml09ZGF0ZS5nZXREYXkoKTt2YXIgc3RhcnQ9bmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLDAsMSk7dmFyIHlkYXk9KGRhdGUuZ2V0VGltZSgpLXN0YXJ0LmdldFRpbWUoKSkvKDFlMyo2MCo2MCoyNCl8MDtIRUFQMzJbdG1QdHIrMjg+PjJdPXlkYXk7SEVBUDMyW3RtUHRyKzM2Pj4yXT0tKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MCk7dmFyIHN1bW1lck9mZnNldD1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksNiwxKS5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciB3aW50ZXJPZmZzZXQ9c3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgZHN0PShzdW1tZXJPZmZzZXQhPXdpbnRlck9mZnNldCYmZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpPT1NYXRoLm1pbih3aW50ZXJPZmZzZXQsc3VtbWVyT2Zmc2V0KSl8MDtIRUFQMzJbdG1QdHIrMzI+PjJdPWRzdDt2YXIgem9uZVB0cj1IRUFQMzJbX19nZXRfdHpuYW1lKCkrKGRzdD80OjApPj4yXTtIRUFQMzJbdG1QdHIrNDA+PjJdPXpvbmVQdHI7cmV0dXJuIHRtUHRyfWZ1bmN0aW9uIF9fX2xvY2FsdGltZV9yKGEwLGExKXtyZXR1cm4gX2xvY2FsdGltZV9yKGEwLGExKX1mdW5jdGlvbiBzZXRFcnJObyh2YWx1ZSl7SEVBUDMyW19fX2Vycm5vX2xvY2F0aW9uKCk+PjJdPXZhbHVlO3JldHVybiB2YWx1ZX12YXIgUEFUSD17c3BsaXRQYXRoOmZ1bmN0aW9uKGZpbGVuYW1lKXt2YXIgc3BsaXRQYXRoUmU9L14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC87cmV0dXJuIHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpLnNsaWNlKDEpfSxub3JtYWxpemVBcnJheTpmdW5jdGlvbihwYXJ0cyxhbGxvd0Fib3ZlUm9vdCl7dmFyIHVwPTA7Zm9yKHZhciBpPXBhcnRzLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbGFzdD1wYXJ0c1tpXTtpZihsYXN0PT09XCIuXCIpe3BhcnRzLnNwbGljZShpLDEpfWVsc2UgaWYobGFzdD09PVwiLi5cIil7cGFydHMuc3BsaWNlKGksMSk7dXArK31lbHNlIGlmKHVwKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cC0tfX1pZihhbGxvd0Fib3ZlUm9vdCl7Zm9yKDt1cDt1cC0tKXtwYXJ0cy51bnNoaWZ0KFwiLi5cIil9fXJldHVybiBwYXJ0c30sbm9ybWFsaXplOmZ1bmN0aW9uKHBhdGgpe3ZhciBpc0Fic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCIsdHJhaWxpbmdTbGFzaD1wYXRoLnN1YnN0cigtMSk9PT1cIi9cIjtwYXRoPVBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFpc0Fic29sdXRlKS5qb2luKFwiL1wiKTtpZighcGF0aCYmIWlzQWJzb2x1dGUpe3BhdGg9XCIuXCJ9aWYocGF0aCYmdHJhaWxpbmdTbGFzaCl7cGF0aCs9XCIvXCJ9cmV0dXJuKGlzQWJzb2x1dGU/XCIvXCI6XCJcIikrcGF0aH0sZGlybmFtZTpmdW5jdGlvbihwYXRoKXt2YXIgcmVzdWx0PVBBVEguc3BsaXRQYXRoKHBhdGgpLHJvb3Q9cmVzdWx0WzBdLGRpcj1yZXN1bHRbMV07aWYoIXJvb3QmJiFkaXIpe3JldHVyblwiLlwifWlmKGRpcil7ZGlyPWRpci5zdWJzdHIoMCxkaXIubGVuZ3RoLTEpfXJldHVybiByb290K2Rpcn0sYmFzZW5hbWU6ZnVuY3Rpb24ocGF0aCl7aWYocGF0aD09PVwiL1wiKXJldHVyblwiL1wiO3BhdGg9UEFUSC5ub3JtYWxpemUocGF0aCk7cGF0aD1wYXRoLnJlcGxhY2UoL1xcLyQvLFwiXCIpO3ZhciBsYXN0U2xhc2g9cGF0aC5sYXN0SW5kZXhPZihcIi9cIik7aWYobGFzdFNsYXNoPT09LTEpcmV0dXJuIHBhdGg7cmV0dXJuIHBhdGguc3Vic3RyKGxhc3RTbGFzaCsxKX0sZXh0bmFtZTpmdW5jdGlvbihwYXRoKXtyZXR1cm4gUEFUSC5zcGxpdFBhdGgocGF0aClbM119LGpvaW46ZnVuY3Rpb24oKXt2YXIgcGF0aHM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO3JldHVybiBQQVRILm5vcm1hbGl6ZShwYXRocy5qb2luKFwiL1wiKSl9LGpvaW4yOmZ1bmN0aW9uKGwscil7cmV0dXJuIFBBVEgubm9ybWFsaXplKGwrXCIvXCIrcil9fTtmdW5jdGlvbiBnZXRSYW5kb21EZXZpY2UoKXtpZih0eXBlb2YgY3J5cHRvPT09XCJvYmplY3RcIiYmdHlwZW9mIGNyeXB0b1tcImdldFJhbmRvbVZhbHVlc1wiXT09PVwiZnVuY3Rpb25cIil7dmFyIHJhbmRvbUJ1ZmZlcj1uZXcgVWludDhBcnJheSgxKTtyZXR1cm4gZnVuY3Rpb24oKXtjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJhbmRvbUJ1ZmZlcik7cmV0dXJuIHJhbmRvbUJ1ZmZlclswXX19ZWxzZSBpZihFTlZJUk9OTUVOVF9JU19OT0RFKXt0cnl7dmFyIGNyeXB0b19tb2R1bGU9cmVxdWlyZShcImNyeXB0b1wiKTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gY3J5cHRvX21vZHVsZVtcInJhbmRvbUJ5dGVzXCJdKDEpWzBdfX1jYXRjaChlKXt9fXJldHVybiBmdW5jdGlvbigpe2Fib3J0KFwicmFuZG9tRGV2aWNlXCIpfX12YXIgUEFUSF9GUz17cmVzb2x2ZTpmdW5jdGlvbigpe3ZhciByZXNvbHZlZFBhdGg9XCJcIixyZXNvbHZlZEFic29sdXRlPWZhbHNlO2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLTE7aT49LTEmJiFyZXNvbHZlZEFic29sdXRlO2ktLSl7dmFyIHBhdGg9aT49MD9hcmd1bWVudHNbaV06RlMuY3dkKCk7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3NcIil9ZWxzZSBpZighcGF0aCl7cmV0dXJuXCJcIn1yZXNvbHZlZFBhdGg9cGF0aCtcIi9cIityZXNvbHZlZFBhdGg7cmVzb2x2ZWRBYnNvbHV0ZT1wYXRoLmNoYXJBdCgwKT09PVwiL1wifXJlc29sdmVkUGF0aD1QQVRILm5vcm1hbGl6ZUFycmF5KHJlc29sdmVkUGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifSxyZWxhdGl2ZTpmdW5jdGlvbihmcm9tLHRvKXtmcm9tPVBBVEhfRlMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7dG89UEFUSF9GUy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7ZnVuY3Rpb24gdHJpbShhcnIpe3ZhciBzdGFydD0wO2Zvcig7c3RhcnQ8YXJyLmxlbmd0aDtzdGFydCsrKXtpZihhcnJbc3RhcnRdIT09XCJcIilicmVha312YXIgZW5kPWFyci5sZW5ndGgtMTtmb3IoO2VuZD49MDtlbmQtLSl7aWYoYXJyW2VuZF0hPT1cIlwiKWJyZWFrfWlmKHN0YXJ0PmVuZClyZXR1cm5bXTtyZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LGVuZC1zdGFydCsxKX12YXIgZnJvbVBhcnRzPXRyaW0oZnJvbS5zcGxpdChcIi9cIikpO3ZhciB0b1BhcnRzPXRyaW0odG8uc3BsaXQoXCIvXCIpKTt2YXIgbGVuZ3RoPU1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsdG9QYXJ0cy5sZW5ndGgpO3ZhciBzYW1lUGFydHNMZW5ndGg9bGVuZ3RoO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7aWYoZnJvbVBhcnRzW2ldIT09dG9QYXJ0c1tpXSl7c2FtZVBhcnRzTGVuZ3RoPWk7YnJlYWt9fXZhciBvdXRwdXRQYXJ0cz1bXTtmb3IodmFyIGk9c2FtZVBhcnRzTGVuZ3RoO2k8ZnJvbVBhcnRzLmxlbmd0aDtpKyspe291dHB1dFBhcnRzLnB1c2goXCIuLlwiKX1vdXRwdXRQYXJ0cz1vdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtyZXR1cm4gb3V0cHV0UGFydHMuam9pbihcIi9cIil9fTt2YXIgVFRZPXt0dHlzOltdLGluaXQ6ZnVuY3Rpb24oKXt9LHNodXRkb3duOmZ1bmN0aW9uKCl7fSxyZWdpc3RlcjpmdW5jdGlvbihkZXYsb3BzKXtUVFkudHR5c1tkZXZdPXtpbnB1dDpbXSxvdXRwdXQ6W10sb3BzOm9wc307RlMucmVnaXN0ZXJEZXZpY2UoZGV2LFRUWS5zdHJlYW1fb3BzKX0sc3RyZWFtX29wczp7b3BlbjpmdW5jdGlvbihzdHJlYW0pe3ZhciB0dHk9VFRZLnR0eXNbc3RyZWFtLm5vZGUucmRldl07aWYoIXR0eSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDMpfXN0cmVhbS50dHk9dHR5O3N0cmVhbS5zZWVrYWJsZT1mYWxzZX0sY2xvc2U6ZnVuY3Rpb24oc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mbHVzaChzdHJlYW0udHR5KX0sZmx1c2g6ZnVuY3Rpb24oc3RyZWFtKXtzdHJlYW0udHR5Lm9wcy5mbHVzaChzdHJlYW0udHR5KX0scmVhZDpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXtpZighc3RyZWFtLnR0eXx8IXN0cmVhbS50dHkub3BzLmdldF9jaGFyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2MCl9dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PXN0cmVhbS50dHkub3BzLmdldF9jaGFyKHN0cmVhbS50dHkpfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX1pZihyZXN1bHQ9PT11bmRlZmluZWQmJmJ5dGVzUmVhZD09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYpfWlmKHJlc3VsdD09PW51bGx8fHJlc3VsdD09PXVuZGVmaW5lZClicmVhaztieXRlc1JlYWQrKztidWZmZXJbb2Zmc2V0K2ldPXJlc3VsdH1pZihieXRlc1JlYWQpe3N0cmVhbS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpfXJldHVybiBieXRlc1JlYWR9LHdyaXRlOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe2lmKCFzdHJlYW0udHR5fHwhc3RyZWFtLnR0eS5vcHMucHV0X2NoYXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYwKX10cnl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtzdHJlYW0udHR5Lm9wcy5wdXRfY2hhcihzdHJlYW0udHR5LGJ1ZmZlcltvZmZzZXQraV0pfX1jYXRjaChlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOSl9aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX19LGRlZmF1bHRfdHR5X29wczp7Z2V0X2NoYXI6ZnVuY3Rpb24odHR5KXtpZighdHR5LmlucHV0Lmxlbmd0aCl7dmFyIHJlc3VsdD1udWxsO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBCVUZTSVpFPTI1Njt2YXIgYnVmPUJ1ZmZlci5hbGxvYz9CdWZmZXIuYWxsb2MoQlVGU0laRSk6bmV3IEJ1ZmZlcihCVUZTSVpFKTt2YXIgYnl0ZXNSZWFkPTA7dHJ5e2J5dGVzUmVhZD1ub2RlRlMucmVhZFN5bmMocHJvY2Vzcy5zdGRpbi5mZCxidWYsMCxCVUZTSVpFLG51bGwpfWNhdGNoKGUpe2lmKGUudG9TdHJpbmcoKS5pbmRleE9mKFwiRU9GXCIpIT0tMSlieXRlc1JlYWQ9MDtlbHNlIHRocm93IGV9aWYoYnl0ZXNSZWFkPjApe3Jlc3VsdD1idWYuc2xpY2UoMCxieXRlc1JlYWQpLnRvU3RyaW5nKFwidXRmLThcIil9ZWxzZXtyZXN1bHQ9bnVsbH19ZWxzZSBpZih0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiJiZ0eXBlb2Ygd2luZG93LnByb21wdD09XCJmdW5jdGlvblwiKXtyZXN1bHQ9d2luZG93LnByb21wdChcIklucHV0OiBcIik7aWYocmVzdWx0IT09bnVsbCl7cmVzdWx0Kz1cIlxcblwifX1lbHNlIGlmKHR5cGVvZiByZWFkbGluZT09XCJmdW5jdGlvblwiKXtyZXN1bHQ9cmVhZGxpbmUoKTtpZihyZXN1bHQhPT1udWxsKXtyZXN1bHQrPVwiXFxuXCJ9fWlmKCFyZXN1bHQpe3JldHVybiBudWxsfXR0eS5pbnB1dD1pbnRBcnJheUZyb21TdHJpbmcocmVzdWx0LHRydWUpfXJldHVybiB0dHkuaW5wdXQuc2hpZnQoKX0scHV0X2NoYXI6ZnVuY3Rpb24odHR5LHZhbCl7aWYodmFsPT09bnVsbHx8dmFsPT09MTApe291dChVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfWVsc2V7aWYodmFsIT0wKXR0eS5vdXRwdXQucHVzaCh2YWwpfX0sZmx1c2g6ZnVuY3Rpb24odHR5KXtpZih0dHkub3V0cHV0JiZ0dHkub3V0cHV0Lmxlbmd0aD4wKXtvdXQoVVRGOEFycmF5VG9TdHJpbmcodHR5Lm91dHB1dCwwKSk7dHR5Lm91dHB1dD1bXX19fSxkZWZhdWx0X3R0eTFfb3BzOntwdXRfY2hhcjpmdW5jdGlvbih0dHksdmFsKXtpZih2YWw9PT1udWxsfHx2YWw9PT0xMCl7ZXJyKFVURjhBcnJheVRvU3RyaW5nKHR0eS5vdXRwdXQsMCkpO3R0eS5vdXRwdXQ9W119ZWxzZXtpZih2YWwhPTApdHR5Lm91dHB1dC5wdXNoKHZhbCl9fSxmbHVzaDpmdW5jdGlvbih0dHkpe2lmKHR0eS5vdXRwdXQmJnR0eS5vdXRwdXQubGVuZ3RoPjApe2VycihVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfX19fTtmdW5jdGlvbiBtbWFwQWxsb2Moc2l6ZSl7dmFyIGFsaWduZWRTaXplPWFsaWduTWVtb3J5KHNpemUsMTYzODQpO3ZhciBwdHI9X21hbGxvYyhhbGlnbmVkU2l6ZSk7d2hpbGUoc2l6ZTxhbGlnbmVkU2l6ZSlIRUFQOFtwdHIrc2l6ZSsrXT0wO3JldHVybiBwdHJ9dmFyIE1FTUZTPXtvcHNfdGFibGU6bnVsbCxtb3VudDpmdW5jdGlvbihtb3VudCl7cmV0dXJuIE1FTUZTLmNyZWF0ZU5vZGUobnVsbCxcIi9cIiwxNjM4NHw1MTEsMCl9LGNyZWF0ZU5vZGU6ZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxkZXYpe2lmKEZTLmlzQmxrZGV2KG1vZGUpfHxGUy5pc0ZJRk8obW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1pZighTUVNRlMub3BzX3RhYmxlKXtNRU1GUy5vcHNfdGFibGU9e2Rpcjp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cixsb29rdXA6TUVNRlMubm9kZV9vcHMubG9va3VwLG1rbm9kOk1FTUZTLm5vZGVfb3BzLm1rbm9kLHJlbmFtZTpNRU1GUy5ub2RlX29wcy5yZW5hbWUsdW5saW5rOk1FTUZTLm5vZGVfb3BzLnVubGluayxybWRpcjpNRU1GUy5ub2RlX29wcy5ybWRpcixyZWFkZGlyOk1FTUZTLm5vZGVfb3BzLnJlYWRkaXIsc3ltbGluazpNRU1GUy5ub2RlX29wcy5zeW1saW5rfSxzdHJlYW06e2xsc2VlazpNRU1GUy5zdHJlYW1fb3BzLmxsc2Vla319LGZpbGU6e25vZGU6e2dldGF0dHI6TUVNRlMubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOk1FTUZTLm5vZGVfb3BzLnNldGF0dHJ9LHN0cmVhbTp7bGxzZWVrOk1FTUZTLnN0cmVhbV9vcHMubGxzZWVrLHJlYWQ6TUVNRlMuc3RyZWFtX29wcy5yZWFkLHdyaXRlOk1FTUZTLnN0cmVhbV9vcHMud3JpdGUsYWxsb2NhdGU6TUVNRlMuc3RyZWFtX29wcy5hbGxvY2F0ZSxtbWFwOk1FTUZTLnN0cmVhbV9vcHMubW1hcCxtc3luYzpNRU1GUy5zdHJlYW1fb3BzLm1zeW5jfX0sbGluazp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cixyZWFkbGluazpNRU1GUy5ub2RlX29wcy5yZWFkbGlua30sc3RyZWFtOnt9fSxjaHJkZXY6e25vZGU6e2dldGF0dHI6TUVNRlMubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOk1FTUZTLm5vZGVfb3BzLnNldGF0dHJ9LHN0cmVhbTpGUy5jaHJkZXZfc3RyZWFtX29wc319fXZhciBub2RlPUZTLmNyZWF0ZU5vZGUocGFyZW50LG5hbWUsbW9kZSxkZXYpO2lmKEZTLmlzRGlyKG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmRpci5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUuZGlyLnN0cmVhbTtub2RlLmNvbnRlbnRzPXt9fWVsc2UgaWYoRlMuaXNGaWxlKG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmZpbGUubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmZpbGUuc3RyZWFtO25vZGUudXNlZEJ5dGVzPTA7bm9kZS5jb250ZW50cz1udWxsfWVsc2UgaWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe25vZGUubm9kZV9vcHM9TUVNRlMub3BzX3RhYmxlLmxpbmsubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmxpbmsuc3RyZWFtfWVsc2UgaWYoRlMuaXNDaHJkZXYobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUuY2hyZGV2Lm5vZGU7bm9kZS5zdHJlYW1fb3BzPU1FTUZTLm9wc190YWJsZS5jaHJkZXYuc3RyZWFtfW5vZGUudGltZXN0YW1wPURhdGUubm93KCk7aWYocGFyZW50KXtwYXJlbnQuY29udGVudHNbbmFtZV09bm9kZTtwYXJlbnQudGltZXN0YW1wPW5vZGUudGltZXN0YW1wfXJldHVybiBub2RlfSxnZXRGaWxlRGF0YUFzVHlwZWRBcnJheTpmdW5jdGlvbihub2RlKXtpZighbm9kZS5jb250ZW50cylyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7aWYobm9kZS5jb250ZW50cy5zdWJhcnJheSlyZXR1cm4gbm9kZS5jb250ZW50cy5zdWJhcnJheSgwLG5vZGUudXNlZEJ5dGVzKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkobm9kZS5jb250ZW50cyl9LGV4cGFuZEZpbGVTdG9yYWdlOmZ1bmN0aW9uKG5vZGUsbmV3Q2FwYWNpdHkpe3ZhciBwcmV2Q2FwYWNpdHk9bm9kZS5jb250ZW50cz9ub2RlLmNvbnRlbnRzLmxlbmd0aDowO2lmKHByZXZDYXBhY2l0eT49bmV3Q2FwYWNpdHkpcmV0dXJuO3ZhciBDQVBBQ0lUWV9ET1VCTElOR19NQVg9MTAyNCoxMDI0O25ld0NhcGFjaXR5PU1hdGgubWF4KG5ld0NhcGFjaXR5LHByZXZDYXBhY2l0eSoocHJldkNhcGFjaXR5PENBUEFDSVRZX0RPVUJMSU5HX01BWD8yOjEuMTI1KT4+PjApO2lmKHByZXZDYXBhY2l0eSE9MCluZXdDYXBhY2l0eT1NYXRoLm1heChuZXdDYXBhY2l0eSwyNTYpO3ZhciBvbGRDb250ZW50cz1ub2RlLmNvbnRlbnRzO25vZGUuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkobmV3Q2FwYWNpdHkpO2lmKG5vZGUudXNlZEJ5dGVzPjApbm9kZS5jb250ZW50cy5zZXQob2xkQ29udGVudHMuc3ViYXJyYXkoMCxub2RlLnVzZWRCeXRlcyksMCl9LHJlc2l6ZUZpbGVTdG9yYWdlOmZ1bmN0aW9uKG5vZGUsbmV3U2l6ZSl7aWYobm9kZS51c2VkQnl0ZXM9PW5ld1NpemUpcmV0dXJuO2lmKG5ld1NpemU9PTApe25vZGUuY29udGVudHM9bnVsbDtub2RlLnVzZWRCeXRlcz0wfWVsc2V7dmFyIG9sZENvbnRlbnRzPW5vZGUuY29udGVudHM7bm9kZS5jb250ZW50cz1uZXcgVWludDhBcnJheShuZXdTaXplKTtpZihvbGRDb250ZW50cyl7bm9kZS5jb250ZW50cy5zZXQob2xkQ29udGVudHMuc3ViYXJyYXkoMCxNYXRoLm1pbihuZXdTaXplLG5vZGUudXNlZEJ5dGVzKSkpfW5vZGUudXNlZEJ5dGVzPW5ld1NpemV9fSxub2RlX29wczp7Z2V0YXR0cjpmdW5jdGlvbihub2RlKXt2YXIgYXR0cj17fTthdHRyLmRldj1GUy5pc0NocmRldihub2RlLm1vZGUpP25vZGUuaWQ6MTthdHRyLmlubz1ub2RlLmlkO2F0dHIubW9kZT1ub2RlLm1vZGU7YXR0ci5ubGluaz0xO2F0dHIudWlkPTA7YXR0ci5naWQ9MDthdHRyLnJkZXY9bm9kZS5yZGV2O2lmKEZTLmlzRGlyKG5vZGUubW9kZSkpe2F0dHIuc2l6ZT00MDk2fWVsc2UgaWYoRlMuaXNGaWxlKG5vZGUubW9kZSkpe2F0dHIuc2l6ZT1ub2RlLnVzZWRCeXRlc31lbHNlIGlmKEZTLmlzTGluayhub2RlLm1vZGUpKXthdHRyLnNpemU9bm9kZS5saW5rLmxlbmd0aH1lbHNle2F0dHIuc2l6ZT0wfWF0dHIuYXRpbWU9bmV3IERhdGUobm9kZS50aW1lc3RhbXApO2F0dHIubXRpbWU9bmV3IERhdGUobm9kZS50aW1lc3RhbXApO2F0dHIuY3RpbWU9bmV3IERhdGUobm9kZS50aW1lc3RhbXApO2F0dHIuYmxrc2l6ZT00MDk2O2F0dHIuYmxvY2tzPU1hdGguY2VpbChhdHRyLnNpemUvYXR0ci5ibGtzaXplKTtyZXR1cm4gYXR0cn0sc2V0YXR0cjpmdW5jdGlvbihub2RlLGF0dHIpe2lmKGF0dHIubW9kZSE9PXVuZGVmaW5lZCl7bm9kZS5tb2RlPWF0dHIubW9kZX1pZihhdHRyLnRpbWVzdGFtcCE9PXVuZGVmaW5lZCl7bm9kZS50aW1lc3RhbXA9YXR0ci50aW1lc3RhbXB9aWYoYXR0ci5zaXplIT09dW5kZWZpbmVkKXtNRU1GUy5yZXNpemVGaWxlU3RvcmFnZShub2RlLGF0dHIuc2l6ZSl9fSxsb29rdXA6ZnVuY3Rpb24ocGFyZW50LG5hbWUpe3Rocm93IEZTLmdlbmVyaWNFcnJvcnNbNDRdfSxta25vZDpmdW5jdGlvbihwYXJlbnQsbmFtZSxtb2RlLGRldil7cmV0dXJuIE1FTUZTLmNyZWF0ZU5vZGUocGFyZW50LG5hbWUsbW9kZSxkZXYpfSxyZW5hbWU6ZnVuY3Rpb24ob2xkX25vZGUsbmV3X2RpcixuZXdfbmFtZSl7aWYoRlMuaXNEaXIob2xkX25vZGUubW9kZSkpe3ZhciBuZXdfbm9kZTt0cnl7bmV3X25vZGU9RlMubG9va3VwTm9kZShuZXdfZGlyLG5ld19uYW1lKX1jYXRjaChlKXt9aWYobmV3X25vZGUpe2Zvcih2YXIgaSBpbiBuZXdfbm9kZS5jb250ZW50cyl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTUpfX19ZGVsZXRlIG9sZF9ub2RlLnBhcmVudC5jb250ZW50c1tvbGRfbm9kZS5uYW1lXTtvbGRfbm9kZS5wYXJlbnQudGltZXN0YW1wPURhdGUubm93KCk7b2xkX25vZGUubmFtZT1uZXdfbmFtZTtuZXdfZGlyLmNvbnRlbnRzW25ld19uYW1lXT1vbGRfbm9kZTtuZXdfZGlyLnRpbWVzdGFtcD1vbGRfbm9kZS5wYXJlbnQudGltZXN0YW1wO29sZF9ub2RlLnBhcmVudD1uZXdfZGlyfSx1bmxpbms6ZnVuY3Rpb24ocGFyZW50LG5hbWUpe2RlbGV0ZSBwYXJlbnQuY29udGVudHNbbmFtZV07cGFyZW50LnRpbWVzdGFtcD1EYXRlLm5vdygpfSxybWRpcjpmdW5jdGlvbihwYXJlbnQsbmFtZSl7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7Zm9yKHZhciBpIGluIG5vZGUuY29udGVudHMpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU1KX1kZWxldGUgcGFyZW50LmNvbnRlbnRzW25hbWVdO3BhcmVudC50aW1lc3RhbXA9RGF0ZS5ub3coKX0scmVhZGRpcjpmdW5jdGlvbihub2RlKXt2YXIgZW50cmllcz1bXCIuXCIsXCIuLlwiXTtmb3IodmFyIGtleSBpbiBub2RlLmNvbnRlbnRzKXtpZighbm9kZS5jb250ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKXtjb250aW51ZX1lbnRyaWVzLnB1c2goa2V5KX1yZXR1cm4gZW50cmllc30sc3ltbGluazpmdW5jdGlvbihwYXJlbnQsbmV3bmFtZSxvbGRwYXRoKXt2YXIgbm9kZT1NRU1GUy5jcmVhdGVOb2RlKHBhcmVudCxuZXduYW1lLDUxMXw0MDk2MCwwKTtub2RlLmxpbms9b2xkcGF0aDtyZXR1cm4gbm9kZX0scmVhZGxpbms6ZnVuY3Rpb24obm9kZSl7aWYoIUZTLmlzTGluayhub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9cmV0dXJuIG5vZGUubGlua319LHN0cmVhbV9vcHM6e3JlYWQ6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXt2YXIgY29udGVudHM9c3RyZWFtLm5vZGUuY29udGVudHM7aWYocG9zaXRpb24+PXN0cmVhbS5ub2RlLnVzZWRCeXRlcylyZXR1cm4gMDt2YXIgc2l6ZT1NYXRoLm1pbihzdHJlYW0ubm9kZS51c2VkQnl0ZXMtcG9zaXRpb24sbGVuZ3RoKTtpZihzaXplPjgmJmNvbnRlbnRzLnN1YmFycmF5KXtidWZmZXIuc2V0KGNvbnRlbnRzLnN1YmFycmF5KHBvc2l0aW9uLHBvc2l0aW9uK3NpemUpLG9mZnNldCl9ZWxzZXtmb3IodmFyIGk9MDtpPHNpemU7aSsrKWJ1ZmZlcltvZmZzZXQraV09Y29udGVudHNbcG9zaXRpb24raV19cmV0dXJuIHNpemV9LHdyaXRlOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbixjYW5Pd24pe2lmKGJ1ZmZlci5idWZmZXI9PT1IRUFQOC5idWZmZXIpe2Nhbk93bj1mYWxzZX1pZighbGVuZ3RoKXJldHVybiAwO3ZhciBub2RlPXN0cmVhbS5ub2RlO25vZGUudGltZXN0YW1wPURhdGUubm93KCk7aWYoYnVmZmVyLnN1YmFycmF5JiYoIW5vZGUuY29udGVudHN8fG5vZGUuY29udGVudHMuc3ViYXJyYXkpKXtpZihjYW5Pd24pe25vZGUuY29udGVudHM9YnVmZmVyLnN1YmFycmF5KG9mZnNldCxvZmZzZXQrbGVuZ3RoKTtub2RlLnVzZWRCeXRlcz1sZW5ndGg7cmV0dXJuIGxlbmd0aH1lbHNlIGlmKG5vZGUudXNlZEJ5dGVzPT09MCYmcG9zaXRpb249PT0wKXtub2RlLmNvbnRlbnRzPWJ1ZmZlci5zbGljZShvZmZzZXQsb2Zmc2V0K2xlbmd0aCk7bm9kZS51c2VkQnl0ZXM9bGVuZ3RoO3JldHVybiBsZW5ndGh9ZWxzZSBpZihwb3NpdGlvbitsZW5ndGg8PW5vZGUudXNlZEJ5dGVzKXtub2RlLmNvbnRlbnRzLnNldChidWZmZXIuc3ViYXJyYXkob2Zmc2V0LG9mZnNldCtsZW5ndGgpLHBvc2l0aW9uKTtyZXR1cm4gbGVuZ3RofX1NRU1GUy5leHBhbmRGaWxlU3RvcmFnZShub2RlLHBvc2l0aW9uK2xlbmd0aCk7aWYobm9kZS5jb250ZW50cy5zdWJhcnJheSYmYnVmZmVyLnN1YmFycmF5KXtub2RlLmNvbnRlbnRzLnNldChidWZmZXIuc3ViYXJyYXkob2Zmc2V0LG9mZnNldCtsZW5ndGgpLHBvc2l0aW9uKX1lbHNle2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7bm9kZS5jb250ZW50c1twb3NpdGlvbitpXT1idWZmZXJbb2Zmc2V0K2ldfX1ub2RlLnVzZWRCeXRlcz1NYXRoLm1heChub2RlLnVzZWRCeXRlcyxwb3NpdGlvbitsZW5ndGgpO3JldHVybiBsZW5ndGh9LGxsc2VlazpmdW5jdGlvbihzdHJlYW0sb2Zmc2V0LHdoZW5jZSl7dmFyIHBvc2l0aW9uPW9mZnNldDtpZih3aGVuY2U9PT0xKXtwb3NpdGlvbis9c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYod2hlbmNlPT09Mil7aWYoRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKXtwb3NpdGlvbis9c3RyZWFtLm5vZGUudXNlZEJ5dGVzfX1pZihwb3NpdGlvbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9cmV0dXJuIHBvc2l0aW9ufSxhbGxvY2F0ZTpmdW5jdGlvbihzdHJlYW0sb2Zmc2V0LGxlbmd0aCl7TUVNRlMuZXhwYW5kRmlsZVN0b3JhZ2Uoc3RyZWFtLm5vZGUsb2Zmc2V0K2xlbmd0aCk7c3RyZWFtLm5vZGUudXNlZEJ5dGVzPU1hdGgubWF4KHN0cmVhbS5ub2RlLnVzZWRCeXRlcyxvZmZzZXQrbGVuZ3RoKX0sbW1hcDpmdW5jdGlvbihzdHJlYW0sYWRkcmVzcyxsZW5ndGgscG9zaXRpb24scHJvdCxmbGFncyl7aWYoYWRkcmVzcyE9PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9dmFyIHB0cjt2YXIgYWxsb2NhdGVkO3ZhciBjb250ZW50cz1zdHJlYW0ubm9kZS5jb250ZW50cztpZighKGZsYWdzJjIpJiZjb250ZW50cy5idWZmZXI9PT1idWZmZXIpe2FsbG9jYXRlZD1mYWxzZTtwdHI9Y29udGVudHMuYnl0ZU9mZnNldH1lbHNle2lmKHBvc2l0aW9uPjB8fHBvc2l0aW9uK2xlbmd0aDxjb250ZW50cy5sZW5ndGgpe2lmKGNvbnRlbnRzLnN1YmFycmF5KXtjb250ZW50cz1jb250ZW50cy5zdWJhcnJheShwb3NpdGlvbixwb3NpdGlvbitsZW5ndGgpfWVsc2V7Y29udGVudHM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGVudHMscG9zaXRpb24scG9zaXRpb24rbGVuZ3RoKX19YWxsb2NhdGVkPXRydWU7cHRyPW1tYXBBbGxvYyhsZW5ndGgpO2lmKCFwdHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ4KX1IRUFQOC5zZXQoY29udGVudHMscHRyKX1yZXR1cm57cHRyOnB0cixhbGxvY2F0ZWQ6YWxsb2NhdGVkfX0sbXN5bmM6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLG1tYXBGbGFncyl7aWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDMpfWlmKG1tYXBGbGFncyYyKXtyZXR1cm4gMH12YXIgYnl0ZXNXcml0dGVuPU1FTUZTLnN0cmVhbV9vcHMud3JpdGUoc3RyZWFtLGJ1ZmZlciwwLGxlbmd0aCxvZmZzZXQsZmFsc2UpO3JldHVybiAwfX19O3ZhciBGUz17cm9vdDpudWxsLG1vdW50czpbXSxkZXZpY2VzOnt9LHN0cmVhbXM6W10sbmV4dElub2RlOjEsbmFtZVRhYmxlOm51bGwsY3VycmVudFBhdGg6XCIvXCIsaW5pdGlhbGl6ZWQ6ZmFsc2UsaWdub3JlUGVybWlzc2lvbnM6dHJ1ZSx0cmFja2luZ0RlbGVnYXRlOnt9LHRyYWNraW5nOntvcGVuRmxhZ3M6e1JFQUQ6MSxXUklURToyfX0sRXJybm9FcnJvcjpudWxsLGdlbmVyaWNFcnJvcnM6e30sZmlsZXN5c3RlbXM6bnVsbCxzeW5jRlNSZXF1ZXN0czowLGxvb2t1cFBhdGg6ZnVuY3Rpb24ocGF0aCxvcHRzKXtwYXRoPVBBVEhfRlMucmVzb2x2ZShGUy5jd2QoKSxwYXRoKTtvcHRzPW9wdHN8fHt9O2lmKCFwYXRoKXJldHVybntwYXRoOlwiXCIsbm9kZTpudWxsfTt2YXIgZGVmYXVsdHM9e2ZvbGxvd19tb3VudDp0cnVlLHJlY3Vyc2VfY291bnQ6MH07Zm9yKHZhciBrZXkgaW4gZGVmYXVsdHMpe2lmKG9wdHNba2V5XT09PXVuZGVmaW5lZCl7b3B0c1trZXldPWRlZmF1bHRzW2tleV19fWlmKG9wdHMucmVjdXJzZV9jb3VudD44KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMil9dmFyIHBhcnRzPVBBVEgubm9ybWFsaXplQXJyYXkocGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLGZhbHNlKTt2YXIgY3VycmVudD1GUy5yb290O3ZhciBjdXJyZW50X3BhdGg9XCIvXCI7Zm9yKHZhciBpPTA7aTxwYXJ0cy5sZW5ndGg7aSsrKXt2YXIgaXNsYXN0PWk9PT1wYXJ0cy5sZW5ndGgtMTtpZihpc2xhc3QmJm9wdHMucGFyZW50KXticmVha31jdXJyZW50PUZTLmxvb2t1cE5vZGUoY3VycmVudCxwYXJ0c1tpXSk7Y3VycmVudF9wYXRoPVBBVEguam9pbjIoY3VycmVudF9wYXRoLHBhcnRzW2ldKTtpZihGUy5pc01vdW50cG9pbnQoY3VycmVudCkpe2lmKCFpc2xhc3R8fGlzbGFzdCYmb3B0cy5mb2xsb3dfbW91bnQpe2N1cnJlbnQ9Y3VycmVudC5tb3VudGVkLnJvb3R9fWlmKCFpc2xhc3R8fG9wdHMuZm9sbG93KXt2YXIgY291bnQ9MDt3aGlsZShGUy5pc0xpbmsoY3VycmVudC5tb2RlKSl7dmFyIGxpbms9RlMucmVhZGxpbmsoY3VycmVudF9wYXRoKTtjdXJyZW50X3BhdGg9UEFUSF9GUy5yZXNvbHZlKFBBVEguZGlybmFtZShjdXJyZW50X3BhdGgpLGxpbmspO3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChjdXJyZW50X3BhdGgse3JlY3Vyc2VfY291bnQ6b3B0cy5yZWN1cnNlX2NvdW50fSk7Y3VycmVudD1sb29rdXAubm9kZTtpZihjb3VudCsrPjQwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMil9fX19cmV0dXJue3BhdGg6Y3VycmVudF9wYXRoLG5vZGU6Y3VycmVudH19LGdldFBhdGg6ZnVuY3Rpb24obm9kZSl7dmFyIHBhdGg7d2hpbGUodHJ1ZSl7aWYoRlMuaXNSb290KG5vZGUpKXt2YXIgbW91bnQ9bm9kZS5tb3VudC5tb3VudHBvaW50O2lmKCFwYXRoKXJldHVybiBtb3VudDtyZXR1cm4gbW91bnRbbW91bnQubGVuZ3RoLTFdIT09XCIvXCI/bW91bnQrXCIvXCIrcGF0aDptb3VudCtwYXRofXBhdGg9cGF0aD9ub2RlLm5hbWUrXCIvXCIrcGF0aDpub2RlLm5hbWU7bm9kZT1ub2RlLnBhcmVudH19LGhhc2hOYW1lOmZ1bmN0aW9uKHBhcmVudGlkLG5hbWUpe3ZhciBoYXNoPTA7Zm9yKHZhciBpPTA7aTxuYW1lLmxlbmd0aDtpKyspe2hhc2g9KGhhc2g8PDUpLWhhc2grbmFtZS5jaGFyQ29kZUF0KGkpfDB9cmV0dXJuKHBhcmVudGlkK2hhc2g+Pj4wKSVGUy5uYW1lVGFibGUubGVuZ3RofSxoYXNoQWRkTm9kZTpmdW5jdGlvbihub2RlKXt2YXIgaGFzaD1GUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCxub2RlLm5hbWUpO25vZGUubmFtZV9uZXh0PUZTLm5hbWVUYWJsZVtoYXNoXTtGUy5uYW1lVGFibGVbaGFzaF09bm9kZX0saGFzaFJlbW92ZU5vZGU6ZnVuY3Rpb24obm9kZSl7dmFyIGhhc2g9RlMuaGFzaE5hbWUobm9kZS5wYXJlbnQuaWQsbm9kZS5uYW1lKTtpZihGUy5uYW1lVGFibGVbaGFzaF09PT1ub2RlKXtGUy5uYW1lVGFibGVbaGFzaF09bm9kZS5uYW1lX25leHR9ZWxzZXt2YXIgY3VycmVudD1GUy5uYW1lVGFibGVbaGFzaF07d2hpbGUoY3VycmVudCl7aWYoY3VycmVudC5uYW1lX25leHQ9PT1ub2RlKXtjdXJyZW50Lm5hbWVfbmV4dD1ub2RlLm5hbWVfbmV4dDticmVha31jdXJyZW50PWN1cnJlbnQubmFtZV9uZXh0fX19LGxvb2t1cE5vZGU6ZnVuY3Rpb24ocGFyZW50LG5hbWUpe3ZhciBlcnJDb2RlPUZTLm1heUxvb2t1cChwYXJlbnQpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUscGFyZW50KX12YXIgaGFzaD1GUy5oYXNoTmFtZShwYXJlbnQuaWQsbmFtZSk7Zm9yKHZhciBub2RlPUZTLm5hbWVUYWJsZVtoYXNoXTtub2RlO25vZGU9bm9kZS5uYW1lX25leHQpe3ZhciBub2RlTmFtZT1ub2RlLm5hbWU7aWYobm9kZS5wYXJlbnQuaWQ9PT1wYXJlbnQuaWQmJm5vZGVOYW1lPT09bmFtZSl7cmV0dXJuIG5vZGV9fXJldHVybiBGUy5sb29rdXAocGFyZW50LG5hbWUpfSxjcmVhdGVOb2RlOmZ1bmN0aW9uKHBhcmVudCxuYW1lLG1vZGUscmRldil7dmFyIG5vZGU9bmV3IEZTLkZTTm9kZShwYXJlbnQsbmFtZSxtb2RlLHJkZXYpO0ZTLmhhc2hBZGROb2RlKG5vZGUpO3JldHVybiBub2RlfSxkZXN0cm95Tm9kZTpmdW5jdGlvbihub2RlKXtGUy5oYXNoUmVtb3ZlTm9kZShub2RlKX0saXNSb290OmZ1bmN0aW9uKG5vZGUpe3JldHVybiBub2RlPT09bm9kZS5wYXJlbnR9LGlzTW91bnRwb2ludDpmdW5jdGlvbihub2RlKXtyZXR1cm4hIW5vZGUubW91bnRlZH0saXNGaWxlOmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTMyNzY4fSxpc0RpcjpmdW5jdGlvbihtb2RlKXtyZXR1cm4obW9kZSY2MTQ0MCk9PT0xNjM4NH0saXNMaW5rOmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTQwOTYwfSxpc0NocmRldjpmdW5jdGlvbihtb2RlKXtyZXR1cm4obW9kZSY2MTQ0MCk9PT04MTkyfSxpc0Jsa2RldjpmdW5jdGlvbihtb2RlKXtyZXR1cm4obW9kZSY2MTQ0MCk9PT0yNDU3Nn0saXNGSUZPOmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTQwOTZ9LGlzU29ja2V0OmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjQ5MTUyKT09PTQ5MTUyfSxmbGFnTW9kZXM6e1wiclwiOjAsXCJyK1wiOjIsXCJ3XCI6NTc3LFwidytcIjo1NzgsXCJhXCI6MTA4OSxcImErXCI6MTA5MH0sbW9kZVN0cmluZ1RvRmxhZ3M6ZnVuY3Rpb24oc3RyKXt2YXIgZmxhZ3M9RlMuZmxhZ01vZGVzW3N0cl07aWYodHlwZW9mIGZsYWdzPT09XCJ1bmRlZmluZWRcIil7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBmaWxlIG9wZW4gbW9kZTogXCIrc3RyKX1yZXR1cm4gZmxhZ3N9LGZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nOmZ1bmN0aW9uKGZsYWcpe3ZhciBwZXJtcz1bXCJyXCIsXCJ3XCIsXCJyd1wiXVtmbGFnJjNdO2lmKGZsYWcmNTEyKXtwZXJtcys9XCJ3XCJ9cmV0dXJuIHBlcm1zfSxub2RlUGVybWlzc2lvbnM6ZnVuY3Rpb24obm9kZSxwZXJtcyl7aWYoRlMuaWdub3JlUGVybWlzc2lvbnMpe3JldHVybiAwfWlmKHBlcm1zLmluZGV4T2YoXCJyXCIpIT09LTEmJiEobm9kZS5tb2RlJjI5Mikpe3JldHVybiAyfWVsc2UgaWYocGVybXMuaW5kZXhPZihcIndcIikhPT0tMSYmIShub2RlLm1vZGUmMTQ2KSl7cmV0dXJuIDJ9ZWxzZSBpZihwZXJtcy5pbmRleE9mKFwieFwiKSE9PS0xJiYhKG5vZGUubW9kZSY3Mykpe3JldHVybiAyfXJldHVybiAwfSxtYXlMb29rdXA6ZnVuY3Rpb24oZGlyKXt2YXIgZXJyQ29kZT1GUy5ub2RlUGVybWlzc2lvbnMoZGlyLFwieFwiKTtpZihlcnJDb2RlKXJldHVybiBlcnJDb2RlO2lmKCFkaXIubm9kZV9vcHMubG9va3VwKXJldHVybiAyO3JldHVybiAwfSxtYXlDcmVhdGU6ZnVuY3Rpb24oZGlyLG5hbWUpe3RyeXt2YXIgbm9kZT1GUy5sb29rdXBOb2RlKGRpcixuYW1lKTtyZXR1cm4gMjB9Y2F0Y2goZSl7fXJldHVybiBGUy5ub2RlUGVybWlzc2lvbnMoZGlyLFwid3hcIil9LG1heURlbGV0ZTpmdW5jdGlvbihkaXIsbmFtZSxpc2Rpcil7dmFyIG5vZGU7dHJ5e25vZGU9RlMubG9va3VwTm9kZShkaXIsbmFtZSl9Y2F0Y2goZSl7cmV0dXJuIGUuZXJybm99dmFyIGVyckNvZGU9RlMubm9kZVBlcm1pc3Npb25zKGRpcixcInd4XCIpO2lmKGVyckNvZGUpe3JldHVybiBlcnJDb2RlfWlmKGlzZGlyKXtpZighRlMuaXNEaXIobm9kZS5tb2RlKSl7cmV0dXJuIDU0fWlmKEZTLmlzUm9vdChub2RlKXx8RlMuZ2V0UGF0aChub2RlKT09PUZTLmN3ZCgpKXtyZXR1cm4gMTB9fWVsc2V7aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7cmV0dXJuIDMxfX1yZXR1cm4gMH0sbWF5T3BlbjpmdW5jdGlvbihub2RlLGZsYWdzKXtpZighbm9kZSl7cmV0dXJuIDQ0fWlmKEZTLmlzTGluayhub2RlLm1vZGUpKXtyZXR1cm4gMzJ9ZWxzZSBpZihGUy5pc0Rpcihub2RlLm1vZGUpKXtpZihGUy5mbGFnc1RvUGVybWlzc2lvblN0cmluZyhmbGFncykhPT1cInJcInx8ZmxhZ3MmNTEyKXtyZXR1cm4gMzF9fXJldHVybiBGUy5ub2RlUGVybWlzc2lvbnMobm9kZSxGUy5mbGFnc1RvUGVybWlzc2lvblN0cmluZyhmbGFncykpfSxNQVhfT1BFTl9GRFM6NDA5NixuZXh0ZmQ6ZnVuY3Rpb24oZmRfc3RhcnQsZmRfZW5kKXtmZF9zdGFydD1mZF9zdGFydHx8MDtmZF9lbmQ9ZmRfZW5kfHxGUy5NQVhfT1BFTl9GRFM7Zm9yKHZhciBmZD1mZF9zdGFydDtmZDw9ZmRfZW5kO2ZkKyspe2lmKCFGUy5zdHJlYW1zW2ZkXSl7cmV0dXJuIGZkfX10aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMyl9LGdldFN0cmVhbTpmdW5jdGlvbihmZCl7cmV0dXJuIEZTLnN0cmVhbXNbZmRdfSxjcmVhdGVTdHJlYW06ZnVuY3Rpb24oc3RyZWFtLGZkX3N0YXJ0LGZkX2VuZCl7aWYoIUZTLkZTU3RyZWFtKXtGUy5GU1N0cmVhbT1mdW5jdGlvbigpe307RlMuRlNTdHJlYW0ucHJvdG90eXBlPXtvYmplY3Q6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGV9LHNldDpmdW5jdGlvbih2YWwpe3RoaXMubm9kZT12YWx9fSxpc1JlYWQ6e2dldDpmdW5jdGlvbigpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MX19LGlzV3JpdGU6e2dldDpmdW5jdGlvbigpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MH19LGlzQXBwZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFncyYxMDI0fX19fXZhciBuZXdTdHJlYW09bmV3IEZTLkZTU3RyZWFtO2Zvcih2YXIgcCBpbiBzdHJlYW0pe25ld1N0cmVhbVtwXT1zdHJlYW1bcF19c3RyZWFtPW5ld1N0cmVhbTt2YXIgZmQ9RlMubmV4dGZkKGZkX3N0YXJ0LGZkX2VuZCk7c3RyZWFtLmZkPWZkO0ZTLnN0cmVhbXNbZmRdPXN0cmVhbTtyZXR1cm4gc3RyZWFtfSxjbG9zZVN0cmVhbTpmdW5jdGlvbihmZCl7RlMuc3RyZWFtc1tmZF09bnVsbH0sY2hyZGV2X3N0cmVhbV9vcHM6e29wZW46ZnVuY3Rpb24oc3RyZWFtKXt2YXIgZGV2aWNlPUZTLmdldERldmljZShzdHJlYW0ubm9kZS5yZGV2KTtzdHJlYW0uc3RyZWFtX29wcz1kZXZpY2Uuc3RyZWFtX29wcztpZihzdHJlYW0uc3RyZWFtX29wcy5vcGVuKXtzdHJlYW0uc3RyZWFtX29wcy5vcGVuKHN0cmVhbSl9fSxsbHNlZWs6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3MCl9fSxtYWpvcjpmdW5jdGlvbihkZXYpe3JldHVybiBkZXY+Pjh9LG1pbm9yOmZ1bmN0aW9uKGRldil7cmV0dXJuIGRldiYyNTV9LG1ha2VkZXY6ZnVuY3Rpb24obWEsbWkpe3JldHVybiBtYTw8OHxtaX0scmVnaXN0ZXJEZXZpY2U6ZnVuY3Rpb24oZGV2LG9wcyl7RlMuZGV2aWNlc1tkZXZdPXtzdHJlYW1fb3BzOm9wc319LGdldERldmljZTpmdW5jdGlvbihkZXYpe3JldHVybiBGUy5kZXZpY2VzW2Rldl19LGdldE1vdW50czpmdW5jdGlvbihtb3VudCl7dmFyIG1vdW50cz1bXTt2YXIgY2hlY2s9W21vdW50XTt3aGlsZShjaGVjay5sZW5ndGgpe3ZhciBtPWNoZWNrLnBvcCgpO21vdW50cy5wdXNoKG0pO2NoZWNrLnB1c2guYXBwbHkoY2hlY2ssbS5tb3VudHMpfXJldHVybiBtb3VudHN9LHN5bmNmczpmdW5jdGlvbihwb3B1bGF0ZSxjYWxsYmFjayl7aWYodHlwZW9mIHBvcHVsYXRlPT09XCJmdW5jdGlvblwiKXtjYWxsYmFjaz1wb3B1bGF0ZTtwb3B1bGF0ZT1mYWxzZX1GUy5zeW5jRlNSZXF1ZXN0cysrO2lmKEZTLnN5bmNGU1JlcXVlc3RzPjEpe2VycihcIndhcm5pbmc6IFwiK0ZTLnN5bmNGU1JlcXVlc3RzK1wiIEZTLnN5bmNmcyBvcGVyYXRpb25zIGluIGZsaWdodCBhdCBvbmNlLCBwcm9iYWJseSBqdXN0IGRvaW5nIGV4dHJhIHdvcmtcIil9dmFyIG1vdW50cz1GUy5nZXRNb3VudHMoRlMucm9vdC5tb3VudCk7dmFyIGNvbXBsZXRlZD0wO2Z1bmN0aW9uIGRvQ2FsbGJhY2soZXJyQ29kZSl7RlMuc3luY0ZTUmVxdWVzdHMtLTtyZXR1cm4gY2FsbGJhY2soZXJyQ29kZSl9ZnVuY3Rpb24gZG9uZShlcnJDb2RlKXtpZihlcnJDb2RlKXtpZighZG9uZS5lcnJvcmVkKXtkb25lLmVycm9yZWQ9dHJ1ZTtyZXR1cm4gZG9DYWxsYmFjayhlcnJDb2RlKX1yZXR1cm59aWYoKytjb21wbGV0ZWQ+PW1vdW50cy5sZW5ndGgpe2RvQ2FsbGJhY2sobnVsbCl9fW1vdW50cy5mb3JFYWNoKGZ1bmN0aW9uKG1vdW50KXtpZighbW91bnQudHlwZS5zeW5jZnMpe3JldHVybiBkb25lKG51bGwpfW1vdW50LnR5cGUuc3luY2ZzKG1vdW50LHBvcHVsYXRlLGRvbmUpfSl9LG1vdW50OmZ1bmN0aW9uKHR5cGUsb3B0cyxtb3VudHBvaW50KXt2YXIgcm9vdD1tb3VudHBvaW50PT09XCIvXCI7dmFyIHBzZXVkbz0hbW91bnRwb2ludDt2YXIgbm9kZTtpZihyb290JiZGUy5yb290KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMCl9ZWxzZSBpZighcm9vdCYmIXBzZXVkbyl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG1vdW50cG9pbnQse2ZvbGxvd19tb3VudDpmYWxzZX0pO21vdW50cG9pbnQ9bG9va3VwLnBhdGg7bm9kZT1sb29rdXAubm9kZTtpZihGUy5pc01vdW50cG9pbnQobm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEwKX1pZighRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfX12YXIgbW91bnQ9e3R5cGU6dHlwZSxvcHRzOm9wdHMsbW91bnRwb2ludDptb3VudHBvaW50LG1vdW50czpbXX07dmFyIG1vdW50Um9vdD10eXBlLm1vdW50KG1vdW50KTttb3VudFJvb3QubW91bnQ9bW91bnQ7bW91bnQucm9vdD1tb3VudFJvb3Q7aWYocm9vdCl7RlMucm9vdD1tb3VudFJvb3R9ZWxzZSBpZihub2RlKXtub2RlLm1vdW50ZWQ9bW91bnQ7aWYobm9kZS5tb3VudCl7bm9kZS5tb3VudC5tb3VudHMucHVzaChtb3VudCl9fXJldHVybiBtb3VudFJvb3R9LHVubW91bnQ6ZnVuY3Rpb24obW91bnRwb2ludCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKG1vdW50cG9pbnQse2ZvbGxvd19tb3VudDpmYWxzZX0pO2lmKCFGUy5pc01vdW50cG9pbnQobG9va3VwLm5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIG5vZGU9bG9va3VwLm5vZGU7dmFyIG1vdW50PW5vZGUubW91bnRlZDt2YXIgbW91bnRzPUZTLmdldE1vdW50cyhtb3VudCk7T2JqZWN0LmtleXMoRlMubmFtZVRhYmxlKS5mb3JFYWNoKGZ1bmN0aW9uKGhhc2gpe3ZhciBjdXJyZW50PUZTLm5hbWVUYWJsZVtoYXNoXTt3aGlsZShjdXJyZW50KXt2YXIgbmV4dD1jdXJyZW50Lm5hbWVfbmV4dDtpZihtb3VudHMuaW5kZXhPZihjdXJyZW50Lm1vdW50KSE9PS0xKXtGUy5kZXN0cm95Tm9kZShjdXJyZW50KX1jdXJyZW50PW5leHR9fSk7bm9kZS5tb3VudGVkPW51bGw7dmFyIGlkeD1ub2RlLm1vdW50Lm1vdW50cy5pbmRleE9mKG1vdW50KTtub2RlLm1vdW50Lm1vdW50cy5zcGxpY2UoaWR4LDEpfSxsb29rdXA6ZnVuY3Rpb24ocGFyZW50LG5hbWUpe3JldHVybiBwYXJlbnQubm9kZV9vcHMubG9va3VwKHBhcmVudCxuYW1lKX0sbWtub2Q6ZnVuY3Rpb24ocGF0aCxtb2RlLGRldil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTt2YXIgbmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2lmKCFuYW1lfHxuYW1lPT09XCIuXCJ8fG5hbWU9PT1cIi4uXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgZXJyQ29kZT1GUy5tYXlDcmVhdGUocGFyZW50LG5hbWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMubWtub2Qpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1yZXR1cm4gcGFyZW50Lm5vZGVfb3BzLm1rbm9kKHBhcmVudCxuYW1lLG1vZGUsZGV2KX0sY3JlYXRlOmZ1bmN0aW9uKHBhdGgsbW9kZSl7bW9kZT1tb2RlIT09dW5kZWZpbmVkP21vZGU6NDM4O21vZGUmPTQwOTU7bW9kZXw9MzI3Njg7cmV0dXJuIEZTLm1rbm9kKHBhdGgsbW9kZSwwKX0sbWtkaXI6ZnVuY3Rpb24ocGF0aCxtb2RlKXttb2RlPW1vZGUhPT11bmRlZmluZWQ/bW9kZTo1MTE7bW9kZSY9NTExfDUxMjttb2RlfD0xNjM4NDtyZXR1cm4gRlMubWtub2QocGF0aCxtb2RlLDApfSxta2RpclRyZWU6ZnVuY3Rpb24ocGF0aCxtb2RlKXt2YXIgZGlycz1wYXRoLnNwbGl0KFwiL1wiKTt2YXIgZD1cIlwiO2Zvcih2YXIgaT0wO2k8ZGlycy5sZW5ndGg7KytpKXtpZighZGlyc1tpXSljb250aW51ZTtkKz1cIi9cIitkaXJzW2ldO3RyeXtGUy5ta2RpcihkLG1vZGUpfWNhdGNoKGUpe2lmKGUuZXJybm8hPTIwKXRocm93IGV9fX0sbWtkZXY6ZnVuY3Rpb24ocGF0aCxtb2RlLGRldil7aWYodHlwZW9mIGRldj09PVwidW5kZWZpbmVkXCIpe2Rldj1tb2RlO21vZGU9NDM4fW1vZGV8PTgxOTI7cmV0dXJuIEZTLm1rbm9kKHBhdGgsbW9kZSxkZXYpfSxzeW1saW5rOmZ1bmN0aW9uKG9sZHBhdGgsbmV3cGF0aCl7aWYoIVBBVEhfRlMucmVzb2x2ZShvbGRwYXRoKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfXZhciBsb29rdXA9RlMubG9va3VwUGF0aChuZXdwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3ZhciBwYXJlbnQ9bG9va3VwLm5vZGU7aWYoIXBhcmVudCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfXZhciBuZXduYW1lPVBBVEguYmFzZW5hbWUobmV3cGF0aCk7dmFyIGVyckNvZGU9RlMubWF5Q3JlYXRlKHBhcmVudCxuZXduYW1lKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLnN5bWxpbmspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1yZXR1cm4gcGFyZW50Lm5vZGVfb3BzLnN5bWxpbmsocGFyZW50LG5ld25hbWUsb2xkcGF0aCl9LHJlbmFtZTpmdW5jdGlvbihvbGRfcGF0aCxuZXdfcGF0aCl7dmFyIG9sZF9kaXJuYW1lPVBBVEguZGlybmFtZShvbGRfcGF0aCk7dmFyIG5ld19kaXJuYW1lPVBBVEguZGlybmFtZShuZXdfcGF0aCk7dmFyIG9sZF9uYW1lPVBBVEguYmFzZW5hbWUob2xkX3BhdGgpO3ZhciBuZXdfbmFtZT1QQVRILmJhc2VuYW1lKG5ld19wYXRoKTt2YXIgbG9va3VwLG9sZF9kaXIsbmV3X2Rpcjtsb29rdXA9RlMubG9va3VwUGF0aChvbGRfcGF0aCx7cGFyZW50OnRydWV9KTtvbGRfZGlyPWxvb2t1cC5ub2RlO2xvb2t1cD1GUy5sb29rdXBQYXRoKG5ld19wYXRoLHtwYXJlbnQ6dHJ1ZX0pO25ld19kaXI9bG9va3VwLm5vZGU7aWYoIW9sZF9kaXJ8fCFuZXdfZGlyKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KTtpZihvbGRfZGlyLm1vdW50IT09bmV3X2Rpci5tb3VudCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzUpfXZhciBvbGRfbm9kZT1GUy5sb29rdXBOb2RlKG9sZF9kaXIsb2xkX25hbWUpO3ZhciByZWxhdGl2ZT1QQVRIX0ZTLnJlbGF0aXZlKG9sZF9wYXRoLG5ld19kaXJuYW1lKTtpZihyZWxhdGl2ZS5jaGFyQXQoMCkhPT1cIi5cIil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXJlbGF0aXZlPVBBVEhfRlMucmVsYXRpdmUobmV3X3BhdGgsb2xkX2Rpcm5hbWUpO2lmKHJlbGF0aXZlLmNoYXJBdCgwKSE9PVwiLlwiKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NSl9dmFyIG5ld19ub2RlO3RyeXtuZXdfbm9kZT1GUy5sb29rdXBOb2RlKG5ld19kaXIsbmV3X25hbWUpfWNhdGNoKGUpe31pZihvbGRfbm9kZT09PW5ld19ub2RlKXtyZXR1cm59dmFyIGlzZGlyPUZTLmlzRGlyKG9sZF9ub2RlLm1vZGUpO3ZhciBlcnJDb2RlPUZTLm1heURlbGV0ZShvbGRfZGlyLG9sZF9uYW1lLGlzZGlyKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1lcnJDb2RlPW5ld19ub2RlP0ZTLm1heURlbGV0ZShuZXdfZGlyLG5ld19uYW1lLGlzZGlyKTpGUy5tYXlDcmVhdGUobmV3X2RpcixuZXdfbmFtZSk7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9aWYoIW9sZF9kaXIubm9kZV9vcHMucmVuYW1lKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9aWYoRlMuaXNNb3VudHBvaW50KG9sZF9ub2RlKXx8bmV3X25vZGUmJkZTLmlzTW91bnRwb2ludChuZXdfbm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEwKX1pZihuZXdfZGlyIT09b2xkX2Rpcil7ZXJyQ29kZT1GUy5ub2RlUGVybWlzc2lvbnMob2xkX2RpcixcIndcIik7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9fXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbE1vdmVQYXRoXCJdKXtGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbE1vdmVQYXRoXCJdKG9sZF9wYXRoLG5ld19wYXRoKX19Y2F0Y2goZSl7ZXJyKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbE1vdmVQYXRoJ10oJ1wiK29sZF9wYXRoK1wiJywgJ1wiK25ld19wYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfUZTLmhhc2hSZW1vdmVOb2RlKG9sZF9ub2RlKTt0cnl7b2xkX2Rpci5ub2RlX29wcy5yZW5hbWUob2xkX25vZGUsbmV3X2RpcixuZXdfbmFtZSl9Y2F0Y2goZSl7dGhyb3cgZX1maW5hbGx5e0ZTLmhhc2hBZGROb2RlKG9sZF9ub2RlKX10cnl7aWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uTW92ZVBhdGhcIl0pRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uTW92ZVBhdGhcIl0ob2xkX3BhdGgsbmV3X3BhdGgpfWNhdGNoKGUpe2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uTW92ZVBhdGgnXSgnXCIrb2xkX3BhdGgrXCInLCAnXCIrbmV3X3BhdGgrXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK2UubWVzc2FnZSl9fSxybWRpcjpmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTt2YXIgcGFyZW50PWxvb2t1cC5ub2RlO3ZhciBuYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7dmFyIGVyckNvZGU9RlMubWF5RGVsZXRlKHBhcmVudCxuYW1lLHRydWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMucm1kaXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1pZihGUy5pc01vdW50cG9pbnQobm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEwKX10cnl7aWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIndpbGxEZWxldGVQYXRoXCJdKXtGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbERlbGV0ZVBhdGhcIl0ocGF0aCl9fWNhdGNoKGUpe2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ3dpbGxEZWxldGVQYXRoJ10oJ1wiK3BhdGgrXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK2UubWVzc2FnZSl9cGFyZW50Lm5vZGVfb3BzLnJtZGlyKHBhcmVudCxuYW1lKTtGUy5kZXN0cm95Tm9kZShub2RlKTt0cnl7aWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uRGVsZXRlUGF0aFwiXSlGUy50cmFja2luZ0RlbGVnYXRlW1wib25EZWxldGVQYXRoXCJdKHBhdGgpfWNhdGNoKGUpe2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uRGVsZXRlUGF0aCddKCdcIitwYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfX0scmVhZGRpcjpmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtpZighbm9kZS5ub2RlX29wcy5yZWFkZGlyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9cmV0dXJuIG5vZGUubm9kZV9vcHMucmVhZGRpcihub2RlKX0sdW5saW5rOmZ1bmN0aW9uKHBhdGgpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3ZhciBwYXJlbnQ9bG9va3VwLm5vZGU7dmFyIG5hbWU9UEFUSC5iYXNlbmFtZShwYXRoKTt2YXIgbm9kZT1GUy5sb29rdXBOb2RlKHBhcmVudCxuYW1lKTt2YXIgZXJyQ29kZT1GUy5tYXlEZWxldGUocGFyZW50LG5hbWUsZmFsc2UpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFwYXJlbnQubm9kZV9vcHMudW5saW5rKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9aWYoRlMuaXNNb3VudHBvaW50KG5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMCl9dHJ5e2lmKEZTLnRyYWNraW5nRGVsZWdhdGVbXCJ3aWxsRGVsZXRlUGF0aFwiXSl7RlMudHJhY2tpbmdEZWxlZ2F0ZVtcIndpbGxEZWxldGVQYXRoXCJdKHBhdGgpfX1jYXRjaChlKXtlcnIoXCJGUy50cmFja2luZ0RlbGVnYXRlWyd3aWxsRGVsZXRlUGF0aCddKCdcIitwYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfXBhcmVudC5ub2RlX29wcy51bmxpbmsocGFyZW50LG5hbWUpO0ZTLmRlc3Ryb3lOb2RlKG5vZGUpO3RyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wib25EZWxldGVQYXRoXCJdKUZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbkRlbGV0ZVBhdGhcIl0ocGF0aCl9Y2F0Y2goZSl7ZXJyKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25EZWxldGVQYXRoJ10oJ1wiK3BhdGgrXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK2UubWVzc2FnZSl9fSxyZWFkbGluazpmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCk7dmFyIGxpbms9bG9va3VwLm5vZGU7aWYoIWxpbmspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1pZighbGluay5ub2RlX29wcy5yZWFkbGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXJldHVybiBQQVRIX0ZTLnJlc29sdmUoRlMuZ2V0UGF0aChsaW5rLnBhcmVudCksbGluay5ub2RlX29wcy5yZWFkbGluayhsaW5rKSl9LHN0YXQ6ZnVuY3Rpb24ocGF0aCxkb250Rm9sbG93KXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250Rm9sbG93fSk7dmFyIG5vZGU9bG9va3VwLm5vZGU7aWYoIW5vZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1pZighbm9kZS5ub2RlX29wcy5nZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9cmV0dXJuIG5vZGUubm9kZV9vcHMuZ2V0YXR0cihub2RlKX0sbHN0YXQ6ZnVuY3Rpb24ocGF0aCl7cmV0dXJuIEZTLnN0YXQocGF0aCx0cnVlKX0sY2htb2Q6ZnVuY3Rpb24ocGF0aCxtb2RlLGRvbnRGb2xsb3cpe3ZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT09XCJzdHJpbmdcIil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udEZvbGxvd30pO25vZGU9bG9va3VwLm5vZGV9ZWxzZXtub2RlPXBhdGh9aWYoIW5vZGUubm9kZV9vcHMuc2V0YXR0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfW5vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLHttb2RlOm1vZGUmNDA5NXxub2RlLm1vZGUmfjQwOTUsdGltZXN0YW1wOkRhdGUubm93KCl9KX0sbGNobW9kOmZ1bmN0aW9uKHBhdGgsbW9kZSl7RlMuY2htb2QocGF0aCxtb2RlLHRydWUpfSxmY2htb2Q6ZnVuY3Rpb24oZmQsbW9kZSl7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW0oZmQpO2lmKCFzdHJlYW0pe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfUZTLmNobW9kKHN0cmVhbS5ub2RlLG1vZGUpfSxjaG93bjpmdW5jdGlvbihwYXRoLHVpZCxnaWQsZG9udEZvbGxvdyl7dmFyIG5vZGU7aWYodHlwZW9mIHBhdGg9PT1cInN0cmluZ1wiKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OiFkb250Rm9sbG93fSk7bm9kZT1sb29rdXAubm9kZX1lbHNle25vZGU9cGF0aH1pZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9bm9kZS5ub2RlX29wcy5zZXRhdHRyKG5vZGUse3RpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG93bjpmdW5jdGlvbihwYXRoLHVpZCxnaWQpe0ZTLmNob3duKHBhdGgsdWlkLGdpZCx0cnVlKX0sZmNob3duOmZ1bmN0aW9uKGZkLHVpZCxnaWQpe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1GUy5jaG93bihzdHJlYW0ubm9kZSx1aWQsZ2lkKX0sdHJ1bmNhdGU6ZnVuY3Rpb24ocGF0aCxsZW4pe2lmKGxlbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIG5vZGU7aWYodHlwZW9mIHBhdGg9PT1cInN0cmluZ1wiKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTtub2RlPWxvb2t1cC5ub2RlfWVsc2V7bm9kZT1wYXRofWlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1pZihGUy5pc0Rpcihub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMSl9aWYoIUZTLmlzRmlsZShub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIGVyckNvZGU9RlMubm9kZVBlcm1pc3Npb25zKG5vZGUsXCJ3XCIpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfW5vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLHtzaXplOmxlbix0aW1lc3RhbXA6RGF0ZS5ub3coKX0pfSxmdHJ1bmNhdGU6ZnVuY3Rpb24oZmQsbGVuKXt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbShmZCk7aWYoIXN0cmVhbSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1GUy50cnVuY2F0ZShzdHJlYW0ubm9kZSxsZW4pfSx1dGltZTpmdW5jdGlvbihwYXRoLGF0aW1lLG10aW1lKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTt2YXIgbm9kZT1sb29rdXAubm9kZTtub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7dGltZXN0YW1wOk1hdGgubWF4KGF0aW1lLG10aW1lKX0pfSxvcGVuOmZ1bmN0aW9uKHBhdGgsZmxhZ3MsbW9kZSxmZF9zdGFydCxmZF9lbmQpe2lmKHBhdGg9PT1cIlwiKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9ZmxhZ3M9dHlwZW9mIGZsYWdzPT09XCJzdHJpbmdcIj9GUy5tb2RlU3RyaW5nVG9GbGFncyhmbGFncyk6ZmxhZ3M7bW9kZT10eXBlb2YgbW9kZT09PVwidW5kZWZpbmVkXCI/NDM4Om1vZGU7aWYoZmxhZ3MmNjQpe21vZGU9bW9kZSY0MDk1fDMyNzY4fWVsc2V7bW9kZT0wfXZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT09XCJvYmplY3RcIil7bm9kZT1wYXRofWVsc2V7cGF0aD1QQVRILm5vcm1hbGl6ZShwYXRoKTt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohKGZsYWdzJjEzMTA3Mil9KTtub2RlPWxvb2t1cC5ub2RlfWNhdGNoKGUpe319dmFyIGNyZWF0ZWQ9ZmFsc2U7aWYoZmxhZ3MmNjQpe2lmKG5vZGUpe2lmKGZsYWdzJjEyOCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjApfX1lbHNle25vZGU9RlMubWtub2QocGF0aCxtb2RlLDApO2NyZWF0ZWQ9dHJ1ZX19aWYoIW5vZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1pZihGUy5pc0NocmRldihub2RlLm1vZGUpKXtmbGFncyY9fjUxMn1pZihmbGFncyY2NTUzNiYmIUZTLmlzRGlyKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU0KX1pZighY3JlYXRlZCl7dmFyIGVyckNvZGU9RlMubWF5T3Blbihub2RlLGZsYWdzKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX19aWYoZmxhZ3MmNTEyKXtGUy50cnVuY2F0ZShub2RlLDApfWZsYWdzJj1+KDEyOHw1MTJ8MTMxMDcyKTt2YXIgc3RyZWFtPUZTLmNyZWF0ZVN0cmVhbSh7bm9kZTpub2RlLHBhdGg6RlMuZ2V0UGF0aChub2RlKSxmbGFnczpmbGFncyxzZWVrYWJsZTp0cnVlLHBvc2l0aW9uOjAsc3RyZWFtX29wczpub2RlLnN0cmVhbV9vcHMsdW5nb3R0ZW46W10sZXJyb3I6ZmFsc2V9LGZkX3N0YXJ0LGZkX2VuZCk7aWYoc3RyZWFtLnN0cmVhbV9vcHMub3Blbil7c3RyZWFtLnN0cmVhbV9vcHMub3BlbihzdHJlYW0pfWlmKE1vZHVsZVtcImxvZ1JlYWRGaWxlc1wiXSYmIShmbGFncyYxKSl7aWYoIUZTLnJlYWRGaWxlcylGUy5yZWFkRmlsZXM9e307aWYoIShwYXRoIGluIEZTLnJlYWRGaWxlcykpe0ZTLnJlYWRGaWxlc1twYXRoXT0xO2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGUgZXJyb3Igb24gcmVhZCBmaWxlOiBcIitwYXRoKX19dHJ5e2lmKEZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbk9wZW5GaWxlXCJdKXt2YXIgdHJhY2tpbmdGbGFncz0wO2lmKChmbGFncyYyMDk3MTU1KSE9PTEpe3RyYWNraW5nRmxhZ3N8PUZTLnRyYWNraW5nLm9wZW5GbGFncy5SRUFEfWlmKChmbGFncyYyMDk3MTU1KSE9PTApe3RyYWNraW5nRmxhZ3N8PUZTLnRyYWNraW5nLm9wZW5GbGFncy5XUklURX1GUy50cmFja2luZ0RlbGVnYXRlW1wib25PcGVuRmlsZVwiXShwYXRoLHRyYWNraW5nRmxhZ3MpfX1jYXRjaChlKXtlcnIoXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbk9wZW5GaWxlJ10oJ1wiK3BhdGgrXCInLCBmbGFncykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfXJldHVybiBzdHJlYW19LGNsb3NlOmZ1bmN0aW9uKHN0cmVhbSl7aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoc3RyZWFtLmdldGRlbnRzKXN0cmVhbS5nZXRkZW50cz1udWxsO3RyeXtpZihzdHJlYW0uc3RyZWFtX29wcy5jbG9zZSl7c3RyZWFtLnN0cmVhbV9vcHMuY2xvc2Uoc3RyZWFtKX19Y2F0Y2goZSl7dGhyb3cgZX1maW5hbGx5e0ZTLmNsb3NlU3RyZWFtKHN0cmVhbS5mZCl9c3RyZWFtLmZkPW51bGx9LGlzQ2xvc2VkOmZ1bmN0aW9uKHN0cmVhbSl7cmV0dXJuIHN0cmVhbS5mZD09PW51bGx9LGxsc2VlazpmdW5jdGlvbihzdHJlYW0sb2Zmc2V0LHdoZW5jZSl7aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoIXN0cmVhbS5zZWVrYWJsZXx8IXN0cmVhbS5zdHJlYW1fb3BzLmxsc2Vlayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzApfWlmKHdoZW5jZSE9MCYmd2hlbmNlIT0xJiZ3aGVuY2UhPTIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1zdHJlYW0ucG9zaXRpb249c3RyZWFtLnN0cmVhbV9vcHMubGxzZWVrKHN0cmVhbSxvZmZzZXQsd2hlbmNlKTtzdHJlYW0udW5nb3R0ZW49W107cmV0dXJuIHN0cmVhbS5wb3NpdGlvbn0scmVhZDpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe2lmKGxlbmd0aDwwfHxwb3NpdGlvbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTEpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKEZTLmlzRGlyKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMSl9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLnJlYWQpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgc2Vla2luZz10eXBlb2YgcG9zaXRpb24hPT1cInVuZGVmaW5lZFwiO2lmKCFzZWVraW5nKXtwb3NpdGlvbj1zdHJlYW0ucG9zaXRpb259ZWxzZSBpZighc3RyZWFtLnNlZWthYmxlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig3MCl9dmFyIGJ5dGVzUmVhZD1zdHJlYW0uc3RyZWFtX29wcy5yZWFkKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbik7aWYoIXNlZWtpbmcpc3RyZWFtLnBvc2l0aW9uKz1ieXRlc1JlYWQ7cmV0dXJuIGJ5dGVzUmVhZH0sd3JpdGU6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bil7aWYobGVuZ3RoPDB8fHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZihGUy5pc0Nsb3NlZChzdHJlYW0pKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMxKX1pZighc3RyZWFtLnN0cmVhbV9vcHMud3JpdGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZihzdHJlYW0uc2Vla2FibGUmJnN0cmVhbS5mbGFncyYxMDI0KXtGUy5sbHNlZWsoc3RyZWFtLDAsMil9dmFyIHNlZWtpbmc9dHlwZW9mIHBvc2l0aW9uIT09XCJ1bmRlZmluZWRcIjtpZighc2Vla2luZyl7cG9zaXRpb249c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzApfXZhciBieXRlc1dyaXR0ZW49c3RyZWFtLnN0cmVhbV9vcHMud3JpdGUoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bik7aWYoIXNlZWtpbmcpc3RyZWFtLnBvc2l0aW9uKz1ieXRlc1dyaXR0ZW47dHJ5e2lmKHN0cmVhbS5wYXRoJiZGUy50cmFja2luZ0RlbGVnYXRlW1wib25Xcml0ZVRvRmlsZVwiXSlGUy50cmFja2luZ0RlbGVnYXRlW1wib25Xcml0ZVRvRmlsZVwiXShzdHJlYW0ucGF0aCl9Y2F0Y2goZSl7ZXJyKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25Xcml0ZVRvRmlsZSddKCdcIitzdHJlYW0ucGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX1yZXR1cm4gYnl0ZXNXcml0dGVufSxhbGxvY2F0ZTpmdW5jdGlvbihzdHJlYW0sb2Zmc2V0LGxlbmd0aCl7aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYob2Zmc2V0PDB8fGxlbmd0aDw9MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpJiYhRlMuaXNEaXIoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQzKX1pZighc3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEzOCl9c3RyZWFtLnN0cmVhbV9vcHMuYWxsb2NhdGUoc3RyZWFtLG9mZnNldCxsZW5ndGgpfSxtbWFwOmZ1bmN0aW9uKHN0cmVhbSxhZGRyZXNzLGxlbmd0aCxwb3NpdGlvbixwcm90LGZsYWdzKXtpZigocHJvdCYyKSE9PTAmJihmbGFncyYyKT09PTAmJihzdHJlYW0uZmxhZ3MmMjA5NzE1NSkhPT0yKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyKX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMil9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLm1tYXApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQzKX1yZXR1cm4gc3RyZWFtLnN0cmVhbV9vcHMubW1hcChzdHJlYW0sYWRkcmVzcyxsZW5ndGgscG9zaXRpb24scHJvdCxmbGFncyl9LG1zeW5jOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxtbWFwRmxhZ3Mpe2lmKCFzdHJlYW18fCFzdHJlYW0uc3RyZWFtX29wcy5tc3luYyl7cmV0dXJuIDB9cmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLm1zeW5jKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxtbWFwRmxhZ3MpfSxtdW5tYXA6ZnVuY3Rpb24oc3RyZWFtKXtyZXR1cm4gMH0saW9jdGw6ZnVuY3Rpb24oc3RyZWFtLGNtZCxhcmcpe2lmKCFzdHJlYW0uc3RyZWFtX29wcy5pb2N0bCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTkpfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5pb2N0bChzdHJlYW0sY21kLGFyZyl9LHJlYWRGaWxlOmZ1bmN0aW9uKHBhdGgsb3B0cyl7b3B0cz1vcHRzfHx7fTtvcHRzLmZsYWdzPW9wdHMuZmxhZ3N8fDA7b3B0cy5lbmNvZGluZz1vcHRzLmVuY29kaW5nfHxcImJpbmFyeVwiO2lmKG9wdHMuZW5jb2RpbmchPT1cInV0ZjhcIiYmb3B0cy5lbmNvZGluZyE9PVwiYmluYXJ5XCIpe3Rocm93IG5ldyBFcnJvcignSW52YWxpZCBlbmNvZGluZyB0eXBlIFwiJytvcHRzLmVuY29kaW5nKydcIicpfXZhciByZXQ7dmFyIHN0cmVhbT1GUy5vcGVuKHBhdGgsb3B0cy5mbGFncyk7dmFyIHN0YXQ9RlMuc3RhdChwYXRoKTt2YXIgbGVuZ3RoPXN0YXQuc2l6ZTt2YXIgYnVmPW5ldyBVaW50OEFycmF5KGxlbmd0aCk7RlMucmVhZChzdHJlYW0sYnVmLDAsbGVuZ3RoLDApO2lmKG9wdHMuZW5jb2Rpbmc9PT1cInV0ZjhcIil7cmV0PVVURjhBcnJheVRvU3RyaW5nKGJ1ZiwwKX1lbHNlIGlmKG9wdHMuZW5jb2Rpbmc9PT1cImJpbmFyeVwiKXtyZXQ9YnVmfUZTLmNsb3NlKHN0cmVhbSk7cmV0dXJuIHJldH0sd3JpdGVGaWxlOmZ1bmN0aW9uKHBhdGgsZGF0YSxvcHRzKXtvcHRzPW9wdHN8fHt9O29wdHMuZmxhZ3M9b3B0cy5mbGFnc3x8NTc3O3ZhciBzdHJlYW09RlMub3BlbihwYXRoLG9wdHMuZmxhZ3Msb3B0cy5tb2RlKTtpZih0eXBlb2YgZGF0YT09PVwic3RyaW5nXCIpe3ZhciBidWY9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoQnl0ZXNVVEY4KGRhdGEpKzEpO3ZhciBhY3R1YWxOdW1CeXRlcz1zdHJpbmdUb1VURjhBcnJheShkYXRhLGJ1ZiwwLGJ1Zi5sZW5ndGgpO0ZTLndyaXRlKHN0cmVhbSxidWYsMCxhY3R1YWxOdW1CeXRlcyx1bmRlZmluZWQsb3B0cy5jYW5Pd24pfWVsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKXtGUy53cml0ZShzdHJlYW0sZGF0YSwwLGRhdGEuYnl0ZUxlbmd0aCx1bmRlZmluZWQsb3B0cy5jYW5Pd24pfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlXCIpfUZTLmNsb3NlKHN0cmVhbSl9LGN3ZDpmdW5jdGlvbigpe3JldHVybiBGUy5jdXJyZW50UGF0aH0sY2hkaXI6ZnVuY3Rpb24ocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7aWYobG9va3VwLm5vZGU9PT1udWxsKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoIUZTLmlzRGlyKGxvb2t1cC5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9dmFyIGVyckNvZGU9RlMubm9kZVBlcm1pc3Npb25zKGxvb2t1cC5ub2RlLFwieFwiKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1GUy5jdXJyZW50UGF0aD1sb29rdXAucGF0aH0sY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzOmZ1bmN0aW9uKCl7RlMubWtkaXIoXCIvdG1wXCIpO0ZTLm1rZGlyKFwiL2hvbWVcIik7RlMubWtkaXIoXCIvaG9tZS93ZWJfdXNlclwiKX0sY3JlYXRlRGVmYXVsdERldmljZXM6ZnVuY3Rpb24oKXtGUy5ta2RpcihcIi9kZXZcIik7RlMucmVnaXN0ZXJEZXZpY2UoRlMubWFrZWRldigxLDMpLHtyZWFkOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LHdyaXRlOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe3JldHVybiBsZW5ndGh9fSk7RlMubWtkZXYoXCIvZGV2L251bGxcIixGUy5tYWtlZGV2KDEsMykpO1RUWS5yZWdpc3RlcihGUy5tYWtlZGV2KDUsMCksVFRZLmRlZmF1bHRfdHR5X29wcyk7VFRZLnJlZ2lzdGVyKEZTLm1ha2VkZXYoNiwwKSxUVFkuZGVmYXVsdF90dHkxX29wcyk7RlMubWtkZXYoXCIvZGV2L3R0eVwiLEZTLm1ha2VkZXYoNSwwKSk7RlMubWtkZXYoXCIvZGV2L3R0eTFcIixGUy5tYWtlZGV2KDYsMCkpO3ZhciByYW5kb21fZGV2aWNlPWdldFJhbmRvbURldmljZSgpO0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInJhbmRvbVwiLHJhbmRvbV9kZXZpY2UpO0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInVyYW5kb21cIixyYW5kb21fZGV2aWNlKTtGUy5ta2RpcihcIi9kZXYvc2htXCIpO0ZTLm1rZGlyKFwiL2Rldi9zaG0vdG1wXCIpfSxjcmVhdGVTcGVjaWFsRGlyZWN0b3JpZXM6ZnVuY3Rpb24oKXtGUy5ta2RpcihcIi9wcm9jXCIpO3ZhciBwcm9jX3NlbGY9RlMubWtkaXIoXCIvcHJvYy9zZWxmXCIpO0ZTLm1rZGlyKFwiL3Byb2Mvc2VsZi9mZFwiKTtGUy5tb3VudCh7bW91bnQ6ZnVuY3Rpb24oKXt2YXIgbm9kZT1GUy5jcmVhdGVOb2RlKHByb2Nfc2VsZixcImZkXCIsMTYzODR8NTExLDczKTtub2RlLm5vZGVfb3BzPXtsb29rdXA6ZnVuY3Rpb24ocGFyZW50LG5hbWUpe3ZhciBmZD0rbmFtZTt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbShmZCk7aWYoIXN0cmVhbSl0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KTt2YXIgcmV0PXtwYXJlbnQ6bnVsbCxtb3VudDp7bW91bnRwb2ludDpcImZha2VcIn0sbm9kZV9vcHM6e3JlYWRsaW5rOmZ1bmN0aW9uKCl7cmV0dXJuIHN0cmVhbS5wYXRofX19O3JldC5wYXJlbnQ9cmV0O3JldHVybiByZXR9fTtyZXR1cm4gbm9kZX19LHt9LFwiL3Byb2Mvc2VsZi9mZFwiKX0sY3JlYXRlU3RhbmRhcmRTdHJlYW1zOmZ1bmN0aW9uKCl7aWYoTW9kdWxlW1wic3RkaW5cIl0pe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZGluXCIsTW9kdWxlW1wic3RkaW5cIl0pfWVsc2V7RlMuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZGluXCIpfWlmKE1vZHVsZVtcInN0ZG91dFwiXSl7RlMuY3JlYXRlRGV2aWNlKFwiL2RldlwiLFwic3Rkb3V0XCIsbnVsbCxNb2R1bGVbXCJzdGRvdXRcIl0pfWVsc2V7RlMuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZG91dFwiKX1pZihNb2R1bGVbXCJzdGRlcnJcIl0pe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZGVyclwiLG51bGwsTW9kdWxlW1wic3RkZXJyXCJdKX1lbHNle0ZTLnN5bWxpbmsoXCIvZGV2L3R0eTFcIixcIi9kZXYvc3RkZXJyXCIpfXZhciBzdGRpbj1GUy5vcGVuKFwiL2Rldi9zdGRpblwiLDApO3ZhciBzdGRvdXQ9RlMub3BlbihcIi9kZXYvc3Rkb3V0XCIsMSk7dmFyIHN0ZGVycj1GUy5vcGVuKFwiL2Rldi9zdGRlcnJcIiwxKX0sZW5zdXJlRXJybm9FcnJvcjpmdW5jdGlvbigpe2lmKEZTLkVycm5vRXJyb3IpcmV0dXJuO0ZTLkVycm5vRXJyb3I9ZnVuY3Rpb24gRXJybm9FcnJvcihlcnJubyxub2RlKXt0aGlzLm5vZGU9bm9kZTt0aGlzLnNldEVycm5vPWZ1bmN0aW9uKGVycm5vKXt0aGlzLmVycm5vPWVycm5vfTt0aGlzLnNldEVycm5vKGVycm5vKTt0aGlzLm1lc3NhZ2U9XCJGUyBlcnJvclwifTtGUy5FcnJub0Vycm9yLnByb3RvdHlwZT1uZXcgRXJyb3I7RlMuRXJybm9FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3I9RlMuRXJybm9FcnJvcjtbNDRdLmZvckVhY2goZnVuY3Rpb24oY29kZSl7RlMuZ2VuZXJpY0Vycm9yc1tjb2RlXT1uZXcgRlMuRXJybm9FcnJvcihjb2RlKTtGUy5nZW5lcmljRXJyb3JzW2NvZGVdLnN0YWNrPVwiPGdlbmVyaWMgZXJyb3IsIG5vIHN0YWNrPlwifSl9LHN0YXRpY0luaXQ6ZnVuY3Rpb24oKXtGUy5lbnN1cmVFcnJub0Vycm9yKCk7RlMubmFtZVRhYmxlPW5ldyBBcnJheSg0MDk2KTtGUy5tb3VudChNRU1GUyx7fSxcIi9cIik7RlMuY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzKCk7RlMuY3JlYXRlRGVmYXVsdERldmljZXMoKTtGUy5jcmVhdGVTcGVjaWFsRGlyZWN0b3JpZXMoKTtGUy5maWxlc3lzdGVtcz17XCJNRU1GU1wiOk1FTUZTfX0saW5pdDpmdW5jdGlvbihpbnB1dCxvdXRwdXQsZXJyb3Ipe0ZTLmluaXQuaW5pdGlhbGl6ZWQ9dHJ1ZTtGUy5lbnN1cmVFcnJub0Vycm9yKCk7TW9kdWxlW1wic3RkaW5cIl09aW5wdXR8fE1vZHVsZVtcInN0ZGluXCJdO01vZHVsZVtcInN0ZG91dFwiXT1vdXRwdXR8fE1vZHVsZVtcInN0ZG91dFwiXTtNb2R1bGVbXCJzdGRlcnJcIl09ZXJyb3J8fE1vZHVsZVtcInN0ZGVyclwiXTtGUy5jcmVhdGVTdGFuZGFyZFN0cmVhbXMoKX0scXVpdDpmdW5jdGlvbigpe0ZTLmluaXQuaW5pdGlhbGl6ZWQ9ZmFsc2U7dmFyIGZmbHVzaD1Nb2R1bGVbXCJfZmZsdXNoXCJdO2lmKGZmbHVzaClmZmx1c2goMCk7Zm9yKHZhciBpPTA7aTxGUy5zdHJlYW1zLmxlbmd0aDtpKyspe3ZhciBzdHJlYW09RlMuc3RyZWFtc1tpXTtpZighc3RyZWFtKXtjb250aW51ZX1GUy5jbG9zZShzdHJlYW0pfX0sZ2V0TW9kZTpmdW5jdGlvbihjYW5SZWFkLGNhbldyaXRlKXt2YXIgbW9kZT0wO2lmKGNhblJlYWQpbW9kZXw9MjkyfDczO2lmKGNhbldyaXRlKW1vZGV8PTE0NjtyZXR1cm4gbW9kZX0sZmluZE9iamVjdDpmdW5jdGlvbihwYXRoLGRvbnRSZXNvbHZlTGFzdExpbmspe3ZhciByZXQ9RlMuYW5hbHl6ZVBhdGgocGF0aCxkb250UmVzb2x2ZUxhc3RMaW5rKTtpZihyZXQuZXhpc3RzKXtyZXR1cm4gcmV0Lm9iamVjdH1lbHNle3JldHVybiBudWxsfX0sYW5hbHl6ZVBhdGg6ZnVuY3Rpb24ocGF0aCxkb250UmVzb2x2ZUxhc3RMaW5rKXt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udFJlc29sdmVMYXN0TGlua30pO3BhdGg9bG9va3VwLnBhdGh9Y2F0Y2goZSl7fXZhciByZXQ9e2lzUm9vdDpmYWxzZSxleGlzdHM6ZmFsc2UsZXJyb3I6MCxuYW1lOm51bGwscGF0aDpudWxsLG9iamVjdDpudWxsLHBhcmVudEV4aXN0czpmYWxzZSxwYXJlbnRQYXRoOm51bGwscGFyZW50T2JqZWN0Om51bGx9O3RyeXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTtyZXQucGFyZW50RXhpc3RzPXRydWU7cmV0LnBhcmVudFBhdGg9bG9va3VwLnBhdGg7cmV0LnBhcmVudE9iamVjdD1sb29rdXAubm9kZTtyZXQubmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO2xvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udFJlc29sdmVMYXN0TGlua30pO3JldC5leGlzdHM9dHJ1ZTtyZXQucGF0aD1sb29rdXAucGF0aDtyZXQub2JqZWN0PWxvb2t1cC5ub2RlO3JldC5uYW1lPWxvb2t1cC5ub2RlLm5hbWU7cmV0LmlzUm9vdD1sb29rdXAucGF0aD09PVwiL1wifWNhdGNoKGUpe3JldC5lcnJvcj1lLmVycm5vfXJldHVybiByZXR9LGNyZWF0ZVBhdGg6ZnVuY3Rpb24ocGFyZW50LHBhdGgsY2FuUmVhZCxjYW5Xcml0ZSl7cGFyZW50PXR5cGVvZiBwYXJlbnQ9PT1cInN0cmluZ1wiP3BhcmVudDpGUy5nZXRQYXRoKHBhcmVudCk7dmFyIHBhcnRzPXBhdGguc3BsaXQoXCIvXCIpLnJldmVyc2UoKTt3aGlsZShwYXJ0cy5sZW5ndGgpe3ZhciBwYXJ0PXBhcnRzLnBvcCgpO2lmKCFwYXJ0KWNvbnRpbnVlO3ZhciBjdXJyZW50PVBBVEguam9pbjIocGFyZW50LHBhcnQpO3RyeXtGUy5ta2RpcihjdXJyZW50KX1jYXRjaChlKXt9cGFyZW50PWN1cnJlbnR9cmV0dXJuIGN1cnJlbnR9LGNyZWF0ZUZpbGU6ZnVuY3Rpb24ocGFyZW50LG5hbWUscHJvcGVydGllcyxjYW5SZWFkLGNhbldyaXRlKXt2YXIgcGF0aD1QQVRILmpvaW4yKHR5cGVvZiBwYXJlbnQ9PT1cInN0cmluZ1wiP3BhcmVudDpGUy5nZXRQYXRoKHBhcmVudCksbmFtZSk7dmFyIG1vZGU9RlMuZ2V0TW9kZShjYW5SZWFkLGNhbldyaXRlKTtyZXR1cm4gRlMuY3JlYXRlKHBhdGgsbW9kZSl9LGNyZWF0ZURhdGFGaWxlOmZ1bmN0aW9uKHBhcmVudCxuYW1lLGRhdGEsY2FuUmVhZCxjYW5Xcml0ZSxjYW5Pd24pe3ZhciBwYXRoPW5hbWU/UEFUSC5qb2luMih0eXBlb2YgcGFyZW50PT09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpLG5hbWUpOnBhcmVudDt2YXIgbW9kZT1GUy5nZXRNb2RlKGNhblJlYWQsY2FuV3JpdGUpO3ZhciBub2RlPUZTLmNyZWF0ZShwYXRoLG1vZGUpO2lmKGRhdGEpe2lmKHR5cGVvZiBkYXRhPT09XCJzdHJpbmdcIil7dmFyIGFycj1uZXcgQXJyYXkoZGF0YS5sZW5ndGgpO2Zvcih2YXIgaT0wLGxlbj1kYXRhLmxlbmd0aDtpPGxlbjsrK2kpYXJyW2ldPWRhdGEuY2hhckNvZGVBdChpKTtkYXRhPWFycn1GUy5jaG1vZChub2RlLG1vZGV8MTQ2KTt2YXIgc3RyZWFtPUZTLm9wZW4obm9kZSw1NzcpO0ZTLndyaXRlKHN0cmVhbSxkYXRhLDAsZGF0YS5sZW5ndGgsMCxjYW5Pd24pO0ZTLmNsb3NlKHN0cmVhbSk7RlMuY2htb2Qobm9kZSxtb2RlKX1yZXR1cm4gbm9kZX0sY3JlYXRlRGV2aWNlOmZ1bmN0aW9uKHBhcmVudCxuYW1lLGlucHV0LG91dHB1dCl7dmFyIHBhdGg9UEFUSC5qb2luMih0eXBlb2YgcGFyZW50PT09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpLG5hbWUpO3ZhciBtb2RlPUZTLmdldE1vZGUoISFpbnB1dCwhIW91dHB1dCk7aWYoIUZTLmNyZWF0ZURldmljZS5tYWpvcilGUy5jcmVhdGVEZXZpY2UubWFqb3I9NjQ7dmFyIGRldj1GUy5tYWtlZGV2KEZTLmNyZWF0ZURldmljZS5tYWpvcisrLDApO0ZTLnJlZ2lzdGVyRGV2aWNlKGRldix7b3BlbjpmdW5jdGlvbihzdHJlYW0pe3N0cmVhbS5zZWVrYWJsZT1mYWxzZX0sY2xvc2U6ZnVuY3Rpb24oc3RyZWFtKXtpZihvdXRwdXQmJm91dHB1dC5idWZmZXImJm91dHB1dC5idWZmZXIubGVuZ3RoKXtvdXRwdXQoMTApfX0scmVhZDpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXt2YXIgYnl0ZXNSZWFkPTA7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXt2YXIgcmVzdWx0O3RyeXtyZXN1bHQ9aW5wdXQoKX1jYXRjaChlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOSl9aWYocmVzdWx0PT09dW5kZWZpbmVkJiZieXRlc1JlYWQ9PT0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2KX1pZihyZXN1bHQ9PT1udWxsfHxyZXN1bHQ9PT11bmRlZmluZWQpYnJlYWs7Ynl0ZXNSZWFkKys7YnVmZmVyW29mZnNldCtpXT1yZXN1bHR9aWYoYnl0ZXNSZWFkKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gYnl0ZXNSZWFkfSx3cml0ZTpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe3RyeXtvdXRwdXQoYnVmZmVyW29mZnNldCtpXSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfX1pZihsZW5ndGgpe3N0cmVhbS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpfXJldHVybiBpfX0pO3JldHVybiBGUy5ta2RldihwYXRoLG1vZGUsZGV2KX0sZm9yY2VMb2FkRmlsZTpmdW5jdGlvbihvYmope2lmKG9iai5pc0RldmljZXx8b2JqLmlzRm9sZGVyfHxvYmoubGlua3x8b2JqLmNvbnRlbnRzKXJldHVybiB0cnVlO2lmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCE9PVwidW5kZWZpbmVkXCIpe3Rocm93IG5ldyBFcnJvcihcIkxhenkgbG9hZGluZyBzaG91bGQgaGF2ZSBiZWVuIHBlcmZvcm1lZCAoY29udGVudHMgc2V0KSBpbiBjcmVhdGVMYXp5RmlsZSwgYnV0IGl0IHdhcyBub3QuIExhenkgbG9hZGluZyBvbmx5IHdvcmtzIGluIHdlYiB3b3JrZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2Mgb24gdGhlIG1haW4gdGhyZWFkLlwiKX1lbHNlIGlmKHJlYWRfKXt0cnl7b2JqLmNvbnRlbnRzPWludEFycmF5RnJvbVN0cmluZyhyZWFkXyhvYmoudXJsKSx0cnVlKTtvYmoudXNlZEJ5dGVzPW9iai5jb250ZW50cy5sZW5ndGh9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfX1lbHNle3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBsb2FkIHdpdGhvdXQgcmVhZCgpIG9yIFhNTEh0dHBSZXF1ZXN0LlwiKX19LGNyZWF0ZUxhenlGaWxlOmZ1bmN0aW9uKHBhcmVudCxuYW1lLHVybCxjYW5SZWFkLGNhbldyaXRlKXtmdW5jdGlvbiBMYXp5VWludDhBcnJheSgpe3RoaXMubGVuZ3RoS25vd249ZmFsc2U7dGhpcy5jaHVua3M9W119TGF6eVVpbnQ4QXJyYXkucHJvdG90eXBlLmdldD1mdW5jdGlvbiBMYXp5VWludDhBcnJheV9nZXQoaWR4KXtpZihpZHg+dGhpcy5sZW5ndGgtMXx8aWR4PDApe3JldHVybiB1bmRlZmluZWR9dmFyIGNodW5rT2Zmc2V0PWlkeCV0aGlzLmNodW5rU2l6ZTt2YXIgY2h1bmtOdW09aWR4L3RoaXMuY2h1bmtTaXplfDA7cmV0dXJuIHRoaXMuZ2V0dGVyKGNodW5rTnVtKVtjaHVua09mZnNldF19O0xhenlVaW50OEFycmF5LnByb3RvdHlwZS5zZXREYXRhR2V0dGVyPWZ1bmN0aW9uIExhenlVaW50OEFycmF5X3NldERhdGFHZXR0ZXIoZ2V0dGVyKXt0aGlzLmdldHRlcj1nZXR0ZXJ9O0xhenlVaW50OEFycmF5LnByb3RvdHlwZS5jYWNoZUxlbmd0aD1mdW5jdGlvbiBMYXp5VWludDhBcnJheV9jYWNoZUxlbmd0aCgpe3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiSEVBRFwiLHVybCxmYWxzZSk7eGhyLnNlbmQobnVsbCk7aWYoISh4aHIuc3RhdHVzPj0yMDAmJnhoci5zdGF0dXM8MzAwfHx4aHIuc3RhdHVzPT09MzA0KSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBsb2FkIFwiK3VybCtcIi4gU3RhdHVzOiBcIit4aHIuc3RhdHVzKTt2YXIgZGF0YWxlbmd0aD1OdW1iZXIoeGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1sZW5ndGhcIikpO3ZhciBoZWFkZXI7dmFyIGhhc0J5dGVTZXJ2aW5nPShoZWFkZXI9eGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQWNjZXB0LVJhbmdlc1wiKSkmJmhlYWRlcj09PVwiYnl0ZXNcIjt2YXIgdXNlc0d6aXA9KGhlYWRlcj14aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LUVuY29kaW5nXCIpKSYmaGVhZGVyPT09XCJnemlwXCI7dmFyIGNodW5rU2l6ZT0xMDI0KjEwMjQ7aWYoIWhhc0J5dGVTZXJ2aW5nKWNodW5rU2l6ZT1kYXRhbGVuZ3RoO3ZhciBkb1hIUj1mdW5jdGlvbihmcm9tLHRvKXtpZihmcm9tPnRvKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcmFuZ2UgKFwiK2Zyb20rXCIsIFwiK3RvK1wiKSBvciBubyBieXRlcyByZXF1ZXN0ZWQhXCIpO2lmKHRvPmRhdGFsZW5ndGgtMSl0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IFwiK2RhdGFsZW5ndGgrXCIgYnl0ZXMgYXZhaWxhYmxlISBwcm9ncmFtbWVyIGVycm9yIVwiKTt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCxmYWxzZSk7aWYoZGF0YWxlbmd0aCE9PWNodW5rU2l6ZSl4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsXCJieXRlcz1cIitmcm9tK1wiLVwiK3RvKTtpZih0eXBlb2YgVWludDhBcnJheSE9XCJ1bmRlZmluZWRcIil4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjtpZih4aHIub3ZlcnJpZGVNaW1lVHlwZSl7eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpfXhoci5zZW5kKG51bGwpO2lmKCEoeGhyLnN0YXR1cz49MjAwJiZ4aHIuc3RhdHVzPDMwMHx8eGhyLnN0YXR1cz09PTMwNCkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgbG9hZCBcIit1cmwrXCIuIFN0YXR1czogXCIreGhyLnN0YXR1cyk7aWYoeGhyLnJlc3BvbnNlIT09dW5kZWZpbmVkKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlfHxbXSl9ZWxzZXtyZXR1cm4gaW50QXJyYXlGcm9tU3RyaW5nKHhoci5yZXNwb25zZVRleHR8fFwiXCIsdHJ1ZSl9fTt2YXIgbGF6eUFycmF5PXRoaXM7bGF6eUFycmF5LnNldERhdGFHZXR0ZXIoZnVuY3Rpb24oY2h1bmtOdW0pe3ZhciBzdGFydD1jaHVua051bSpjaHVua1NpemU7dmFyIGVuZD0oY2h1bmtOdW0rMSkqY2h1bmtTaXplLTE7ZW5kPU1hdGgubWluKGVuZCxkYXRhbGVuZ3RoLTEpO2lmKHR5cGVvZiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT09PVwidW5kZWZpbmVkXCIpe2xhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dPWRvWEhSKHN0YXJ0LGVuZCl9aWYodHlwZW9mIGxhenlBcnJheS5jaHVua3NbY2h1bmtOdW1dPT09XCJ1bmRlZmluZWRcIil0aHJvdyBuZXcgRXJyb3IoXCJkb1hIUiBmYWlsZWQhXCIpO3JldHVybiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXX0pO2lmKHVzZXNHemlwfHwhZGF0YWxlbmd0aCl7Y2h1bmtTaXplPWRhdGFsZW5ndGg9MTtkYXRhbGVuZ3RoPXRoaXMuZ2V0dGVyKDApLmxlbmd0aDtjaHVua1NpemU9ZGF0YWxlbmd0aDtvdXQoXCJMYXp5RmlsZXMgb24gZ3ppcCBmb3JjZXMgZG93bmxvYWQgb2YgdGhlIHdob2xlIGZpbGUgd2hlbiBsZW5ndGggaXMgYWNjZXNzZWRcIil9dGhpcy5fbGVuZ3RoPWRhdGFsZW5ndGg7dGhpcy5fY2h1bmtTaXplPWNodW5rU2l6ZTt0aGlzLmxlbmd0aEtub3duPXRydWV9O2lmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCE9PVwidW5kZWZpbmVkXCIpe2lmKCFFTlZJUk9OTUVOVF9JU19XT1JLRVIpdGhyb3dcIkNhbm5vdCBkbyBzeW5jaHJvbm91cyBiaW5hcnkgWEhScyBvdXRzaWRlIHdlYndvcmtlcnMgaW4gbW9kZXJuIGJyb3dzZXJzLiBVc2UgLS1lbWJlZC1maWxlIG9yIC0tcHJlbG9hZC1maWxlIGluIGVtY2NcIjt2YXIgbGF6eUFycmF5PW5ldyBMYXp5VWludDhBcnJheTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsYXp5QXJyYXkse2xlbmd0aDp7Z2V0OmZ1bmN0aW9uKCl7aWYoIXRoaXMubGVuZ3RoS25vd24pe3RoaXMuY2FjaGVMZW5ndGgoKX1yZXR1cm4gdGhpcy5fbGVuZ3RofX0sY2h1bmtTaXplOntnZXQ6ZnVuY3Rpb24oKXtpZighdGhpcy5sZW5ndGhLbm93bil7dGhpcy5jYWNoZUxlbmd0aCgpfXJldHVybiB0aGlzLl9jaHVua1NpemV9fX0pO3ZhciBwcm9wZXJ0aWVzPXtpc0RldmljZTpmYWxzZSxjb250ZW50czpsYXp5QXJyYXl9fWVsc2V7dmFyIHByb3BlcnRpZXM9e2lzRGV2aWNlOmZhbHNlLHVybDp1cmx9fXZhciBub2RlPUZTLmNyZWF0ZUZpbGUocGFyZW50LG5hbWUscHJvcGVydGllcyxjYW5SZWFkLGNhbldyaXRlKTtpZihwcm9wZXJ0aWVzLmNvbnRlbnRzKXtub2RlLmNvbnRlbnRzPXByb3BlcnRpZXMuY29udGVudHN9ZWxzZSBpZihwcm9wZXJ0aWVzLnVybCl7bm9kZS5jb250ZW50cz1udWxsO25vZGUudXJsPXByb3BlcnRpZXMudXJsfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG5vZGUse3VzZWRCeXRlczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGVudHMubGVuZ3RofX19KTt2YXIgc3RyZWFtX29wcz17fTt2YXIga2V5cz1PYmplY3Qua2V5cyhub2RlLnN0cmVhbV9vcHMpO2tleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpe3ZhciBmbj1ub2RlLnN0cmVhbV9vcHNba2V5XTtzdHJlYW1fb3BzW2tleV09ZnVuY3Rpb24gZm9yY2VMb2FkTGF6eUZpbGUoKXtGUy5mb3JjZUxvYWRGaWxlKG5vZGUpO3JldHVybiBmbi5hcHBseShudWxsLGFyZ3VtZW50cyl9fSk7c3RyZWFtX29wcy5yZWFkPWZ1bmN0aW9uIHN0cmVhbV9vcHNfcmVhZChzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe0ZTLmZvcmNlTG9hZEZpbGUobm9kZSk7dmFyIGNvbnRlbnRzPXN0cmVhbS5ub2RlLmNvbnRlbnRzO2lmKHBvc2l0aW9uPj1jb250ZW50cy5sZW5ndGgpcmV0dXJuIDA7dmFyIHNpemU9TWF0aC5taW4oY29udGVudHMubGVuZ3RoLXBvc2l0aW9uLGxlbmd0aCk7aWYoY29udGVudHMuc2xpY2Upe2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe2J1ZmZlcltvZmZzZXQraV09Y29udGVudHNbcG9zaXRpb24raV19fWVsc2V7Zm9yKHZhciBpPTA7aTxzaXplO2krKyl7YnVmZmVyW29mZnNldCtpXT1jb250ZW50cy5nZXQocG9zaXRpb24raSl9fXJldHVybiBzaXplfTtub2RlLnN0cmVhbV9vcHM9c3RyZWFtX29wcztyZXR1cm4gbm9kZX0sY3JlYXRlUHJlbG9hZGVkRmlsZTpmdW5jdGlvbihwYXJlbnQsbmFtZSx1cmwsY2FuUmVhZCxjYW5Xcml0ZSxvbmxvYWQsb25lcnJvcixkb250Q3JlYXRlRmlsZSxjYW5Pd24scHJlRmluaXNoKXtCcm93c2VyLmluaXQoKTt2YXIgZnVsbG5hbWU9bmFtZT9QQVRIX0ZTLnJlc29sdmUoUEFUSC5qb2luMihwYXJlbnQsbmFtZSkpOnBhcmVudDt2YXIgZGVwPWdldFVuaXF1ZVJ1bkRlcGVuZGVuY3koXCJjcCBcIitmdWxsbmFtZSk7ZnVuY3Rpb24gcHJvY2Vzc0RhdGEoYnl0ZUFycmF5KXtmdW5jdGlvbiBmaW5pc2goYnl0ZUFycmF5KXtpZihwcmVGaW5pc2gpcHJlRmluaXNoKCk7aWYoIWRvbnRDcmVhdGVGaWxlKXtGUy5jcmVhdGVEYXRhRmlsZShwYXJlbnQsbmFtZSxieXRlQXJyYXksY2FuUmVhZCxjYW5Xcml0ZSxjYW5Pd24pfWlmKG9ubG9hZClvbmxvYWQoKTtyZW1vdmVSdW5EZXBlbmRlbmN5KGRlcCl9dmFyIGhhbmRsZWQ9ZmFsc2U7TW9kdWxlW1wicHJlbG9hZFBsdWdpbnNcIl0uZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pe2lmKGhhbmRsZWQpcmV0dXJuO2lmKHBsdWdpbltcImNhbkhhbmRsZVwiXShmdWxsbmFtZSkpe3BsdWdpbltcImhhbmRsZVwiXShieXRlQXJyYXksZnVsbG5hbWUsZmluaXNoLGZ1bmN0aW9uKCl7aWYob25lcnJvcilvbmVycm9yKCk7cmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApfSk7aGFuZGxlZD10cnVlfX0pO2lmKCFoYW5kbGVkKWZpbmlzaChieXRlQXJyYXkpfWFkZFJ1bkRlcGVuZGVuY3koZGVwKTtpZih0eXBlb2YgdXJsPT1cInN0cmluZ1wiKXtCcm93c2VyLmFzeW5jTG9hZCh1cmwsZnVuY3Rpb24oYnl0ZUFycmF5KXtwcm9jZXNzRGF0YShieXRlQXJyYXkpfSxvbmVycm9yKX1lbHNle3Byb2Nlc3NEYXRhKHVybCl9fSxpbmRleGVkREI6ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmluZGV4ZWREQnx8d2luZG93Lm1vekluZGV4ZWREQnx8d2luZG93LndlYmtpdEluZGV4ZWREQnx8d2luZG93Lm1zSW5kZXhlZERCfSxEQl9OQU1FOmZ1bmN0aW9uKCl7cmV0dXJuXCJFTV9GU19cIit3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9LERCX1ZFUlNJT046MjAsREJfU1RPUkVfTkFNRTpcIkZJTEVfREFUQVwiLHNhdmVGaWxlc1RvREI6ZnVuY3Rpb24ocGF0aHMsb25sb2FkLG9uZXJyb3Ipe29ubG9hZD1vbmxvYWR8fGZ1bmN0aW9uKCl7fTtvbmVycm9yPW9uZXJyb3J8fGZ1bmN0aW9uKCl7fTt2YXIgaW5kZXhlZERCPUZTLmluZGV4ZWREQigpO3RyeXt2YXIgb3BlblJlcXVlc3Q9aW5kZXhlZERCLm9wZW4oRlMuREJfTkFNRSgpLEZTLkRCX1ZFUlNJT04pfWNhdGNoKGUpe3JldHVybiBvbmVycm9yKGUpfW9wZW5SZXF1ZXN0Lm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbiBvcGVuUmVxdWVzdF9vbnVwZ3JhZGVuZWVkZWQoKXtvdXQoXCJjcmVhdGluZyBkYlwiKTt2YXIgZGI9b3BlblJlcXVlc3QucmVzdWx0O2RiLmNyZWF0ZU9iamVjdFN0b3JlKEZTLkRCX1NUT1JFX05BTUUpfTtvcGVuUmVxdWVzdC5vbnN1Y2Nlc3M9ZnVuY3Rpb24gb3BlblJlcXVlc3Rfb25zdWNjZXNzKCl7dmFyIGRiPW9wZW5SZXF1ZXN0LnJlc3VsdDt2YXIgdHJhbnNhY3Rpb249ZGIudHJhbnNhY3Rpb24oW0ZTLkRCX1NUT1JFX05BTUVdLFwicmVhZHdyaXRlXCIpO3ZhciBmaWxlcz10cmFuc2FjdGlvbi5vYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKTt2YXIgb2s9MCxmYWlsPTAsdG90YWw9cGF0aHMubGVuZ3RoO2Z1bmN0aW9uIGZpbmlzaCgpe2lmKGZhaWw9PTApb25sb2FkKCk7ZWxzZSBvbmVycm9yKCl9cGF0aHMuZm9yRWFjaChmdW5jdGlvbihwYXRoKXt2YXIgcHV0UmVxdWVzdD1maWxlcy5wdXQoRlMuYW5hbHl6ZVBhdGgocGF0aCkub2JqZWN0LmNvbnRlbnRzLHBhdGgpO3B1dFJlcXVlc3Qub25zdWNjZXNzPWZ1bmN0aW9uIHB1dFJlcXVlc3Rfb25zdWNjZXNzKCl7b2srKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX07cHV0UmVxdWVzdC5vbmVycm9yPWZ1bmN0aW9uIHB1dFJlcXVlc3Rfb25lcnJvcigpe2ZhaWwrKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX19KTt0cmFuc2FjdGlvbi5vbmVycm9yPW9uZXJyb3J9O29wZW5SZXF1ZXN0Lm9uZXJyb3I9b25lcnJvcn0sbG9hZEZpbGVzRnJvbURCOmZ1bmN0aW9uKHBhdGhzLG9ubG9hZCxvbmVycm9yKXtvbmxvYWQ9b25sb2FkfHxmdW5jdGlvbigpe307b25lcnJvcj1vbmVycm9yfHxmdW5jdGlvbigpe307dmFyIGluZGV4ZWREQj1GUy5pbmRleGVkREIoKTt0cnl7dmFyIG9wZW5SZXF1ZXN0PWluZGV4ZWREQi5vcGVuKEZTLkRCX05BTUUoKSxGUy5EQl9WRVJTSU9OKX1jYXRjaChlKXtyZXR1cm4gb25lcnJvcihlKX1vcGVuUmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQ9b25lcnJvcjtvcGVuUmVxdWVzdC5vbnN1Y2Nlc3M9ZnVuY3Rpb24gb3BlblJlcXVlc3Rfb25zdWNjZXNzKCl7dmFyIGRiPW9wZW5SZXF1ZXN0LnJlc3VsdDt0cnl7dmFyIHRyYW5zYWN0aW9uPWRiLnRyYW5zYWN0aW9uKFtGUy5EQl9TVE9SRV9OQU1FXSxcInJlYWRvbmx5XCIpfWNhdGNoKGUpe29uZXJyb3IoZSk7cmV0dXJufXZhciBmaWxlcz10cmFuc2FjdGlvbi5vYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKTt2YXIgb2s9MCxmYWlsPTAsdG90YWw9cGF0aHMubGVuZ3RoO2Z1bmN0aW9uIGZpbmlzaCgpe2lmKGZhaWw9PTApb25sb2FkKCk7ZWxzZSBvbmVycm9yKCl9cGF0aHMuZm9yRWFjaChmdW5jdGlvbihwYXRoKXt2YXIgZ2V0UmVxdWVzdD1maWxlcy5nZXQocGF0aCk7Z2V0UmVxdWVzdC5vbnN1Y2Nlc3M9ZnVuY3Rpb24gZ2V0UmVxdWVzdF9vbnN1Y2Nlc3MoKXtpZihGUy5hbmFseXplUGF0aChwYXRoKS5leGlzdHMpe0ZTLnVubGluayhwYXRoKX1GUy5jcmVhdGVEYXRhRmlsZShQQVRILmRpcm5hbWUocGF0aCksUEFUSC5iYXNlbmFtZShwYXRoKSxnZXRSZXF1ZXN0LnJlc3VsdCx0cnVlLHRydWUsdHJ1ZSk7b2srKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX07Z2V0UmVxdWVzdC5vbmVycm9yPWZ1bmN0aW9uIGdldFJlcXVlc3Rfb25lcnJvcigpe2ZhaWwrKztpZihvaytmYWlsPT10b3RhbClmaW5pc2goKX19KTt0cmFuc2FjdGlvbi5vbmVycm9yPW9uZXJyb3J9O29wZW5SZXF1ZXN0Lm9uZXJyb3I9b25lcnJvcn19O3ZhciBTWVNDQUxMUz17bWFwcGluZ3M6e30sREVGQVVMVF9QT0xMTUFTSzo1LHVtYXNrOjUxMSxjYWxjdWxhdGVBdDpmdW5jdGlvbihkaXJmZCxwYXRoLGFsbG93RW1wdHkpe2lmKHBhdGhbMF09PT1cIi9cIil7cmV0dXJuIHBhdGh9dmFyIGRpcjtpZihkaXJmZD09PS0xMDApe2Rpcj1GUy5jd2QoKX1lbHNle3ZhciBkaXJzdHJlYW09RlMuZ2V0U3RyZWFtKGRpcmZkKTtpZighZGlyc3RyZWFtKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpO2Rpcj1kaXJzdHJlYW0ucGF0aH1pZihwYXRoLmxlbmd0aD09MCl7aWYoIWFsbG93RW1wdHkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX1yZXR1cm4gZGlyfXJldHVybiBQQVRILmpvaW4yKGRpcixwYXRoKX0sZG9TdGF0OmZ1bmN0aW9uKGZ1bmMscGF0aCxidWYpe3RyeXt2YXIgc3RhdD1mdW5jKHBhdGgpfWNhdGNoKGUpe2lmKGUmJmUubm9kZSYmUEFUSC5ub3JtYWxpemUocGF0aCkhPT1QQVRILm5vcm1hbGl6ZShGUy5nZXRQYXRoKGUubm9kZSkpKXtyZXR1cm4tNTR9dGhyb3cgZX1IRUFQMzJbYnVmPj4yXT1zdGF0LmRldjtIRUFQMzJbYnVmKzQ+PjJdPTA7SEVBUDMyW2J1Zis4Pj4yXT1zdGF0LmlubztIRUFQMzJbYnVmKzEyPj4yXT1zdGF0Lm1vZGU7SEVBUDMyW2J1ZisxNj4+Ml09c3RhdC5ubGluaztIRUFQMzJbYnVmKzIwPj4yXT1zdGF0LnVpZDtIRUFQMzJbYnVmKzI0Pj4yXT1zdGF0LmdpZDtIRUFQMzJbYnVmKzI4Pj4yXT1zdGF0LnJkZXY7SEVBUDMyW2J1ZiszMj4+Ml09MDt0ZW1wSTY0PVtzdGF0LnNpemU+Pj4wLCh0ZW1wRG91YmxlPXN0YXQuc2l6ZSwrTWF0aC5hYnModGVtcERvdWJsZSk+PTE/dGVtcERvdWJsZT4wPyhNYXRoLm1pbigrTWF0aC5mbG9vcih0ZW1wRG91YmxlLzQyOTQ5NjcyOTYpLDQyOTQ5NjcyOTUpfDApPj4+MDp+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUtKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbYnVmKzQwPj4yXT10ZW1wSTY0WzBdLEhFQVAzMltidWYrNDQ+PjJdPXRlbXBJNjRbMV07SEVBUDMyW2J1Zis0OD4+Ml09NDA5NjtIRUFQMzJbYnVmKzUyPj4yXT1zdGF0LmJsb2NrcztIRUFQMzJbYnVmKzU2Pj4yXT1zdGF0LmF0aW1lLmdldFRpbWUoKS8xZTN8MDtIRUFQMzJbYnVmKzYwPj4yXT0wO0hFQVAzMltidWYrNjQ+PjJdPXN0YXQubXRpbWUuZ2V0VGltZSgpLzFlM3wwO0hFQVAzMltidWYrNjg+PjJdPTA7SEVBUDMyW2J1Zis3Mj4+Ml09c3RhdC5jdGltZS5nZXRUaW1lKCkvMWUzfDA7SEVBUDMyW2J1Zis3Nj4+Ml09MDt0ZW1wSTY0PVtzdGF0Lmlubz4+PjAsKHRlbXBEb3VibGU9c3RhdC5pbm8sK01hdGguYWJzKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8oTWF0aC5taW4oK01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KSw0Mjk0OTY3Mjk1KXwwKT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW2J1Zis4MD4+Ml09dGVtcEk2NFswXSxIRUFQMzJbYnVmKzg0Pj4yXT10ZW1wSTY0WzFdO3JldHVybiAwfSxkb01zeW5jOmZ1bmN0aW9uKGFkZHIsc3RyZWFtLGxlbixmbGFncyxvZmZzZXQpe3ZhciBidWZmZXI9SEVBUFU4LnNsaWNlKGFkZHIsYWRkcitsZW4pO0ZTLm1zeW5jKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbixmbGFncyl9LGRvTWtkaXI6ZnVuY3Rpb24ocGF0aCxtb2RlKXtwYXRoPVBBVEgubm9ybWFsaXplKHBhdGgpO2lmKHBhdGhbcGF0aC5sZW5ndGgtMV09PT1cIi9cIilwYXRoPXBhdGguc3Vic3RyKDAscGF0aC5sZW5ndGgtMSk7RlMubWtkaXIocGF0aCxtb2RlLDApO3JldHVybiAwfSxkb01rbm9kOmZ1bmN0aW9uKHBhdGgsbW9kZSxkZXYpe3N3aXRjaChtb2RlJjYxNDQwKXtjYXNlIDMyNzY4OmNhc2UgODE5MjpjYXNlIDI0NTc2OmNhc2UgNDA5NjpjYXNlIDQ5MTUyOmJyZWFrO2RlZmF1bHQ6cmV0dXJuLTI4fUZTLm1rbm9kKHBhdGgsbW9kZSxkZXYpO3JldHVybiAwfSxkb1JlYWRsaW5rOmZ1bmN0aW9uKHBhdGgsYnVmLGJ1ZnNpemUpe2lmKGJ1ZnNpemU8PTApcmV0dXJuLTI4O3ZhciByZXQ9RlMucmVhZGxpbmsocGF0aCk7dmFyIGxlbj1NYXRoLm1pbihidWZzaXplLGxlbmd0aEJ5dGVzVVRGOChyZXQpKTt2YXIgZW5kQ2hhcj1IRUFQOFtidWYrbGVuXTtzdHJpbmdUb1VURjgocmV0LGJ1ZixidWZzaXplKzEpO0hFQVA4W2J1ZitsZW5dPWVuZENoYXI7cmV0dXJuIGxlbn0sZG9BY2Nlc3M6ZnVuY3Rpb24ocGF0aCxhbW9kZSl7aWYoYW1vZGUmfjcpe3JldHVybi0yOH12YXIgbm9kZTt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7Zm9sbG93OnRydWV9KTtub2RlPWxvb2t1cC5ub2RlO2lmKCFub2RlKXtyZXR1cm4tNDR9dmFyIHBlcm1zPVwiXCI7aWYoYW1vZGUmNClwZXJtcys9XCJyXCI7aWYoYW1vZGUmMilwZXJtcys9XCJ3XCI7aWYoYW1vZGUmMSlwZXJtcys9XCJ4XCI7aWYocGVybXMmJkZTLm5vZGVQZXJtaXNzaW9ucyhub2RlLHBlcm1zKSl7cmV0dXJuLTJ9cmV0dXJuIDB9LGRvRHVwOmZ1bmN0aW9uKHBhdGgsZmxhZ3Msc3VnZ2VzdEZEKXt2YXIgc3VnZ2VzdD1GUy5nZXRTdHJlYW0oc3VnZ2VzdEZEKTtpZihzdWdnZXN0KUZTLmNsb3NlKHN1Z2dlc3QpO3JldHVybiBGUy5vcGVuKHBhdGgsZmxhZ3MsMCxzdWdnZXN0RkQsc3VnZ2VzdEZEKS5mZH0sZG9SZWFkdjpmdW5jdGlvbihzdHJlYW0saW92LGlvdmNudCxvZmZzZXQpe3ZhciByZXQ9MDtmb3IodmFyIGk9MDtpPGlvdmNudDtpKyspe3ZhciBwdHI9SEVBUDMyW2lvditpKjg+PjJdO3ZhciBsZW49SEVBUDMyW2lvdisoaSo4KzQpPj4yXTt2YXIgY3Vycj1GUy5yZWFkKHN0cmVhbSxIRUFQOCxwdHIsbGVuLG9mZnNldCk7aWYoY3VycjwwKXJldHVybi0xO3JldCs9Y3VycjtpZihjdXJyPGxlbilicmVha31yZXR1cm4gcmV0fSxkb1dyaXRldjpmdW5jdGlvbihzdHJlYW0saW92LGlvdmNudCxvZmZzZXQpe3ZhciByZXQ9MDtmb3IodmFyIGk9MDtpPGlvdmNudDtpKyspe3ZhciBwdHI9SEVBUDMyW2lvditpKjg+PjJdO3ZhciBsZW49SEVBUDMyW2lvdisoaSo4KzQpPj4yXTt2YXIgY3Vycj1GUy53cml0ZShzdHJlYW0sSEVBUDgscHRyLGxlbixvZmZzZXQpO2lmKGN1cnI8MClyZXR1cm4tMTtyZXQrPWN1cnJ9cmV0dXJuIHJldH0sdmFyYXJnczp1bmRlZmluZWQsZ2V0OmZ1bmN0aW9uKCl7U1lTQ0FMTFMudmFyYXJncys9NDt2YXIgcmV0PUhFQVAzMltTWVNDQUxMUy52YXJhcmdzLTQ+PjJdO3JldHVybiByZXR9LGdldFN0cjpmdW5jdGlvbihwdHIpe3ZhciByZXQ9VVRGOFRvU3RyaW5nKHB0cik7cmV0dXJuIHJldH0sZ2V0U3RyZWFtRnJvbUZEOmZ1bmN0aW9uKGZkKXt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbShmZCk7aWYoIXN0cmVhbSl0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KTtyZXR1cm4gc3RyZWFtfSxnZXQ2NDpmdW5jdGlvbihsb3csaGlnaCl7cmV0dXJuIGxvd319O2Z1bmN0aW9uIF9fX3N5c19mY250bDY0KGZkLGNtZCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtzd2l0Y2goY21kKXtjYXNlIDA6e3ZhciBhcmc9U1lTQ0FMTFMuZ2V0KCk7aWYoYXJnPDApe3JldHVybi0yOH12YXIgbmV3U3RyZWFtO25ld1N0cmVhbT1GUy5vcGVuKHN0cmVhbS5wYXRoLHN0cmVhbS5mbGFncywwLGFyZyk7cmV0dXJuIG5ld1N0cmVhbS5mZH1jYXNlIDE6Y2FzZSAyOnJldHVybiAwO2Nhc2UgMzpyZXR1cm4gc3RyZWFtLmZsYWdzO2Nhc2UgNDp7dmFyIGFyZz1TWVNDQUxMUy5nZXQoKTtzdHJlYW0uZmxhZ3N8PWFyZztyZXR1cm4gMH1jYXNlIDEyOnt2YXIgYXJnPVNZU0NBTExTLmdldCgpO3ZhciBvZmZzZXQ9MDtIRUFQMTZbYXJnK29mZnNldD4+MV09MjtyZXR1cm4gMH1jYXNlIDEzOmNhc2UgMTQ6cmV0dXJuIDA7Y2FzZSAxNjpjYXNlIDg6cmV0dXJuLTI4O2Nhc2UgOTpzZXRFcnJObygyOCk7cmV0dXJuLTE7ZGVmYXVsdDp7cmV0dXJuLTI4fX19Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuLWUuZXJybm99fWZ1bmN0aW9uIF9fX3N5c19pb2N0bChmZCxvcCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTtzd2l0Y2gob3Ape2Nhc2UgMjE1MDk6Y2FzZSAyMTUwNTp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybiAwfWNhc2UgMjE1MTA6Y2FzZSAyMTUxMTpjYXNlIDIxNTEyOmNhc2UgMjE1MDY6Y2FzZSAyMTUwNzpjYXNlIDIxNTA4OntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7cmV0dXJuIDB9Y2FzZSAyMTUxOTp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3ZhciBhcmdwPVNZU0NBTExTLmdldCgpO0hFQVAzMlthcmdwPj4yXT0wO3JldHVybiAwfWNhc2UgMjE1MjA6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4tMjh9Y2FzZSAyMTUzMTp7dmFyIGFyZ3A9U1lTQ0FMTFMuZ2V0KCk7cmV0dXJuIEZTLmlvY3RsKHN0cmVhbSxvcCxhcmdwKX1jYXNlIDIxNTIzOntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7cmV0dXJuIDB9Y2FzZSAyMTUyNDp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybiAwfWRlZmF1bHQ6YWJvcnQoXCJiYWQgaW9jdGwgc3lzY2FsbCBcIitvcCl9fWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybi1lLmVycm5vfX1mdW5jdGlvbiBfX19zeXNfb3BlbihwYXRoLGZsYWdzLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnczt0cnl7dmFyIHBhdGhuYW1lPVNZU0NBTExTLmdldFN0cihwYXRoKTt2YXIgbW9kZT12YXJhcmdzP1NZU0NBTExTLmdldCgpOjA7dmFyIHN0cmVhbT1GUy5vcGVuKHBhdGhuYW1lLGZsYWdzLG1vZGUpO3JldHVybiBzdHJlYW0uZmR9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuLWUuZXJybm99fXZhciBzdHJ1Y3RSZWdpc3RyYXRpb25zPXt9O2Z1bmN0aW9uIHJ1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKXt3aGlsZShkZXN0cnVjdG9ycy5sZW5ndGgpe3ZhciBwdHI9ZGVzdHJ1Y3RvcnMucG9wKCk7dmFyIGRlbD1kZXN0cnVjdG9ycy5wb3AoKTtkZWwocHRyKX19ZnVuY3Rpb24gc2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUFUzMltwb2ludGVyPj4yXSl9dmFyIGF3YWl0aW5nRGVwZW5kZW5jaWVzPXt9O3ZhciByZWdpc3RlcmVkVHlwZXM9e307dmFyIHR5cGVEZXBlbmRlbmNpZXM9e307dmFyIGNoYXJfMD00ODt2YXIgY2hhcl85PTU3O2Z1bmN0aW9uIG1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKXtpZih1bmRlZmluZWQ9PT1uYW1lKXtyZXR1cm5cIl91bmtub3duXCJ9bmFtZT1uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05X10vZyxcIiRcIik7dmFyIGY9bmFtZS5jaGFyQ29kZUF0KDApO2lmKGY+PWNoYXJfMCYmZjw9Y2hhcl85KXtyZXR1cm5cIl9cIituYW1lfWVsc2V7cmV0dXJuIG5hbWV9fWZ1bmN0aW9uIGNyZWF0ZU5hbWVkRnVuY3Rpb24obmFtZSxib2R5KXtuYW1lPW1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTtyZXR1cm4gbmV3IEZ1bmN0aW9uKFwiYm9keVwiLFwicmV0dXJuIGZ1bmN0aW9uIFwiK25hbWUrXCIoKSB7XFxuXCIrJyAgICBcInVzZSBzdHJpY3RcIjsnK1wiICAgIHJldHVybiBib2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuXCIrXCJ9O1xcblwiKShib2R5KX1mdW5jdGlvbiBleHRlbmRFcnJvcihiYXNlRXJyb3JUeXBlLGVycm9yTmFtZSl7dmFyIGVycm9yQ2xhc3M9Y3JlYXRlTmFtZWRGdW5jdGlvbihlcnJvck5hbWUsZnVuY3Rpb24obWVzc2FnZSl7dGhpcy5uYW1lPWVycm9yTmFtZTt0aGlzLm1lc3NhZ2U9bWVzc2FnZTt2YXIgc3RhY2s9bmV3IEVycm9yKG1lc3NhZ2UpLnN0YWNrO2lmKHN0YWNrIT09dW5kZWZpbmVkKXt0aGlzLnN0YWNrPXRoaXMudG9TdHJpbmcoKStcIlxcblwiK3N0YWNrLnJlcGxhY2UoL15FcnJvcig6W15cXG5dKik/XFxuLyxcIlwiKX19KTtlcnJvckNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGJhc2VFcnJvclR5cGUucHJvdG90eXBlKTtlcnJvckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lcnJvckNsYXNzO2Vycm9yQ2xhc3MucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7aWYodGhpcy5tZXNzYWdlPT09dW5kZWZpbmVkKXtyZXR1cm4gdGhpcy5uYW1lfWVsc2V7cmV0dXJuIHRoaXMubmFtZStcIjogXCIrdGhpcy5tZXNzYWdlfX07cmV0dXJuIGVycm9yQ2xhc3N9dmFyIEludGVybmFsRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIHRocm93SW50ZXJuYWxFcnJvcihtZXNzYWdlKXt0aHJvdyBuZXcgSW50ZXJuYWxFcnJvcihtZXNzYWdlKX1mdW5jdGlvbiB3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChteVR5cGVzLGRlcGVuZGVudFR5cGVzLGdldFR5cGVDb252ZXJ0ZXJzKXtteVR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSl7dHlwZURlcGVuZGVuY2llc1t0eXBlXT1kZXBlbmRlbnRUeXBlc30pO2Z1bmN0aW9uIG9uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpe3ZhciBteVR5cGVDb252ZXJ0ZXJzPWdldFR5cGVDb252ZXJ0ZXJzKHR5cGVDb252ZXJ0ZXJzKTtpZihteVR5cGVDb252ZXJ0ZXJzLmxlbmd0aCE9PW15VHlwZXMubGVuZ3RoKXt0aHJvd0ludGVybmFsRXJyb3IoXCJNaXNtYXRjaGVkIHR5cGUgY29udmVydGVyIGNvdW50XCIpfWZvcih2YXIgaT0wO2k8bXlUeXBlcy5sZW5ndGg7KytpKXtyZWdpc3RlclR5cGUobXlUeXBlc1tpXSxteVR5cGVDb252ZXJ0ZXJzW2ldKX19dmFyIHR5cGVDb252ZXJ0ZXJzPW5ldyBBcnJheShkZXBlbmRlbnRUeXBlcy5sZW5ndGgpO3ZhciB1bnJlZ2lzdGVyZWRUeXBlcz1bXTt2YXIgcmVnaXN0ZXJlZD0wO2RlcGVuZGVudFR5cGVzLmZvckVhY2goZnVuY3Rpb24oZHQsaSl7aWYocmVnaXN0ZXJlZFR5cGVzLmhhc093blByb3BlcnR5KGR0KSl7dHlwZUNvbnZlcnRlcnNbaV09cmVnaXN0ZXJlZFR5cGVzW2R0XX1lbHNle3VucmVnaXN0ZXJlZFR5cGVzLnB1c2goZHQpO2lmKCFhd2FpdGluZ0RlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShkdCkpe2F3YWl0aW5nRGVwZW5kZW5jaWVzW2R0XT1bXX1hd2FpdGluZ0RlcGVuZGVuY2llc1tkdF0ucHVzaChmdW5jdGlvbigpe3R5cGVDb252ZXJ0ZXJzW2ldPXJlZ2lzdGVyZWRUeXBlc1tkdF07KytyZWdpc3RlcmVkO2lmKHJlZ2lzdGVyZWQ9PT11bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpe29uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpfX0pfX0pO2lmKDA9PT11bnJlZ2lzdGVyZWRUeXBlcy5sZW5ndGgpe29uQ29tcGxldGUodHlwZUNvbnZlcnRlcnMpfX1mdW5jdGlvbiBfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3Qoc3RydWN0VHlwZSl7dmFyIHJlZz1zdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdO2RlbGV0ZSBzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdO3ZhciByYXdDb25zdHJ1Y3Rvcj1yZWcucmF3Q29uc3RydWN0b3I7dmFyIHJhd0Rlc3RydWN0b3I9cmVnLnJhd0Rlc3RydWN0b3I7dmFyIGZpZWxkUmVjb3Jkcz1yZWcuZmllbGRzO3ZhciBmaWVsZFR5cGVzPWZpZWxkUmVjb3Jkcy5tYXAoZnVuY3Rpb24oZmllbGQpe3JldHVybiBmaWVsZC5nZXR0ZXJSZXR1cm5UeXBlfSkuY29uY2F0KGZpZWxkUmVjb3Jkcy5tYXAoZnVuY3Rpb24oZmllbGQpe3JldHVybiBmaWVsZC5zZXR0ZXJBcmd1bWVudFR5cGV9KSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW3N0cnVjdFR5cGVdLGZpZWxkVHlwZXMsZnVuY3Rpb24oZmllbGRUeXBlcyl7dmFyIGZpZWxkcz17fTtmaWVsZFJlY29yZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCxpKXt2YXIgZmllbGROYW1lPWZpZWxkLmZpZWxkTmFtZTt2YXIgZ2V0dGVyUmV0dXJuVHlwZT1maWVsZFR5cGVzW2ldO3ZhciBnZXR0ZXI9ZmllbGQuZ2V0dGVyO3ZhciBnZXR0ZXJDb250ZXh0PWZpZWxkLmdldHRlckNvbnRleHQ7dmFyIHNldHRlckFyZ3VtZW50VHlwZT1maWVsZFR5cGVzW2krZmllbGRSZWNvcmRzLmxlbmd0aF07dmFyIHNldHRlcj1maWVsZC5zZXR0ZXI7dmFyIHNldHRlckNvbnRleHQ9ZmllbGQuc2V0dGVyQ29udGV4dDtmaWVsZHNbZmllbGROYW1lXT17cmVhZDpmdW5jdGlvbihwdHIpe3JldHVybiBnZXR0ZXJSZXR1cm5UeXBlW1wiZnJvbVdpcmVUeXBlXCJdKGdldHRlcihnZXR0ZXJDb250ZXh0LHB0cikpfSx3cml0ZTpmdW5jdGlvbihwdHIsbyl7dmFyIGRlc3RydWN0b3JzPVtdO3NldHRlcihzZXR0ZXJDb250ZXh0LHB0cixzZXR0ZXJBcmd1bWVudFR5cGVbXCJ0b1dpcmVUeXBlXCJdKGRlc3RydWN0b3JzLG8pKTtydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyl9fX0pO3JldHVyblt7bmFtZTpyZWcubmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHB0cil7dmFyIHJ2PXt9O2Zvcih2YXIgaSBpbiBmaWVsZHMpe3J2W2ldPWZpZWxkc1tpXS5yZWFkKHB0cil9cmF3RGVzdHJ1Y3RvcihwdHIpO3JldHVybiBydn0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsbyl7Zm9yKHZhciBmaWVsZE5hbWUgaW4gZmllbGRzKXtpZighKGZpZWxkTmFtZSBpbiBvKSl7dGhyb3cgbmV3IFR5cGVFcnJvcignTWlzc2luZyBmaWVsZDogIFwiJytmaWVsZE5hbWUrJ1wiJyl9fXZhciBwdHI9cmF3Q29uc3RydWN0b3IoKTtmb3IoZmllbGROYW1lIGluIGZpZWxkcyl7ZmllbGRzW2ZpZWxkTmFtZV0ud3JpdGUocHRyLG9bZmllbGROYW1lXSl9aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKHJhd0Rlc3RydWN0b3IscHRyKX1yZXR1cm4gcHRyfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6c2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXIsZGVzdHJ1Y3RvckZ1bmN0aW9uOnJhd0Rlc3RydWN0b3J9XX0pfWZ1bmN0aW9uIGdldFNoaWZ0RnJvbVNpemUoc2l6ZSl7c3dpdGNoKHNpemUpe2Nhc2UgMTpyZXR1cm4gMDtjYXNlIDI6cmV0dXJuIDE7Y2FzZSA0OnJldHVybiAyO2Nhc2UgODpyZXR1cm4gMztkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIHR5cGUgc2l6ZTogXCIrc2l6ZSl9fWZ1bmN0aW9uIGVtYmluZF9pbml0X2NoYXJDb2Rlcygpe3ZhciBjb2Rlcz1uZXcgQXJyYXkoMjU2KTtmb3IodmFyIGk9MDtpPDI1NjsrK2kpe2NvZGVzW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoaSl9ZW1iaW5kX2NoYXJDb2Rlcz1jb2Rlc312YXIgZW1iaW5kX2NoYXJDb2Rlcz11bmRlZmluZWQ7ZnVuY3Rpb24gcmVhZExhdGluMVN0cmluZyhwdHIpe3ZhciByZXQ9XCJcIjt2YXIgYz1wdHI7d2hpbGUoSEVBUFU4W2NdKXtyZXQrPWVtYmluZF9jaGFyQ29kZXNbSEVBUFU4W2MrK11dfXJldHVybiByZXR9dmFyIEJpbmRpbmdFcnJvcj11bmRlZmluZWQ7ZnVuY3Rpb24gdGhyb3dCaW5kaW5nRXJyb3IobWVzc2FnZSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihtZXNzYWdlKX1mdW5jdGlvbiByZWdpc3RlclR5cGUocmF3VHlwZSxyZWdpc3RlcmVkSW5zdGFuY2Usb3B0aW9ucyl7b3B0aW9ucz1vcHRpb25zfHx7fTtpZighKFwiYXJnUGFja0FkdmFuY2VcImluIHJlZ2lzdGVyZWRJbnN0YW5jZSkpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJyZWdpc3RlclR5cGUgcmVnaXN0ZXJlZEluc3RhbmNlIHJlcXVpcmVzIGFyZ1BhY2tBZHZhbmNlXCIpfXZhciBuYW1lPXJlZ2lzdGVyZWRJbnN0YW5jZS5uYW1lO2lmKCFyYXdUeXBlKXt0aHJvd0JpbmRpbmdFcnJvcigndHlwZSBcIicrbmFtZSsnXCIgbXVzdCBoYXZlIGEgcG9zaXRpdmUgaW50ZWdlciB0eXBlaWQgcG9pbnRlcicpfWlmKHJlZ2lzdGVyZWRUeXBlcy5oYXNPd25Qcm9wZXJ0eShyYXdUeXBlKSl7aWYob3B0aW9ucy5pZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zKXtyZXR1cm59ZWxzZXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciB0eXBlICdcIituYW1lK1wiJyB0d2ljZVwiKX19cmVnaXN0ZXJlZFR5cGVzW3Jhd1R5cGVdPXJlZ2lzdGVyZWRJbnN0YW5jZTtkZWxldGUgdHlwZURlcGVuZGVuY2llc1tyYXdUeXBlXTtpZihhd2FpdGluZ0RlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShyYXdUeXBlKSl7dmFyIGNhbGxiYWNrcz1hd2FpdGluZ0RlcGVuZGVuY2llc1tyYXdUeXBlXTtkZWxldGUgYXdhaXRpbmdEZXBlbmRlbmNpZXNbcmF3VHlwZV07Y2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2Ipe2NiKCl9KX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfYm9vbChyYXdUeXBlLG5hbWUsc2l6ZSx0cnVlVmFsdWUsZmFsc2VWYWx1ZSl7dmFyIHNoaWZ0PWdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbih3dCl7cmV0dXJuISF3dH0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsbyl7cmV0dXJuIG8/dHJ1ZVZhbHVlOmZhbHNlVmFsdWV9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpmdW5jdGlvbihwb2ludGVyKXt2YXIgaGVhcDtpZihzaXplPT09MSl7aGVhcD1IRUFQOH1lbHNlIGlmKHNpemU9PT0yKXtoZWFwPUhFQVAxNn1lbHNlIGlmKHNpemU9PT00KXtoZWFwPUhFQVAzMn1lbHNle3Rocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGJvb2xlYW4gdHlwZSBzaXplOiBcIituYW1lKX1yZXR1cm4gdGhpc1tcImZyb21XaXJlVHlwZVwiXShoZWFwW3BvaW50ZXI+PnNoaWZ0XSl9LGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfaXNBbGlhc09mKG90aGVyKXtpZighKHRoaXMgaW5zdGFuY2VvZiBDbGFzc0hhbmRsZSkpe3JldHVybiBmYWxzZX1pZighKG90aGVyIGluc3RhbmNlb2YgQ2xhc3NIYW5kbGUpKXtyZXR1cm4gZmFsc2V9dmFyIGxlZnRDbGFzcz10aGlzLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3ZhciBsZWZ0PXRoaXMuJCQucHRyO3ZhciByaWdodENsYXNzPW90aGVyLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3ZhciByaWdodD1vdGhlci4kJC5wdHI7d2hpbGUobGVmdENsYXNzLmJhc2VDbGFzcyl7bGVmdD1sZWZ0Q2xhc3MudXBjYXN0KGxlZnQpO2xlZnRDbGFzcz1sZWZ0Q2xhc3MuYmFzZUNsYXNzfXdoaWxlKHJpZ2h0Q2xhc3MuYmFzZUNsYXNzKXtyaWdodD1yaWdodENsYXNzLnVwY2FzdChyaWdodCk7cmlnaHRDbGFzcz1yaWdodENsYXNzLmJhc2VDbGFzc31yZXR1cm4gbGVmdENsYXNzPT09cmlnaHRDbGFzcyYmbGVmdD09PXJpZ2h0fWZ1bmN0aW9uIHNoYWxsb3dDb3B5SW50ZXJuYWxQb2ludGVyKG8pe3JldHVybntjb3VudDpvLmNvdW50LGRlbGV0ZVNjaGVkdWxlZDpvLmRlbGV0ZVNjaGVkdWxlZCxwcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZTpvLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlLHB0cjpvLnB0cixwdHJUeXBlOm8ucHRyVHlwZSxzbWFydFB0cjpvLnNtYXJ0UHRyLHNtYXJ0UHRyVHlwZTpvLnNtYXJ0UHRyVHlwZX19ZnVuY3Rpb24gdGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKG9iail7ZnVuY3Rpb24gZ2V0SW5zdGFuY2VUeXBlTmFtZShoYW5kbGUpe3JldHVybiBoYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3MubmFtZX10aHJvd0JpbmRpbmdFcnJvcihnZXRJbnN0YW5jZVR5cGVOYW1lKG9iaikrXCIgaW5zdGFuY2UgYWxyZWFkeSBkZWxldGVkXCIpfXZhciBmaW5hbGl6YXRpb25Hcm91cD1mYWxzZTtmdW5jdGlvbiBkZXRhY2hGaW5hbGl6ZXIoaGFuZGxlKXt9ZnVuY3Rpb24gcnVuRGVzdHJ1Y3RvcigkJCl7aWYoJCQuc21hcnRQdHIpeyQkLnNtYXJ0UHRyVHlwZS5yYXdEZXN0cnVjdG9yKCQkLnNtYXJ0UHRyKX1lbHNleyQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLnJhd0Rlc3RydWN0b3IoJCQucHRyKX19ZnVuY3Rpb24gcmVsZWFzZUNsYXNzSGFuZGxlKCQkKXskJC5jb3VudC52YWx1ZS09MTt2YXIgdG9EZWxldGU9MD09PSQkLmNvdW50LnZhbHVlO2lmKHRvRGVsZXRlKXtydW5EZXN0cnVjdG9yKCQkKX19ZnVuY3Rpb24gYXR0YWNoRmluYWxpemVyKGhhbmRsZSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBGaW5hbGl6YXRpb25Hcm91cCl7YXR0YWNoRmluYWxpemVyPWZ1bmN0aW9uKGhhbmRsZSl7cmV0dXJuIGhhbmRsZX07cmV0dXJuIGhhbmRsZX1maW5hbGl6YXRpb25Hcm91cD1uZXcgRmluYWxpemF0aW9uR3JvdXAoZnVuY3Rpb24oaXRlcil7Zm9yKHZhciByZXN1bHQ9aXRlci5uZXh0KCk7IXJlc3VsdC5kb25lO3Jlc3VsdD1pdGVyLm5leHQoKSl7dmFyICQkPXJlc3VsdC52YWx1ZTtpZighJCQucHRyKXtjb25zb2xlLndhcm4oXCJvYmplY3QgYWxyZWFkeSBkZWxldGVkOiBcIiskJC5wdHIpfWVsc2V7cmVsZWFzZUNsYXNzSGFuZGxlKCQkKX19fSk7YXR0YWNoRmluYWxpemVyPWZ1bmN0aW9uKGhhbmRsZSl7ZmluYWxpemF0aW9uR3JvdXAucmVnaXN0ZXIoaGFuZGxlLGhhbmRsZS4kJCxoYW5kbGUuJCQpO3JldHVybiBoYW5kbGV9O2RldGFjaEZpbmFsaXplcj1mdW5jdGlvbihoYW5kbGUpe2ZpbmFsaXphdGlvbkdyb3VwLnVucmVnaXN0ZXIoaGFuZGxlLiQkKX07cmV0dXJuIGF0dGFjaEZpbmFsaXplcihoYW5kbGUpfWZ1bmN0aW9uIENsYXNzSGFuZGxlX2Nsb25lKCl7aWYoIXRoaXMuJCQucHRyKXt0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyl9aWYodGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhpcy4kJC5jb3VudC52YWx1ZSs9MTtyZXR1cm4gdGhpc31lbHNle3ZhciBjbG9uZT1hdHRhY2hGaW5hbGl6ZXIoT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykseyQkOnt2YWx1ZTpzaGFsbG93Q29weUludGVybmFsUG9pbnRlcih0aGlzLiQkKX19KSk7Y2xvbmUuJCQuY291bnQudmFsdWUrPTE7Y2xvbmUuJCQuZGVsZXRlU2NoZWR1bGVkPWZhbHNlO3JldHVybiBjbG9uZX19ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfZGVsZXRlKCl7aWYoIXRoaXMuJCQucHRyKXt0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyl9aWYodGhpcy4kJC5kZWxldGVTY2hlZHVsZWQmJiF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKXt0aHJvd0JpbmRpbmdFcnJvcihcIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb25cIil9ZGV0YWNoRmluYWxpemVyKHRoaXMpO3JlbGVhc2VDbGFzc0hhbmRsZSh0aGlzLiQkKTtpZighdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhpcy4kJC5zbWFydFB0cj11bmRlZmluZWQ7dGhpcy4kJC5wdHI9dW5kZWZpbmVkfX1mdW5jdGlvbiBDbGFzc0hhbmRsZV9pc0RlbGV0ZWQoKXtyZXR1cm4hdGhpcy4kJC5wdHJ9dmFyIGRlbGF5RnVuY3Rpb249dW5kZWZpbmVkO3ZhciBkZWxldGlvblF1ZXVlPVtdO2Z1bmN0aW9uIGZsdXNoUGVuZGluZ0RlbGV0ZXMoKXt3aGlsZShkZWxldGlvblF1ZXVlLmxlbmd0aCl7dmFyIG9iaj1kZWxldGlvblF1ZXVlLnBvcCgpO29iai4kJC5kZWxldGVTY2hlZHVsZWQ9ZmFsc2U7b2JqW1wiZGVsZXRlXCJdKCl9fWZ1bmN0aW9uIENsYXNzSGFuZGxlX2RlbGV0ZUxhdGVyKCl7aWYoIXRoaXMuJCQucHRyKXt0aHJvd0luc3RhbmNlQWxyZWFkeURlbGV0ZWQodGhpcyl9aWYodGhpcy4kJC5kZWxldGVTY2hlZHVsZWQmJiF0aGlzLiQkLnByZXNlcnZlUG9pbnRlck9uRGVsZXRlKXt0aHJvd0JpbmRpbmdFcnJvcihcIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb25cIil9ZGVsZXRpb25RdWV1ZS5wdXNoKHRoaXMpO2lmKGRlbGV0aW9uUXVldWUubGVuZ3RoPT09MSYmZGVsYXlGdW5jdGlvbil7ZGVsYXlGdW5jdGlvbihmbHVzaFBlbmRpbmdEZWxldGVzKX10aGlzLiQkLmRlbGV0ZVNjaGVkdWxlZD10cnVlO3JldHVybiB0aGlzfWZ1bmN0aW9uIGluaXRfQ2xhc3NIYW5kbGUoKXtDbGFzc0hhbmRsZS5wcm90b3R5cGVbXCJpc0FsaWFzT2ZcIl09Q2xhc3NIYW5kbGVfaXNBbGlhc09mO0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImNsb25lXCJdPUNsYXNzSGFuZGxlX2Nsb25lO0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImRlbGV0ZVwiXT1DbGFzc0hhbmRsZV9kZWxldGU7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiaXNEZWxldGVkXCJdPUNsYXNzSGFuZGxlX2lzRGVsZXRlZDtDbGFzc0hhbmRsZS5wcm90b3R5cGVbXCJkZWxldGVMYXRlclwiXT1DbGFzc0hhbmRsZV9kZWxldGVMYXRlcn1mdW5jdGlvbiBDbGFzc0hhbmRsZSgpe312YXIgcmVnaXN0ZXJlZFBvaW50ZXJzPXt9O2Z1bmN0aW9uIGVuc3VyZU92ZXJsb2FkVGFibGUocHJvdG8sbWV0aG9kTmFtZSxodW1hbk5hbWUpe2lmKHVuZGVmaW5lZD09PXByb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUpe3ZhciBwcmV2RnVuYz1wcm90b1ttZXRob2ROYW1lXTtwcm90b1ttZXRob2ROYW1lXT1mdW5jdGlvbigpe2lmKCFwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlLmhhc093blByb3BlcnR5KGFyZ3VtZW50cy5sZW5ndGgpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkZ1bmN0aW9uICdcIitodW1hbk5hbWUrXCInIGNhbGxlZCB3aXRoIGFuIGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cyAoXCIrYXJndW1lbnRzLmxlbmd0aCtcIikgLSBleHBlY3RzIG9uZSBvZiAoXCIrcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZStcIikhXCIpfXJldHVybiBwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW2FyZ3VtZW50cy5sZW5ndGhdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZT1bXTtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW3ByZXZGdW5jLmFyZ0NvdW50XT1wcmV2RnVuY319ZnVuY3Rpb24gZXhwb3NlUHVibGljU3ltYm9sKG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKXtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe2lmKHVuZGVmaW5lZD09PW51bUFyZ3VtZW50c3x8dW5kZWZpbmVkIT09TW9kdWxlW25hbWVdLm92ZXJsb2FkVGFibGUmJnVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c10pe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHJlZ2lzdGVyIHB1YmxpYyBuYW1lICdcIituYW1lK1wiJyB0d2ljZVwiKX1lbnN1cmVPdmVybG9hZFRhYmxlKE1vZHVsZSxuYW1lLG5hbWUpO2lmKE1vZHVsZS5oYXNPd25Qcm9wZXJ0eShudW1Bcmd1bWVudHMpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBvdmVybG9hZHMgb2YgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgKFwiK251bUFyZ3VtZW50cytcIikhXCIpfU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c109dmFsdWV9ZWxzZXtNb2R1bGVbbmFtZV09dmFsdWU7aWYodW5kZWZpbmVkIT09bnVtQXJndW1lbnRzKXtNb2R1bGVbbmFtZV0ubnVtQXJndW1lbnRzPW51bUFyZ3VtZW50c319fWZ1bmN0aW9uIFJlZ2lzdGVyZWRDbGFzcyhuYW1lLGNvbnN0cnVjdG9yLGluc3RhbmNlUHJvdG90eXBlLHJhd0Rlc3RydWN0b3IsYmFzZUNsYXNzLGdldEFjdHVhbFR5cGUsdXBjYXN0LGRvd25jYXN0KXt0aGlzLm5hbWU9bmFtZTt0aGlzLmNvbnN0cnVjdG9yPWNvbnN0cnVjdG9yO3RoaXMuaW5zdGFuY2VQcm90b3R5cGU9aW5zdGFuY2VQcm90b3R5cGU7dGhpcy5yYXdEZXN0cnVjdG9yPXJhd0Rlc3RydWN0b3I7dGhpcy5iYXNlQ2xhc3M9YmFzZUNsYXNzO3RoaXMuZ2V0QWN0dWFsVHlwZT1nZXRBY3R1YWxUeXBlO3RoaXMudXBjYXN0PXVwY2FzdDt0aGlzLmRvd25jYXN0PWRvd25jYXN0O3RoaXMucHVyZVZpcnR1YWxGdW5jdGlvbnM9W119ZnVuY3Rpb24gdXBjYXN0UG9pbnRlcihwdHIscHRyQ2xhc3MsZGVzaXJlZENsYXNzKXt3aGlsZShwdHJDbGFzcyE9PWRlc2lyZWRDbGFzcyl7aWYoIXB0ckNsYXNzLnVwY2FzdCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJFeHBlY3RlZCBudWxsIG9yIGluc3RhbmNlIG9mIFwiK2Rlc2lyZWRDbGFzcy5uYW1lK1wiLCBnb3QgYW4gaW5zdGFuY2Ugb2YgXCIrcHRyQ2xhc3MubmFtZSl9cHRyPXB0ckNsYXNzLnVwY2FzdChwdHIpO3B0ckNsYXNzPXB0ckNsYXNzLmJhc2VDbGFzc31yZXR1cm4gcHRyfWZ1bmN0aW9uIGNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlKGRlc3RydWN0b3JzLGhhbmRsZSl7aWYoaGFuZGxlPT09bnVsbCl7aWYodGhpcy5pc1JlZmVyZW5jZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJudWxsIGlzIG5vdCBhIHZhbGlkIFwiK3RoaXMubmFtZSl9cmV0dXJuIDB9aWYoIWhhbmRsZS4kJCl7dGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzIFwiJytfZW1iaW5kX3JlcHIoaGFuZGxlKSsnXCIgYXMgYSAnK3RoaXMubmFtZSl9aWYoIWhhbmRsZS4kJC5wdHIpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgXCIrdGhpcy5uYW1lKX12YXIgaGFuZGxlQ2xhc3M9aGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3ZhciBwdHI9dXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLGhhbmRsZUNsYXNzLHRoaXMucmVnaXN0ZXJlZENsYXNzKTtyZXR1cm4gcHRyfWZ1bmN0aW9uIGdlbmVyaWNQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycyxoYW5kbGUpe3ZhciBwdHI7aWYoaGFuZGxlPT09bnVsbCl7aWYodGhpcy5pc1JlZmVyZW5jZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJudWxsIGlzIG5vdCBhIHZhbGlkIFwiK3RoaXMubmFtZSl9aWYodGhpcy5pc1NtYXJ0UG9pbnRlcil7cHRyPXRoaXMucmF3Q29uc3RydWN0b3IoKTtpZihkZXN0cnVjdG9ycyE9PW51bGwpe2Rlc3RydWN0b3JzLnB1c2godGhpcy5yYXdEZXN0cnVjdG9yLHB0cil9cmV0dXJuIHB0cn1lbHNle3JldHVybiAwfX1pZighaGFuZGxlLiQkKXt0aHJvd0JpbmRpbmdFcnJvcignQ2Fubm90IHBhc3MgXCInK19lbWJpbmRfcmVwcihoYW5kbGUpKydcIiBhcyBhICcrdGhpcy5uYW1lKX1pZighaGFuZGxlLiQkLnB0cil7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSBcIit0aGlzLm5hbWUpfWlmKCF0aGlzLmlzQ29uc3QmJmhhbmRsZS4kJC5wdHJUeXBlLmlzQ29uc3Qpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSBcIisoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT9oYW5kbGUuJCQuc21hcnRQdHJUeXBlLm5hbWU6aGFuZGxlLiQkLnB0clR5cGUubmFtZSkrXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIrdGhpcy5uYW1lKX12YXIgaGFuZGxlQ2xhc3M9aGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3B0cj11cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsaGFuZGxlQ2xhc3MsdGhpcy5yZWdpc3RlcmVkQ2xhc3MpO2lmKHRoaXMuaXNTbWFydFBvaW50ZXIpe2lmKHVuZGVmaW5lZD09PWhhbmRsZS4kJC5zbWFydFB0cil7dGhyb3dCaW5kaW5nRXJyb3IoXCJQYXNzaW5nIHJhdyBwb2ludGVyIHRvIHNtYXJ0IHBvaW50ZXIgaXMgaWxsZWdhbFwiKX1zd2l0Y2godGhpcy5zaGFyaW5nUG9saWN5KXtjYXNlIDA6aWYoaGFuZGxlLiQkLnNtYXJ0UHRyVHlwZT09PXRoaXMpe3B0cj1oYW5kbGUuJCQuc21hcnRQdHJ9ZWxzZXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgXCIrKGhhbmRsZS4kJC5zbWFydFB0clR5cGU/aGFuZGxlLiQkLnNtYXJ0UHRyVHlwZS5uYW1lOmhhbmRsZS4kJC5wdHJUeXBlLm5hbWUpK1wiIHRvIHBhcmFtZXRlciB0eXBlIFwiK3RoaXMubmFtZSl9YnJlYWs7Y2FzZSAxOnB0cj1oYW5kbGUuJCQuc21hcnRQdHI7YnJlYWs7Y2FzZSAyOmlmKGhhbmRsZS4kJC5zbWFydFB0clR5cGU9PT10aGlzKXtwdHI9aGFuZGxlLiQkLnNtYXJ0UHRyfWVsc2V7dmFyIGNsb25lZEhhbmRsZT1oYW5kbGVbXCJjbG9uZVwiXSgpO3B0cj10aGlzLnJhd1NoYXJlKHB0cixfX2VtdmFsX3JlZ2lzdGVyKGZ1bmN0aW9uKCl7Y2xvbmVkSGFuZGxlW1wiZGVsZXRlXCJdKCl9KSk7aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvcixwdHIpfX1icmVhaztkZWZhdWx0OnRocm93QmluZGluZ0Vycm9yKFwiVW5zdXBwb3J0aW5nIHNoYXJpbmcgcG9saWN5XCIpfX1yZXR1cm4gcHRyfWZ1bmN0aW9uIG5vbkNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlKGRlc3RydWN0b3JzLGhhbmRsZSl7aWYoaGFuZGxlPT09bnVsbCl7aWYodGhpcy5pc1JlZmVyZW5jZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJudWxsIGlzIG5vdCBhIHZhbGlkIFwiK3RoaXMubmFtZSl9cmV0dXJuIDB9aWYoIWhhbmRsZS4kJCl7dGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzIFwiJytfZW1iaW5kX3JlcHIoaGFuZGxlKSsnXCIgYXMgYSAnK3RoaXMubmFtZSl9aWYoIWhhbmRsZS4kJC5wdHIpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgXCIrdGhpcy5uYW1lKX1pZihoYW5kbGUuJCQucHRyVHlwZS5pc0NvbnN0KXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgXCIraGFuZGxlLiQkLnB0clR5cGUubmFtZStcIiB0byBwYXJhbWV0ZXIgdHlwZSBcIit0aGlzLm5hbWUpfXZhciBoYW5kbGVDbGFzcz1oYW5kbGUuJCQucHRyVHlwZS5yZWdpc3RlcmVkQ2xhc3M7dmFyIHB0cj11cGNhc3RQb2ludGVyKGhhbmRsZS4kJC5wdHIsaGFuZGxlQ2xhc3MsdGhpcy5yZWdpc3RlcmVkQ2xhc3MpO3JldHVybiBwdHJ9ZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXJfZ2V0UG9pbnRlZShwdHIpe2lmKHRoaXMucmF3R2V0UG9pbnRlZSl7cHRyPXRoaXMucmF3R2V0UG9pbnRlZShwdHIpfXJldHVybiBwdHJ9ZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXJfZGVzdHJ1Y3RvcihwdHIpe2lmKHRoaXMucmF3RGVzdHJ1Y3Rvcil7dGhpcy5yYXdEZXN0cnVjdG9yKHB0cil9fWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2RlbGV0ZU9iamVjdChoYW5kbGUpe2lmKGhhbmRsZSE9PW51bGwpe2hhbmRsZVtcImRlbGV0ZVwiXSgpfX1mdW5jdGlvbiBkb3duY2FzdFBvaW50ZXIocHRyLHB0ckNsYXNzLGRlc2lyZWRDbGFzcyl7aWYocHRyQ2xhc3M9PT1kZXNpcmVkQ2xhc3Mpe3JldHVybiBwdHJ9aWYodW5kZWZpbmVkPT09ZGVzaXJlZENsYXNzLmJhc2VDbGFzcyl7cmV0dXJuIG51bGx9dmFyIHJ2PWRvd25jYXN0UG9pbnRlcihwdHIscHRyQ2xhc3MsZGVzaXJlZENsYXNzLmJhc2VDbGFzcyk7aWYocnY9PT1udWxsKXtyZXR1cm4gbnVsbH1yZXR1cm4gZGVzaXJlZENsYXNzLmRvd25jYXN0KHJ2KX1mdW5jdGlvbiBnZXRJbmhlcml0ZWRJbnN0YW5jZUNvdW50KCl7cmV0dXJuIE9iamVjdC5rZXlzKHJlZ2lzdGVyZWRJbnN0YW5jZXMpLmxlbmd0aH1mdW5jdGlvbiBnZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzKCl7dmFyIHJ2PVtdO2Zvcih2YXIgayBpbiByZWdpc3RlcmVkSW5zdGFuY2VzKXtpZihyZWdpc3RlcmVkSW5zdGFuY2VzLmhhc093blByb3BlcnR5KGspKXtydi5wdXNoKHJlZ2lzdGVyZWRJbnN0YW5jZXNba10pfX1yZXR1cm4gcnZ9ZnVuY3Rpb24gc2V0RGVsYXlGdW5jdGlvbihmbil7ZGVsYXlGdW5jdGlvbj1mbjtpZihkZWxldGlvblF1ZXVlLmxlbmd0aCYmZGVsYXlGdW5jdGlvbil7ZGVsYXlGdW5jdGlvbihmbHVzaFBlbmRpbmdEZWxldGVzKX19ZnVuY3Rpb24gaW5pdF9lbWJpbmQoKXtNb2R1bGVbXCJnZXRJbmhlcml0ZWRJbnN0YW5jZUNvdW50XCJdPWdldEluaGVyaXRlZEluc3RhbmNlQ291bnQ7TW9kdWxlW1wiZ2V0TGl2ZUluaGVyaXRlZEluc3RhbmNlc1wiXT1nZXRMaXZlSW5oZXJpdGVkSW5zdGFuY2VzO01vZHVsZVtcImZsdXNoUGVuZGluZ0RlbGV0ZXNcIl09Zmx1c2hQZW5kaW5nRGVsZXRlcztNb2R1bGVbXCJzZXREZWxheUZ1bmN0aW9uXCJdPXNldERlbGF5RnVuY3Rpb259dmFyIHJlZ2lzdGVyZWRJbnN0YW5jZXM9e307ZnVuY3Rpb24gZ2V0QmFzZXN0UG9pbnRlcihjbGFzc18scHRyKXtpZihwdHI9PT11bmRlZmluZWQpe3Rocm93QmluZGluZ0Vycm9yKFwicHRyIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkXCIpfXdoaWxlKGNsYXNzXy5iYXNlQ2xhc3Mpe3B0cj1jbGFzc18udXBjYXN0KHB0cik7Y2xhc3NfPWNsYXNzXy5iYXNlQ2xhc3N9cmV0dXJuIHB0cn1mdW5jdGlvbiBnZXRJbmhlcml0ZWRJbnN0YW5jZShjbGFzc18scHRyKXtwdHI9Z2V0QmFzZXN0UG9pbnRlcihjbGFzc18scHRyKTtyZXR1cm4gcmVnaXN0ZXJlZEluc3RhbmNlc1twdHJdfWZ1bmN0aW9uIG1ha2VDbGFzc0hhbmRsZShwcm90b3R5cGUscmVjb3JkKXtpZighcmVjb3JkLnB0clR5cGV8fCFyZWNvcmQucHRyKXt0aHJvd0ludGVybmFsRXJyb3IoXCJtYWtlQ2xhc3NIYW5kbGUgcmVxdWlyZXMgcHRyIGFuZCBwdHJUeXBlXCIpfXZhciBoYXNTbWFydFB0clR5cGU9ISFyZWNvcmQuc21hcnRQdHJUeXBlO3ZhciBoYXNTbWFydFB0cj0hIXJlY29yZC5zbWFydFB0cjtpZihoYXNTbWFydFB0clR5cGUhPT1oYXNTbWFydFB0cil7dGhyb3dJbnRlcm5hbEVycm9yKFwiQm90aCBzbWFydFB0clR5cGUgYW5kIHNtYXJ0UHRyIG11c3QgYmUgc3BlY2lmaWVkXCIpfXJlY29yZC5jb3VudD17dmFsdWU6MX07cmV0dXJuIGF0dGFjaEZpbmFsaXplcihPYmplY3QuY3JlYXRlKHByb3RvdHlwZSx7JCQ6e3ZhbHVlOnJlY29yZH19KSl9ZnVuY3Rpb24gUmVnaXN0ZXJlZFBvaW50ZXJfZnJvbVdpcmVUeXBlKHB0cil7dmFyIHJhd1BvaW50ZXI9dGhpcy5nZXRQb2ludGVlKHB0cik7aWYoIXJhd1BvaW50ZXIpe3RoaXMuZGVzdHJ1Y3RvcihwdHIpO3JldHVybiBudWxsfXZhciByZWdpc3RlcmVkSW5zdGFuY2U9Z2V0SW5oZXJpdGVkSW5zdGFuY2UodGhpcy5yZWdpc3RlcmVkQ2xhc3MscmF3UG9pbnRlcik7aWYodW5kZWZpbmVkIT09cmVnaXN0ZXJlZEluc3RhbmNlKXtpZigwPT09cmVnaXN0ZXJlZEluc3RhbmNlLiQkLmNvdW50LnZhbHVlKXtyZWdpc3RlcmVkSW5zdGFuY2UuJCQucHRyPXJhd1BvaW50ZXI7cmVnaXN0ZXJlZEluc3RhbmNlLiQkLnNtYXJ0UHRyPXB0cjtyZXR1cm4gcmVnaXN0ZXJlZEluc3RhbmNlW1wiY2xvbmVcIl0oKX1lbHNle3ZhciBydj1yZWdpc3RlcmVkSW5zdGFuY2VbXCJjbG9uZVwiXSgpO3RoaXMuZGVzdHJ1Y3RvcihwdHIpO3JldHVybiBydn19ZnVuY3Rpb24gbWFrZURlZmF1bHRIYW5kbGUoKXtpZih0aGlzLmlzU21hcnRQb2ludGVyKXtyZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRoaXMucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLHtwdHJUeXBlOnRoaXMucG9pbnRlZVR5cGUscHRyOnJhd1BvaW50ZXIsc21hcnRQdHJUeXBlOnRoaXMsc21hcnRQdHI6cHRyfSl9ZWxzZXtyZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRoaXMucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLHtwdHJUeXBlOnRoaXMscHRyOnB0cn0pfX12YXIgYWN0dWFsVHlwZT10aGlzLnJlZ2lzdGVyZWRDbGFzcy5nZXRBY3R1YWxUeXBlKHJhd1BvaW50ZXIpO3ZhciByZWdpc3RlcmVkUG9pbnRlclJlY29yZD1yZWdpc3RlcmVkUG9pbnRlcnNbYWN0dWFsVHlwZV07aWYoIXJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkKXtyZXR1cm4gbWFrZURlZmF1bHRIYW5kbGUuY2FsbCh0aGlzKX12YXIgdG9UeXBlO2lmKHRoaXMuaXNDb25zdCl7dG9UeXBlPXJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkLmNvbnN0UG9pbnRlclR5cGV9ZWxzZXt0b1R5cGU9cmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQucG9pbnRlclR5cGV9dmFyIGRwPWRvd25jYXN0UG9pbnRlcihyYXdQb2ludGVyLHRoaXMucmVnaXN0ZXJlZENsYXNzLHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MpO2lmKGRwPT09bnVsbCl7cmV0dXJuIG1ha2VEZWZhdWx0SGFuZGxlLmNhbGwodGhpcyl9aWYodGhpcy5pc1NtYXJ0UG9pbnRlcil7cmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0b1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLHtwdHJUeXBlOnRvVHlwZSxwdHI6ZHAsc21hcnRQdHJUeXBlOnRoaXMsc21hcnRQdHI6cHRyfSl9ZWxzZXtyZXR1cm4gbWFrZUNsYXNzSGFuZGxlKHRvVHlwZS5yZWdpc3RlcmVkQ2xhc3MuaW5zdGFuY2VQcm90b3R5cGUse3B0clR5cGU6dG9UeXBlLHB0cjpkcH0pfX1mdW5jdGlvbiBpbml0X1JlZ2lzdGVyZWRQb2ludGVyKCl7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlLmdldFBvaW50ZWU9UmVnaXN0ZXJlZFBvaW50ZXJfZ2V0UG9pbnRlZTtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGUuZGVzdHJ1Y3Rvcj1SZWdpc3RlcmVkUG9pbnRlcl9kZXN0cnVjdG9yO1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVtcImFyZ1BhY2tBZHZhbmNlXCJdPTg7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlW1wicmVhZFZhbHVlRnJvbVBvaW50ZXJcIl09c2ltcGxlUmVhZFZhbHVlRnJvbVBvaW50ZXI7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlW1wiZGVsZXRlT2JqZWN0XCJdPVJlZ2lzdGVyZWRQb2ludGVyX2RlbGV0ZU9iamVjdDtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbXCJmcm9tV2lyZVR5cGVcIl09UmVnaXN0ZXJlZFBvaW50ZXJfZnJvbVdpcmVUeXBlfWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUscmVnaXN0ZXJlZENsYXNzLGlzUmVmZXJlbmNlLGlzQ29uc3QsaXNTbWFydFBvaW50ZXIscG9pbnRlZVR5cGUsc2hhcmluZ1BvbGljeSxyYXdHZXRQb2ludGVlLHJhd0NvbnN0cnVjdG9yLHJhd1NoYXJlLHJhd0Rlc3RydWN0b3Ipe3RoaXMubmFtZT1uYW1lO3RoaXMucmVnaXN0ZXJlZENsYXNzPXJlZ2lzdGVyZWRDbGFzczt0aGlzLmlzUmVmZXJlbmNlPWlzUmVmZXJlbmNlO3RoaXMuaXNDb25zdD1pc0NvbnN0O3RoaXMuaXNTbWFydFBvaW50ZXI9aXNTbWFydFBvaW50ZXI7dGhpcy5wb2ludGVlVHlwZT1wb2ludGVlVHlwZTt0aGlzLnNoYXJpbmdQb2xpY3k9c2hhcmluZ1BvbGljeTt0aGlzLnJhd0dldFBvaW50ZWU9cmF3R2V0UG9pbnRlZTt0aGlzLnJhd0NvbnN0cnVjdG9yPXJhd0NvbnN0cnVjdG9yO3RoaXMucmF3U2hhcmU9cmF3U2hhcmU7dGhpcy5yYXdEZXN0cnVjdG9yPXJhd0Rlc3RydWN0b3I7aWYoIWlzU21hcnRQb2ludGVyJiZyZWdpc3RlcmVkQ2xhc3MuYmFzZUNsYXNzPT09dW5kZWZpbmVkKXtpZihpc0NvbnN0KXt0aGlzW1widG9XaXJlVHlwZVwiXT1jb25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZTt0aGlzLmRlc3RydWN0b3JGdW5jdGlvbj1udWxsfWVsc2V7dGhpc1tcInRvV2lyZVR5cGVcIl09bm9uQ29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGU7dGhpcy5kZXN0cnVjdG9yRnVuY3Rpb249bnVsbH19ZWxzZXt0aGlzW1widG9XaXJlVHlwZVwiXT1nZW5lcmljUG9pbnRlclRvV2lyZVR5cGV9fWZ1bmN0aW9uIHJlcGxhY2VQdWJsaWNTeW1ib2wobmFtZSx2YWx1ZSxudW1Bcmd1bWVudHMpe2lmKCFNb2R1bGUuaGFzT3duUHJvcGVydHkobmFtZSkpe3Rocm93SW50ZXJuYWxFcnJvcihcIlJlcGxhY2luZyBub25leGlzdGFudCBwdWJsaWMgc3ltYm9sXCIpfWlmKHVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlJiZ1bmRlZmluZWQhPT1udW1Bcmd1bWVudHMpe01vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlW251bUFyZ3VtZW50c109dmFsdWV9ZWxzZXtNb2R1bGVbbmFtZV09dmFsdWU7TW9kdWxlW25hbWVdLmFyZ0NvdW50PW51bUFyZ3VtZW50c319ZnVuY3Rpb24gZHluQ2FsbExlZ2FjeShzaWcscHRyLGFyZ3Mpe3ZhciBmPU1vZHVsZVtcImR5bkNhbGxfXCIrc2lnXTtyZXR1cm4gYXJncyYmYXJncy5sZW5ndGg/Zi5hcHBseShudWxsLFtwdHJdLmNvbmNhdChhcmdzKSk6Zi5jYWxsKG51bGwscHRyKX1mdW5jdGlvbiBkeW5DYWxsKHNpZyxwdHIsYXJncyl7aWYoc2lnLmluZGV4T2YoXCJqXCIpIT0tMSl7cmV0dXJuIGR5bkNhbGxMZWdhY3koc2lnLHB0cixhcmdzKX1yZXR1cm4gd2FzbVRhYmxlLmdldChwdHIpLmFwcGx5KG51bGwsYXJncyl9ZnVuY3Rpb24gZ2V0RHluQ2FsbGVyKHNpZyxwdHIpe3ZhciBhcmdDYWNoZT1bXTtyZXR1cm4gZnVuY3Rpb24oKXthcmdDYWNoZS5sZW5ndGg9YXJndW1lbnRzLmxlbmd0aDtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXthcmdDYWNoZVtpXT1hcmd1bWVudHNbaV19cmV0dXJuIGR5bkNhbGwoc2lnLHB0cixhcmdDYWNoZSl9fWZ1bmN0aW9uIGVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNpZ25hdHVyZSxyYXdGdW5jdGlvbil7c2lnbmF0dXJlPXJlYWRMYXRpbjFTdHJpbmcoc2lnbmF0dXJlKTtmdW5jdGlvbiBtYWtlRHluQ2FsbGVyKCl7aWYoc2lnbmF0dXJlLmluZGV4T2YoXCJqXCIpIT0tMSl7cmV0dXJuIGdldER5bkNhbGxlcihzaWduYXR1cmUscmF3RnVuY3Rpb24pfXJldHVybiB3YXNtVGFibGUuZ2V0KHJhd0Z1bmN0aW9uKX12YXIgZnA9bWFrZUR5bkNhbGxlcigpO2lmKHR5cGVvZiBmcCE9PVwiZnVuY3Rpb25cIil7dGhyb3dCaW5kaW5nRXJyb3IoXCJ1bmtub3duIGZ1bmN0aW9uIHBvaW50ZXIgd2l0aCBzaWduYXR1cmUgXCIrc2lnbmF0dXJlK1wiOiBcIityYXdGdW5jdGlvbil9cmV0dXJuIGZwfXZhciBVbmJvdW5kVHlwZUVycm9yPXVuZGVmaW5lZDtmdW5jdGlvbiBnZXRUeXBlTmFtZSh0eXBlKXt2YXIgcHRyPV9fX2dldFR5cGVOYW1lKHR5cGUpO3ZhciBydj1yZWFkTGF0aW4xU3RyaW5nKHB0cik7X2ZyZWUocHRyKTtyZXR1cm4gcnZ9ZnVuY3Rpb24gdGhyb3dVbmJvdW5kVHlwZUVycm9yKG1lc3NhZ2UsdHlwZXMpe3ZhciB1bmJvdW5kVHlwZXM9W107dmFyIHNlZW49e307ZnVuY3Rpb24gdmlzaXQodHlwZSl7aWYoc2Vlblt0eXBlXSl7cmV0dXJufWlmKHJlZ2lzdGVyZWRUeXBlc1t0eXBlXSl7cmV0dXJufWlmKHR5cGVEZXBlbmRlbmNpZXNbdHlwZV0pe3R5cGVEZXBlbmRlbmNpZXNbdHlwZV0uZm9yRWFjaCh2aXNpdCk7cmV0dXJufXVuYm91bmRUeXBlcy5wdXNoKHR5cGUpO3NlZW5bdHlwZV09dHJ1ZX10eXBlcy5mb3JFYWNoKHZpc2l0KTt0aHJvdyBuZXcgVW5ib3VuZFR5cGVFcnJvcihtZXNzYWdlK1wiOiBcIit1bmJvdW5kVHlwZXMubWFwKGdldFR5cGVOYW1lKS5qb2luKFtcIiwgXCJdKSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3MocmF3VHlwZSxyYXdQb2ludGVyVHlwZSxyYXdDb25zdFBvaW50ZXJUeXBlLGJhc2VDbGFzc1Jhd1R5cGUsZ2V0QWN0dWFsVHlwZVNpZ25hdHVyZSxnZXRBY3R1YWxUeXBlLHVwY2FzdFNpZ25hdHVyZSx1cGNhc3QsZG93bmNhc3RTaWduYXR1cmUsZG93bmNhc3QsbmFtZSxkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3Ipe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtnZXRBY3R1YWxUeXBlPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGdldEFjdHVhbFR5cGVTaWduYXR1cmUsZ2V0QWN0dWFsVHlwZSk7aWYodXBjYXN0KXt1cGNhc3Q9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24odXBjYXN0U2lnbmF0dXJlLHVwY2FzdCl9aWYoZG93bmNhc3Qpe2Rvd25jYXN0PWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGRvd25jYXN0U2lnbmF0dXJlLGRvd25jYXN0KX1yYXdEZXN0cnVjdG9yPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGRlc3RydWN0b3JTaWduYXR1cmUscmF3RGVzdHJ1Y3Rvcik7dmFyIGxlZ2FsRnVuY3Rpb25OYW1lPW1ha2VMZWdhbEZ1bmN0aW9uTmFtZShuYW1lKTtleHBvc2VQdWJsaWNTeW1ib2wobGVnYWxGdW5jdGlvbk5hbWUsZnVuY3Rpb24oKXt0aHJvd1VuYm91bmRUeXBlRXJyb3IoXCJDYW5ub3QgY29uc3RydWN0IFwiK25hbWUrXCIgZHVlIHRvIHVuYm91bmQgdHlwZXNcIixbYmFzZUNsYXNzUmF3VHlwZV0pfSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW3Jhd1R5cGUscmF3UG9pbnRlclR5cGUscmF3Q29uc3RQb2ludGVyVHlwZV0sYmFzZUNsYXNzUmF3VHlwZT9bYmFzZUNsYXNzUmF3VHlwZV06W10sZnVuY3Rpb24oYmFzZSl7YmFzZT1iYXNlWzBdO3ZhciBiYXNlQ2xhc3M7dmFyIGJhc2VQcm90b3R5cGU7aWYoYmFzZUNsYXNzUmF3VHlwZSl7YmFzZUNsYXNzPWJhc2UucmVnaXN0ZXJlZENsYXNzO2Jhc2VQcm90b3R5cGU9YmFzZUNsYXNzLmluc3RhbmNlUHJvdG90eXBlfWVsc2V7YmFzZVByb3RvdHlwZT1DbGFzc0hhbmRsZS5wcm90b3R5cGV9dmFyIGNvbnN0cnVjdG9yPWNyZWF0ZU5hbWVkRnVuY3Rpb24obGVnYWxGdW5jdGlvbk5hbWUsZnVuY3Rpb24oKXtpZihPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykhPT1pbnN0YW5jZVByb3RvdHlwZSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihcIlVzZSAnbmV3JyB0byBjb25zdHJ1Y3QgXCIrbmFtZSl9aWYodW5kZWZpbmVkPT09cmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IobmFtZStcIiBoYXMgbm8gYWNjZXNzaWJsZSBjb25zdHJ1Y3RvclwiKX12YXIgYm9keT1yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmd1bWVudHMubGVuZ3RoXTtpZih1bmRlZmluZWQ9PT1ib2R5KXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKFwiVHJpZWQgdG8gaW52b2tlIGN0b3Igb2YgXCIrbmFtZStcIiB3aXRoIGludmFsaWQgbnVtYmVyIG9mIHBhcmFtZXRlcnMgKFwiK2FyZ3VtZW50cy5sZW5ndGgrXCIpIC0gZXhwZWN0ZWQgKFwiK09iamVjdC5rZXlzKHJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KS50b1N0cmluZygpK1wiKSBwYXJhbWV0ZXJzIGluc3RlYWQhXCIpfXJldHVybiBib2R5LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO3ZhciBpbnN0YW5jZVByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGJhc2VQcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpjb25zdHJ1Y3Rvcn19KTtjb25zdHJ1Y3Rvci5wcm90b3R5cGU9aW5zdGFuY2VQcm90b3R5cGU7dmFyIHJlZ2lzdGVyZWRDbGFzcz1uZXcgUmVnaXN0ZXJlZENsYXNzKG5hbWUsY29uc3RydWN0b3IsaW5zdGFuY2VQcm90b3R5cGUscmF3RGVzdHJ1Y3RvcixiYXNlQ2xhc3MsZ2V0QWN0dWFsVHlwZSx1cGNhc3QsZG93bmNhc3QpO3ZhciByZWZlcmVuY2VDb252ZXJ0ZXI9bmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUscmVnaXN0ZXJlZENsYXNzLHRydWUsZmFsc2UsZmFsc2UpO3ZhciBwb2ludGVyQ29udmVydGVyPW5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lK1wiKlwiLHJlZ2lzdGVyZWRDbGFzcyxmYWxzZSxmYWxzZSxmYWxzZSk7dmFyIGNvbnN0UG9pbnRlckNvbnZlcnRlcj1uZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZStcIiBjb25zdCpcIixyZWdpc3RlcmVkQ2xhc3MsZmFsc2UsdHJ1ZSxmYWxzZSk7cmVnaXN0ZXJlZFBvaW50ZXJzW3Jhd1R5cGVdPXtwb2ludGVyVHlwZTpwb2ludGVyQ29udmVydGVyLGNvbnN0UG9pbnRlclR5cGU6Y29uc3RQb2ludGVyQ29udmVydGVyfTtyZXBsYWNlUHVibGljU3ltYm9sKGxlZ2FsRnVuY3Rpb25OYW1lLGNvbnN0cnVjdG9yKTtyZXR1cm5bcmVmZXJlbmNlQ29udmVydGVyLHBvaW50ZXJDb252ZXJ0ZXIsY29uc3RQb2ludGVyQ29udmVydGVyXX0pfWZ1bmN0aW9uIGhlYXAzMlZlY3RvclRvQXJyYXkoY291bnQsZmlyc3RFbGVtZW50KXt2YXIgYXJyYXk9W107Zm9yKHZhciBpPTA7aTxjb3VudDtpKyspe2FycmF5LnB1c2goSEVBUDMyWyhmaXJzdEVsZW1lbnQ+PjIpK2ldKX1yZXR1cm4gYXJyYXl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfY29uc3RydWN0b3IocmF3Q2xhc3NUeXBlLGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcixpbnZva2VyU2lnbmF0dXJlLGludm9rZXIscmF3Q29uc3RydWN0b3Ipe2Fzc2VydChhcmdDb3VudD4wKTt2YXIgcmF3QXJnVHlwZXM9aGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIpO2ludm9rZXI9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oaW52b2tlclNpZ25hdHVyZSxpbnZva2VyKTt2YXIgYXJncz1bcmF3Q29uc3RydWN0b3JdO3ZhciBkZXN0cnVjdG9ycz1bXTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxbcmF3Q2xhc3NUeXBlXSxmdW5jdGlvbihjbGFzc1R5cGUpe2NsYXNzVHlwZT1jbGFzc1R5cGVbMF07dmFyIGh1bWFuTmFtZT1cImNvbnN0cnVjdG9yIFwiK2NsYXNzVHlwZS5uYW1lO2lmKHVuZGVmaW5lZD09PWNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSl7Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5PVtdfWlmKHVuZGVmaW5lZCE9PWNsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmdDb3VudC0xXSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciBtdWx0aXBsZSBjb25zdHJ1Y3RvcnMgd2l0aCBpZGVudGljYWwgbnVtYmVyIG9mIHBhcmFtZXRlcnMgKFwiKyhhcmdDb3VudC0xKStcIikgZm9yIGNsYXNzICdcIitjbGFzc1R5cGUubmFtZStcIichIE92ZXJsb2FkIHJlc29sdXRpb24gaXMgY3VycmVudGx5IG9ubHkgcGVyZm9ybWVkIHVzaW5nIHRoZSBwYXJhbWV0ZXIgY291bnQsIG5vdCBhY3R1YWwgdHlwZSBpbmZvIVwiKX1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQtMV09ZnVuY3Rpb24gdW5ib3VuZFR5cGVIYW5kbGVyKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNvbnN0cnVjdCBcIitjbGFzc1R5cGUubmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLHJhd0FyZ1R5cGVzKX07d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10scmF3QXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe2NsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keVthcmdDb3VudC0xXT1mdW5jdGlvbiBjb25zdHJ1Y3Rvcl9ib2R5KCl7aWYoYXJndW1lbnRzLmxlbmd0aCE9PWFyZ0NvdW50LTEpe3Rocm93QmluZGluZ0Vycm9yKGh1bWFuTmFtZStcIiBjYWxsZWQgd2l0aCBcIithcmd1bWVudHMubGVuZ3RoK1wiIGFyZ3VtZW50cywgZXhwZWN0ZWQgXCIrKGFyZ0NvdW50LTEpKX1kZXN0cnVjdG9ycy5sZW5ndGg9MDthcmdzLmxlbmd0aD1hcmdDb3VudDtmb3IodmFyIGk9MTtpPGFyZ0NvdW50OysraSl7YXJnc1tpXT1hcmdUeXBlc1tpXVtcInRvV2lyZVR5cGVcIl0oZGVzdHJ1Y3RvcnMsYXJndW1lbnRzW2ktMV0pfXZhciBwdHI9aW52b2tlci5hcHBseShudWxsLGFyZ3MpO3J1bkRlc3RydWN0b3JzKGRlc3RydWN0b3JzKTtyZXR1cm4gYXJnVHlwZXNbMF1bXCJmcm9tV2lyZVR5cGVcIl0ocHRyKX07cmV0dXJuW119KTtyZXR1cm5bXX0pfWZ1bmN0aW9uIG5ld18oY29uc3RydWN0b3IsYXJndW1lbnRMaXN0KXtpZighKGNvbnN0cnVjdG9yIGluc3RhbmNlb2YgRnVuY3Rpb24pKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwibmV3XyBjYWxsZWQgd2l0aCBjb25zdHJ1Y3RvciB0eXBlIFwiK3R5cGVvZiBjb25zdHJ1Y3RvcitcIiB3aGljaCBpcyBub3QgYSBmdW5jdGlvblwiKX12YXIgZHVtbXk9Y3JlYXRlTmFtZWRGdW5jdGlvbihjb25zdHJ1Y3Rvci5uYW1lfHxcInVua25vd25GdW5jdGlvbk5hbWVcIixmdW5jdGlvbigpe30pO2R1bW15LnByb3RvdHlwZT1jb25zdHJ1Y3Rvci5wcm90b3R5cGU7dmFyIG9iaj1uZXcgZHVtbXk7dmFyIHI9Y29uc3RydWN0b3IuYXBwbHkob2JqLGFyZ3VtZW50TGlzdCk7cmV0dXJuIHIgaW5zdGFuY2VvZiBPYmplY3Q/cjpvYmp9ZnVuY3Rpb24gY3JhZnRJbnZva2VyRnVuY3Rpb24oaHVtYW5OYW1lLGFyZ1R5cGVzLGNsYXNzVHlwZSxjcHBJbnZva2VyRnVuYyxjcHBUYXJnZXRGdW5jKXt2YXIgYXJnQ291bnQ9YXJnVHlwZXMubGVuZ3RoO2lmKGFyZ0NvdW50PDIpe3Rocm93QmluZGluZ0Vycm9yKFwiYXJnVHlwZXMgYXJyYXkgc2l6ZSBtaXNtYXRjaCEgTXVzdCBhdCBsZWFzdCBnZXQgcmV0dXJuIHZhbHVlIGFuZCAndGhpcycgdHlwZXMhXCIpfXZhciBpc0NsYXNzTWV0aG9kRnVuYz1hcmdUeXBlc1sxXSE9PW51bGwmJmNsYXNzVHlwZSE9PW51bGw7dmFyIG5lZWRzRGVzdHJ1Y3RvclN0YWNrPWZhbHNlO2Zvcih2YXIgaT0xO2k8YXJnVHlwZXMubGVuZ3RoOysraSl7aWYoYXJnVHlwZXNbaV0hPT1udWxsJiZhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb249PT11bmRlZmluZWQpe25lZWRzRGVzdHJ1Y3RvclN0YWNrPXRydWU7YnJlYWt9fXZhciByZXR1cm5zPWFyZ1R5cGVzWzBdLm5hbWUhPT1cInZvaWRcIjt2YXIgYXJnc0xpc3Q9XCJcIjt2YXIgYXJnc0xpc3RXaXJlZD1cIlwiO2Zvcih2YXIgaT0wO2k8YXJnQ291bnQtMjsrK2kpe2FyZ3NMaXN0Kz0oaSE9PTA/XCIsIFwiOlwiXCIpK1wiYXJnXCIraTthcmdzTGlzdFdpcmVkKz0oaSE9PTA/XCIsIFwiOlwiXCIpK1wiYXJnXCIraStcIldpcmVkXCJ9dmFyIGludm9rZXJGbkJvZHk9XCJyZXR1cm4gZnVuY3Rpb24gXCIrbWFrZUxlZ2FsRnVuY3Rpb25OYW1lKGh1bWFuTmFtZSkrXCIoXCIrYXJnc0xpc3QrXCIpIHtcXG5cIitcImlmIChhcmd1bWVudHMubGVuZ3RoICE9PSBcIisoYXJnQ291bnQtMikrXCIpIHtcXG5cIitcInRocm93QmluZGluZ0Vycm9yKCdmdW5jdGlvbiBcIitodW1hbk5hbWUrXCIgY2FsbGVkIHdpdGggJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIGFyZ3VtZW50cywgZXhwZWN0ZWQgXCIrKGFyZ0NvdW50LTIpK1wiIGFyZ3MhJyk7XFxuXCIrXCJ9XFxuXCI7aWYobmVlZHNEZXN0cnVjdG9yU3RhY2spe2ludm9rZXJGbkJvZHkrPVwidmFyIGRlc3RydWN0b3JzID0gW107XFxuXCJ9dmFyIGR0b3JTdGFjaz1uZWVkc0Rlc3RydWN0b3JTdGFjaz9cImRlc3RydWN0b3JzXCI6XCJudWxsXCI7dmFyIGFyZ3MxPVtcInRocm93QmluZGluZ0Vycm9yXCIsXCJpbnZva2VyXCIsXCJmblwiLFwicnVuRGVzdHJ1Y3RvcnNcIixcInJldFR5cGVcIixcImNsYXNzUGFyYW1cIl07dmFyIGFyZ3MyPVt0aHJvd0JpbmRpbmdFcnJvcixjcHBJbnZva2VyRnVuYyxjcHBUYXJnZXRGdW5jLHJ1bkRlc3RydWN0b3JzLGFyZ1R5cGVzWzBdLGFyZ1R5cGVzWzFdXTtpZihpc0NsYXNzTWV0aG9kRnVuYyl7aW52b2tlckZuQm9keSs9XCJ2YXIgdGhpc1dpcmVkID0gY2xhc3NQYXJhbS50b1dpcmVUeXBlKFwiK2R0b3JTdGFjaytcIiwgdGhpcyk7XFxuXCJ9Zm9yKHZhciBpPTA7aTxhcmdDb3VudC0yOysraSl7aW52b2tlckZuQm9keSs9XCJ2YXIgYXJnXCIraStcIldpcmVkID0gYXJnVHlwZVwiK2krXCIudG9XaXJlVHlwZShcIitkdG9yU3RhY2srXCIsIGFyZ1wiK2krXCIpOyAvLyBcIithcmdUeXBlc1tpKzJdLm5hbWUrXCJcXG5cIjthcmdzMS5wdXNoKFwiYXJnVHlwZVwiK2kpO2FyZ3MyLnB1c2goYXJnVHlwZXNbaSsyXSl9aWYoaXNDbGFzc01ldGhvZEZ1bmMpe2FyZ3NMaXN0V2lyZWQ9XCJ0aGlzV2lyZWRcIisoYXJnc0xpc3RXaXJlZC5sZW5ndGg+MD9cIiwgXCI6XCJcIikrYXJnc0xpc3RXaXJlZH1pbnZva2VyRm5Cb2R5Kz0ocmV0dXJucz9cInZhciBydiA9IFwiOlwiXCIpK1wiaW52b2tlcihmblwiKyhhcmdzTGlzdFdpcmVkLmxlbmd0aD4wP1wiLCBcIjpcIlwiKSthcmdzTGlzdFdpcmVkK1wiKTtcXG5cIjtpZihuZWVkc0Rlc3RydWN0b3JTdGFjayl7aW52b2tlckZuQm9keSs9XCJydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7XFxuXCJ9ZWxzZXtmb3IodmFyIGk9aXNDbGFzc01ldGhvZEZ1bmM/MToyO2k8YXJnVHlwZXMubGVuZ3RoOysraSl7dmFyIHBhcmFtTmFtZT1pPT09MT9cInRoaXNXaXJlZFwiOlwiYXJnXCIrKGktMikrXCJXaXJlZFwiO2lmKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbiE9PW51bGwpe2ludm9rZXJGbkJvZHkrPXBhcmFtTmFtZStcIl9kdG9yKFwiK3BhcmFtTmFtZStcIik7IC8vIFwiK2FyZ1R5cGVzW2ldLm5hbWUrXCJcXG5cIjthcmdzMS5wdXNoKHBhcmFtTmFtZStcIl9kdG9yXCIpO2FyZ3MyLnB1c2goYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uKX19fWlmKHJldHVybnMpe2ludm9rZXJGbkJvZHkrPVwidmFyIHJldCA9IHJldFR5cGUuZnJvbVdpcmVUeXBlKHJ2KTtcXG5cIitcInJldHVybiByZXQ7XFxuXCJ9ZWxzZXt9aW52b2tlckZuQm9keSs9XCJ9XFxuXCI7YXJnczEucHVzaChpbnZva2VyRm5Cb2R5KTt2YXIgaW52b2tlckZ1bmN0aW9uPW5ld18oRnVuY3Rpb24sYXJnczEpLmFwcGx5KG51bGwsYXJnczIpO3JldHVybiBpbnZva2VyRnVuY3Rpb259ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24ocmF3Q2xhc3NUeXBlLG1ldGhvZE5hbWUsYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyLGludm9rZXJTaWduYXR1cmUscmF3SW52b2tlcixjb250ZXh0LGlzUHVyZVZpcnR1YWwpe3ZhciByYXdBcmdUeXBlcz1oZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcik7bWV0aG9kTmFtZT1yZWFkTGF0aW4xU3RyaW5nKG1ldGhvZE5hbWUpO3Jhd0ludm9rZXI9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oaW52b2tlclNpZ25hdHVyZSxyYXdJbnZva2VyKTt3aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxbcmF3Q2xhc3NUeXBlXSxmdW5jdGlvbihjbGFzc1R5cGUpe2NsYXNzVHlwZT1jbGFzc1R5cGVbMF07dmFyIGh1bWFuTmFtZT1jbGFzc1R5cGUubmFtZStcIi5cIittZXRob2ROYW1lO2lmKGlzUHVyZVZpcnR1YWwpe2NsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MucHVyZVZpcnR1YWxGdW5jdGlvbnMucHVzaChtZXRob2ROYW1lKX1mdW5jdGlvbiB1bmJvdW5kVHlwZXNIYW5kbGVyKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgXCIraHVtYW5OYW1lK1wiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIscmF3QXJnVHlwZXMpfXZhciBwcm90bz1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlO3ZhciBtZXRob2Q9cHJvdG9bbWV0aG9kTmFtZV07aWYodW5kZWZpbmVkPT09bWV0aG9kfHx1bmRlZmluZWQ9PT1tZXRob2Qub3ZlcmxvYWRUYWJsZSYmbWV0aG9kLmNsYXNzTmFtZSE9PWNsYXNzVHlwZS5uYW1lJiZtZXRob2QuYXJnQ291bnQ9PT1hcmdDb3VudC0yKXt1bmJvdW5kVHlwZXNIYW5kbGVyLmFyZ0NvdW50PWFyZ0NvdW50LTI7dW5ib3VuZFR5cGVzSGFuZGxlci5jbGFzc05hbWU9Y2xhc3NUeXBlLm5hbWU7cHJvdG9bbWV0aG9kTmFtZV09dW5ib3VuZFR5cGVzSGFuZGxlcn1lbHNle2Vuc3VyZU92ZXJsb2FkVGFibGUocHJvdG8sbWV0aG9kTmFtZSxodW1hbk5hbWUpO3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJnQ291bnQtMl09dW5ib3VuZFR5cGVzSGFuZGxlcn13aGVuRGVwZW5kZW50VHlwZXNBcmVSZXNvbHZlZChbXSxyYXdBcmdUeXBlcyxmdW5jdGlvbihhcmdUeXBlcyl7dmFyIG1lbWJlckZ1bmN0aW9uPWNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUscmF3SW52b2tlcixjb250ZXh0KTtpZih1bmRlZmluZWQ9PT1wcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKXttZW1iZXJGdW5jdGlvbi5hcmdDb3VudD1hcmdDb3VudC0yO3Byb3RvW21ldGhvZE5hbWVdPW1lbWJlckZ1bmN0aW9ufWVsc2V7cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmdDb3VudC0yXT1tZW1iZXJGdW5jdGlvbn1yZXR1cm5bXX0pO3JldHVybltdfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfY29uc3RhbnQobmFtZSx0eXBlLHZhbHVlKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3R5cGVdLGZ1bmN0aW9uKHR5cGUpe3R5cGU9dHlwZVswXTtNb2R1bGVbbmFtZV09dHlwZVtcImZyb21XaXJlVHlwZVwiXSh2YWx1ZSk7cmV0dXJuW119KX12YXIgZW12YWxfZnJlZV9saXN0PVtdO3ZhciBlbXZhbF9oYW5kbGVfYXJyYXk9W3t9LHt2YWx1ZTp1bmRlZmluZWR9LHt2YWx1ZTpudWxsfSx7dmFsdWU6dHJ1ZX0se3ZhbHVlOmZhbHNlfV07ZnVuY3Rpb24gX19lbXZhbF9kZWNyZWYoaGFuZGxlKXtpZihoYW5kbGU+NCYmMD09PS0tZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0ucmVmY291bnQpe2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdPXVuZGVmaW5lZDtlbXZhbF9mcmVlX2xpc3QucHVzaChoYW5kbGUpfX1mdW5jdGlvbiBjb3VudF9lbXZhbF9oYW5kbGVzKCl7dmFyIGNvdW50PTA7Zm9yKHZhciBpPTU7aTxlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOysraSl7aWYoZW12YWxfaGFuZGxlX2FycmF5W2ldIT09dW5kZWZpbmVkKXsrK2NvdW50fX1yZXR1cm4gY291bnR9ZnVuY3Rpb24gZ2V0X2ZpcnN0X2VtdmFsKCl7Zm9yKHZhciBpPTU7aTxlbXZhbF9oYW5kbGVfYXJyYXkubGVuZ3RoOysraSl7aWYoZW12YWxfaGFuZGxlX2FycmF5W2ldIT09dW5kZWZpbmVkKXtyZXR1cm4gZW12YWxfaGFuZGxlX2FycmF5W2ldfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBpbml0X2VtdmFsKCl7TW9kdWxlW1wiY291bnRfZW12YWxfaGFuZGxlc1wiXT1jb3VudF9lbXZhbF9oYW5kbGVzO01vZHVsZVtcImdldF9maXJzdF9lbXZhbFwiXT1nZXRfZmlyc3RfZW12YWx9ZnVuY3Rpb24gX19lbXZhbF9yZWdpc3Rlcih2YWx1ZSl7c3dpdGNoKHZhbHVlKXtjYXNlIHVuZGVmaW5lZDp7cmV0dXJuIDF9Y2FzZSBudWxsOntyZXR1cm4gMn1jYXNlIHRydWU6e3JldHVybiAzfWNhc2UgZmFsc2U6e3JldHVybiA0fWRlZmF1bHQ6e3ZhciBoYW5kbGU9ZW12YWxfZnJlZV9saXN0Lmxlbmd0aD9lbXZhbF9mcmVlX2xpc3QucG9wKCk6ZW12YWxfaGFuZGxlX2FycmF5Lmxlbmd0aDtlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXT17cmVmY291bnQ6MSx2YWx1ZTp2YWx1ZX07cmV0dXJuIGhhbmRsZX19fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2VtdmFsKHJhd1R5cGUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbihoYW5kbGUpe3ZhciBydj1lbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS52YWx1ZTtfX2VtdmFsX2RlY3JlZihoYW5kbGUpO3JldHVybiBydn0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe3JldHVybiBfX2VtdmFsX3JlZ2lzdGVyKHZhbHVlKX0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gX2VtYmluZF9yZXByKHYpe2lmKHY9PT1udWxsKXtyZXR1cm5cIm51bGxcIn12YXIgdD10eXBlb2YgdjtpZih0PT09XCJvYmplY3RcInx8dD09PVwiYXJyYXlcInx8dD09PVwiZnVuY3Rpb25cIil7cmV0dXJuIHYudG9TdHJpbmcoKX1lbHNle3JldHVyblwiXCIrdn19ZnVuY3Rpb24gZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0KXtzd2l0Y2goc2hpZnQpe2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUEYzMltwb2ludGVyPj4yXSl9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocG9pbnRlcil7cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oSEVBUEY2NFtwb2ludGVyPj4zXSl9O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZmxvYXQgdHlwZTogXCIrbmFtZSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0KHJhd1R5cGUsbmFtZSxzaXplKXt2YXIgc2hpZnQ9Z2V0U2hpZnRGcm9tU2l6ZShzaXplKTtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdmFsdWV9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZih0eXBlb2YgdmFsdWUhPT1cIm51bWJlclwiJiZ0eXBlb2YgdmFsdWUhPT1cImJvb2xlYW5cIil7dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgXCInK19lbWJpbmRfcmVwcih2YWx1ZSkrJ1wiIHRvICcrdGhpcy5uYW1lKX1yZXR1cm4gdmFsdWV9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpmbG9hdFJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQpLGRlc3RydWN0b3JGdW5jdGlvbjpudWxsfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb24obmFtZSxhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIsc2lnbmF0dXJlLHJhd0ludm9rZXIsZm4pe3ZhciBhcmdUeXBlcz1oZWFwMzJWZWN0b3JUb0FycmF5KGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcik7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3Jhd0ludm9rZXI9ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2lnbmF0dXJlLHJhd0ludm9rZXIpO2V4cG9zZVB1YmxpY1N5bWJvbChuYW1lLGZ1bmN0aW9uKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgXCIrbmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLGFyZ1R5cGVzKX0sYXJnQ291bnQtMSk7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sYXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe3ZhciBpbnZva2VyQXJnc0FycmF5PVthcmdUeXBlc1swXSxudWxsXS5jb25jYXQoYXJnVHlwZXMuc2xpY2UoMSkpO3JlcGxhY2VQdWJsaWNTeW1ib2wobmFtZSxjcmFmdEludm9rZXJGdW5jdGlvbihuYW1lLGludm9rZXJBcmdzQXJyYXksbnVsbCxyYXdJbnZva2VyLGZuKSxhcmdDb3VudC0xKTtyZXR1cm5bXX0pfWZ1bmN0aW9uIGludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0LHNpZ25lZCl7c3dpdGNoKHNoaWZ0KXtjYXNlIDA6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzhGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUDhbcG9pbnRlcl19OmZ1bmN0aW9uIHJlYWRVOEZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBIRUFQVThbcG9pbnRlcl19O2Nhc2UgMTpyZXR1cm4gc2lnbmVkP2Z1bmN0aW9uIHJlYWRTMTZGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUDE2W3BvaW50ZXI+PjFdfTpmdW5jdGlvbiByZWFkVTE2RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVBVMTZbcG9pbnRlcj4+MV19O2Nhc2UgMjpyZXR1cm4gc2lnbmVkP2Z1bmN0aW9uIHJlYWRTMzJGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUDMyW3BvaW50ZXI+PjJdfTpmdW5jdGlvbiByZWFkVTMyRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVBVMzJbcG9pbnRlcj4+Ml19O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gaW50ZWdlciB0eXBlOiBcIituYW1lKX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcihwcmltaXRpdmVUeXBlLG5hbWUsc2l6ZSxtaW5SYW5nZSxtYXhSYW5nZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO2lmKG1heFJhbmdlPT09LTEpe21heFJhbmdlPTQyOTQ5NjcyOTV9dmFyIHNoaWZ0PWdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7dmFyIGZyb21XaXJlVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlfTtpZihtaW5SYW5nZT09PTApe3ZhciBiaXRzaGlmdD0zMi04KnNpemU7ZnJvbVdpcmVUeXBlPWZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdmFsdWU8PGJpdHNoaWZ0Pj4+Yml0c2hpZnR9fXZhciBpc1Vuc2lnbmVkVHlwZT1uYW1lLmluZGV4T2YoXCJ1bnNpZ25lZFwiKSE9LTE7cmVnaXN0ZXJUeXBlKHByaW1pdGl2ZVR5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZyb21XaXJlVHlwZSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlIT09XCJudW1iZXJcIiYmdHlwZW9mIHZhbHVlIT09XCJib29sZWFuXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IFwiJytfZW1iaW5kX3JlcHIodmFsdWUpKydcIiB0byAnK3RoaXMubmFtZSl9aWYodmFsdWU8bWluUmFuZ2V8fHZhbHVlPm1heFJhbmdlKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXNzaW5nIGEgbnVtYmVyIFwiJytfZW1iaW5kX3JlcHIodmFsdWUpKydcIiBmcm9tIEpTIHNpZGUgdG8gQy9DKysgc2lkZSB0byBhbiBhcmd1bWVudCBvZiB0eXBlIFwiJytuYW1lKydcIiwgd2hpY2ggaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UgWycrbWluUmFuZ2UrXCIsIFwiK21heFJhbmdlK1wiXSFcIil9cmV0dXJuIGlzVW5zaWduZWRUeXBlP3ZhbHVlPj4+MDp2YWx1ZXwwfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6aW50ZWdlclJlYWRWYWx1ZUZyb21Qb2ludGVyKG5hbWUsc2hpZnQsbWluUmFuZ2UhPT0wKSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3KHJhd1R5cGUsZGF0YVR5cGVJbmRleCxuYW1lKXt2YXIgdHlwZU1hcHBpbmc9W0ludDhBcnJheSxVaW50OEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5XTt2YXIgVEE9dHlwZU1hcHBpbmdbZGF0YVR5cGVJbmRleF07ZnVuY3Rpb24gZGVjb2RlTWVtb3J5VmlldyhoYW5kbGUpe2hhbmRsZT1oYW5kbGU+PjI7dmFyIGhlYXA9SEVBUFUzMjt2YXIgc2l6ZT1oZWFwW2hhbmRsZV07dmFyIGRhdGE9aGVhcFtoYW5kbGUrMV07cmV0dXJuIG5ldyBUQShidWZmZXIsZGF0YSxzaXplKX1uYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmRlY29kZU1lbW9yeVZpZXcsXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmRlY29kZU1lbW9yeVZpZXd9LHtpZ25vcmVEdXBsaWNhdGVSZWdpc3RyYXRpb25zOnRydWV9KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nKHJhd1R5cGUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBzdGRTdHJpbmdJc1VURjg9bmFtZT09PVwic3RkOjpzdHJpbmdcIjtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3ZhciBsZW5ndGg9SEVBUFUzMlt2YWx1ZT4+Ml07dmFyIHN0cjtpZihzdGRTdHJpbmdJc1VURjgpe3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2k7aWYoaT09bGVuZ3RofHxIRUFQVThbY3VycmVudEJ5dGVQdHJdPT0wKXt2YXIgbWF4UmVhZD1jdXJyZW50Qnl0ZVB0ci1kZWNvZGVTdGFydFB0cjt2YXIgc3RyaW5nU2VnbWVudD1VVEY4VG9TdHJpbmcoZGVjb2RlU3RhcnRQdHIsbWF4UmVhZCk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrMX19fWVsc2V7dmFyIGE9bmV3IEFycmF5KGxlbmd0aCk7Zm9yKHZhciBpPTA7aTxsZW5ndGg7KytpKXthW2ldPVN0cmluZy5mcm9tQ2hhckNvZGUoSEVBUFU4W3ZhbHVlKzQraV0pfXN0cj1hLmpvaW4oXCJcIil9X2ZyZWUodmFsdWUpO3JldHVybiBzdHJ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZih2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YWx1ZT1uZXcgVWludDhBcnJheSh2YWx1ZSl9dmFyIGdldExlbmd0aDt2YXIgdmFsdWVJc09mVHlwZVN0cmluZz10eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiO2lmKCEodmFsdWVJc09mVHlwZVN0cmluZ3x8dmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHx2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5fHx2YWx1ZSBpbnN0YW5jZW9mIEludDhBcnJheSkpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBzdGQ6OnN0cmluZ1wiKX1pZihzdGRTdHJpbmdJc1VURjgmJnZhbHVlSXNPZlR5cGVTdHJpbmcpe2dldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiBsZW5ndGhCeXRlc1VURjgodmFsdWUpfX1lbHNle2dldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiB2YWx1ZS5sZW5ndGh9fXZhciBsZW5ndGg9Z2V0TGVuZ3RoKCk7dmFyIHB0cj1fbWFsbG9jKDQrbGVuZ3RoKzEpO0hFQVBVMzJbcHRyPj4yXT1sZW5ndGg7aWYoc3RkU3RyaW5nSXNVVEY4JiZ2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtzdHJpbmdUb1VURjgodmFsdWUscHRyKzQsbGVuZ3RoKzEpfWVsc2V7aWYodmFsdWVJc09mVHlwZVN0cmluZyl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7KytpKXt2YXIgY2hhckNvZGU9dmFsdWUuY2hhckNvZGVBdChpKTtpZihjaGFyQ29kZT4yNTUpe19mcmVlKHB0cik7dGhyb3dCaW5kaW5nRXJyb3IoXCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHNcIil9SEVBUFU4W3B0cis0K2ldPWNoYXJDb2RlfX1lbHNle2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7SEVBUFU4W3B0cis0K2ldPXZhbHVlW2ldfX19aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihwdHIpe19mcmVlKHB0cil9fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcocmF3VHlwZSxjaGFyU2l6ZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7dmFyIGRlY29kZVN0cmluZyxlbmNvZGVTdHJpbmcsZ2V0SGVhcCxsZW5ndGhCeXRlc1VURixzaGlmdDtpZihjaGFyU2l6ZT09PTIpe2RlY29kZVN0cmluZz1VVEYxNlRvU3RyaW5nO2VuY29kZVN0cmluZz1zdHJpbmdUb1VURjE2O2xlbmd0aEJ5dGVzVVRGPWxlbmd0aEJ5dGVzVVRGMTY7Z2V0SGVhcD1mdW5jdGlvbigpe3JldHVybiBIRUFQVTE2fTtzaGlmdD0xfWVsc2UgaWYoY2hhclNpemU9PT00KXtkZWNvZGVTdHJpbmc9VVRGMzJUb1N0cmluZztlbmNvZGVTdHJpbmc9c3RyaW5nVG9VVEYzMjtsZW5ndGhCeXRlc1VURj1sZW5ndGhCeXRlc1VURjMyO2dldEhlYXA9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUFUzMn07c2hpZnQ9Mn1yZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24odmFsdWUpe3ZhciBsZW5ndGg9SEVBUFUzMlt2YWx1ZT4+Ml07dmFyIEhFQVA9Z2V0SGVhcCgpO3ZhciBzdHI7dmFyIGRlY29kZVN0YXJ0UHRyPXZhbHVlKzQ7Zm9yKHZhciBpPTA7aTw9bGVuZ3RoOysraSl7dmFyIGN1cnJlbnRCeXRlUHRyPXZhbHVlKzQraSpjaGFyU2l6ZTtpZihpPT1sZW5ndGh8fEhFQVBbY3VycmVudEJ5dGVQdHI+PnNoaWZ0XT09MCl7dmFyIG1heFJlYWRCeXRlcz1jdXJyZW50Qnl0ZVB0ci1kZWNvZGVTdGFydFB0cjt2YXIgc3RyaW5nU2VnbWVudD1kZWNvZGVTdHJpbmcoZGVjb2RlU3RhcnRQdHIsbWF4UmVhZEJ5dGVzKTtpZihzdHI9PT11bmRlZmluZWQpe3N0cj1zdHJpbmdTZWdtZW50fWVsc2V7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDApO3N0cis9c3RyaW5nU2VnbWVudH1kZWNvZGVTdGFydFB0cj1jdXJyZW50Qnl0ZVB0citjaGFyU2l6ZX19X2ZyZWUodmFsdWUpO3JldHVybiBzdHJ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtpZighKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gQysrIHN0cmluZyB0eXBlIFwiK25hbWUpfXZhciBsZW5ndGg9bGVuZ3RoQnl0ZXNVVEYodmFsdWUpO3ZhciBwdHI9X21hbGxvYyg0K2xlbmd0aCtjaGFyU2l6ZSk7SEVBUFUzMltwdHI+PjJdPWxlbmd0aD4+c2hpZnQ7ZW5jb2RlU3RyaW5nKHZhbHVlLHB0cis0LGxlbmd0aCtjaGFyU2l6ZSk7aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKF9mcmVlLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpmdW5jdGlvbihwdHIpe19mcmVlKHB0cil9fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0KHJhd1R5cGUsbmFtZSxjb25zdHJ1Y3RvclNpZ25hdHVyZSxyYXdDb25zdHJ1Y3RvcixkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3Ipe3N0cnVjdFJlZ2lzdHJhdGlvbnNbcmF3VHlwZV09e25hbWU6cmVhZExhdGluMVN0cmluZyhuYW1lKSxyYXdDb25zdHJ1Y3RvcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihjb25zdHJ1Y3RvclNpZ25hdHVyZSxyYXdDb25zdHJ1Y3RvcikscmF3RGVzdHJ1Y3RvcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3IpLGZpZWxkczpbXX19ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkKHN0cnVjdFR5cGUsZmllbGROYW1lLGdldHRlclJldHVyblR5cGUsZ2V0dGVyU2lnbmF0dXJlLGdldHRlcixnZXR0ZXJDb250ZXh0LHNldHRlckFyZ3VtZW50VHlwZSxzZXR0ZXJTaWduYXR1cmUsc2V0dGVyLHNldHRlckNvbnRleHQpe3N0cnVjdFJlZ2lzdHJhdGlvbnNbc3RydWN0VHlwZV0uZmllbGRzLnB1c2goe2ZpZWxkTmFtZTpyZWFkTGF0aW4xU3RyaW5nKGZpZWxkTmFtZSksZ2V0dGVyUmV0dXJuVHlwZTpnZXR0ZXJSZXR1cm5UeXBlLGdldHRlcjplbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihnZXR0ZXJTaWduYXR1cmUsZ2V0dGVyKSxnZXR0ZXJDb250ZXh0OmdldHRlckNvbnRleHQsc2V0dGVyQXJndW1lbnRUeXBlOnNldHRlckFyZ3VtZW50VHlwZSxzZXR0ZXI6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oc2V0dGVyU2lnbmF0dXJlLHNldHRlciksc2V0dGVyQ29udGV4dDpzZXR0ZXJDb250ZXh0fSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfdm9pZChyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7aXNWb2lkOnRydWUsbmFtZTpuYW1lLFwiYXJnUGFja0FkdmFuY2VcIjowLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24oKXtyZXR1cm4gdW5kZWZpbmVkfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyxvKXtyZXR1cm4gdW5kZWZpbmVkfX0pfWZ1bmN0aW9uIF9fZW12YWxfaW5jcmVmKGhhbmRsZSl7aWYoaGFuZGxlPjQpe2VtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnJlZmNvdW50Kz0xfX1mdW5jdGlvbiByZXF1aXJlUmVnaXN0ZXJlZFR5cGUocmF3VHlwZSxodW1hbk5hbWUpe3ZhciBpbXBsPXJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXTtpZih1bmRlZmluZWQ9PT1pbXBsKXt0aHJvd0JpbmRpbmdFcnJvcihodW1hbk5hbWUrXCIgaGFzIHVua25vd24gdHlwZSBcIitnZXRUeXBlTmFtZShyYXdUeXBlKSl9cmV0dXJuIGltcGx9ZnVuY3Rpb24gX19lbXZhbF90YWtlX3ZhbHVlKHR5cGUsYXJndil7dHlwZT1yZXF1aXJlUmVnaXN0ZXJlZFR5cGUodHlwZSxcIl9lbXZhbF90YWtlX3ZhbHVlXCIpO3ZhciB2PXR5cGVbXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiXShhcmd2KTtyZXR1cm4gX19lbXZhbF9yZWdpc3Rlcih2KX1mdW5jdGlvbiBfYWJvcnQoKXthYm9ydCgpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2FzbV9jb25zdF9pbnQoY29kZSxzaWdQdHIsYXJnYnVmKXt2YXIgYXJncz1yZWFkQXNtQ29uc3RBcmdzKHNpZ1B0cixhcmdidWYpO3JldHVybiBBU01fQ09OU1RTW2NvZGVdLmFwcGx5KG51bGwsYXJncyl9ZnVuY3Rpb24gX2xvbmdqbXAoZW52LHZhbHVlKXtfc2V0VGhyZXcoZW52LHZhbHVlfHwxKTt0aHJvd1wibG9uZ2ptcFwifWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2xvbmdqbXAoYTAsYTEpe3JldHVybiBfbG9uZ2ptcChhMCxhMSl9ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fbWVtY3B5X2JpZyhkZXN0LHNyYyxudW0pe0hFQVBVOC5jb3B5V2l0aGluKGRlc3Qsc3JjLHNyYytudW0pfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2dldF9oZWFwX3NpemUoKXtyZXR1cm4gSEVBUFU4Lmxlbmd0aH1mdW5jdGlvbiBlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKHNpemUpe3RyeXt3YXNtTWVtb3J5Lmdyb3coc2l6ZS1idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNT4+PjE2KTt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7cmV0dXJuIDF9Y2F0Y2goZSl7fX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcChyZXF1ZXN0ZWRTaXplKXt2YXIgb2xkU2l6ZT1fZW1zY3JpcHRlbl9nZXRfaGVhcF9zaXplKCk7dmFyIG1heEhlYXBTaXplPTIxNDc0ODM2NDg7aWYocmVxdWVzdGVkU2l6ZT5tYXhIZWFwU2l6ZSl7cmV0dXJuIGZhbHNlfWZvcih2YXIgY3V0RG93bj0xO2N1dERvd248PTQ7Y3V0RG93bio9Mil7dmFyIG92ZXJHcm93bkhlYXBTaXplPW9sZFNpemUqKDErLjIvY3V0RG93bik7b3Zlckdyb3duSGVhcFNpemU9TWF0aC5taW4ob3Zlckdyb3duSGVhcFNpemUscmVxdWVzdGVkU2l6ZSsxMDA2NjMyOTYpO3ZhciBuZXdTaXplPU1hdGgubWluKG1heEhlYXBTaXplLGFsaWduVXAoTWF0aC5tYXgocmVxdWVzdGVkU2l6ZSxvdmVyR3Jvd25IZWFwU2l6ZSksNjU1MzYpKTt2YXIgcmVwbGFjZW1lbnQ9ZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihuZXdTaXplKTtpZihyZXBsYWNlbWVudCl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX12YXIgRU5WPXt9O2Z1bmN0aW9uIGdldEV4ZWN1dGFibGVOYW1lKCl7cmV0dXJuIHRoaXNQcm9ncmFtfHxcIi4vdGhpcy5wcm9ncmFtXCJ9ZnVuY3Rpb24gZ2V0RW52U3RyaW5ncygpe2lmKCFnZXRFbnZTdHJpbmdzLnN0cmluZ3Mpe3ZhciBsYW5nPSh0eXBlb2YgbmF2aWdhdG9yPT09XCJvYmplY3RcIiYmbmF2aWdhdG9yLmxhbmd1YWdlcyYmbmF2aWdhdG9yLmxhbmd1YWdlc1swXXx8XCJDXCIpLnJlcGxhY2UoXCItXCIsXCJfXCIpK1wiLlVURi04XCI7dmFyIGVudj17XCJVU0VSXCI6XCJ3ZWJfdXNlclwiLFwiTE9HTkFNRVwiOlwid2ViX3VzZXJcIixcIlBBVEhcIjpcIi9cIixcIlBXRFwiOlwiL1wiLFwiSE9NRVwiOlwiL2hvbWUvd2ViX3VzZXJcIixcIkxBTkdcIjpsYW5nLFwiX1wiOmdldEV4ZWN1dGFibGVOYW1lKCl9O2Zvcih2YXIgeCBpbiBFTlYpe2Vudlt4XT1FTlZbeF19dmFyIHN0cmluZ3M9W107Zm9yKHZhciB4IGluIGVudil7c3RyaW5ncy5wdXNoKHgrXCI9XCIrZW52W3hdKX1nZXRFbnZTdHJpbmdzLnN0cmluZ3M9c3RyaW5nc31yZXR1cm4gZ2V0RW52U3RyaW5ncy5zdHJpbmdzfWZ1bmN0aW9uIF9lbnZpcm9uX2dldChfX2Vudmlyb24sZW52aXJvbl9idWYpe3RyeXt2YXIgYnVmU2l6ZT0wO2dldEVudlN0cmluZ3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHN0cmluZyxpKXt2YXIgcHRyPWVudmlyb25fYnVmK2J1ZlNpemU7SEVBUDMyW19fZW52aXJvbitpKjQ+PjJdPXB0cjt3cml0ZUFzY2lpVG9NZW1vcnkoc3RyaW5nLHB0cik7YnVmU2l6ZSs9c3RyaW5nLmxlbmd0aCsxfSk7cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuIGUuZXJybm99fWZ1bmN0aW9uIF9lbnZpcm9uX3NpemVzX2dldChwZW52aXJvbl9jb3VudCxwZW52aXJvbl9idWZfc2l6ZSl7dHJ5e3ZhciBzdHJpbmdzPWdldEVudlN0cmluZ3MoKTtIRUFQMzJbcGVudmlyb25fY291bnQ+PjJdPXN0cmluZ3MubGVuZ3RoO3ZhciBidWZTaXplPTA7c3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmluZyl7YnVmU2l6ZSs9c3RyaW5nLmxlbmd0aCsxfSk7SEVBUDMyW3BlbnZpcm9uX2J1Zl9zaXplPj4yXT1idWZTaXplO3JldHVybiAwfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZXhpdChzdGF0dXMpe2V4aXQoc3RhdHVzKX1mdW5jdGlvbiBfZmRfY2xvc2UoZmQpe3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7RlMuY2xvc2Uoc3RyZWFtKTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4gZS5lcnJub319ZnVuY3Rpb24gX2ZkX3JlYWQoZmQsaW92LGlvdmNudCxwbnVtKXt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3ZhciBudW09U1lTQ0FMTFMuZG9SZWFkdihzdHJlYW0saW92LGlvdmNudCk7SEVBUDMyW3BudW0+PjJdPW51bTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4gZS5lcnJub319ZnVuY3Rpb24gX2ZkX3NlZWsoZmQsb2Zmc2V0X2xvdyxvZmZzZXRfaGlnaCx3aGVuY2UsbmV3T2Zmc2V0KXt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3ZhciBISUdIX09GRlNFVD00Mjk0OTY3Mjk2O3ZhciBvZmZzZXQ9b2Zmc2V0X2hpZ2gqSElHSF9PRkZTRVQrKG9mZnNldF9sb3c+Pj4wKTt2YXIgRE9VQkxFX0xJTUlUPTkwMDcxOTkyNTQ3NDA5OTI7aWYob2Zmc2V0PD0tRE9VQkxFX0xJTUlUfHxvZmZzZXQ+PURPVUJMRV9MSU1JVCl7cmV0dXJuLTYxfUZTLmxsc2VlayhzdHJlYW0sb2Zmc2V0LHdoZW5jZSk7dGVtcEk2ND1bc3RyZWFtLnBvc2l0aW9uPj4+MCwodGVtcERvdWJsZT1zdHJlYW0ucG9zaXRpb24sK01hdGguYWJzKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8oTWF0aC5taW4oK01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KSw0Mjk0OTY3Mjk1KXwwKT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW25ld09mZnNldD4+Ml09dGVtcEk2NFswXSxIRUFQMzJbbmV3T2Zmc2V0KzQ+PjJdPXRlbXBJNjRbMV07aWYoc3RyZWFtLmdldGRlbnRzJiZvZmZzZXQ9PT0wJiZ3aGVuY2U9PT0wKXN0cmVhbS5nZXRkZW50cz1udWxsO3JldHVybiAwfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZmRfd3JpdGUoZmQsaW92LGlvdmNudCxwbnVtKXt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3ZhciBudW09U1lTQ0FMTFMuZG9Xcml0ZXYoc3RyZWFtLGlvdixpb3ZjbnQpO0hFQVAzMltwbnVtPj4yXT1udW07cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuIGUuZXJybm99fWZ1bmN0aW9uIF9nZXRUZW1wUmV0MCgpe3JldHVybiBnZXRUZW1wUmV0MCgpfDB9ZnVuY3Rpb24gX2dldHRpbWVvZmRheShwdHIpe3ZhciBub3c9RGF0ZS5ub3coKTtIRUFQMzJbcHRyPj4yXT1ub3cvMWUzfDA7SEVBUDMyW3B0cis0Pj4yXT1ub3clMWUzKjFlM3wwO3JldHVybiAwfWZ1bmN0aW9uIF9zZXRUZW1wUmV0MCgkaSl7c2V0VGVtcFJldDAoJGl8MCl9ZnVuY3Rpb24gX19pc0xlYXBZZWFyKHllYXIpe3JldHVybiB5ZWFyJTQ9PT0wJiYoeWVhciUxMDAhPT0wfHx5ZWFyJTQwMD09PTApfWZ1bmN0aW9uIF9fYXJyYXlTdW0oYXJyYXksaW5kZXgpe3ZhciBzdW09MDtmb3IodmFyIGk9MDtpPD1pbmRleDtzdW0rPWFycmF5W2krK10pe31yZXR1cm4gc3VtfXZhciBfX01PTlRIX0RBWVNfTEVBUD1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdO3ZhciBfX01PTlRIX0RBWVNfUkVHVUxBUj1bMzEsMjgsMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdO2Z1bmN0aW9uIF9fYWRkRGF5cyhkYXRlLGRheXMpe3ZhciBuZXdEYXRlPW5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTt3aGlsZShkYXlzPjApe3ZhciBsZWFwPV9faXNMZWFwWWVhcihuZXdEYXRlLmdldEZ1bGxZZWFyKCkpO3ZhciBjdXJyZW50TW9udGg9bmV3RGF0ZS5nZXRNb250aCgpO3ZhciBkYXlzSW5DdXJyZW50TW9udGg9KGxlYXA/X19NT05USF9EQVlTX0xFQVA6X19NT05USF9EQVlTX1JFR1VMQVIpW2N1cnJlbnRNb250aF07aWYoZGF5cz5kYXlzSW5DdXJyZW50TW9udGgtbmV3RGF0ZS5nZXREYXRlKCkpe2RheXMtPWRheXNJbkN1cnJlbnRNb250aC1uZXdEYXRlLmdldERhdGUoKSsxO25ld0RhdGUuc2V0RGF0ZSgxKTtpZihjdXJyZW50TW9udGg8MTEpe25ld0RhdGUuc2V0TW9udGgoY3VycmVudE1vbnRoKzEpfWVsc2V7bmV3RGF0ZS5zZXRNb250aCgwKTtuZXdEYXRlLnNldEZ1bGxZZWFyKG5ld0RhdGUuZ2V0RnVsbFllYXIoKSsxKX19ZWxzZXtuZXdEYXRlLnNldERhdGUobmV3RGF0ZS5nZXREYXRlKCkrZGF5cyk7cmV0dXJuIG5ld0RhdGV9fXJldHVybiBuZXdEYXRlfWZ1bmN0aW9uIF9zdHJmdGltZShzLG1heHNpemUsZm9ybWF0LHRtKXt2YXIgdG1fem9uZT1IRUFQMzJbdG0rNDA+PjJdO3ZhciBkYXRlPXt0bV9zZWM6SEVBUDMyW3RtPj4yXSx0bV9taW46SEVBUDMyW3RtKzQ+PjJdLHRtX2hvdXI6SEVBUDMyW3RtKzg+PjJdLHRtX21kYXk6SEVBUDMyW3RtKzEyPj4yXSx0bV9tb246SEVBUDMyW3RtKzE2Pj4yXSx0bV95ZWFyOkhFQVAzMlt0bSsyMD4+Ml0sdG1fd2RheTpIRUFQMzJbdG0rMjQ+PjJdLHRtX3lkYXk6SEVBUDMyW3RtKzI4Pj4yXSx0bV9pc2RzdDpIRUFQMzJbdG0rMzI+PjJdLHRtX2dtdG9mZjpIRUFQMzJbdG0rMzY+PjJdLHRtX3pvbmU6dG1fem9uZT9VVEY4VG9TdHJpbmcodG1fem9uZSk6XCJcIn07dmFyIHBhdHRlcm49VVRGOFRvU3RyaW5nKGZvcm1hdCk7dmFyIEVYUEFOU0lPTl9SVUxFU18xPXtcIiVjXCI6XCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFwiJURcIjpcIiVtLyVkLyV5XCIsXCIlRlwiOlwiJVktJW0tJWRcIixcIiVoXCI6XCIlYlwiLFwiJXJcIjpcIiVJOiVNOiVTICVwXCIsXCIlUlwiOlwiJUg6JU1cIixcIiVUXCI6XCIlSDolTTolU1wiLFwiJXhcIjpcIiVtLyVkLyV5XCIsXCIlWFwiOlwiJUg6JU06JVNcIixcIiVFY1wiOlwiJWNcIixcIiVFQ1wiOlwiJUNcIixcIiVFeFwiOlwiJW0vJWQvJXlcIixcIiVFWFwiOlwiJUg6JU06JVNcIixcIiVFeVwiOlwiJXlcIixcIiVFWVwiOlwiJVlcIixcIiVPZFwiOlwiJWRcIixcIiVPZVwiOlwiJWVcIixcIiVPSFwiOlwiJUhcIixcIiVPSVwiOlwiJUlcIixcIiVPbVwiOlwiJW1cIixcIiVPTVwiOlwiJU1cIixcIiVPU1wiOlwiJVNcIixcIiVPdVwiOlwiJXVcIixcIiVPVVwiOlwiJVVcIixcIiVPVlwiOlwiJVZcIixcIiVPd1wiOlwiJXdcIixcIiVPV1wiOlwiJVdcIixcIiVPeVwiOlwiJXlcIn07Zm9yKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18xKXtwYXR0ZXJuPXBhdHRlcm4ucmVwbGFjZShuZXcgUmVnRXhwKHJ1bGUsXCJnXCIpLEVYUEFOU0lPTl9SVUxFU18xW3J1bGVdKX12YXIgV0VFS0RBWVM9W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl07dmFyIE1PTlRIUz1bXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl07ZnVuY3Rpb24gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSxkaWdpdHMsY2hhcmFjdGVyKXt2YXIgc3RyPXR5cGVvZiB2YWx1ZT09PVwibnVtYmVyXCI/dmFsdWUudG9TdHJpbmcoKTp2YWx1ZXx8XCJcIjt3aGlsZShzdHIubGVuZ3RoPGRpZ2l0cyl7c3RyPWNoYXJhY3RlclswXStzdHJ9cmV0dXJuIHN0cn1mdW5jdGlvbiBsZWFkaW5nTnVsbHModmFsdWUsZGlnaXRzKXtyZXR1cm4gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSxkaWdpdHMsXCIwXCIpfWZ1bmN0aW9uIGNvbXBhcmVCeURheShkYXRlMSxkYXRlMil7ZnVuY3Rpb24gc2duKHZhbHVlKXtyZXR1cm4gdmFsdWU8MD8tMTp2YWx1ZT4wPzE6MH12YXIgY29tcGFyZTtpZigoY29tcGFyZT1zZ24oZGF0ZTEuZ2V0RnVsbFllYXIoKS1kYXRlMi5nZXRGdWxsWWVhcigpKSk9PT0wKXtpZigoY29tcGFyZT1zZ24oZGF0ZTEuZ2V0TW9udGgoKS1kYXRlMi5nZXRNb250aCgpKSk9PT0wKXtjb21wYXJlPXNnbihkYXRlMS5nZXREYXRlKCktZGF0ZTIuZ2V0RGF0ZSgpKX19cmV0dXJuIGNvbXBhcmV9ZnVuY3Rpb24gZ2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aCl7c3dpdGNoKGphbkZvdXJ0aC5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKS0xLDExLDI5KTtjYXNlIDE6cmV0dXJuIGphbkZvdXJ0aDtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwwLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksMCwxKTtjYXNlIDU6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIGdldFdlZWtCYXNlZFllYXIoZGF0ZSl7dmFyIHRoaXNEYXRlPV9fYWRkRGF5cyhuZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCwwLDEpLGRhdGUudG1feWRheSk7dmFyIGphbkZvdXJ0aFRoaXNZZWFyPW5ldyBEYXRlKHRoaXNEYXRlLmdldEZ1bGxZZWFyKCksMCw0KTt2YXIgamFuRm91cnRoTmV4dFllYXI9bmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxLDAsNCk7dmFyIGZpcnN0V2Vla1N0YXJ0VGhpc1llYXI9Z2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aFRoaXNZZWFyKTt2YXIgZmlyc3RXZWVrU3RhcnROZXh0WWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoTmV4dFllYXIpO2lmKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydFRoaXNZZWFyLHRoaXNEYXRlKTw9MCl7aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIsdGhpc0RhdGUpPD0wKXtyZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxfWVsc2V7cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCl9fWVsc2V7cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCktMX19dmFyIEVYUEFOU0lPTl9SVUxFU18yPXtcIiVhXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIFdFRUtEQVlTW2RhdGUudG1fd2RheV0uc3Vic3RyaW5nKDAsMyl9LFwiJUFcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XX0sXCIlYlwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBNT05USFNbZGF0ZS50bV9tb25dLnN1YnN0cmluZygwLDMpfSxcIiVCXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl19LFwiJUNcIjpmdW5jdGlvbihkYXRlKXt2YXIgeWVhcj1kYXRlLnRtX3llYXIrMTkwMDtyZXR1cm4gbGVhZGluZ051bGxzKHllYXIvMTAwfDAsMil9LFwiJWRcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbWRheSwyKX0sXCIlZVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nU29tZXRoaW5nKGRhdGUudG1fbWRheSwyLFwiIFwiKX0sXCIlZ1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSxcIiVHXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSl9LFwiJUhcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1faG91ciwyKX0sXCIlSVwiOmZ1bmN0aW9uKGRhdGUpe3ZhciB0d2VsdmVIb3VyPWRhdGUudG1faG91cjtpZih0d2VsdmVIb3VyPT0wKXR3ZWx2ZUhvdXI9MTI7ZWxzZSBpZih0d2VsdmVIb3VyPjEyKXR3ZWx2ZUhvdXItPTEyO3JldHVybiBsZWFkaW5nTnVsbHModHdlbHZlSG91ciwyKX0sXCIlalwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5K19fYXJyYXlTdW0oX19pc0xlYXBZZWFyKGRhdGUudG1feWVhcisxOTAwKT9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUixkYXRlLnRtX21vbi0xKSwzKX0sXCIlbVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tb24rMSwyKX0sXCIlTVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9taW4sMil9LFwiJW5cIjpmdW5jdGlvbigpe3JldHVyblwiXFxuXCJ9LFwiJXBcIjpmdW5jdGlvbihkYXRlKXtpZihkYXRlLnRtX2hvdXI+PTAmJmRhdGUudG1faG91cjwxMil7cmV0dXJuXCJBTVwifWVsc2V7cmV0dXJuXCJQTVwifX0sXCIlU1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9zZWMsMil9LFwiJXRcIjpmdW5jdGlvbigpe3JldHVyblwiXFx0XCJ9LFwiJXVcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV93ZGF5fHw3fSxcIiVVXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGphbkZpcnN0PW5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAwLDAsMSk7dmFyIGZpcnN0U3VuZGF5PWphbkZpcnN0LmdldERheSgpPT09MD9qYW5GaXJzdDpfX2FkZERheXMoamFuRmlyc3QsNy1qYW5GaXJzdC5nZXREYXkoKSk7dmFyIGVuZERhdGU9bmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDAsZGF0ZS50bV9tb24sZGF0ZS50bV9tZGF5KTtpZihjb21wYXJlQnlEYXkoZmlyc3RTdW5kYXksZW5kRGF0ZSk8MCl7dmFyIGZlYnJ1YXJ5Rmlyc3RVbnRpbEVuZE1vbnRoPV9fYXJyYXlTdW0oX19pc0xlYXBZZWFyKGVuZERhdGUuZ2V0RnVsbFllYXIoKSk/X19NT05USF9EQVlTX0xFQVA6X19NT05USF9EQVlTX1JFR1VMQVIsZW5kRGF0ZS5nZXRNb250aCgpLTEpLTMxO3ZhciBmaXJzdFN1bmRheVVudGlsRW5kSmFudWFyeT0zMS1maXJzdFN1bmRheS5nZXREYXRlKCk7dmFyIGRheXM9Zmlyc3RTdW5kYXlVbnRpbEVuZEphbnVhcnkrZmVicnVhcnlGaXJzdFVudGlsRW5kTW9udGgrZW5kRGF0ZS5nZXREYXRlKCk7cmV0dXJuIGxlYWRpbmdOdWxscyhNYXRoLmNlaWwoZGF5cy83KSwyKX1yZXR1cm4gY29tcGFyZUJ5RGF5KGZpcnN0U3VuZGF5LGphbkZpcnN0KT09PTA/XCIwMVwiOlwiMDBcIn0sXCIlVlwiOmZ1bmN0aW9uKGRhdGUpe3ZhciBqYW5Gb3VydGhUaGlzWWVhcj1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCwwLDQpO3ZhciBqYW5Gb3VydGhOZXh0WWVhcj1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMSwwLDQpO3ZhciBmaXJzdFdlZWtTdGFydFRoaXNZZWFyPWdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGhUaGlzWWVhcik7dmFyIGZpcnN0V2Vla1N0YXJ0TmV4dFllYXI9Z2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aE5leHRZZWFyKTt2YXIgZW5kRGF0ZT1fX2FkZERheXMobmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDAsMCwxKSxkYXRlLnRtX3lkYXkpO2lmKGNvbXBhcmVCeURheShlbmREYXRlLGZpcnN0V2Vla1N0YXJ0VGhpc1llYXIpPDApe3JldHVyblwiNTNcIn1pZihjb21wYXJlQnlEYXkoZmlyc3RXZWVrU3RhcnROZXh0WWVhcixlbmREYXRlKTw9MCl7cmV0dXJuXCIwMVwifXZhciBkYXlzRGlmZmVyZW5jZTtpZihmaXJzdFdlZWtTdGFydFRoaXNZZWFyLmdldEZ1bGxZZWFyKCk8ZGF0ZS50bV95ZWFyKzE5MDApe2RheXNEaWZmZXJlbmNlPWRhdGUudG1feWRheSszMi1maXJzdFdlZWtTdGFydFRoaXNZZWFyLmdldERhdGUoKX1lbHNle2RheXNEaWZmZXJlbmNlPWRhdGUudG1feWRheSsxLWZpcnN0V2Vla1N0YXJ0VGhpc1llYXIuZ2V0RGF0ZSgpfXJldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5jZWlsKGRheXNEaWZmZXJlbmNlLzcpLDIpfSxcIiV3XCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGRhdGUudG1fd2RheX0sXCIlV1wiOmZ1bmN0aW9uKGRhdGUpe3ZhciBqYW5GaXJzdD1uZXcgRGF0ZShkYXRlLnRtX3llYXIsMCwxKTt2YXIgZmlyc3RNb25kYXk9amFuRmlyc3QuZ2V0RGF5KCk9PT0xP2phbkZpcnN0Ol9fYWRkRGF5cyhqYW5GaXJzdCxqYW5GaXJzdC5nZXREYXkoKT09PTA/MTo3LWphbkZpcnN0LmdldERheSgpKzEpO3ZhciBlbmREYXRlPW5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAwLGRhdGUudG1fbW9uLGRhdGUudG1fbWRheSk7aWYoY29tcGFyZUJ5RGF5KGZpcnN0TW9uZGF5LGVuZERhdGUpPDApe3ZhciBmZWJydWFyeUZpcnN0VW50aWxFbmRNb250aD1fX2FycmF5U3VtKF9faXNMZWFwWWVhcihlbmREYXRlLmdldEZ1bGxZZWFyKCkpP19fTU9OVEhfREFZU19MRUFQOl9fTU9OVEhfREFZU19SRUdVTEFSLGVuZERhdGUuZ2V0TW9udGgoKS0xKS0zMTt2YXIgZmlyc3RNb25kYXlVbnRpbEVuZEphbnVhcnk9MzEtZmlyc3RNb25kYXkuZ2V0RGF0ZSgpO3ZhciBkYXlzPWZpcnN0TW9uZGF5VW50aWxFbmRKYW51YXJ5K2ZlYnJ1YXJ5Rmlyc3RVbnRpbEVuZE1vbnRoK2VuZERhdGUuZ2V0RGF0ZSgpO3JldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5jZWlsKGRheXMvNyksMil9cmV0dXJuIGNvbXBhcmVCeURheShmaXJzdE1vbmRheSxqYW5GaXJzdCk9PT0wP1wiMDFcIjpcIjAwXCJ9LFwiJXlcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4oZGF0ZS50bV95ZWFyKzE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSxcIiVZXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGRhdGUudG1feWVhcisxOTAwfSxcIiV6XCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIG9mZj1kYXRlLnRtX2dtdG9mZjt2YXIgYWhlYWQ9b2ZmPj0wO29mZj1NYXRoLmFicyhvZmYpLzYwO29mZj1vZmYvNjAqMTAwK29mZiU2MDtyZXR1cm4oYWhlYWQ/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIitvZmYpLnNsaWNlKC00KX0sXCIlWlwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3pvbmV9LFwiJSVcIjpmdW5jdGlvbigpe3JldHVyblwiJVwifX07Zm9yKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18yKXtpZihwYXR0ZXJuLmluZGV4T2YocnVsZSk+PTApe3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSxcImdcIiksRVhQQU5TSU9OX1JVTEVTXzJbcnVsZV0oZGF0ZSkpfX12YXIgYnl0ZXM9aW50QXJyYXlGcm9tU3RyaW5nKHBhdHRlcm4sZmFsc2UpO2lmKGJ5dGVzLmxlbmd0aD5tYXhzaXplKXtyZXR1cm4gMH13cml0ZUFycmF5VG9NZW1vcnkoYnl0ZXMscyk7cmV0dXJuIGJ5dGVzLmxlbmd0aC0xfWZ1bmN0aW9uIF9zdHJmdGltZV9sKHMsbWF4c2l6ZSxmb3JtYXQsdG0pe3JldHVybiBfc3RyZnRpbWUocyxtYXhzaXplLGZvcm1hdCx0bSl9ZnVuY3Rpb24gX3RpbWUocHRyKXt2YXIgcmV0PURhdGUubm93KCkvMWUzfDA7aWYocHRyKXtIRUFQMzJbcHRyPj4yXT1yZXR9cmV0dXJuIHJldH12YXIgcmVhZEFzbUNvbnN0QXJnc0FycmF5PVtdO2Z1bmN0aW9uIHJlYWRBc21Db25zdEFyZ3Moc2lnUHRyLGJ1Zil7cmVhZEFzbUNvbnN0QXJnc0FycmF5Lmxlbmd0aD0wO3ZhciBjaDtidWY+Pj0yO3doaWxlKGNoPUhFQVBVOFtzaWdQdHIrK10pe3ZhciBkb3VibGU9Y2g8MTA1O2lmKGRvdWJsZSYmYnVmJjEpYnVmKys7cmVhZEFzbUNvbnN0QXJnc0FycmF5LnB1c2goZG91YmxlP0hFQVBGNjRbYnVmKys+PjFdOkhFQVAzMltidWZdKTsrK2J1Zn1yZXR1cm4gcmVhZEFzbUNvbnN0QXJnc0FycmF5fXZhciBGU05vZGU9ZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxyZGV2KXtpZighcGFyZW50KXtwYXJlbnQ9dGhpc310aGlzLnBhcmVudD1wYXJlbnQ7dGhpcy5tb3VudD1wYXJlbnQubW91bnQ7dGhpcy5tb3VudGVkPW51bGw7dGhpcy5pZD1GUy5uZXh0SW5vZGUrKzt0aGlzLm5hbWU9bmFtZTt0aGlzLm1vZGU9bW9kZTt0aGlzLm5vZGVfb3BzPXt9O3RoaXMuc3RyZWFtX29wcz17fTt0aGlzLnJkZXY9cmRldn07dmFyIHJlYWRNb2RlPTI5Mnw3Mzt2YXIgd3JpdGVNb2RlPTE0NjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhGU05vZGUucHJvdG90eXBlLHtyZWFkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJnJlYWRNb2RlKT09PXJlYWRNb2RlfSxzZXQ6ZnVuY3Rpb24odmFsKXt2YWw/dGhpcy5tb2RlfD1yZWFkTW9kZTp0aGlzLm1vZGUmPX5yZWFkTW9kZX19LHdyaXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJndyaXRlTW9kZSk9PT13cml0ZU1vZGV9LHNldDpmdW5jdGlvbih2YWwpe3ZhbD90aGlzLm1vZGV8PXdyaXRlTW9kZTp0aGlzLm1vZGUmPX53cml0ZU1vZGV9fSxpc0ZvbGRlcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZTLmlzRGlyKHRoaXMubW9kZSl9fSxpc0RldmljZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZTLmlzQ2hyZGV2KHRoaXMubW9kZSl9fX0pO0ZTLkZTTm9kZT1GU05vZGU7RlMuc3RhdGljSW5pdCgpO0ludGVybmFsRXJyb3I9TW9kdWxlW1wiSW50ZXJuYWxFcnJvclwiXT1leHRlbmRFcnJvcihFcnJvcixcIkludGVybmFsRXJyb3JcIik7ZW1iaW5kX2luaXRfY2hhckNvZGVzKCk7QmluZGluZ0Vycm9yPU1vZHVsZVtcIkJpbmRpbmdFcnJvclwiXT1leHRlbmRFcnJvcihFcnJvcixcIkJpbmRpbmdFcnJvclwiKTtpbml0X0NsYXNzSGFuZGxlKCk7aW5pdF9SZWdpc3RlcmVkUG9pbnRlcigpO2luaXRfZW1iaW5kKCk7VW5ib3VuZFR5cGVFcnJvcj1Nb2R1bGVbXCJVbmJvdW5kVHlwZUVycm9yXCJdPWV4dGVuZEVycm9yKEVycm9yLFwiVW5ib3VuZFR5cGVFcnJvclwiKTtpbml0X2VtdmFsKCk7dmFyIEFTU0VSVElPTlM9ZmFsc2U7ZnVuY3Rpb24gaW50QXJyYXlGcm9tU3RyaW5nKHN0cmluZ3ksZG9udEFkZE51bGwsbGVuZ3RoKXt2YXIgbGVuPWxlbmd0aD4wP2xlbmd0aDpsZW5ndGhCeXRlc1VURjgoc3RyaW5neSkrMTt2YXIgdThhcnJheT1uZXcgQXJyYXkobGVuKTt2YXIgbnVtQnl0ZXNXcml0dGVuPXN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksdThhcnJheSwwLHU4YXJyYXkubGVuZ3RoKTtpZihkb250QWRkTnVsbCl1OGFycmF5Lmxlbmd0aD1udW1CeXRlc1dyaXR0ZW47cmV0dXJuIHU4YXJyYXl9ZnVuY3Rpb24gaW50QXJyYXlUb1N0cmluZyhhcnJheSl7dmFyIHJldD1bXTtmb3IodmFyIGk9MDtpPGFycmF5Lmxlbmd0aDtpKyspe3ZhciBjaHI9YXJyYXlbaV07aWYoY2hyPjI1NSl7aWYoQVNTRVJUSU9OUyl7YXNzZXJ0KGZhbHNlLFwiQ2hhcmFjdGVyIGNvZGUgXCIrY2hyK1wiIChcIitTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikrXCIpICBhdCBvZmZzZXQgXCIraStcIiBub3QgaW4gMHgwMC0weEZGLlwiKX1jaHImPTI1NX1yZXQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikpfXJldHVybiByZXQuam9pbihcIlwiKX12YXIgZGVjb2RlQmFzZTY0PXR5cGVvZiBhdG9iPT09XCJmdW5jdGlvblwiP2F0b2I6ZnVuY3Rpb24oaW5wdXQpe3ZhciBrZXlTdHI9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO3ZhciBvdXRwdXQ9XCJcIjt2YXIgY2hyMSxjaHIyLGNocjM7dmFyIGVuYzEsZW5jMixlbmMzLGVuYzQ7dmFyIGk9MDtpbnB1dD1pbnB1dC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL1xcPV0vZyxcIlwiKTtkb3tlbmMxPWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMyPWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMzPWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmM0PWtleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtjaHIxPWVuYzE8PDJ8ZW5jMj4+NDtjaHIyPShlbmMyJjE1KTw8NHxlbmMzPj4yO2NocjM9KGVuYzMmMyk8PDZ8ZW5jNDtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7aWYoZW5jMyE9PTY0KXtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMil9aWYoZW5jNCE9PTY0KXtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMyl9fXdoaWxlKGk8aW5wdXQubGVuZ3RoKTtyZXR1cm4gb3V0cHV0fTtmdW5jdGlvbiBpbnRBcnJheUZyb21CYXNlNjQocyl7aWYodHlwZW9mIEVOVklST05NRU5UX0lTX05PREU9PT1cImJvb2xlYW5cIiYmRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIGJ1Zjt0cnl7YnVmPUJ1ZmZlci5mcm9tKHMsXCJiYXNlNjRcIil9Y2F0Y2goXyl7YnVmPW5ldyBCdWZmZXIocyxcImJhc2U2NFwiKX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmW1wiYnVmZmVyXCJdLGJ1ZltcImJ5dGVPZmZzZXRcIl0sYnVmW1wiYnl0ZUxlbmd0aFwiXSl9dHJ5e3ZhciBkZWNvZGVkPWRlY29kZUJhc2U2NChzKTt2YXIgYnl0ZXM9bmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8ZGVjb2RlZC5sZW5ndGg7KytpKXtieXRlc1tpXT1kZWNvZGVkLmNoYXJDb2RlQXQoaSl9cmV0dXJuIGJ5dGVzfWNhdGNoKF8pe3Rocm93IG5ldyBFcnJvcihcIkNvbnZlcnRpbmcgYmFzZTY0IHN0cmluZyB0byBieXRlcyBmYWlsZWQuXCIpfX1mdW5jdGlvbiB0cnlQYXJzZUFzRGF0YVVSSShmaWxlbmFtZSl7aWYoIWlzRGF0YVVSSShmaWxlbmFtZSkpe3JldHVybn1yZXR1cm4gaW50QXJyYXlGcm9tQmFzZTY0KGZpbGVuYW1lLnNsaWNlKGRhdGFVUklQcmVmaXgubGVuZ3RoKSl9dmFyIGFzbUxpYnJhcnlBcmc9e1wialwiOl9fX2N4YV9hbGxvY2F0ZV9leGNlcHRpb24sXCJpXCI6X19fY3hhX3Rocm93LFwiS1wiOl9fX2xvY2FsdGltZV9yLFwicVwiOl9fX3N5c19mY250bDY0LFwiTVwiOl9fX3N5c19pb2N0bCxcIk5cIjpfX19zeXNfb3BlbixcIlRcIjpfX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3QsXCJQXCI6X19lbWJpbmRfcmVnaXN0ZXJfYm9vbCxcInhcIjpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzcyxcInZcIjpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcixcImdcIjpfX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19mdW5jdGlvbixcIndcIjpfX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudCxcIk9cIjpfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbCxcInNcIjpfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdCxcImVcIjpfX2VtYmluZF9yZWdpc3Rlcl9mdW5jdGlvbixcImhcIjpfX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyLFwiZlwiOl9fZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3LFwidFwiOl9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF9zdHJpbmcsXCJuXCI6X19lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcsXCJWXCI6X19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0LFwiVVwiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZCxcIlFcIjpfX2VtYmluZF9yZWdpc3Rlcl92b2lkLFwiUlwiOl9fZW12YWxfZGVjcmVmLFwiU1wiOl9fZW12YWxfaW5jcmVmLFwidVwiOl9fZW12YWxfdGFrZV92YWx1ZSxcImFcIjpfYWJvcnQsXCJvXCI6X2Vtc2NyaXB0ZW5fYXNtX2NvbnN0X2ludCxcImtcIjpfZW1zY3JpcHRlbl9sb25nam1wLFwiRlwiOl9lbXNjcmlwdGVuX21lbWNweV9iaWcsXCJHXCI6X2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAsXCJJXCI6X2Vudmlyb25fZ2V0LFwiSlwiOl9lbnZpcm9uX3NpemVzX2dldCxcImJcIjpfZXhpdCxcInJcIjpfZmRfY2xvc2UsXCJMXCI6X2ZkX3JlYWQsXCJFXCI6X2ZkX3NlZWssXCJwXCI6X2ZkX3dyaXRlLFwiZFwiOl9nZXRUZW1wUmV0MCxcInlcIjpfZ2V0dGltZW9mZGF5LFwiQVwiOmludm9rZV9paSxcIkJcIjppbnZva2VfaWlpLFwiWFwiOmludm9rZV9paWlpLFwibFwiOmludm9rZV92aSxcIkNcIjppbnZva2VfdmlpLFwiRFwiOmludm9rZV92aWlpLFwibVwiOmludm9rZV92aWlpaSxcImNcIjpfc2V0VGVtcFJldDAsXCJXXCI6X3N0cmZ0aW1lLFwiSFwiOl9zdHJmdGltZV9sLFwielwiOl90aW1lfTt2YXIgYXNtPWNyZWF0ZVdhc20oKTt2YXIgX19fd2FzbV9jYWxsX2N0b3JzPU1vZHVsZVtcIl9fX3dhc21fY2FsbF9jdG9yc1wiXT1mdW5jdGlvbigpe3JldHVybihfX193YXNtX2NhbGxfY3RvcnM9TW9kdWxlW1wiX19fd2FzbV9jYWxsX2N0b3JzXCJdPU1vZHVsZVtcImFzbVwiXVtcIlpcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiX1wiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiJFwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19fZXJybm9fbG9jYXRpb249TW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZXJybm9fbG9jYXRpb249TW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl09TW9kdWxlW1wiYXNtXCJdW1wiYWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPU1vZHVsZVtcImFzbVwiXVtcImNhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzPU1vZHVsZVtcIl9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcz1Nb2R1bGVbXCJfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzXCJdPU1vZHVsZVtcImFzbVwiXVtcImRhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2dldF90em5hbWU9TW9kdWxlW1wiX19nZXRfdHpuYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fZ2V0X3R6bmFtZT1Nb2R1bGVbXCJfX2dldF90em5hbWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiZWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fZ2V0X2RheWxpZ2h0PU1vZHVsZVtcIl9fZ2V0X2RheWxpZ2h0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fZ2V0X2RheWxpZ2h0PU1vZHVsZVtcIl9fZ2V0X2RheWxpZ2h0XCJdPU1vZHVsZVtcImFzbVwiXVtcImZhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2dldF90aW1lem9uZT1Nb2R1bGVbXCJfX2dldF90aW1lem9uZVwiXT1mdW5jdGlvbigpe3JldHVybihfX2dldF90aW1lem9uZT1Nb2R1bGVbXCJfX2dldF90aW1lem9uZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJnYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgc3RhY2tTYXZlPU1vZHVsZVtcInN0YWNrU2F2ZVwiXT1mdW5jdGlvbigpe3JldHVybihzdGFja1NhdmU9TW9kdWxlW1wic3RhY2tTYXZlXCJdPU1vZHVsZVtcImFzbVwiXVtcImhhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja1Jlc3RvcmU9TW9kdWxlW1wic3RhY2tSZXN0b3JlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKHN0YWNrUmVzdG9yZT1Nb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09TW9kdWxlW1wiYXNtXCJdW1wiaWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9zZXRUaHJldz1Nb2R1bGVbXCJfc2V0VGhyZXdcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX3NldFRocmV3PU1vZHVsZVtcIl9zZXRUaHJld1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJqYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9qaWppPU1vZHVsZVtcImR5bkNhbGxfamlqaVwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX2ppamk9TW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdPU1vZHVsZVtcImFzbVwiXVtcImthXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX3ZpaWppaT1Nb2R1bGVbXCJkeW5DYWxsX3ZpaWppaVwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX3ZpaWppaT1Nb2R1bGVbXCJkeW5DYWxsX3ZpaWppaVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJsYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9paWlpaWo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9paWlpaWo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl09TW9kdWxlW1wiYXNtXCJdW1wibWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfaWlpaWlqaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpampcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9paWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlqalwiXT1Nb2R1bGVbXCJhc21cIl1bXCJuYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9paWlpaWlqaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWpqXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfaWlpaWlpamo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWlqalwiXT1Nb2R1bGVbXCJhc21cIl1bXCJvYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtmdW5jdGlvbiBpbnZva2VfaWkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIHdhc21UYWJsZS5nZXQoaW5kZXgpKGExKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7d2FzbVRhYmxlLmdldChpbmRleCkoYTEpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aWlpKGluZGV4LGExLGEyLGEzKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaWlpKGluZGV4LGExLGEyLGEzLGE0KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzLGE0KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpaShpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gd2FzbVRhYmxlLmdldChpbmRleCkoYTEsYTIsYTMpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fU1vZHVsZVtcIkZTXCJdPUZTO3ZhciBjYWxsZWRSdW47ZnVuY3Rpb24gRXhpdFN0YXR1cyhzdGF0dXMpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9XCJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KFwiK3N0YXR1cytcIilcIjt0aGlzLnN0YXR1cz1zdGF0dXN9ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFjYWxsZWRSdW4pcnVuKCk7aWYoIWNhbGxlZFJ1bilkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyfTtmdW5jdGlvbiBydW4oYXJncyl7YXJncz1hcmdzfHxhcmd1bWVudHNfO2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59cHJlUnVuKCk7aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1mdW5jdGlvbiBkb1J1bigpe2lmKGNhbGxlZFJ1bilyZXR1cm47Y2FsbGVkUnVuPXRydWU7TW9kdWxlW1wiY2FsbGVkUnVuXCJdPXRydWU7aWYoQUJPUlQpcmV0dXJuO2luaXRSdW50aW1lKCk7cHJlTWFpbigpO3JlYWR5UHJvbWlzZVJlc29sdmUoTW9kdWxlKTtpZihNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSlNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSgpO3Bvc3RSdW4oKX1pZihNb2R1bGVbXCJzZXRTdGF0dXNcIl0pe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlJ1bm5pbmcuLi5cIik7c2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIil9LDEpO2RvUnVuKCl9LDEpfWVsc2V7ZG9SdW4oKX19TW9kdWxlW1wicnVuXCJdPXJ1bjtmdW5jdGlvbiBleGl0KHN0YXR1cyxpbXBsaWNpdCl7aWYoaW1wbGljaXQmJm5vRXhpdFJ1bnRpbWUmJnN0YXR1cz09PTApe3JldHVybn1pZihub0V4aXRSdW50aW1lKXt9ZWxzZXtFWElUU1RBVFVTPXN0YXR1cztleGl0UnVudGltZSgpO2lmKE1vZHVsZVtcIm9uRXhpdFwiXSlNb2R1bGVbXCJvbkV4aXRcIl0oc3RhdHVzKTtBQk9SVD10cnVlfXF1aXRfKHN0YXR1cyxuZXcgRXhpdFN0YXR1cyhzdGF0dXMpKX1pZihNb2R1bGVbXCJwcmVJbml0XCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicHJlSW5pdFwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZUluaXRcIl09W01vZHVsZVtcInByZUluaXRcIl1dO3doaWxlKE1vZHVsZVtcInByZUluaXRcIl0ubGVuZ3RoPjApe01vZHVsZVtcInByZUluaXRcIl0ucG9wKCkoKX19cnVuKCk7XG5cblxuICByZXR1cm4gTW9kdWxlLnJlYWR5XG59XG4pO1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IE1vZHVsZTsiLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiLypcbiAqICBBUkNvbnRyb2xsZXJORlQudHNcbiAqICBKU0FSVG9vbEtpdE5GVFxuICpcbiAqICBUaGlzIGZpbGUgaXMgcGFydCBvZiBKU0FSVG9vbEtpdE5GVCAtIFdlYkFSS2l0LlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqICBhbG9uZyB3aXRoIEpTQVJUb29sS2l0TkZULiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqICBBcyBhIHNwZWNpYWwgZXhjZXB0aW9uLCB0aGUgY29weXJpZ2h0IGhvbGRlcnMgb2YgdGhpcyBsaWJyYXJ5IGdpdmUgeW91XG4gKiAgcGVybWlzc2lvbiB0byBsaW5rIHRoaXMgbGlicmFyeSB3aXRoIGluZGVwZW5kZW50IG1vZHVsZXMgdG8gcHJvZHVjZSBhblxuICogIGV4ZWN1dGFibGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGxpY2Vuc2UgdGVybXMgb2YgdGhlc2UgaW5kZXBlbmRlbnQgbW9kdWxlcywgYW5kIHRvXG4gKiAgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgcmVzdWx0aW5nIGV4ZWN1dGFibGUgdW5kZXIgdGVybXMgb2YgeW91ciBjaG9pY2UsXG4gKiAgcHJvdmlkZWQgdGhhdCB5b3UgYWxzbyBtZWV0LCBmb3IgZWFjaCBsaW5rZWQgaW5kZXBlbmRlbnQgbW9kdWxlLCB0aGUgdGVybXMgYW5kXG4gKiAgY29uZGl0aW9ucyBvZiB0aGUgbGljZW5zZSBvZiB0aGF0IG1vZHVsZS4gQW4gaW5kZXBlbmRlbnQgbW9kdWxlIGlzIGEgbW9kdWxlXG4gKiAgd2hpY2ggaXMgbmVpdGhlciBkZXJpdmVkIGZyb20gbm9yIGJhc2VkIG9uIHRoaXMgbGlicmFyeS4gSWYgeW91IG1vZGlmeSB0aGlzXG4gKiAgbGlicmFyeSwgeW91IG1heSBleHRlbmQgdGhpcyBleGNlcHRpb24gdG8geW91ciB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LCBidXQgeW91XG4gKiAgYXJlIG5vdCBvYmxpZ2F0ZWQgdG8gZG8gc28uIElmIHlvdSBkbyBub3Qgd2lzaCB0byBkbyBzbywgZGVsZXRlIHRoaXMgZXhjZXB0aW9uXG4gKiAgc3RhdGVtZW50IGZyb20geW91ciB2ZXJzaW9uLlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBXZWJBUktpdC5cbiAqXG4gKiAgQXV0aG9yKHMpOiBXYWx0ZXIgUGVyZGFuIEBrYWx3YWx0IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWx3YWx0XG4gKlxuICovXG5pbXBvcnQgQVJUb29sa2l0TkZUIGZyb20gJy4vQVJUb29sa2l0TkZUJ1xuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGNhbnZhczogbnVsbCxcbiAgb3JpZW50YXRpb246IHN0cmluZyxcbn1cblxuaW50ZXJmYWNlIEltYWdlT2JqIHtcbiAgdmlkZW9XaWR0aDogbnVtYmVyLFxuICB3aWR0aDogbnVtYmVyLFxuICB2aWRlb0hlaWdodDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbiAgZGF0YTogVWludDhDbGFtcGVkQXJyYXksXG59XG5cbmludGVyZmFjZSBkZWxlZ2F0ZU1ldGhvZHMge1xuICAgIHNldHVwOiB7XG4gICAgICAgICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgY2FtZXJhSWQ6IG51bWJlcik6IG51bWJlclxuICAgIH1cbiAgICBzZXR1cEFSMjoge1xuICAgICAgKGlkOiBudW1iZXIpOiB2b2lkXG4gICAgfVxuICAgIHNldERlYnVnTW9kZTogIChpZDogbnVtYmVyLCBtb2RlOiBib29sZWFuKSA9PiBudW1iZXI7XG4gICAgZ2V0RGVidWdNb2RlOiAoaWQ6IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgICBnZXRQcm9jZXNzaW5nSW1hZ2U6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgc2V0TG9nTGV2ZWw6IChtb2RlOiBib29sZWFuKSA9PiBudW1iZXI7XG4gICAgZ2V0TG9nTGV2ZWw6ICgpID0+IG51bWJlcjtcbiAgICBmcmFtZU1hbGxvYzoge1xuICAgICAgIGZyYW1lcG9pbnRlcjogbnVtYmVyO1xuICAgICAgIGZyYW1lc2l6ZTogbnVtYmVyO1xuICAgICAgIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgICAgICBjYW1lcmE6IG51bWJlcjtcbiAgICAgICB0cmFuc2Zvcm06IG51bWJlclxuICAgIH1cbiAgICBpbnN0YW5jZToge1xuICAgICAgSEVBUFU4OiB7XG4gICAgICAgIGJ1ZmZlcjogVWludDhBcnJheVxuICAgICAgfTtcbiAgICB9XG4gICAgTkZUTWFya2VySW5mbzoge1xuICAgICAgZXJyb3I6IG51bWJlcjtcbiAgICAgIGZvdW5kOiBudW1iZXI7XG4gICAgICBpZDogbnVtYmVyLFxuICAgICAgcG9zZTogRmxvYXQ2NEFycmF5O1xuICAgIH07XG4gICAgbG9hZENhbWVyYTogKGNhbWVyYVBhcmFtOiBzdHJpbmcpID0+IFByb21pc2U8bnVtYmVyPjtcbiAgICBzZXRQcm9qZWN0aW9uTmVhclBsYW5lOiB7XG4gICAgICAoaWQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgfVxuICAgIGdldFByb2plY3Rpb25OZWFyUGxhbmU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgc2V0UHJvamVjdGlvbkZhclBsYW5lOiAoaWQ6IG51bWJlciwgdmFsdWU6IG51bWJlcikgPT4gdm9pZDtcbiAgICBnZXRQcm9qZWN0aW9uRmFyUGxhbmU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgc2V0VGhyZXNob2xkTW9kZTogKGlkOiBudW1iZXIsIG1vZGU6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIGdldFRocmVzaG9sZE1vZGU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgc2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlciwgdGhyZXNob2xkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBnZXRUaHJlc2hvbGQ6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgYWRkTkZUTWFya2VyOiAoYXJJZDogbnVtYmVyLCB1cmw6IHN0cmluZykgPT4gUHJvbWlzZTx7aWQ6IG51bWJlcn0+O1xuICAgIGFkZE5GVE1hcmtlcnM6IChhcklkOiBudW1iZXIsIHVybHM6IEFycmF5PHN0cmluZz4pID0+IFByb21pc2U8e2lkOiBudW1iZXJ9PjtcbiAgICBkZXRlY3RNYXJrZXI6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZGV0ZWN0TkZUTWFya2VyOiAoYXJJZDogbnVtYmVyKSA9PiB2b2lkO1xuICAgIGdldE5GVE1hcmtlcjogKGlkOiBudW1iZXIsIG1hcmtlckluZGV4OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBnZXRORlREYXRhOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIHNldEltYWdlUHJvY01vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBnZXRJbWFnZVByb2NNb2RlOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBUkNvbnRyb2xsZXJORlQge1xuICAvLyBwcml2YXRlIGRlY2xhcmF0aW9uc1xuICBwcml2YXRlIG9wdGlvbnMgPSB7fSBhcyBPcHRpb25zO1xuICBwcml2YXRlIGlkOiBudW1iZXI7XG4gIHByaXZhdGUgd2lkdGg6IG51bWJlcjtcbiAgcHJpdmF0ZSBoZWlnaHQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBpbWFnZTogYW55O1xuICBwcml2YXRlIG9yaWVudGF0aW9uOiBzdHJpbmc7XG4gIHByaXZhdGUgY2FtZXJhUGFyYW06IHN0cmluZztcbiAgcHJpdmF0ZSBjYW1lcmFJZDogbnVtYmVyO1xuICBwcml2YXRlIGNhbWVyYUxvYWRlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBhcnRvb2xraXRORlQ6IGRlbGVnYXRlTWV0aG9kcztcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IG9iamVjdDtcbiAgcHJpdmF0ZSBuZnRNYXJrZXJzOiBvYmplY3Q7XG4gIHByaXZhdGUgdHJhbnNmb3JtX21hdDogRmxvYXQ2NEFycmF5O1xuICBwcml2YXRlIG1hcmtlcl90cmFuc2Zvcm1fbWF0OiBGbG9hdDY0QXJyYXk7XG4gIHByaXZhdGUgdHJhbnNmb3JtR0xfUkg6IEZsb2F0NjRBcnJheTtcbiAgcHJpdmF0ZSB2aWRlb1dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgdmlkZW9IZWlnaHQ6IG51bWJlcjtcbiAgcHJpdmF0ZSB2aWRlb1NpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBmcmFtZXBvaW50ZXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBmcmFtZXNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBkYXRhSGVhcDogVWludDhBcnJheTtcbiAgcHJpdmF0ZSB2aWRlb0x1bWE6IFVpbnQ4QXJyYXk7XG4gIHByaXZhdGUgY2FtZXJhX21hdDogRmxvYXQ2NEFycmF5O1xuICBwcml2YXRlIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBwcml2YXRlIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBwcml2YXRlIG5mdE1hcmtlckZvdW5kOiBib29sZWFuOy8vID0gZmFsc2VcbiAgcHJpdmF0ZSBuZnRNYXJrZXJGb3VuZFRpbWU6IG51bWJlcjtcbiAgcHJpdmF0ZSBuZnRNYXJrZXJDb3VudDogbnVtYmVyOy8vID0gMFxuICBwcml2YXRlIGRlZmF1bHRNYXJrZXJXaWR0aDogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2J3cG9pbnRlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQVJDb250cm9sbGVyTkZUIGNvbnN0cnVjdG9yLiBJdCBoYXMgNCBwYXJhbXMgKHNlZSBhYm92ZSkuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIGluaXRpYWxpemVkOlxuICAgKiBvcHRpb25zLCBpZCwgd2lkdGgsIGhlaWdodCwgaW1hZ2UsIG9yaWVudGF0aW9uLCBjYW1lcmFQYXJhbSwgY2FtZXJhSWQsXG4gICAqIGNhbWVyYUxvYWRlZCwgYXJ0b29sa2l0TkZULCBsaXN0ZW5lcnMsIG5mdE1hcmtlcnMsIHRyYW5zZm9ybV9tYXQsXG4gICAqIHRyYW5zZm9ybUdMX1JILCBtYXJrZXJfdHJhbnNmb3JtX21hdCwgdmlkZW9XaWR0aCwgdmlkZW9IZWlnaHQsIHZpZGVvU2l6ZSxcbiAgICogZnJhbWVwb2ludGVyLCBmcmFtZXNpemUsIGRhdGFIZWFwLCB2aWRlb0x1bWEsIGNhbWVyYV9tYXQsIHZpZGVvTHVtYVBvaW50ZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbWVyYVBhcmFtXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbWVyYVBhcmFtOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpIHtcbiAgICAvLyByZWFkIHNldHRpbmdzXG4gICAgdGhpcy5vcHRpb25zID0gey4uLntcbiAgICAgICAgY2FudmFzOiBudWxsLFxuICAgICAgICBvcmllbnRhdGlvbjogJ2xhbmRzY2FwZSdcbiAgICAgIH0sLi4ub3B0aW9uc307XG5cbiAgICAvLyBubyBwb2ludCBpbiBpbml0aWFsaXppbmcgYSBtZW1iZXIgYXMgXCJ1bmRlZmluZWRcIlxuICAgIC8vIHJlcGxhY2VkIGl0IHdpdGggLTFcbiAgICB0aGlzLmlkID0gLTFcblxuICAgIHRoaXMud2lkdGggPSB3aWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG5cbiAgICAvLyBob2xkcyBhbiBpbWFnZSBpbiBjYXNlIHRoZSBpbnN0YW5jZSB3YXMgaW5pdGlhbGl6ZWQgd2l0aCBhbiBpbWFnZVxuICAgIHRoaXMuaW1hZ2VcblxuICAgIC8vIGRlZmF1bHQgY2FtZXJhIG9yaWVudGF0aW9uXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IHRoaXMub3B0aW9ucy5vcmllbnRhdGlvblxuXG4gICAgLy8gdGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBBUkNhbWVyYVBhcmFtXG4gICAgdGhpcy5jYW1lcmFQYXJhbSA9IGNhbWVyYVBhcmFtXG4gICAgdGhpcy5jYW1lcmFJZCA9IC0xXG4gICAgdGhpcy5jYW1lcmFMb2FkZWQgPSBmYWxzZVxuXG4gICAgLy8gdG9vbGtpdCBpbnN0YW5jZVxuICAgIHRoaXMuYXJ0b29sa2l0TkZUXG5cbiAgICAvLyB0byByZWdpc3RlciBvYnNlcnZlcnMgYXMgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuXG4gICAgdGhpcy5uZnRNYXJrZXJzID0ge31cblxuICAgIHRoaXMudHJhbnNmb3JtX21hdCA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpXG4gICAgdGhpcy50cmFuc2Zvcm1HTF9SSCA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpXG4gICAgdGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdCA9IG51bGxcblxuICAgIHRoaXMudmlkZW9XaWR0aCA9IHdpZHRoXG4gICAgdGhpcy52aWRlb0hlaWdodCA9IGhlaWdodFxuICAgIHRoaXMudmlkZW9TaXplID0gdGhpcy52aWRlb1dpZHRoICogdGhpcy52aWRlb0hlaWdodFxuXG4gICAgdGhpcy5mcmFtZXBvaW50ZXIgPSBudWxsXG4gICAgdGhpcy5mcmFtZXNpemUgPSBudWxsXG4gICAgdGhpcy5kYXRhSGVhcCA9IG51bGxcbiAgICB0aGlzLnZpZGVvTHVtYSA9IG51bGxcbiAgICB0aGlzLmNhbWVyYV9tYXQgPSBudWxsXG4gICAgdGhpcy52aWRlb0x1bWFQb2ludGVyID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jYW52YXMpIHtcbiAgICAgIC8vIGluIGNhc2UgeW91IHVzZSBOb2RlLmpzLCBjcmVhdGUgYSBjYW52YXMgd2l0aCBub2RlLWNhbnZhc1xuICAgICAgdGhpcy5jYW52YXMgPSB0aGlzLm9wdGlvbnMuY2FudmFzXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyB0cnkgY3JlYXRpbmcgYSBjYW52YXMgZnJvbSBkb2N1bWVudFxuICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudFxuICAgIH1cbiAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2lkdGhcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGhlaWdodFxuICAgICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignTm8gY2FudmFzIGF2YWlsYWJsZScpXG4gICAgfVxuXG4gICAgLy8gdGhpcyBpcyB0byB3b3JrYXJvdW5kIHRoZSBpbnRyb2R1Y3Rpb24gb2YgXCJzZWxmXCIgdmFyaWFibGVcbiAgICB0aGlzLm5mdE1hcmtlckZvdW5kID0gZmFsc2VcbiAgICB0aGlzLm5mdE1hcmtlckZvdW5kVGltZSA9IDBcbiAgICB0aGlzLm5mdE1hcmtlckNvdW50ID0gMFxuXG4gICAgdGhpcy5fYndwb2ludGVyID0gbnVsbFxuICAgIHRoaXMuZGVmYXVsdE1hcmtlcldpZHRoID0gMVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGluaXRXaXRoRGltZW5zaW9ucyAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbWVyYVBhcmFtOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpIHtcbiAgICAvLyBkaXJlY3RseSBpbml0IHdpdGggZ2l2ZW4gd2lkdGggLyBoZWlnaHRcbiAgICBjb25zdCBhckNvbnRyb2xsZXJORlQgPSBuZXcgQVJDb250cm9sbGVyTkZUKHdpZHRoLCBoZWlnaHQsIGNhbWVyYVBhcmFtLCBvcHRpb25zKVxuICAgIHJldHVybiBhd2FpdCBhckNvbnRyb2xsZXJORlQuX2luaXRpYWxpemUoKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGluaXRXaXRoSW1hZ2UgKGltYWdlOiBJbWFnZU9iaiwgY2FtZXJhUGFyYW06IHN0cmluZywgb3B0aW9ucz86IG9iamVjdCkge1xuICAgIGNvbnN0IHdpZHRoID0gaW1hZ2UudmlkZW9XaWR0aCB8fCBpbWFnZS53aWR0aFxuICAgIGNvbnN0IGhlaWdodCA9IGltYWdlLnZpZGVvSGVpZ2h0IHx8IGltYWdlLmhlaWdodFxuICAgIGNvbnN0IGFyQ29udHJvbGxlck5GVCA9IG5ldyBBUkNvbnRyb2xsZXJORlQod2lkdGgsIGhlaWdodCwgY2FtZXJhUGFyYW0sIG9wdGlvbnMpXG4gICAgYXJDb250cm9sbGVyTkZULmltYWdlID0gaW1hZ2VcbiAgICByZXR1cm4gYXdhaXQgYXJDb250cm9sbGVyTkZULl9pbml0aWFsaXplKClcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIG9uZSBvZiB0aGUgbW9zdCBpbXBvcnRhbnQgbWV0aG9kIGluc2lkZSBBUkNvbnRyb2xsZXJORlQuIEl0IGRldGVjdCB0aGUgbWFya2VyXG4gICAqIGFuZCBkaXNwYXRjaCBpbnRlcm5hbGx5IHdpdGggdGhlIGdldE5GVE1hcmtlciBldmVudCBsaXN0ZW5lciB0aGUgTkZUTWFya2VySW5mb1xuICAgKiBzdHJ1Y3Qgb2JqZWN0IG9mIHRoZSB0cmFja2VkIE5GVCBNYXJrZXJzLlxuICAgKiBAcGFyYW0ge2ltYWdlfSBpbWFnZSBvciBpbWFnZSBkYXRhXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBwcm9jZXNzIChpbWFnZTogSW1hZ2VPYmopIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5kZXRlY3RNYXJrZXIoaW1hZ2UpXG4gICAgaWYgKHJlc3VsdCAhPSAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbQVJDb250cm9sbGVyTkZUXScsICdkZXRlY3RNYXJrZXIgZXJyb3I6JywgcmVzdWx0KVxuICAgIH1cblxuICAgIGxldCBrLCBvXG5cbiAgICAvLyBnZXQgTkZUIG1hcmtlcnNcbiAgICBmb3IgKGsgaW4gdGhpcy5uZnRNYXJrZXJzKSB7XG4gICAgICBvID0gdGhpcy5jb252ZXJ0ZXIoKS5uZnRNYXJrZXJzW2tdXG4gICAgICBvLmluUHJldmlvdXMgPSBvLmluQ3VycmVudFxuICAgICAgby5pbkN1cnJlbnQgPSBmYWxzZVxuICAgIH1cblxuICAgIC8vIGRldGVjdCBORlQgbWFya2Vyc1xuICAgIGxldCBuZnRNYXJrZXJDb3VudCA9IHRoaXMubmZ0TWFya2VyQ291bnRcbiAgICB0aGlzLmRldGVjdE5GVE1hcmtlcigpXG5cbiAgICAvLyBpbiBtc1xuICAgIGNvbnN0IE1BUktFUl9MT1NUX1RJTUUgPSAyMDBcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmZ0TWFya2VyQ291bnQ7IGkrKykge1xuICAgICAgbGV0IG5mdE1hcmtlckluZm8gPSB0aGlzLmdldE5GVE1hcmtlcihpKVxuICAgICAgbGV0IG1hcmtlclR5cGUgPSBBUlRvb2xraXRORlQuTkZUX01BUktFUlxuXG4gICAgICBpZiAobmZ0TWFya2VySW5mby5mb3VuZCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5uZnRNYXJrZXJGb3VuZCA9IGlcbiAgICAgICAgdGhpcy5uZnRNYXJrZXJGb3VuZFRpbWUgPSBEYXRlLm5vdygpXG5cbiAgICAgICAgbGV0IHZpc2libGUgPSB0aGlzLnRyYWNrTkZUTWFya2VySWQoaSlcbiAgICAgICAgdmlzaWJsZS5tYXRyaXguc2V0KG5mdE1hcmtlckluZm8ucG9zZSlcbiAgICAgICAgdmlzaWJsZS5pbkN1cnJlbnQgPSB0cnVlXG4gICAgICAgIHRoaXMudHJhbnNNYXRUb0dMTWF0KHZpc2libGUubWF0cml4LCB0aGlzLnRyYW5zZm9ybV9tYXQpXG4gICAgICAgIHRoaXMudHJhbnNmb3JtR0xfUkggPSB0aGlzLmFyZ2xDYW1lcmFWaWV3UkhmKHRoaXMudHJhbnNmb3JtX21hdClcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBuYW1lOiAnZ2V0TkZUTWFya2VyJyxcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICB0eXBlOiBtYXJrZXJUeXBlLFxuICAgICAgICAgICAgbWFya2VyOiBuZnRNYXJrZXJJbmZvLFxuICAgICAgICAgICAgbWF0cml4OiB0aGlzLnRyYW5zZm9ybV9tYXQsXG4gICAgICAgICAgICBtYXRyaXhHTF9SSDogdGhpcy50cmFuc2Zvcm1HTF9SSFxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgfSBlbHNlIGlmIChzZWxmLm5mdE1hcmtlckZvdW5kID09PSBpKSB7XG4gICAgICAgIC8vIGZvciBub3cgdGhpcyBtYXJrZXIgZm91bmQvbG9zdCBldmVudHMgaGFuZGxpbmcgaXMgZm9yIG9uZSBtYXJrZXIgYXQgYSB0aW1lXG4gICAgICAgIGlmICgoRGF0ZS5ub3coKSAtIHRoaXMubmZ0TWFya2VyRm91bmRUaW1lKSA+IE1BUktFUl9MT1NUX1RJTUUpIHtcbiAgICAgICAgICB0aGlzLm5mdE1hcmtlckZvdW5kID0gZmFsc2VcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgbmFtZTogJ2xvc3RORlRNYXJrZXInLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgdHlwZTogbWFya2VyVHlwZSxcbiAgICAgICAgICAgICAgbWFya2VyOiBuZnRNYXJrZXJJbmZvLFxuICAgICAgICAgICAgICBtYXRyaXg6IHRoaXMudHJhbnNmb3JtX21hdCxcbiAgICAgICAgICAgICAgbWF0cml4R0xfUkg6IHRoaXMudHJhbnNmb3JtR0xfUkhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qaWYgKHRoaXMuX2J3cG9pbnRlcikge1xuICAgICAgdGhpcy5kZWJ1Z0RyYXcoKVxuICAgIH0qL1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVjdHMgdGhlIE5GVCBtYXJrZXJzIGluIHRoZSBwcm9jZXNzKCkgZnVuY3Rpb24sXG4gICAqIHdpdGggdGhlIGdpdmVuIHRyYWNrZWQgaWQuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBkZXRlY3RORlRNYXJrZXIgKCkge1xuICAgIHRoaXMuYXJ0b29sa2l0TkZULmRldGVjdE5GVE1hcmtlcih0aGlzLmlkKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGdpdmVuIE5GVCBtYXJrZXIgSUQgdG8gdGhlIGluZGV4IG9mIHRyYWNrZWQgSURzLlxuICAgKiBTZXRzIHRoZSBtYXJrZXJXaWR0aCBmb3IgdGhlIHBhdHRlcm4gbWFya2VyIHRvIG1hcmtlcldpZHRoLlxuICAgKiBVc2VkIGJ5IHByb2Nlc3MoKSB0byBpbXBsZW1lbnQgY29udGludW91cyB0cmFja2luZyxcbiAgICoga2VlcGluZyB0cmFjayBvZiB0aGUgbWFya2VyJ3MgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAqIGFuZCBjdXN0b21pemFibGUgbWFya2VyIHdpZHRocy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIElEIG9mIHRoZSBORlQgbWFya2VyIHRvIHRyYWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFya2VyV2lkdGggVGhlIHdpZHRoIG9mIHRoZSBtYXJrZXIgdG8gdHJhY2suXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG1hcmtlciB0cmFja2luZyBvYmplY3QuXG4gICAqL1xuICB0cmFja05GVE1hcmtlcklkIChpZDogbnVtYmVyLCBtYXJrZXJXaWR0aD86IG51bWJlcikge1xuICAgIGxldCBvYmogPSB0aGlzLmNvbnZlcnRlcigpLm5mdE1hcmtlcnNbaWRdXG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1tpZF0gPSBvYmogPSB7XG4gICAgICAgIGluUHJldmlvdXM6IGZhbHNlLFxuICAgICAgICBpbkN1cnJlbnQ6IGZhbHNlLFxuICAgICAgICBtYXRyaXg6IG5ldyBGbG9hdDY0QXJyYXkoMTIpLFxuICAgICAgICBtYXRyaXhHTF9SSDogbmV3IEZsb2F0NjRBcnJheSgxMiksXG4gICAgICAgIG1hcmtlcldpZHRoOiBtYXJrZXJXaWR0aCB8fCB0aGlzLmRlZmF1bHRNYXJrZXJXaWR0aFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWFya2VyV2lkdGgpIHtcbiAgICAgIG9iai5tYXJrZXJXaWR0aCA9IG1hcmtlcldpZHRoXG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICAvLyBtYXJrZXIgZGV0ZWN0aW9uIHJvdXRpbmVzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgY29yZSBBUlRvb2xLaXQgbWFya2VyIGRldGVjdGlvbiBmdW5jdGlvbi4gSXQgY2FsbHMgdGhyb3VnaCB0byBhIHNldCBvZlxuICAgKiBpbnRlcm5hbCBmdW5jdGlvbnMgdG8gcGVyZm9ybSB0aGUga2V5IG1hcmtlciBkZXRlY3Rpb24gc3RlcHMgb2YgYmluYXJpemF0aW9uIGFuZFxuICAgKiBsYWJlbGxpbmcsIGNvbnRvdXIgZXh0cmFjdGlvbiwgYW5kIHRlbXBsYXRlIG1hdGNoaW5nIGFuZC9vciBtYXRyaXggY29kZSBleHRyYWN0aW9uLlxuICAgKiBUeXBpY2FsbHksIHRoZSByZXN1bHRpbmcgc2V0IG9mIGRldGVjdGVkIG1hcmtlcnMgaXMgcmV0cmlldmVkIGJ5IGNhbGxpbmcgYXJHZXRNYXJrZXJOdW1cbiAgICogdG8gZ2V0IHRoZSBudW1iZXIgb2YgbWFya2VycyBkZXRlY3RlZCBhbmQgYXJHZXRNYXJrZXIgdG8gZ2V0IGFuIGFycmF5IG9mIEFSTWFya2VySW5mb1xuICAgKiBzdHJ1Y3R1cmVzIHdpdGggaW5mb3JtYXRpb24gb24gZWFjaCBkZXRlY3RlZCBtYXJrZXIsIGZvbGxvd2VkIGJ5IGEgc3RlcCBpbiB3aGljaFxuICAgKiBkZXRlY3RlZCBtYXJrZXJzIGFyZSBwb3NzaWJseSBleGFtaW5lZCBmb3Igc29tZSBtZWFzdXJlIG9mIGdvb2RuZXNzIG9mIG1hdGNoIChlLmcuIGJ5XG4gICAqIGV4YW1pbmluZyB0aGUgbWF0Y2ggY29uZmlkZW5jZSB2YWx1ZSkgYW5kIHBvc2UgZXh0cmFjdGlvbi5cbiAgICogQHBhcmFtIHtpbWFnZX0gSW1hZ2UgdG8gYmUgcHJvY2Vzc2VkIHRvIGRldGVjdCBtYXJrZXJzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgaWYgdGhlIGZ1bmN0aW9uIHByb2NlZWRlZCB3aXRob3V0IGVycm9yLCBvciBhIHZhbHVlIGxlc3MgdGhhbiAwIGluIGNhc2Ugb2YgZXJyb3IuXG4gICAqIEEgcmVzdWx0IG9mIDAgZG9lcyBub3QgaG93ZXZlciwgaW1wbHkgYW55IG1hcmtlcnMgd2VyZSBkZXRlY3RlZC5cbiAgICovXG4gIGRldGVjdE1hcmtlciAoaW1hZ2U6IGFueSkge1xuICAgIGlmICh0aGlzLl9jb3B5SW1hZ2VUb0hlYXAoaW1hZ2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZGV0ZWN0TWFya2VyKHRoaXMuaWQpXG4gICAgfVxuICAgIHJldHVybiAtOTlcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBORlQgbWFya2VyIGluZm8gc3RydWN0IGZvciB0aGUgZ2l2ZW4gTkZUIG1hcmtlciBpbmRleCBpbiBkZXRlY3RlZCBtYXJrZXJzLlxuICAgKiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIHRoZSBnbG9iYWwgYXJ0b29sa2l0TkZULk5GVE1hcmtlckluZm8gb2JqZWN0IGFuZCB3aWxsIGJlIG92ZXJ3cml0dGVuXG4gICAqIGJ5IHN1YnNlcXVlbnQgY2FsbHMuXG4gICAqIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vIG1hcmtlciB3YXMgZm91bmQuXG4gICAqIEEgbWFya2VySW5kZXggb2YgLTEgaXMgdXNlZCB0byBhY2Nlc3MgdGhlIGdsb2JhbCBjdXN0b20gbWFya2VyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFya2VySW5kZXggVGhlIGluZGV4IG9mIHRoZSBORlQgbWFya2VyIHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBORlRtYXJrZXJJbmZvIHN0cnVjdC5cbiAgICovXG4gIGdldE5GVE1hcmtlciAobWFya2VySW5kZXg6IG51bWJlcikge1xuICAgIGlmICgwID09PSB0aGlzLmFydG9vbGtpdE5GVC5nZXRORlRNYXJrZXIodGhpcy5pZCwgbWFya2VySW5kZXgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuTkZUTWFya2VySW5mbztcbiAgICB9XG4gIH07XG5cbiAgZ2V0TkZURGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldE5GVERhdGEodGhpcy5pZCk7XG4gIH1cblxuICAvLyBldmVudCBoYW5kbGluZ1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIG9uIHRoaXMgQVJDb250cm9sbGVyTkZUIGZvciB0aGUgbmFtZWQgZXZlbnQsIGNhbGxpbmcgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqIHdoZW5ldmVyIHRoYXQgZXZlbnQgaXMgZGlzcGF0Y2hlZC5cbiAgICogUG9zc2libGUgZXZlbnRzIGFyZTpcbiAgICogLSBnZXRNYXJrZXIgLSBkaXNwYXRjaGVkIHdoZW5ldmVyIHByb2Nlc3MoKSBmaW5kcyBhIHNxdWFyZSBtYXJrZXJcbiAgICogLSBnZXRNdWx0aU1hcmtlciAtIGRpc3BhdGNoZWQgd2hlbmV2ZXIgcHJvY2VzcygpIGZpbmRzIGEgdmlzaWJsZSByZWdpc3RlcmVkIG11bHRpbWFya2VyXG4gICAqIC0gZ2V0TXVsdGlNYXJrZXJTdWIgLSBkaXNwYXRjaGVkIGJ5IHByb2Nlc3MoKSBmb3IgZWFjaCBtYXJrZXIgaW4gYSB2aXNpYmxlIG11bHRpbWFya2VyXG4gICAqIC0gbG9hZCAtIGRpc3BhdGNoZWQgd2hlbiB0aGUgQVJDb250cm9sbGVyTkZUIGlzIHJlYWR5IHRvIHVzZSAodXNlZnVsIGlmIHBhc3NpbmcgaW4gYSBjYW1lcmEgVVJMIGluIHRoZSBjb25zdHJ1Y3RvcilcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIHRvLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYW4gZXZlbnQgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpcyBkaXNwYXRjaGVkLlxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBvYmplY3QpIHtcbiAgICBpZighdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdID0gW107XG4gICAgfVxuICAgIHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSB0aGUgbmFtZWQgZXZlbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGV2ZW50IHRvIHN0b3AgbGlzdGVuaW5nIHRvLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byByZW1vdmUgZnJvbSB0aGUgbGlzdGVuZXJzIG9mIHRoZSBuYW1lZCBldmVudC5cbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZTogc3RyaW5nLCBjYWxsYmFjazogb2JqZWN0KSB7XG4gICAgaWYodGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0pIHtcbiAgICAgIGxldCBpbmRleCA9IHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgaWYoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyB0aGUgZ2l2ZW4gZXZlbnQgdG8gYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIG9uIGV2ZW50Lm5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCB0byBkaXNwYXRjaC5cbiAgICovXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQ6IHsgbmFtZTogc3RyaW5nOyB0YXJnZXQ6IGFueTsgZGF0YT86IG9iamVjdCB9KSB7XG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW2V2ZW50Lm5hbWVdO1xuICAgIGlmKGxpc3RlbmVycykge1xuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIGRlYnVnIHN0dWZmXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdC8qKlxuXHQgKiBTZXRzIHVwIGEgZGVidWcgY2FudmFzIGZvciB0aGUgQVIgZGV0ZWN0aW9uLlxuICAgKiBEcmF3cyBhIHJlZCBtYXJrZXIgb24gdG9wIG9mIGVhY2ggZGV0ZWN0ZWQgc3F1YXJlIGluIHRoZSBpbWFnZS5cblx0ICogVGhlIGRlYnVnIGNhbnZhcyBpcyBhZGRlZCB0byBkb2N1bWVudC5ib2R5LlxuXHQgKi9cbiAgZGVidWdTZXR1cCgpIHtcblxuICAgIGlmKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdkZWJ1Z1NldHVwKCkgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgQnJvd3NlciBlbnZpcm9ubWVudHMnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKTtcblxuICAgIHRoaXMuc2V0RGVidWdNb2RlKHRydWUpO1xuICAgIHRoaXMuX2J3cG9pbnRlciA9IHRoaXMuZ2V0UHJvY2Vzc2luZ0ltYWdlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBnaXZlbiAzeDQgbWFya2VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbiB0aGUgMTItZWxlbWVudCB0cmFuc01hdCBhcnJheVxuICAgKiBpbnRvIGEgNHg0IFdlYkdMIG1hdHJpeCBhbmQgd3JpdGVzIHRoZSByZXN1bHQgaW50byB0aGUgMTYtZWxlbWVudCBnbE1hdCBhcnJheS5cbiAgICogSWYgc2NhbGUgcGFyYW1ldGVyIGlzIGdpdmVuLCBzY2FsZXMgdGhlIHRyYW5zZm9ybSBvZiB0aGUgZ2xNYXQgYnkgdGhlIHNjYWxlIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IHRyYW5zTWF0IFRoZSAzeDQgbWFya2VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IGdsTWF0IFRoZSA0eDQgR0wgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGUgVGhlIHNjYWxlIGZvciB0aGUgdHJhbnNmb3JtLlxuICAgKi9cbiAgdHJhbnNNYXRUb0dMTWF0ICh0cmFuc01hdDogRmxvYXQ2NEFycmF5LCBnbE1hdDogRmxvYXQ2NEFycmF5LCBzY2FsZT86IG51bWJlciwpIHtcbiAgICBpZiAoZ2xNYXQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBnbE1hdCA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpXG4gICAgfVxuXG4gICAgZ2xNYXRbMCArIDAgKiA0XSA9IHRyYW5zTWF0WzBdIC8vIFIxQzFcbiAgICBnbE1hdFswICsgMSAqIDRdID0gdHJhbnNNYXRbMV0gLy8gUjFDMlxuICAgIGdsTWF0WzAgKyAyICogNF0gPSB0cmFuc01hdFsyXVxuICAgIGdsTWF0WzAgKyAzICogNF0gPSB0cmFuc01hdFszXVxuICAgIGdsTWF0WzEgKyAwICogNF0gPSB0cmFuc01hdFs0XSAvLyBSMlxuICAgIGdsTWF0WzEgKyAxICogNF0gPSB0cmFuc01hdFs1XVxuICAgIGdsTWF0WzEgKyAyICogNF0gPSB0cmFuc01hdFs2XVxuICAgIGdsTWF0WzEgKyAzICogNF0gPSB0cmFuc01hdFs3XVxuICAgIGdsTWF0WzIgKyAwICogNF0gPSB0cmFuc01hdFs4XSAvLyBSM1xuICAgIGdsTWF0WzIgKyAxICogNF0gPSB0cmFuc01hdFs5XVxuICAgIGdsTWF0WzIgKyAyICogNF0gPSB0cmFuc01hdFsxMF1cbiAgICBnbE1hdFsyICsgMyAqIDRdID0gdHJhbnNNYXRbMTFdXG4gICAgZ2xNYXRbMyArIDAgKiA0XSA9IDAuMFxuICAgIGdsTWF0WzMgKyAxICogNF0gPSAwLjBcbiAgICBnbE1hdFszICsgMiAqIDRdID0gMC4wXG4gICAgZ2xNYXRbMyArIDMgKiA0XSA9IDEuMFxuXG4gICAgaWYgKHNjYWxlICE9IHVuZGVmaW5lZCAmJiBzY2FsZSAhPT0gMC4wKSB7XG4gICAgICBnbE1hdFsxMl0gKj0gc2NhbGVcbiAgICAgIGdsTWF0WzEzXSAqPSBzY2FsZVxuICAgICAgZ2xNYXRbMTRdICo9IHNjYWxlXG4gICAgfVxuICAgIHJldHVybiBnbE1hdFxuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gNHg0IG9wZW5HTCBtYXRyaXggaW4gdGhlIDE2LWVsZW1lbnQgdHJhbnNNYXQgYXJyYXlcbiAgICogaW50byBhIDR4NCBPcGVuR0wgUmlnaHQtSGFuZC1WaWV3IG1hdHJpeCBhbmQgd3JpdGVzIHRoZSByZXN1bHQgaW50byB0aGUgMTYtZWxlbWVudCBnbE1hdCBhcnJheS5cbiAgICogSWYgc2NhbGUgcGFyYW1ldGVyIGlzIGdpdmVuLCBzY2FsZXMgdGhlIHRyYW5zZm9ybSBvZiB0aGUgZ2xNYXQgYnkgdGhlIHNjYWxlIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IGdsTWF0cml4IFRoZSA0eDQgbWFya2VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IFtnbFJoTWF0cml4XSBUaGUgNHg0IEdMIHJpZ2h0IGhhbmQgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NjYWxlXSBUaGUgc2NhbGUgZm9yIHRoZSB0cmFuc2Zvcm0uXG4gICAqL1xuICBhcmdsQ2FtZXJhVmlld1JIZiAoZ2xNYXRyaXg6IEZsb2F0NjRBcnJheSwgZ2xSaE1hdHJpeD86IEZsb2F0NjRBcnJheSwgc2NhbGU/OiBudW1iZXIpIHtcbiAgICBsZXQgbV9tb2RlbHZpZXdcbiAgICBpZiAoZ2xSaE1hdHJpeCA9PSB1bmRlZmluZWQpIHsgbV9tb2RlbHZpZXcgPSBuZXcgRmxvYXQ2NEFycmF5KDE2KSB9IGVsc2UgeyBtX21vZGVsdmlldyA9IGdsUmhNYXRyaXggfVxuXG4gICAgLy8geFxuICAgIG1fbW9kZWx2aWV3WzBdID0gZ2xNYXRyaXhbMF1cbiAgICBtX21vZGVsdmlld1s0XSA9IGdsTWF0cml4WzRdXG4gICAgbV9tb2RlbHZpZXdbOF0gPSBnbE1hdHJpeFs4XVxuICAgIG1fbW9kZWx2aWV3WzEyXSA9IGdsTWF0cml4WzEyXVxuICAgIC8vIHlcbiAgICBtX21vZGVsdmlld1sxXSA9IC1nbE1hdHJpeFsxXVxuICAgIG1fbW9kZWx2aWV3WzVdID0gLWdsTWF0cml4WzVdXG4gICAgbV9tb2RlbHZpZXdbOV0gPSAtZ2xNYXRyaXhbOV1cbiAgICBtX21vZGVsdmlld1sxM10gPSAtZ2xNYXRyaXhbMTNdXG4gICAgLy8gelxuICAgIG1fbW9kZWx2aWV3WzJdID0gLWdsTWF0cml4WzJdXG4gICAgbV9tb2RlbHZpZXdbNl0gPSAtZ2xNYXRyaXhbNl1cbiAgICBtX21vZGVsdmlld1sxMF0gPSAtZ2xNYXRyaXhbMTBdXG4gICAgbV9tb2RlbHZpZXdbMTRdID0gLWdsTWF0cml4WzE0XVxuXG4gICAgLy8gMCAwIDAgMVxuICAgIG1fbW9kZWx2aWV3WzNdID0gMFxuICAgIG1fbW9kZWx2aWV3WzddID0gMFxuICAgIG1fbW9kZWx2aWV3WzExXSA9IDBcbiAgICBtX21vZGVsdmlld1sxNV0gPSAxXG5cbiAgICBpZiAoc2NhbGUgIT0gdW5kZWZpbmVkICYmIHNjYWxlICE9PSAwLjApIHtcbiAgICAgIG1fbW9kZWx2aWV3WzEyXSAqPSBzY2FsZVxuICAgICAgbV9tb2RlbHZpZXdbMTNdICo9IHNjYWxlXG4gICAgICBtX21vZGVsdmlld1sxNF0gKj0gc2NhbGVcbiAgICB9XG5cbiAgICBnbFJoTWF0cml4ID0gbV9tb2RlbHZpZXdcblxuICAgIHJldHVybiBnbFJoTWF0cml4XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgMTYtZWxlbWVudCBXZWJHTCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdXNlZCBieSBBUkNvbnRyb2xsZXJORlQucHJvY2VzcyB0b1xuICAgKiBwYXNzIG1hcmtlciBXZWJHTCBtYXRyaWNlcyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAqIFVuaXF1ZSB0byBlYWNoIEFSQ29udHJvbGxlck5GVC5cbiAgICogQHJldHVybiB7RmxvYXQ2NEFycmF5fSBUaGUgMTYtZWxlbWVudCBXZWJHTCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdXNlZCBieSB0aGUgQVJDb250cm9sbGVyTkZULlxuICAgKi9cbiAgIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4ICgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1fbWF0XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb2plY3Rpb24gbWF0cml4IGNvbXB1dGVkIGZyb20gY2FtZXJhIHBhcmFtZXRlcnMgZm9yIHRoZSBBUkNvbnRyb2xsZXJORlQuXG4gICAqIEByZXR1cm4ge0Zsb2F0NjRBcnJheX0gVGhlIDE2LWVsZW1lbnQgV2ViR0wgY2FtZXJhIG1hdHJpeCBmb3IgdGhlIEFSQ29udHJvbGxlck5GVCBjYW1lcmEgcGFyYW1ldGVycy5cbiAgICovXG4gICBnZXRDYW1lcmFNYXRyaXggKCkge1xuICAgIHJldHVybiB0aGlzLmNhbWVyYV9tYXRcbiAgfTtcblxuICAvLyBTZXR0ZXIgLyBHZXR0ZXIgUHJveGllc1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogRW5hYmxlcyBvciBkaXNhYmxlcyBkZWJ1ZyBtb2RlIGluIHRoZSB0cmFja2VyLiBXaGVuIGVuYWJsZWQsIGEgYmxhY2sgYW5kIHdoaXRlIGRlYnVnXG4gICAqIGltYWdlIGlzIGdlbmVyYXRlZCBkdXJpbmcgbWFya2VyIGRldGVjdGlvbi4gVGhlIGRlYnVnIGltYWdlIGlzIHVzZWZ1bCBmb3IgdmlzdWFsaXNpbmdcbiAgICogdGhlIGJpbmFyaXphdGlvbiBwcm9jZXNzIGFuZCBjaG9vc2luZyBhIHRocmVzaG9sZCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBtb2RlIHRydWUgdG8gZW5hYmxlIGRlYnVnIG1vZGUsIGZhbHNlIHRvIGRpc2FibGUgZGVidWcgbW9kZVxuICAgKiBAc2VlIGdldERlYnVnTW9kZSgpXG4gICAqL1xuICBzZXREZWJ1Z01vZGUobW9kZTogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXREZWJ1Z01vZGUodGhpcy5pZCwgbW9kZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBkZWJ1ZyBtb2RlIGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIHdoZW4gZGVidWcgbW9kZSBpcyBlbmFibGVkLCBmYWxzZSB3aGVuIGRlYnVnIG1vZGUgaXMgZGlzYWJsZWRcbiAgICogQHNlZSAgc2V0RGVidWdNb2RlKClcbiAgICovXG4gIGdldERlYnVnTW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0RGVidWdNb2RlKHRoaXMuaWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBFbXNjcmlwdGVuIEhFQVAgb2Zmc2V0IHRvIHRoZSBkZWJ1ZyBwcm9jZXNzaW5nIGltYWdlIHVzZWQgYnkgQVJUb29sS2l0LlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhFQVAgb2Zmc2V0IHRvIHRoZSBkZWJ1ZyBwcm9jZXNzaW5nIGltYWdlLlxuICAgKi9cbiAgZ2V0UHJvY2Vzc2luZ0ltYWdlICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0UHJvY2Vzc2luZ0ltYWdlKHRoaXMuaWQpXG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGxvZ2dpbmcgbGV2ZWwgdG8gdXNlIGJ5IEFSVG9vbEtpdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vZGUgdHlwZSBmb3IgdGhlIGxvZyBsZXZlbC5cbiAgICovXG4gIHNldExvZ0xldmVsIChtb2RlOiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldExvZ0xldmVsKG1vZGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsb2dnaW5nIGxldmVsIHVzZWQgYnkgQVJUb29sS2l0LlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHJldHVybiB0aGUgbG9nIGxldmVsIGluIHVzZS5cbiAgICovXG4gIGdldExvZ0xldmVsICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0TG9nTGV2ZWwoKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmUgb2YgdGhlIGNhbWVyYS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgbmVhciBwbGFuZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IDAgKHZvaWQpXG4gICAqL1xuICAgc2V0UHJvamVjdGlvbk5lYXJQbGFuZSAodmFsdWU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRQcm9qZWN0aW9uTmVhclBsYW5lKHRoaXMuaWQsIHZhbHVlKVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgbmVhciBwbGFuZSBvZiB0aGUgY2FtZXJhIHdpdGggdGhlIGdpdmUgaWQuXG4gICAqIEByZXR1cm4ge251bWJlcn0gdGhlIHZhbHVlIG9mIHRoZSBuZWFyIHBsYW5lLlxuICAgKi9cbiAgZ2V0UHJvamVjdGlvbk5lYXJQbGFuZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFByb2plY3Rpb25OZWFyUGxhbmUodGhpcy5pZClcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIGZhciBwbGFuZSBvZiB0aGUgY2FtZXJhLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBmYXIgcGxhbmVcbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgc2V0UHJvamVjdGlvbkZhclBsYW5lICh2YWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldFByb2plY3Rpb25GYXJQbGFuZSh0aGlzLmlkLCB2YWx1ZSlcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIGZhciBwbGFuZSBvZiB0aGUgY2FtZXJhIHdpdGggdGhlIGdpdmUgaWQuXG4gICAqIEByZXR1cm4ge251bWJlcn0gdGhlIHZhbHVlIG9mIHRoZSBmYXIgcGxhbmUuXG4gICAqL1xuICBnZXRQcm9qZWN0aW9uRmFyUGxhbmUgKCkge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRQcm9qZWN0aW9uRmFyUGxhbmUodGhpcy5pZClcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBsYWJlbGluZyB0aHJlc2hvbGQgbW9kZSAoYXV0by9tYW51YWwpLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbW9kZSBBbiBpbnRlZ2VyIHNwZWNpZnlpbmcgdGhlIG1vZGUuIE9uZSBvZjpcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfTUFOVUFMLFxuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTixcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19PVFNVLFxuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFLFxuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0JSQUNLRVRJTkdcbiAgICovXG4gIHNldFRocmVzaG9sZE1vZGUobW9kZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldFRocmVzaG9sZE1vZGUodGhpcy5pZCwgbW9kZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgdGhyZXNob2xkIG1vZGUgdXNlZCBmb3IgaW1hZ2UgYmluYXJpemF0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IHRocmVzaG9sZCBtb2RlXG4gICAqIEBzZWUgZ2V0VmlkZW9UaHJlc2hvbGRNb2RlKClcbiAgICovXG4gIGdldFRocmVzaG9sZE1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFRocmVzaG9sZE1vZGUodGhpcy5pZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGFiZWxpbmcgdGhyZXNob2xkLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGZvcmNlcyBzZXRzIHRoZSB0aHJlc2hvbGQgdmFsdWUuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIEFSX0RFRkFVTFRfTEFCRUxJTkdfVEhSRVNIIHdoaWNoIGlzIDEwMC5cbiAgICogVGhlIGN1cnJlbnQgdGhyZXNob2xkIG1vZGUgaXMgbm90IGFmZmVjdGVkIGJ5IHRoaXMgY2FsbC5cbiAgICogVHlwaWNhbGx5LCB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiBsYWJlbGluZyB0aHJlc2hvbGQgbW9kZVxuICAgKiBpcyBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9NQU5VQUwuXG4gICAqIFRoZSB0aHJlc2hvbGQgdmFsdWUgaXMgbm90IHJlbGV2YW50IGlmIHRocmVzaG9sZCBtb2RlIGlzXG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fQURBUFRJVkUuXG4gICAqIEJhY2tncm91bmQ6IFRoZSBsYWJlbGluZyB0aHJlc2hvbGQgaXMgdGhlIHZhbHVlIHdoaWNoXG4gICAqIHRoZSBBUiBsaWJyYXJ5IHVzZXMgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGJsYWNrIGFuZCB3aGl0ZVxuICAgKiBwb3J0aW9ucyBvZiBhbiBBUlRvb2xLaXQgbWFya2VyLiBTaW5jZSB0aGUgYWN0dWFsIGJyaWdodG5lc3MsXG4gICAqIGNvbnRyYXN0LCBhbmQgZ2FtbWEgb2YgaW5jb21pbmcgaW1hZ2VzIGNhbiB2YXJ5IHNpZ25maWNhbnRseVxuICAgKiBiZXR3ZWVuIGRpZmZlcmVudCBjYW1lcmFzIGFuZCBsaWdodGluZyBjb25kaXRpb25zLCB0aGlzXG4gICAqIHZhbHVlIHR5cGljYWxseSBuZWVkcyB0byBiZSBhZGp1c3RlZCBkeW5hbWljYWxseSB0byBhXG4gICAqIHN1aXRhYmxlIG1pZHBvaW50IGJldHdlZW4gdGhlIG9ic2VydmVkIHZhbHVlcyBmb3IgYmxhY2tcbiAgICogYW5kIHdoaXRlIHBvcnRpb25zIG9mIHRoZSBtYXJrZXJzIGluIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRocmVzaG9sZCBBbiBpbnRlZ2VyIGluIHRoZSByYW5nZSBbMCwyNTVdIChpbmNsdXNpdmUpLlxuICAgKi9cbiAgc2V0VGhyZXNob2xkKHRocmVzaG9sZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULnNldFRocmVzaG9sZCh0aGlzLmlkLCB0aHJlc2hvbGQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgbGFiZWxpbmcgdGhyZXNob2xkLlxuICAgKiBUaGlzIGZ1bmN0aW9uIHF1ZXJpZXMgdGhlIGN1cnJlbnQgbGFiZWxpbmcgdGhyZXNob2xkLiBGb3IsXG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fTUVESUFOLCBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX09UU1UsXG4gICAqIGFuZCBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0JSQUNLRVRJTkdcbiAgICogdGhlIHRocmVzaG9sZCB2YWx1ZSBpcyBvbmx5IHZhbGlkIHVudGlsIHRoZSBuZXh0IGF1dG8tdXBkYXRlLlxuICAgKiBUaGUgY3VycmVudCB0aHJlc2hvbGQgbW9kZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhpcyBjYWxsLlxuICAgKiBUaGUgdGhyZXNob2xkIHZhbHVlIGlzIG5vdCByZWxldmFudCBpZiB0aHJlc2hvbGQgbW9kZSBpc1xuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IHRocmVzaG9sZCB2YWx1ZS5cbiAgICovXG4gIGdldFRocmVzaG9sZCgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0VGhyZXNob2xkKHRoaXMuaWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBMb2FkcyBhbiBORlQgbWFya2VyIGZyb20gdGhlIGdpdmVuIFVSTCBvciBkYXRhIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsT3JEYXRhIC0gVGhlIFVSTCBwcmVmaXggb3IgZGF0YSBvZiB0aGUgTkZUIG1hcmtlcnMgdG8gbG9hZC5cbiAgKi9cbiAgYXN5bmMgbG9hZE5GVE1hcmtlciAodXJsT3JEYXRhOiBzdHJpbmcpIHtcbiAgICBsZXQgbmZ0ID0gYXdhaXQgdGhpcy5hcnRvb2xraXRORlQuYWRkTkZUTWFya2VyKHRoaXMuaWQsIHVybE9yRGF0YSlcbiAgICB0aGlzLm5mdE1hcmtlckNvdW50ID0gbmZ0LmlkICsgMVxuICAgIHJldHVybiBuZnRcbiAgfTtcblxuICAvKipcbiAgICogTG9hZHMgYW4gTkZUIG1hcmtlciBmcm9tIHRoZSBnaXZlbiBVUkwgb3IgZGF0YSBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybE9yRGF0YSAtIFRoZSBVUkwgcHJlZml4IG9yIGRhdGEgb2YgdGhlIE5GVCBtYXJrZXJzIHRvIGxvYWQuXG4gICovXG4gICBhc3luYyBsb2FkTkZUTWFya2VyMiAodXJsT3JEYXRhOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgbGV0IG5mdCA9IGF3YWl0IHRoaXMuYXJ0b29sa2l0TkZULmFkZE5GVE1hcmtlcnModGhpcy5pZCwgdXJsT3JEYXRhKVxuICAgIC8vdGhpcy5uZnRNYXJrZXJDb3VudCA9IG5mdC5pZCArIDFcbiAgICByZXR1cm4gbmZ0XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaW1hZ2UgcHJvY2Vzc2luZyBtb2RlLlxuICAgKiBXaGVuIHRoZSBpbWFnZSBwcm9jZXNzaW5nIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBhbGwgcGl4ZWxzIGluIGVhY2ggaW5jb21pbmcgaW1hZ2VcbiAgICogdG8gbG9jYXRlIG1hcmtlcnMuIFdoZW4gdGhlIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GSUVMRF9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBwaXhlbHMgaW4gb25seSBldmVyeSBzZWNvbmQgcGl4ZWwgcm93IGFuZFxuICAgKiBjb2x1bW4uIFRoaXMgaXMgdXNlZnVsIGJvdGggZm9yIGhhbmRsaW5nIGltYWdlcyBmcm9tIGludGVybGFjZWRcbiAgICogdmlkZW8gc291cmNlcyAod2hlcmUgYWx0ZXJuYXRlIGxpbmVzIGFyZSBhc3NlbWJsZWQgZnJvbSBhbHRlcm5hdGVcbiAgICogZmllbGRzIGFuZCB0aHVzIGhhdmUgb25lIGZpZWxkIHRpbWUtZGlmZmVyZW5jZSwgcmVzdWx0aW5nIGluIGFcbiAgICogXCJjb21iXCIgZWZmZWN0KSBzdWNoIGFzIERpZ2l0YWwgVmlkZW8gY2FtZXJhcy5cbiAgICogVGhlIGVmZmVjdGl2ZSByZWR1Y3Rpb24gYnkgNzUlIGluIHRoZSBwaXhlbHMgcHJvY2Vzc2VkIGFsc29cbiAgICogaGFzIHV0aWxpdHkgaW4gYWNjZWxlcmF0aW5nIHRyYWNraW5nIGJ5IGVmZmVjdGl2ZWx5IHJlZHVjaW5nXG4gICAqIHRoZSBpbWFnZSBzaXplIHRvIG9uZSBxdWFydGVyIHNpemUsIGF0IHRoZSBjb3N0IG9mIHBvc2UgYWNjdXJhY2N5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbW9kZVxuICAgKiBPcHRpb25zIGZvciB0aGlzIGZpZWxkIGFyZTpcbiAgICogQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRVxuICAgKiBBUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFXG4gICAqIFRoZSBkZWZhdWx0IG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRS5cbiAgICovXG4gIHNldEltYWdlUHJvY01vZGUgKG1vZGU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRJbWFnZVByb2NNb2RlKHRoaXMuaWQsIG1vZGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGltYWdlIHByb2Nlc3NpbmcgbW9kZS5cbiAgICogU2VlIGFyU2V0SW1hZ2VQcm9jTW9kZSgpIGZvciBhIGNvbXBsZXRlIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IGltYWdlIHByb2Nlc3NpbmcgbW9kZS5cbiAgICovXG4gIGdldEltYWdlUHJvY01vZGUgKCkge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRJbWFnZVByb2NNb2RlKHRoaXMuaWQpO1xuICB9O1xuXG4gIC8vIHByaXZhdGUgYWNjZXNzb3JzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFVzZWQgaW50ZXJuYWxseSBieSBBUkNvbnRyb2xsZXJORlQsIGl0IHBlcm1pdCB0byBhZGQgbWV0aG9kcyB0byB0aGlzLlxuICAgKiBAcmV0dXJuIHthbnl9IEFSQ29udHJvbGxlck5GVFxuICAgKi9cbiAgcHJpdmF0ZSBjb252ZXJ0ZXIoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGluaXQgdGhlIEFSQ29udHJvbGxlck5GVCB3aXRoIHRoZSBuZWNlc3NhcnkgcGFybWV0ZXJzIGFuZCB2YXJpYWJsZXMuXG4gICAqIERvbid0IGNhbGwgZGlyZWN0bHkgdGhpcyBidXQgaW5zdGVhZCBpbnN0YW50aWF0ZSBhIG5ldyBBUkNvbnRyb2xsZXJORlQuXG4gICAqIEByZXR1cm4ge0FSQ29udHJvbGxlck5GVH0gVGhlIGluaXRpYWxpemVkIEFSQ29udHJvbGxlck5GVCBpbnN0YW5jZVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBfaW5pdGlhbGl6ZSAoKSB7XG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgdG9vbGtpdFxuICAgIHRoaXMuYXJ0b29sa2l0TkZUID0gYXdhaXQgbmV3IEFSVG9vbGtpdE5GVCgpLmluaXQoKTtcbiAgICBjb25zb2xlLmxvZygnW0FSQ29udHJvbGxlck5GVF0nLCAnQVJUb29sa2l0TkZUIGluaXRpYWxpemVkJyk7XG5cbiAgICAvLyBsb2FkIHRoZSBjYW1lcmFcbiAgICB0aGlzLmNhbWVyYUlkID0gYXdhaXQgdGhpcy5hcnRvb2xraXRORlQubG9hZENhbWVyYSh0aGlzLmNhbWVyYVBhcmFtKVxuICAgIGNvbnNvbGUubG9nKCdbQVJDb250cm9sbGVyTkZUXScsICdDYW1lcmEgcGFyYW1zIGxvYWRlZCB3aXRoIElEJywgdGhpcy5jYW1lcmFJZClcblxuICAgIC8vIHNldHVwXG4gICAgdGhpcy5pZCA9IHRoaXMuYXJ0b29sa2l0TkZULnNldHVwKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNhbWVyYUlkKTtcbiAgICBjb25zb2xlLmxvZygnW0FSQ29udHJvbGxlck5GVF0nLCAnR290IElEIGZyb20gc2V0dXAnLCB0aGlzLmlkKTtcblxuICAgIHRoaXMuX2luaXRORlQoKTtcblxuICAgIGNvbnN0IHBhcmFtczogZGVsZWdhdGVNZXRob2RzWydmcmFtZU1hbGxvYyddID0gdGhpcy5hcnRvb2xraXRORlQuZnJhbWVNYWxsb2M7XG4gICAgdGhpcy5mcmFtZXBvaW50ZXIgPSBwYXJhbXMuZnJhbWVwb2ludGVyO1xuICAgIHRoaXMuZnJhbWVzaXplID0gcGFyYW1zLmZyYW1lc2l6ZTtcbiAgICB0aGlzLnZpZGVvTHVtYVBvaW50ZXIgPSBwYXJhbXMudmlkZW9MdW1hUG9pbnRlcjtcblxuICAgIHRoaXMuZGF0YUhlYXAgPSBuZXcgVWludDhBcnJheSh0aGlzLmFydG9vbGtpdE5GVC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLCB0aGlzLmZyYW1lcG9pbnRlciwgdGhpcy5mcmFtZXNpemUpO1xuICAgIHRoaXMudmlkZW9MdW1hID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnRvb2xraXRORlQuaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlciwgdGhpcy52aWRlb0x1bWFQb2ludGVyLCB0aGlzLmZyYW1lc2l6ZSAvIDQpO1xuXG4gICAgdGhpcy5jYW1lcmFfbWF0ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmFydG9vbGtpdE5GVC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLCBwYXJhbXMuY2FtZXJhLCAxNik7XG4gICAgdGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdCA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5hcnRvb2xraXRORlQuaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlciwgcGFyYW1zLnRyYW5zZm9ybSwgMTIpO1xuXG4gICAgdGhpcy5zZXRQcm9qZWN0aW9uTmVhclBsYW5lKDAuMSk7XG4gICAgdGhpcy5zZXRQcm9qZWN0aW9uRmFyUGxhbmUoMTAwMCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIG5hbWU6ICdsb2FkJyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzXG4gICAgICB9KVxuICAgIH0sIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIG5lY2Vzc2FyeSBrcG0gaGFuZGxlIGZvciBORlQgYW5kIHRoZSBzZXR0aW5ncyBmb3IgdGhlIENQVS5cbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgcHJpdmF0ZSBfaW5pdE5GVCAoKSB7XG4gICAgdGhpcy5hcnRvb2xraXRORlQuc2V0dXBBUjIodGhpcy5pZClcbiAgfTtcblxuICAvKipcbiAgICogQ29weSB0aGUgSW1hZ2UgZGF0YSB0byB0aGUgSEVBUCBmb3IgdGhlIGRlYnVnU2V0dXAgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge251bWJlcn0gMCAodm9pZClcbiAgICovXG4gIHByaXZhdGUgX2NvcHlJbWFnZVRvSGVhcCAoc291cmNlSW1hZ2U6IEltYWdlT2JqKSB7XG4gICAgaWYgKCFzb3VyY2VJbWFnZSkge1xuICAgIC8vIGRlZmF1bHQgdG8gcHJlbG9hZGVkIGltYWdlXG4gICAgICBzb3VyY2VJbWFnZSA9IHRoaXMuaW1hZ2VcbiAgICB9XG5cbiAgICAvLyB0aGlzIGlzIG9mIHR5cGUgVWludDhDbGFtcGVkQXJyYXk6XG4gICAgLy8gVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHR5cGVkIGFycmF5IHJlcHJlc2VudHMgYW4gYXJyYXkgb2YgOC1iaXQgdW5zaWduZWRcbiAgICAvLyBpbnRlZ2VycyBjbGFtcGVkIHRvIDAtMjU1XG4gICAgLy8gQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9VaW50OENsYW1wZWRBcnJheVxuICAgIGxldCBkYXRhOiBVaW50OENsYW1wZWRBcnJheTtcblxuICAgIGlmIChzb3VyY2VJbWFnZS5kYXRhKSB7XG4gICAgICAvLyBkaXJlY3RseSB1c2Ugc291cmNlIGltYWdlXG4gICAgICBkYXRhID0gc291cmNlSW1hZ2UuZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN0eC5zYXZlKClcblxuICAgICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICdwb3J0cmFpdCcpIHtcbiAgICAgICAgdGhpcy5jdHgudHJhbnNsYXRlKHRoaXMuY2FudmFzLndpZHRoLCAwKVxuICAgICAgICB0aGlzLmN0eC5yb3RhdGUoTWF0aC5QSSAvIDIpXG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2Uoc291cmNlSW1hZ2UsIDAsIDAsIHRoaXMuY2FudmFzLmhlaWdodCwgdGhpcy5jYW52YXMud2lkdGgpIC8vIGRyYXcgdmlkZW9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2Uoc291cmNlSW1hZ2UsIDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpIC8vIGRyYXcgdmlkZW9cbiAgICAgIH1cblxuICAgICAgdGhpcy5jdHgucmVzdG9yZSgpXG5cbiAgICAgIGxldCBpbWFnZURhdGEgPSB0aGlzLmN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodClcbiAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YVxuICAgIH1cblxuICAgIC8vIEhlcmUgd2UgaGF2ZSBhY2Nlc3MgdG8gdGhlIHVubW9kaWZpZWQgdmlkZW8gaW1hZ2UuIFdlIG5vdyBuZWVkIHRvIGFkZCB0aGUgdmlkZW9MdW1hIGNoYW5lbCB0byBiZSBhYmxlIHRvIHNlcnZlIHRoZSB1bmRlcmx5aW5nIEFSVEsgQVBJXG4gICAgaWYgKHRoaXMudmlkZW9MdW1hKSB7XG4gICAgICBsZXQgcSA9IDBcblxuICAgICAgLy8gQ3JlYXRlIGx1bWEgZnJvbSB2aWRlbyBkYXRhIGFzc3VtaW5nIFBpeGVsZm9ybWF0IEFSX1BJWEVMX0ZPUk1BVF9SR0JBXG4gICAgICAvLyBzZWUgKEFSVG9vbEtpdEpTLmNwcCBMOiA0MylcbiAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgdGhpcy52aWRlb1NpemU7IHArKykgeyAgICAgIFxuICAgICAgICBsZXQgciA9IGRhdGFbcSArIDBdLCBnID0gZGF0YVtxICsgMV0sIGIgPSBkYXRhW3EgKyAyXTtcbiAgICAgICAgLy8gQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTk2MjQxLzU4NDM2NDIgICAgXG4gICAgICAgIHRoaXMudmlkZW9MdW1hW3BdID0gKHIgKyByICsgciArIGIgKyBnICsgZyArIGcgKyBnKSA+PiAzXG4gICAgICAgIHEgKz0gNFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGFIZWFwKSB7XG4gICAgICB0aGlzLmRhdGFIZWFwLnNldChkYXRhKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcbn1cbiIsIi8qXG4gKiAgQVJUb29sa2l0TkZULnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IE1vZHVsZUxvYWRlciBmcm9tICcuL01vZHVsZUxvYWRlcidcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJ1xuXG5jb25zdCBVTktOT1dOX01BUktFUiA9IC0xXG5jb25zdCBORlRfTUFSS0VSID0gMFxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBOb2RlSlMge1xuICAgIGludGVyZmFjZSBHbG9iYWwge1xuICAgICAgIGFydG9vbGtpdE5GVDogYW55O1xuICAgIH1cbiAgfVxuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBhcnRvb2xraXRORlQ6IGFueTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgcnVudGltZUluc3RhbmNlZCB7XG4gIGluc3RhbmNlOiBhbnk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFSVG9vbGtpdE5GVCB7XG4gIHN0YXRpYyBnZXQgVU5LTk9XTl9NQVJLRVIgKCkgeyByZXR1cm4gVU5LTk9XTl9NQVJLRVIgfVxuICBzdGF0aWMgZ2V0IE5GVF9NQVJLRVIgKCkgeyByZXR1cm4gTkZUX01BUktFUiB9XG5cbiAgcHVibGljIGluc3RhbmNlOiBhbnk7XG4gIHByaXZhdGUgbWFya2VyTkZUQ291bnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBjYW1lcmFDb3VudDogbnVtYmVyO1xuICBwcml2YXRlIHZlcnNpb246IHN0cmluZztcbiAgcHVibGljIHNldHVwOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbWVyYUlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHRlYXJkb3duOiAoKSA9PiB2b2lkO1xuICBwdWJsaWMgc2V0dXBBUjI6IChpZDogbnVtYmVyKSA9PiB2b2lkO1xuICBwdWJsaWMgc2V0RGVidWdNb2RlOiAoaWQ6IG51bWJlciwgbW9kZTogYm9vbGVhbikgPT4gbnVtYmVyO1xuICBwdWJsaWMgZ2V0RGVidWdNb2RlOiAoaWQ6IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgcHVibGljIGdldFByb2Nlc3NpbmdJbWFnZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGRldGVjdE1hcmtlcjogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGRldGVjdE5GVE1hcmtlcjogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldE5GVE1hcmtlcjogKGlkOiBudW1iZXIsIG1hcmtlckluZGV4OiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldE5GVERhdGE6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBzZXRMb2dMZXZlbDogKG1vZGU6IGJvb2xlYW4pID0+IG51bWJlcjtcbiAgcHVibGljIGdldExvZ0xldmVsOiAoKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBmcmFtZU1hbGxvYzoge1xuICAgIGZyYW1lcG9pbnRlcjogbnVtYmVyO1xuICAgIGZyYW1lc2l6ZTogbnVtYmVyO1xuICAgIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgICBjYW1lcmE6IG51bWJlcjtcbiAgICB0cmFuc2Zvcm06IG51bWJlclxuICB9XG4gIHB1YmxpYyAgTkZUTWFya2VySW5mbzoge1xuICAgIGVycm9yOiBudW1iZXI7XG4gICAgZm91bmQ6IG51bWJlcjtcbiAgICBpZDogbnVtYmVyLFxuICAgIHBvc2U6IEZsb2F0NjRBcnJheTtcbiAgfTtcbiAgcHVibGljIHNldFByb2plY3Rpb25OZWFyUGxhbmU6IChpZDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBwdWJsaWMgZ2V0UHJvamVjdGlvbk5lYXJQbGFuZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHNldFByb2plY3Rpb25GYXJQbGFuZTogKGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gIHB1YmxpYyBnZXRQcm9qZWN0aW9uRmFyUGxhbmU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBzZXRUaHJlc2hvbGRNb2RlOiAoaWQ6IG51bWJlciwgbW9kZTogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBnZXRUaHJlc2hvbGRNb2RlOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBwdWJsaWMgc2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlciwgdGhyZXNob2xkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldFRocmVzaG9sZDogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHNldEltYWdlUHJvY01vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldEltYWdlUHJvY01vZGU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG5cblxuICAvLyBjb25zdHJ1Y3Rpb25cbiAgLyoqXG4gICAqIFRoZSBBUlRvb2xraXRORlQgY29uc3RydWN0b3IuIEl0IGhhcyBubyBhcmd1bWVudHMuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIGluaXRpYWxpemVkOlxuICAgKiAtIGluc3RhbmNlXG4gICAqIC0gbWFya2VyTkZUQ291bnRcbiAgICogLSBjYW1lcmFDb3VudFxuICAgKiAtIHZlcnNpb25cbiAgICogQSBtZXNzYWdlIGlzIGRpc3BsYXllZCBpbiB0aGUgYnJvd3NlciBjb25zb2xlIGR1cmluZyB0aGUgaW50aXRpYWxpemF0aW9uLCBmb3IgZXhhbXBsZTpcbiAgICogXCJBUlRvb2xraXRORlQgMC45LjFcIlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8vIHJlZmVyZW5jZSB0byBXQVNNIG1vZHVsZVxuICAgIHRoaXMuaW5zdGFuY2VcbiAgICB0aGlzLm1hcmtlck5GVENvdW50ID0gMFxuICAgIHRoaXMuY2FtZXJhQ291bnQgPSAwXG4gICAgdGhpcy52ZXJzaW9uID0gJzAuOS4xJ1xuICAgIGNvbnNvbGUuaW5mbygnQVJUb29sa2l0TkZUICcsIHRoaXMudmVyc2lvbilcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGluaXRpYWxpemF0aW9uXG4gIC8qKlxuICAgKiBJbml0IHRoZSBjbGFzcyBpbmplY3RpbmcgdGhlIFdhc20gTW9kdWxlLCBsaW5rIHRoZSBpbnN0YW5jZWQgbWV0aG9kcyBhbmRcbiAgICogY3JlYXRlIGEgZ2xvYmFsIGFydG9vbGtpdE5GVCB2YXJpYWJsZS5cbiAgICogQHJldHVybiB7b2JqZWN0fSB0aGUgdGhpcyBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBhc3luYyBpbml0ICgpIHtcbiAgICAgY29uc3QgcnVudGltZTogcnVudGltZUluc3RhbmNlZCA9IGF3YWl0IE1vZHVsZUxvYWRlci5pbml0LmNhdGNoKChlcnI6IHN0cmluZykgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgfSkudGhlbigocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICByZXR1cm4gcmVzb2x2ZTtcbiAgICB9KVxuXG4gICAgdGhpcy5pbnN0YW5jZSA9IHJ1bnRpbWUuaW5zdGFuY2U7XG5cbiAgICB0aGlzLl9kZWNvcmF0ZSgpXG5cbiAgICBsZXQgc2NvcGUgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93IDogZ2xvYmFsXG4gICAgc2NvcGUuYXJ0b29sa2l0TkZUID0gdGhpc1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIHByaXZhdGUgbWV0aG9kc1xuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IHRvIGxpbmsgdGhlIGluc3RhbmNlIGluIHRoZSBNb2R1bGVMb2FkZXIgdG8gdGhlXG4gICAqIEFSVG9vbGtpdE5GVCBpbnRlcm5hbCBtZXRob2RzLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcHJpdmF0ZSBfZGVjb3JhdGUgKCkge1xuICAgIC8vIGFkZCBkZWxlZ2F0ZSBtZXRob2RzXG4gICAgW1xuICAgICAgJ3NldHVwJyxcbiAgICAgICd0ZWFyZG93bicsXG5cbiAgICAgICdzZXR1cEFSMicsXG5cbiAgICAgICdzZXRMb2dMZXZlbCcsXG4gICAgICAnZ2V0TG9nTGV2ZWwnLFxuXG4gICAgICAnc2V0RGVidWdNb2RlJyxcbiAgICAgICdnZXREZWJ1Z01vZGUnLFxuXG4gICAgICAnZ2V0UHJvY2Vzc2luZ0ltYWdlJyxcblxuICAgICAgJ2RldGVjdE1hcmtlcicsXG4gICAgICAnZGV0ZWN0TkZUTWFya2VyJyxcbiAgICAgICdnZXRORlRNYXJrZXInLFxuICAgICAgJ2dldE5GVERhdGEnLFxuXG4gICAgICAnZnJhbWVNYWxsb2MnLFxuICAgICAgJ05GVE1hcmtlckluZm8nLFxuXG4gICAgICAnc2V0UHJvamVjdGlvbk5lYXJQbGFuZScsXG4gICAgICAnZ2V0UHJvamVjdGlvbk5lYXJQbGFuZScsXG5cbiAgICAgICdzZXRQcm9qZWN0aW9uRmFyUGxhbmUnLFxuICAgICAgJ2dldFByb2plY3Rpb25GYXJQbGFuZScsXG5cbiAgICAgICdzZXRUaHJlc2hvbGRNb2RlJyxcbiAgICAgICdnZXRUaHJlc2hvbGRNb2RlJyxcblxuICAgICAgJ3NldFRocmVzaG9sZCcsXG4gICAgICAnZ2V0VGhyZXNob2xkJyxcblxuICAgICAgJ3NldEltYWdlUHJvY01vZGUnLFxuICAgICAgJ2dldEltYWdlUHJvY01vZGUnLFxuXG4gICAgICAnU3RyaW5nTGlzdCdcbiAgICBdLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgIHRoaXMuY29udmVydGVyKClbbWV0aG9kXSA9IHRoaXMuaW5zdGFuY2VbbWV0aG9kXVxuICAgIH0pXG5cbiAgICAvLyBleHBvc2UgY29uc3RhbnRzXG4gICAgZm9yIChjb25zdCBjbyBpbiB0aGlzLmluc3RhbmNlKSB7XG4gICAgICBpZiAoY28ubWF0Y2goL15BUi8pKSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyKClbY29dID0gdGhpcy5pbnN0YW5jZVtjb11cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IHRvIGNvbnZlcnQgYW5kIGluamVjdCBjb2RlLlxuICAgKiBAcmV0dXJuIHt0aGlzfSB0aGUgdGhpcyBvYmplY3RcbiAgICovXG4gIHByaXZhdGUgY29udmVydGVyKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBwdWJsaWMgYWNjZXNzb3JzXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogTG9hZCB0aGUgY2FtZXJhLCB0aGlzIGlzIGFuIGltcG9ydGFudCBhbmQgcmVxdWlyZWQgc3RlcCwgSW50ZXJuYWxseSBmaWxsXG4gICAqIHRoZSBBUlBhcmFtIHN0cnVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybE9yRGF0YTogdGhlIGNhbWVyYSBwYXJhbWV0ZXIsIHVzdWFsbHkgYSBwYXRoIHRvIGEgLmRhdCBmaWxlXG4gICAqIEByZXR1cm4ge251bWJlcn0gYSBudW1iZXIsIHRoZSBpbnRlcm5hbCBpZC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBsb2FkQ2FtZXJhICh1cmxPckRhdGE6IGFueSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gJy9jYW1lcmFfcGFyYW1fJyArIHRoaXMuY2FtZXJhQ291bnQrK1xuXG4gICAgbGV0IGRhdGFcblxuICAgIGlmICh1cmxPckRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAvLyBhc3N1bWUgcHJlbG9hZGVkIGNhbWVyYSBwYXJhbXNcbiAgICAgIGRhdGEgPSB1cmxPckRhdGFcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmV0Y2ggZGF0YSB2aWEgSFRUUFxuICAgICAgdHJ5IHsgZGF0YSA9IGF3YWl0IFV0aWxzLmZldGNoUmVtb3RlRGF0YSh1cmxPckRhdGEpIH0gY2F0Y2ggKGVycm9yKSB7IHRocm93IGVycm9yIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZURhdGFGaWxlKGRhdGEsIHRhcmdldClcblxuICAgIC8vIHJldHVybiB0aGUgaW50ZXJuYWwgbWFya2VyIElEXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuX2xvYWRDYW1lcmEodGFyZ2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgdGhlIE5GVCBNYXJrZXIgKC5mc2V0LCAuaXNldCBhbmQgLmZzZXQzKSBpbiB0aGUgY29kZSwgTXVzdCBiZSBwcm92aWRlZFxuICAgKiB0aGUgdXJsIG9mIHRoZSBmaWxlIHdpdGhvdXQgdGhlIGV4dGVuc2lvbi4gSWYgZmFpbHMgdG8gbG9hZCBpdCByYWlzZSBhbiBlcnJvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFySWQgaW50ZXJuYWwgaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCB1cmwgb2YgdGhlIGRlc2NyaXB0b3JzIGZpbGVzIHdpdGhvdXQgZXh0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgYWRkTkZUTWFya2VyIChhcklkOiBudW1iZXIsIHVybDogc3RyaW5nKTogUHJvbWlzZTx7aWQ6IG51bWJlcn0+IHtcbiAgICAvLyB1cmwgZG9lc24ndCBuZWVkIHRvIGJlIGEgdmFsaWQgdXJsLiBFeHRlbnNpb25zIHRvIG1ha2UgaXQgdmFsaWQgd2lsbCBiZSBhZGRlZCBoZXJlXG4gICAgY29uc3QgdGFyZ2V0UHJlZml4ID0gJy9tYXJrZXJORlRfJyArIHRoaXMubWFya2VyTkZUQ291bnQrK1xuICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBbJ2ZzZXQnLCAnaXNldCcsICdmc2V0MyddXG5cbiAgICBjb25zdCBzdG9yZU1hcmtlciA9IGFzeW5jIChleHQ6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZnVsbFVybCA9IHVybCArICcuJyArIGV4dFxuICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0UHJlZml4ICsgJy4nICsgZXh0XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgVXRpbHMuZmV0Y2hSZW1vdGVEYXRhKGZ1bGxVcmwpXG4gICAgICB0aGlzLl9zdG9yZURhdGFGaWxlKGRhdGEsIHRhcmdldClcbiAgICB9XG5cbiAgICBjb25zdCBwcm9taXNlcyA9IGV4dGVuc2lvbnMubWFwKHN0b3JlTWFya2VyLCB0aGlzKVxuICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuXG4gICAgLy8gcmV0dXJuIHRoZSBpbnRlcm5hbCBtYXJrZXIgSURcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5fYWRkTkZUTWFya2VyKGFySWQsIHRhcmdldFByZWZpeClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhZGRORlRNYXJrZXJzKGFySWQ6IG51bWJlciwgdXJsczogQXJyYXk8c3RyaW5nPik6IFByb21pc2U8e2lkOiBudW1iZXJ9PiB7XG4gICAgLy8gdXJsIGRvZXNuJ3QgbmVlZCB0byBiZSBhIHZhbGlkIHVybC4gRXh0ZW5zaW9ucyB0byBtYWtlIGl0IHZhbGlkIHdpbGwgYmUgYWRkZWQgaGVyZVxuICAgIGNvbnN0IHRhcmdldFByZWZpeCA9ICcvbWFya2VyTkZUXycgKyB0aGlzLm1hcmtlck5GVENvdW50KytcbiAgICBjb25zdCBleHRlbnNpb25zID0gWydmc2V0JywgJ2lzZXQnLCAnZnNldDMnXVxuICAgIGxldCBvdXQ7XG4gICAgbGV0IHByZWZpeGVzOiBhbnkgPSBbXTtcbiAgICBsZXQgdmVjO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zb2xlLmxvZygnaW5zaWRlIGZvciBjeWNsZScpO1xuICAgICAgXG4gICAgICAgIGNvbnN0IHVybCA9IHVybHNbaV07XG4gICAgICAgIGNvbnNvbGUubG9nKHVybCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdG9yZU1hcmtlciA9IGFzeW5jIChleHQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSB1cmwgKyAnLicgKyBleHRcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRQcmVmaXggKyAnLicgKyBleHRcbiAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgVXRpbHMuZmV0Y2hSZW1vdGVEYXRhKGZ1bGxVcmwpXG4gICAgICAgICAgdGhpcy5fc3RvcmVEYXRhRmlsZShkYXRhLCB0YXJnZXQpXG4gICAgICAgICAgIHZlYyA9IG5ldyB0aGlzLmluc3RhbmNlLlN0cmluZ0xpc3QoKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh2ZWMpO1xuICAgICAgICBjb25zdCBtYXJrZXJJZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmVjLnB1c2hfYmFjayhwcmVmaXhlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy92YXIgcHJlZml4ID0gJy9tYXJrZXJORlRfJyArIG1hcmtlcl9jb3VudDtcbiAgICAgICAgcHJlZml4ZXMucHVzaCh0YXJnZXRQcmVmaXgpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHZlYyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IGV4dGVuc2lvbnMubWFwKHN0b3JlTWFya2VyLCB0aGlzKVxuICAgIFxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcblxuICAgIG91dCA9IHRoaXMuaW5zdGFuY2UuX2FkZE5GVE1hcmtlcnMoYXJJZCwgdmVjKVxuXG4gIH1cblxuICAgIC8vIHJldHVybiB0aGUgaW50ZXJuYWwgbWFya2VyIElEXG4gICAgcmV0dXJuIG91dFxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gaW1wbGVtZW50YXRpb25cbiAgLyoqXG4gICAqIFVzZWQgaW50ZXJuYWxseSBieSBMb2FkQ2FtZXJhIGFuZCBhZGRORlRNYXJrZXIgbWV0aG9kc1xuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcHJpdmF0ZSBfc3RvcmVEYXRhRmlsZSAoZGF0YTogVWludDhBcnJheSwgdGFyZ2V0OiBzdHJpbmcpIHtcbiAgICAvLyBGUyBpcyBwcm92aWRlZCBieSBlbXNjcmlwdGVuXG4gICAgLy8gTm90ZTogdmFsaWQgZGF0YSBtdXN0IGJlIGluIGJpbmFyeSBmb3JtYXQgZW5jb2RlZCBhcyBVaW50OEFycmF5XG4gICAgdGhpcy5pbnN0YW5jZS5GUy53cml0ZUZpbGUodGFyZ2V0LCBkYXRhLCB7XG4gICAgICBlbmNvZGluZzogJ2JpbmFyeSdcbiAgICB9KVxuICB9XG59XG4iLCIvKlxuICogIE1vZHVsZUxvYWRlci50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cbmltcG9ydCBNb2R1bGUgZnJvbSAnLi4vYnVpbGQvYXJ0b29sa2l0TkZUX0VTNl93YXNtJ1xuXG5jb25zdCBNb2R1bGVMb2FkZXIgPSB7XG4gIGluaXQ6IG5ldyBQcm9taXNlPG9iamVjdD4ocmVzb2x2ZSA9PiB7XG4gICAgICBNb2R1bGUoe1xuICAgICAgICBvblJ1bnRpbWVJbml0aWFsaXplZCAoKSB7XG4gICAgICAgICAgLy8gbmVlZCB0byB3cmFwIHRoaXMgaW4gYW4gb2JqZWN0XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIGl0IHdpbGwgY2F1c2UgQ2hyb21lIHRvIGNyYXNoXG4gICAgICAgICAgcmVzb2x2ZSh7IGluc3RhbmNlOiB0aGlzIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBNb2R1bGVMb2FkZXJcbiIsIi8qXG4gKiAgVXRpbHMudHNcbiAqICBKU0FSVG9vbEtpdE5GVFxuICpcbiAqICBUaGlzIGZpbGUgaXMgcGFydCBvZiBKU0FSVG9vbEtpdE5GVCAtIFdlYkFSS2l0LlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqICBhbG9uZyB3aXRoIEpTQVJUb29sS2l0TkZULiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqICBBcyBhIHNwZWNpYWwgZXhjZXB0aW9uLCB0aGUgY29weXJpZ2h0IGhvbGRlcnMgb2YgdGhpcyBsaWJyYXJ5IGdpdmUgeW91XG4gKiAgcGVybWlzc2lvbiB0byBsaW5rIHRoaXMgbGlicmFyeSB3aXRoIGluZGVwZW5kZW50IG1vZHVsZXMgdG8gcHJvZHVjZSBhblxuICogIGV4ZWN1dGFibGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGxpY2Vuc2UgdGVybXMgb2YgdGhlc2UgaW5kZXBlbmRlbnQgbW9kdWxlcywgYW5kIHRvXG4gKiAgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgcmVzdWx0aW5nIGV4ZWN1dGFibGUgdW5kZXIgdGVybXMgb2YgeW91ciBjaG9pY2UsXG4gKiAgcHJvdmlkZWQgdGhhdCB5b3UgYWxzbyBtZWV0LCBmb3IgZWFjaCBsaW5rZWQgaW5kZXBlbmRlbnQgbW9kdWxlLCB0aGUgdGVybXMgYW5kXG4gKiAgY29uZGl0aW9ucyBvZiB0aGUgbGljZW5zZSBvZiB0aGF0IG1vZHVsZS4gQW4gaW5kZXBlbmRlbnQgbW9kdWxlIGlzIGEgbW9kdWxlXG4gKiAgd2hpY2ggaXMgbmVpdGhlciBkZXJpdmVkIGZyb20gbm9yIGJhc2VkIG9uIHRoaXMgbGlicmFyeS4gSWYgeW91IG1vZGlmeSB0aGlzXG4gKiAgbGlicmFyeSwgeW91IG1heSBleHRlbmQgdGhpcyBleGNlcHRpb24gdG8geW91ciB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LCBidXQgeW91XG4gKiAgYXJlIG5vdCBvYmxpZ2F0ZWQgdG8gZG8gc28uIElmIHlvdSBkbyBub3Qgd2lzaCB0byBkbyBzbywgZGVsZXRlIHRoaXMgZXhjZXB0aW9uXG4gKiAgc3RhdGVtZW50IGZyb20geW91ciB2ZXJzaW9uLlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBXZWJBUktpdC5cbiAqXG4gKiAgQXV0aG9yKHMpOiBXYWx0ZXIgUGVyZGFuIEBrYWx3YWx0IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWx3YWx0XG4gKlxuICovXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcbiAgc3RhdGljIGFzeW5jIGZldGNoUmVtb3RlRGF0YSAodXJsOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KVxuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3BvbnNlLmRhdGEpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZldGNoUmVtb3RlRGF0YUNhbGxiYWNrICh1cmw6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsIHsgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInIH0pXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJlc3BvbnNlLmRhdGEpXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICBjYWxsYmFjayhyZXNwb25zZSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc3RyaW5nMlVpbnQ4RGF0YSAoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc3RyaW5nLmxlbmd0aClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4ZmZcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKlxuICogIGluZGV4LnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IEFSVG9vbGtpdE5GVCBmcm9tICcuL0FSVG9vbGtpdE5GVCdcbmltcG9ydCBBUkNvbnRyb2xsZXJORlQgZnJvbSAnLi9BUkNvbnRyb2xsZXJORlQnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQVJUb29sa2l0TkZULCBBUkNvbnRyb2xsZXJORlRcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=