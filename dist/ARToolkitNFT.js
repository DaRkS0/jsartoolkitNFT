(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ARToolkitNFT"] = factory();
	else
		root["ARToolkitNFT"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/artoolkitNFT_ES6_wasm.js":
/*!****************************************!*\
  !*** ./build/artoolkitNFT_ES6_wasm.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __filename = "/index.js";
var __dirname = "/";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!=="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=__webpack_require__(/*! path */ "?f955").dirname(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=__webpack_require__(/*! fs */ "?4dea");if(!nodePath)nodePath=__webpack_require__(/*! path */ "?f955");filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",abort);quit_=function(status){process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)}}readBinary=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs}else if(typeof arguments!="undefined"){arguments_=arguments}if(typeof quit==="function"){quit_=function(status){quit(status)}}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=function(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var STACK_ALIGN=16;function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;return Math.ceil(size/factor)*factor}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime=Module["noExitRuntime"]||true;if(typeof WebAssembly!=="object"){abort("no native wasm support detected")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else{var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||268435456;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";err(what);ABORT=true;EXITSTATUS=1;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}var wasmBinaryFile="data:application/octet-stream;base64,";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmMemory=Module["asm"]["Y"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module["asm"]["ba"];addOnInit(Module["asm"]["Z"]);removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}var tempDouble;var tempI64;var ASM_CONSTS={63604:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=$a[i++];markerInfo["found"]=1;markerInfo["pose"][0]=$a[i++];markerInfo["pose"][1]=$a[i++];markerInfo["pose"][2]=$a[i++];markerInfo["pose"][3]=$a[i++];markerInfo["pose"][4]=$a[i++];markerInfo["pose"][5]=$a[i++];markerInfo["pose"][6]=$a[i++];markerInfo["pose"][7]=$a[i++];markerInfo["pose"][8]=$a[i++];markerInfo["pose"][9]=$a[i++];markerInfo["pose"][10]=$a[i++];markerInfo["pose"][11]=$a[i++]},64310:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=-1;markerInfo["found"]=0;markerInfo["pose"][0]=0;markerInfo["pose"][1]=0;markerInfo["pose"][2]=0;markerInfo["pose"][3]=0;markerInfo["pose"][4]=0;markerInfo["pose"][5]=0;markerInfo["pose"][6]=0;markerInfo["pose"][7]=0;markerInfo["pose"][8]=0;markerInfo["pose"][9]=0;markerInfo["pose"][10]=0;markerInfo["pose"][11]=0},64939:function($0,$1,$2,$3,$4,$5){if(!artoolkitNFT["frameMalloc"]){artoolkitNFT["frameMalloc"]={}}var frameMalloc=artoolkitNFT["frameMalloc"];frameMalloc["framepointer"]=$1;frameMalloc["framesize"]=$2;frameMalloc["camera"]=$3;frameMalloc["transform"]=$4;frameMalloc["videoLumaPointer"]=$5}};function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function ___localtime_r(a0,a1){return _localtime_r(a0,a1)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};function getRandomDevice(){if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=__webpack_require__(/*! crypto */ "?deb7");return function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}return function(){abort("randomDevice")}}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc?Buffer.alloc(BUFSIZE):new Buffer(BUFSIZE);var bytesRead=0;try{bytesRead=nodeFS.readSync(process.stdin.fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().includes("EOF"))bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){var alignedSize=alignMemory(size,65536);var ptr=_malloc(alignedSize);while(size<alignedSize)HEAP8[ptr+size++]=0;return ptr}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){if(address!==0){throw new FS.ErrnoError(28)}if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node)},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return!!node.mounted},isFile:function(mode){return(mode&61440)===32768},isDir:function(mode){return(mode&61440)===16384},isLink:function(mode){return(mode&61440)===40960},isChrdev:function(mode){return(mode&61440)===8192},isBlkdev:function(mode){return(mode&61440)===24576},isFIFO:function(mode){return(mode&61440)===4096},isSocket:function(mode){return(mode&49152)===49152},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}}}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:function(path,mode){FS.chmod(path,mode,true)},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true)},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message)}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:function(stream,address,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments)}});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency(dep)});handled=true}});if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray)},onerror)}else{processData(url)}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}});transaction.onerror=onerror};openRequest.onerror=onerror}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path,allowEmpty){if(path[0]==="/"){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=varargs?SYSCALLS.get():0;var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var structRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}};return errorClass}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function __embind_finalize_value_object(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(function(field){return field.getterReturnType}).concat(fieldRecords.map(function(field){return field.setterArgumentType}));whenDependentTypesAreResolved([structType],fieldTypes,function(fieldTypes){var fields={};fieldRecords.forEach(function(field,i){var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:function(ptr){return getterReturnType["fromWireType"](getter(getterContext,ptr))},write:function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors)}}});return[{name:reg.name,"fromWireType":function(ptr){var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv},"toWireType":function(destructors,o){for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError('Missing field:  "'+fieldName+'"')}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return!!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}var finalizationGroup=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}}function attachFinalizer(handle){if("undefined"===typeof FinalizationGroup){attachFinalizer=function(handle){return handle};return handle}finalizationGroup=new FinalizationGroup(function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;if(!$$.ptr){console.warn("object already deleted: "+$$.ptr)}else{releaseClassHandle($$)}}});attachFinalizer=function(handle){finalizationGroup.register(handle,handle.$$,handle.$$);return handle};detachFinalizer=function(handle){finalizationGroup.unregister(handle.$$)};return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle["delete"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.includes("j")){return dynCallLegacy(sig,ptr,args)}return wasmTable.get(ptr).apply(null,args)}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i]}return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes("j")){return getDynCaller(signature,rawFunction)}return wasmTable.get(rawFunction)}var fp=makeDynCaller();if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);var args=[rawConstructor];var destructors=[];whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+" called with "+arguments.length+" arguments, expected "+(argCount-1))}destructors.length=0;args.length=argCount;for(var i=1;i<argCount;++i){args[i]=argTypes[i]["toWireType"](destructors,arguments[i-1])}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0]["fromWireType"](ptr)};return[]});return[]})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type["fromWireType"](value);return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv},"toWireType":function(destructors,value){return __emval_register(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name.includes("unsigned");registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return isUnsignedType?value>>>0:value|0},"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join("")}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)}}else{getLength=function(){return value.length}}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16};shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32};shift=2}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value==="string")){throwBindingError("Cannot pass non-string to C++ string type "+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}})}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType))}return impl}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return __emval_register(v)}function _abort(){abort()}var readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr,buf){readAsmConstArgsArray.length=0;var ch;buf>>=2;while(ch=HEAPU8[sigPtr++]){var double=ch<105;if(double&&buf&1)buf++;readAsmConstArgsArray.push(double?HEAPF64[buf++>>1]:HEAP32[buf]);++buf}return readAsmConstArgsArray}function _emscripten_asm_const_int(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)}function _longjmp(env,value){_setThrew(env,value||1);throw"longjmp"}function _emscripten_longjmp(a0,a1){return _longjmp(a0,a1)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":lang,"_":getExecutableName()};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+"="+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){try{var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _environ_sizes_get(penviron_count,penviron_buf_size){try{var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _exit(status){exit(status)}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _getTempRet0(){return getTempRet0()}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _setTempRet0(val){setTempRet0(val)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();InternalError=Module["InternalError"]=extendError(Error,"InternalError");embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={"j":___cxa_allocate_exception,"i":___cxa_throw,"K":___localtime_r,"q":___sys_fcntl64,"M":___sys_ioctl,"N":___sys_open,"T":__embind_finalize_value_object,"F":__embind_register_bigint,"P":__embind_register_bool,"x":__embind_register_class,"v":__embind_register_class_constructor,"g":__embind_register_class_function,"w":__embind_register_constant,"O":__embind_register_emval,"s":__embind_register_float,"f":__embind_register_function,"h":__embind_register_integer,"e":__embind_register_memory_view,"t":__embind_register_std_string,"n":__embind_register_std_wstring,"V":__embind_register_value_object,"U":__embind_register_value_object_field,"Q":__embind_register_void,"R":__emval_decref,"S":__emval_incref,"u":__emval_take_value,"a":_abort,"o":_emscripten_asm_const_int,"k":_emscripten_longjmp,"G":_emscripten_resize_heap,"I":_environ_get,"J":_environ_sizes_get,"b":_exit,"r":_fd_close,"L":_fd_read,"E":_fd_seek,"p":_fd_write,"d":_getTempRet0,"y":_gettimeofday,"A":invoke_ii,"B":invoke_iii,"X":invoke_iiii,"l":invoke_vi,"C":invoke_vii,"D":invoke_viii,"m":invoke_viiii,"c":_setTempRet0,"W":_strftime,"H":_strftime_l,"z":_time};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["Z"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["_"]).apply(null,arguments)};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["$"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["aa"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return(___getTypeName=Module["___getTypeName"]=Module["asm"]["ca"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=function(){return(___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=Module["asm"]["da"]).apply(null,arguments)};var __get_tzname=Module["__get_tzname"]=function(){return(__get_tzname=Module["__get_tzname"]=Module["asm"]["ea"]).apply(null,arguments)};var __get_daylight=Module["__get_daylight"]=function(){return(__get_daylight=Module["__get_daylight"]=Module["asm"]["fa"]).apply(null,arguments)};var __get_timezone=Module["__get_timezone"]=function(){return(__get_timezone=Module["__get_timezone"]=Module["asm"]["ga"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["ha"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["ia"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["ja"]).apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){return(dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["ka"]).apply(null,arguments)};var dynCall_viijii=Module["dynCall_viijii"]=function(){return(dynCall_viijii=Module["dynCall_viijii"]=Module["asm"]["la"]).apply(null,arguments)};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){return(dynCall_iiiiij=Module["dynCall_iiiiij"]=Module["asm"]["ma"]).apply(null,arguments)};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){return(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=Module["asm"]["na"]).apply(null,arguments)};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){return(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=Module["asm"]["oa"]).apply(null,arguments)};function invoke_ii(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0)}}Module["FS"]=FS;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){EXITSTATUS=status;if(implicit&&keepRuntimeAlive()&&status===0){return}if(keepRuntimeAlive()){}else{exitRuntime();if(Module["onExit"])Module["onExit"](status);ABORT=true}quit_(status,new ExitStatus(status))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();


  return Module.ready
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pkg = __webpack_require__(/*! ./../../package.json */ "./node_modules/axios/package.json");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./node_modules/axios/package.json":
/*!*****************************************!*\
  !*** ./node_modules/axios/package.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

/***/ }),

/***/ "./src/ARControllerNFT.ts":
/*!********************************!*\
  !*** ./src/ARControllerNFT.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARControllerNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var ARControllerNFT = /*#__PURE__*/function () {
  function ARControllerNFT(width, height, cameraParam, options) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__.default)(this, ARControllerNFT);

    this.options = {};
    this.options = _objectSpread(_objectSpread({}, {
      canvas: null,
      orientation: 'landscape'
    }), options);
    this.id = -1;
    this.width = width;
    this.height = height;
    this.image;
    this.orientation = this.options.orientation;
    this.cameraParam = cameraParam;
    this.cameraId = -1;
    this.cameraLoaded = false;
    this.artoolkitNFT;
    this.listeners = {};
    this.nftMarkers = {};
    this.transform_mat = new Float64Array(16);
    this.transformGL_RH = new Float64Array(16);
    this.marker_transform_mat = null;
    this.videoWidth = width;
    this.videoHeight = height;
    this.videoSize = this.videoWidth * this.videoHeight;
    this.framepointer = null;
    this.framesize = null;
    this.dataHeap = null;
    this.videoLuma = null;
    this.camera_mat = null;
    this.videoLumaPointer = null;

    if (this.options.canvas) {
      this.canvas = this.options.canvas;
    } else if (typeof document !== 'undefined') {
      this.canvas = document.createElement('canvas');
    }

    if (this.canvas) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.ctx = this.canvas.getContext('2d');
    } else {
      console.warn('No canvas available');
    }

    this.nftMarkerFound = false;
    this.nftMarkerFoundTime = 0;
    this.nftMarkerCount = 0;
    this._bwpointer = null;
    this.defaultMarkerWidth = 1;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__.default)(ARControllerNFT, [{
    key: "process",
    value: function process(image) {
      var result = this.detectMarker(image);

      if (result != 0) {
        console.error('[ARControllerNFT]', 'detectMarker error:', result);
      }

      var k, o;

      for (k in this.nftMarkers) {
        o = this.converter().nftMarkers[k];
        o.inPrevious = o.inCurrent;
        o.inCurrent = false;
      }

      var nftMarkerCount = this.nftMarkerCount;
      this.detectNFTMarker();
      var MARKER_LOST_TIME = 200;

      for (var i = 0; i < nftMarkerCount; i++) {
        var nftMarkerInfo = this.getNFTMarker(i);
        var markerType = _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__.default.NFT_MARKER;

        if (nftMarkerInfo.found) {
          this.nftMarkerFound = i;
          this.nftMarkerFoundTime = Date.now();
          var visible = this.trackNFTMarkerId(i);
          visible.matrix.set(nftMarkerInfo.pose);
          visible.inCurrent = true;
          this.transMatToGLMat(visible.matrix, this.transform_mat);
          this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);
          this.dispatchEvent({
            name: 'getNFTMarker',
            target: this,
            data: {
              index: i,
              type: markerType,
              marker: nftMarkerInfo,
              matrix: this.transform_mat,
              matrixGL_RH: this.transformGL_RH
            }
          });
        } else if (self.nftMarkerFound === i) {
          if (Date.now() - this.nftMarkerFoundTime > MARKER_LOST_TIME) {
            this.nftMarkerFound = false;
            this.dispatchEvent({
              name: 'lostNFTMarker',
              target: this,
              data: {
                index: i,
                type: markerType,
                marker: nftMarkerInfo,
                matrix: this.transform_mat,
                matrixGL_RH: this.transformGL_RH
              }
            });
          }

          ;
        }
      }
    }
  }, {
    key: "detectNFTMarker",
    value: function detectNFTMarker() {
      this.artoolkitNFT.detectNFTMarker(this.id);
    }
  }, {
    key: "trackNFTMarkerId",
    value: function trackNFTMarkerId(id, markerWidth) {
      var obj = this.converter().nftMarkers[id];

      if (!obj) {
        this.converter().nftMarkers[id] = obj = {
          inPrevious: false,
          inCurrent: false,
          matrix: new Float64Array(12),
          matrixGL_RH: new Float64Array(12),
          markerWidth: markerWidth || this.defaultMarkerWidth
        };
      }

      if (markerWidth) {
        obj.markerWidth = markerWidth;
      }

      return obj;
    }
  }, {
    key: "detectMarker",
    value: function detectMarker(image) {
      if (this._copyImageToHeap(image)) {
        return this.artoolkitNFT.detectMarker(this.id);
      }

      return -99;
    }
  }, {
    key: "getNFTMarker",
    value: function getNFTMarker(markerIndex) {
      if (0 === this.artoolkitNFT.getNFTMarker(this.id, markerIndex)) {
        return this.artoolkitNFT.NFTMarkerInfo;
      }
    }
  }, {
    key: "getNFTData",
    value: function getNFTData(id) {
      return this.artoolkitNFT.getNFTData(id);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      if (!this.converter().listeners[name]) {
        this.converter().listeners[name] = [];
      }

      this.converter().listeners[name].push(callback);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(name, callback) {
      if (this.converter().listeners[name]) {
        var index = this.converter().listeners[name].indexOf(callback);

        if (index > -1) {
          this.converter().listeners[name].splice(index, 1);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      var listeners = this.converter().listeners[event.name];

      if (listeners) {
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].call(this, event);
        }
      }
    }
  }, {
    key: "debugSetup",
    value: function debugSetup() {
      if (typeof document === 'undefined') {
        console.log('debugSetup() currently only supports Browser environments');
        return;
      }

      document.body.appendChild(this.canvas);
      this.setDebugMode(true);
      this._bwpointer = this.getProcessingImage();
    }
  }, {
    key: "transMatToGLMat",
    value: function transMatToGLMat(transMat, glMat, scale) {
      if (glMat == undefined) {
        glMat = new Float64Array(16);
      }

      glMat[0 + 0 * 4] = transMat[0];
      glMat[0 + 1 * 4] = transMat[1];
      glMat[0 + 2 * 4] = transMat[2];
      glMat[0 + 3 * 4] = transMat[3];
      glMat[1 + 0 * 4] = transMat[4];
      glMat[1 + 1 * 4] = transMat[5];
      glMat[1 + 2 * 4] = transMat[6];
      glMat[1 + 3 * 4] = transMat[7];
      glMat[2 + 0 * 4] = transMat[8];
      glMat[2 + 1 * 4] = transMat[9];
      glMat[2 + 2 * 4] = transMat[10];
      glMat[2 + 3 * 4] = transMat[11];
      glMat[3 + 0 * 4] = 0.0;
      glMat[3 + 1 * 4] = 0.0;
      glMat[3 + 2 * 4] = 0.0;
      glMat[3 + 3 * 4] = 1.0;

      if (scale != undefined && scale !== 0.0) {
        glMat[12] *= scale;
        glMat[13] *= scale;
        glMat[14] *= scale;
      }

      return glMat;
    }
  }, {
    key: "arglCameraViewRHf",
    value: function arglCameraViewRHf(glMatrix, glRhMatrix, scale) {
      var m_modelview;

      if (glRhMatrix == undefined) {
        m_modelview = new Float64Array(16);
      } else {
        m_modelview = glRhMatrix;
      }

      m_modelview[0] = glMatrix[0];
      m_modelview[4] = glMatrix[4];
      m_modelview[8] = glMatrix[8];
      m_modelview[12] = glMatrix[12];
      m_modelview[1] = -glMatrix[1];
      m_modelview[5] = -glMatrix[5];
      m_modelview[9] = -glMatrix[9];
      m_modelview[13] = -glMatrix[13];
      m_modelview[2] = -glMatrix[2];
      m_modelview[6] = -glMatrix[6];
      m_modelview[10] = -glMatrix[10];
      m_modelview[14] = -glMatrix[14];
      m_modelview[3] = 0;
      m_modelview[7] = 0;
      m_modelview[11] = 0;
      m_modelview[15] = 1;

      if (scale != undefined && scale !== 0.0) {
        m_modelview[12] *= scale;
        m_modelview[13] *= scale;
        m_modelview[14] *= scale;
      }

      glRhMatrix = m_modelview;
      return glRhMatrix;
    }
  }, {
    key: "getTransformationMatrix",
    value: function getTransformationMatrix() {
      return this.transform_mat;
    }
  }, {
    key: "getCameraMatrix",
    value: function getCameraMatrix() {
      return this.camera_mat;
    }
  }, {
    key: "setDebugMode",
    value: function setDebugMode(mode) {
      return this.artoolkitNFT.setDebugMode(this.id, mode);
    }
  }, {
    key: "getDebugMode",
    value: function getDebugMode() {
      return this.artoolkitNFT.getDebugMode(this.id);
    }
  }, {
    key: "getProcessingImage",
    value: function getProcessingImage() {
      return this.artoolkitNFT.getProcessingImage(this.id);
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(mode) {
      return this.artoolkitNFT.setLogLevel(mode);
    }
  }, {
    key: "getLogLevel",
    value: function getLogLevel() {
      return this.artoolkitNFT.getLogLevel();
    }
  }, {
    key: "setProjectionNearPlane",
    value: function setProjectionNearPlane(value) {
      return this.artoolkitNFT.setProjectionNearPlane(this.id, value);
    }
  }, {
    key: "getProjectionNearPlane",
    value: function getProjectionNearPlane() {
      return this.artoolkitNFT.getProjectionNearPlane(this.id);
    }
  }, {
    key: "setProjectionFarPlane",
    value: function setProjectionFarPlane(value) {
      return this.artoolkitNFT.setProjectionFarPlane(this.id, value);
    }
  }, {
    key: "getProjectionFarPlane",
    value: function getProjectionFarPlane() {
      return this.artoolkitNFT.getProjectionFarPlane(this.id);
    }
  }, {
    key: "setThresholdMode",
    value: function setThresholdMode(mode) {
      return this.artoolkitNFT.setThresholdMode(this.id, mode);
    }
  }, {
    key: "getThresholdMode",
    value: function getThresholdMode() {
      return this.artoolkitNFT.getThresholdMode(this.id);
    }
  }, {
    key: "setThreshold",
    value: function setThreshold(threshold) {
      return this.artoolkitNFT.setThreshold(this.id, threshold);
    }
  }, {
    key: "getThreshold",
    value: function getThreshold() {
      return this.artoolkitNFT.getThreshold(this.id);
    }
  }, {
    key: "loadNFTMarker",
    value: function () {
      var _loadNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee(urlOrData, onSuccess, onError) {
        var _this = this;

        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, [urlOrData], function (ids) {
                  _this.nftMarkerCount += ids.length;
                  onSuccess(ids);
                }, onError);

              case 2:
                nft = _context.sent;
                return _context.abrupt("return", nft);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadNFTMarker(_x, _x2, _x3) {
        return _loadNFTMarker.apply(this, arguments);
      }

      return loadNFTMarker;
    }()
  }, {
    key: "loadNFTMarkers",
    value: function () {
      var _loadNFTMarkers = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData, onSuccess, onError) {
        var _this2 = this;

        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, urlOrData, function (ids) {
                  _this2.nftMarkerCount += ids.length;
                  onSuccess(ids);
                }, onError);

              case 2:
                nft = _context2.sent;
                return _context2.abrupt("return", nft);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadNFTMarkers(_x4, _x5, _x6) {
        return _loadNFTMarkers.apply(this, arguments);
      }

      return loadNFTMarkers;
    }()
  }, {
    key: "setImageProcMode",
    value: function setImageProcMode(mode) {
      return this.artoolkitNFT.setImageProcMode(this.id, mode);
    }
  }, {
    key: "getImageProcMode",
    value: function getImageProcMode() {
      return this.artoolkitNFT.getImageProcMode(this.id);
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {
        var _this3 = this;

        var params;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__.default().init();

              case 2:
                this.artoolkitNFT = _context3.sent;
                console.log('[ARControllerNFT]', 'ARToolkitNFT initialized');
                _context3.next = 6;
                return this.artoolkitNFT.loadCamera(this.cameraParam);

              case 6:
                this.cameraId = _context3.sent;
                console.log('[ARControllerNFT]', 'Camera params loaded with ID', this.cameraId);
                this.id = this.artoolkitNFT.setup(this.width, this.height, this.cameraId);
                console.log('[ARControllerNFT]', 'Got ID from setup', this.id);

                this._initNFT();

                params = this.artoolkitNFT.frameMalloc;
                this.framepointer = params.framepointer;
                this.framesize = params.framesize;
                this.videoLumaPointer = params.videoLumaPointer;
                this.dataHeap = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.framepointer, this.framesize);
                this.videoLuma = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.videoLumaPointer, this.framesize / 4);
                this.camera_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.camera, 16);
                this.marker_transform_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.transform, 12);
                this.setProjectionNearPlane(0.1);
                this.setProjectionFarPlane(1000);
                setTimeout(function () {
                  _this3.dispatchEvent({
                    name: 'load',
                    target: _this3
                  });
                }, 1);
                return _context3.abrupt("return", this);

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _initialize() {
        return _initialize2.apply(this, arguments);
      }

      return _initialize;
    }()
  }, {
    key: "_initNFT",
    value: function _initNFT() {
      this.artoolkitNFT.setupAR2(this.id);
    }
  }, {
    key: "_copyImageToHeap",
    value: function _copyImageToHeap(sourceImage) {
      if (!sourceImage) {
        sourceImage = this.image;
      }

      var data;

      if (sourceImage.data) {
        data = sourceImage.data;
      } else {
        this.ctx.save();

        if (this.orientation === 'portrait') {
          this.ctx.translate(this.canvas.width, 0);
          this.ctx.rotate(Math.PI / 2);
          this.ctx.drawImage(sourceImage, 0, 0, this.canvas.height, this.canvas.width);
        } else {
          this.ctx.drawImage(sourceImage, 0, 0, this.canvas.width, this.canvas.height);
        }

        this.ctx.restore();
        var imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        data = imageData.data;
      }

      if (this.videoLuma) {
        var q = 0;

        for (var p = 0; p < this.videoSize; p++) {
          var r = data[q + 0],
              g = data[q + 1],
              b = data[q + 2];
          this.videoLuma[p] = r + r + r + b + g + g + g + g >> 3;
          q += 4;
        }
      }

      if (this.dataHeap) {
        this.dataHeap.set(data);
        return true;
      }

      return false;
    }
  }], [{
    key: "initWithDimensions",
    value: function () {
      var _initWithDimensions = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(width, height, cameraParam, options) {
        var arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                arControllerNFT = new ARControllerNFT(width, height, cameraParam, options);
                _context4.next = 3;
                return arControllerNFT._initialize();

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function initWithDimensions(_x7, _x8, _x9, _x10) {
        return _initWithDimensions.apply(this, arguments);
      }

      return initWithDimensions;
    }()
  }, {
    key: "initWithImage",
    value: function () {
      var _initWithImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(image, cameraParam, options) {
        var width, height, arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                width = image.videoWidth || image.width;
                height = image.videoHeight || image.height;
                arControllerNFT = new ARControllerNFT(width, height, cameraParam, options);
                arControllerNFT.image = image;
                _context5.next = 6;
                return arControllerNFT._initialize();

              case 6:
                return _context5.abrupt("return", _context5.sent);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function initWithImage(_x11, _x12, _x13) {
        return _initWithImage.apply(this, arguments);
      }

      return initWithImage;
    }()
  }]);

  return ARControllerNFT;
}();



/***/ }),

/***/ "./src/ARToolkitNFT.ts":
/*!*****************************!*\
  !*** ./src/ARToolkitNFT.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _ModuleLoader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ModuleLoader */ "./src/ModuleLoader.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");






var UNKNOWN_MARKER = -1;
var NFT_MARKER = 0;

var ARToolkitNFT = /*#__PURE__*/function () {
  function ARToolkitNFT() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, ARToolkitNFT);

    this.instance;
    this.markerNFTCount = 0;
    this.cameraCount = 0;
    this.version = '0.9.1';
    console.info('ARToolkitNFT ', this.version);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(ARToolkitNFT, [{
    key: "init",
    value: function () {
      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee() {
        var runtime, scope;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _ModuleLoader__WEBPACK_IMPORTED_MODULE_4__.default.init.catch(function (err) {
                  console.log(err);
                  return Promise.reject(err);
                }).then(function (resolve) {
                  return resolve;
                });

              case 2:
                runtime = _context.sent;
                this.instance = runtime.instance;

                this._decorate();

                scope = typeof window !== 'undefined' ? window : __webpack_require__.g;
                scope.artoolkitNFT = this;
                return _context.abrupt("return", this);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "_decorate",
    value: function _decorate() {
      var _this = this;

      ['setup', 'teardown', 'setupAR2', 'setLogLevel', 'getLogLevel', 'setDebugMode', 'getDebugMode', 'getProcessingImage', 'detectMarker', 'detectNFTMarker', 'getNFTMarker', 'getNFTData', 'frameMalloc', 'NFTMarkerInfo', 'setProjectionNearPlane', 'getProjectionNearPlane', 'setProjectionFarPlane', 'getProjectionFarPlane', 'setThresholdMode', 'getThresholdMode', 'setThreshold', 'getThreshold', 'setImageProcMode', 'getImageProcMode', 'StringList'].forEach(function (method) {
        _this.converter()[method] = _this.instance[method];
      });

      for (var co in this.instance) {
        if (co.match(/^AR/)) {
          this.converter()[co] = this.instance[co];
        }
      }
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "loadCamera",
    value: function () {
      var _loadCamera = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(urlOrData) {
        var target, data;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                target = '/camera_param_' + this.cameraCount++;

                if (!(urlOrData instanceof Uint8Array)) {
                  _context2.next = 5;
                  break;
                }

                data = urlOrData;
                _context2.next = 14;
                break;

              case 5:
                _context2.prev = 5;
                _context2.next = 8;
                return _Utils__WEBPACK_IMPORTED_MODULE_5__.default.fetchRemoteData(urlOrData);

              case 8:
                data = _context2.sent;
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](5);
                throw _context2.t0;

              case 14:
                this._storeDataFile(data, target);

                return _context2.abrupt("return", this.instance._loadCamera(target));

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 11]]);
      }));

      function loadCamera(_x) {
        return _loadCamera.apply(this, arguments);
      }

      return loadCamera;
    }()
  }, {
    key: "addNFTMarkers",
    value: function addNFTMarkers(arId, urls, callback, onError2) {
      var _this2 = this;

      var prefixes = [];
      var pending = urls.length * 3;

      var onSuccess = function onSuccess(filename) {
        pending -= 1;

        if (pending === 0) {
          var vec = new _this2.instance.StringList();
          var markerIds = [];

          for (var _i = 0; _i < prefixes.length; _i++) {
            vec.push_back(prefixes[_i]);
          }

          var ret = _this2.instance._addNFTMarkers(arId, vec);

          for (var _i2 = 0; _i2 < ret.size(); _i2++) {
            markerIds.push(ret.get(_i2));
          }

          console.log("add nft marker ids: ", markerIds);
          if (callback) callback(markerIds);
        }
      };

      var onError = function onError(filename, errorNumber) {
        console.log("failed to load: ", filename);
        onError2(errorNumber);
      };

      for (var i = 0; i < urls.length; i++) {
        var url = urls[i];
        var prefix = '/markerNFT_' + this.markerNFTCount;
        prefixes.push(prefix);
        var filename1 = prefix + '.fset';
        var filename2 = prefix + '.iset';
        var filename3 = prefix + '.fset3';
        this.ajax(url + '.fset', filename1, onSuccess.bind(filename1), onError.bind(filename1));
        this.ajax(url + '.iset', filename2, onSuccess.bind(filename2), onError.bind(filename2));
        this.ajax(url + '.fset3', filename3, onSuccess.bind(filename3), onError.bind(filename3));
        this.markerNFTCount += 1;
      }

      var Ids = [];

      for (var i = 0; i < urls.length; ++i) {
        Ids.push(i);
      }

      return Ids;
    }
  }, {
    key: "_storeDataFile",
    value: function _storeDataFile(data, target) {
      this.instance.FS.writeFile(target, data, {
        encoding: 'binary'
      });
    }
  }, {
    key: "ajax",
    value: function ajax(url, target, callback, errorCallback) {
      var _this3 = this;

      var oReq = new XMLHttpRequest();
      oReq.open('GET', url, true);
      oReq.responseType = 'arraybuffer';

      var writeByteArrayToFS = function writeByteArrayToFS(target, byteArray, callback) {
        _this3.instance.FS.writeFile(target, byteArray, {
          encoding: 'binary'
        });

        callback(byteArray);
      };

      oReq.onload = function () {
        if (this.status == 200) {
          var arrayBuffer = oReq.response;
          var byteArray = new Uint8Array(arrayBuffer);
          writeByteArrayToFS(target, byteArray, callback);
        } else {
          errorCallback(this.status);
        }
      };

      oReq.send();
    }
  }], [{
    key: "UNKNOWN_MARKER",
    get: function get() {
      return UNKNOWN_MARKER;
    }
  }, {
    key: "NFT_MARKER",
    get: function get() {
      return NFT_MARKER;
    }
  }]);

  return ARToolkitNFT;
}();



/***/ }),

/***/ "./src/ModuleLoader.ts":
/*!*****************************!*\
  !*** ./src/ModuleLoader.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../build/artoolkitNFT_ES6_wasm */ "./build/artoolkitNFT_ES6_wasm.js");

var ModuleLoader = {
  init: new Promise(function (resolve) {
    (0,_build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_0__.default)({
      onRuntimeInitialized: function onRuntimeInitialized() {
        resolve({
          instance: this
        });
      }
    });
  })
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModuleLoader);

/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Utils)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);






var Utils = /*#__PURE__*/function () {
  function Utils() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.default)(this, Utils);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__.default)(Utils, null, [{
    key: "fetchRemoteData",
    value: function () {
      var _fetchRemoteData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(url) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: 'arraybuffer'
                });

              case 3:
                response = _context.sent;
                return _context.abrupt("return", new Uint8Array(response.data));

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                throw _context.t0;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));

      function fetchRemoteData(_x) {
        return _fetchRemoteData.apply(this, arguments);
      }

      return fetchRemoteData;
    }()
  }, {
    key: "fetchRemoteDataCallback",
    value: function () {
      var _fetchRemoteDataCallback = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(url, callback) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: 'arraybuffer'
                }).then(function (response) {
                  var data = new Uint8Array(response.data);
                  console.log(data);
                  callback(response);
                });

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", response);

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                throw _context2.t0;

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 7]]);
      }));

      function fetchRemoteDataCallback(_x2, _x3) {
        return _fetchRemoteDataCallback.apply(this, arguments);
      }

      return fetchRemoteDataCallback;
    }()
  }, {
    key: "string2Uint8Data",
    value: function string2Uint8Data(string) {
      var data = new Uint8Array(string.length);

      for (var i = 0; i < data.length; i++) {
        data[i] = string.charCodeAt(i) & 0xff;
      }

      return data;
    }
  }]);

  return Utils;
}();



/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "?deb7":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4dea":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f955":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");
/* harmony import */ var _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ARControllerNFT */ "./src/ARControllerNFT.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ARToolkitNFT: _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__.default,
  ARControllerNFT: _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__.default
});
})();

__webpack_exports__ = __webpack_exports__.default;
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL2J1aWxkL2FydG9vbGtpdE5GVF9FUzZfd2FzbS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL3NyYy9BUkNvbnRyb2xsZXJORlQudHMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZULy4vc3JjL0FSVG9vbGtpdE5GVC50cyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9zcmMvTW9kdWxlTG9hZGVyLnRzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC8uL3NyYy9VdGlscy50cyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC9pZ25vcmVkfC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi93ZWJhcmtpdC1vcmcvanNhcnRvb2xraXRORlQvYnVpbGR8Y3J5cHRvIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC9pZ25vcmVkfC9ob21lL3dhbHRlci9rYWx3YWx0LWdpdGh1Yi93ZWJhcmtpdC1vcmcvanNhcnRvb2xraXRORlQvYnVpbGR8ZnMiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL2lnbm9yZWR8L2hvbWUvd2FsdGVyL2thbHdhbHQtZ2l0aHViL3dlYmFya2l0LW9yZy9qc2FydG9vbGtpdE5GVC9idWlsZHxwYXRoIiwid2VicGFjazovL0FSVG9vbGtpdE5GVC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQVJUb29sa2l0TkZUL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9BUlRvb2xraXRORlQvLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVEE7QUFDQTtBQUNBLE1BQU0sSUFBaUMsNkJBQTZCLFVBQVU7QUFDOUU7QUFDQTtBQUNBOztBQUVBLGlEQUFpRCwyQ0FBMkMscURBQXFELDRCQUE0QiwwQkFBMEIsRUFBRSx1QkFBdUIsUUFBUSxtQkFBbUIsK0JBQStCLGtDQUFrQyxrQkFBa0IsaUNBQWlDLG1DQUFtQyxlQUFlLDZCQUE2QixnQ0FBZ0MsOEJBQThCLCtCQUErQiw0Q0FBNEMsd0RBQXdELDJIQUEySCx1RkFBdUYsdUJBQXVCLDBCQUEwQix5QkFBeUIsa0RBQWtELDRCQUE0Qiw4Q0FBOEMsV0FBVyxhQUFhLHdCQUF3QiwwQkFBMEIsZ0JBQWdCLGdEQUF1QixzQkFBc0IsS0FBSyxnQkFBZ0IsU0FBUyxLQUFLLDJDQUEyQyxvQ0FBb0MsUUFBUSxpQ0FBaUMsa0JBQWtCLG1CQUFPLENBQUMsaUJBQUksRUFBRSxzQkFBc0IsbUJBQU8sQ0FBQyxtQkFBTSxFQUFFLHlDQUF5Qyw0REFBNEQseUNBQXlDLDZCQUE2QixnQkFBZ0Isd0JBQXdCLG1CQUFtQixZQUFZLDZCQUE2QixrREFBa0Qsb0NBQW9DLCtDQUErQyxnQ0FBZ0MsVUFBVSxFQUFFLDBDQUEwQyx1QkFBdUIseUJBQXlCLDZCQUE2QixvQ0FBb0MsOEJBQThCLDZCQUE2Qiw2QkFBNkIsOEJBQThCLFNBQVMsOEJBQThCLGdCQUFnQixrQ0FBa0MsU0FBUywwQkFBMEIsU0FBUyxZQUFZLG1DQUFtQyxxQ0FBcUMsc0JBQXNCLCtCQUErQixhQUFhLG1DQUFtQyxzQkFBc0IsdUNBQXVDLHFCQUFxQiw2QkFBNkIsdUJBQXVCLGNBQWMsK0JBQStCLDJDQUEyQyxrQkFBa0IseUVBQXlFLG1EQUFtRCwwQkFBMEIsbUNBQW1DLCtEQUErRCwyQ0FBMkMsZUFBZSwyQkFBMkIseUNBQXlDLDZFQUE2RSxLQUFLLG9CQUFvQixvQkFBb0IsSUFBSSwyQkFBMkIsMEJBQTBCLGVBQWUsd0JBQXdCLFdBQVcsZ0NBQWdDLFNBQVMsOEJBQThCLFlBQVksMEJBQTBCLHlCQUF5QixJQUFJLDJCQUEyQiwwQkFBMEIsK0JBQStCLGVBQWUsb0NBQW9DLFdBQVcsZ0NBQWdDLFNBQVMsWUFBWSxZQUFZLHVDQUF1QywyQkFBMkIseUJBQXlCLCtCQUErQixzQkFBc0IsaURBQWlELHFCQUFxQixPQUFPLGdDQUFnQyxTQUFTLG9CQUFvQixPQUFPLFdBQVcsb0JBQW9CLGdCQUFnQiwrQkFBK0Isc0JBQXNCLE1BQU0sbURBQW1ELHVEQUF1RCw0QkFBNEIsd0NBQXdDLGtDQUFrQyxxQkFBcUIsc0RBQXNELDJEQUEyRCx1Q0FBdUMsbUJBQW1CLGtDQUFrQyw4QkFBOEIscUNBQXFDLGVBQWUsZ0NBQWdDLGdCQUFnQiwyQkFBMkIsaUJBQWlCLGVBQWUsd0RBQXdELGdEQUFnRCxrQ0FBa0MseUNBQXlDLGVBQWUsZ0JBQWdCLGVBQWUsZ0NBQWdDLGVBQWUsa0NBQWtDLG1GQUFtRixvREFBb0QsOEJBQThCLGVBQWUsK0NBQStDLDhDQUE4QyxxREFBcUQsS0FBSyxXQUFXLGtCQUFrQixtQkFBbUIsY0FBYyw2QkFBNkIsU0FBUyxzQkFBc0Isa0JBQWtCLHdDQUF3QyxTQUFTLHNCQUFzQixrQkFBa0Isd0JBQXdCLEtBQUssMENBQTBDLGFBQWEsNkJBQTZCLEtBQUssZ0JBQWdCLHVEQUF1RCxXQUFXLDBDQUEwQywyREFBMkQsNERBQTRELGlDQUFpQyxvQkFBb0Isb0NBQW9DLFlBQVksYUFBYSxLQUFLLHdCQUF3Qix1QkFBdUIsMkJBQTJCLCtCQUErQixXQUFXLHdCQUF3QixpQkFBaUIsaUJBQWlCLDBCQUEwQix3QkFBd0Isd0JBQXdCLGtCQUFrQiwwQkFBMEIseUJBQXlCLDJCQUEyQix3QkFBd0IsS0FBSywwQkFBMEIseUJBQXlCLDRCQUE0QiwyQkFBMkIseUJBQXlCLGVBQWUsdUJBQXVCLGtEQUFrRCw0REFBNEQsOEJBQThCLFVBQVUsWUFBWSxhQUFhLEtBQUssd0JBQXdCLHNFQUFzRSxnQkFBZ0IsdUJBQXVCLHdCQUF3QixZQUFZLFdBQVcsd0ZBQXdGLDJDQUEyQyxlQUFlLGtCQUFrQixnQ0FBZ0MseUNBQXlDLGNBQWMsZ0NBQWdDLHdEQUF3RCxLQUFLLFdBQVcsWUFBWSx1QkFBdUIsS0FBSyxnQ0FBZ0MscUJBQXFCLG1DQUFtQyxZQUFZLG1EQUFtRCxnQ0FBZ0MsMkJBQTJCLDhCQUE4QixtQkFBbUIsb0JBQW9CLDhFQUE4RSxZQUFZLGtCQUFrQixLQUFLLCtCQUErQiwyQkFBMkIsVUFBVSxvQkFBb0IsdUJBQXVCLCtCQUErQixvQkFBb0IsMkNBQTJDLFFBQVEsV0FBVyw4QkFBOEIsNkJBQTZCLGtCQUFrQixJQUFJLGlCQUFpQixtQkFBbUIscURBQXFELEtBQUssaUNBQWlDLFdBQVcsbURBQW1ELGdDQUFnQywyQkFBMkIsOEJBQThCLG9CQUFvQixzQ0FBc0MsWUFBWSxhQUFhLEtBQUssK0JBQStCLHFDQUFxQyx1Q0FBdUMseURBQXlELDJCQUEyQixVQUFVLHlCQUF5QixvQkFBb0IsdUJBQXVCLCtCQUErQixVQUFVLFlBQVksYUFBYSxLQUFLLCtCQUErQix3Q0FBd0MsT0FBTyxXQUFXLDJCQUEyQixnQ0FBZ0Msc0JBQXNCLDZDQUE2QyxXQUFXLDBDQUEwQyx3QkFBd0Isb0RBQW9ELFlBQVksYUFBYSxLQUFLLHFDQUFxQyxtQ0FBbUMsNkJBQTZCLGlCQUFpQix1QkFBdUIsU0FBUyxzRUFBc0UseUNBQXlDLFdBQVcseUNBQXlDLDRDQUE0Qyw0Q0FBNEMsNENBQTRDLCtDQUErQywrQ0FBK0MsZ0RBQWdELGdEQUFnRCx1REFBdUQsY0FBYyxvQkFBb0Isa0JBQWtCLHFCQUFxQiw2QkFBNkIsd0JBQXdCLGtCQUFrQixxQkFBcUIsMkVBQTJFLCtCQUErQix1Q0FBdUMsbUNBQW1DLHVCQUF1Qix3QkFBd0IsdURBQXVELFdBQVcsaUNBQWlDLHVCQUF1QixtQkFBbUIsbUJBQW1CLHNCQUFzQiw4RUFBOEUsZ0NBQWdDLHlDQUF5QyxvQ0FBb0MseUJBQXlCLHlCQUF5Qix1QkFBdUIsdUJBQXVCLDBCQUEwQiwwQkFBMEIsc0JBQXNCLDhCQUE4QiwrQkFBK0Isb0NBQW9DLFVBQVUsOEJBQThCLGtCQUFrQixxQ0FBcUMsbURBQW1ELGlDQUFpQyxrQkFBa0IscUNBQXFDLGtEQUFrRCx1QkFBdUIsZ0NBQWdDLG9DQUFvQywwQkFBMEIsMEJBQTBCLG1DQUFtQywyQkFBMkIsYUFBYSw2QkFBNkIsNkJBQTZCLHFCQUFxQixzQkFBc0Isd0JBQXdCLFNBQVMsVUFBVSxXQUFXLGFBQWEsa0VBQWtFLHlDQUF5QyxzQkFBc0IsUUFBUSxpREFBaUQsU0FBUyw2QkFBNkIsMENBQTBDLDZCQUE2QixzQ0FBc0Msa0RBQWtELGl2cG5CQUFpdnBuQiwrQkFBK0IsMENBQTBDLHlCQUF5QixJQUFJLHFDQUFxQyxrQ0FBa0MsbUNBQW1DLFdBQVcsY0FBYyxlQUFlLHdCQUF3QixLQUFLLHdEQUF3RCxXQUFXLFlBQVksNEJBQTRCLDZEQUE2RCwwREFBMEQsNkJBQTZCLDBCQUEwQiwwQkFBMEIsb0JBQW9CLCtEQUErRCxpQ0FBaUMsbUJBQW1CLGlDQUFpQyxFQUFFLEtBQUssY0FBYyw0Q0FBNEMsNENBQTRDLGtDQUFrQyxTQUFTLElBQUkseUNBQXlDLGlDQUFpQyxFQUFFLHNCQUFzQixVQUFVLG1CQUFtQiwwQ0FBMEMsNkJBQTZCLHNCQUFzQiw4QkFBOEIsOENBQThDLDhCQUE4Qiw4QkFBOEIsd0NBQXdDLHFDQUFxQyw0Q0FBNEMsb0NBQW9DLDBDQUEwQyxnREFBZ0QsZ0RBQWdELGNBQWMsaUNBQWlDLHNEQUFzRCxjQUFjLEVBQUUsNEJBQTRCLHlKQUF5Siw2QkFBNkIsMEJBQTBCLDBCQUEwQiwyREFBMkQsK0RBQStELDhDQUE4QyxpREFBaUQsMERBQTBELEVBQUUsRUFBRSxLQUFLLDJEQUEyRCw4QkFBOEIsSUFBSSw0REFBNEQsZUFBZSxTQUFTLDZEQUE2RCxjQUFjLDZDQUE2QyxTQUFTLGVBQWUsWUFBWSxnQkFBZ0IsaUJBQWlCLGlCQUFpQixRQUFRLG1DQUFtQywrQkFBK0Isc0RBQXNELDZDQUE2Qyx5QkFBeUIsNEJBQTRCLHNCQUFzQiw4QkFBOEIsOEJBQThCLDhCQUE4Qiw4QkFBOEIsOEJBQThCLDhCQUE4Qiw4QkFBOEIsOEJBQThCLDhCQUE4Qiw4QkFBOEIsK0JBQStCLCtCQUErQixrQkFBa0IsaUJBQWlCLFFBQVEsbUNBQW1DLCtCQUErQixzREFBc0QsNkNBQTZDLHlCQUF5Qix1QkFBdUIsc0JBQXNCLHdCQUF3Qix3QkFBd0Isd0JBQXdCLHdCQUF3Qix3QkFBd0Isd0JBQXdCLHdCQUF3Qix3QkFBd0Isd0JBQXdCLHdCQUF3Qix5QkFBeUIseUJBQXlCLG1DQUFtQyxpQ0FBaUMsK0JBQStCLDRDQUE0QywrQkFBK0IsNEJBQTRCLHlCQUF5Qiw0QkFBNEIscUNBQXFDLHlDQUF5QywwQkFBMEIsK0JBQStCLGdDQUFnQyxpQkFBaUIsU0FBUyx1QkFBdUIsMkJBQTJCLDZCQUE2QixzQkFBc0IsS0FBSyxtQ0FBbUMsS0FBSyxtREFBbUQsOEJBQThCLDRCQUE0QixnREFBZ0Qsd0JBQXdCLGlHQUFpRyx5Q0FBeUMscUVBQXFFLCtCQUErQixtQkFBbUIsd0NBQXdDLDZCQUE2Qix5REFBeUQseUJBQXlCLDJEQUEyRCx5Q0FBeUMscUVBQXFFLCtCQUErQixpRUFBaUUscUNBQXFDLGlFQUFpRSxpQ0FBaUMsa0JBQWtCLDREQUE0RCwyQkFBMkIsK0RBQStELHFDQUFxQyxzQkFBc0IsZ0VBQWdFLDZCQUE2QixpRUFBaUUsb0NBQW9DLG9CQUFvQixnQ0FBZ0MscUJBQXFCLHVCQUF1QiwwQkFBMEIsd0JBQXdCLGlFQUFpRSxnRUFBZ0UsNEJBQTRCLGdFQUFnRSw4REFBOEQsaUJBQWlCLG9CQUFvQiw2QkFBNkIsMkNBQTJDLGdDQUFnQywyQkFBMkIsa0JBQWtCLHlCQUF5QixVQUFVLGtCQUFrQix3QkFBd0IsbUJBQW1CLHlDQUF5QyxxQ0FBcUMscUNBQXFDLDRDQUE0Qyw0Q0FBNEMsMERBQTBELGlEQUFpRCwrREFBK0QsMkJBQTJCLHlEQUF5RCw0QkFBNEIsbUNBQW1DLG1DQUFtQywyQ0FBMkMsMkNBQTJDLDhCQUE4Qix3Q0FBd0MsMENBQTBDLEtBQUssd0NBQXdDLDJDQUEyQyxrQ0FBa0MsU0FBUyx1Q0FBdUMsbUNBQW1DLHFDQUFxQyxtQ0FBbUMsbUNBQW1DLG9DQUFvQyw0Q0FBNEMsa0NBQWtDLDJDQUEyQywyREFBMkQseUJBQXlCLG1EQUFtRCxzRUFBc0UsMkNBQTJDLHNHQUFzRyx3QkFBd0IsZ0RBQWdELDRCQUE0QixhQUFhLCtCQUErQiwyQkFBMkIseUJBQXlCLHFDQUFxQyxhQUFhLFVBQVUsNkJBQTZCLHlDQUF5QyxJQUFJLG1DQUFtQywyQ0FBMkMsK0NBQStDLFNBQVMseUJBQXlCLEtBQUssS0FBSyxrQkFBa0IsZUFBZSxrQkFBa0IscUJBQXFCLGtCQUFrQixLQUFLLFlBQVksa0JBQWtCLE1BQU0sbUJBQW1CLEtBQUssR0FBRyxNQUFNLHFCQUFxQixhQUFhLDBCQUEwQix3RUFBd0UsNERBQTRELFVBQVUseUJBQXlCLHVCQUF1QixTQUFTLHdCQUF3QixVQUFVLCtCQUErQix3QkFBd0IsNkRBQTZELGdCQUFnQixVQUFVLFFBQVEsK0JBQStCLGdCQUFnQix5QkFBeUIsd0JBQXdCLDBCQUEwQiw0QkFBNEIsb0NBQW9DLDhCQUE4QixnQ0FBZ0Msd0JBQXdCLCtCQUErQixpQkFBaUIsa0RBQWtELHVDQUF1QyxxQkFBcUIsaUNBQWlDLDJCQUEyQiw0RUFBNEUsbUNBQW1DLGtCQUFrQixxQ0FBcUMsd0JBQXdCLDZCQUE2QixJQUFJLGtCQUFrQixtQkFBTyxDQUFDLHFCQUFRLEVBQUUsa0JBQWtCLDJDQUEyQyxXQUFXLGtCQUFrQix1QkFBdUIsYUFBYSxtQkFBbUIsMkNBQTJDLDZCQUE2Qix5QkFBeUIsS0FBSyxvQ0FBb0MsMkJBQTJCLGlFQUFpRSxlQUFlLFNBQVMsbUNBQW1DLHNDQUFzQyw0RUFBNEUsVUFBVSwrQkFBK0Isa0RBQWtELDRCQUE0QixxQ0FBcUMsaUNBQWlDLG1CQUFtQixZQUFZLEtBQUssaUJBQWlCLFNBQVMseUJBQXlCLHFCQUFxQixLQUFLLE9BQU8sT0FBTyx1QkFBdUIsc0JBQXNCLG9DQUFvQyxvQ0FBb0MsZ0NBQWdDLHFEQUFxRCwyQkFBMkIsWUFBWSxTQUFTLEtBQUssOEJBQThCLGtCQUFrQixPQUFPLG1CQUFtQiwwQkFBMEIsbUJBQW1CLEtBQUssdUJBQXVCLCtEQUErRCwrQkFBK0IsU0FBUyx5QkFBeUIsc0JBQXNCLDRCQUE0QixlQUFlLDRCQUE0QixzQ0FBc0MsYUFBYSxzQkFBc0IsbUNBQW1DLFNBQVMsNEJBQTRCLGVBQWUsc0JBQXNCLHdCQUF3QixpQ0FBaUMsd0JBQXdCLGlDQUFpQyxnREFBZ0QsMENBQTBDLDRCQUE0QixnQkFBZ0IsWUFBWSxTQUFTLEtBQUssV0FBVyxJQUFJLDJDQUEyQyxTQUFTLDRCQUE0QixzQ0FBc0MsMkJBQTJCLDJDQUEyQyxZQUFZLHdCQUF3QixjQUFjLGlDQUFpQyxpQkFBaUIsaURBQWlELDBDQUEwQyw0QkFBNEIsSUFBSSxZQUFZLFNBQVMsS0FBSyxzREFBc0QsU0FBUyw0QkFBNEIsV0FBVyxpQ0FBaUMsVUFBVSxrQkFBa0IsdUJBQXVCLHNCQUFzQixnQkFBZ0Isd0JBQXdCLGdCQUFnQiwrREFBK0QsZ0JBQWdCLElBQUksK0RBQStELFNBQVMsNENBQTRDLGFBQWEsZ0JBQWdCLGdEQUFnRCxLQUFLLGFBQWEsc0VBQXNFLGdDQUFnQyxrQkFBa0IsY0FBYyxxQ0FBcUMsa0JBQWtCLGtCQUFrQixjQUFjLFlBQVksWUFBWSwwQ0FBMEMseUJBQXlCLDRCQUE0Qix5QkFBeUIscUNBQXFDLGNBQWMsS0FBSyxnQ0FBZ0MscUJBQXFCLG9DQUFvQyxxQ0FBcUMsZ0JBQWdCLG1CQUFtQiwyQkFBMkIseUJBQXlCLHFDQUFxQyxjQUFjLEtBQUssZ0NBQWdDLHFCQUFxQixvQ0FBb0MscUNBQXFDLGtCQUFrQix5QkFBeUIsd0NBQXdDLDZCQUE2QiwyQ0FBMkMsV0FBVyxXQUFXLHFDQUFxQyw4Q0FBOEMsMkNBQTJDLHVDQUF1Qyw0QkFBNEIscUJBQXFCLGlCQUFpQixLQUFLLE1BQU0seVFBQXlRLFNBQVMsZ0NBQWdDLE9BQU8sTUFBTSw4REFBOEQsU0FBUyxtTEFBbUwsT0FBTyxNQUFNLCtGQUErRixXQUFXLFNBQVMsTUFBTSw4REFBOEQsK0JBQStCLDZDQUE2Qyx3QkFBd0IsdUNBQXVDLDJDQUEyQyxpQkFBaUIsOEJBQThCLHdDQUF3Qyw0Q0FBNEMsaUJBQWlCLG1CQUFtQiw4QkFBOEIsd0NBQXdDLDRDQUE0QyxnQ0FBZ0MsMENBQTBDLDhDQUE4QywwQkFBMEIsV0FBVywyQkFBMkIsZ0NBQWdDLFlBQVksd0NBQXdDLDJDQUEyQywwRUFBMEUscUNBQXFDLDhDQUE4QyxzREFBc0Qsb0NBQW9DLG9DQUFvQyxnR0FBZ0cseURBQXlELDhCQUE4QiwwQ0FBMEMsZ0ZBQWdGLDBDQUEwQyxrQ0FBa0MsZUFBZSxtQkFBbUIsaUJBQWlCLEtBQUssOEJBQThCLHNDQUFzQyxnQkFBZ0IsNEVBQTRFLHdCQUF3QixXQUFXLHVCQUF1QixZQUFZLDBDQUEwQyxpQkFBaUIsb0JBQW9CLGFBQWEsV0FBVyxXQUFXLG9CQUFvQix3QkFBd0IsZUFBZSw4QkFBOEIseUJBQXlCLDhCQUE4QiwyQkFBMkIsS0FBSyxZQUFZLG9DQUFvQyxvQ0FBb0Msb0NBQW9DLGtCQUFrQiw4Q0FBOEMsWUFBWSw2QkFBNkIsMEJBQTBCLG9CQUFvQiwrQkFBK0IsOEJBQThCLDBCQUEwQix5Q0FBeUMsOEJBQThCLDJCQUEyQixzQ0FBc0MsOENBQThDLDRDQUE0Qyw0QkFBNEIsYUFBYSxJQUFJLHlDQUF5QyxVQUFVLGFBQWEsZ0NBQWdDLDhCQUE4QiwrQ0FBK0MscUNBQXFDLHVCQUF1QixvQ0FBb0MsNENBQTRDLHdCQUF3Qiw4QkFBOEIsNkJBQTZCLDRCQUE0Qiw2QkFBNkIsb0NBQW9DLDRCQUE0Qiw0QkFBNEIsNkJBQTZCLDRCQUE0Qix3QkFBd0IsdUJBQXVCLDhCQUE4Qix1Q0FBdUMsU0FBUyxrQkFBa0IsZUFBZSwwQ0FBMEMsc0RBQXNELGtCQUFrQixZQUFZLHlCQUF5QiwwQkFBMEIsNEJBQTRCLGtCQUFrQixhQUFhLG9EQUFvRCxrQ0FBa0MsNENBQTRDLHlEQUF5RCw4QkFBOEIsNkRBQTZELEtBQUssWUFBWSxPQUFPLDBDQUEwQyxZQUFZLDZEQUE2RCxpQ0FBaUMsYUFBYSxvQkFBb0IscUJBQXFCLDBCQUEwQiw4REFBOEQsV0FBVyxvREFBb0Qsc0JBQXNCLGNBQWMsMENBQTBDLGlEQUFpRCxzQkFBc0IsY0FBYyx5Q0FBeUMsa0VBQWtFLGVBQWUsOENBQThDLDRDQUE0QyxrRUFBa0UsS0FBSyxZQUFZLFNBQVMsS0FBSyw0Q0FBNEMsd0RBQXdELGNBQWMsdUNBQXVDLG9CQUFvQixlQUFlLDBCQUEwQixvQkFBb0IsZ0NBQWdDLGlDQUFpQyxlQUFlLDRCQUE0QixnQkFBZ0IseUNBQXlDLG1EQUFtRCxvRUFBb0UsMERBQTBELGdCQUFnQiw0QkFBNEIsaUNBQWlDLDRCQUE0QixRQUFRLGNBQWMsa0NBQWtDLHlDQUF5QyxnQkFBZ0Isd0JBQXdCLEtBQUssZ0RBQWdELHNCQUFzQixxREFBcUQsS0FBSyx3RUFBd0UsZUFBZSxzQkFBc0IsU0FBUyw0QkFBNEIsd0JBQXdCLE9BQU8sNkJBQTZCLHVEQUF1RCxpQ0FBaUMsNEJBQTRCLGdCQUFnQixTQUFTLDZFQUE2RSxZQUFZLFFBQVEsOEJBQThCLG1IQUFtSCxXQUFXLFdBQVcsZ0JBQWdCLGlDQUFpQyxrRUFBa0Usb0NBQW9DLGNBQWMsZ0JBQWdCLG1CQUFtQixjQUFjLG1DQUFtQyx5QkFBeUIsMEJBQTBCLHlCQUF5Qix5QkFBeUIsNEJBQTRCLGlFQUFpRSxVQUFVLFNBQVMsb0JBQW9CLHFCQUFxQixZQUFZLGVBQWUsS0FBSyw4QkFBOEIsd0JBQXdCLE1BQU0sd0NBQXdDLCtDQUErQyw2QkFBNkIsdUNBQXVDLDhCQUE4Qix5QkFBeUIsWUFBWSwrQkFBK0IsbUNBQW1DLDhEQUE4RCx1Q0FBdUMsaUNBQWlDLEVBQUUsb0JBQW9CLGVBQWUsK0JBQStCLE9BQU8sZ0NBQWdDLHdCQUF3QixTQUFTLFlBQVksb0JBQW9CLGdDQUFnQyxzQkFBc0IsNkRBQTZELHVDQUF1QyxrQkFBa0Isa0NBQWtDLFdBQVcsWUFBWSxjQUFjLEtBQUsseUNBQXlDLDhDQUE4Qyw0QkFBNEIsK0NBQStDLGtDQUFrQyx3QkFBd0IsK0JBQStCLCtDQUErQyw4QkFBOEIsa0NBQWtDLEtBQUssK0JBQStCLGVBQWUsNkJBQTZCLGlDQUFpQyxNQUFNLDRCQUE0QixrQ0FBa0MsaUNBQWlDLFlBQVksd0NBQXdDLHFDQUFxQyxnQ0FBZ0MsS0FBSyxxQkFBcUIsdUJBQXVCLGdEQUFnRCxhQUFhLDhCQUE4Qiw0Q0FBNEMsOENBQThDLHFCQUFxQixZQUFZLDRCQUE0Qix3QkFBd0IsdUJBQXVCLDBCQUEwQiw2QkFBNkIscUJBQXFCLHVCQUF1QiwyQkFBMkIsc0JBQXNCLDJCQUEyQix1QkFBdUIsMkJBQTJCLHlCQUF5QiwwQkFBMEIseUJBQXlCLDJCQUEyQix1QkFBdUIsMEJBQTBCLHlCQUF5QiwyQkFBMkIsWUFBWSxpREFBaUQsaUNBQWlDLDRCQUE0QiwrQkFBK0IsZ0RBQWdELGFBQWEsd0NBQXdDLGlDQUFpQyxhQUFhLFdBQVcsYUFBYSxzQ0FBc0MseUJBQXlCLFNBQVMsMENBQTBDLFNBQVMsK0NBQStDLFNBQVMsOENBQThDLFNBQVMsU0FBUyx5QkFBeUIsd0NBQXdDLDBCQUEwQixpQ0FBaUMsU0FBUyw4QkFBOEIsSUFBSSxpQ0FBaUMsVUFBVSxVQUFVLG9DQUFvQyxvQ0FBb0MsU0FBUyxJQUFJLDZCQUE2QixTQUFTLGVBQWUseUNBQXlDLFlBQVksZUFBZSxVQUFVLHlCQUF5QixVQUFVLGlEQUFpRCxXQUFXLEtBQUssd0JBQXdCLFdBQVcsU0FBUyw4QkFBOEIsVUFBVSxVQUFVLHlCQUF5QixVQUFVLDZCQUE2Qix1REFBdUQsV0FBVyxrRUFBa0Usb0RBQW9ELHFCQUFxQiwrQkFBK0Isb0JBQW9CLFdBQVcsTUFBTSxvQkFBb0IsV0FBVyw0QkFBNEIsd0JBQXdCLHNCQUFzQiwrQ0FBK0MsaUJBQWlCLHlCQUF5Qix1QkFBdUIsUUFBUSxlQUFlLGlCQUFpQixtQkFBbUIsZUFBZSxTQUFTLGVBQWUsZ0NBQWdDLFVBQVUsZUFBZSxnQ0FBZ0MsV0FBVyxlQUFlLDBCQUEwQiw4QkFBOEIscUJBQXFCLHVCQUF1QixpQkFBaUIsa0NBQWtDLGFBQWEsc0JBQXNCLGNBQWMsMEJBQTBCLG9CQUFvQixvQkFBb0Isc0JBQXNCLDBDQUEwQyxvQ0FBb0MsMkJBQTJCLGdDQUFnQyxtQkFBbUIsNkJBQTZCLHFCQUFxQixjQUFjLHFCQUFxQixlQUFlLHlCQUF5QixnQkFBZ0Isa0NBQWtDLGlCQUFpQixnQkFBZ0IseUJBQXlCLHVCQUF1QiwyQkFBMkIsY0FBYyxrQkFBa0Isb0JBQW9CLGtCQUFrQixlQUFlLGlDQUFpQyxjQUFjLG9DQUFvQyxpQ0FBaUMsa0JBQWtCLGVBQWUsb0JBQW9CLHdCQUF3Qiw2R0FBNkcsdUNBQXVDLGdCQUFnQiw2QkFBNkIsb0JBQW9CLHlCQUF5Qix1QkFBdUIsWUFBWSxrQkFBa0Isa0JBQWtCLDJCQUEyQixPQUFPLCtCQUErQixrQkFBa0IsK0JBQStCLHVCQUF1QixrQkFBa0IsdUNBQXVDLEVBQUUsc0NBQXNDLDBCQUEwQix1QkFBdUIsU0FBUyxrQkFBa0IsNEJBQTRCLHdCQUF3QixxQ0FBcUMsbUJBQW1CLEVBQUUsdUJBQXVCLGlCQUFpQiwwQkFBMEIsNEJBQTRCLHlCQUF5Qiw2QkFBNkIsV0FBVyxxREFBcUQsZ0NBQWdDLHNCQUFzQixxQkFBcUIsU0FBUyxrQkFBa0IsY0FBYyxtQkFBbUIsZUFBZSwrQkFBK0IsaUJBQWlCLDhCQUE4QixxQ0FBcUMsbUJBQW1CLEVBQUUsa0NBQWtDLDRCQUE0QixxQkFBcUIsdUJBQXVCLCtCQUErQixpREFBaUQsK0JBQStCLGVBQWUsMkJBQTJCLG1DQUFtQyx3QkFBd0IsY0FBYyxFQUFFLGtCQUFrQix5Q0FBeUMsZ0NBQWdDLDhCQUE4QiwyQ0FBMkMsK0JBQStCLCtCQUErQixZQUFZLEVBQUUsdUJBQXVCLDZCQUE2QixtQ0FBbUMsNEJBQTRCLHNDQUFzQyxZQUFZLGlDQUFpQywyQkFBMkIsNEJBQTRCLG1EQUFtRCw0QkFBNEIsK0JBQStCLFdBQVcsWUFBWSw2QkFBNkIsMkJBQTJCLCtCQUErQixjQUFjLFlBQVksNkJBQTZCLCtCQUErQix5QkFBeUIsU0FBUyxZQUFZLGNBQWMsS0FBSyxxQkFBcUIsZUFBZSxJQUFJLGlCQUFpQixTQUFTLHlCQUF5QiwrQkFBK0IsNkJBQTZCLFNBQVMsU0FBUyxXQUFXLCtCQUErQixtQ0FBbUMsOEJBQThCLDRCQUE0QixrQ0FBa0MsWUFBWSxFQUFFLHVCQUF1QixZQUFZLDRCQUE0QixtQ0FBbUMseUNBQXlDLFlBQVksaUNBQWlDLDZCQUE2Qiw0QkFBNEIsdURBQXVELG9DQUFvQyx1Q0FBdUMsdUNBQXVDLHFDQUFxQyxxQ0FBcUMsMkJBQTJCLCtCQUErQixZQUFZLEVBQUUsb0JBQW9CLCtCQUErQixZQUFZLEVBQUUsb0JBQW9CLGtEQUFrRCxrQ0FBa0MsNEJBQTRCLDZDQUE2QyxvREFBb0QsNkJBQTZCLDRCQUE0QixnREFBZ0QsNkJBQTZCLDRCQUE0QixhQUFhLElBQUkseUNBQXlDLFVBQVUsd0JBQXdCLE9BQU8sa0NBQWtDLGlEQUFpRCxZQUFZLGlDQUFpQyxxRkFBcUYsWUFBWSxpQ0FBaUMsNkJBQTZCLDRCQUE0QixtRUFBbUUsNEJBQTRCLHNCQUFzQix3Q0FBd0MsWUFBWSxrQ0FBa0MsSUFBSSx3Q0FBd0Msd0RBQXdELFNBQVMsMEdBQTBHLDRCQUE0QixJQUFJLG1EQUFtRCxTQUFTLFFBQVEsUUFBUSx5QkFBeUIsSUFBSSwwRkFBMEYsU0FBUyx5R0FBeUcsc0JBQXNCLCtCQUErQixZQUFZLEVBQUUsdUJBQXVCLDZCQUE2QixvQ0FBb0MsMkNBQTJDLFlBQVksaUNBQWlDLDJCQUEyQiw0QkFBNEIsMEJBQTBCLDRCQUE0QixJQUFJLDBDQUEwQyw2Q0FBNkMsU0FBUyx3RkFBd0YsbUNBQW1DLHFCQUFxQixJQUFJLGlGQUFpRixTQUFTLHVGQUF1Rix3QkFBd0IsK0JBQStCLFlBQVksRUFBRSxxQkFBcUIsMkJBQTJCLDRCQUE0QixtQ0FBbUMsdUJBQXVCLCtCQUErQixZQUFZLEVBQUUsdUJBQXVCLDZCQUE2QixvQ0FBb0MsNENBQTRDLFlBQVksaUNBQWlDLDRCQUE0Qiw0QkFBNEIsMEJBQTBCLDRCQUE0QixJQUFJLDBDQUEwQyw2Q0FBNkMsU0FBUyx3RkFBd0Ysb0NBQW9DLHFCQUFxQixJQUFJLGlGQUFpRixTQUFTLHVGQUF1Rix5QkFBeUIsK0JBQStCLHFCQUFxQixVQUFVLDRCQUE0Qiw0QkFBNEIsNEJBQTRCLDZFQUE2RSxnQ0FBZ0MsK0JBQStCLG1CQUFtQixFQUFFLHFCQUFxQixVQUFVLDRCQUE0QiwyQkFBMkIsNEJBQTRCLG1DQUFtQyxzQkFBc0IsMEJBQTBCLHNDQUFzQyxTQUFTLDJCQUEyQiwrQkFBK0IsbUJBQW1CLEVBQUUsaUJBQWlCLEtBQUssVUFBVSwyQkFBMkIsNEJBQTRCLDRCQUE0QixvREFBb0QsRUFBRSw0QkFBNEIseUJBQXlCLDBCQUEwQiw0QkFBNEIsWUFBWSwyQkFBMkIsMkJBQTJCLHlDQUF5QyxTQUFTLDJCQUEyQiwrQkFBK0IsbUJBQW1CLEVBQUUsaUJBQWlCLEtBQUssVUFBVSwyQkFBMkIsNEJBQTRCLDRCQUE0QixxQkFBcUIsRUFBRSwrQkFBK0IsNEJBQTRCLDZCQUE2Qiw0QkFBNEIsWUFBWSwyQkFBMkIsOEJBQThCLDZCQUE2QixVQUFVLDRCQUE0QixTQUFTLDJCQUEyQiwrQkFBK0IsWUFBWSxFQUFFLGlCQUFpQixLQUFLLFVBQVUsMkJBQTJCLDRCQUE0Qix3QkFBd0IsNEJBQTRCLDBCQUEwQiw0QkFBNEIseUNBQXlDLFlBQVksaUNBQWlDLDRCQUE0Qiw4QkFBOEIsRUFBRSw0QkFBNEIsNEJBQTRCLFlBQVksMkJBQTJCLCtCQUErQiw0QkFBNEIsNkJBQTZCLGtDQUFrQywrQkFBK0IsWUFBWSxFQUFFLHFCQUFxQiw0QkFBNEIsZ0NBQWdDLEVBQUUsZ0RBQWdELGNBQWMsNEJBQTRCLGdFQUFnRSx3Q0FBd0MsYUFBYSxxQkFBcUIsS0FBSyxPQUFPLFNBQVMsMkJBQTJCLFVBQVUsS0FBSywwQkFBMEIsSUFBSSwrQkFBK0IsdUJBQXVCLEVBQUUsaUJBQWlCLFdBQVcsa0JBQWtCLGFBQWEsU0FBUyxjQUFjLDZCQUE2QixLQUFLLDJCQUEyQixjQUFjLFVBQVUsNEJBQTRCLDJCQUEyQixZQUFZLHNDQUFzQyw0QkFBNEIsYUFBYSxtQ0FBbUMsWUFBWSxrQ0FBa0MsY0FBYyxvQkFBb0IseUJBQXlCLDRCQUE0Qix3SEFBd0gsa0JBQWtCLDJCQUEyQiwrQkFBK0IsdUNBQXVDLGlDQUFpQyw0QkFBNEIscUJBQXFCLHNEQUFzRCxJQUFJLHNDQUFzQyxvQkFBb0Isd0JBQXdCLDBDQUEwQyx3QkFBd0IsMkNBQTJDLHVEQUF1RCxTQUFTLDJGQUEyRixjQUFjLHdCQUF3Qix3QkFBd0IsMkJBQTJCLHdDQUF3QyxJQUFJLDRCQUE0QixpQ0FBaUMsU0FBUyxRQUFRLFFBQVEsMEJBQTBCLGVBQWUsMkJBQTJCLHdCQUF3Qix1Q0FBdUMsd0JBQXdCLDJCQUEyQixnREFBZ0QsNEJBQTRCLG9DQUFvQyw0QkFBNEIsK0RBQStELG1CQUFtQix1QkFBdUIscURBQXFELHlCQUF5Qiw0QkFBNEIsd0JBQXdCLDJCQUEyQiwrQkFBK0IsMkJBQTJCLCtCQUErQiw0QkFBNEIsNEJBQTRCLDRCQUE0QiwwQ0FBMEMsYUFBYSx5QkFBeUIsMEJBQTBCLDRCQUE0QiwyRUFBMkUsdUNBQXVDLGlCQUFpQiw2REFBNkQseUJBQXlCLDRCQUE0Qix3QkFBd0IsMkJBQTJCLCtCQUErQiwyQkFBMkIsK0JBQStCLDRCQUE0Qiw2QkFBNkIsNEJBQTRCLHVDQUF1QyxzQkFBc0IsMENBQTBDLGFBQWEseUJBQXlCLDBCQUEwQiw0QkFBNEIsc0ZBQXNGLDBDQUEwQyxJQUFJLHVHQUF1RyxTQUFTLDhGQUE4RixvQkFBb0IseUNBQXlDLHdCQUF3QiwyQkFBMkIsd0JBQXdCLDRCQUE0QiwrQkFBK0IsMkJBQTJCLDhEQUE4RCw0QkFBNEIsZ0NBQWdDLDZCQUE2QixpREFBaUQsMERBQTBELDREQUE0RCwyQkFBMkIsK0JBQStCLDJCQUEyQiw0QkFBNEIsNEJBQTRCLHlFQUF5RSx1REFBdUQsc0NBQXNDLFNBQVMsc0VBQXNFLHlCQUF5QixTQUFTLGdDQUFnQyw2QkFBNkIsNEJBQTRCLCtDQUErQyw4QkFBOEIsY0FBYyx5QkFBeUIsc0NBQXNDLHFEQUFxRCw2REFBNkQsUUFBUSxvQ0FBb0MsdUJBQXVCLHFCQUFxQiwrQkFBK0IsK0JBQStCLDJCQUEyQiw2QkFBNkIsa0NBQWtDLFFBQVEsaUJBQWlCLFdBQVcsb0NBQW9DLGNBQWMsMkJBQTJCLDhDQUE4QywyQkFBMkIsZ0RBQWdELDREQUE0RCw0REFBNEQsa0NBQWtDLDhEQUE4RCxLQUFLLHlDQUF5QyxpQkFBaUIsZ0JBQWdCLHNCQUFzQixzQkFBc0IsK0JBQStCLFlBQVksRUFBRSx1QkFBdUIsNEJBQTRCLGdDQUFnQyw0QkFBNEIsZ0RBQWdELFlBQVksaUNBQWlDLDJCQUEyQixxQ0FBcUMsaUJBQWlCLGtCQUFrQiwyQkFBMkIsaUNBQWlDLGlCQUFpQixtQ0FBbUMsZ0JBQWdCLFNBQVMsaURBQWlELGVBQWUsRUFBRSxzQ0FBc0Msa0RBQWtELG1EQUFtRCxxQ0FBcUMsc0NBQXNDLG9DQUFvQywrQ0FBK0MsZ0RBQWdELHFCQUFxQix5QkFBeUIscUNBQXFDLGtCQUFrQixxQ0FBcUMsMEJBQTBCLFVBQVUsaUJBQWlCLG9EQUFvRCxlQUFlLDZCQUE2QixhQUFhLDRCQUE0QixzQ0FBc0MsU0FBUyxtQkFBbUIsa0JBQWtCLFdBQVcsb0JBQW9CLHNCQUFzQixlQUFlLGFBQWEsYUFBYSxHQUFHLGtCQUFrQixrQ0FBa0Msb0JBQW9CLGdEQUFnRCxLQUFLLG9DQUFvQyxxQkFBcUIsdURBQXVELEtBQUsscUNBQXFDLHFCQUFxQix1REFBdUQsS0FBSyxzQ0FBc0Msa0NBQWtDLG9DQUFvQyxvQ0FBb0MsNkJBQTZCLHdCQUF3Qiw4Q0FBOEMsZUFBZSw4QkFBOEIsa0JBQWtCLHFCQUFxQix5QkFBeUIsa0NBQWtDLGtEQUFrRCw0QkFBNEIsK0NBQStDLHlEQUF5RCxFQUFFLHVCQUF1QixzQkFBc0IsNkJBQTZCLGlCQUFpQixNQUFNLDhCQUE4QiwwQkFBMEIsOEJBQThCLGdCQUFnQixlQUFlLG1DQUFtQyx5QkFBeUIsc0JBQXNCLHVDQUF1QywwQ0FBMEMseUNBQXlDLDJCQUEyQixpQkFBaUIsMEJBQTBCLDZCQUE2QixvQkFBb0IsWUFBWSxvQkFBb0IsS0FBSyx5QkFBeUIsWUFBWSxTQUFTLGtCQUFrQixvQ0FBb0MsV0FBVyx3QkFBd0Isc0JBQXNCLFlBQVksK0NBQStDLGlEQUFpRCxlQUFlLGtCQUFrQixLQUFLLGFBQWEsZ0RBQWdELElBQUksK0JBQStCLDRCQUE0QixFQUFFLGlCQUFpQixVQUFVLFNBQVMsd0hBQXdILElBQUksK0JBQStCLFlBQVksRUFBRSxzQkFBc0IsMkJBQTJCLDZCQUE2Qiw2QkFBNkIsMkJBQTJCLDRCQUE0QixFQUFFLGdCQUFnQixxQkFBcUIsdUJBQXVCLDBCQUEwQiw2QkFBNkIsU0FBUyxrQkFBa0IsV0FBVyxtREFBbUQsMERBQTBELG9DQUFvQyxvQkFBb0IscUJBQXFCLGtCQUFrQixvQ0FBb0MsSUFBSSxrQkFBa0IsVUFBVSxlQUFlLGVBQWUsOERBQThELDZFQUE2RSxzQ0FBc0MsNEJBQTRCLG1FQUFtRSx5RkFBeUYsc0NBQXNDLDhCQUE4QixTQUFTLDJCQUEyQiwrQkFBK0IsNEJBQTRCLE1BQU0sOEJBQThCLFNBQVMsd0JBQXdCLDZCQUE2Qiw2Q0FBNkMsaUJBQWlCLG9CQUFvQixZQUFZLGlEQUFpRCw2RUFBNkUsc0NBQXNDLG1EQUFtRCw4Q0FBOEMsdUJBQXVCLHNCQUFzQixzQkFBc0Isd0JBQXdCLGdEQUFnRCxZQUFZLGdEQUFnRCxnQkFBZ0IsWUFBWSxTQUFTLEtBQUssV0FBVyxJQUFJLGVBQWUsU0FBUyw0QkFBNEIsc0NBQXNDLDJCQUEyQiwyQ0FBMkMsWUFBWSx3QkFBd0IsY0FBYyxpQ0FBaUMsaUJBQWlCLGlEQUFpRCxZQUFZLFNBQVMsS0FBSyxJQUFJLHlCQUF5QixTQUFTLDZCQUE2QixXQUFXLGlDQUFpQyxVQUFVLEVBQUUsK0JBQStCLDZCQUE2QixrRUFBa0Usd0NBQXdDLG9OQUFvTixlQUFlLElBQUkscURBQXFELGtDQUFrQyxTQUFTLDZCQUE2QixLQUFLLGtFQUFrRSwyREFBMkQsMEJBQTBCLHVCQUF1QixlQUFlLDhEQUE4RCw2QkFBNkIsaUJBQWlCLG1DQUFtQyxrQ0FBa0MsMkNBQTJDLHFGQUFxRixvQkFBb0IsMkVBQTJFLDJCQUEyQiwyQkFBMkIsZUFBZSxzSEFBc0gsK0RBQStELFdBQVcscUZBQXFGLGlGQUFpRix3QkFBd0Isd0NBQXdDLDRCQUE0QixzRkFBc0YsNkZBQTZGLDJCQUEyQiwwQkFBMEIsNkVBQTZFLGlFQUFpRSx5QkFBeUIsaUNBQWlDLDBCQUEwQixlQUFlLHNIQUFzSCw2QkFBNkIsd0NBQXdDLEtBQUssdURBQXVELG1CQUFtQiwyQ0FBMkMsNkJBQTZCLGlDQUFpQywrQkFBK0Isb0RBQW9ELDRDQUE0QyxvRkFBb0Ysa0NBQWtDLEVBQUUsMEJBQTBCLHVCQUF1QixpQ0FBaUMscUJBQXFCLG1GQUFtRix3QkFBd0IsMEJBQTBCLHVCQUF1Qix3Q0FBd0MscUpBQXFKLGlDQUFpQyxtQ0FBbUMsUUFBUSxlQUFlLHNCQUFzQixtQkFBbUIscUJBQXFCLFlBQVksZUFBZSxzQkFBc0IsbUJBQW1CLHlCQUF5QixFQUFFLGdCQUFnQixtQ0FBbUMsS0FBSyxnQkFBZ0Isd0JBQXdCLGdFQUFnRSx3QkFBd0Isa0NBQWtDLHdCQUF3QixtQkFBbUIsd0JBQXdCLDhCQUE4QixXQUFXLGVBQWUsOEJBQThCLEVBQUUsa0JBQWtCLHNDQUFzQywyQkFBMkIsNEJBQTRCLDZDQUE2Qyx1QkFBdUIsaUNBQWlDLEVBQUUsK0VBQStFLHVCQUF1QixrQ0FBa0Msc0NBQXNDLG1EQUFtRCxtQkFBbUIsWUFBWSxPQUFPLEtBQUssdUNBQXVDLEtBQUssWUFBWSxPQUFPLEtBQUssMkNBQTJDLGFBQWEsMkJBQTJCLFlBQVksK0dBQStHLGVBQWUsa0VBQWtFLCtDQUErQyxnQ0FBZ0MsMkJBQTJCLHlCQUF5QixvQkFBb0IsaUVBQWlFLG1CQUFtQix5QkFBeUIsa0JBQWtCLGtEQUFrRCxrQkFBa0Isa0NBQWtDLHNEQUFzRCxxQkFBcUIseUJBQXlCLEVBQUUsY0FBYyxFQUFFLDhCQUE4QixzQkFBc0IseUJBQXlCLDBDQUEwQyx1QkFBdUIsVUFBVSxLQUFLLGtCQUFrQixzQkFBc0IseUZBQXlGLG9CQUFvQix3Q0FBd0Msc0ZBQXNGLDRCQUE0Qiw4QkFBOEIsNkJBQTZCLElBQUksMkRBQTJELFNBQVMsa0JBQWtCLG1FQUFtRSxtQkFBbUIsMEJBQTBCLHdDQUF3Qyx1REFBdUQsMEJBQTBCLCtEQUErRCxvREFBb0QsbUNBQW1DLGtCQUFrQixvQkFBb0IsZUFBZSw2QkFBNkIsb0VBQW9FLHFEQUFxRCxLQUFLLDRCQUE0QixpREFBaUQsT0FBTyw0QkFBNEIsRUFBRSw2QkFBNkIsNEJBQTRCLGdEQUFnRCw0QkFBNEIsOEJBQThCLDZCQUE2QixJQUFJLDJEQUEyRCxTQUFTLGtCQUFrQixvQ0FBb0MsdURBQXVELDBCQUEwQixJQUFJLDhEQUE4RCxTQUFTLFdBQVcsT0FBTyxvREFBb0QsbUNBQW1DLGtCQUFrQixvQkFBb0IsZUFBZSw2QkFBNkIsK0JBQStCLHFEQUFxRCxnQ0FBZ0MsZ0JBQWdCLDJGQUEyRixLQUFLLDRCQUE0QixpREFBaUQsT0FBTyw0QkFBNEIsRUFBRSw2QkFBNkIsOEJBQThCLGNBQWMsV0FBVywwRUFBMEUsa0JBQWtCLFlBQVksUUFBUSxpQkFBaUIsYUFBYSxLQUFLLGtDQUFrQyx5Q0FBeUMsbUJBQW1CLG1CQUFtQixnQkFBZ0IsNEJBQTRCLFdBQVcsNEJBQTRCLGdDQUFnQyxJQUFJLG9CQUFvQixTQUFTLHlFQUF5RSxVQUFVLFFBQVEsd0JBQXdCLG1CQUFtQiwwQkFBMEIsNEJBQTRCLDZCQUE2QiwyQkFBMkIsMkJBQTJCLDRCQUE0QixvQkFBb0IsK1FBQStRLHVCQUF1Qiw4QkFBOEIsNkNBQTZDLG9CQUFvQiw2Q0FBNkMsb0JBQW9CLDZDQUE2QyxvQkFBb0IsNlFBQTZRLFNBQVMsZ0RBQWdELHVDQUF1Qyx5Q0FBeUMsNkJBQTZCLDBCQUEwQiwrREFBK0Qsc0JBQXNCLFNBQVMsaUNBQWlDLG1CQUFtQiwyREFBMkQsa0JBQWtCLHdCQUF3QixTQUFTLHVDQUF1Qyx3QkFBd0IsMEJBQTBCLCtDQUErQywyQkFBMkIsZ0NBQWdDLHVCQUF1QixXQUFXLCtCQUErQixhQUFhLFVBQVUsU0FBUywrQkFBK0IsWUFBWSxFQUFFLGlCQUFpQixVQUFVLFVBQVUsYUFBYSxzQkFBc0Isc0JBQXNCLHNCQUFzQiwwQ0FBMEMsU0FBUyxTQUFTLHNDQUFzQyxvQ0FBb0MsNkJBQTZCLG9EQUFvRCw0Q0FBNEMsVUFBVSxZQUFZLFNBQVMsS0FBSywyQkFBMkIsK0JBQStCLDhDQUE4QyxtQkFBbUIsVUFBVSxrQkFBa0IsV0FBVyw2Q0FBNkMsVUFBVSxZQUFZLFNBQVMsS0FBSywyQkFBMkIsK0JBQStCLCtDQUErQyxtQkFBbUIsVUFBVSxXQUFXLGtDQUFrQyxvQkFBb0Isc0NBQXNDLFdBQVcsc0JBQXNCLDBCQUEwQixXQUFXLDhCQUE4Qiw0QkFBNEIsc0NBQXNDLGNBQWMsMEJBQTBCLGFBQWEsd0NBQXdDLHlCQUF5QixJQUFJLHdDQUF3QyxZQUFZLFFBQVEsdUJBQXVCLFVBQVUsVUFBVSxjQUFjLGtEQUFrRCxvQkFBb0IsdUJBQXVCLDJCQUEyQixRQUFRLHVCQUF1QixrQkFBa0IsU0FBUyxTQUFTLHVCQUF1QixhQUFhLHdCQUF3QixTQUFTLHlCQUF5Qix5QkFBeUIsb0JBQW9CLFNBQVMsU0FBUyxZQUFZLFNBQVMsbUVBQW1FLGdCQUFnQixxQ0FBcUMseUJBQXlCLElBQUksd0NBQXdDLFdBQVcsdUJBQXVCLHlCQUF5QixTQUFTLG1FQUFtRSx5QkFBeUIsU0FBUyxZQUFZLHlCQUF5Qix3QkFBd0Isa0JBQWtCLFNBQVMsWUFBWSx5QkFBeUIsVUFBVSxZQUFZLHdCQUF3QixnQ0FBZ0MsWUFBWSx5QkFBeUIsU0FBUyxZQUFZLHlCQUF5QixTQUFTLHdDQUF3QyxTQUFTLG1FQUFtRSxnQkFBZ0IseUNBQXlDLHlCQUF5QixJQUFJLG1DQUFtQyxrQ0FBa0Msd0NBQXdDLGlCQUFpQixTQUFTLG1FQUFtRSxnQkFBZ0IsMkJBQTJCLHFDQUFxQywwQkFBMEIsMEJBQTBCLDBCQUEwQixVQUFVLDZDQUE2QyxpREFBaUQsNEJBQTRCLHVCQUF1Qix3QkFBd0IsY0FBYyxjQUFjLHFDQUFxQyxxQkFBcUIsaUJBQWlCLHdDQUF3Qyx5QkFBeUIseUJBQXlCLGVBQWUsS0FBSyxhQUFhLHdDQUF3QyxpQ0FBaUMsd0RBQXdELHNCQUFzQiwwQ0FBMEMsT0FBTyxXQUFXLDhDQUE4QywrREFBK0Qsb0JBQW9CLHFCQUFxQixtQ0FBbUMsc0JBQXNCLHdFQUF3RSxFQUFFLDREQUE0RCw0Q0FBNEMseUNBQXlDLDZCQUE2QixpQkFBaUIsS0FBSyxxQ0FBcUMsa0JBQWtCLDRCQUE0QixxQ0FBcUMsaUNBQWlDLGlGQUFpRiwrQkFBK0Isc0NBQXNDLEVBQUUsb0NBQW9DLHVEQUF1RCw2Q0FBNkMsc0RBQXNELFlBQVksaUJBQWlCLEtBQUssOENBQThDLG9EQUFvRCx5QkFBeUIsaUJBQWlCLHNDQUFzQyx1Q0FBdUMsc0NBQXNDLEtBQUssMkJBQTJCLDZDQUE2Qyw0QkFBNEIseUNBQXlDLHNDQUFzQyxhQUFhLDBDQUEwQyw0QkFBNEIsR0FBRyxFQUFFLGlDQUFpQyw0QkFBNEIsb0RBQW9ELHdDQUF3Qyx1Q0FBdUMsc0NBQXNDLG9DQUFvQyw0QkFBNEIsZ0RBQWdELDhCQUE4QiwwQ0FBMEMsZ0NBQWdDLEdBQUcsMkVBQTJFLGNBQWMsdUNBQXVDLDhCQUE4QixtQ0FBbUMsd0JBQXdCLHNDQUFzQyx5REFBeUQsd0JBQXdCLHNDQUFzQyxtQkFBbUIsbUJBQW1CLG1FQUFtRSx1QkFBdUIsbUJBQW1CLDBFQUEwRSw4QkFBOEIsRUFBRSxRQUFRLDJDQUEyQyxVQUFVLHFCQUFxQiwwQkFBMEIsbUJBQW1CLFVBQVUsc0NBQXNDLDZCQUE2QixzQkFBc0Isd0RBQXdELHlCQUF5Qix5QkFBeUIsMENBQTBDLHVCQUF1QixvQ0FBb0MsV0FBVyx1R0FBdUcsRUFBRSxFQUFFLDhFQUE4RSxnQ0FBZ0MsYUFBYSxnQkFBZ0IsZ0JBQWdCLGdCQUFnQixnQkFBZ0IseURBQXlELGlDQUFpQyx5QkFBeUIsWUFBWSxNQUFNLEtBQUssZ0NBQWdDLHVCQUF1QiwrQkFBK0IsK0JBQStCLFdBQVcsVUFBVSxpQkFBaUIsbUNBQW1DLFdBQVcsMkJBQTJCLG9DQUFvQyxnQ0FBZ0MsMERBQTBELG9CQUFvQiw2Q0FBNkMsK0VBQStFLGlDQUFpQyxhQUFhLGlGQUFpRiw0Q0FBNEMseUNBQXlDLE9BQU8sS0FBSyw0REFBNEQsNENBQTRDLGlDQUFpQyxpREFBaUQsNENBQTRDLHFDQUFxQywrQkFBK0IsS0FBSyxHQUFHLHdFQUF3RSxpQ0FBaUMsNEJBQTRCLHNCQUFzQixzQ0FBc0MsV0FBVyxzQ0FBc0MsOEJBQThCLDZEQUE2RCxTQUFTLGFBQWEsV0FBVyxrQkFBa0IsWUFBWSxrQkFBa0IsWUFBWSxLQUFLLHdEQUF3RCxrREFBa0QseUJBQXlCLEVBQUUsc0NBQXNDLG1DQUFtQyxhQUFhLG9DQUFvQyxhQUFhLDhDQUE4QyxxQkFBcUIsZ0RBQWdELHVCQUF1QiwyQkFBMkIsNEJBQTRCLDhCQUE4Qiw0QkFBNEIsK0JBQStCLGdDQUFnQyw0Q0FBNEMsdUNBQXVDLE9BQU8sK0tBQStLLDBDQUEwQyxxQ0FBcUMsOENBQThDLHdFQUF3RSw0QkFBNEIsa0NBQWtDLDJCQUEyQixnQkFBZ0IsMkNBQTJDLEtBQUssa0RBQWtELGdDQUFnQyxrQkFBa0IsZ0NBQWdDLGFBQWEsbUJBQW1CLGlDQUFpQywyQ0FBMkMsaUNBQWlDLGVBQWUsY0FBYyx1REFBdUQsMkJBQTJCLGFBQWEsb0JBQW9CLG9CQUFvQixZQUFZLGdEQUFnRCxLQUFLLHlCQUF5QixFQUFFLGlDQUFpQyx1REFBdUQsZUFBZSxpQ0FBaUMseUNBQXlDLCtCQUErQiw2QkFBNkIsaUJBQWlCLGtDQUFrQyxvQ0FBb0MsdUJBQXVCLFlBQVksS0FBSyxxRUFBcUUsSUFBSSwyQ0FBMkMsR0FBRyx3QkFBd0IsK0JBQStCLGNBQWMsOEJBQThCLGlCQUFpQixrQ0FBa0MsOERBQThELDJEQUEyRCxzQkFBc0IsNEJBQTRCLHFDQUFxQywyQkFBMkIsdUJBQXVCLGlDQUFpQyxtQkFBbUIsNEJBQTRCLHFCQUFxQiwrQkFBK0IsNEJBQTRCLDRCQUE0Qiw2QkFBNkIsaUJBQWlCLG1DQUFtQyxpQkFBaUIsa0NBQWtDLDhEQUE4RCwyREFBMkQseUJBQXlCLDRDQUE0QyxtQ0FBbUMsNkJBQTZCLFlBQVksNEJBQTRCLHlEQUF5RCxpREFBaUQsbURBQW1ELHlEQUF5RCw2REFBNkQsd0JBQXdCLDBCQUEwQix5REFBeUQsZ0RBQWdELCtCQUErQiw2QkFBNkIsc0VBQXNFLHdLQUF3SyxnRkFBZ0YsbUNBQW1DLDZEQUE2RCxxREFBcUQsZ0NBQWdDLDJIQUEySCxrRUFBa0Usc0NBQXNDLHdDQUF3Qyw0SEFBNEgsK0NBQStDLEtBQUssbUJBQW1CLDZCQUE2Qix5Q0FBeUMsbUhBQW1ILGVBQWUsNkJBQTZCLHlDQUF5QyxpQ0FBaUMseUJBQXlCLGlDQUFpQyxtQkFBbUIsdUJBQXVCLDZCQUE2QixrREFBa0QsK0JBQStCLHFCQUFxQiwyR0FBMkcseUJBQXlCLDRCQUE0QixXQUFXLGlFQUFpRSxrQkFBa0IscUJBQXFCLG9EQUFvRCxTQUFTLGVBQWUsNEVBQTRFLG1CQUFtQixnRkFBZ0Ysa0RBQWtELHNFQUFzRSxXQUFXLHNEQUFzRCxRQUFRLGtCQUFrQixxQkFBcUIsb0RBQW9ELHdCQUF3QiwwQkFBMEIsdUJBQXVCLHlDQUF5QyxXQUFXLEtBQUssVUFBVSxlQUFlLDRFQUE0RSxtQkFBbUIsZ0ZBQWdGLDZDQUE2QyxrS0FBa0ssa0RBQWtELGtFQUFrRSx3QkFBd0IsbUNBQW1DLHFFQUFxRSwyQkFBMkIseUNBQXlDLHVCQUF1QixLQUFLLGtLQUFrSyxNQUFNLDhCQUE4QixNQUFNLHlDQUF5Qyx1QkFBdUIsS0FBSyxtQ0FBbUMsa0RBQWtELHlCQUF5QixHQUFHLHVCQUF1QiwwQ0FBMEMsTUFBTSwwREFBMEQsV0FBVyxvRUFBb0Usa0JBQWtCLHFCQUFxQixvREFBb0QsU0FBUyxlQUFlLDRFQUE0RSxtQkFBbUIsZ0ZBQWdGLDhCQUE4Qiw2R0FBNkcsa0RBQWtELHNFQUFzRSxXQUFXLDJDQUEyQyx1QkFBdUIsNEJBQTRCLFdBQVcsMkNBQTJDLHVCQUF1Qix5QkFBeUIsZ0RBQWdELGtCQUFrQixvQkFBb0Isb0RBQW9ELDRCQUE0QixXQUFXLHVDQUF1QyxZQUFZLDREQUE0RCxjQUFjLFlBQVksaUNBQWlDLHFDQUFxQywrQ0FBK0MscUNBQXFDLFVBQVUsa0NBQWtDLDBDQUEwQyxpQ0FBaUMsVUFBVSw4QkFBOEIsaUJBQWlCLHdDQUF3QyxvQ0FBb0MsdUJBQXVCLDhEQUE4RCw4REFBOEQsa0RBQWtELDRDQUE0QywyQkFBMkIsc0NBQXNDLG9CQUFvQixpREFBaUQsd0JBQXdCLHVCQUF1Qix3QkFBd0IsV0FBVywwQ0FBMEMsaUNBQWlDLGdDQUFnQywyQ0FBMkMsaUNBQWlDLCtEQUErRCwwQ0FBMEMsa0NBQWtDLGtDQUFrQyx1RUFBdUUsY0FBYyxTQUFTLGdEQUFnRCxJQUFJLGNBQWMsR0FBRyw2Q0FBNkMsb0NBQW9DLGdCQUFnQixxQkFBcUIsWUFBWSw2RUFBNkUsbUNBQW1DLDBDQUEwQyxxQ0FBcUMsbUNBQW1DLHFDQUFxQyxLQUFLLHFDQUFxQyxxQkFBcUIsV0FBVyw2QkFBNkIsd0JBQXdCLCtEQUErRCx1RUFBdUUsRUFBRSxLQUFLLCtEQUErRCxxQkFBcUIsR0FBRyw4REFBOEQsMkRBQTJELDZCQUE2QixvQ0FBb0MsV0FBVyxpQkFBaUIsZ0RBQWdELEtBQUssMkNBQTJDLCtFQUErRSxjQUFjLG9DQUFvQyx3QkFBd0IsaUVBQWlFLHFEQUFxRCxFQUFFLEtBQUssaUVBQWlFLHNCQUFzQixHQUFHLGtDQUFrQyxvRUFBb0Usb0VBQW9FLGdEQUFnRCwrRUFBK0UsMkVBQTJFLDJFQUEyRSxrS0FBa0ssZUFBZSxxQ0FBcUMsNkJBQTZCLHFCQUFxQixtQ0FBbUMsNkJBQTZCLGlDQUFpQyxpQ0FBaUMsbUNBQW1DLHVCQUF1QixpQ0FBaUMsMkRBQTJELFlBQVksdURBQXVELDZCQUE2QixLQUFLLDBEQUEwRCw4QkFBOEIsS0FBSyw2Q0FBNkMsc0RBQXNELGlDQUFpQywwREFBMEQscUVBQXFFLCtDQUErQyxLQUFLLG1CQUFtQixvQ0FBb0MscUNBQXFDLDZCQUE2QiwyRUFBMkUsK0JBQStCLHNCQUFzQixtQ0FBbUMsMkNBQTJDLCtCQUErQixnQkFBZ0Isa0JBQWtCLGlDQUFpQyxZQUFZLG1CQUFtQixLQUFLLHlCQUF5QixrQ0FBa0Msd0RBQXdELHNDQUFzQyx5QkFBeUIsNEJBQTRCLDJDQUEyQyxrQ0FBa0MsdUJBQXVCLDJCQUEyQix5RkFBeUYsVUFBVSwrQkFBK0IsMkJBQTJCLDZCQUE2Qiw2QkFBNkIsV0FBVyxVQUFVLDhDQUE4QyxvQkFBb0IsWUFBWSxxQkFBcUIsZUFBZSxPQUFPLDBCQUEwQixPQUFPLDJCQUEyQixzQ0FBc0MsT0FBTyx3QkFBd0IsZ0JBQWdCLHFCQUFxQixvRkFBb0YsNE5BQTROLDRCQUE0Qiw0RUFBNEUsV0FBVyx1REFBdUQsYUFBYSw2REFBNkQseUVBQXlFLGtEQUFrRCxnREFBZ0QsMkZBQTJGLEVBQUUsaUlBQWlJLGFBQWEsY0FBYyxrQkFBa0IscUJBQXFCLCtCQUErQiwwQ0FBMEMsS0FBSyxvQ0FBb0MsaUVBQWlFLG9EQUFvRCx1REFBdUQsaURBQWlELDhEQUE4RCw0REFBNEQscUJBQXFCLGtOQUFrTixrQ0FBa0MsRUFBRSxtREFBbUQsYUFBYSxtQkFBbUIsRUFBRSx3Q0FBd0Msa0lBQWtJLG9GQUFvRix1RkFBdUYsaUdBQWlHLDZCQUE2QixxRUFBcUUsbURBQW1ELGtFQUFrRSxFQUFFLGlEQUFpRCxhQUFhLFlBQVksUUFBUSxLQUFLLHdDQUF3QyxhQUFhLDRIQUE0SCxtQkFBbUIsOERBQThELDBEQUEwRCwwQkFBMEIsbUJBQW1CLG9FQUFvRSx1QkFBdUIsNENBQTRDLDJEQUEyRCw4Q0FBOEMsdUVBQXVFLHdQQUF3UCxxRkFBcUYsK0ZBQStGLGdFQUFnRSxtRkFBbUYsa0NBQWtDLG1HQUFtRyxxQkFBcUIscUJBQXFCLFlBQVksV0FBVyxLQUFLLDhEQUE4RCxpQ0FBaUMsNEJBQTRCLHlDQUF5QyxTQUFTLEVBQUUsU0FBUyxFQUFFLHdDQUF3Qyx1Q0FBdUMsd0dBQXdHLGtGQUFrRixFQUFFLHNDQUFzQyxrQkFBa0IsMENBQTBDLGlDQUFpQyx5RkFBeUYsNkJBQTZCLGVBQWUsb0dBQW9HLDJEQUEyRCwrQkFBK0IsWUFBWSxrQkFBa0IsS0FBSyxtRUFBbUUsMEJBQTBCLE9BQU8sc0NBQXNDLGdCQUFnQixxQkFBcUIsWUFBWSxhQUFhLEtBQUssa0NBQWtDLCtDQUErQyx1RkFBdUYsaURBQWlELGlJQUFpSSxNQUFNLElBQUkseUJBQXlCLHFDQUFxQyxJQUFJLHdEQUF3RCx1RkFBdUYsa0dBQWtHLHNCQUFzQiwyRUFBMkUsSUFBSSxZQUFZLGFBQWEsS0FBSyxxRkFBcUYsOEJBQThCLHdCQUF3QiwwQkFBMEIsc0JBQXNCLHlFQUF5RSx1R0FBdUcsSUFBSSx5QkFBeUIsNENBQTRDLElBQUksS0FBSyxnQ0FBZ0Msa0JBQWtCLEtBQUssb0RBQW9ELDBDQUEwQywrQ0FBK0MsNEJBQTRCLDhCQUE4Qiw2Q0FBNkMsWUFBWSxtREFBbUQsZ0JBQWdCLElBQUksTUFBTSxpQkFBaUIsSUFBSSwwQkFBMEIsMkRBQTJELHVCQUF1Qiw4SUFBOEksOERBQThELHdDQUF3QyxnRUFBZ0Usb0VBQW9FLHVCQUF1Qiw0Q0FBNEMsa0JBQWtCLGdFQUFnRSwrQkFBK0Isb0ZBQW9GLHNEQUFzRCw2QkFBNkIsMEhBQTBILHdDQUF3Qyw2Q0FBNkMsc0NBQXNDLEtBQUssZ0RBQWdELGdFQUFnRSxnRUFBZ0UseUZBQXlGLGdEQUFnRCxtQ0FBbUMsaUNBQWlDLEtBQUssMkRBQTJELFNBQVMsRUFBRSxTQUFTLEVBQUUscURBQXFELDRCQUE0Qix1REFBdUQsYUFBYSx5Q0FBeUMsU0FBUyxFQUFFLHVCQUF1QiwwQkFBMEIsRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxnQ0FBZ0Msd0RBQXdELHFDQUFxQyw4QkFBOEIsK0JBQStCLFlBQVksWUFBWSw0QkFBNEIsS0FBSyxzQ0FBc0MsU0FBUyxhQUFhLDJCQUEyQixZQUFZLDRCQUE0QixLQUFLLHNDQUFzQyw4QkFBOEIsWUFBWSxzQkFBc0Isa0RBQWtELDBDQUEwQyxpQ0FBaUMsY0FBYyxnQkFBZ0IsU0FBUyxXQUFXLFNBQVMsV0FBVyxTQUFTLFlBQVksU0FBUyxTQUFTLGtGQUFrRiw0QkFBNEIsd0JBQXdCLGdCQUFnQiwrQ0FBK0MsNEJBQTRCLHNCQUFzQiwwQ0FBMEMsd0NBQXdDLHVCQUF1QixVQUFVLDBDQUEwQywrQkFBK0IsOEZBQThGLEVBQUUseUJBQXlCLGFBQWEsYUFBYSxlQUFlLDhDQUE4QyxvQkFBb0IsS0FBSyxZQUFZLCtDQUErQyxjQUFjLGdDQUFnQyxrREFBa0QsZ0NBQWdDLGtEQUFrRCwwREFBMEQsb0RBQW9ELGlDQUFpQyw0QkFBNEIsc0JBQXNCLHlDQUF5QyxhQUFhLDBDQUEwQyxzREFBc0QsOEVBQThFLGFBQWEseUdBQXlHLEVBQUUsMkZBQTJGLDJEQUEyRCw0QkFBNEIseURBQXlELG1DQUFtQyw0RUFBNEUsYUFBYSw2REFBNkQsa0VBQWtFLG9HQUFvRyxTQUFTLEVBQUUsd0RBQXdELGNBQWMseURBQXlELHNCQUFzQixxQ0FBcUMsd0JBQXdCLDBEQUEwRCwwQkFBMEIsc0NBQXNDLDRCQUE0QiwwREFBMEQsMEJBQTBCLHNDQUFzQyw0QkFBNEIsNERBQTRELDhFQUE4RSw0QkFBNEIsa0JBQWtCLG9CQUFvQixpQ0FBaUMsaUNBQWlDLGNBQWMsaUJBQWlCLHVCQUF1Qiw2QkFBNkIsbUNBQW1DLDZDQUE2Qyw0QkFBNEIsK0VBQStFLHNEQUFzRCw4RUFBOEUsbUNBQW1DLCtMQUErTCx3Q0FBd0Msd0hBQXdILEVBQUUsbUVBQW1FLCtHQUErRyxrQ0FBa0Msa0NBQWtDLGlCQUFpQixpQkFBaUIsc0JBQXNCLHdCQUF3QixnQ0FBZ0MsNEJBQTRCLHNCQUFzQixxR0FBcUcsRUFBRSxrQ0FBa0MsRUFBRSxvREFBb0QsNEJBQTRCLHlDQUF5QyxzQkFBc0IseUNBQXlDLDZCQUE2QixRQUFRLG9CQUFvQiwyQkFBMkIsWUFBWSxVQUFVLEtBQUssNkJBQTZCLHlDQUF5QywwQ0FBMEMsdURBQXVELG9CQUFvQixrQkFBa0IsS0FBSyw0QkFBNEIsbUJBQW1CLGtDQUFrQyxLQUFLLHdCQUF3QixZQUFZLFNBQVMsS0FBSyw0Q0FBNEMsZUFBZSxhQUFhLFdBQVcsMENBQTBDLGlDQUFpQyw0QkFBNEIsY0FBYyxnREFBZ0Qsd0hBQXdILDJEQUEyRCx5Q0FBeUMscUJBQXFCLCtCQUErQixLQUFLLHFCQUFxQixxQkFBcUIsdUJBQXVCLDRCQUE0Qix1QkFBdUIseUNBQXlDLG1DQUFtQyxLQUFLLHdCQUF3QixZQUFZLFNBQVMsS0FBSyxpQ0FBaUMsaUJBQWlCLFdBQVcsNEVBQTRFLDBCQUEwQixLQUFLLFlBQVksU0FBUyxLQUFLLDJCQUEyQix1QkFBdUIsNEJBQTRCLFdBQVcsdUdBQXVHLFlBQVksRUFBRSw4REFBOEQsNEJBQTRCLDJEQUEyRCxpQkFBaUIsMkJBQTJCLDJCQUEyQixnQ0FBZ0MsbUJBQW1CLGdCQUFnQixRQUFRLHNCQUFzQiwyQkFBMkIsMkJBQTJCLGdDQUFnQyxtQkFBbUIsZ0JBQWdCLFFBQVEsc0JBQXNCLHlDQUF5Qyw2QkFBNkIsbUJBQW1CLFFBQVEsMkJBQTJCLFlBQVksVUFBVSxLQUFLLHNDQUFzQyw4Q0FBOEMsK0NBQStDLDREQUE0RCxvQkFBb0Isa0JBQWtCLEtBQUssNEJBQTRCLG1CQUFtQix3Q0FBd0MsYUFBYSxXQUFXLDBDQUEwQywrQkFBK0IscUVBQXFFLGlDQUFpQyxtQ0FBbUMsOEJBQThCLDBDQUEwQyx1QkFBdUIsNEJBQTRCLFdBQVcsdUdBQXVHLFlBQVksRUFBRSw0SEFBNEgsOEJBQThCLDRMQUE0TCxrTEFBa0wsNkNBQTZDLG9SQUFvUixFQUFFLDhDQUE4Qyw0QkFBNEIsc0JBQXNCLG1FQUFtRSxpQkFBaUIsc0NBQXNDLGtCQUFrQixFQUFFLGdDQUFnQyxhQUFhLHdDQUF3QyxrREFBa0Qsa0NBQWtDLHFCQUFxQix1RUFBdUUsWUFBWSx1Q0FBdUMscURBQXFELHlDQUF5QywyQkFBMkIsa0JBQWtCLFFBQVEsNkJBQTZCLHNDQUFzQywrQkFBK0IsT0FBTyxRQUFRLDJCQUEyQixrQkFBa0IsdUJBQXVCLGlFQUFpRSxNQUFNLDZCQUE2Qix1REFBdUQseUNBQXlDLHlDQUF5Qyw2QkFBNkIsd0JBQXdCLGVBQWUsb0NBQW9DLHVCQUF1Qix5Q0FBeUMsSUFBSSxtREFBbUQsOENBQThDLFNBQVMsV0FBVyxnREFBZ0QsMEJBQTBCLGdDQUFnQywyQkFBMkIsOEJBQThCLGFBQWEsa0JBQWtCLFdBQVcsWUFBWSw2Q0FBNkMsc0VBQXNFLDJGQUEyRixtREFBbUQsZ0JBQWdCLGFBQWEsYUFBYSxXQUFXLDZCQUE2QixxQ0FBcUMseUJBQXlCLDJCQUEyQixtSEFBbUgsU0FBUyx5SEFBeUgsa0JBQWtCLGNBQWMsZUFBZSxrQkFBa0IsMkJBQTJCLDhCQUE4Qiw2QkFBNkIsNkNBQTZDLElBQUksY0FBYywyQ0FBMkMsNEJBQTRCLDZCQUE2QiwrQkFBK0IseUJBQXlCLEVBQUUsU0FBUyxTQUFTLG1FQUFtRSxnQkFBZ0IsOERBQThELElBQUksNEJBQTRCLHlDQUF5QyxjQUFjLGlDQUFpQyx5QkFBeUIsRUFBRSxxQ0FBcUMsU0FBUyxTQUFTLG1FQUFtRSxnQkFBZ0IsdUJBQXVCLGFBQWEsdUJBQXVCLElBQUksd0NBQXdDLGlCQUFpQixTQUFTLFNBQVMsbUVBQW1FLGdCQUFnQixzQ0FBc0MsSUFBSSx3Q0FBd0MsNENBQTRDLG9CQUFvQixTQUFTLFNBQVMsbUVBQW1FLGdCQUFnQiw4REFBOEQsSUFBSSx3Q0FBd0MsMkJBQTJCLG9EQUFvRCxrQ0FBa0MsZ0RBQWdELFVBQVUsZ0NBQWdDLG1TQUFtUyxnRUFBZ0UsU0FBUyxTQUFTLG1FQUFtRSxnQkFBZ0IsdUNBQXVDLElBQUksd0NBQXdDLDZDQUE2QyxvQkFBb0IsU0FBUyxTQUFTLG1FQUFtRSxnQkFBZ0Isd0JBQXdCLHFCQUFxQiw0QkFBNEIsbUJBQW1CLHlCQUF5QiwrQkFBK0IsU0FBUywyQkFBMkIsaUJBQWlCLDRCQUE0QixnREFBZ0QsaUNBQWlDLFVBQVUsWUFBWSxTQUFTLGtCQUFrQixXQUFXLDREQUE0RCwrREFBK0QsOEJBQThCLHFDQUFxQyxjQUFjLDZDQUE2QyxvQ0FBb0MsbUZBQW1GLDhDQUE4Qyw2Q0FBNkMsbUJBQW1CLG9CQUFvQixpQ0FBaUMsS0FBSyxvQkFBb0IsOENBQThDLEtBQUssd0NBQXdDLGdCQUFnQixlQUFlLHdDQUF3Qyw2QkFBNkIsVUFBVSwrUkFBK1IsaUNBQWlDLHVCQUF1QixvWEFBb1gsbUNBQW1DLHNFQUFzRSxzRkFBc0YsMkhBQTJILGtEQUFrRCwyREFBMkQseUJBQXlCLHFCQUFxQixXQUFXLG9DQUFvQywwQ0FBMEMsbUNBQW1DLG9CQUFvQiw4QkFBOEIsWUFBWSwrREFBK0QseURBQXlELDhDQUE4QyxlQUFlLDBDQUEwQywyQkFBMkIsd0RBQXdELHdCQUF3QixvREFBb0Qsb0RBQW9ELG9EQUFvRCx3REFBd0QseURBQXlELGdDQUFnQyxxRUFBcUUsMkRBQTJELDZEQUE2RCxvRUFBb0Usb0VBQW9FLHFEQUFxRCxxREFBcUQsZ0NBQWdDLEtBQUssK0JBQStCLEtBQUssaUNBQWlDLHVCQUF1QixvQkFBb0IsNkNBQTZDLHFCQUFxQiw4QkFBOEIscUJBQXFCLDBDQUEwQyxxQkFBcUIsMkJBQTJCLHFCQUFxQiwyQkFBMkIsa0NBQWtDLHFCQUFxQixvQ0FBb0MscUJBQXFCLDRDQUE0QyxxQkFBcUIsc0RBQXNELHFCQUFxQiw4QkFBOEIscUJBQXFCLG9DQUFvQyxxQkFBcUIsNEJBQTRCLCtCQUErQixxQ0FBcUMsa0NBQWtDLHFCQUFxQixxSUFBcUkscUJBQXFCLHFDQUFxQyxxQkFBcUIsbUNBQW1DLGlCQUFpQixXQUFXLHFCQUFxQixxQ0FBcUMsV0FBVyxLQUFLLFlBQVkscUJBQXFCLG1DQUFtQyxpQkFBaUIsV0FBVyxxQkFBcUIsdUJBQXVCLHFCQUFxQiw2Q0FBNkMsdUZBQXVGLGlFQUFpRSx3Q0FBd0MsOElBQThJLHdEQUF3RCxpRkFBaUYseUNBQXlDLHdEQUF3RCxxQkFBcUIsc0RBQXNELHNEQUFzRCxvRUFBb0Usb0VBQW9FLG9FQUFvRSxtREFBbUQsV0FBVyxvREFBb0QsV0FBVyxtQkFBbUIsMkRBQTJELGdFQUFnRSxLQUFLLCtEQUErRCxtREFBbUQscUJBQXFCLG9CQUFvQixxQkFBcUIsd0NBQXdDLGlIQUFpSCxpRUFBaUUsd0NBQXdDLDhJQUE4SSx3REFBd0QsaUZBQWlGLHlDQUF5Qyx3REFBd0QscUJBQXFCLGtEQUFrRCxxQkFBcUIseUJBQXlCLHFCQUFxQix1QkFBdUIsaUJBQWlCLHFCQUFxQixzQkFBc0IsbURBQW1ELHFCQUFxQixvQkFBb0IsaUJBQWlCLFlBQVksbUNBQW1DLDJCQUEyQiw2RUFBNkUsNENBQTRDLHlCQUF5QixTQUFTLDRCQUE0QixzQkFBc0IsMENBQTBDLHNDQUFzQyxvQkFBb0IseUJBQXlCLFFBQVEsbUJBQW1CLFdBQVcsMkNBQTJDLFlBQVksWUFBWSxtQkFBbUIsd0JBQXdCLGtCQUFrQix1QkFBdUIsZUFBZSxlQUFlLGlCQUFpQixtQkFBbUIsZ0JBQWdCLG9CQUFvQixrQkFBa0IsMENBQTBDLE1BQU0sZUFBZSxzQ0FBc0MsbUJBQW1CLDhDQUE4QyxRQUFRLGVBQWUsd0NBQXdDLG1CQUFtQixnREFBZ0QsV0FBVyxlQUFlLDRCQUE0QixXQUFXLGVBQWUsZ0NBQWdDLEVBQUUsaUJBQWlCLGdCQUFnQix5RUFBeUUsd0JBQXdCLHNFQUFzRSxtQkFBbUIseUJBQXlCLGNBQWMsa0ZBQWtGLGFBQWEscUJBQXFCLHdEQUF3RCxtREFBbUQsMkJBQTJCLHdFQUF3RSw4Q0FBOEMsZUFBZSxpQ0FBaUMsV0FBVyxZQUFZLGVBQWUsS0FBSyxpQkFBaUIsWUFBWSxlQUFlLHlHQUF5RyxTQUFTLG1DQUFtQyxvQkFBb0IsK0RBQStELCtFQUErRSxjQUFjLG1CQUFtQix3QkFBd0IsUUFBUSw4Q0FBOEMsR0FBRyx1Q0FBdUMsdUNBQXVDLHVDQUF1Qyx1Q0FBdUMscUJBQXFCLDBCQUEwQixzQkFBc0Isd0NBQXdDLGNBQWMsd0NBQXdDLGNBQWMseUNBQXlDLHNCQUFzQixlQUFlLCtCQUErQixnRUFBZ0UsUUFBUSxJQUFJLDRCQUE0QixTQUFTLDJCQUEyQix5RUFBeUUsSUFBSSw0QkFBNEIseUNBQXlDLFlBQVksaUJBQWlCLEtBQUssK0JBQStCLGFBQWEsU0FBUyw4REFBOEQscUNBQXFDLHlCQUF5QixPQUFPLGdFQUFnRSxtQkFBbUIsb21DQUFvbUMscUJBQXFCLCtEQUErRCxrR0FBa0cseUNBQXlDLDRFQUE0RSxxQ0FBcUMsd0VBQXdFLDZEQUE2RCxpR0FBaUcsdURBQXVELDJGQUEyRixpSEFBaUgscUpBQXFKLG1EQUFtRCx1RkFBdUYsdURBQXVELDJGQUEyRix1REFBdUQsMkZBQTJGLDZDQUE2QyxpRkFBaUYsbURBQW1ELHVGQUF1Riw2Q0FBNkMsaUZBQWlGLG1EQUFtRCx1RkFBdUYsdURBQXVELDJGQUEyRix1REFBdUQsMkZBQTJGLHlEQUF5RCw2RkFBNkYsMkRBQTJELCtGQUErRiw2QkFBNkIsbUJBQW1CLElBQUksZ0NBQWdDLFNBQVMsaUJBQWlCLGtDQUFrQyxnQkFBZ0IsNkJBQTZCLG1CQUFtQixJQUFJLHlCQUF5QixTQUFTLGlCQUFpQixrQ0FBa0MsZ0JBQWdCLHFDQUFxQyxtQkFBbUIsSUFBSSwrQkFBK0IsU0FBUyxpQkFBaUIsa0NBQWtDLGdCQUFnQixpQ0FBaUMsbUJBQW1CLElBQUksNEJBQTRCLFNBQVMsaUJBQWlCLGtDQUFrQyxnQkFBZ0IsaUNBQWlDLG1CQUFtQixJQUFJLG1DQUFtQyxTQUFTLGlCQUFpQixrQ0FBa0MsZ0JBQWdCLHlDQUF5QyxtQkFBbUIsSUFBSSxrQ0FBa0MsU0FBUyxpQkFBaUIsa0NBQWtDLGdCQUFnQixxQ0FBcUMsbUJBQW1CLElBQUksc0NBQXNDLFNBQVMsaUJBQWlCLGtDQUFrQyxnQkFBZ0IsZ0JBQWdCLGNBQWMsNEJBQTRCLHVCQUF1Qix3REFBd0QsbUJBQW1CLDJDQUEyQyxvQkFBb0IsK0NBQStDLG1CQUFtQixzQkFBc0Isc0JBQXNCLE9BQU8sU0FBUyxzQkFBc0IsT0FBTyxpQkFBaUIsb0JBQW9CLGVBQWUseUJBQXlCLGdCQUFnQixjQUFjLDRCQUE0QixtRUFBbUUsVUFBVSx3QkFBd0Isa0NBQWtDLHNCQUFzQixzQkFBc0Isd0JBQXdCLElBQUksUUFBUSxJQUFJLEtBQUssU0FBUyxrQkFBa0IsK0JBQStCLGtCQUFrQiw2Q0FBNkMsT0FBTyx3QkFBd0IsS0FBSyxjQUFjLDZDQUE2QyxXQUFXLHFDQUFxQyxzQkFBc0IsOEVBQThFLGtDQUFrQywyQkFBMkI7OztBQUd6anB2QjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUVBQWUsTUFBTSxFOzs7Ozs7Ozs7Ozs7Ozs7QUNmckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQzs7Ozs7Ozs7Ozs7Ozs7O0FDbENlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7Ozs7Ozs7Ozs7O0FDSkE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7Ozs7Ozs7Ozs7O0FDZGU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxDOzs7Ozs7Ozs7O0FDYkEsZ0hBQStDOzs7Ozs7Ozs7OztBQ0EvQyw0RkFBdUMsQzs7Ozs7Ozs7Ozs7QUNBMUI7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxpRUFBa0I7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLHlFQUFzQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsMkVBQXVCO0FBQzlDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUF1QjtBQUNuRCxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBMkI7QUFDdEQsc0JBQXNCLG1CQUFPLENBQUMseUZBQThCO0FBQzVELGtCQUFrQixtQkFBTyxDQUFDLHlFQUFxQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QztBQUM1Qzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7Ozs7Ozs7Ozs7O0FDNUxhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxrREFBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsZ0VBQWdCO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyw0REFBYztBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx3RUFBb0I7QUFDOUMsZUFBZSxtQkFBTyxDQUFDLHdEQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxrRUFBaUI7QUFDeEMsb0JBQW9CLG1CQUFPLENBQUMsNEVBQXNCO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLHNFQUFtQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsb0VBQWtCOztBQUV6QztBQUNBLHFCQUFxQixtQkFBTyxDQUFDLGdGQUF3Qjs7QUFFckQ7O0FBRUE7QUFDQSxzQkFBc0I7Ozs7Ozs7Ozs7OztBQ3ZEVDs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7Ozs7Ozs7Ozs7OztBQ2xCYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsMkRBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FDeERhOztBQUViO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDSmE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyx5RUFBcUI7QUFDNUMseUJBQXlCLG1CQUFPLENBQUMsaUZBQXNCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLDJFQUFtQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyxtRUFBZTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQywyRUFBc0I7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7Ozs7Ozs7Ozs7OztBQ25KYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOzs7Ozs7Ozs7Ozs7QUNyRGE7O0FBRWIsb0JBQW9CLG1CQUFPLENBQUMsbUZBQTBCO0FBQ3RELGtCQUFrQixtQkFBTyxDQUFDLCtFQUF3Qjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNuQmE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMscUVBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNqQmE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLHVFQUFpQjtBQUM3QyxlQUFlLG1CQUFPLENBQUMsdUVBQW9CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQyx5REFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsdUNBQXVDO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7Ozs7Ozs7Ozs7O0FDakZhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDekNhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxtREFBVTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwyQkFBMkI7QUFDM0IsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7O0FDdEZhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLG1FQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDeEJhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTtBQUNoQyxlQUFlLG1CQUFPLENBQUMsMkRBQWU7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLE1BQU07QUFDakIsV0FBVyxlQUFlO0FBQzFCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7Ozs7Ozs7Ozs7O0FDckJhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxrREFBUztBQUM3QiwwQkFBMEIsbUJBQU8sQ0FBQyw4RkFBK0I7QUFDakUsbUJBQW1CLG1CQUFPLENBQUMsMEVBQXFCOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxnRUFBZ0I7QUFDdEMsR0FBRztBQUNIO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLGlFQUFpQjtBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7Ozs7Ozs7Ozs7O0FDcklhOztBQUViO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDVmE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3JFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2JhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBDQUEwQztBQUMxQyxTQUFTOztBQUVUO0FBQ0EsNERBQTRELHdCQUF3QjtBQUNwRjtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQywrQkFBK0IsYUFBYSxFQUFFO0FBQzlDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7Ozs7Ozs7Ozs7OztBQ3BEYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNiYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ1ZhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7Ozs7Ozs7Ozs7OztBQ25FYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsbURBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7Ozs7Ozs7Ozs7O0FDWGE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGVBQWU7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3BEYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDMUJhOztBQUViLFVBQVUsbUJBQU8sQ0FBQywrREFBc0I7O0FBRXhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN4R2E7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLGdFQUFnQjs7QUFFbkM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTLEdBQUcsU0FBUztBQUM1QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDRCQUE0QjtBQUM1QixLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLHVDQUF1QyxPQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6VEE7O0lBaUVxQixlO0FBK0NuQiwyQkFBYSxLQUFiLEVBQTRCLE1BQTVCLEVBQTRDLFdBQTVDLEVBQWlFLE9BQWpFLEVBQWlGO0FBQUE7O0FBN0N6RSxtQkFBVSxFQUFWO0FBK0NOLFNBQUssT0FBTCxtQ0FBbUI7QUFDZixZQUFNLEVBQUUsSUFETztBQUVmLGlCQUFXLEVBQUU7QUFGRSxLQUFuQixHQUdPLE9BSFA7QUFPQSxTQUFLLEVBQUwsR0FBVSxDQUFDLENBQVg7QUFFQSxTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsU0FBSyxNQUFMLEdBQWMsTUFBZDtBQUdBLFNBQUssS0FBTDtBQUdBLFNBQUssV0FBTCxHQUFtQixLQUFLLE9BQUwsQ0FBYSxXQUFoQztBQUdBLFNBQUssV0FBTCxHQUFtQixXQUFuQjtBQUNBLFNBQUssUUFBTCxHQUFnQixDQUFDLENBQWpCO0FBQ0EsU0FBSyxZQUFMLEdBQW9CLEtBQXBCO0FBR0EsU0FBSyxZQUFMO0FBR0EsU0FBSyxTQUFMLEdBQWlCLEVBQWpCO0FBRUEsU0FBSyxVQUFMLEdBQWtCLEVBQWxCO0FBRUEsU0FBSyxhQUFMLEdBQXFCLElBQUksWUFBSixDQUFpQixFQUFqQixDQUFyQjtBQUNBLFNBQUssY0FBTCxHQUFzQixJQUFJLFlBQUosQ0FBaUIsRUFBakIsQ0FBdEI7QUFDQSxTQUFLLG9CQUFMLEdBQTRCLElBQTVCO0FBRUEsU0FBSyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsU0FBSyxXQUFMLEdBQW1CLE1BQW5CO0FBQ0EsU0FBSyxTQUFMLEdBQWlCLEtBQUssVUFBTCxHQUFrQixLQUFLLFdBQXhDO0FBRUEsU0FBSyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsU0FBSyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBSyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsU0FBSyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsU0FBSyxnQkFBTCxHQUF3QixJQUF4Qjs7QUFFQSxRQUFJLEtBQUssT0FBTCxDQUFhLE1BQWpCLEVBQXlCO0FBRXZCLFdBQUssTUFBTCxHQUFjLEtBQUssT0FBTCxDQUFhLE1BQTNCO0FBQ0QsS0FIRCxNQUdPLElBQUksT0FBTyxRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBRTFDLFdBQUssTUFBTCxHQUFjLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDRDs7QUFDRCxRQUFJLEtBQUssTUFBVCxFQUFpQjtBQUNmLFdBQUssTUFBTCxDQUFZLEtBQVosR0FBb0IsS0FBcEI7QUFDQSxXQUFLLE1BQUwsQ0FBWSxNQUFaLEdBQXFCLE1BQXJCO0FBQ0EsV0FBSyxHQUFMLEdBQVcsS0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixJQUF2QixDQUFYO0FBQ0QsS0FKRCxNQUlPO0FBQ0wsYUFBTyxDQUFDLElBQVIsQ0FBYSxxQkFBYjtBQUNEOztBQUdELFNBQUssY0FBTCxHQUFzQixLQUF0QjtBQUNBLFNBQUssa0JBQUwsR0FBMEIsQ0FBMUI7QUFDQSxTQUFLLGNBQUwsR0FBc0IsQ0FBdEI7QUFFQSxTQUFLLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxTQUFLLGtCQUFMLEdBQTBCLENBQTFCO0FBQ0Q7Ozs7V0F1QkQsaUJBQVMsS0FBVCxFQUF3QjtBQUN0QixVQUFJLE1BQU0sR0FBRyxLQUFLLFlBQUwsQ0FBa0IsS0FBbEIsQ0FBYjs7QUFDQSxVQUFJLE1BQU0sSUFBSSxDQUFkLEVBQWlCO0FBQ2YsZUFBTyxDQUFDLEtBQVIsQ0FBYyxtQkFBZCxFQUFtQyxxQkFBbkMsRUFBMEQsTUFBMUQ7QUFDRDs7QUFFRCxVQUFJLENBQUosRUFBTyxDQUFQOztBQUdBLFdBQUssQ0FBTCxJQUFVLEtBQUssVUFBZixFQUEyQjtBQUN6QixTQUFDLEdBQUcsS0FBSyxTQUFMLEdBQWlCLFVBQWpCLENBQTRCLENBQTVCLENBQUo7QUFDQSxTQUFDLENBQUMsVUFBRixHQUFlLENBQUMsQ0FBQyxTQUFqQjtBQUNBLFNBQUMsQ0FBQyxTQUFGLEdBQWMsS0FBZDtBQUNEOztBQUdELFVBQUksY0FBYyxHQUFHLEtBQUssY0FBMUI7QUFDQSxXQUFLLGVBQUw7QUFHQSxVQUFNLGdCQUFnQixHQUFHLEdBQXpCOztBQUlBLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsY0FBcEIsRUFBb0MsQ0FBQyxFQUFyQyxFQUF5QztBQUV2QyxZQUFJLGFBQWEsR0FBRyxLQUFLLFlBQUwsQ0FBa0IsQ0FBbEIsQ0FBcEI7QUFFQSxZQUFJLFVBQVUsR0FBRyw2REFBakI7O0FBRUEsWUFBSSxhQUFhLENBQUMsS0FBbEIsRUFBeUI7QUFFdkIsZUFBSyxjQUFMLEdBQXNCLENBQXRCO0FBQ0EsZUFBSyxrQkFBTCxHQUEwQixJQUFJLENBQUMsR0FBTCxFQUExQjtBQUVBLGNBQUksT0FBTyxHQUFHLEtBQUssZ0JBQUwsQ0FBc0IsQ0FBdEIsQ0FBZDtBQUNBLGlCQUFPLENBQUMsTUFBUixDQUFlLEdBQWYsQ0FBbUIsYUFBYSxDQUFDLElBQWpDO0FBQ0EsaUJBQU8sQ0FBQyxTQUFSLEdBQW9CLElBQXBCO0FBQ0EsZUFBSyxlQUFMLENBQXFCLE9BQU8sQ0FBQyxNQUE3QixFQUFxQyxLQUFLLGFBQTFDO0FBQ0EsZUFBSyxjQUFMLEdBQXNCLEtBQUssaUJBQUwsQ0FBdUIsS0FBSyxhQUE1QixDQUF0QjtBQUNBLGVBQUssYUFBTCxDQUFtQjtBQUNqQixnQkFBSSxFQUFFLGNBRFc7QUFFakIsa0JBQU0sRUFBRSxJQUZTO0FBR2pCLGdCQUFJLEVBQUU7QUFDSixtQkFBSyxFQUFFLENBREg7QUFFSixrQkFBSSxFQUFFLFVBRkY7QUFHSixvQkFBTSxFQUFFLGFBSEo7QUFJSixvQkFBTSxFQUFFLEtBQUssYUFKVDtBQUtKLHlCQUFXLEVBQUUsS0FBSztBQUxkO0FBSFcsV0FBbkI7QUFZRCxTQXRCRCxNQXNCTyxJQUFJLElBQUksQ0FBQyxjQUFMLEtBQXdCLENBQTVCLEVBQStCO0FBRXBDLGNBQUssSUFBSSxDQUFDLEdBQUwsS0FBYSxLQUFLLGtCQUFuQixHQUF5QyxnQkFBN0MsRUFBK0Q7QUFDN0QsaUJBQUssY0FBTCxHQUFzQixLQUF0QjtBQUNBLGlCQUFLLGFBQUwsQ0FBbUI7QUFDakIsa0JBQUksRUFBRSxlQURXO0FBRWpCLG9CQUFNLEVBQUUsSUFGUztBQUdqQixrQkFBSSxFQUFFO0FBQ0oscUJBQUssRUFBRSxDQURIO0FBRUosb0JBQUksRUFBRSxVQUZGO0FBR0osc0JBQU0sRUFBRSxhQUhKO0FBSUosc0JBQU0sRUFBRSxLQUFLLGFBSlQ7QUFLSiwyQkFBVyxFQUFFLEtBQUs7QUFMZDtBQUhXLGFBQW5CO0FBV0Q7O0FBQUE7QUFDRjtBQUNGO0FBS0Y7OztXQU9ELDJCQUFlO0FBQ2IsV0FBSyxZQUFMLENBQWtCLGVBQWxCLENBQWtDLEtBQUssRUFBdkM7QUFDRDs7O1dBWUQsMEJBQWtCLEVBQWxCLEVBQThCLFdBQTlCLEVBQWtEO0FBQ2hELFVBQUksR0FBRyxHQUFHLEtBQUssU0FBTCxHQUFpQixVQUFqQixDQUE0QixFQUE1QixDQUFWOztBQUNBLFVBQUksQ0FBQyxHQUFMLEVBQVU7QUFDUixhQUFLLFNBQUwsR0FBaUIsVUFBakIsQ0FBNEIsRUFBNUIsSUFBa0MsR0FBRyxHQUFHO0FBQ3RDLG9CQUFVLEVBQUUsS0FEMEI7QUFFdEMsbUJBQVMsRUFBRSxLQUYyQjtBQUd0QyxnQkFBTSxFQUFFLElBQUksWUFBSixDQUFpQixFQUFqQixDQUg4QjtBQUl0QyxxQkFBVyxFQUFFLElBQUksWUFBSixDQUFpQixFQUFqQixDQUp5QjtBQUt0QyxxQkFBVyxFQUFFLFdBQVcsSUFBSSxLQUFLO0FBTEssU0FBeEM7QUFPRDs7QUFDRCxVQUFJLFdBQUosRUFBaUI7QUFDZixXQUFHLENBQUMsV0FBSixHQUFrQixXQUFsQjtBQUNEOztBQUNELGFBQU8sR0FBUDtBQUNEOzs7V0FrQkQsc0JBQWMsS0FBZCxFQUF3QjtBQUN0QixVQUFJLEtBQUssZ0JBQUwsQ0FBc0IsS0FBdEIsQ0FBSixFQUFrQztBQUNoQyxlQUFPLEtBQUssWUFBTCxDQUFrQixZQUFsQixDQUErQixLQUFLLEVBQXBDLENBQVA7QUFDRDs7QUFDRCxhQUFPLENBQUMsRUFBUjtBQUNEOzs7V0FXRCxzQkFBYyxXQUFkLEVBQWlDO0FBQy9CLFVBQUksTUFBTSxLQUFLLFlBQUwsQ0FBa0IsWUFBbEIsQ0FBK0IsS0FBSyxFQUFwQyxFQUF3QyxXQUF4QyxDQUFWLEVBQWdFO0FBQzlELGVBQU8sS0FBSyxZQUFMLENBQWtCLGFBQXpCO0FBQ0Q7QUFDRjs7O1dBRUQsb0JBQVksRUFBWixFQUFzQjtBQUNwQixhQUFPLEtBQUssWUFBTCxDQUFrQixVQUFsQixDQUE2QixFQUE3QixDQUFQO0FBQ0Q7OztXQWdCRCwwQkFBaUIsSUFBakIsRUFBK0IsUUFBL0IsRUFBK0M7QUFDN0MsVUFBRyxDQUFDLEtBQUssU0FBTCxHQUFpQixTQUFqQixDQUEyQixJQUEzQixDQUFKLEVBQXNDO0FBQ3BDLGFBQUssU0FBTCxHQUFpQixTQUFqQixDQUEyQixJQUEzQixJQUFtQyxFQUFuQztBQUNEOztBQUNELFdBQUssU0FBTCxHQUFpQixTQUFqQixDQUEyQixJQUEzQixFQUFpQyxJQUFqQyxDQUFzQyxRQUF0QztBQUNEOzs7V0FPRCw2QkFBb0IsSUFBcEIsRUFBa0MsUUFBbEMsRUFBa0Q7QUFDaEQsVUFBRyxLQUFLLFNBQUwsR0FBaUIsU0FBakIsQ0FBMkIsSUFBM0IsQ0FBSCxFQUFxQztBQUNuQyxZQUFJLEtBQUssR0FBRyxLQUFLLFNBQUwsR0FBaUIsU0FBakIsQ0FBMkIsSUFBM0IsRUFBaUMsT0FBakMsQ0FBeUMsUUFBekMsQ0FBWjs7QUFDQSxZQUFHLEtBQUssR0FBRyxDQUFDLENBQVosRUFBZTtBQUNiLGVBQUssU0FBTCxHQUFpQixTQUFqQixDQUEyQixJQUEzQixFQUFpQyxNQUFqQyxDQUF3QyxLQUF4QyxFQUErQyxDQUEvQztBQUNEO0FBQ0Y7QUFDRjs7O1dBTUQsdUJBQWMsS0FBZCxFQUFpRTtBQUMvRCxVQUFJLFNBQVMsR0FBRyxLQUFLLFNBQUwsR0FBaUIsU0FBakIsQ0FBMkIsS0FBSyxDQUFDLElBQWpDLENBQWhCOztBQUNBLFVBQUcsU0FBSCxFQUFjO0FBQ1osYUFBSSxJQUFJLENBQUMsR0FBRyxDQUFaLEVBQWUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUE3QixFQUFxQyxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLG1CQUFTLENBQUMsQ0FBRCxDQUFULENBQWEsSUFBYixDQUFrQixJQUFsQixFQUF3QixLQUF4QjtBQUNEO0FBQ0Y7QUFDRjs7O1dBVUQsc0JBQVU7QUFFUixVQUFHLE9BQU8sUUFBUCxLQUFvQixXQUF2QixFQUFvQztBQUNsQyxlQUFPLENBQUMsR0FBUixDQUFZLDJEQUFaO0FBQ0E7QUFDRDs7QUFFRCxjQUFRLENBQUMsSUFBVCxDQUFjLFdBQWQsQ0FBMEIsS0FBSyxNQUEvQjtBQUVBLFdBQUssWUFBTCxDQUFrQixJQUFsQjtBQUNBLFdBQUssVUFBTCxHQUFrQixLQUFLLGtCQUFMLEVBQWxCO0FBQ0Q7OztXQVVELHlCQUFpQixRQUFqQixFQUF5QyxLQUF6QyxFQUE4RCxLQUE5RCxFQUE0RTtBQUMxRSxVQUFJLEtBQUssSUFBSSxTQUFiLEVBQXdCO0FBQ3RCLGFBQUssR0FBRyxJQUFJLFlBQUosQ0FBaUIsRUFBakIsQ0FBUjtBQUNEOztBQUVELFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLENBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsQ0FBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLENBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsQ0FBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLENBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsQ0FBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsUUFBUSxDQUFDLEVBQUQsQ0FBM0I7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixRQUFRLENBQUMsRUFBRCxDQUEzQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLEdBQW5CO0FBQ0EsV0FBSyxDQUFDLElBQUksSUFBSSxDQUFULENBQUwsR0FBbUIsR0FBbkI7QUFDQSxXQUFLLENBQUMsSUFBSSxJQUFJLENBQVQsQ0FBTCxHQUFtQixHQUFuQjtBQUNBLFdBQUssQ0FBQyxJQUFJLElBQUksQ0FBVCxDQUFMLEdBQW1CLEdBQW5COztBQUVBLFVBQUksS0FBSyxJQUFJLFNBQVQsSUFBc0IsS0FBSyxLQUFLLEdBQXBDLEVBQXlDO0FBQ3ZDLGFBQUssQ0FBQyxFQUFELENBQUwsSUFBYSxLQUFiO0FBQ0EsYUFBSyxDQUFDLEVBQUQsQ0FBTCxJQUFhLEtBQWI7QUFDQSxhQUFLLENBQUMsRUFBRCxDQUFMLElBQWEsS0FBYjtBQUNEOztBQUNELGFBQU8sS0FBUDtBQUNEOzs7V0FVRCwyQkFBbUIsUUFBbkIsRUFBMkMsVUFBM0MsRUFBc0UsS0FBdEUsRUFBb0Y7QUFDbEYsVUFBSSxXQUFKOztBQUNBLFVBQUksVUFBVSxJQUFJLFNBQWxCLEVBQTZCO0FBQUUsbUJBQVcsR0FBRyxJQUFJLFlBQUosQ0FBaUIsRUFBakIsQ0FBZDtBQUFvQyxPQUFuRSxNQUF5RTtBQUFFLG1CQUFXLEdBQUcsVUFBZDtBQUEwQjs7QUFHckcsaUJBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsUUFBUSxDQUFDLENBQUQsQ0FBekI7QUFDQSxpQkFBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQixRQUFRLENBQUMsQ0FBRCxDQUF6QjtBQUNBLGlCQUFXLENBQUMsQ0FBRCxDQUFYLEdBQWlCLFFBQVEsQ0FBQyxDQUFELENBQXpCO0FBQ0EsaUJBQVcsQ0FBQyxFQUFELENBQVgsR0FBa0IsUUFBUSxDQUFDLEVBQUQsQ0FBMUI7QUFFQSxpQkFBVyxDQUFDLENBQUQsQ0FBWCxHQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFELENBQTFCO0FBQ0EsaUJBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBRCxDQUExQjtBQUNBLGlCQUFXLENBQUMsQ0FBRCxDQUFYLEdBQWlCLENBQUMsUUFBUSxDQUFDLENBQUQsQ0FBMUI7QUFDQSxpQkFBVyxDQUFDLEVBQUQsQ0FBWCxHQUFrQixDQUFDLFFBQVEsQ0FBQyxFQUFELENBQTNCO0FBRUEsaUJBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBRCxDQUExQjtBQUNBLGlCQUFXLENBQUMsQ0FBRCxDQUFYLEdBQWlCLENBQUMsUUFBUSxDQUFDLENBQUQsQ0FBMUI7QUFDQSxpQkFBVyxDQUFDLEVBQUQsQ0FBWCxHQUFrQixDQUFDLFFBQVEsQ0FBQyxFQUFELENBQTNCO0FBQ0EsaUJBQVcsQ0FBQyxFQUFELENBQVgsR0FBa0IsQ0FBQyxRQUFRLENBQUMsRUFBRCxDQUEzQjtBQUdBLGlCQUFXLENBQUMsQ0FBRCxDQUFYLEdBQWlCLENBQWpCO0FBQ0EsaUJBQVcsQ0FBQyxDQUFELENBQVgsR0FBaUIsQ0FBakI7QUFDQSxpQkFBVyxDQUFDLEVBQUQsQ0FBWCxHQUFrQixDQUFsQjtBQUNBLGlCQUFXLENBQUMsRUFBRCxDQUFYLEdBQWtCLENBQWxCOztBQUVBLFVBQUksS0FBSyxJQUFJLFNBQVQsSUFBc0IsS0FBSyxLQUFLLEdBQXBDLEVBQXlDO0FBQ3ZDLG1CQUFXLENBQUMsRUFBRCxDQUFYLElBQW1CLEtBQW5CO0FBQ0EsbUJBQVcsQ0FBQyxFQUFELENBQVgsSUFBbUIsS0FBbkI7QUFDQSxtQkFBVyxDQUFDLEVBQUQsQ0FBWCxJQUFtQixLQUFuQjtBQUNEOztBQUVELGdCQUFVLEdBQUcsV0FBYjtBQUVBLGFBQU8sVUFBUDtBQUNEOzs7V0FRQSxtQ0FBdUI7QUFDdEIsYUFBTyxLQUFLLGFBQVo7QUFDRDs7O1dBTUEsMkJBQWU7QUFDZCxhQUFPLEtBQUssVUFBWjtBQUNEOzs7V0FZRCxzQkFBYSxJQUFiLEVBQTBCO0FBQ3hCLGFBQU8sS0FBSyxZQUFMLENBQWtCLFlBQWxCLENBQStCLEtBQUssRUFBcEMsRUFBd0MsSUFBeEMsQ0FBUDtBQUNEOzs7V0FPRCx3QkFBWTtBQUNWLGFBQU8sS0FBSyxZQUFMLENBQWtCLFlBQWxCLENBQStCLEtBQUssRUFBcEMsQ0FBUDtBQUNEOzs7V0FNRCw4QkFBa0I7QUFDaEIsYUFBTyxLQUFLLFlBQUwsQ0FBa0Isa0JBQWxCLENBQXFDLEtBQUssRUFBMUMsQ0FBUDtBQUNEOzs7V0FNRCxxQkFBYSxJQUFiLEVBQTBCO0FBQ3hCLGFBQU8sS0FBSyxZQUFMLENBQWtCLFdBQWxCLENBQThCLElBQTlCLENBQVA7QUFDRDs7O1dBTUQsdUJBQVc7QUFDVCxhQUFPLEtBQUssWUFBTCxDQUFrQixXQUFsQixFQUFQO0FBQ0Q7OztXQU9BLGdDQUF3QixLQUF4QixFQUFxQztBQUNwQyxhQUFPLEtBQUssWUFBTCxDQUFrQixzQkFBbEIsQ0FBeUMsS0FBSyxFQUE5QyxFQUFrRCxLQUFsRCxDQUFQO0FBQ0Q7OztXQU1ELGtDQUFzQjtBQUNwQixhQUFPLEtBQUssWUFBTCxDQUFrQixzQkFBbEIsQ0FBeUMsS0FBSyxFQUE5QyxDQUFQO0FBQ0Q7OztXQU9ELCtCQUF1QixLQUF2QixFQUFvQztBQUNsQyxhQUFPLEtBQUssWUFBTCxDQUFrQixxQkFBbEIsQ0FBd0MsS0FBSyxFQUE3QyxFQUFpRCxLQUFqRCxDQUFQO0FBQ0Q7OztXQU1ELGlDQUFxQjtBQUNuQixhQUFPLEtBQUssWUFBTCxDQUFrQixxQkFBbEIsQ0FBd0MsS0FBSyxFQUE3QyxDQUFQO0FBQ0Q7OztXQVdELDBCQUFpQixJQUFqQixFQUE2QjtBQUMzQixhQUFPLEtBQUssWUFBTCxDQUFrQixnQkFBbEIsQ0FBbUMsS0FBSyxFQUF4QyxFQUE0QyxJQUE1QyxDQUFQO0FBQ0Q7OztXQU9ELDRCQUFnQjtBQUNkLGFBQU8sS0FBSyxZQUFMLENBQWtCLGdCQUFsQixDQUFtQyxLQUFLLEVBQXhDLENBQVA7QUFDRDs7O1dBcUJELHNCQUFhLFNBQWIsRUFBOEI7QUFDNUIsYUFBTyxLQUFLLFlBQUwsQ0FBa0IsWUFBbEIsQ0FBK0IsS0FBSyxFQUFwQyxFQUF3QyxTQUF4QyxDQUFQO0FBQ0Q7OztXQWFELHdCQUFZO0FBQ1YsYUFBTyxLQUFLLFlBQUwsQ0FBa0IsWUFBbEIsQ0FBK0IsS0FBSyxFQUFwQyxDQUFQO0FBQ0Q7Ozs7aU1BTUEsaUJBQXFCLFNBQXJCLEVBQXdDLFNBQXhDLEVBQTBFLE9BQTFFO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQ2lCLEtBQUssWUFBTCxDQUFrQixhQUFsQixDQUFnQyxLQUFLLEVBQXJDLEVBQXlDLENBQUMsU0FBRCxDQUF6QyxFQUF1RCxVQUFDLEdBQUQsRUFBYTtBQUNsRix1QkFBSSxDQUFDLGNBQUwsSUFBdUIsR0FBRyxDQUFDLE1BQTNCO0FBQ0EsMkJBQVMsQ0FBQyxHQUFELENBQVQ7QUFDRCxpQkFIZSxFQUdiLE9BSGEsQ0FEakI7O0FBQUE7QUFDSyxtQkFETDtBQUFBLGlEQUtRLEdBTFI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTzs7Ozs7Ozs7Ozs7a01BWUEsa0JBQXNCLFNBQXRCLEVBQWdELFNBQWhELEVBQWtGLE9BQWxGO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQ2lCLEtBQUssWUFBTCxDQUFrQixhQUFsQixDQUFnQyxLQUFLLEVBQXJDLEVBQXlDLFNBQXpDLEVBQW9ELFVBQUMsR0FBRCxFQUFhO0FBQy9FLHdCQUFJLENBQUMsY0FBTCxJQUF1QixHQUFHLENBQUMsTUFBM0I7QUFDQSwyQkFBUyxDQUFDLEdBQUQsQ0FBVDtBQUNELGlCQUhlLEVBR2IsT0FIYSxDQURqQjs7QUFBQTtBQUNLLG1CQURMO0FBQUEsa0RBS1EsR0FMUjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPOzs7Ozs7Ozs7O1dBMkJELDBCQUFrQixJQUFsQixFQUE4QjtBQUM1QixhQUFPLEtBQUssWUFBTCxDQUFrQixnQkFBbEIsQ0FBbUMsS0FBSyxFQUF4QyxFQUE0QyxJQUE1QyxDQUFQO0FBQ0Q7OztXQU9ELDRCQUFnQjtBQUNkLGFBQU8sS0FBSyxZQUFMLENBQWtCLGdCQUFsQixDQUFtQyxLQUFLLEVBQXhDLENBQVA7QUFDRDs7O1dBUU8scUJBQVM7QUFDZixhQUFPLElBQVA7QUFDRDs7OzsrTEFPTztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUVvQixJQUFJLGtEQUFKLEdBQW1CLElBQW5CLEVBRnBCOztBQUFBO0FBRU4scUJBQUssWUFGQztBQUdOLHVCQUFPLENBQUMsR0FBUixDQUFZLG1CQUFaLEVBQWlDLDBCQUFqQztBQUhNO0FBQUEsdUJBTWdCLEtBQUssWUFBTCxDQUFrQixVQUFsQixDQUE2QixLQUFLLFdBQWxDLENBTmhCOztBQUFBO0FBTU4scUJBQUssUUFOQztBQU9OLHVCQUFPLENBQUMsR0FBUixDQUFZLG1CQUFaLEVBQWlDLDhCQUFqQyxFQUFpRSxLQUFLLFFBQXRFO0FBR0EscUJBQUssRUFBTCxHQUFVLEtBQUssWUFBTCxDQUFrQixLQUFsQixDQUF3QixLQUFLLEtBQTdCLEVBQW9DLEtBQUssTUFBekMsRUFBaUQsS0FBSyxRQUF0RCxDQUFWO0FBQ0EsdUJBQU8sQ0FBQyxHQUFSLENBQVksbUJBQVosRUFBaUMsbUJBQWpDLEVBQXNELEtBQUssRUFBM0Q7O0FBRUEscUJBQUssUUFBTDs7QUFFTSxzQkFmQSxHQWV5QyxLQUFLLFlBQUwsQ0FBa0IsV0FmM0Q7QUFnQk4scUJBQUssWUFBTCxHQUFvQixNQUFNLENBQUMsWUFBM0I7QUFDQSxxQkFBSyxTQUFMLEdBQWlCLE1BQU0sQ0FBQyxTQUF4QjtBQUNBLHFCQUFLLGdCQUFMLEdBQXdCLE1BQU0sQ0FBQyxnQkFBL0I7QUFFQSxxQkFBSyxRQUFMLEdBQWdCLElBQUksVUFBSixDQUFlLEtBQUssWUFBTCxDQUFrQixRQUFsQixDQUEyQixNQUEzQixDQUFrQyxNQUFqRCxFQUF5RCxLQUFLLFlBQTlELEVBQTRFLEtBQUssU0FBakYsQ0FBaEI7QUFDQSxxQkFBSyxTQUFMLEdBQWlCLElBQUksVUFBSixDQUFlLEtBQUssWUFBTCxDQUFrQixRQUFsQixDQUEyQixNQUEzQixDQUFrQyxNQUFqRCxFQUF5RCxLQUFLLGdCQUE5RCxFQUFnRixLQUFLLFNBQUwsR0FBaUIsQ0FBakcsQ0FBakI7QUFFQSxxQkFBSyxVQUFMLEdBQWtCLElBQUksWUFBSixDQUFpQixLQUFLLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBMkIsTUFBM0IsQ0FBa0MsTUFBbkQsRUFBMkQsTUFBTSxDQUFDLE1BQWxFLEVBQTBFLEVBQTFFLENBQWxCO0FBQ0EscUJBQUssb0JBQUwsR0FBNEIsSUFBSSxZQUFKLENBQWlCLEtBQUssWUFBTCxDQUFrQixRQUFsQixDQUEyQixNQUEzQixDQUFrQyxNQUFuRCxFQUEyRCxNQUFNLENBQUMsU0FBbEUsRUFBNkUsRUFBN0UsQ0FBNUI7QUFFQSxxQkFBSyxzQkFBTCxDQUE0QixHQUE1QjtBQUNBLHFCQUFLLHFCQUFMLENBQTJCLElBQTNCO0FBRUEsMEJBQVUsQ0FBQyxZQUFLO0FBQ2Qsd0JBQUksQ0FBQyxhQUFMLENBQW1CO0FBQ2pCLHdCQUFJLEVBQUUsTUFEVztBQUVqQiwwQkFBTSxFQUFFO0FBRlMsbUJBQW5CO0FBSUQsaUJBTFMsRUFLUCxDQUxPLENBQVY7QUE3Qk0sa0RBb0NDLElBcENEOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE87Ozs7Ozs7Ozs7V0EyQ0Esb0JBQVE7QUFDZCxXQUFLLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBMkIsS0FBSyxFQUFoQztBQUNEOzs7V0FNTywwQkFBa0IsV0FBbEIsRUFBdUM7QUFDN0MsVUFBSSxDQUFDLFdBQUwsRUFBa0I7QUFFaEIsbUJBQVcsR0FBRyxLQUFLLEtBQW5CO0FBQ0Q7O0FBTUQsVUFBSSxJQUFKOztBQUVBLFVBQUksV0FBVyxDQUFDLElBQWhCLEVBQXNCO0FBRXBCLFlBQUksR0FBRyxXQUFXLENBQUMsSUFBbkI7QUFDRCxPQUhELE1BR087QUFDTCxhQUFLLEdBQUwsQ0FBUyxJQUFUOztBQUVBLFlBQUksS0FBSyxXQUFMLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ25DLGVBQUssR0FBTCxDQUFTLFNBQVQsQ0FBbUIsS0FBSyxNQUFMLENBQVksS0FBL0IsRUFBc0MsQ0FBdEM7QUFDQSxlQUFLLEdBQUwsQ0FBUyxNQUFULENBQWdCLElBQUksQ0FBQyxFQUFMLEdBQVUsQ0FBMUI7QUFFQSxlQUFLLEdBQUwsQ0FBUyxTQUFULENBQW1CLFdBQW5CLEVBQWdDLENBQWhDLEVBQW1DLENBQW5DLEVBQXNDLEtBQUssTUFBTCxDQUFZLE1BQWxELEVBQTBELEtBQUssTUFBTCxDQUFZLEtBQXRFO0FBQ0QsU0FMRCxNQUtPO0FBRUwsZUFBSyxHQUFMLENBQVMsU0FBVCxDQUFtQixXQUFuQixFQUFnQyxDQUFoQyxFQUFtQyxDQUFuQyxFQUFzQyxLQUFLLE1BQUwsQ0FBWSxLQUFsRCxFQUF5RCxLQUFLLE1BQUwsQ0FBWSxNQUFyRTtBQUNEOztBQUVELGFBQUssR0FBTCxDQUFTLE9BQVQ7QUFFQSxZQUFJLFNBQVMsR0FBRyxLQUFLLEdBQUwsQ0FBUyxZQUFULENBQXNCLENBQXRCLEVBQXlCLENBQXpCLEVBQTRCLEtBQUssTUFBTCxDQUFZLEtBQXhDLEVBQStDLEtBQUssTUFBTCxDQUFZLE1BQTNELENBQWhCO0FBQ0EsWUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFqQjtBQUNEOztBQUdELFVBQUksS0FBSyxTQUFULEVBQW9CO0FBQ2xCLFlBQUksQ0FBQyxHQUFHLENBQVI7O0FBSUEsYUFBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxLQUFLLFNBQXpCLEVBQW9DLENBQUMsRUFBckMsRUFBeUM7QUFDdkMsY0FBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFMLENBQVo7QUFBQSxjQUFxQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFMLENBQTdCO0FBQUEsY0FBc0MsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBTCxDQUE5QztBQUVBLGVBQUssU0FBTCxDQUFlLENBQWYsSUFBcUIsQ0FBQyxHQUFHLENBQUosR0FBUSxDQUFSLEdBQVksQ0FBWixHQUFnQixDQUFoQixHQUFvQixDQUFwQixHQUF3QixDQUF4QixHQUE0QixDQUE3QixJQUFtQyxDQUF2RDtBQUNBLFdBQUMsSUFBSSxDQUFMO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJLEtBQUssUUFBVCxFQUFtQjtBQUNqQixhQUFLLFFBQUwsQ0FBYyxHQUFkLENBQWtCLElBQWxCO0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsYUFBTyxLQUFQO0FBQ0Q7Ozs7c01BdHBCRCxrQkFBaUMsS0FBakMsRUFBZ0QsTUFBaEQsRUFBZ0UsV0FBaEUsRUFBcUYsT0FBckY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRVEsK0JBRlIsR0FFMEIsSUFBSSxlQUFKLENBQW9CLEtBQXBCLEVBQTJCLE1BQTNCLEVBQW1DLFdBQW5DLEVBQWdELE9BQWhELENBRjFCO0FBQUE7QUFBQSx1QkFHZSxlQUFlLENBQUMsV0FBaEIsRUFIZjs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE87Ozs7Ozs7Ozs7O2lNQU1BLGtCQUE0QixLQUE1QixFQUE2QyxXQUE3QyxFQUFrRSxPQUFsRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDUSxxQkFEUixHQUNnQixLQUFLLENBQUMsVUFBTixJQUFvQixLQUFLLENBQUMsS0FEMUM7QUFFUSxzQkFGUixHQUVpQixLQUFLLENBQUMsV0FBTixJQUFxQixLQUFLLENBQUMsTUFGNUM7QUFHUSwrQkFIUixHQUcwQixJQUFJLGVBQUosQ0FBb0IsS0FBcEIsRUFBMkIsTUFBM0IsRUFBbUMsV0FBbkMsRUFBZ0QsT0FBaEQsQ0FIMUI7QUFJRSwrQkFBZSxDQUFDLEtBQWhCLEdBQXdCLEtBQXhCO0FBSkY7QUFBQSx1QkFLZSxlQUFlLENBQUMsV0FBaEIsRUFMZjs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlMRjtBQUNBO0FBRUEsSUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUF4QjtBQUNBLElBQU0sVUFBVSxHQUFHLENBQW5COztJQWlCcUIsWTtBQXdEbkI7QUFBQTs7QUFFRSxTQUFLLFFBQUw7QUFDQSxTQUFLLGNBQUwsR0FBc0IsQ0FBdEI7QUFDQSxTQUFLLFdBQUwsR0FBbUIsQ0FBbkI7QUFDQSxTQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsV0FBTyxDQUFDLElBQVIsQ0FBYSxlQUFiLEVBQThCLEtBQUssT0FBbkM7QUFDRDs7Ozs7d0xBVU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFDb0MsOERBQXdCLFVBQUMsR0FBRCxFQUFnQjtBQUMvRSx5QkFBTyxDQUFDLEdBQVIsQ0FBWSxHQUFaO0FBQ0EseUJBQU8sT0FBTyxDQUFDLE1BQVIsQ0FBZSxHQUFmLENBQVA7QUFDRCxpQkFId0MsRUFHdEMsSUFIc0MsQ0FHakMsVUFBQyxPQUFELEVBQWlCO0FBQ3ZCLHlCQUFPLE9BQVA7QUFDRCxpQkFMd0MsQ0FEcEM7O0FBQUE7QUFDRSx1QkFERjtBQVFMLHFCQUFLLFFBQUwsR0FBZ0IsT0FBTyxDQUFDLFFBQXhCOztBQUVBLHFCQUFLLFNBQUw7O0FBRUkscUJBWkMsR0FZUSxPQUFPLE1BQVAsS0FBa0IsV0FBbkIsR0FBa0MsTUFBbEMsR0FBMkMscUJBWmxEO0FBYUwscUJBQUssQ0FBQyxZQUFOLEdBQXFCLElBQXJCO0FBYkssaURBZUUsSUFmRjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPOzs7Ozs7Ozs7O1dBd0JDLHFCQUFTO0FBQUE7O0FBRWYsT0FDRSxPQURGLEVBRUUsVUFGRixFQUlFLFVBSkYsRUFNRSxhQU5GLEVBT0UsYUFQRixFQVNFLGNBVEYsRUFVRSxjQVZGLEVBWUUsb0JBWkYsRUFjRSxjQWRGLEVBZUUsaUJBZkYsRUFnQkUsY0FoQkYsRUFpQkUsWUFqQkYsRUFtQkUsYUFuQkYsRUFvQkUsZUFwQkYsRUFzQkUsd0JBdEJGLEVBdUJFLHdCQXZCRixFQXlCRSx1QkF6QkYsRUEwQkUsdUJBMUJGLEVBNEJFLGtCQTVCRixFQTZCRSxrQkE3QkYsRUErQkUsY0EvQkYsRUFnQ0UsY0FoQ0YsRUFrQ0Usa0JBbENGLEVBbUNFLGtCQW5DRixFQXFDRSxZQXJDRixFQXNDRSxPQXRDRixDQXNDVSxnQkFBTSxFQUFHO0FBQ2pCLGFBQUksQ0FBQyxTQUFMLEdBQWlCLE1BQWpCLElBQTJCLEtBQUksQ0FBQyxRQUFMLENBQWMsTUFBZCxDQUEzQjtBQUNELE9BeENEOztBQTJDQSxXQUFLLElBQU0sRUFBWCxJQUFpQixLQUFLLFFBQXRCLEVBQWdDO0FBQzlCLFlBQUksRUFBRSxDQUFDLEtBQUgsQ0FBUyxLQUFULENBQUosRUFBcUI7QUFDbkIsZUFBSyxTQUFMLEdBQWlCLEVBQWpCLElBQXVCLEtBQUssUUFBTCxDQUFjLEVBQWQsQ0FBdkI7QUFDRDtBQUNGO0FBQ0Y7OztXQU1PLHFCQUFTO0FBQ2YsYUFBTyxJQUFQO0FBQ0Q7Ozs7OExBV00sa0JBQWtCLFNBQWxCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNDLHNCQURELEdBQ1UsbUJBQW1CLEtBQUssV0FBTCxFQUQ3Qjs7QUFBQSxzQkFLRCxTQUFTLFlBQVksVUFMcEI7QUFBQTtBQUFBO0FBQUE7O0FBT0gsb0JBQUksR0FBRyxTQUFQO0FBUEc7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFVZ0IsNERBQXNCLFNBQXRCLENBVmhCOztBQUFBO0FBVUcsb0JBVkg7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBYUwscUJBQUssY0FBTCxDQUFvQixJQUFwQixFQUEwQixNQUExQjs7QUFiSyxrREFnQkUsS0FBSyxRQUFMLENBQWMsV0FBZCxDQUEwQixNQUExQixDQWhCRjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPOzs7Ozs7Ozs7O1dBMkJBLHVCQUFjLElBQWQsRUFBNEIsSUFBNUIsRUFBaUQsUUFBakQsRUFBb0YsUUFBcEYsRUFBeUg7QUFBQTs7QUFDOUgsVUFBSSxRQUFRLEdBQVEsRUFBcEI7QUFDQSxVQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTCxHQUFjLENBQTVCOztBQUNBLFVBQUksU0FBUyxHQUFHLFNBQVosU0FBWSxDQUFDLFFBQUQsRUFBa0I7QUFDOUIsZUFBTyxJQUFJLENBQVg7O0FBQ0EsWUFBSSxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDZixjQUFNLEdBQUcsR0FBRyxJQUFJLE1BQUksQ0FBQyxRQUFMLENBQWMsVUFBbEIsRUFBWjtBQUNBLGNBQU0sU0FBUyxHQUFHLEVBQWxCOztBQUNBLGVBQUssSUFBSSxFQUFDLEdBQUcsQ0FBYixFQUFnQixFQUFDLEdBQUcsUUFBUSxDQUFDLE1BQTdCLEVBQXFDLEVBQUMsRUFBdEMsRUFBMEM7QUFDdEMsZUFBRyxDQUFDLFNBQUosQ0FBYyxRQUFRLENBQUMsRUFBRCxDQUF0QjtBQUNIOztBQUNELGNBQUksR0FBRyxHQUFHLE1BQUksQ0FBQyxRQUFMLENBQWMsY0FBZCxDQUE2QixJQUE3QixFQUFtQyxHQUFuQyxDQUFWOztBQUNBLGVBQUssSUFBSSxHQUFDLEdBQUcsQ0FBYixFQUFnQixHQUFDLEdBQUcsR0FBRyxDQUFDLElBQUosRUFBcEIsRUFBZ0MsR0FBQyxFQUFqQyxFQUFxQztBQUNqQyxxQkFBUyxDQUFDLElBQVYsQ0FBZSxHQUFHLENBQUMsR0FBSixDQUFRLEdBQVIsQ0FBZjtBQUNIOztBQUVELGlCQUFPLENBQUMsR0FBUixDQUFZLHNCQUFaLEVBQW9DLFNBQXBDO0FBQ0EsY0FBSSxRQUFKLEVBQWMsUUFBUSxDQUFDLFNBQUQsQ0FBUjtBQUNqQjtBQUNKLE9BaEJEOztBQWlCQSxVQUFJLE9BQU8sR0FBRyxTQUFWLE9BQVUsQ0FBRSxRQUFGLEVBQWlCLFdBQWpCLEVBQXNDO0FBQ2hELGVBQU8sQ0FBQyxHQUFSLENBQVksa0JBQVosRUFBZ0MsUUFBaEM7QUFDQSxnQkFBUSxDQUFDLFdBQUQsQ0FBUjtBQUNILE9BSEQ7O0FBS0EsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBekIsRUFBaUMsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQyxZQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBRCxDQUFkO0FBQ0EsWUFBSSxNQUFNLEdBQUcsZ0JBQWdCLEtBQUssY0FBbEM7QUFDQSxnQkFBUSxDQUFDLElBQVQsQ0FBYyxNQUFkO0FBQ0EsWUFBSSxTQUFTLEdBQUcsTUFBTSxHQUFHLE9BQXpCO0FBQ0EsWUFBSSxTQUFTLEdBQUcsTUFBTSxHQUFHLE9BQXpCO0FBQ0EsWUFBSSxTQUFTLEdBQUcsTUFBTSxHQUFHLFFBQXpCO0FBRUEsYUFBSyxJQUFMLENBQVUsR0FBRyxHQUFHLE9BQWhCLEVBQXlCLFNBQXpCLEVBQW9DLFNBQVMsQ0FBQyxJQUFWLENBQWUsU0FBZixDQUFwQyxFQUErRCxPQUFPLENBQUMsSUFBUixDQUFhLFNBQWIsQ0FBL0Q7QUFDQSxhQUFLLElBQUwsQ0FBVSxHQUFHLEdBQUcsT0FBaEIsRUFBeUIsU0FBekIsRUFBb0MsU0FBUyxDQUFDLElBQVYsQ0FBZSxTQUFmLENBQXBDLEVBQStELE9BQU8sQ0FBQyxJQUFSLENBQWEsU0FBYixDQUEvRDtBQUNBLGFBQUssSUFBTCxDQUFVLEdBQUcsR0FBRyxRQUFoQixFQUEwQixTQUExQixFQUFxQyxTQUFTLENBQUMsSUFBVixDQUFlLFNBQWYsQ0FBckMsRUFBZ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxTQUFiLENBQWhFO0FBQ0EsYUFBSyxjQUFMLElBQXVCLENBQXZCO0FBQ0g7O0FBQ0QsVUFBSSxHQUFHLEdBQVEsRUFBZjs7QUFFQSxXQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUF6QixFQUFpQyxFQUFFLENBQW5DLEVBQXNDO0FBQ3BDLFdBQUcsQ0FBQyxJQUFKLENBQVMsQ0FBVDtBQUNEOztBQUVELGFBQU8sR0FBUDtBQUNEOzs7V0FTTyx3QkFBZ0IsSUFBaEIsRUFBa0MsTUFBbEMsRUFBZ0Q7QUFHdEQsV0FBSyxRQUFMLENBQWMsRUFBZCxDQUFpQixTQUFqQixDQUEyQixNQUEzQixFQUFtQyxJQUFuQyxFQUF5QztBQUN2QyxnQkFBUSxFQUFFO0FBRDZCLE9BQXpDO0FBR0Q7OztXQVNPLGNBQUssR0FBTCxFQUFrQixNQUFsQixFQUFrQyxRQUFsQyxFQUE2RSxhQUE3RSxFQUFrSDtBQUFBOztBQUN4SCxVQUFJLElBQUksR0FBRyxJQUFJLGNBQUosRUFBWDtBQUNJLFVBQUksQ0FBQyxJQUFMLENBQVUsS0FBVixFQUFpQixHQUFqQixFQUFzQixJQUF0QjtBQUNBLFVBQUksQ0FBQyxZQUFMLEdBQW9CLGFBQXBCOztBQUNBLFVBQU0sa0JBQWtCLEdBQUcsU0FBckIsa0JBQXFCLENBQUMsTUFBRCxFQUFpQixTQUFqQixFQUF3QyxRQUF4QyxFQUFxRjtBQUM5RyxjQUFJLENBQUMsUUFBTCxDQUFjLEVBQWQsQ0FBaUIsU0FBakIsQ0FBMkIsTUFBM0IsRUFBbUMsU0FBbkMsRUFBOEM7QUFBRSxrQkFBUSxFQUFFO0FBQVosU0FBOUM7O0FBQ0EsZ0JBQVEsQ0FBQyxTQUFELENBQVI7QUFDRCxPQUhEOztBQUtBLFVBQUksQ0FBQyxNQUFMLEdBQWM7QUFDVixZQUFJLEtBQUssTUFBTCxJQUFlLEdBQW5CLEVBQXdCO0FBQ3BCLGNBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxRQUF2QjtBQUNBLGNBQUksU0FBUyxHQUFHLElBQUksVUFBSixDQUFlLFdBQWYsQ0FBaEI7QUFDQSw0QkFBa0IsQ0FBQyxNQUFELEVBQVMsU0FBVCxFQUFvQixRQUFwQixDQUFsQjtBQUNILFNBSkQsTUFLSztBQUNELHVCQUFhLENBQUMsS0FBSyxNQUFOLENBQWI7QUFDSDtBQUNKLE9BVEQ7O0FBV0EsVUFBSSxDQUFDLElBQUw7QUFDTDs7O1NBMVJELGVBQXlCO0FBQU0sYUFBTyxjQUFQO0FBQXVCOzs7U0FDdEQsZUFBcUI7QUFBTSxhQUFPLFVBQVA7QUFBbUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2QmhEO0FBRUEsSUFBTSxZQUFZLEdBQUc7QUFDbkIsTUFBSSxFQUFFLElBQUksT0FBSixDQUFvQixpQkFBTyxFQUFHO0FBQ2hDLHlFQUFNLENBQUM7QUFDTCwwQkFESyxrQ0FDZTtBQUdsQixlQUFPLENBQUM7QUFBRSxrQkFBUSxFQUFFO0FBQVosU0FBRCxDQUFQO0FBQ0Q7QUFMSSxLQUFELENBQU47QUFPSCxHQVJLO0FBRGEsQ0FBckI7QUFZQSxpRUFBZSxZQUFmLEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDZEE7O0lBRXFCLEs7Ozs7Ozs7O21NQUNuQixpQkFBOEIsR0FBOUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUVnQyxpREFBVSxHQUFWLEVBQWU7QUFBRSw4QkFBWSxFQUFFO0FBQWhCLGlCQUFmLENBRmhDOztBQUFBO0FBRVUsd0JBRlY7QUFBQSxpREFHVyxJQUFJLFVBQUosQ0FBZSxRQUFRLENBQUMsSUFBeEIsQ0FIWDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPOzs7Ozs7Ozs7OzsyTUFTQSxrQkFBc0MsR0FBdEMsRUFBbUQsUUFBbkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUVnQyxpREFBVSxHQUFWLEVBQWU7QUFBRSw4QkFBWSxFQUFFO0FBQWhCLGlCQUFmLEVBQzNCLElBRDJCLENBQ3RCLFVBQUMsUUFBRCxFQUFrQjtBQUN0QixzQkFBTSxJQUFJLEdBQUcsSUFBSSxVQUFKLENBQWUsUUFBUSxDQUFDLElBQXhCLENBQWI7QUFDQSx5QkFBTyxDQUFDLEdBQVIsQ0FBWSxJQUFaO0FBQ0EsMEJBQVEsQ0FBQyxRQUFELENBQVI7QUFDRCxpQkFMMkIsQ0FGaEM7O0FBQUE7QUFFVSx3QkFGVjtBQUFBLGtEQVFXLFFBUlg7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTzs7Ozs7Ozs7OztXQWNBLDBCQUF5QixNQUF6QixFQUF1QztBQUNyQyxVQUFNLElBQUksR0FBRyxJQUFJLFVBQUosQ0FBZSxNQUFNLENBQUMsTUFBdEIsQ0FBYjs7QUFDQSxXQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUF6QixFQUFpQyxDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDLFlBQUksQ0FBQyxDQUFELENBQUosR0FBVSxNQUFNLENBQUMsVUFBUCxDQUFrQixDQUFsQixJQUF1QixJQUFqQztBQUNEOztBQUNELGFBQU8sSUFBUDtBQUNEOzs7Ozs7Ozs7Ozs7Ozs7O0FDbkVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUs7QUFDTCxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEtBQTBCLG9CQUFvQixDQUFFO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUMzdUJBLGU7Ozs7Ozs7Ozs7QUNBQSxlOzs7Ozs7Ozs7O0FDQUEsZTs7Ozs7O1VDQUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGdDQUFnQyxZQUFZO1dBQzVDO1dBQ0EsRTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHdDQUF3Qyx5Q0FBeUM7V0FDakY7V0FDQTtXQUNBLEU7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSxFQUFFO1dBQ0Y7V0FDQTtXQUNBLENBQUMsSTs7Ozs7V0NQRCx3Rjs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSxzREFBc0Qsa0JBQWtCO1dBQ3hFO1dBQ0EsK0NBQStDLGNBQWM7V0FDN0QsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM2QkE7QUFDQTtBQUVBLGlFQUFlO0FBQ2IsY0FBWSxFQUFaLGtEQURhO0FBQ0MsaUJBQWUsRUFBZixxREFBZTtBQURoQixDQUFmLEUiLCJmaWxlIjoiQVJUb29sa2l0TkZULmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQVJUb29sa2l0TkZUXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkFSVG9vbGtpdE5GVFwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCJcbnZhciBNb2R1bGUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gJ3VuZGVmaW5lZCcpIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gIHJldHVybiAoXG5mdW5jdGlvbihNb2R1bGUpIHtcbiAgTW9kdWxlID0gTW9kdWxlIHx8IHt9O1xuXG52YXIgTW9kdWxlPXR5cGVvZiBNb2R1bGUhPT1cInVuZGVmaW5lZFwiP01vZHVsZTp7fTt2YXIgcmVhZHlQcm9taXNlUmVzb2x2ZSxyZWFkeVByb21pc2VSZWplY3Q7TW9kdWxlW1wicmVhZHlcIl09bmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3JlYWR5UHJvbWlzZVJlc29sdmU9cmVzb2x2ZTtyZWFkeVByb21pc2VSZWplY3Q9cmVqZWN0fSk7dmFyIG1vZHVsZU92ZXJyaWRlcz17fTt2YXIga2V5O2ZvcihrZXkgaW4gTW9kdWxlKXtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkoa2V5KSl7bW9kdWxlT3ZlcnJpZGVzW2tleV09TW9kdWxlW2tleV19fXZhciBhcmd1bWVudHNfPVtdO3ZhciB0aGlzUHJvZ3JhbT1cIi4vdGhpcy5wcm9ncmFtXCI7dmFyIHF1aXRfPWZ1bmN0aW9uKHN0YXR1cyx0b1Rocm93KXt0aHJvdyB0b1Rocm93fTt2YXIgRU5WSVJPTk1FTlRfSVNfV0VCPWZhbHNlO3ZhciBFTlZJUk9OTUVOVF9JU19XT1JLRVI9ZmFsc2U7dmFyIEVOVklST05NRU5UX0lTX05PREU9ZmFsc2U7dmFyIEVOVklST05NRU5UX0lTX1NIRUxMPWZhbHNlO0VOVklST05NRU5UX0lTX1dFQj10eXBlb2Ygd2luZG93PT09XCJvYmplY3RcIjtFTlZJUk9OTUVOVF9JU19XT1JLRVI9dHlwZW9mIGltcG9ydFNjcmlwdHM9PT1cImZ1bmN0aW9uXCI7RU5WSVJPTk1FTlRfSVNfTk9ERT10eXBlb2YgcHJvY2Vzcz09PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09PVwic3RyaW5nXCI7RU5WSVJPTk1FTlRfSVNfU0hFTEw9IUVOVklST05NRU5UX0lTX1dFQiYmIUVOVklST05NRU5UX0lTX05PREUmJiFFTlZJUk9OTUVOVF9JU19XT1JLRVI7dmFyIHNjcmlwdERpcmVjdG9yeT1cIlwiO2Z1bmN0aW9uIGxvY2F0ZUZpbGUocGF0aCl7aWYoTW9kdWxlW1wibG9jYXRlRmlsZVwiXSl7cmV0dXJuIE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0ocGF0aCxzY3JpcHREaXJlY3RvcnkpfXJldHVybiBzY3JpcHREaXJlY3RvcnkrcGF0aH12YXIgcmVhZF8scmVhZEFzeW5jLHJlYWRCaW5hcnksc2V0V2luZG93VGl0bGU7dmFyIG5vZGVGUzt2YXIgbm9kZVBhdGg7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtzY3JpcHREaXJlY3Rvcnk9cmVxdWlyZShcInBhdGhcIikuZGlybmFtZShzY3JpcHREaXJlY3RvcnkpK1wiL1wifWVsc2V7c2NyaXB0RGlyZWN0b3J5PV9fZGlybmFtZStcIi9cIn1yZWFkXz1mdW5jdGlvbiBzaGVsbF9yZWFkKGZpbGVuYW1lLGJpbmFyeSl7dmFyIHJldD10cnlQYXJzZUFzRGF0YVVSSShmaWxlbmFtZSk7aWYocmV0KXtyZXR1cm4gYmluYXJ5P3JldDpyZXQudG9TdHJpbmcoKX1pZighbm9kZUZTKW5vZGVGUz1yZXF1aXJlKFwiZnNcIik7aWYoIW5vZGVQYXRoKW5vZGVQYXRoPXJlcXVpcmUoXCJwYXRoXCIpO2ZpbGVuYW1lPW5vZGVQYXRoW1wibm9ybWFsaXplXCJdKGZpbGVuYW1lKTtyZXR1cm4gbm9kZUZTW1wicmVhZEZpbGVTeW5jXCJdKGZpbGVuYW1lLGJpbmFyeT9udWxsOlwidXRmOFwiKX07cmVhZEJpbmFyeT1mdW5jdGlvbiByZWFkQmluYXJ5KGZpbGVuYW1lKXt2YXIgcmV0PXJlYWRfKGZpbGVuYW1lLHRydWUpO2lmKCFyZXQuYnVmZmVyKXtyZXQ9bmV3IFVpbnQ4QXJyYXkocmV0KX1hc3NlcnQocmV0LmJ1ZmZlcik7cmV0dXJuIHJldH07aWYocHJvY2Vzc1tcImFyZ3ZcIl0ubGVuZ3RoPjEpe3RoaXNQcm9ncmFtPXByb2Nlc3NbXCJhcmd2XCJdWzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIil9YXJndW1lbnRzXz1wcm9jZXNzW1wiYXJndlwiXS5zbGljZSgyKTtwcm9jZXNzW1wib25cIl0oXCJ1bmNhdWdodEV4Y2VwdGlvblwiLGZ1bmN0aW9uKGV4KXtpZighKGV4IGluc3RhbmNlb2YgRXhpdFN0YXR1cykpe3Rocm93IGV4fX0pO3Byb2Nlc3NbXCJvblwiXShcInVuaGFuZGxlZFJlamVjdGlvblwiLGFib3J0KTtxdWl0Xz1mdW5jdGlvbihzdGF0dXMpe3Byb2Nlc3NbXCJleGl0XCJdKHN0YXR1cyl9O01vZHVsZVtcImluc3BlY3RcIl09ZnVuY3Rpb24oKXtyZXR1cm5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9fWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfU0hFTEwpe2lmKHR5cGVvZiByZWFkIT1cInVuZGVmaW5lZFwiKXtyZWFkXz1mdW5jdGlvbiBzaGVsbF9yZWFkKGYpe3ZhciBkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKGYpO2lmKGRhdGEpe3JldHVybiBpbnRBcnJheVRvU3RyaW5nKGRhdGEpfXJldHVybiByZWFkKGYpfX1yZWFkQmluYXJ5PWZ1bmN0aW9uIHJlYWRCaW5hcnkoZil7dmFyIGRhdGE7ZGF0YT10cnlQYXJzZUFzRGF0YVVSSShmKTtpZihkYXRhKXtyZXR1cm4gZGF0YX1pZih0eXBlb2YgcmVhZGJ1ZmZlcj09PVwiZnVuY3Rpb25cIil7cmV0dXJuIG5ldyBVaW50OEFycmF5KHJlYWRidWZmZXIoZikpfWRhdGE9cmVhZChmLFwiYmluYXJ5XCIpO2Fzc2VydCh0eXBlb2YgZGF0YT09PVwib2JqZWN0XCIpO3JldHVybiBkYXRhfTtpZih0eXBlb2Ygc2NyaXB0QXJncyE9XCJ1bmRlZmluZWRcIil7YXJndW1lbnRzXz1zY3JpcHRBcmdzfWVsc2UgaWYodHlwZW9mIGFyZ3VtZW50cyE9XCJ1bmRlZmluZWRcIil7YXJndW1lbnRzXz1hcmd1bWVudHN9aWYodHlwZW9mIHF1aXQ9PT1cImZ1bmN0aW9uXCIpe3F1aXRfPWZ1bmN0aW9uKHN0YXR1cyl7cXVpdChzdGF0dXMpfX1pZih0eXBlb2YgcHJpbnQhPT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgY29uc29sZT09PVwidW5kZWZpbmVkXCIpY29uc29sZT17fTtjb25zb2xlLmxvZz1wcmludDtjb25zb2xlLndhcm49Y29uc29sZS5lcnJvcj10eXBlb2YgcHJpbnRFcnIhPT1cInVuZGVmaW5lZFwiP3ByaW50RXJyOnByaW50fX1lbHNlIGlmKEVOVklST05NRU5UX0lTX1dFQnx8RU5WSVJPTk1FTlRfSVNfV09SS0VSKXtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3NjcmlwdERpcmVjdG9yeT1zZWxmLmxvY2F0aW9uLmhyZWZ9ZWxzZSBpZih0eXBlb2YgZG9jdW1lbnQhPT1cInVuZGVmaW5lZFwiJiZkb2N1bWVudC5jdXJyZW50U2NyaXB0KXtzY3JpcHREaXJlY3Rvcnk9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmN9aWYoX3NjcmlwdERpcil7c2NyaXB0RGlyZWN0b3J5PV9zY3JpcHREaXJ9aWYoc2NyaXB0RGlyZWN0b3J5LmluZGV4T2YoXCJibG9iOlwiKSE9PTApe3NjcmlwdERpcmVjdG9yeT1zY3JpcHREaXJlY3Rvcnkuc3Vic3RyKDAsc2NyaXB0RGlyZWN0b3J5Lmxhc3RJbmRleE9mKFwiL1wiKSsxKX1lbHNle3NjcmlwdERpcmVjdG9yeT1cIlwifXtyZWFkXz1mdW5jdGlvbih1cmwpe3RyeXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCxmYWxzZSk7eGhyLnNlbmQobnVsbCk7cmV0dXJuIHhoci5yZXNwb25zZVRleHR9Y2F0Y2goZXJyKXt2YXIgZGF0YT10cnlQYXJzZUFzRGF0YVVSSSh1cmwpO2lmKGRhdGEpe3JldHVybiBpbnRBcnJheVRvU3RyaW5nKGRhdGEpfXRocm93IGVycn19O2lmKEVOVklST05NRU5UX0lTX1dPUktFUil7cmVhZEJpbmFyeT1mdW5jdGlvbih1cmwpe3RyeXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCxmYWxzZSk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7eGhyLnNlbmQobnVsbCk7cmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZSl9Y2F0Y2goZXJyKXt2YXIgZGF0YT10cnlQYXJzZUFzRGF0YVVSSSh1cmwpO2lmKGRhdGEpe3JldHVybiBkYXRhfXRocm93IGVycn19fXJlYWRBc3luYz1mdW5jdGlvbih1cmwsb25sb2FkLG9uZXJyb3Ipe3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLHRydWUpO3hoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO3hoci5vbmxvYWQ9ZnVuY3Rpb24oKXtpZih4aHIuc3RhdHVzPT0yMDB8fHhoci5zdGF0dXM9PTAmJnhoci5yZXNwb25zZSl7b25sb2FkKHhoci5yZXNwb25zZSk7cmV0dXJufXZhciBkYXRhPXRyeVBhcnNlQXNEYXRhVVJJKHVybCk7aWYoZGF0YSl7b25sb2FkKGRhdGEuYnVmZmVyKTtyZXR1cm59b25lcnJvcigpfTt4aHIub25lcnJvcj1vbmVycm9yO3hoci5zZW5kKG51bGwpfX1zZXRXaW5kb3dUaXRsZT1mdW5jdGlvbih0aXRsZSl7ZG9jdW1lbnQudGl0bGU9dGl0bGV9fWVsc2V7fXZhciBvdXQ9TW9kdWxlW1wicHJpbnRcIl18fGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7dmFyIGVycj1Nb2R1bGVbXCJwcmludEVyclwiXXx8Y29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7Zm9yKGtleSBpbiBtb2R1bGVPdmVycmlkZXMpe2lmKG1vZHVsZU92ZXJyaWRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKXtNb2R1bGVba2V5XT1tb2R1bGVPdmVycmlkZXNba2V5XX19bW9kdWxlT3ZlcnJpZGVzPW51bGw7aWYoTW9kdWxlW1wiYXJndW1lbnRzXCJdKWFyZ3VtZW50c189TW9kdWxlW1wiYXJndW1lbnRzXCJdO2lmKE1vZHVsZVtcInRoaXNQcm9ncmFtXCJdKXRoaXNQcm9ncmFtPU1vZHVsZVtcInRoaXNQcm9ncmFtXCJdO2lmKE1vZHVsZVtcInF1aXRcIl0pcXVpdF89TW9kdWxlW1wicXVpdFwiXTt2YXIgU1RBQ0tfQUxJR049MTY7ZnVuY3Rpb24gYWxpZ25NZW1vcnkoc2l6ZSxmYWN0b3Ipe2lmKCFmYWN0b3IpZmFjdG9yPVNUQUNLX0FMSUdOO3JldHVybiBNYXRoLmNlaWwoc2l6ZS9mYWN0b3IpKmZhY3Rvcn12YXIgdGVtcFJldDA9MDt2YXIgc2V0VGVtcFJldDA9ZnVuY3Rpb24odmFsdWUpe3RlbXBSZXQwPXZhbHVlfTt2YXIgZ2V0VGVtcFJldDA9ZnVuY3Rpb24oKXtyZXR1cm4gdGVtcFJldDB9O3ZhciB3YXNtQmluYXJ5O2lmKE1vZHVsZVtcIndhc21CaW5hcnlcIl0pd2FzbUJpbmFyeT1Nb2R1bGVbXCJ3YXNtQmluYXJ5XCJdO3ZhciBub0V4aXRSdW50aW1lPU1vZHVsZVtcIm5vRXhpdFJ1bnRpbWVcIl18fHRydWU7aWYodHlwZW9mIFdlYkFzc2VtYmx5IT09XCJvYmplY3RcIil7YWJvcnQoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpfXZhciB3YXNtTWVtb3J5O3ZhciBBQk9SVD1mYWxzZTt2YXIgRVhJVFNUQVRVUztmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLHRleHQpe2lmKCFjb25kaXRpb24pe2Fib3J0KFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIrdGV4dCl9fXZhciBVVEY4RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPT1cInVuZGVmaW5lZFwiP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dW5kZWZpbmVkO2Z1bmN0aW9uIFVURjhBcnJheVRvU3RyaW5nKGhlYXAsaWR4LG1heEJ5dGVzVG9SZWFkKXt2YXIgZW5kSWR4PWlkeCttYXhCeXRlc1RvUmVhZDt2YXIgZW5kUHRyPWlkeDt3aGlsZShoZWFwW2VuZFB0cl0mJiEoZW5kUHRyPj1lbmRJZHgpKSsrZW5kUHRyO2lmKGVuZFB0ci1pZHg+MTYmJmhlYXAuc3ViYXJyYXkmJlVURjhEZWNvZGVyKXtyZXR1cm4gVVRGOERlY29kZXIuZGVjb2RlKGhlYXAuc3ViYXJyYXkoaWR4LGVuZFB0cikpfWVsc2V7dmFyIHN0cj1cIlwiO3doaWxlKGlkeDxlbmRQdHIpe3ZhciB1MD1oZWFwW2lkeCsrXTtpZighKHUwJjEyOCkpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7Y29udGludWV9dmFyIHUxPWhlYXBbaWR4KytdJjYzO2lmKCh1MCYyMjQpPT0xOTIpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgodTAmMzEpPDw2fHUxKTtjb250aW51ZX12YXIgdTI9aGVhcFtpZHgrK10mNjM7aWYoKHUwJjI0MCk9PTIyNCl7dTA9KHUwJjE1KTw8MTJ8dTE8PDZ8dTJ9ZWxzZXt1MD0odTAmNyk8PDE4fHUxPDwxMnx1Mjw8NnxoZWFwW2lkeCsrXSY2M31pZih1MDw2NTUzNil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKX1lbHNle3ZhciBjaD11MC02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfX19cmV0dXJuIHN0cn1mdW5jdGlvbiBVVEY4VG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXtyZXR1cm4gcHRyP1VURjhBcnJheVRvU3RyaW5nKEhFQVBVOCxwdHIsbWF4Qnl0ZXNUb1JlYWQpOlwiXCJ9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLGhlYXAsb3V0SWR4LG1heEJ5dGVzVG9Xcml0ZSl7aWYoIShtYXhCeXRlc1RvV3JpdGU+MCkpcmV0dXJuIDA7dmFyIHN0YXJ0SWR4PW91dElkeDt2YXIgZW5kSWR4PW91dElkeCttYXhCeXRlc1RvV3JpdGUtMTtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgdT1zdHIuY2hhckNvZGVBdChpKTtpZih1Pj01NTI5NiYmdTw9NTczNDMpe3ZhciB1MT1zdHIuY2hhckNvZGVBdCgrK2kpO3U9NjU1MzYrKCh1JjEwMjMpPDwxMCl8dTEmMTAyM31pZih1PD0xMjcpe2lmKG91dElkeD49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPXV9ZWxzZSBpZih1PD0yMDQ3KXtpZihvdXRJZHgrMT49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4KytdPTE5Mnx1Pj42O2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzfWVsc2UgaWYodTw9NjU1MzUpe2lmKG91dElkeCsyPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrK109MjI0fHU+PjEyO2hlYXBbb3V0SWR4KytdPTEyOHx1Pj42JjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzfWVsc2V7aWYob3V0SWR4KzM+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrXT0yNDB8dT4+MTg7aGVhcFtvdXRJZHgrK109MTI4fHU+PjEyJjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1Pj42JjYzO2hlYXBbb3V0SWR4KytdPTEyOHx1JjYzfX1oZWFwW291dElkeF09MDtyZXR1cm4gb3V0SWR4LXN0YXJ0SWR4fWZ1bmN0aW9uIHN0cmluZ1RvVVRGOChzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7cmV0dXJuIHN0cmluZ1RvVVRGOEFycmF5KHN0cixIRUFQVTgsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl9ZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEY4KHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl1PTY1NTM2KygodSYxMDIzKTw8MTApfHN0ci5jaGFyQ29kZUF0KCsraSkmMTAyMztpZih1PD0xMjcpKytsZW47ZWxzZSBpZih1PD0yMDQ3KWxlbis9MjtlbHNlIGlmKHU8PTY1NTM1KWxlbis9MztlbHNlIGxlbis9NH1yZXR1cm4gbGVufXZhciBVVEYxNkRlY29kZXI9dHlwZW9mIFRleHREZWNvZGVyIT09XCJ1bmRlZmluZWRcIj9uZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTp1bmRlZmluZWQ7ZnVuY3Rpb24gVVRGMTZUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3ZhciBlbmRQdHI9cHRyO3ZhciBpZHg9ZW5kUHRyPj4xO3ZhciBtYXhJZHg9aWR4K21heEJ5dGVzVG9SZWFkLzI7d2hpbGUoIShpZHg+PW1heElkeCkmJkhFQVBVMTZbaWR4XSkrK2lkeDtlbmRQdHI9aWR4PDwxO2lmKGVuZFB0ci1wdHI+MzImJlVURjE2RGVjb2Rlcil7cmV0dXJuIFVURjE2RGVjb2Rlci5kZWNvZGUoSEVBUFU4LnN1YmFycmF5KHB0cixlbmRQdHIpKX1lbHNle3ZhciBzdHI9XCJcIjtmb3IodmFyIGk9MDshKGk+PW1heEJ5dGVzVG9SZWFkLzIpOysraSl7dmFyIGNvZGVVbml0PUhFQVAxNltwdHIraSoyPj4xXTtpZihjb2RlVW5pdD09MClicmVhaztzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVVuaXQpfXJldHVybiBzdHJ9fWZ1bmN0aW9uIHN0cmluZ1RvVVRGMTYoc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpe2lmKG1heEJ5dGVzVG9Xcml0ZT09PXVuZGVmaW5lZCl7bWF4Qnl0ZXNUb1dyaXRlPTIxNDc0ODM2NDd9aWYobWF4Qnl0ZXNUb1dyaXRlPDIpcmV0dXJuIDA7bWF4Qnl0ZXNUb1dyaXRlLT0yO3ZhciBzdGFydFB0cj1vdXRQdHI7dmFyIG51bUNoYXJzVG9Xcml0ZT1tYXhCeXRlc1RvV3JpdGU8c3RyLmxlbmd0aCoyP21heEJ5dGVzVG9Xcml0ZS8yOnN0ci5sZW5ndGg7Zm9yKHZhciBpPTA7aTxudW1DaGFyc1RvV3JpdGU7KytpKXt2YXIgY29kZVVuaXQ9c3RyLmNoYXJDb2RlQXQoaSk7SEVBUDE2W291dFB0cj4+MV09Y29kZVVuaXQ7b3V0UHRyKz0yfUhFQVAxNltvdXRQdHI+PjFdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjE2KHN0cil7cmV0dXJuIHN0ci5sZW5ndGgqMn1mdW5jdGlvbiBVVEYzMlRvU3RyaW5nKHB0cixtYXhCeXRlc1RvUmVhZCl7dmFyIGk9MDt2YXIgc3RyPVwiXCI7d2hpbGUoIShpPj1tYXhCeXRlc1RvUmVhZC80KSl7dmFyIHV0ZjMyPUhFQVAzMltwdHIraSo0Pj4yXTtpZih1dGYzMj09MClicmVhazsrK2k7aWYodXRmMzI+PTY1NTM2KXt2YXIgY2g9dXRmMzItNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKX1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1dGYzMil9fXJldHVybiBzdHJ9ZnVuY3Rpb24gc3RyaW5nVG9VVEYzMihzdHIsb3V0UHRyLG1heEJ5dGVzVG9Xcml0ZSl7aWYobWF4Qnl0ZXNUb1dyaXRlPT09dW5kZWZpbmVkKXttYXhCeXRlc1RvV3JpdGU9MjE0NzQ4MzY0N31pZihtYXhCeXRlc1RvV3JpdGU8NClyZXR1cm4gMDt2YXIgc3RhcnRQdHI9b3V0UHRyO3ZhciBlbmRQdHI9c3RhcnRQdHIrbWF4Qnl0ZXNUb1dyaXRlLTQ7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGNvZGVVbml0PXN0ci5jaGFyQ29kZUF0KGkpO2lmKGNvZGVVbml0Pj01NTI5NiYmY29kZVVuaXQ8PTU3MzQzKXt2YXIgdHJhaWxTdXJyb2dhdGU9c3RyLmNoYXJDb2RlQXQoKytpKTtjb2RlVW5pdD02NTUzNisoKGNvZGVVbml0JjEwMjMpPDwxMCl8dHJhaWxTdXJyb2dhdGUmMTAyM31IRUFQMzJbb3V0UHRyPj4yXT1jb2RlVW5pdDtvdXRQdHIrPTQ7aWYob3V0UHRyKzQ+ZW5kUHRyKWJyZWFrfUhFQVAzMltvdXRQdHI+PjJdPTA7cmV0dXJuIG91dFB0ci1zdGFydFB0cn1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjMyKHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjb2RlVW5pdD1zdHIuY2hhckNvZGVBdChpKTtpZihjb2RlVW5pdD49NTUyOTYmJmNvZGVVbml0PD01NzM0MykrK2k7bGVuKz00fXJldHVybiBsZW59ZnVuY3Rpb24gYWxsb2NhdGVVVEY4KHN0cil7dmFyIHNpemU9bGVuZ3RoQnl0ZXNVVEY4KHN0cikrMTt2YXIgcmV0PV9tYWxsb2Moc2l6ZSk7aWYocmV0KXN0cmluZ1RvVVRGOEFycmF5KHN0cixIRUFQOCxyZXQsc2l6ZSk7cmV0dXJuIHJldH1mdW5jdGlvbiB3cml0ZUFycmF5VG9NZW1vcnkoYXJyYXksYnVmZmVyKXtIRUFQOC5zZXQoYXJyYXksYnVmZmVyKX1mdW5jdGlvbiB3cml0ZUFzY2lpVG9NZW1vcnkoc3RyLGJ1ZmZlcixkb250QWRkTnVsbCl7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7SEVBUDhbYnVmZmVyKys+PjBdPXN0ci5jaGFyQ29kZUF0KGkpfWlmKCFkb250QWRkTnVsbClIRUFQOFtidWZmZXI+PjBdPTB9ZnVuY3Rpb24gYWxpZ25VcCh4LG11bHRpcGxlKXtpZih4JW11bHRpcGxlPjApe3grPW11bHRpcGxlLXglbXVsdGlwbGV9cmV0dXJuIHh9dmFyIGJ1ZmZlcixIRUFQOCxIRUFQVTgsSEVBUDE2LEhFQVBVMTYsSEVBUDMyLEhFQVBVMzIsSEVBUEYzMixIRUFQRjY0O2Z1bmN0aW9uIHVwZGF0ZUdsb2JhbEJ1ZmZlckFuZFZpZXdzKGJ1Zil7YnVmZmVyPWJ1ZjtNb2R1bGVbXCJIRUFQOFwiXT1IRUFQOD1uZXcgSW50OEFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUDE2XCJdPUhFQVAxNj1uZXcgSW50MTZBcnJheShidWYpO01vZHVsZVtcIkhFQVAzMlwiXT1IRUFQMzI9bmV3IEludDMyQXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQVThcIl09SEVBUFU4PW5ldyBVaW50OEFycmF5KGJ1Zik7TW9kdWxlW1wiSEVBUFUxNlwiXT1IRUFQVTE2PW5ldyBVaW50MTZBcnJheShidWYpO01vZHVsZVtcIkhFQVBVMzJcIl09SEVBUFUzMj1uZXcgVWludDMyQXJyYXkoYnVmKTtNb2R1bGVbXCJIRUFQRjMyXCJdPUhFQVBGMzI9bmV3IEZsb2F0MzJBcnJheShidWYpO01vZHVsZVtcIkhFQVBGNjRcIl09SEVBUEY2ND1uZXcgRmxvYXQ2NEFycmF5KGJ1Zil9dmFyIElOSVRJQUxfTUVNT1JZPU1vZHVsZVtcIklOSVRJQUxfTUVNT1JZXCJdfHwyNjg0MzU0NTY7dmFyIHdhc21UYWJsZTt2YXIgX19BVFBSRVJVTl9fPVtdO3ZhciBfX0FUSU5JVF9fPVtdO3ZhciBfX0FUUE9TVFJVTl9fPVtdO3ZhciBydW50aW1lSW5pdGlhbGl6ZWQ9ZmFsc2U7dmFyIHJ1bnRpbWVFeGl0ZWQ9ZmFsc2U7ZnVuY3Rpb24gcHJlUnVuKCl7aWYoTW9kdWxlW1wicHJlUnVuXCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicHJlUnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicHJlUnVuXCJdPVtNb2R1bGVbXCJwcmVSdW5cIl1dO3doaWxlKE1vZHVsZVtcInByZVJ1blwiXS5sZW5ndGgpe2FkZE9uUHJlUnVuKE1vZHVsZVtcInByZVJ1blwiXS5zaGlmdCgpKX19Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBSRVJVTl9fKX1mdW5jdGlvbiBpbml0UnVudGltZSgpe3J1bnRpbWVJbml0aWFsaXplZD10cnVlO2lmKCFNb2R1bGVbXCJub0ZTSW5pdFwiXSYmIUZTLmluaXQuaW5pdGlhbGl6ZWQpRlMuaW5pdCgpO1RUWS5pbml0KCk7Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVElOSVRfXyl9ZnVuY3Rpb24gZXhpdFJ1bnRpbWUoKXtydW50aW1lRXhpdGVkPXRydWV9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKE1vZHVsZVtcInBvc3RSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwb3N0UnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicG9zdFJ1blwiXT1bTW9kdWxlW1wicG9zdFJ1blwiXV07d2hpbGUoTW9kdWxlW1wicG9zdFJ1blwiXS5sZW5ndGgpe2FkZE9uUG9zdFJ1bihNb2R1bGVbXCJwb3N0UnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKX1mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uSW5pdChjYil7X19BVElOSVRfXy51bnNoaWZ0KGNiKX1mdW5jdGlvbiBhZGRPblBvc3RSdW4oY2Ipe19fQVRQT1NUUlVOX18udW5zaGlmdChjYil9dmFyIHJ1bkRlcGVuZGVuY2llcz0wO3ZhciBydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsO3ZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtmdW5jdGlvbiBnZXRVbmlxdWVSdW5EZXBlbmRlbmN5KGlkKXtyZXR1cm4gaWR9ZnVuY3Rpb24gYWRkUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzKys7aWYoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSl7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpfX1mdW5jdGlvbiByZW1vdmVSdW5EZXBlbmRlbmN5KGlkKXtydW5EZXBlbmRlbmNpZXMtLTtpZihNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKXtNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKHJ1bkRlcGVuZGVuY2llcyl9aWYocnVuRGVwZW5kZW5jaWVzPT0wKXtpZihydW5EZXBlbmRlbmN5V2F0Y2hlciE9PW51bGwpe2NsZWFySW50ZXJ2YWwocnVuRGVwZW5kZW5jeVdhdGNoZXIpO3J1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGx9aWYoZGVwZW5kZW5jaWVzRnVsZmlsbGVkKXt2YXIgY2FsbGJhY2s9ZGVwZW5kZW5jaWVzRnVsZmlsbGVkO2RlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2NhbGxiYWNrKCl9fX1Nb2R1bGVbXCJwcmVsb2FkZWRJbWFnZXNcIl09e307TW9kdWxlW1wicHJlbG9hZGVkQXVkaW9zXCJdPXt9O2Z1bmN0aW9uIGFib3J0KHdoYXQpe2lmKE1vZHVsZVtcIm9uQWJvcnRcIl0pe01vZHVsZVtcIm9uQWJvcnRcIl0od2hhdCl9d2hhdCs9XCJcIjtlcnIod2hhdCk7QUJPUlQ9dHJ1ZTtFWElUU1RBVFVTPTE7d2hhdD1cImFib3J0KFwiK3doYXQrXCIpLiBCdWlsZCB3aXRoIC1zIEFTU0VSVElPTlM9MSBmb3IgbW9yZSBpbmZvLlwiO3ZhciBlPW5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3Iod2hhdCk7cmVhZHlQcm9taXNlUmVqZWN0KGUpO3Rocm93IGV9dmFyIGRhdGFVUklQcmVmaXg9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCI7ZnVuY3Rpb24gaXNEYXRhVVJJKGZpbGVuYW1lKXtyZXR1cm4gZmlsZW5hbWUuc3RhcnRzV2l0aChkYXRhVVJJUHJlZml4KX1mdW5jdGlvbiBpc0ZpbGVVUkkoZmlsZW5hbWUpe3JldHVybiBmaWxlbmFtZS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKX12YXIgd2FzbUJpbmFyeUZpbGU9XCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsQUdGemJRRUFBQUFCNEFWYVlBRi9BWDlnQVg4QVlBSi9md0JnQW45L0FYOWdBMzkvZndGL1lBVi9mMzkvZndCZ0EzOS9md0JnQkg5L2YzOEFZQVovZjM5L2YzOEJmMkFFZjM5L2Z3Ri9ZQVYvZjM5L2Z3Ri9ZQVovZjM5L2YzOEFZQWQvZjM5L2YzOS9BR0FJZjM5L2YzOS9mMzhCZjJBQUFYOWdCMzkvZjM5L2YzOEJmMkFBQUdBQmZRRjlZQVYvZm41K2ZnQmdBMzkrZndGK1lBSi9mQUJnQlg5L2YzOStBWDlnQW4xOUFYMWdDSDkvZjM5L2YzOS9BR0FLZjM5L2YzOS9mMzkvZndGL1lBUi9mMzkvQVg1Z0EzOS9md0Y5WUFwL2YzOS9mMzkvZjM5L0FHQUVmMzUrZndCZ0IzOS9mMzkvZm40QmYyQUdmMzkvZjM1K0FYOWdBWDhCZkdBUGYzOS9mMzkvZjM5L2YzOS9mMzkvQUdBRmYzOStmMzhBWUFOL2YzMEFZQVYvZjMxOWZ3QmdBMzkvZkFCZ0NYOS9mMzkvZjM5L2Z3Ri9ZQXQvZjM5L2YzOS9mMzkvZndGL1lBeC9mMzkvZjM5L2YzOS9mMzhCZjJBRmYzOS9mM3dCZjJBR2YzOTlmWDkvQVg5Z0JYOTlmWDkvQVg5Z0JuOThmMzkvZndGL1lBRi9BWDFnQVh3QmZXQUNmMzhCZldBQmZBRjhZQUovZndGOFlBSjhmd0Y4WUExL2YzOS9mMzkvZjM5L2YzOS9BR0FHZjM5L2YzOTlBR0FFZjM5L2ZRQmdCWDkvZjMxOUFHQURmMzkrQUdBRWYzOStmZ0JnQW45K0FHQURmMzUvQUdBRGYzNStBR0FHZjN4OGYzOS9BR0FCZlFGL1lBeC9mMzkvZjM5L2YzOS9mSDhCZjJBT2YzOS9mMzkvZjM5L2YzeC9mMzhCZjJBSGYzOS9mM3gvZndGL1lBTi9mMzBCZjJBRmYzOTlmWDhCZjJBRWYzNS9md0YvWUFaL2ZYMTlmWDhCZjJBQ2ZuOEJmMkFEZm41K0FYOWdCSDUrZm40QmYyQUNmWDhCZjJBQ2ZIOEJmMkFCZndGK1lBSi9md0YrWUFSL2YzOStBWDVnQjM5L2YzOS9mMzhCZldBSGYzOS9mMzkvZlFGOVlBTi9mMzBCZldBRGYzMTlBWDFnQlg5OWZYOS9BWDFnQW41K0FYMWdBMzE5ZlFGOVlBUjlmWDE5QVgxZ0EzOS9md0Y4WUFKK2ZnRjhZQUo4ZkFGOFlBTjhmSDhCZkdBRGZIeDhBWHhnQm54OGZIeDhmQUY4QXEwQ01nRmhBV0VBRUFGaEFXSUFBUUZoQVdNQUFRRmhBV1FBRGdGaEFXVUFCZ0ZoQVdZQUN3RmhBV2NBRndGaEFXZ0FCUUZoQVdrQUJnRmhBV29BQUFGaEFXc0FBZ0ZoQVd3QUFnRmhBVzBBQlFGaEFXNEFCZ0ZoQVc4QUJBRmhBWEFBQ1FGaEFYRUFCQUZoQVhJQUFBRmhBWE1BQmdGaEFYUUFBZ0ZoQVhVQUF3RmhBWFlBQ3dGaEFYY0FKQUZoQVhnQU1nRmhBWGtBQXdGaEFYb0FBQUZoQVVFQUF3RmhBVUlBQkFGaEFVTUFCZ0ZoQVVRQUJ3RmhBVVVBQ2dGaEFVWUFEQUZoQVVjQUFBRmhBVWdBQ2dGaEFVa0FBd0ZoQVVvQUF3RmhBVXNBQXdGaEFVd0FDUUZoQVUwQUJBRmhBVTRBQkFGaEFVOEFBZ0ZoQVZBQUJRRmhBVkVBQWdGaEFWSUFBUUZoQVZNQUFRRmhBVlFBQVFGaEFWVUFHd0ZoQVZZQUN3RmhBVmNBQ1FGaEFWZ0FDUU9WQ3BNS0F3RUFBd0VBQndBQUJBTUFBQU1FQWdFQUFBRUFBazhBQWdBREF3QUFBd0FDQWc1UUxBQUdBd0FTQVFNSkFnQUJBUVFHQWdBQUNRNERBd0FSQVFBREtnTUJBUUFBQXdNQ0F3TVFBQUVEQXdRQUFnQUFBd1lIQUFJS0FBTURFQndBQXdNQkFnQURCUUlLQXdBQUFnSUNBQU1TQUFCVEF3QUNHZ0lFQUFFQ0FRWUVBZ0lFQXdRQUJEb0FBd0FDQUFFREF3QTRBQzB0QWdNREFCUWlCQUVBQUFrUUFnSUlDZ29KQmdZQUFBb0NHZ0FxRmdFTkRRZ0hCd1FBUHdZRUJnQUFBd1FEQVRFQUFnSUNBQWNBQXdGR0FBTUpBd01FTkNJQkF3TUdBd0lBQUFBQUFRSUFBQUFDQWdBQUdBQURBQUFDSEVRR1BCRUJBQUFEQWdJQUJBSUVCQVlCQXdBREJBRUFCd01DQkFJR0F3TVlCZ0VBQUFOV1Z3RUpLVTFNQXhZR0ZBUUFDUUVBQWdZR0FnSURBUUFERmdJakJBWURBZ0FBQUFBQkJnTVBBdzhBQXdFQUF3MENBZ0FEQUFJQUFnd0NDUUE1THdBTEF3Y0NBZ1lFQVM0R0NCWUNBUU1DQ1FZREF3SUJBZ01CQUFFQ0JBSUNBZ0pPQXdZRUFBSUdCZ01GUFFJQUFBSU1BZ1FNQXdRbkJRY1pBQUlCQVFBQkpRQUFBQUFBQWdJRFZSSkZCUU1QQkFBSkFBQXZCZ0FCQWdRQ0FBc0hBZ1VEQndFMUF3QUNBd2NHQVFBQUFRRUFNQUFDQWdBT0FBSUFBZ01BQUFCWkFGaFNBd0FFRndBQ0FRSUpJd01CQUFFQkFRSUNBZ0VDQ1FZREJBUUxCZ2NHQXdBQ0FnVUdBQUFFQ2dFQ0F3UW5CUkFFQjFRYUdRa0lDUmtKQmhsTEFBa0FBUU1BQXdBQUFnQUJBQUFBQXdBQUF3RUFBUUFBQnlFRUFBRUFBd0VOQXdNQkFVTUFCZ1lCQXdRQUNSSlJCZ0FIQWdRMlNnY2NFZ1lBQndFS01RTUJCa2tSQWtkSUNnRUJBUUVCQVJBQkFRRUJBUUVCQVFBQkJ3RURBQUUrQUFKQkNRSXBCQU1BQWdJQkFna0JBZ0VDQWd3YUFBQU9BZ0lJQWdjQUJ3QUJCZ2dBQVFJQ0FoRVJBUUVETGdFS0xBSVlBZ0FEQUFJQlFBTUNBRE1QQncwSEFRRUNDQXNEQUFJSkFBSUxBQWtCQkFFQ0FRSUVBUUlCQWdNT0F3RUFBUUlIQWdjRUJ3RUNBZ0lCQWdJREF3SUNBd0FDQWdJQkFnSUJBUUFHQVRzQ0F3UUFCQUVEQmdRRUFnSUpBZ0FBQkFJQ0FnRUNBZ0VDQVFBUkFnRUJBeFlSRVFJREFRTUJBZ0FDQUFFREFBWUFBZ0FCQWdrQ0JqY0JFZ0lEQXdjR0F3VVhCZ1lYQkFFRUFRSUdBUU1PQVFBQUFBb05Bd0FCQkFFQUFnRUJBQVFnR3lBYkF3QUFBaVlDUWdNQUFBWUNKZ0lDQWdzRkN3c0FCUXNMREFFRURBRURDQThDQ0FnSUNBZ0lDQWdJQ0FRSENnUUhDZ0VFQUFRQkJBQUVBUU1FQWdNRUFnTUFBQUlEQUFBQ0FRSUREZzRPQkFRVEFBSXJFd1FFQUFBRERnQUFBd01EQXdNREFRRU1Cd3dIQVFjSEJ3Y0hBZ0VBQVFFRkF3TURBd01CQVFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUUVDQVFJQkRBd01BZ2NCQndjQ0FRY0hCd0lCQVFNREFBTUJBUWNIQndjSEFRd0ZCUVVGQlFVRkJRVUpDUWdJQVFvS0FRUUFBQU1CQmdFQUFnSUFBUUFBQUFNRENRY0dDUWNHQmpBa0FBSUdBdzREQkFNRUF3a0VCZ0VBQkFZR0FnRUFCQUFBQWdBQUF3QUNBQUlmRkI4VUJnQUFEZ0VDQUFBREFRRURBUU1CQVFNREFRRUFBUUVCQUFBQUdDVVBEQW9CRGdzTEN3VUZCUVFIQndjRUJBRUJBQkFCQUFFQUFRQUJBQUVBQVFBQkFBRUFBUUFCQUFFQUFRQUJBQUVBQWdJQ0FnSUNBQUFCQVFvTkRRb05EUUFLQUFvTkRRRUtDZ1FKQkFNRUF3RUtCQWtFQXdRRENRa0pCQUVCQVFFTEN3Z2RDQUFkRHc4UER3OFBEUWdJQ0FnSURRZ0lDQWdJQ2g0b0ZRb1ZDZ29LSGlnVkNoVUtDZ2dJQ0FnSUNBZ0lCQWNCY0FIU0JOSUVCUWNCQVlBZ2dJQUNCZ2tCZndGQmdLM0VBZ3NIYXhNQldRSUFBVm9BdHdRQlh3QTZBU1FBTXdKaFlRRGpCd0ppWVFFQUFtTmhBT1VIQW1SaEFKUUZBbVZoQU5ZSEFtWmhBTlVIQW1kaEFOUUhBbWhoQUxnSkFtbGhBTGNKQW1waEFOSUhBbXRoQUxZSkFteGhBTFVKQW0xaEFMUUpBbTVoQUxNSkFtOWhBTElKQ1lRSkFRQkJBUXZSQktjSm5RV21DZDBJM2dqaUNOd0lPTm9JMndqWkNLZ0Vyd21oQnFvSmd3U3RDWVFFcmdtc0Nhc0o2d0ZjcVFtb0NmUURYS1VKcEFuMEExeWpDYUlKOUFPaENhQUppQW1aQ1owSmx3bVlDWWtKbmdtZkNad0pqZ21NQ1kwSm13bWFDWllKbFFtVUNaTUprQW1QQ1pJSmtRbUxDWW9KaHdtR0Nid0ZoUW1FQ1ZlRENZSUpnUW1BQ2J3RnJBTHdBMFAvQ1A0SS9RajhDUHNJK2dqNUNQZ0k5d2hjOWdqMUNQUUk4d2p5Q1BFSThBaXRCZThJN2dpc0Jhc0Y3UWl0QmV3STZ3aXNCYXNGNmdqcENPY0k1Z2psQ09RSTR3ajFBZWdJNFFqZ0NOOEkyQWpoQTljSTFnalZDTlFJMHdqU0NORUk0QU9HQXZVQjBBalBDTTRJelFqTUNNc0l5Z2pKQ01nSXh3akdDTVVJeEFqRENNSUl3UWpBQ0w4SXZnaTlDTHdJcEFHN0NMb0l1UWk0Q0xjSXRnaTFDTFFJc3dpeUNMRUk5UUd3Q0s4SXJnaXRDS3dJcXdpcUNLa0lxQWluQ0tZSWhBaWVDSjhJb0FpaENLSUlvd2lrQ0p3SW13aWFDSmtJbUFpWENKWUlsUWlVQ0pNSWtnaVJDSkFJandpT0NJMElqQWlMQ0lvSWlRaUlDSWNJaGdpZENLVUkvUWVGQ1BVQmd3aUNDSUVJZ0FqL0IvNEgvQWVaQmZzSCtnZjVCL1VCK0FmM0IvWUg5UWYwQi9NSDhnZnhCL0FIN3dmdUIrMEg3QWZyQitvSDZRZm9CK2NINWdma0I5MEgxd2ZmQjlvSDNnZmNCOXNIcEFIWkI5Z0gwUWZKQStnRTBBZmZCTjRFM1FTa0FhUUJ3UWZQQjg0SHpRZS9CL1lDeUFQa0JNd0gzd1RlQk4wRXBBR2tBYjBIeXdmS0I4a0h1d2YyQXVnRXlBZmlCTndFd0FmMkFzY0h4Z2ZrQk1VSDRnVGNCTHdIOWdMRUI4TUh3Z2Y5QXI0SC9RTDFBc1lEMlFUWUJQVUN4Z1BaQk5nRThnTERBOUVFMEFUeUFzTUQwUVRRQk1vRHVnZkZBdUVFeFFMaEJEUDFBWklLa0FyakNlRUozd25kQ2RzSjJRblhDZFVKMHduUkNjOEp6UW5MQ2NrSi93YVRDcEVLK3dhRUNvTUtnZ3FCQ29BS2dBYi9DZjRKL1FtREIvc0orZ241Q2ZnSjl3bWtBZllKOVFuMkJ1NEo3QW5yQ2VvSjZBbm1DZlVHN1Ftd0Naa0s2UW5uQ2VVSjZ3RmNYSThLamdxTkNvd0tpd3FLQ29rS2lBcUFCb2NLaGdxRkNsejVCdmtHc0FTVkJKVUUvQW1WQkZ6MENmTUpzQVNrQWFRQjhnbTdCVnp4Q2ZBSnNBU2tBYVFCN3dtN0Jlc0JYTGtIdUFlM0Irc0JYTFlIdFFlMEIxeXpCN0lIc1Fld0I3NEV2Z1N2QjY0SHJRZXNCNnNIWEtvSHhBckRDc0lLcHdlbkI4RUt3QXEvQ3I0S3ZRcGN2QXE3Q3JvS3VRcTRDcmNLdGdxMUNseTBDck1Lc2dxeENyQUtyd3F1Q3EwSzZ3RmN1Z1dzQ3FzS3FncXBDcWdLcHdya0NlQUozQW5RQ2N3SjJBblVDZXNCWExvRnBncWxDcVFLb3dxaUNxRUs0Z25lQ2RvSnpnbktDZFlKMGdtdEJQUUdvQXF0QlBRR253cGN0UU8xQTc0QnZnRytBWmNIcEFINkFmb0JYTFVEdFFPK0FiNEJ2Z0dYQjZRQitnSDZBVnkwQTdRRHZnRytBYjRCbGdla0Fmb0IrZ0ZjdEFPMEE3NEJ2Z0crQVpZSHBBSDZBZm9CWEo0S25RcGNuQXFiQ2x5YUNwZ0tYSmNLbGdwY2hBZVZDdjBDWElRSGxBcjlBdXdHeUFuc0J0TUg2d0ZjeHduR0NiRUp4UW5yQVZ6MUFmVUJ4QWxjd3dtNUNid0p3Z2xjdWdtOUNjRUpYTHNKdmduQUNWeS9DUXF6MHhtVENyRUJBUWQvSUFFUW5BRWhBeU1BUVNCcklnSWtBQUpBSUFKQkdHb2dBQkR6QWlJRUxRQUFSUTBBSUFKQkNHb2dBQkN6QkNFRklBQWdBQ2dDQUVFTWF5Z0NBR29vQWdRaEJpQUFJQUFvQWdCQkRHc29BZ0JxSWdjUW5RY2hDQ0FDSUFVb0FnQWdBU0FCSUFOcUlnTWdBU0FHUWJBQmNVRWdSaHNnQXlBSElBZ1ExZ0UyQWhBZ0FrRVFhaERyQWtVTkFDQUFJQUFvQWdCQkRHc29BZ0JxUVFVUXZnSUxJQVFReEFJZ0FrRWdhaVFBSUFBTHpBd0JCMzhDUUNBQVJRMEFJQUJCQ0dzaUF5QUFRUVJyS0FJQUlnRkJlSEVpQUdvaEJRSkFJQUZCQVhFTkFDQUJRUU54UlEwQklBTWdBeWdDQUNJQmF5SURRYUNwQkNnQ0FFa05BU0FBSUFGcUlRQWdBMEdrcVFRb0FnQkhCRUFnQVVIL0FVMEVRQ0FES0FJSUlnSWdBVUVEZGlJRVFRTjBRYmlwQkdwR0dpQUNJQU1vQWd3aUFVWUVRRUdRcVFSQmtLa0VLQUlBUVg0Z0JIZHhOZ0lBREFNTElBSWdBVFlDRENBQklBSTJBZ2dNQWdzZ0F5Z0NHQ0VHQWtBZ0F5QURLQUlNSWdGSEJFQWdBeWdDQ0NJQ0lBRTJBZ3dnQVNBQ05nSUlEQUVMQWtBZ0EwRVVhaUlDS0FJQUlnUU5BQ0FEUVJCcUlnSW9BZ0FpQkEwQVFRQWhBUXdCQ3dOQUlBSWhCeUFFSWdGQkZHb2lBaWdDQUNJRURRQWdBVUVRYWlFQ0lBRW9BaEFpQkEwQUN5QUhRUUEyQWdBTElBWkZEUUVDUUNBRElBTW9BaHdpQWtFQ2RFSEFxd1JxSWdRb0FnQkdCRUFnQkNBQk5nSUFJQUVOQVVHVXFRUkJsS2tFS0FJQVFYNGdBbmR4TmdJQURBTUxJQVpCRUVFVUlBWW9BaEFnQTBZYmFpQUJOZ0lBSUFGRkRRSUxJQUVnQmpZQ0dDQURLQUlRSWdJRVFDQUJJQUkyQWhBZ0FpQUJOZ0lZQ3lBREtBSVVJZ0pGRFFFZ0FTQUNOZ0lVSUFJZ0FUWUNHQXdCQ3lBRktBSUVJZ0ZCQTNGQkEwY05BRUdZcVFRZ0FEWUNBQ0FGSUFGQmZuRTJBZ1FnQXlBQVFRRnlOZ0lFSUFBZ0Eyb2dBRFlDQUE4TElBTWdCVThOQUNBRktBSUVJZ0ZCQVhGRkRRQUNRQ0FCUVFKeFJRUkFJQVZCcUtrRUtBSUFSZ1JBUWFpcEJDQUROZ0lBUVp5cEJFR2NxUVFvQWdBZ0FHb2lBRFlDQUNBRElBQkJBWEkyQWdRZ0EwR2txUVFvQWdCSERRTkJtS2tFUVFBMkFnQkJwS2tFUVFBMkFnQVBDeUFGUWFTcEJDZ0NBRVlFUUVHa3FRUWdBellDQUVHWXFRUkJtS2tFS0FJQUlBQnFJZ0EyQWdBZ0F5QUFRUUZ5TmdJRUlBQWdBMm9nQURZQ0FBOExJQUZCZUhFZ0FHb2hBQUpBSUFGQi93Rk5CRUFnQlNnQ0NDSUNJQUZCQTNZaUJFRURkRUc0cVFScVJob2dBaUFGS0FJTUlnRkdCRUJCa0trRVFaQ3BCQ2dDQUVGK0lBUjNjVFlDQUF3Q0N5QUNJQUUyQWd3Z0FTQUNOZ0lJREFFTElBVW9BaGdoQmdKQUlBVWdCU2dDRENJQlJ3UkFJQVVvQWdnaUFrR2dxUVFvQWdCSkdpQUNJQUUyQWd3Z0FTQUNOZ0lJREFFTEFrQWdCVUVVYWlJQ0tBSUFJZ1FOQUNBRlFSQnFJZ0lvQWdBaUJBMEFRUUFoQVF3QkN3TkFJQUloQnlBRUlnRkJGR29pQWlnQ0FDSUVEUUFnQVVFUWFpRUNJQUVvQWhBaUJBMEFDeUFIUVFBMkFnQUxJQVpGRFFBQ1FDQUZJQVVvQWh3aUFrRUNkRUhBcXdScUlnUW9BZ0JHQkVBZ0JDQUJOZ0lBSUFFTkFVR1VxUVJCbEtrRUtBSUFRWDRnQW5keE5nSUFEQUlMSUFaQkVFRVVJQVlvQWhBZ0JVWWJhaUFCTmdJQUlBRkZEUUVMSUFFZ0JqWUNHQ0FGS0FJUUlnSUVRQ0FCSUFJMkFoQWdBaUFCTmdJWUN5QUZLQUlVSWdKRkRRQWdBU0FDTmdJVUlBSWdBVFlDR0FzZ0F5QUFRUUZ5TmdJRUlBQWdBMm9nQURZQ0FDQURRYVNwQkNnQ0FFY05BVUdZcVFRZ0FEWUNBQThMSUFVZ0FVRitjVFlDQkNBRElBQkJBWEkyQWdRZ0FDQURhaUFBTmdJQUN5QUFRZjhCVFFSQUlBQkJBM1lpQVVFRGRFRzRxUVJxSVFBQ2YwR1FxUVFvQWdBaUFrRUJJQUYwSWdGeFJRUkFRWkNwQkNBQklBSnlOZ0lBSUFBTUFRc2dBQ2dDQ0FzaEFpQUFJQU0yQWdnZ0FpQUROZ0lNSUFNZ0FEWUNEQ0FESUFJMkFnZ1BDMEVmSVFJZ0EwSUFOd0lRSUFCQi8vLy9CMDBFUUNBQVFRaDJJZ0VnQVVHQS9qOXFRUkIyUVFoeElnRjBJZ0lnQWtHQTRCOXFRUkIyUVFSeElnSjBJZ1FnQkVHQWdBOXFRUkIyUVFKeElnUjBRUTkySUFFZ0FuSWdCSEpySWdGQkFYUWdBQ0FCUVJWcWRrRUJjWEpCSEdvaEFnc2dBeUFDTmdJY0lBSkJBblJCd0tzRWFpRUJBa0FDUUFKQVFaU3BCQ2dDQUNJRVFRRWdBblFpQjNGRkJFQkJsS2tFSUFRZ0IzSTJBZ0FnQVNBRE5nSUFJQU1nQVRZQ0dBd0JDeUFBUVFCQkdTQUNRUUYyYXlBQ1FSOUdHM1FoQWlBQktBSUFJUUVEUUNBQklnUW9BZ1JCZUhFZ0FFWU5BaUFDUVIxMklRRWdBa0VCZENFQ0lBUWdBVUVFY1dvaUIwRVFhaWdDQUNJQkRRQUxJQWNnQXpZQ0VDQURJQVEyQWhnTElBTWdBellDRENBRElBTTJBZ2dNQVFzZ0JDZ0NDQ0lBSUFNMkFnd2dCQ0FETmdJSUlBTkJBRFlDR0NBRElBUTJBZ3dnQXlBQU5nSUlDMEd3cVFSQnNLa0VLQUlBUVFGcklnQkJmeUFBR3pZQ0FBc0xCd0FnQUVFSWFndklBUUVHZnlNQVFTQnJJZ0lrQUFKQUlBSkJHR29nQUJEekFpSUVMUUFBUlEwQUlBQWdBQ2dDQUVFTWF5Z0NBR29vQWdRYUlBSkJFR29nQUNBQUtBSUFRUXhyS0FJQWFoQkhJQUpCRUdwQnJKa0VFTUlCSVFNZ0FrRVFhaEJDSUFKQkNHb2dBQkN6QkNFRklBQWdBQ2dDQUVFTWF5Z0NBR29pQmhDZEJ5RUhJQUlnQXlBRktBSUFJQVlnQnlBQklBTW9BZ0FvQWhBUkNnQTJBaEFnQWtFUWFoRHJBa1VOQUNBQUlBQW9BZ0JCREdzb0FnQnFRUVVRdmdJTElBUVF4QUlnQWtFZ2FpUUFJQUFMQ2dBZ0FFRU5FUUFBR2dzVkFDQUFFSXdCQkVBZ0FDZ0NCQThMSUFBdEFBc0wyQU1CQlg4akFFRVFheUlBSkFBQ1FDQUNSVUhBNndNb0FnQWdBVXB5RFFBZ0FpMEFBRVVOQUNBQUlBTTJBZ3dqQUVFUWF5SUZKQUFnQlNBRE5nSU1Ba0FnQWtWQndPc0RLQUlBSUFGS2NnMEFJQUl0QUFCRkRRQWdCU0FGS0FJTUlnTTJBZ2hCQUVFQUlBSWdBeENEQWlJR1JRMEFBbjhnQVVFRFRRUkFJQUZCQW5SQjhMRUJhaWdDQUJDY0FVRURhaUVFQ3lBRUlBWnFJZ2RCQVdvaUNBc1FPaUVESUFRRVFDQUZJQUZCQW5SQjhMRUJhaWdDQURZQ0FDQURJQVJCQVdwQmtDd2dCUkRZQXhvTElBTWdCR29nQmtFQmFpQUNJQVVvQWd3UWd3SWFBa0JCMFAwREtBSUFJZ0VFUUVIVS9RTW9BZ0JGQkVBZ0F5QUJFUUVBREFJTFFkajlBeWdDQUVINDdRTkhCRUJCM1AwREtBSUFJZ1JGRFFKQjVQMERLQUlBSWdGQmdDQkJBRUhnL1FNdEFBQWJJZ0pQRFFJZ0FTQUVhaUVFSUFJZ0FXdEJCR3NnQjA4RVFDQUVJQU1nQ0JEY0EwSGsvUU1nQVNBSGFqWUNBQXdEQ3lBRVFhN2N1QUUyQUFCQjVQMERJQUkyQWdBTUFndEI1UDBES0FJQUJFQkIzUDBES0FJQVFkRDlBeWdDQUJFQkFFSGsvUU5CQURZQ0FBc2dBMEhRL1FNb0FnQVJBUUFNQVF0QmpJQURLQUlBSVFFZ0EwRUJJQU1RbkFFZ0FSRFNBUm9MSUFNUU13c2dCVUVRYWlRQUN5QUFRUkJxSkFBTEh3RUJmeUFBRUl3QkJFQWdBQ2dDQUNFQklBQVFtZ0lhSUFFUU13c2dBQXVWTGdFTWZ5TUFRUkJySWd3a0FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQVFmUUJUUVJBUVpDcEJDZ0NBQ0lGUVJBZ0FFRUxha0Y0Y1NBQVFRdEpHeUlJUVFOMklnSjJJZ0ZCQTNFRVFDQUJRWDl6UVFGeElBSnFJZ05CQTNRaUFVSEFxUVJxS0FJQUlnUkJDR29oQUFKQUlBUW9BZ2dpQWlBQlFiaXBCR29pQVVZRVFFR1FxUVFnQlVGK0lBTjNjVFlDQUF3QkN5QUNJQUUyQWd3Z0FTQUNOZ0lJQ3lBRUlBTkJBM1FpQVVFRGNqWUNCQ0FCSUFScUlnRWdBU2dDQkVFQmNqWUNCQXdOQ3lBSVFaaXBCQ2dDQUNJS1RRMEJJQUVFUUFKQVFRSWdBblFpQUVFQUlBQnJjaUFCSUFKMGNTSUFRUUFnQUd0eFFRRnJJZ0FnQUVFTWRrRVFjU0lDZGlJQlFRVjJRUWh4SWdBZ0FuSWdBU0FBZGlJQlFRSjJRUVJ4SWdCeUlBRWdBSFlpQVVFQmRrRUNjU0lBY2lBQklBQjJJZ0ZCQVhaQkFYRWlBSElnQVNBQWRtb2lBMEVEZENJQVFjQ3BCR29vQWdBaUJDZ0NDQ0lCSUFCQnVLa0VhaUlBUmdSQVFaQ3BCQ0FGUVg0Z0EzZHhJZ1UyQWdBTUFRc2dBU0FBTmdJTUlBQWdBVFlDQ0FzZ0JFRUlhaUVBSUFRZ0NFRURjallDQkNBRUlBaHFJZ0lnQTBFRGRDSUJJQWhySWdOQkFYSTJBZ1FnQVNBRWFpQUROZ0lBSUFvRVFDQUtRUU4ySWdGQkEzUkJ1S2tFYWlFSFFhU3BCQ2dDQUNFRUFuOGdCVUVCSUFGMElnRnhSUVJBUVpDcEJDQUJJQVZ5TmdJQUlBY01BUXNnQnlnQ0NBc2hBU0FISUFRMkFnZ2dBU0FFTmdJTUlBUWdCellDRENBRUlBRTJBZ2dMUWFTcEJDQUNOZ0lBUVppcEJDQUROZ0lBREEwTFFaU3BCQ2dDQUNJR1JRMEJJQVpCQUNBR2EzRkJBV3NpQUNBQVFReDJRUkJ4SWdKMklnRkJCWFpCQ0hFaUFDQUNjaUFCSUFCMklnRkJBblpCQkhFaUFISWdBU0FBZGlJQlFRRjJRUUp4SWdCeUlBRWdBSFlpQVVFQmRrRUJjU0lBY2lBQklBQjJha0VDZEVIQXF3UnFLQUlBSWdFb0FnUkJlSEVnQ0dzaEF5QUJJUUlEUUFKQUlBSW9BaEFpQUVVRVFDQUNLQUlVSWdCRkRRRUxJQUFvQWdSQmVIRWdDR3NpQWlBRElBSWdBMGtpQWhzaEF5QUFJQUVnQWhzaEFTQUFJUUlNQVFzTElBRWdDR29pQ1NBQlRRMENJQUVvQWhnaEN5QUJJQUVvQWd3aUJFY0VRQ0FCS0FJSUlnQkJvS2tFS0FJQVNSb2dBQ0FFTmdJTUlBUWdBRFlDQ0F3TUN5QUJRUlJxSWdJb0FnQWlBRVVFUUNBQktBSVFJZ0JGRFFRZ0FVRVFhaUVDQ3dOQUlBSWhCeUFBSWdSQkZHb2lBaWdDQUNJQURRQWdCRUVRYWlFQ0lBUW9BaEFpQUEwQUN5QUhRUUEyQWdBTUN3dEJmeUVJSUFCQnYzOUxEUUFnQUVFTGFpSUFRWGh4SVFoQmxLa0VLQUlBSWdsRkRRQkJIeUVGUVFBZ0NHc2hBd0pBQWtBQ1FBSi9JQWhCLy8vL0IwMEVRQ0FBUVFoMklnQWdBRUdBL2o5cVFSQjJRUWh4SWdKMElnQWdBRUdBNEI5cVFSQjJRUVJ4SWdGMElnQWdBRUdBZ0E5cVFSQjJRUUp4SWdCMFFROTJJQUVnQW5JZ0FISnJJZ0JCQVhRZ0NDQUFRUlZxZGtFQmNYSkJIR29oQlFzZ0JVRUNkRUhBcXdScUtBSUFJZ0pGQ3dSQVFRQWhBQXdCQzBFQUlRQWdDRUVBUVJrZ0JVRUJkbXNnQlVFZlJodDBJUUVEUUFKQUlBSW9BZ1JCZUhFZ0NHc2lCeUFEVHcwQUlBSWhCQ0FISWdNTkFFRUFJUU1nQWlFQURBTUxJQUFnQWlnQ0ZDSUhJQWNnQWlBQlFSMTJRUVJ4YWlnQ0VDSUNSaHNnQUNBSEd5RUFJQUZCQVhRaEFTQUNEUUFMQ3lBQUlBUnlSUVJBUVFJZ0JYUWlBRUVBSUFCcmNpQUpjU0lBUlEwRElBQkJBQ0FBYTNGQkFXc2lBQ0FBUVF4MlFSQnhJZ0oySWdGQkJYWkJDSEVpQUNBQ2NpQUJJQUIySWdGQkFuWkJCSEVpQUhJZ0FTQUFkaUlCUVFGMlFRSnhJZ0J5SUFFZ0FIWWlBVUVCZGtFQmNTSUFjaUFCSUFCMmFrRUNkRUhBcXdScUtBSUFJUUFMSUFCRkRRRUxBMEFnQUNnQ0JFRjRjU0FJYXlJQklBTkpJUUlnQVNBRElBSWJJUU1nQUNBRUlBSWJJUVFnQUNnQ0VDSUJCSDhnQVFVZ0FDZ0NGQXNpQUEwQUN3c2dCRVVOQUNBRFFaaXBCQ2dDQUNBSWEwOE5BQ0FFSUFocUlnWWdCRTBOQVNBRUtBSVlJUVVnQkNBRUtBSU1JZ0ZIQkVBZ0JDZ0NDQ0lBUWFDcEJDZ0NBRWthSUFBZ0FUWUNEQ0FCSUFBMkFnZ01DZ3NnQkVFVWFpSUNLQUlBSWdCRkJFQWdCQ2dDRUNJQVJRMEVJQVJCRUdvaEFnc0RRQ0FDSVFjZ0FDSUJRUlJxSWdJb0FnQWlBQTBBSUFGQkVHb2hBaUFCS0FJUUlnQU5BQXNnQjBFQU5nSUFEQWtMSUFoQm1La0VLQUlBSWdKTkJFQkJwS2tFS0FJQUlRTUNRQ0FDSUFocklnRkJFRThFUUVHWXFRUWdBVFlDQUVHa3FRUWdBeUFJYWlJQU5nSUFJQUFnQVVFQmNqWUNCQ0FDSUFOcUlBRTJBZ0FnQXlBSVFRTnlOZ0lFREFFTFFhU3BCRUVBTmdJQVFaaXBCRUVBTmdJQUlBTWdBa0VEY2pZQ0JDQUNJQU5xSWdBZ0FDZ0NCRUVCY2pZQ0JBc2dBMEVJYWlFQURBc0xJQWhCbktrRUtBSUFJZ1pKQkVCQm5La0VJQVlnQ0dzaUFUWUNBRUdvcVFSQnFLa0VLQUlBSWdJZ0NHb2lBRFlDQUNBQUlBRkJBWEkyQWdRZ0FpQUlRUU55TmdJRUlBSkJDR29oQUF3TEMwRUFJUUFnQ0VFdmFpSUpBbjlCNkt3RUtBSUFCRUJCOEt3RUtBSUFEQUVMUWZTc0JFSi9Od0lBUWV5c0JFS0FvSUNBZ0lBRU53SUFRZWlzQkNBTVFReHFRWEJ4UWRpcTFhb0ZjellDQUVIOHJBUkJBRFlDQUVITXJBUkJBRFlDQUVHQUlBc2lBV29pQlVFQUlBRnJJZ2R4SWdJZ0NFME5Da0hJckFRb0FnQWlCQVJBUWNDc0JDZ0NBQ0lESUFKcUlnRWdBMDBnQVNBRVMzSU5Dd3RCekt3RUxRQUFRUVJ4RFFVQ1FBSkFRYWlwQkNnQ0FDSURCRUJCMEt3RUlRQURRQ0FESUFBb0FnQWlBVThFUUNBQklBQW9BZ1JxSUFOTERRTUxJQUFvQWdnaUFBMEFDd3RCQUJDVkFpSUJRWDlHRFFZZ0FpRUZRZXlzQkNnQ0FDSURRUUZySWdBZ0FYRUVRQ0FDSUFGcklBQWdBV3BCQUNBRGEzRnFJUVVMSUFVZ0NFMGdCVUgrLy8vL0IwdHlEUVpCeUt3RUtBSUFJZ1FFUUVIQXJBUW9BZ0FpQXlBRmFpSUFJQU5OSUFBZ0JFdHlEUWNMSUFVUWxRSWlBQ0FCUncwQkRBZ0xJQVVnQm1zZ0IzRWlCVUgrLy8vL0Iwc05CU0FGRUpVQ0lnRWdBQ2dDQUNBQUtBSUVha1lOQkNBQklRQUxJQUJCZjBZZ0NFRXdhaUFGVFhKRkJFQkI4S3dFS0FJQUlnRWdDU0FGYTJwQkFDQUJhM0VpQVVIKy8vLy9CMHNFUUNBQUlRRU1DQXNnQVJDVkFrRi9Sd1JBSUFFZ0JXb2hCU0FBSVFFTUNBdEJBQ0FGYXhDVkFob01CUXNnQUNJQlFYOUhEUVlNQkFzQUMwRUFJUVFNQnd0QkFDRUJEQVVMSUFGQmYwY05BZ3RCekt3RVFjeXNCQ2dDQUVFRWNqWUNBQXNnQWtIKy8vLy9CMHNOQVNBQ0VKVUNJZ0ZCZjBaQkFCQ1ZBaUlBUVg5R2NpQUFJQUZOY2cwQklBQWdBV3NpQlNBSVFTaHFUUTBCQzBIQXJBUkJ3S3dFS0FJQUlBVnFJZ0EyQWdCQnhLd0VLQUlBSUFCSkJFQkJ4S3dFSUFBMkFnQUxBa0FDUUFKQVFhaXBCQ2dDQUNJSEJFQkIwS3dFSVFBRFFDQUJJQUFvQWdBaUF5QUFLQUlFSWdKcVJnMENJQUFvQWdnaUFBMEFDd3dDQzBHZ3FRUW9BZ0FpQUVFQUlBQWdBVTBiUlFSQVFhQ3BCQ0FCTmdJQUMwRUFJUUJCMUt3RUlBVTJBZ0JCMEt3RUlBRTJBZ0JCc0trRVFYODJBZ0JCdEtrRVFlaXNCQ2dDQURZQ0FFSGNyQVJCQURZQ0FBTkFJQUJCQTNRaUEwSEFxUVJxSUFOQnVLa0VhaUlDTmdJQUlBTkJ4S2tFYWlBQ05nSUFJQUJCQVdvaUFFRWdSdzBBQzBHY3FRUWdCVUVvYXlJRFFYZ2dBV3RCQjNGQkFDQUJRUWhxUVFkeEd5SUFheUlDTmdJQVFhaXBCQ0FBSUFGcUlnQTJBZ0FnQUNBQ1FRRnlOZ0lFSUFFZ0EycEJLRFlDQkVHc3FRUkIrS3dFS0FJQU5nSUFEQUlMSUFBdEFBeEJDSEVnQXlBSFMzSWdBU0FIVFhJTkFDQUFJQUlnQldvMkFnUkJxS2tFSUFkQmVDQUhhMEVIY1VFQUlBZEJDR3BCQjNFYklnQnFJZ0kyQWdCQm5La0VRWnlwQkNnQ0FDQUZhaUlCSUFCcklnQTJBZ0FnQWlBQVFRRnlOZ0lFSUFFZ0IycEJLRFlDQkVHc3FRUkIrS3dFS0FJQU5nSUFEQUVMUWFDcEJDZ0NBQ0FCU3dSQVFhQ3BCQ0FCTmdJQUN5QUJJQVZxSVFKQjBLd0VJUUFDUUFKQUFrQUNRQUpBQWtBRFFDQUNJQUFvQWdCSEJFQWdBQ2dDQ0NJQURRRU1BZ3NMSUFBdEFBeEJDSEZGRFFFTFFkQ3NCQ0VBQTBBZ0J5QUFLQUlBSWdKUEJFQWdBaUFBS0FJRWFpSUVJQWRMRFFNTElBQW9BZ2doQUF3QUN3QUxJQUFnQVRZQ0FDQUFJQUFvQWdRZ0JXbzJBZ1FnQVVGNElBRnJRUWR4UVFBZ0FVRUlha0VIY1J0cUlna2dDRUVEY2pZQ0JDQUNRWGdnQW10QkIzRkJBQ0FDUVFocVFRZHhHMm9pQlNBSUlBbHFJZ1pySVFJZ0JTQUhSZ1JBUWFpcEJDQUdOZ0lBUVp5cEJFR2NxUVFvQWdBZ0Ftb2lBRFlDQUNBR0lBQkJBWEkyQWdRTUF3c2dCVUdrcVFRb0FnQkdCRUJCcEtrRUlBWTJBZ0JCbUtrRVFaaXBCQ2dDQUNBQ2FpSUFOZ0lBSUFZZ0FFRUJjallDQkNBQUlBWnFJQUEyQWdBTUF3c2dCU2dDQkNJQVFRTnhRUUZHQkVBZ0FFRjRjU0VIQWtBZ0FFSC9BVTBFUUNBRktBSUlJZ01nQUVFRGRpSUFRUU4wUWJpcEJHcEdHaUFESUFVb0Fnd2lBVVlFUUVHUXFRUkJrS2tFS0FJQVFYNGdBSGR4TmdJQURBSUxJQU1nQVRZQ0RDQUJJQU0yQWdnTUFRc2dCU2dDR0NFSUFrQWdCU0FGS0FJTUlnRkhCRUFnQlNnQ0NDSUFJQUUyQWd3Z0FTQUFOZ0lJREFFTEFrQWdCVUVVYWlJQUtBSUFJZ01OQUNBRlFSQnFJZ0FvQWdBaUF3MEFRUUFoQVF3QkN3TkFJQUFoQkNBRElnRkJGR29pQUNnQ0FDSUREUUFnQVVFUWFpRUFJQUVvQWhBaUF3MEFDeUFFUVFBMkFnQUxJQWhGRFFBQ1FDQUZJQVVvQWh3aUEwRUNkRUhBcXdScUlnQW9BZ0JHQkVBZ0FDQUJOZ0lBSUFFTkFVR1VxUVJCbEtrRUtBSUFRWDRnQTNkeE5nSUFEQUlMSUFoQkVFRVVJQWdvQWhBZ0JVWWJhaUFCTmdJQUlBRkZEUUVMSUFFZ0NEWUNHQ0FGS0FJUUlnQUVRQ0FCSUFBMkFoQWdBQ0FCTmdJWUN5QUZLQUlVSWdCRkRRQWdBU0FBTmdJVUlBQWdBVFlDR0FzZ0JTQUhhaUVGSUFJZ0Iyb2hBZ3NnQlNBRktBSUVRWDV4TmdJRUlBWWdBa0VCY2pZQ0JDQUNJQVpxSUFJMkFnQWdBa0gvQVUwRVFDQUNRUU4ySWdCQkEzUkJ1S2tFYWlFQ0FuOUJrS2tFS0FJQUlnRkJBU0FBZENJQWNVVUVRRUdRcVFRZ0FDQUJjallDQUNBQ0RBRUxJQUlvQWdnTElRQWdBaUFHTmdJSUlBQWdCallDRENBR0lBSTJBZ3dnQmlBQU5nSUlEQU1MUVI4aEFDQUNRZi8vL3dkTkJFQWdBa0VJZGlJQUlBQkJnUDQvYWtFUWRrRUljU0lEZENJQUlBQkJnT0FmYWtFUWRrRUVjU0lCZENJQUlBQkJnSUFQYWtFUWRrRUNjU0lBZEVFUGRpQUJJQU55SUFCeWF5SUFRUUYwSUFJZ0FFRVZhblpCQVhGeVFSeHFJUUFMSUFZZ0FEWUNIQ0FHUWdBM0FoQWdBRUVDZEVIQXF3UnFJUVFDUUVHVXFRUW9BZ0FpQTBFQklBQjBJZ0Z4UlFSQVFaU3BCQ0FCSUFOeU5nSUFJQVFnQmpZQ0FDQUdJQVEyQWhnTUFRc2dBa0VBUVJrZ0FFRUJkbXNnQUVFZlJodDBJUUFnQkNnQ0FDRUJBMEFnQVNJREtBSUVRWGh4SUFKR0RRTWdBRUVkZGlFQklBQkJBWFFoQUNBRElBRkJCSEZxSWdRb0FoQWlBUTBBQ3lBRUlBWTJBaEFnQmlBRE5nSVlDeUFHSUFZMkFnd2dCaUFHTmdJSURBSUxRWnlwQkNBRlFTaHJJZ05CZUNBQmEwRUhjVUVBSUFGQkNHcEJCM0ViSWdCcklnSTJBZ0JCcUtrRUlBQWdBV29pQURZQ0FDQUFJQUpCQVhJMkFnUWdBU0FEYWtFb05nSUVRYXlwQkVINHJBUW9BZ0EyQWdBZ0J5QUVRU2NnQkd0QkIzRkJBQ0FFUVNkclFRZHhHMnBCTDJzaUFDQUFJQWRCRUdwSkd5SUNRUnMyQWdRZ0FrSFlyQVFwQWdBM0FoQWdBa0hRckFRcEFnQTNBZ2hCMkt3RUlBSkJDR28yQWdCQjFLd0VJQVUyQWdCQjBLd0VJQUUyQWdCQjNLd0VRUUEyQWdBZ0FrRVlhaUVBQTBBZ0FFRUhOZ0lFSUFCQkNHb2hBU0FBUVFScUlRQWdBU0FFU1EwQUN5QUNJQWRHRFFNZ0FpQUNLQUlFUVg1eE5nSUVJQWNnQWlBSGF5SUVRUUZ5TmdJRUlBSWdCRFlDQUNBRVFmOEJUUVJBSUFSQkEzWWlBRUVEZEVHNHFRUnFJUUlDZjBHUXFRUW9BZ0FpQVVFQklBQjBJZ0J4UlFSQVFaQ3BCQ0FBSUFGeU5nSUFJQUlNQVFzZ0FpZ0NDQXNoQUNBQ0lBYzJBZ2dnQUNBSE5nSU1JQWNnQWpZQ0RDQUhJQUEyQWdnTUJBdEJIeUVBSUFkQ0FEY0NFQ0FFUWYvLy93ZE5CRUFnQkVFSWRpSUFJQUJCZ1A0L2FrRVFka0VJY1NJQ2RDSUFJQUJCZ09BZmFrRVFka0VFY1NJQmRDSUFJQUJCZ0lBUGFrRVFka0VDY1NJQWRFRVBkaUFCSUFKeUlBQnlheUlBUVFGMElBUWdBRUVWYW5aQkFYRnlRUnhxSVFBTElBY2dBRFlDSENBQVFRSjBRY0NyQkdvaEF3SkFRWlNwQkNnQ0FDSUNRUUVnQUhRaUFYRkZCRUJCbEtrRUlBRWdBbkkyQWdBZ0F5QUhOZ0lBSUFjZ0F6WUNHQXdCQ3lBRVFRQkJHU0FBUVFGMmF5QUFRUjlHRzNRaEFDQURLQUlBSVFFRFFDQUJJZ0lvQWdSQmVIRWdCRVlOQkNBQVFSMTJJUUVnQUVFQmRDRUFJQUlnQVVFRWNXb2lBeWdDRUNJQkRRQUxJQU1nQnpZQ0VDQUhJQUkyQWhnTElBY2dCellDRENBSElBYzJBZ2dNQXdzZ0F5Z0NDQ0lBSUFZMkFnd2dBeUFHTmdJSUlBWkJBRFlDR0NBR0lBTTJBZ3dnQmlBQU5nSUlDeUFKUVFocUlRQU1CUXNnQWlnQ0NDSUFJQWMyQWd3Z0FpQUhOZ0lJSUFkQkFEWUNHQ0FISUFJMkFnd2dCeUFBTmdJSUMwR2NxUVFvQWdBaUFDQUlUUTBBUVp5cEJDQUFJQWhySWdFMkFnQkJxS2tFUWFpcEJDZ0NBQ0lDSUFocUlnQTJBZ0FnQUNBQlFRRnlOZ0lFSUFJZ0NFRURjallDQkNBQ1FRaHFJUUFNQXd0QmxQOERRVEEyQWdCQkFDRUFEQUlMQWtBZ0JVVU5BQUpBSUFRb0Fod2lBa0VDZEVIQXF3UnFJZ0FvQWdBZ0JFWUVRQ0FBSUFFMkFnQWdBUTBCUVpTcEJDQUpRWDRnQW5keElnazJBZ0FNQWdzZ0JVRVFRUlFnQlNnQ0VDQUVSaHRxSUFFMkFnQWdBVVVOQVFzZ0FTQUZOZ0lZSUFRb0FoQWlBQVJBSUFFZ0FEWUNFQ0FBSUFFMkFoZ0xJQVFvQWhRaUFFVU5BQ0FCSUFBMkFoUWdBQ0FCTmdJWUN3SkFJQU5CRDAwRVFDQUVJQU1nQ0dvaUFFRURjallDQkNBQUlBUnFJZ0FnQUNnQ0JFRUJjallDQkF3QkN5QUVJQWhCQTNJMkFnUWdCaUFEUVFGeU5nSUVJQU1nQm1vZ0F6WUNBQ0FEUWY4QlRRUkFJQU5CQTNZaUFFRURkRUc0cVFScUlRSUNmMEdRcVFRb0FnQWlBVUVCSUFCMElnQnhSUVJBUVpDcEJDQUFJQUZ5TmdJQUlBSU1BUXNnQWlnQ0NBc2hBQ0FDSUFZMkFnZ2dBQ0FHTmdJTUlBWWdBallDRENBR0lBQTJBZ2dNQVF0Qkh5RUFJQU5CLy8vL0IwMEVRQ0FEUVFoMklnQWdBRUdBL2o5cVFSQjJRUWh4SWdKMElnQWdBRUdBNEI5cVFSQjJRUVJ4SWdGMElnQWdBRUdBZ0E5cVFSQjJRUUp4SWdCMFFROTJJQUVnQW5JZ0FISnJJZ0JCQVhRZ0F5QUFRUlZxZGtFQmNYSkJIR29oQUFzZ0JpQUFOZ0ljSUFaQ0FEY0NFQ0FBUVFKMFFjQ3JCR29oQWdKQUFrQWdDVUVCSUFCMElnRnhSUVJBUVpTcEJDQUJJQWx5TmdJQUlBSWdCallDQUNBR0lBSTJBaGdNQVFzZ0EwRUFRUmtnQUVFQmRtc2dBRUVmUmh0MElRQWdBaWdDQUNFSUEwQWdDQ0lCS0FJRVFYaHhJQU5HRFFJZ0FFRWRkaUVDSUFCQkFYUWhBQ0FCSUFKQkJIRnFJZ0lvQWhBaUNBMEFDeUFDSUFZMkFoQWdCaUFCTmdJWUN5QUdJQVkyQWd3Z0JpQUdOZ0lJREFFTElBRW9BZ2dpQUNBR05nSU1JQUVnQmpZQ0NDQUdRUUEyQWhnZ0JpQUJOZ0lNSUFZZ0FEWUNDQXNnQkVFSWFpRUFEQUVMQWtBZ0MwVU5BQUpBSUFFb0Fod2lBa0VDZEVIQXF3UnFJZ0FvQWdBZ0FVWUVRQ0FBSUFRMkFnQWdCQTBCUVpTcEJDQUdRWDRnQW5keE5nSUFEQUlMSUF0QkVFRVVJQXNvQWhBZ0FVWWJhaUFFTmdJQUlBUkZEUUVMSUFRZ0N6WUNHQ0FCS0FJUUlnQUVRQ0FFSUFBMkFoQWdBQ0FFTmdJWUN5QUJLQUlVSWdCRkRRQWdCQ0FBTmdJVUlBQWdCRFlDR0FzQ1FDQURRUTlOQkVBZ0FTQURJQWhxSWdCQkEzSTJBZ1FnQUNBQmFpSUFJQUFvQWdSQkFYSTJBZ1FNQVFzZ0FTQUlRUU55TmdJRUlBa2dBMEVCY2pZQ0JDQURJQWxxSUFNMkFnQWdDZ1JBSUFwQkEzWWlBRUVEZEVHNHFRUnFJUVJCcEtrRUtBSUFJUUlDZjBFQklBQjBJZ0FnQlhGRkJFQkJrS2tFSUFBZ0JYSTJBZ0FnQkF3QkN5QUVLQUlJQ3lFQUlBUWdBallDQ0NBQUlBSTJBZ3dnQWlBRU5nSU1JQUlnQURZQ0NBdEJwS2tFSUFrMkFnQkJtS2tFSUFNMkFnQUxJQUZCQ0dvaEFBc2dERUVRYWlRQUlBQUxLUUVCZnlBQ0JFQWdBQ0VEQTBBZ0F5QUJPZ0FBSUFOQkFXb2hBeUFDUVFGcklnSU5BQXNMSUFBTERRQWdBQ2dDQUNBQlFRSjBhZ3NIQUNBQVFReHFDeElBSUFBUWpBRUVRQ0FBS0FJQUR3c2dBQXNKQUNBQUVENGdBV29MTXdFQmZ5QUNCRUFnQUNFREEwQWdBeUFCTFFBQU9nQUFJQU5CQVdvaEF5QUJRUUZxSVFFZ0FrRUJheUlDRFFBTEN5QUFDOWtCQVFSL0FrQWdBU0FBRURjaUEwc0VRQ01BUVJCcklnSWtBQ0FCSUFOcklnTUVRQ0FBRUU4aEJDQUFFRGNpQVNBRGFpRUZJQU1nQkNBQmEwc0VRQ0FBSUFRZ0JTQUVheUFCSUFFUXF3UUxJQUVnQUJBK0lnUnFJQU5CQUJEcEJpQUFJQVVRbUFJZ0FrRUFPZ0FQSUFRZ0JXb2dBa0VQYWhDVkFRc01BUXNqQUVFUWF5SUNKQUFDUUNBQUVJd0JCRUFnQUNnQ0FDRURJQUpCQURvQUR5QUJJQU5xSUFKQkQyb1FsUUVnQUNBQkVKNEJEQUVMSUFKQkFEb0FEaUFBSUFGcUlBSkJEbW9RbFFFZ0FDQUJFS3NCQ3dzZ0FrRVFhaVFBQ3dzQUlBQW9BZ0FRMUFJYUN4QUFJQUFvQWdRZ0FDZ0NBR3RCQW5VTEVBQWdBQ2dDQkNBQUtBSUFhMEVEZFFzU0FDQUFCRUFnQUNnQ0FCQXpJQUFRTXdzTEd3RUJmeU1BUVJCcklnRWtBQ0FBRUtJSElBRkJFR29rQUNBQUN3d0FJQUFnQVVFY2FoQ3lCQXV1QndJR2Z3UjlBbjBnQUNnQ0dDRUlJQUFvQWdRaEJTQUFLQUlJSVFRZ0FDZ0NEQ0VIQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSi9JQUdMUXdBQUFFOWRCRUFnQWFnTUFRdEJnSUNBZ0hnTEFuOGdBWTRpQ1l0REFBQUFUMTBFUUNBSnFBd0JDMEdBZ0lDQWVBc2lBRVlFUUFKL0lBS0xRd0FBQUU5ZEJFQWdBcWdNQVF0QmdJQ0FnSGdMSVFZZ0JnSi9JQUtPSWdtTFF3QUFBRTlkQkVBZ0NhZ01BUXRCZ0lDQWdIZ0xJZ05IRFFFZ0EwRUFTQ0FESUFSUGNnMENJQVFnQTBFQmFpSUdUUTBESUFCQkFFZ2dBQ0FGVDNJTkJDQUZJQUJCQVdvaUJFME5CU0FFc2lBQmt5SUtJQWF5SUFLVElndVVJZ2xEQUFBQUFHQkZJQW03UkhHc2k5dG9BUEEvWlVWeURRWWdBU0FBc3BNaURDQUxsQ0lCUXdBQUFBQmdSU0FCdTBSeHJJdmJhQUR3UDJWRmNnMEhJQW9nQWlBRHNwTWlDcFFpQWtNQUFBQUFZRVVnQXJ0RWNheUwyMmdBOEQ5bFJYSU5DQ0FNSUFxVUlncERBQUFBQUdCRklBcTdSSEdzaTl0b0FQQS9aVVZ5RFFrZ0NpQUNJQWtnQVpLU2tydEVjYXlMMjJnQThEOWxSUTBLSUFrZ0NDQURJQWRzYWlJRElBQkJBblFpQUdvcUFnQ1VJQUVnQXlBRVFRSjBJZ1ZxS2dJQWxKSWdBaUFBSUFNZ0Iyb2lBR29xQWdDVWtpQUtJQUFnQldvcUFnQ1VrZ3dNQzBIQWt3UkI5OVlCRURKQnZ0Y0JFREpCOGlRUU1rSEZBQkExUWZvcEVESkIxOWdCRURJUU5nd0tDMEhBa3dSQmx0a0JFREpCdnRjQkVESkI4aVFRTWtIR0FCQTFRZm9wRURKQjE5Z0JFRElRTmd3SkMwSEFrd1JCeXRrQkVESkJ2dGNCRURKQjhpUVFNa0hQQUJBMVFmb3BFREpCK05rQkVESVFOZ3dJQzBIQWt3UkJpZG9CRURKQnZ0Y0JFREpCOGlRUU1rSFFBQkExUWZvcEVESkJ4ZG9CRURJUU5nd0hDMEhBa3dSQjNkb0JFREpCdnRjQkVESkI4aVFRTWtIUkFCQTFRZm9wRURKQml0c0JFRElRTmd3R0MwSEFrd1JCbTlzQkVESkJ2dGNCRURKQjhpUVFNa0hTQUJBMVFmb3BFREpCMXRzQkVESVFOZ3dGQzBIQWt3UkI3dHNCRURKQnZ0Y0JFREpCOGlRUU1rSGVBQkExUWZvcEVESkJuZHdCRURJUU5nd0VDMEhBa3dSQnF0d0JFREpCdnRjQkVESkI4aVFRTWtIZkFCQTFRZm9wRURKQm5kd0JFRElRTmd3REMwSEFrd1JCMmR3QkVESkJ2dGNCRURKQjhpUVFNa0hnQUJBMVFmb3BFREpCbmR3QkVESVFOZ3dDQzBIQWt3UkJpTjBCRURKQnZ0Y0JFREpCOGlRUU1rSGhBQkExUWZvcEVESkJuZHdCRURJUU5nd0JDMEhBa3dSQnQ5MEJFREpCdnRjQkVESkI4aVFRTWtIaUFCQTFRZm9wRURKQm5kd0JFRElRTmdzUUFBQUxDd2NBSUFCQkJHb0xOUUVCZnlNQVFSQnJJZ0lrQUNBQ0lBQW9BZ0EyQWd3Z0FDQUJLQUlBTmdJQUlBRWdBa0VNYWlnQ0FEWUNBQ0FDUVJCcUpBQUxNd0VCZnlBQVFRRWdBQnNoQUFKQUEwQWdBQkE2SWdFTkFVR01xUVFvQWdBaUFRUkFJQUVSRUFBTUFRc0xFQUFBQ3lBQkN3MEFJQUFvQWdBZ0FVRUZkR29MUlFBZ0FTQUFLQUlJVHdSQVFjQ1RCRUdaMUFFUU1rRzcxUUVRTWtIeUpCQXlRZndBRURWQitpa1FNa0hJMWdFUU1oQTJFQUFBQ3lBQUtBSVlJQUFvQWd3Z0FXeHFDd2tBSUFBUXB3SWdBQXNiQVFGL1FRb2hBU0FBRUl3QkJIOGdBQkNhQWtFQmF3VkJDZ3NMRFFBZ0FDZ0NBQ0FCUVFOMGFndXZBUUlCZmdOL0FrQUNRQ0FBS1FOd0lnRlFSUVJBSUFBcEEzZ2dBVmtOQVFzZ0FCQ0RBeUlFUVg5S0RRRUxJQUJCQURZQ2FFRi9Ed3NnQUFKL0lBQW9BZ2dpQWlBQUtRTndJZ0ZRRFFBYUlBSWdBU0FBS1FONFFuK0ZmQ0lCSUFJZ0FDZ0NCQ0lEYTZ4WkRRQWFJQU1nQWFkcUN6WUNhQ0FBS0FJRUlRTWdBZ1JBSUFBZ0FDa0RlQ0FDSUFOclFRRnFySHczQTNnTElBTkJBV3NpQUMwQUFDQUVSd1JBSUFBZ0JEb0FBQXNnQkF2YUFRRUdmeUFCRU1jRUlRTWpBRUVRYXlJRkpBQUNRQ0FESUFBUXJnUWlBazBFUUNBQUVENGlCaUVDSUFNRWZ3SkFJQUlnQVNJRWEwRUNkU0FESWdGSkJFQURRQ0FDSUFGQkFXc2lBVUVDZENJSGFpQUVJQWRxS0FJQU5nSUFJQUVOQUF3Q0N3QUxJQUZGRFFBRFFDQUNJQVFvQWdBMkFnQWdBa0VFYWlFQ0lBUkJCR29oQkNBQlFRRnJJZ0VOQUFzTFFRQUZJQUlMR2lBRlFRQTJBZ3dnQmlBRFFRSjBhaUFGUVF4cUVJTUJJQUFnQXhDWUFnd0JDeUFBSUFJZ0F5QUNheUFBRURjaUFFRUFJQUFnQXlBQkVPY0dDeUFGUVJCcUpBQUxEd0FnQUNBQklBRVFuQUVRNndZYUM2Y0NBUVIvQWtCQnNKb0VMUUFBUVFGeERRQkJzSm9FRUc5RkRRQWpBRUVnYXlJQ0pBQUNRRUVBRU1vRUJFQURRRUgvLy8vL0J5QUJka0VCY1FSQUlBRkJBblFnQVVIbHRBTVF5d1EyQWdBTElBRkJBV29pQVVFR1J3MEFDd3dCQ3dOQUlBSkJDR29nQVVFQ2RHb0NmMEVCSUFGMFFmLy8vLzhIY1NJQVFRRnlSUVJBSUFGQkFuUW9BZ0FNQVFzZ0FVSGx0QU5CcTVRRElBQWJFTXNFQ3lJQU5nSUFJQU1nQUVFQVIyb2hBeUFCUVFGcUlnRkJCa2NOQUF0QmtKTURJUUFDUUFKQUlBTU9BZ0lBQVFzZ0FpZ0NDRUgwa2dOSERRQkJxSk1ESVFBTUFRdEJHQkE2SWdCRkRRQWdBQ0FDS1FNSU53SUFJQUFnQWlrREdEY0NFQ0FBSUFJcEF4QTNBZ2dMSUFKQklHb2tBRUdzbWdRZ0FEWUNBRUd3bWdRUWJndEJySm9FS0FJQUMyQUJBWDhqQUVFUWF5SUZKQUFnQUNBRElBUVE4d0VoQUNBRlFReHFJQVZCQ0dvZ0FTQUNJQU1Ra2dRZ0JTb0NDQ0VCSUFBZ0JTb0NEQ0FBS0FJRVFRSnJzeERoQWlBQklBQW9BZ2hCQW11ekVPRUNFRWdoQVNBRlFSQnFKQUFnQVFzSkFDQUFJQUFRMGdVTEVBQWdBQ2dDQkNBQUtBSUFhMEVNYlF0R0FDQUFJQUVxQWdnZ0FTb0NBQ0FDS2dJQWxDQUJLZ0lFSUFJcUFnU1VrcEk0QWdBZ0FDQUJLZ0lVSUFFcUFnd2dBaW9DQUpRZ0FTb0NFQ0FDS2dJRWxKS1NPQUlFQ3lnQkFYOGdBU0FCUVFGcklnSnhSUVJBSUFBZ0FuRVBDeUFBSUFGUEJIOGdBQ0FCY0FVZ0FBc0xCd0FnQUVFUWFndWVDd0lGZnc5K0l3QkI0QUJySWdVa0FDQUNRaUNHSUFGQ0lJaUVJUThnQkVJdmhpQURRaEdJaENFTUlBUkMvLy8vLy8vL1A0TWlEVUlQaGlBRFFqR0loQ0VRSUFJZ0JJVkNnSUNBZ0lDQWdJQ0FmNE1oQ2lBQ1F2Ly8vLy8vL3orRElndENJSWdoRVNBTlFoR0lJUklnQkVJd2lLZEIvLzhCY1NFSEFrQUNmeUFDUWpDSXAwSC8vd0Z4SWdsQkFXdEIvZjhCVFFSQVFRQWdCMEVCYTBIKy93RkpEUUVhQ3lBQlVDQUNRdi8vLy8vLy8vLy8vd0NESWc1Q2dJQ0FnSUNBd1AvL0FGUWdEa0tBZ0lDQWdJREEvLzhBVVJ0RkJFQWdBa0tBZ0lDQWdJQWdoQ0VLREFJTElBTlFJQVJDLy8vLy8vLy8vLy8vQUlNaUFrS0FnSUNBZ0lEQS8vOEFWQ0FDUW9DQWdJQ0FnTUQvL3dCUkcwVUVRQ0FFUW9DQWdJQ0FnQ0NFSVFvZ0F5RUJEQUlMSUFFZ0RrS0FnSUNBZ0lEQS8vOEFoWVJRQkVBZ0FpQURoRkFFUUVLQWdJQ0FnSURnLy84QUlRcENBQ0VCREFNTElBcENnSUNBZ0lDQXdQLy9BSVFoQ2tJQUlRRU1BZ3NnQXlBQ1FvQ0FnSUNBZ01ELy93Q0ZoRkFFUUNBQklBNkVJUUpDQUNFQklBSlFCRUJDZ0lDQWdJQ0E0UC8vQUNFS0RBTUxJQXBDZ0lDQWdJQ0F3UC8vQUlRaENnd0NDeUFCSUE2RVVBUkFRZ0FoQVF3Q0N5QUNJQU9FVUFSQVFnQWhBUXdDQ3lBT1F2Ly8vLy8vL3o5WUJFQWdCVUhRQUdvZ0FTQUxJQUVnQ3lBTFVDSUdHM2tnQmtFR2RLMThweUlHUVE5ckVKQUJJQVVwQTFnaUMwSWdoaUFGS1FOUUlnRkNJSWlFSVE4Z0MwSWdpQ0VSUVJBZ0Jtc2hCZ3NnQmlBQ1F2Ly8vLy8vL3o5V0RRQWFJQVZCUUdzZ0F5QU5JQU1nRFNBTlVDSUlHM2tnQ0VFR2RLMThweUlJUVE5ckVKQUJJQVVwQTBnaUFrSVBoaUFGS1FOQUlnTkNNWWlFSVJBZ0FrSXZoaUFEUWhHSWhDRU1JQUpDRVlnaEVpQUdJQWhyUVJCcUN5RUdJQXhDLy8vLy93K0RJZ0lnQVVMLy8vLy9ENE1pQVg0aUV5QURRZytHUW9DQS92OFBneUlESUE5Qy8vLy8vdytESWc1K2ZDSUVRaUNHSWcwZ0FTQURmbndpRENBTlZLMGdBaUFPZmlJVklBTWdDMEwvLy8vL0Q0TWlDMzU4SWhRZ0VFTC8vLy8vRDRNaURTQUJmbndpRUNBRUlCTlVyVUlnaGlBRVFpQ0loSHdpRXlBQ0lBdCtJaFlnQXlBUlFvQ0FCSVFpRDM1OElnTWdEU0FPZm53aUVTQUJJQkpDLy8vLy93ZURRb0NBZ0lBSWhDSUJmbndpRWtJZ2hud2lGM3doQkNBSElBbHFJQVpxUWYvL0FHc2hCZ0pBSUFzZ0RYNGlHQ0FDSUE5K2ZDSUNJQmhVclNBQ0lBSWdBU0FPZm53aUFsYXRmQ0FDSUFJZ0ZDQVZWSzBnRUNBVVZLMThmQ0lDVnExOElBRWdEMzU4SUFFZ0MzNGlDeUFOSUE5K2ZDSUJJQXRVclVJZ2hpQUJRaUNJaEh3Z0FpQUJRaUNHZkNJQklBSlVyWHdnQVNBQklCRWdFbGF0SUFNZ0ZsU3RJQU1nRVZhdGZIeENJSVlnRWtJZ2lJUjhJZ0ZXclh3Z0FTQVFJQk5XclNBVElCZFdyWHg4SWdJZ0FWU3RmQ0lCUW9DQWdJQ0FnTUFBZzFCRkJFQWdCa0VCYWlFR0RBRUxJQXhDUDRnaEF5QUJRZ0dHSUFKQ1A0aUVJUUVnQWtJQmhpQUVRaitJaENFQ0lBeENBWVloRENBRElBUkNBWWFFSVFRTElBWkIvLzhCVGdSQUlBcENnSUNBZ0lDQXdQLy9BSVFoQ2tJQUlRRU1BUXNDZmlBR1FRQk1CRUJCQVNBR2F5SUhRWUFCVHdSQVFnQWhBUXdEQ3lBRlFUQnFJQXdnQkNBR1FmOEFhaUlHRUpBQklBVkJJR29nQWlBQklBWVFrQUVnQlVFUWFpQU1JQVFnQnhDaUFpQUZJQUlnQVNBSEVLSUNJQVVwQXpBZ0JTa0RPSVJDQUZLdElBVXBBeUFnQlNrREVJU0VJUXdnQlNrREtDQUZLUU1ZaENFRUlBVXBBd0FoQWlBRktRTUlEQUVMSUFGQy8vLy8vLy8vUDRNZ0JxMUNNSWFFQ3lBS2hDRUtJQXhRSUFSQ2YxVWdCRUtBZ0lDQWdJQ0FnSUIvVVJ0RkJFQWdDaUFDUWdGOElnRWdBbFN0ZkNFS0RBRUxJQXdnQkVLQWdJQ0FnSUNBZ0lCL2hZUlFSUVJBSUFJaEFRd0JDeUFLSUFJZ0FrSUJnM3dpQVNBQ1ZLMThJUW9MSUFBZ0FUY0RBQ0FBSUFvM0F3Z2dCVUhnQUdva0FBc0dBQ0FBRURNTHZRUUJCMzhnQUNnQzFBTWlCQ2dDRkNFRElBUW9BaEFpQWtILy93Rk1CRUFEUUNBRUlBTkJBV3NpQWpZQ0ZBSkFJQU5CQUVvRVFDQUNJUU1NQVF0QkFDRUZJQUFvQXJnRFJRUkFBa0FnQUNnQ0dDSUNLQUlFRFFBZ0FDQUNLQUlNRVFBQURRQWdBQ2dDQUNJRFFSazJBaFFnQUNBREtBSUFFUUVBQ3lBQ0lBSW9BZ1JCQVdzMkFnUWdBaUFDS0FJQUlnSkJBV28yQWdBQ1FDQUNMUUFBSWdWQi93RkhEUUFEUUFKQUlBQW9BaGdpQWlnQ0JBMEFJQUFnQWlnQ0RCRUFBQTBBSUFBb0FnQWlBMEVaTmdJVUlBQWdBeWdDQUJFQkFBc2dBaUFDS0FJRVFRRnJOZ0lFSUFJZ0FpZ0NBQ0lDUVFGcU5nSUFRZjhCSVFVZ0FpMEFBQ0lDUWY4QlJnMEFDeUFDUlEwQUlBQWdBallDdUFOQkFDRUZDeUFFS0FJVUlRSUxJQVFnQWtFSWFpSUROZ0lVSUFRZ0JDZ0NERUVJZENBRmNqWUNEQ0FDUVhkS0RRQWdCQ0FDUVFscUlnTTJBaFFnQXcwQUlBUkJnSUFDTmdJUVFRQWhBd3NnQkNBRUtBSVFRUUYwSWdJMkFoQWdBa0dBZ0FKSURRQUxDeUFFSUFJZ0FTMEFBQ0lBUWY4QWNVRUNkRUhnc0FKcUtBSUFJZ1ZCRUhVaUJtc2lBallDRUNBRlFRaDFJUWNDUUNBRUtBSU1JZ2dnQWlBRGRDSURUZ1JBSUFRZ0JqWUNFQ0FFSUFnZ0EyczJBZ3dnQUVHQUFYRWhBeUFDSUFaSUJFQWdBU0FESUFkek9nQUFEQUlMSUFFZ0F5QUZjem9BQUNBQVFZQUJjeUVBREFFTElBSkIvLzhCU2cwQUlBQkJnQUZ4SVFNZ0FpQUdTQVJBSUFFZ0F5QUZjem9BQUNBQVFZQUJjeUVBREFFTElBRWdBeUFIY3pvQUFBc2dBRUVIZGd1ekFRRURmeUFES0FKTUdpQUJJQUpzSVFVZ0F5QURMUUJLSWdSQkFXc2dCSEk2QUVvZ0F5Z0NDQ0FES0FJRUlnUnJJZ1pCQVVnRWZ5QUZCU0FBSUFRZ0JpQUZJQVVnQmtzYklnUVFRQm9nQXlBREtBSUVJQVJxTmdJRUlBQWdCR29oQUNBRklBUnJDeUlFQkVBRFFBSkFJQU1RMXdORkJFQWdBeUFBSUFRZ0F5Z0NJQkVFQUNJR1FRRnFRUUZMRFFFTElBVWdCR3NnQVc0UEN5QUFJQVpxSVFBZ0JDQUdheUlFRFFBTEN5QUNRUUFnQVJzTEVBQWdBRUhrNkFNZ0FTZ0NBTGNRRmd1c0FRRUVmeU1BUVNCcklnRWtBQ0FCUVFBMkFnd2dBVUhEQWpZQ0NDQUJJQUVwQXdnM0F3QWdBVUVRYWlJRElBRXBBZ0EzQWdRZ0F5QUFOZ0lBSXdCQkVHc2lBaVFBSUFBb0FnQkJmMGNFUUNBQ0FuOGdBa0VJYWlJRUlBTVFlQm9nQkFzUWVCb0RRQ0FBS0FJQVFRRkdEUUFMSUFBb0FnQkZCRUFnQUVFQk5nSUFJQUpCeEFJUkFRQWdBRUYvTmdJQUN3c2dBa0VRYWlRQUlBQW9BZ1FoQUNBQlFTQnFKQUFnQUVFQmF3c1FBQ0FBRVB3RklBQkIvTGdETmdJQUN3Z0FJQUJCQUJCNUN6RUJBWDhqQUVFUWF5SURKQUFnQXlBQk5nSU1JQUFnQTBFTWFoQ0RBU0FBUVFScUlBSVFnd0VnQTBFUWFpUUFJQUFMdUFFQkFYMGdBaUFCRU5JRklRTWdBQ0FBS2dJQUlBTWdBU29DQUpTVE9BSUFJQUFnQUNvQ0JDQURJQUVxQWdTVWt6Z0NCQ0FBSUFBcUFnZ2dBeUFCS2dJSWxKTTRBZ2dnQUNBQUtnSU1JQU1nQVNvQ0RKU1RPQUlNSUFBZ0FDb0NFQ0FESUFFcUFoQ1VremdDRUNBQUlBQXFBaFFnQXlBQktnSVVsSk00QWhRZ0FDQUFLZ0lZSUFNZ0FTb0NHSlNUT0FJWUlBQWdBQ29DSENBRElBRXFBaHlVa3pnQ0hDQUFJQUFxQWlBZ0F5QUJLZ0lnbEpNNEFpQUw3d1VCQ1g4akFFRVFheUlJSkFBZ0FCQ1VBeU1BUVJCcklnSWtBQ0FDSUFBMkFnd2dDRUVJYWlJR0lBSkJER29RZ3dFZ0FrRVFhaVFBUVpDbkJCQkRJQUZOQkVBQ1FFR1Fwd1FRUXlJQ0lBRkJBV29pQUVrRVFDTUFRU0JySWdra0FBSkFJQUFnQW1zaUJVR1Fwd1FRV2lnQ0FFR1Vwd1FvQWdCclFRSjFUUVJBSUFVUWdnY01BUXRCa0tjRUVKY0NJUWNnQ1VFSWFpRUFBbjlCa0tjRUVFTWdCV29oQkNNQVFSQnJJZ0lrQUNBQ0lBUTJBZ3dnQkJEekJpSURUUVJBUVpDbkJCQ1dBaUlFSUFOQkFYWkpCRUFnQWlBRVFRRjBOZ0lJSUFKQkNHb2dBa0VNYWhDQUFTZ0NBQ0VEQ3lBQ1FSQnFKQUFnQXd3QkN4Q1BBUUFMSVFOQmtLY0VFRU1oQ2tFQUlRSWpBRUVRYXlJRUpBQWdCRUVBTmdJTUlBQkJER29nQkVFTWFpQUhFTEVCSUFNRVFDQUFLQUlRSUFNUThnWWhBZ3NnQUNBQ05nSUFJQUFnQWlBS1FRSjBhaUlITmdJSUlBQWdCellDQkNBQUVEMGdBaUFEUVFKMGFqWUNBQ0FFUVJCcUpBQWpBRUVRYXlJREpBQWdBeUFBUVFocUlBVVFvd01pQWlnQ0FDRUZBMEFnQWlnQ0JDQUZSd1JBSUFBb0FoQWFJQUlvQWdBUW9RTWdBaUFDS0FJQVFRUnFJZ1UyQWdBTUFRc0xJQUlRc0FFZ0EwRVFhaVFBUVpDbkJCRCtCa0dRcHdRUWx3SkJrS2NFS0FJQVFaU25CQ2dDQUNBQVFRUnFJZ0lRdWdKQmtLY0VJQUlRU2tHVXB3UWdBRUVJYWhCS1FaQ25CQkJhSUFBUVBSQktJQUFnQUNnQ0JEWUNBRUdRcHdRUVF4RHhCaUFBS0FJRUlRSURRQ0FDSUFBb0FnaEhCRUFnQUNnQ0VCb2dBQ0FBS0FJSVFRUnJOZ0lJREFFTEN5QUFLQUlBQkVBZ0FDZ0NFQ0FBS0FJQUlBQVF0QVlROEFZTEN5QUpRU0JxSkFBTUFRc2dBQ0FDU1FSQVFaQ25CQ2dDQUNBQVFRSjBhaUVBUVpDbkJCQkRJUUpCa0tjRUlBQVE3d1pCa0tjRUlBSVFnQWNMQ3d0QmtLY0VJQUVRUENnQ0FBUkFRWkNuQkNBQkVEd29BZ0FRMUFJYUN5QUdFTHNCSVFCQmtLY0VJQUVRUENBQU5nSUFJQVlvQWdBaEFDQUdRUUEyQWdBZ0FBUkFJQUFRMUFJYUN5QUlRUkJxSkFBTENnQWdBQ2dDQUJEVEJBc1FBQ0FBS0FJQUVOWUVRUmgwUVJoMUMvNENBUVovSUFBb0FnUWhCaUFBS0FJQUlRY0NRQ0FBS0FJUUlnVW9BcmdEQkg4Z0J3VWdBa0VZU2dSQUlBSWhDQ0FISVFRTUFnc0RRQ0FHUlFSQUlBVWdCU2dDR0NnQ0RCRUFBRVVFUUVFQUR3c2dCU2dDR0NJRUtBSUVJUVlnQkNnQ0FDRUhDeUFIUVFGcUlRUWdCa0VCYXlFR0FrQWdCeTBBQUNJSVFmOEJSZ1JBQTBBZ0JrVUVRQ0FGSUFVb0FoZ29BZ3dSQUFCRkJFQkJBQThMSUFVb0FoZ2lCQ2dDQkNFR0lBUW9BZ0FoQkFzZ0JrRUJheUVHSUFRdEFBQWhDVUgvQVNFSUlBUkJBV29pQnlFRUlBbEIvd0ZHRFFBTElBa05BU0FISVFRTElBZ2dBVUVJZEhJaEFTQUNRUkZJSVFrZ0JDRUhJQUpCQ0dvaUNDRUNJQWtOQVF3REN3c2dCU0FKTmdLNEF5QUhDeUVFSUFJZ0EwNEVRQ0FDSVFnTUFRc2dCU2dDMUFNb0FpaEZCRUFnQlNnQ0FDSURRZmdBTmdJVUlBVkJmeUFES0FJRUVRSUFJQVVvQXRRRFFRRTJBaWdMUVJraENDQUJRUmtnQW10MElRRUxJQUFnQ0RZQ0RDQUFJQUUyQWdnZ0FDQUdOZ0lFSUFBZ0JEWUNBRUVCQ3lVQkFuOGpBRUVRYXlJQUpBQWdBRUVJYWhEOEF4QjRLQUlBSVFFZ0FFRVFhaVFBSUFFTERRQWdBQ0FCYWtFQmF5QUJiUXNOQUNBQUtBSUFJQUZCRkd4cUN3b0FJQUFvQWdCQkNHb0xCd0FnQUNBQWxBdExBUUovSXdCQkVHc2lBU1FBSUFFZ0FCRGxCaUVBSXdCQkVHc2lBaVFBSUFKQkNHb2dBQ2dDQkJCNEtBSUFRUUU2QUFBZ0FDZ0NDRUVCT2dBQUlBSkJFR29rQUNBQlFSQnFKQUFMZFFFRGZ5TUFRUkJySWdJa0FDQUNJQUFRNVFZaEFDTUFRUkJySWdNa0FDQURRUWhxSUFBb0FnUVFlQ2dDQUMwQUFFVUVRQUovQWtBZ0FDZ0NDQ0lBTFFBQUlnRkJBVWNFZnlBQlFRSnhEUUVnQUVFQ09nQUFRUUVGUVFBTERBRUxBQXNoQVFzZ0EwRVFhaVFBSUFKQkVHb2tBQ0FCQzBRQUlBQWdBWE1pQUNBQVFRRjJRZFdxMWFvRmNXc2lBRUVDZGtHejVzeVpBM0VnQUVHejVzeVpBM0ZxSWdCQkJIWWdBR3BCajU2OCtBQnhRWUdDaEFoc1FSaDJDN0lCQVFWL0FuOGdBa01BQUFBL2tpSUNpME1BQUFCUFhRUkFJQUtvREFFTFFZQ0FnSUI0Q3lFRklBQW9BaFFoQ0VGL0lRWUNRQUovSUFGREFBQUFQNUlpQVl0REFBQUFUMTBFUUNBQnFBd0JDMEdBZ0lDQWVBc2dBQ2dDRUdvaUIwRUFTQTBBSUFjZ0FDZ0NDQ0lKVGcwQUlBVWdDR29pQlVFQVNBMEFJQVVnQUNnQ0RFNE5BQ0FESUFBb0FnQWdCU0FKYkNBSGFrRURkR29pQUNvQ0FEZ0NBQ0FFSUFBcUFnUTRBZ0JCQUNFR0N5QUdDeWtCQVg4akFFRVFheUlDSkFBZ0FrRUlhaUFBSUFFUWdnWVFlQ2dDQUNFQUlBSkJFR29rQUNBQUN5d0JBWDhnQUJDWEJDQUFLQUlBQkVBZ0FCQzVCaUFBRURRYUlBQW9BZ0FoQVNBQUVQQUJHaUFCRURNTEN3OEFJQUFvQWdBZ0FDZ0NCRFlDQkFzTkFDQUFLQUlBRU5JRUdpQUFDdzBBSUFBb0FnQVExUVFhSUFBTENRQWdBQ0FCRU1rQkN3c0FJQUFnQVRZQ0FDQUFDeU1CQVg4Z0FDZ0NBQ0VDSUFBZ0FUWUNBQ0FDQkVBZ0FpQUFFRWtvQWdBUkFRQUxDd2tBSUFBZ0FSRFVCQXNKQUNBQUlBRVExd1FMQlFBUUFBQUxxd1lDQ244QmZTTUFRU0JySWdRa0FDQUVJQUFRMXdJMkFoQWdCRUVZYWlFSkl3QkJJR3NpQVNRQVFmejlBeEE5R2lBQUtBSUFJUVZCL1AwREVJa0JJUU1nQVVFQU9nQWZBa0FDUUNBRFJRMEFRZno5QXlBRklBTVFXU0lHRUR3b0FnQWlBa1VOQUFOQUlBSW9BZ0FpQWtVTkFTQUZJQUlvQWdSSEJFQWdBaWdDQkNBREVGa2dCa2NOQWd0Qi9QMERFRm9nQWtFSWFpQUFFTTRCUlEwQUN3d0JDeU1BUVJCcklnZ2tBRUg4L1FNUU5DRUFJQUZCRUdwQmlBUVFTeUFJUVFocUlBQkJBQkN4QWhDd0FpSUNLQUlBUVFocUlRQWdCQ2dDRUNFS0l3QkJFR3NpQnlRQUlBY2dDallDQ0NBQUlBY29BZ2dvQWdBMkFnQWdBRUVJYWtFQVFmZ0RFRHNpQUVJQU53TE1BU0FBUWdBM0E4QUJJQUJDL3YvLy93ODNBNEFDSUFCQ2dJQ0FnSUNBZ0svQUFEY0QrQUVnQUVLQWdJQ0FnSUNBcDhBQU53UHdBU0FBUWdBM0F0UUJJQUJCc0FKcUVJOENHaUFBUVFJMkF2QURJQUJCQURZQzZBSWdBRUtBZ0lDQWdJRFF4OEFBTndQZ0FpQUFRcTJHOGRpdTNJMk5QemNEMkFJZ0IwRVFhaVFBSUFJUVNVRUJPZ0FFSUFJb0FnQWdCVFlDQkNBQ0tBSUFRUUEyQWdBZ0NFRVFhaVFBQWtCQi9QMERBbjlCL1AwREVEMG9BZ0JCQVdxelFmejlBeEJhS2dJQUlBT3psRjVCQVNBREd3UkFJQUVnQXhEaEFVRUJjeUFEUVFGMGNqWUNEQ0FCQW45Qi9QMERFRDBvQWdCQkFXcXpRZno5QXhCYUtnSUFsWTBpQzBNQUFJQlBYU0FMUXdBQUFBQmdjUVJBSUF1cERBRUxRUUFMTmdJSVFmejlBeUFCUVF4cUlBRkJDR29RZ0FFb0FnQVF0Z1VnQlVIOC9RTVFpUUVpQXhCWklRWUxJQVlMRUR3b0FnQWlBRVVFUUNBQktBSVFRWVQrQXlnQ0FEWUNBRUdFL2dNZ0FTZ0NFRFlDQUVIOC9RTWdCaEE4UVlUK0F6WUNBQ0FCS0FJUUtBSUFSUTBCSUFFb0FoQWhBRUg4L1FNZ0FTZ0NFQ2dDQUNnQ0JDQURFRmtRUENBQU5nSUFEQUVMSUFFb0FoQWdBQ2dDQURZQ0FDQUFJQUVvQWhBMkFnQUxJQUZCRUdvUXV3RWhBa0g4L1FNUVBTSUFJQUFvQWdCQkFXbzJBZ0FnQVVFQk9nQWZJQUZCRUdvUXRRVUxJQWtnQVVFUWFpQUNFSGdnQVVFZmFoQ3lBaUFCUVNCcUpBQWdCRUVZYWhCc0lRQWdCRUVnYWlRQUlBQkJDR29MOFFJQ0JYOENmQ01BUVRCcklnRWtBQ01BUVJCcklnSWtBQ0FBS3dNQVJBQUFBQUFBQUFBQVprVUVRRUhBa3dSQnVCUVFNa0d5SUJBeVFhb21FREpCd3dBUU5VR25LaEF5UVp3dkVESVFOaEFBQUFzZ0FrRUlha0VBRUJnYUlBQWdBaWdDRExkRWplMjFvUGZHc0Q2aUlBSW9BZ2kzb0RrRENDQUNRUkJxSkFBUWdRWWhBaUFCUVNCcUVNa0ZJQUZCSUdvUVBpRURJQUJCRUdvaUJCQStJUVVnQVFKOEFrQWdBQ3NEQUNJR1JBQUFBQUFBQUFBQVpnUkFJQUFyQXdnaUIwUUFBQUFBQUFBQUFHWkZEUUVnQnlBR29Rd0NDMEhBa3dSQnVCUVFNa0d5SUJBeVFhb21FREpCMEFBUU5VR25LaEF5UVp3dkVESVFOaEFBQUF0QndKTUVRYzQxRURKQnNpQVFNa0dxSmhBeVFkRUFFRFZCcHlvUU1rR0NQQkF5RURZUUFBQUxSQUFBQUFBQVFJOUFvamtERUNBQklBVTJBZ3dnQVVHYzV3RTJBZ2dnQVNBRE5nSUVJQUZCc01nQU5nSUFJQUpCaHNJQUlBRVF4Z1VnQVVFZ2FoQTVHaUFFRURrYUlBRkJNR29rQUFzTUFDQUFJQUVReVFGQkFYTUxKQUVDZnlNQVFSQnJJZ0lrQUNBQUlBRVE5QUVoQXlBQ1FSQnFKQUFnQVNBQUlBTWJDeTBBSUFKRkJFQWdBQ2dDQkNBQktBSUVSZzhMSUFBZ0FVWUVRRUVCRHdzZ0FCRGRBeUFCRU4wREVJVUNSUXNRQUNBQUtBSUVJQUFvQWdCclFSUnRDd3dBSUFBZ0FTZ0NBRFlDQUFzS0FDQUFRUkJxRUlJQkN4QUFJQUFvQWdRZ0FDZ0NBR3RCSkcwTEVRQWdBQ0FCSUFBb0FnQW9BaHdSQXdBTEdBQWdBQzBBQUVFZ2NVVUVRQ0FCSUFJZ0FCQ2lCQm9MQzZZQkFRSi9Ba0FnQUJBM1JTQUNJQUZyUVFWSWNnMEFJQUVnQWhDMkF5QUNRUVJySVFRZ0FCQStJZ0lnQUJBM2FpRUZBa0FEUUFKQUlBSXNBQUFoQUNBQklBUlBEUUFnQUVFQlNDQUFRZjhBVG5KRkJFQWdBU2dDQUNBQ0xBQUFSdzBEQ3lBQ1FRRnFJQUlnQlNBQ2EwRUJTaHNoQWlBQlFRUnFJUUVNQVFzTElBQkJBVWdnQUVIL0FFNXlEUUVnQWl3QUFDQUVLQUlBUVFGclN3MEJDeUFEUVFRMkFnQUxDd2tBSUFBUVNTZ0NBQXRaQVFKL0l3QkJFR3NpQWlRQUlBQVFqQUVFUUNBQUtBSUFJUU1nQUJDYUFob2dBeEF6Q3lBQUlBRW9BZ2cyQWdnZ0FDQUJLUUlBTndJQUlBRkJBQkNyQVNBQ1FRQTZBQThnQVNBQ1FROXFFSlVCSUFKQkVHb2tBQXRGQVFGL0l3QkJFR3NpQlNRQUlBVWdBallDRENBRklBUTJBZ2dnQlNBRlFReHFFTUVCSVFJZ0FDQUJJQU1nQlNnQ0NCQ0RBaUVBSUFJUXdBRWdCVUVRYWlRQUlBQUxDZ0FnQUMwQUMwRUhkZ3NNQUNBQUlBRVExQVJCQVhNTERBQWdBQ0FCRU5jRVFRRnpDd29BUWN5RUF4Q1VBUUFMVUFFQmZnSkFJQU5Cd0FCeEJFQWdBU0FEUVVCcXJZWWhBa0lBSVFFTUFRc2dBMFVOQUNBQ0lBT3RJZ1NHSUFGQndBQWdBMnV0aUlRaEFpQUJJQVNHSVFFTElBQWdBVGNEQUNBQUlBSTNBd2dMRFFBZ0FDZ0NCQ0FBS0FJQWF3dHJBUUYvSUFCQ2dJQ0FnSUNBZ1BpL2Z6Y0RDQ0FBUW9DQWdJQ0FnSUQ0djM4M0F3QWdBQ0VDSUFCQkVHb2dBUkNiQVJvakFFRVFheUlCSkFBZ0FVRUlha0VBRUJnYUlBSWdBU2dDRExkRWplMjFvUGZHc0Q2aUlBRW9BZ2kzb0RrREFDQUJRUkJxSkFBZ0FBc3dBUUo5QW45QkFTQUJLZ0lBSWdJZ0FDb0NBQ0lEWFEwQUdrRUFJQUlnQTE0TkFCb2dBU2dDQkNBQUtBSUVTUXNMWVFFRmYwRUlFQWtpQkNJRklnTVFud1lnQTBHTTVBTTJBZ0FnQUJDY0FTSUJRUTFxRUVzaUFrRUFOZ0lJSUFJZ0FUWUNCQ0FDSUFFMkFnQWdBeUFDRUQwZ0FDQUJRUUZxRUVBMkFnUWdCVUc4NUFNMkFnQWdCRUhjNUFOQkRCQUlBQXNNQUNBQUlBRXRBQUE2QUFBTEN3QWdBRUhRbWdRUXdnRUxEUUFnQUNnQ0FDQUJRUXhzYWd0dkFRRi9Jd0JCZ0FKcklnVWtBQ0FFUVlEQUJIRWdBaUFEVEhKRkJFQWdCU0FCUWY4QmNTQUNJQU5ySWdKQmdBSWdBa0dBQWtraUFSc1FPeG9nQVVVRVFBTkFJQUFnQlVHQUFoQ0hBU0FDUVlBQ2F5SUNRZjhCU3cwQUN3c2dBQ0FGSUFJUWh3RUxJQVZCZ0FKcUpBQUxsUWdDQ244QmZTTUFRU0JySWdRa0FDQUVRUUUyQWhnZ0JDQUJOZ0ljSUFGQmYwb0VRQ0FFSUFFMkFnZ2dCQ0FBUWR3QWFpSUFJQVJCQ0dvUWNqWUNFQ0FFRUdrMkFnZ0NRQ0FFUVJCcUlBUkJDR29RZHdSQUlBUkJDR29pQlNBRUtBSWNOZ0lBSUFVZ0JDZ0NHRFlDQkNNQVFSQnJJZ2NrQUNBSFFRaHFJUW9qQUVFZ2F5SURKQUFnQUJBOUdpQUZLQUlBSVFnZ0FCQ0pBU0VCSUFOQkFEb0FId0pBQWtBZ0FVVU5BQ0FBSUFnZ0FSQlpJZ1lRUENnQ0FDSUNSUTBBQTBBZ0FpZ0NBQ0lDUlEwQklBZ2dBaWdDQkVjRVFDQUNLQUlFSUFFUVdTQUdSdzBDQ3lBQUVGb2dBa0VJYWlBRkVNNEJSUTBBQ3d3QkN5TUFRUkJySWdra0FDQUFFRFFoQWlBRFFSQnFRUkFRU3lBSlFRaHFJQUpCQUJDeEFoQ3dBaUlDS0FJQUlndEJDR29nQlNnQ0FEWUNBQ0FMSUFVb0FnUTJBZ3dnQWhCSlFRRTZBQVFnQWlnQ0FDQUlOZ0lFSUFJb0FnQkJBRFlDQUNBSlFSQnFKQUFDUUNBQUFuOGdBQkE5S0FJQVFRRnFzeUFBRUZvcUFnQWdBYk9VWGtFQklBRWJCRUFnQXlBQkVPRUJRUUZ6SUFGQkFYUnlOZ0lNSUFNQ2Z5QUFFRDBvQWdCQkFXcXpJQUFRV2lvQ0FKV05JZ3hEQUFDQVQxMGdERU1BQUFBQVlIRUVRQ0FNcVF3QkMwRUFDellDQ0NBRFFReHFJQU5CQ0dvUWdBRW9BZ0FoQVNNQVFSQnJJZ0lrQUNBQ0lBRTJBZ3dDUUNBQ0lBRkJBVVlFZjBFQ0JTQUJJQUZCQVd0eFJRMEJJQUVRb0FJTElnRTJBZ3dMQWtBZ0FCQ0pBU0lGSUFGSkJFQWdBQ0FCRU13RkRBRUxJQUVnQlU4TkFDQUZFT0VCSVFZQ2Z5QUFFRDBvQWdDeklBQVFXaW9DQUpXTklneERBQUNBVDEwZ0RFTUFBQUFBWUhFRVFDQU1xUXdCQzBFQUN5RUJJQUlDZnlBR0JFQWdBUkQ0QXd3QkN5QUJFS0FDQ3pZQ0NDQUNJQUpCREdvZ0FrRUlhaENBQVNnQ0FDSUJOZ0lNSUFFZ0JVOE5BQ0FBSUFFUXpBVUxJQUpCRUdva0FDQUlJQUFRaVFFaUFSQlpJUVlMSUFZTEVEd29BZ0FpQWtVRVFDQURLQUlRSUFCQkNHb2lBaWdDQURZQ0FDQUFJQU1vQWhBMkFnZ2dBQ0FHRUR3Z0FqWUNBQ0FES0FJUUtBSUFSUTBCSUFNb0FoQWhBaUFBSUFNb0FoQW9BZ0FvQWdRZ0FSQlpFRHdnQWpZQ0FBd0JDeUFES0FJUUlBSW9BZ0EyQWdBZ0FpQURLQUlRTmdJQUN5QURRUkJxRUxzQklRSWdBQkE5SWdBZ0FDZ0NBRUVCYWpZQ0FDQURRUUU2QUI4Z0EwRVFhaUlCS0FJQUlRQWdBVUVBTmdJQUlBQUVRQ0FCRUVraUFTMEFCQVJBSUFFb0FnQWFDeUFBQkVBZ0FTZ0NBQm9nQUJBekN3c0xJQW9nQTBFUWFpQUNFSGdnQTBFZmFoQ3lBaUFEUVNCcUpBQWdCQ0FIS0FJSUVIZ2FJQVFnQnkwQUREb0FCQ0FIUVJCcUpBQU1BUXNnQkVFUWFoQnNJZ0FnQUNnQ0JFRUJhallDQkFzZ0JFRWdhaVFBRHd0QndKTUVRZnlKQVJBeVFZdUhBUkF5UWFNbEVESkJvZ0lRTlVHYUtoQXlRWldNQVJBeUVEWVFBQUFMa1FRQkEzOENRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBVUYvU2dSQUlBQW9BalFpQlNBQlRBMEJJQUpCZjB3TkFpQUFLQUk0SWdZZ0Frd05BeUFEUVg5TURRUWdBQ2dDUENJSElBTk1EUVVnQkVGL1RBMEdJQUFvQWtBZ0JFd05CeUFDSUFWc0lBRnFJZ0VnQUNnQ1ZDQURiR29nQUNnQ1dDQUViR29pQUNBRUlBZHNJQU5xSUFVZ0JteHNJQUZxU2cwSUlBQVBDMEhBa3dSQmhaRUJFREpCaTRjQkVESkJveVVRTWtHbEFSQTFRWm9xRURKQi81SUJFRElRTmd3SUMwSEFrd1JCczVRQkVESkJpNGNCRURKQm95VVFNa0dtQVJBMVFab3FFREpCLzVJQkVESVFOZ3dIQzBIQWt3UkJtcFlCRURKQmk0Y0JFREpCb3lVUU1rR25BUkExUVpvcUVESkI2NWdCRURJUU5nd0dDMEhBa3dSQnpwc0JFREpCaTRjQkVESkJveVVRTWtHb0FSQTFRWm9xRURKQjY1Z0JFRElRTmd3RkMwSEFrd1JCeDUwQkVESkJpNGNCRURKQm95VVFNa0dwQVJBMVFab3FFREpCK1o4QkVESVFOZ3dFQzBIQWt3UkJyNklCRURKQmk0Y0JFREpCb3lVUU1rR3FBUkExUVpvcUVESkIrWjhCRURJUU5nd0RDMEhBa3dSQjY2UUJFREpCaTRjQkVESkJveVVRTWtHckFSQTFRWm9xRURKQnU2WUJFRElRTmd3Q0MwSEFrd1JCcTZrQkVESkJpNGNCRURKQm95VVFNa0dzQVJBMVFab3FFREpCdTZZQkVESVFOZ3dCQzBIQWt3UkJrcXNCRURKQmk0Y0JFREpCb3lVUU1rR3dBUkExUVpvcUVESkJsWXdCRURJUU5nc1FBQUFMSWdFQmZ5TUFRUkJySWdJa0FDQUFJQUVnQVJDY0FSQ3NCQ0FDUVJCcUpBQWdBQXQvQVFOL0lBQWhBUUpBSUFCQkEzRUVRQU5BSUFFdEFBQkZEUUlnQVVFQmFpSUJRUU54RFFBTEN3TkFJQUVpQWtFRWFpRUJJQUlvQWdBaUEwRi9jeUFEUVlHQ2hBaHJjVUdBZ1lLRWVIRkZEUUFMSUFOQi93RnhSUVJBSUFJZ0FHc1BDd05BSUFJdEFBRWhBeUFDUVFGcUlnRWhBaUFERFFBTEN5QUJJQUJyQ3dzQUlBQkIySm9FRU1JQkN3a0FJQUFnQVRZQ0JBc0pBQ0FBSUFFMkFnQUxFUUFnQUNBQklBRW9BZ0FvQWhRUkFnQUxEd0FnQUNBQUtBSUFLQUlRRVFBQUN4RUFJQUFnQVNBQUtBSUFLQUlzRVFNQUM5SUpBZ1IvQkg0akFFSHdBR3NpQlNRQUlBUkMvLy8vLy8vLy8vLy9BSU1oQ2dKQUFrQWdBVUlCZlNJTFFuOVJJQUpDLy8vLy8vLy8vLy8vQUlNaUNTQUJJQXRXclh4Q0FYMGlDMEwvLy8vLy8vKy8vLzhBVmlBTFF2Ly8vLy8vLzcvLy93QlJHMFVFUUNBRFFnRjlJZ3RDZjFJZ0NpQURJQXRXclh4Q0FYMGlDMEwvLy8vLy8vKy8vLzhBVkNBTFF2Ly8vLy8vLzcvLy93QlJHdzBCQ3lBQlVDQUpRb0NBZ0lDQWdNRC8vd0JVSUFsQ2dJQ0FnSUNBd1AvL0FGRWJSUVJBSUFKQ2dJQ0FnSUNBSUlRaEJDQUJJUU1NQWdzZ0ExQWdDa0tBZ0lDQWdJREEvLzhBVkNBS1FvQ0FnSUNBZ01ELy93QlJHMFVFUUNBRVFvQ0FnSUNBZ0NDRUlRUU1BZ3NnQVNBSlFvQ0FnSUNBZ01ELy93Q0ZoRkFFUUVLQWdJQ0FnSURnLy84QUlBSWdBU0FEaFNBQ0lBU0ZRb0NBZ0lDQWdJQ0FnSCtGaEZBaUJoc2hCRUlBSUFFZ0Joc2hBd3dDQ3lBRElBcENnSUNBZ0lDQXdQLy9BSVdFVUEwQklBRWdDWVJRQkVBZ0F5QUtoRUlBVWcwQ0lBRWdBNE1oQXlBQ0lBU0RJUVFNQWdzZ0F5QUtoRkJGRFFBZ0FTRURJQUloQkF3QkN5QURJQUVnQVNBRFZDQUpJQXBVSUFrZ0NsRWJJZ2NiSVFvZ0JDQUNJQWNiSWd0Qy8vLy8vLy8vUDRNaENTQUNJQVFnQnhzaUFrSXdpS2RCLy84QmNTRUlJQXRDTUlpblFmLy9BWEVpQmtVRVFDQUZRZUFBYWlBS0lBa2dDaUFKSUFsUUlnWWJlU0FHUVFaMHJYeW5JZ1pCRDJzUWtBRWdCU2tEYUNFSklBVXBBMkFoQ2tFUUlBWnJJUVlMSUFFZ0F5QUhHeUVESUFKQy8vLy8vLy8vUDRNaEJDQUlSUVJBSUFWQjBBQnFJQU1nQkNBRElBUWdCRkFpQnh0NUlBZEJCblN0ZktjaUIwRVBheENRQVVFUUlBZHJJUWdnQlNrRFdDRUVJQVVwQTFBaEF3c2dCRUlEaGlBRFFqMkloRUtBZ0lDQWdJQ0FCSVFoQkNBSlFnT0dJQXBDUFlpRUlRa2dBaUFMaFNFTUFuNGdBMElEaGlJQklBWWdDR3NpQjBVTkFCb2dCMEgvQUVzRVFFSUFJUVJDQVF3QkN5QUZRVUJySUFFZ0JFR0FBU0FIYXhDUUFTQUZRVEJxSUFFZ0JDQUhFS0lDSUFVcEF6Z2hCQ0FGS1FNd0lBVXBBMEFnQlNrRFNJUkNBRkt0aEFzaEFpQUpRb0NBZ0lDQWdJQUVoQ0VKSUFwQ0E0WWhBd0pBSUF4Q2YxY0VRQ0FESUFKOUlnRWdDU0FFZlNBQ0lBTldyWDBpQklSUUJFQkNBQ0VEUWdBaEJBd0RDeUFFUXYvLy8vLy8vLzhEVmcwQklBVkJJR29nQVNBRUlBRWdCQ0FFVUNJSEcza2dCMEVHZEsxOHAwRU1heUlIRUpBQklBWWdCMnNoQmlBRktRTW9JUVFnQlNrRElDRUJEQUVMSUFJZ0Ezd2lBU0FDVkswZ0JDQUpmSHdpQkVLQWdJQ0FnSUNBQ0lOUURRQWdBVUlCZ3lBRVFqK0dJQUZDQVlpRWhDRUJJQVpCQVdvaEJpQUVRZ0dJSVFRTElBdENnSUNBZ0lDQWdJQ0FmNE1oQWlBR1FmLy9BVTRFUUNBQ1FvQ0FnSUNBZ01ELy93Q0VJUVJDQUNFRERBRUxJQVpCQVU0RWZpQUdyUVVnQlVFUWFpQUJJQVFnQmtIL0FHb1FrQUVnQlNBQklBUkJBU0FHYXhDaUFpQUZLUU1BSUFVcEF4QWdCU2tER0lSQ0FGS3RoQ0VCSUFVcEF3Z2hCRUlBQ3lFS0lBR25RUWR4SWdaQkJFdXRJQVJDUFlZZ0FVSURpSVFpQVh3aUF5QUJWSzBnQkVJRGlFTC8vLy8vLy84L2d5QUtRakNHaENBQ2hId2hCQUpBSUFaQkJFWUVRQ0FFSUFOQ0FZTWlBU0FEZkNJRElBRlVyWHdoQkF3QkN5QUdSUTBCQ3dzZ0FDQUROd01BSUFBZ0JEY0RDQ0FGUWZBQWFpUUFDd1FBUVFBTEVRQWdBQ0FBS0FJQVFRaHFOZ0lBSUFBTERRQWdBQ0FEbENBQklBS1Vrd3NOQUNBQUtBSUFJQUZCSkd4cUN4QUFJQUFvQWdRZ0FDZ0NBR3RCQlhVTGZ3SUNmd0YrSXdCQkVHc2lBeVFBSUFBQ2ZpQUJSUVJBUWdBTUFRc2dBeUFCSUFGQkgzVWlBbW9nQW5NaUFxMUNBQ0FDWnlJQ1FkRUFhaENRQVNBREtRTUlRb0NBZ0lDQWdNQUFoVUdlZ0FFZ0FtdXRRakNHZkNBQlFZQ0FnSUI0Y2ExQ0lJYUVJUVFnQXlrREFBczNBd0FnQUNBRU53TUlJQU5CRUdva0FBc3hBUUo5SUFFcUFnQWdBQ29DQUNJRGt5QUNLZ0lFSUFBcUFnUWlCSk9VSUFFcUFnUWdCSk1nQWlvQ0FDQURrNVNUQ3drQUlBQWdBVG9BQ3d0akFDQUNLQUlFUWJBQmNTSUNRU0JHQkVBZ0FROExBa0FnQWtFUVJ3MEFBa0FDUUNBQUxRQUFJZ0pCSzJzT0F3QUJBQUVMSUFCQkFXb1BDeUFDUVRCSElBRWdBR3RCQWtoeURRQWdBQzBBQVVFZ2NrSDRBRWNOQUNBQVFRSnFJUUFMSUFBTEpnRUJmeU1BUVJCcklnRWtBQ0FCUVFocUlBQVFQaEI0S0FJQUlRQWdBVUVRYWlRQUlBQUxpZ0VCQkg4Z0FDZ0NURUVBVGlFRElBQW9BZ0JCQVhFaUJFVUVRQ0FBS0FJMElnRUVRQ0FCSUFBb0FqZzJBamdMSUFBb0FqZ2lBZ1JBSUFJZ0FUWUNOQXNnQUVHTWlBUW9BZ0JHQkVCQmpJZ0VJQUkyQWdBTEN5QUFFTm9ER2lBQUlBQW9BZ3dSQUFBYUlBQW9BbUFpQVFSQUlBRVFNd3NDUUNBRVJRUkFJQUFRTXd3QkN5QURSUTBBQ3d2Y0FRRUJmU0FBS2dJQUlRSWdBQ0FCS2dJQU9BSUFJQUVnQWpnQ0FDQUFLZ0lFSVFJZ0FDQUJLZ0lFT0FJRUlBRWdBamdDQkNBQUtnSUlJUUlnQUNBQktnSUlPQUlJSUFFZ0FqZ0NDQ0FBS2dJTUlRSWdBQ0FCS2dJTU9BSU1JQUVnQWpnQ0RDQUFLZ0lRSVFJZ0FDQUJLZ0lRT0FJUUlBRWdBamdDRUNBQUtnSVVJUUlnQUNBQktnSVVPQUlVSUFFZ0FqZ0NGQ0FBS2dJWUlRSWdBQ0FCS2dJWU9BSVlJQUVnQWpnQ0dDQUFLZ0ljSVFJZ0FDQUJLZ0ljT0FJY0lBRWdBamdDSENBQUtnSWdJUUlnQUNBQktnSWdPQUlnSUFFZ0FqZ0NJQXNQQUNBQUtBSUlJQUFvQWdBMkFnQUxFd0FnQUNBQkVJb0RJQUJCQkdvZ0FoQ2ZBUXVpQWdFRGZ5TUFRVUJxSWdNa0FDQUFLQUlBSWdWQkJHc29BZ0FoQkNBRlFRaHJLQUlBSVFVZ0EwRUFOZ0lVSUFNZ0FUWUNFQ0FESUFBMkFnd2dBeUFDTmdJSVFRQWhBU0FEUVJocVFRQkJKeEE3R2lBQUlBVnFJUUFDUUNBRUlBSkJBQkNCQVFSQUlBTkJBVFlDT0NBRUlBTkJDR29nQUNBQVFRRkJBQ0FFS0FJQUtBSVVFUXNBSUFCQkFDQURLQUlnUVFGR0d5RUJEQUVMSUFRZ0EwRUlhaUFBUVFGQkFDQUVLQUlBS0FJWUVRVUFBa0FDUUNBREtBSXNEZ0lBQVFJTElBTW9BaHhCQUNBREtBSW9RUUZHRzBFQUlBTW9BaVJCQVVZYlFRQWdBeWdDTUVFQlJoc2hBUXdCQ3lBREtBSWdRUUZIQkVBZ0F5Z0NNQTBCSUFNb0FpUkJBVWNOQVNBREtBSW9RUUZIRFFFTElBTW9BaGdoQVFzZ0EwRkFheVFBSUFFTEVRQWdBQ0FCSUFFb0FnQW9BaHdSQWdBTEVRQWdBQ0FCSUFFb0FnQW9BaGdSQWdBTEV3QWdBQ0FCSUFJZ0FDZ0NBQ2dDREJFRUFBc0hBQ0FBSUFGR0N5Y0JBWDhnQWtFQVRnUi9JQUFvQWdnZ0FrSC9BWEZCQVhScUx3RUFJQUZ4UVFCSEJVRUFDd3NIQUNBQUVEZEZDMEVCQW44Q1FDQUNSUTBBQTBBZ0FTQURRUU4wYWlnQ0FDSUVSUTBCSUFBZ0JFWUVRQ0FCSUFOQkEzUnFLQUlFRHdzZ0EwRUJhaUlESUFKSERRQUxDMEVBQzJrQkEzNGdBQ0FDUWlDSUlnTWdBVUlnaUNJRWZpQUNRdi8vLy84UGd5SUNJQUZDLy8vLy93K0RJZ0YrSWdWQ0lJZ2dBaUFFZm53aUFrSWdpSHdnQVNBRGZpQUNRdi8vLy84UGczd2lBVUlnaUh3M0F3Z2dBQ0FGUXYvLy8vOFBneUFCUWlDR2hEY0RBQXNVQVFGL0lBQW9BZ0FoQVNBQVFRQTJBZ0FnQVFzK0FRSi9RUXdRT2lJQ0JIOGdBaUFBSUFGc1FRTjBFRG9pQXpZQ0FDQURSUVJBSUFJUU0wRUFEd3NnQWlBQk5nSUlJQUlnQURZQ0JDQUNCVUVBQ3dzU0FDQUFFRFFvQWdBZ0FDZ0NBR3RCREcwTEJ3QWdBQkJHR2dzUEFDQUFJQUFvQWdBb0Fnd1JBQUFMRWdBZ0FDZ0NBQ0lBQkVBZ0FCREZCQm9MQ3hFQUlBQWdBU2dDQUJERkJEWUNBQ0FBQzBrQkFuOENmeUFBS0FJQUlnTWhBaUFCRUdBaUFTRUFJQUpCRUdvaUFoQkRJQUJMQkg4Z0FpQUFFRHdvQWdCQkFFY0ZRUUFMUlFzRVFCQjhBQXNnQTBFUWFpQUJFRHdvQWdBTENBQWdBRUgvQVhFTFB3SUNmd0YrSUFBZ0FUY0RjQ0FBSUFBb0FnZ2lBaUFBS0FJRUlnTnJyQ0lFTndONElBQWdBeUFCcDJvZ0FpQUJJQVJUR3lBQ0lBRkNBRkliTmdKb0N3b0FJQUJCTUd0QkNra0xUd0VCZkNBQUlBQ2lJZ0JFZ1Y0TS9mLy8zNytpUkFBQUFBQUFBUEEvb0NBQUlBQ2lJZ0ZFUWpvRjRWTlZwVCtpb0NBQUlBR2lJQUJFYVZEdTRFS1QrVDZpUkNjZUQraUh3RmEvb0tLZ3RndExBUUo4SUFBZ0FLSWlBU0FBb2lJQ0lBRWdBYUtpSUFGRXAwWTdqSWZOeGo2aVJIVG55dUw1QUNxL29LSWdBaUFCUkxMN2Jva1FFWUUvb2tSM3JNdFVWVlhGdjZDaUlBQ2dvTFlMRlFBZ0FDQUJFS1VHSUFCQkJHb2dBVUVFYWhCS0N3MEFJQUFvQWdBZ0FTZ0NBRVlMSkFFQ2Z5TUFRUkJySWdJa0FDQUJJQUFROUFFaEF5QUNRUkJxSkFBZ0FTQUFJQU1iQ3k0QUFrQWdBQ2dDQkVIS0FIRWlBQVJBSUFCQndBQkdCRUJCQ0E4TElBQkJDRWNOQVVFUUR3dEJBQThMUVFvTCtnRUNBMzRDZnlNQVFSQnJJZ1VrQUFKK0lBRzlJZ05DLy8vLy8vLy8vLy8vQUlNaUFrS0FnSUNBZ0lDQUNIMUMvLy8vLy8vLy8rLy9BRmdFUUNBQ1FqeUdJUVFnQWtJRWlFS0FnSUNBZ0lDQWdEeDhEQUVMSUFKQ2dJQ0FnSUNBZ1BqL0FGb0VRQ0FEUWp5R0lRUWdBMElFaUVLQWdJQ0FnSURBLy84QWhBd0JDeUFDVUFSQVFnQU1BUXNnQlNBQ1FnQWdBNmRuUVNCcUlBSkNJSWluWnlBQ1FvQ0FnSUFRVkJzaUJrRXhhaENRQVNBRktRTUFJUVFnQlNrRENFS0FnSUNBZ0lEQUFJVkJqUGdBSUFacnJVSXdob1FMSVFJZ0FDQUVOd01BSUFBZ0FpQURRb0NBZ0lDQWdJQ0FnSCtEaERjRENDQUZRUkJxSkFBTGR3QWdBQ0FCS2dJQUlBS1VPQUlBSUFBZ0FTb0NCQ0FDbERnQ0JDQUFJQUVxQWdnZ0FwUTRBZ2dnQUNBQktnSU1JQUtVT0FJTUlBQWdBU29DRUNBQ2xEZ0NFQ0FBSUFFcUFoUWdBcFE0QWhRZ0FDQUJLZ0lZSUFLVU9BSVlJQUFnQVNvQ0hDQUNsRGdDSENBQUlBRXFBaUFnQXBRNEFpQUxDUUFnQVNBQ0VNa0JDejBCQVg4Z0FDZ0NCQ0lBQkVBZ0FCRFVBZ1JBQWtBZ0FFRUlhaUlCS0FJQUJFQWdBUkR6QTBGL1J3MEJDeUFBSUFBb0FnQW9BaEFSQVFBTEN3c0xFUUFnQUNBQUtBSUFRUWhyTmdJQUlBQUxFZ0FnQUJBMEtBSUFJQUFvQWdCclFRTjFDMElCQVg4Z0FTQUNiQ0VFSUFRQ2Z5QURLQUpNUVg5TUJFQWdBQ0FFSUFNUW9nUU1BUXNnQUNBRUlBTVFvZ1FMSWdCR0JFQWdBa0VBSUFFYkR3c2dBQ0FCYmdzS0FFSG80Z01RbEFFQUN4QUFJQUFnQVVHQWdJQ0FlSEkyQWdnTFdRRUNmeU1BUVJCcklnSWtBQ0FBRUl3QkJFQWdBQ2dDQUNFRElBQVFtZ0lhSUFNUU13c2dBQ0FCS0FJSU5nSUlJQUFnQVNrQ0FEY0NBQ0FCUVFBUXF3RWdBa0VBTmdJTUlBRWdBa0VNYWhDREFTQUNRUkJxSkFBTG9BRUJCSDhqQUVFUWF5SUhKQUFDUUNBQVJRMEFJQVFvQWd3aEJpQUNJQUZySWdoQkFVNEVRQ0FBSUFFZ0NCQzlBaUFJUncwQkN5QUdJQU1nQVdzaUFXdEJBQ0FCSUFaSUd5SUJRUUZPQkVBZ0FDQUhJQUVnQlJEOUJpSUZFRDRnQVJDOUFpRUdJQVVRT1JvZ0FTQUdSdzBCQ3lBRElBSnJJZ0ZCQVU0RVFDQUFJQUlnQVJDOUFpQUJSdzBCQ3lBRUVQd0dJQUFoQ1FzZ0IwRVFhaVFBSUFrTHZ3RUJBMzhqQUVFUWF5SUZKQUFnQlNBQk5nSUlRUUFoQVVFR0lRWUNRQUpBSUFBZ0JVRUlhaEI2RFFCQkJDRUdJQU5CZ0JBZ0FCQm1JZ2NRdFFGRkRRQWdBeUFIRU1BQ0lRRURRQUpBSUFBUWRSb2dBVUV3YXlFQklBQWdCVUVJYWhDTkFVVWdCRUVDU0hJTkFDQURRWUFRSUFBUVppSUdFTFVCUlEwRElBUkJBV3NoQkNBRElBWVF3QUlnQVVFS2JHb2hBUXdCQ3d0QkFpRUdJQUFnQlVFSWFoQjZSUTBCQ3lBQ0lBSW9BZ0FnQm5JMkFnQUxJQVZCRUdva0FDQUJDNzhCQVFOL0l3QkJFR3NpQlNRQUlBVWdBVFlDQ0VFQUlRRkJCaUVHQWtBQ1FDQUFJQVZCQ0dvUWV3MEFRUVFoQmlBRFFZQVFJQUFRWnlJSEVMY0JSUTBBSUFNZ0J4REJBaUVCQTBBQ1FDQUFFSFlhSUFGQk1Hc2hBU0FBSUFWQkNHb1FqZ0ZGSUFSQkFraHlEUUFnQTBHQUVDQUFFR2NpQmhDM0FVVU5BeUFFUVFGcklRUWdBeUFHRU1FQ0lBRkJDbXhxSVFFTUFRc0xRUUloQmlBQUlBVkJDR29RZTBVTkFRc2dBaUFDS0FJQUlBWnlOZ0lBQ3lBRlFSQnFKQUFnQVF1Y0FRRURmeU1BUVJCcklnUWtBQ0FFSUFFMkFnd2dCQ0FETmdJSUlBUWdCRUVNYWhEQkFTRUdJQVFvQWdnaEF5TUFRUkJySWdFa0FDQUJJQU0yQWd3Z0FTQUROZ0lJUVg4aEJRSkFRUUJCQUNBQ0lBTVFnd0lpQTBFQVNBMEFJQUFnQTBFQmFpSURFRG9pQURZQ0FDQUFSUTBBSUFBZ0F5QUNJQUVvQWd3UWd3SWhCUXNnQVVFUWFpUUFJQVVoQUNBR0VNQUJJQVJCRUdva0FDQUFDellBSUFJRWZ5QUNCRUFEUUNBQUlBRW9BZ0EyQWdBZ0FFRUVhaUVBSUFGQkJHb2hBU0FDUVFGcklnSU5BQXNMUVFBRklBQUxHZ3NRQUNBQ0JFQWdBQ0FCSUFJUVFCb0xDdzhBSUFBUU5DZ0NBQ0FBS0FJQWF3c1NBQ0FBRURRb0FnQWdBQ2dDQUd0QkZHMEw5QUVCQW44Z0FpQUVTQVJBSUFBZ0FTQUNJQVFRYUVVRVFFRi9Ed3NnQUNnQ0RDRUNJQUFvQWdnaEFRc2dCRUVDZENJR1FaQzlBbW9vQWdBZ0FTQUNJQVJySWdKMWNTSUZJQU1nQm1vb0FnQktCRUFEUUNBQ1FRQk1CRUFnQUNBQklBSkJBUkJvUlFSQVFYOFBDeUFBS0FJTUlRSWdBQ2dDQ0NFQkN5QUJJQUpCQVdzaUFuWkJBWEVnQlVFQmRISWlCU0FESUFSQkFXb2lCRUVDZEdvb0FnQktEUUFMQ3lBQUlBSTJBZ3dnQUNBQk5nSUlJQVJCRVU0RVFDQUFLQUlRSWdBb0FnQWlBVUg1QURZQ0ZDQUFRWDhnQVNnQ0JCRUNBRUVBRHdzZ0F5Z0NqQUVnQXlBRVFRSjBhaWdDU0NBRmFtb3RBQkVMSndFQmZ5TUFRUkJySWdJa0FDQUFRUUpCOElJQ1FjRC9BVUhPQUNBQkVBVWdBa0VRYWlRQUM4OEJBZ0YvQW4wZ0FDQUJJQUVnQWtFQ2RDSURhaUlDS2dJQWpCRE5BU0FBSUFOcUlnTWdBeW9DQUVNQUFJQS9ramdDQUNBQUlBRkJKR29nQWlvQ0pJd1FpQUlnQUNBQlFjZ0FhaUFDS2dKSWpCQ0lBaUFBSUFGQjdBQnFJQUlxQW15TUVJZ0NJQUFnQVVHUUFXb2dBaW9Da0FHTUVJZ0NJQUFnQVVHMEFXb2dBaW9DdEFHTUVJZ0NJQUFnQVVIWUFXb2dBaW9DMkFHTUVJZ0NJQUFnQVVIOEFXb2dBaW9DL0FHTUVJZ0NJQUFRVmlJRVF3QUFBQUJjQkVBZ0FDQUFRd0FBZ0Q4Z0JKRWlCWlVRelFFTElBVUxFUUFnQUNBQVFRRnJjVVVnQUVFQ1MzRUxzZ0VCQlg4Q2Z5QUNRd0FBQUQrU0lnS0xRd0FBQUU5ZEJFQWdBcWdNQVF0QmdJQ0FnSGdMSVFVZ0FDZ0NGQ0VJUVg4aEJnSkFBbjhnQVVNQUFBQS9raUlCaTBNQUFBQlBYUVJBSUFHb0RBRUxRWUNBZ0lCNEN5QUFLQUlRYWlJSFFRQklEUUFnQnlBQUtBSUlJZ2xPRFFBZ0JTQUlhaUlGUVFCSURRQWdCU0FBS0FJTVRnMEFJQU1nQUNnQ0JDQUZJQWxzSUFkcVFRTjBhaUlBS2dJQU9BSUFJQVFnQUNvQ0JEZ0NBRUVBSVFZTElBWUw0Z0lCQkg4Q2ZTQUFJQUdTSUFHOFFmLy8vLzhIY1VHQWdJRDhCMDFCQUNBQXZFSC8vLy8vQjNGQmdZQ0EvQWRKRzBVTkFCb2dBYndpQWtHQWdJRDhBMFlFUUNBQUVJa0ZEQUVMSUFKQkhuWkJBbkVpQlNBQXZDSURRUjkyY2lFRUFrQUNRQUpBSUFOQi8vLy8vd2R4SWdORkJFQUNRQ0FFUVFKckRnSUNBQU1MUTlzUFNjQU1CQXNnQWtILy8vLy9CM0VpQWtHQWdJRDhCMGNFUUVQYkQ4ay9JQUNZSUFKRkRRUWFROXNQeVQ4Z0FKZ2dBMEdBZ0lEOEIwZEJBQ0FDUVlDQWdPZ0FhaUFEVHh0RkRRUWFBbjBnQlFSQVF3QUFBQUFnQTBHQWdJRG9BR29nQWtrTkFSb0xJQUFnQVpXTEVJa0ZDeUVBQWtBQ1FBSkFJQVFPQXdVQUFRSUxJQUNNREFZTFE5c1BTVUFnQUVNdXZic3prcE1NQlFzZ0FFTXV2YnN6a2tQYkQwbkFrZ3dFQ3lBRFFZQ0FnUHdIUmcwQ0lBUkJBblJCd1BvQ2Fpb0NBQXdEQzBQYkQwbEFJUUFMSUFBTUFRc2dCRUVDZEVHdytnSnFLZ0lBQ3dzc0FRRi9JQUFRM2dJZ0FDZ0NBQVJBSUFBUXd3WWdBQkEwR2lBQUtBSUFJUUVnQUJEUkFSb2dBUkF6Q3d2VUF3RURmeU1BUVNCcklnZ2tBQ0FJSUFJMkFoQWdDQ0FCTmdJWUlBaEJDR29nQXhCSElBaEJDR29RbGdFaENTQUlRUWhxRUVJZ0JFRUFOZ0lBUVFFaEFnSkFBMEFnQWtFQmNVVWdCaUFIUm5JTkFRSkFJQWhCR0dvZ0NFRVFhaEI2RFFBQ1FDQUpJQVlvQWdBUXdBSkJKVVlFUUNBR1FRUnFJZ0lnQjBZTkFrRUFJUW9DZnlBSklBSW9BZ0FRd0FJaUFVSEZBRVlnQVVIL0FYRkJNRVp5UlFSQUlBWWhBaUFCREFFTElBWkJDR29nQjBZTkF5QUJJUW9nQ1NBR0tBSUlFTUFDQ3lFQklBZ2dBQ0FJS0FJWUlBZ29BaEFnQXlBRUlBVWdBU0FLSUFBb0FnQW9BaVFSRFFBMkFoZ2dBa0VJYWlFR0RBRUxJQWxCZ01BQUlBWW9BZ0FRdFFFRVFBTkFBa0FnQnlBR1FRUnFJZ1pHQkVBZ0J5RUdEQUVMSUFsQmdNQUFJQVlvQWdBUXRRRU5BUXNMQTBBZ0NFRVlhaUFJUVJCcUVJMEJSUTBDSUFsQmdNQUFJQWhCR0dvUVpoQzFBVVVOQWlBSVFSaHFFSFVhREFBTEFBc2dDU0FJUVJocUVHWVFoZ0VnQ1NBR0tBSUFFSVlCUmdSQUlBWkJCR29oQmlBSVFSaHFFSFVhREFFTElBUkJCRFlDQUFzZ0JDZ0NBRVVoQWd3QkN3c2dCRUVFTmdJQUN5QUlRUmhxSUFoQkVHb1FlZ1JBSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dDQ2dDR0NFQUlBaEJJR29rQUNBQUM5UURBUU4vSXdCQklHc2lDQ1FBSUFnZ0FqWUNFQ0FJSUFFMkFoZ2dDRUVJYWlBREVFY2dDRUVJYWhDZEFTRUpJQWhCQ0dvUVFpQUVRUUEyQWdCQkFTRUNBa0FEUUNBQ1FRRnhSU0FHSUFkR2NnMEJBa0FnQ0VFWWFpQUlRUkJxRUhzTkFBSkFJQWtnQml3QUFCREJBa0VsUmdSQUlBWkJBV29pQWlBSFJnMENRUUFoQ2dKL0lBa2dBaXdBQUJEQkFpSUJRY1VBUmlBQlFmOEJjVUV3Um5KRkJFQWdCaUVDSUFFTUFRc2dCa0VDYWlBSFJnMERJQUVoQ2lBSklBWXNBQUlRd1FJTElRRWdDQ0FBSUFnb0FoZ2dDQ2dDRUNBRElBUWdCU0FCSUFvZ0FDZ0NBQ2dDSkJFTkFEWUNHQ0FDUVFKcUlRWU1BUXNnQ1VHQXdBQWdCaXdBQUJDM0FRUkFBMEFDUUNBSElBWkJBV29pQmtZRVFDQUhJUVlNQVFzZ0NVR0F3QUFnQml3QUFCQzNBUTBCQ3dzRFFDQUlRUmhxSUFoQkVHb1FqZ0ZGRFFJZ0NVR0F3QUFnQ0VFWWFoQm5FTGNCUlEwQ0lBaEJHR29RZGhvTUFBc0FDeUFKSUFoQkdHb1FaeER3QWlBSklBWXNBQUFROEFKR0JFQWdCa0VCYWlFR0lBaEJHR29RZGhvTUFRc2dCRUVFTmdJQUN5QUVLQUlBUlNFQ0RBRUxDeUFFUVFRMkFnQUxJQWhCR0dvZ0NFRVFhaEI3QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFJS0FJWUlRQWdDRUVnYWlRQUlBQUxyUUVCQkg4akFFRVFheUlJSkFBQ1FDQUFSUTBBSUFRb0Fnd2hCaUFDSUFGcklnZEJBVTRFUUNBQUlBRWdCMEVDZFNJSEVMMENJQWRIRFFFTElBWWdBeUFCYTBFQ2RTSUJhMEVBSUFFZ0JrZ2JJZ0ZCQVU0RVFDQUFJQWdnQVNBRkVLTUhJZ1VRUGlBQkVMMENJUVlnQlJBNUdpQUJJQVpIRFFFTElBTWdBbXNpQVVFQlRnUkFJQUFnQWlBQlFRSjFJZ0VRdlFJZ0FVY05BUXNnQkJEOEJpQUFJUWtMSUFoQkVHb2tBQ0FKQ3hZQUlBQWdBU0FDSUFNZ0FDZ0NBQ2dDTUJFSkFCb0xGZ0FnQUNBQklBSWdBeUFBS0FJQUtBSWdFUWtBR2dzb0FRRi9Jd0JCRUdzaUF5UUFJQU1nQWpZQ0RDQUFJQUVnQWhENUJDRUFJQU5CRUdva0FDQUFDd1FBSUFBTG5BSUNCSDhGZkNBQUlBTkJBblFpQjJvb0FnQWlDQ0FCSUFKQkFuUWlDV29vQWdBaUNtd2dBQ0FKYWlnQ0FDSUpJQUVnQjJvb0FnQWlCMnhydHlFUElBa2dDR3UzSVF3Z0J5QUthN2NoRFNBQ1FRRnFJZ2NoQ0FOQUlBTWdCMHhGQkVBZ0RTQUFJQWRCQW5RaUNXb29BZ0Mzb2lBTUlBRWdDV29vQWdDM29xQWdENkFpRGlBT29pSU9JQXNnQ3lBT1l5SUpHeUVMSUFjZ0NDQUpHeUVJSUFkQkFXb2hCd3dCQ3dzQ1FDQUVJQXNnRFNBTm9pQU1JQXlpb0tOakJFQkJmeUVISUFBZ0FTQUNJQWdnQkNBRklBWVE3QUZCQUVnTkFTQUdLQUlBSWdKQkJVb05BU0FGSUFKQkFuUnFJQWcyQWdBZ0JpQUdLQUlBUVFGcU5nSUFJQUFnQVNBSUlBTWdCQ0FGSUFZUTdBRkJBRWdOQVF0QkFDRUhDeUFIQzJrQkFuMGdBQ0FCS2dJSUlBSXFBZ0FpQXlBQktnSUFsQ0FDS2dJRUlnUWdBU29DQkpTU2tpQUJLZ0lnSUFFcUFoZ2dBNVFnQVNvQ0hDQUVsSktTSWdPVk9BSUFJQUFnQVNvQ0ZDQUJLZ0lNSUFJcUFnQ1VJQUVxQWhBZ0Fpb0NCSlNTa2lBRGxUZ0NCQXNTQUNBQUlBSTJBZ1FnQUNBQk5nSUFJQUFMRGdBZ0FDQUJJQUpCQW5RUVFCb0xFZ0FnQUJBMEtBSUFJQUFvQWdCclFRSjFDeElBSUFBUU5DZ0NBQ0FBS0FJQWEwRWtiUXMzQVFGL0l3QkJFR3NpQWlRQUlBSWdBQ2dDQURZQ0NDQUNJQUlvQWdnZ0FVRURkR28yQWdnZ0FpZ0NDQ0VBSUFKQkVHb2tBQ0FBQzRJQkFRRi9Ba0FnQVNBQUtBSVFTUVJBSUFBb0FoUWlBeUFDVFEwQklBQkJCR29nQVNBRGJDQUNhaEJNRHd0QndKTUVRZnkyQVJBeVFibTNBUkF5UWZJa0VESkIyZ0VRTlVINktSQXlRZHU0QVJBeUVEWVFBQUFMUWNDVEJFR0d1UUVRTWtHNXR3RVFNa0h5SkJBeVFkc0JFRFZCK2lrUU1rSFJ1UUVRTWhBMkVBQUFDdzBBSUFBb0FnQWdBU2dDQUVrTEF3QUJDNmdCQUFKQUlBRkJnQWhPQkVBZ0FFUUFBQUFBQUFEZ2Y2SWhBQ0FCUWY4UFNBUkFJQUZCL3dkcklRRU1BZ3NnQUVRQUFBQUFBQURnZjZJaEFDQUJRZjBYSUFGQi9SZElHMEgrRDJzaEFRd0JDeUFCUVlGNFNnMEFJQUJFQUFBQUFBQUFFQUNpSVFBZ0FVR0RjRW9FUUNBQlFmNEhhaUVCREFFTElBQkVBQUFBQUFBQUVBQ2lJUUFnQVVHR2FDQUJRWVpvU2h0Qi9BOXFJUUVMSUFBZ0FVSC9CMnF0UWpTR3Y2SUxEd0FnQUNBQUtBSUFLQUlrRVFBQUN4RUFJQUFnQVNBQktBSUFLQUlnRVFJQUN4RUFJQUFnQVNBQktBSUFLQUlzRVFJQUN3d0FJQUJCZ29hQUlEWUFBQXN1QVFGL0l3QkJFR3NpQVNRQUlBRkJDR29nQUJBK0lBQVFOMEVDZEdvUWVDZ0NBQ0VBSUFGQkVHb2tBQ0FBQzQ4QkFRRi9JQU5CZ0JCeEJFQWdBRUVyT2dBQUlBQkJBV29oQUFzZ0EwR0FCSEVFUUNBQVFTTTZBQUFnQUVFQmFpRUFDd05BSUFFdEFBQWlCQVJBSUFBZ0JEb0FBQ0FBUVFGcUlRQWdBVUVCYWlFQkRBRUxDeUFBQW45Qjd3QWdBMEhLQUhFaUFVSEFBRVlOQUJwQjJBQkIrQUFnQTBHQWdBRnhHeUFCUVFoR0RRQWFRZVFBUWZVQUlBSWJDem9BQUFzckFRRi9Jd0JCRUdzaUFTUUFJQUZCQ0dvZ0FCQStJQUFRTjJvUWVDZ0NBQ0VBSUFGQkVHb2tBQ0FBQ3lrQUlBQkJDSFJCZ0lEOEIzRWdBRUVZZEhJZ0FFRUlka0dBL2dOeElBQkJHSFp5Y2lBQUlBRWJDelFBSUFBb0FnQWFJQUFvQWdBZ0FCQzlBVUVNYkdvYUlBQW9BZ0FnQUJCWFFReHNhaG9nQUNnQ0FDQUFFTDBCUVF4c2Fob0wyd0VDQVg4Q2ZrRUJJUVFDUUNBQVFnQlNJQUZDLy8vLy8vLy8vLy8vQUlNaUJVS0FnSUNBZ0lEQS8vOEFWaUFGUW9DQWdJQ0FnTUQvL3dCUkd3MEFJQUpDQUZJZ0EwTC8vLy8vLy8vLy8vOEFneUlHUW9DQWdJQ0FnTUQvL3dCV0lBWkNnSUNBZ0lDQXdQLy9BRkViRFFBZ0FDQUNoQ0FGSUFhRWhGQUVRRUVBRHdzZ0FTQURnMElBV1FSQVFYOGhCQ0FBSUFKVUlBRWdBMU1nQVNBRFVSc05BU0FBSUFLRklBRWdBNFdFUWdCU0R3dEJmeUVFSUFBZ0FsWWdBU0FEVlNBQklBTlJHdzBBSUFBZ0FvVWdBU0FEaFlSQ0FGSWhCQXNnQkFzUUFDQUFRU0JHSUFCQkNXdEJCVWx5QzRzQ0FBSkFJQUFFZnlBQlFmOEFUUTBCQWtCQnBPOERLQUlBS0FJQVJRUkFJQUZCZ0g5eFFZQy9BMFlOQXd3QkN5QUJRZjhQVFFSQUlBQWdBVUUvY1VHQUFYSTZBQUVnQUNBQlFRWjJRY0FCY2pvQUFFRUNEd3NnQVVHQXNBTlBRUUFnQVVHQVFIRkJnTUFEUnh0RkJFQWdBQ0FCUVQ5eFFZQUJjam9BQWlBQUlBRkJESFpCNEFGeU9nQUFJQUFnQVVFR2RrRS9jVUdBQVhJNkFBRkJBdzhMSUFGQmdJQUVhMEgvL3o5TkJFQWdBQ0FCUVQ5eFFZQUJjam9BQXlBQUlBRkJFblpCOEFGeU9nQUFJQUFnQVVFR2RrRS9jVUdBQVhJNkFBSWdBQ0FCUVF4MlFUOXhRWUFCY2pvQUFVRUVEd3NMUVpUL0EwRVpOZ0lBUVg4RlFRRUxEd3NnQUNBQk9nQUFRUUVMd0FFQkFuOGpBRUdnQVdzaUJDUUFJQVJCQ0dwQjJQb0NRWkFCRUVBYUFrQUNRQ0FCUVFGclFmLy8vLzhIVHdSQUlBRU5BVUVCSVFFZ0JFR2ZBV29oQUFzZ0JDQUFOZ0kwSUFRZ0FEWUNIQ0FFUVg0Z0FHc2lCU0FCSUFFZ0JVc2JJZ0UyQWpnZ0JDQUFJQUZxSWdBMkFpUWdCQ0FBTmdJWUlBUkJDR29nQWlBRFFmVUJRZllCRUlNRklRQWdBVVVOQVNBRUtBSWNJZ0VnQVNBRUtBSVlSbXRCQURvQUFBd0JDMEdVL3dOQlBUWUNBRUYvSVFBTElBUkJvQUZxSkFBZ0FBc2FBQ0FBSUFFUTRnY2lBRUVBSUFBdEFBQWdBVUgvQVhGR0d3dEtBUUovQWtBZ0FDMEFBQ0lDUlNBQ0lBRXRBQUFpQTBkeURRQURRQ0FCTFFBQklRTWdBQzBBQVNJQ1JRMEJJQUZCQVdvaEFTQUFRUUZxSVFBZ0FpQURSZzBBQ3dzZ0FpQURhd3Y1QWdFR2Z5QUFLQUlFSVFZZ0FrSHhrK3ZjQTA4RVFDQUFLQUlBUXJpQWdJQVFOd0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBdEJDQ0FDUVFkeElnTnJRUUFnQXhzaEF5QUJRUUpQQkVBZ0FDZ0NBQ0lGSUFFMkFoZ2dCVUVQTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQWlBRGFpRURBa0FnQmlBQlFRSjBhaUlJS0FJMElnSUVRQU5BSUFNZ0FpSUVLQUlJVFFSQUlBUWhBUXdEQ3lBRUtBSUFJZ0lOQUFzTFFmQ1Q2OXdESUFOcklnSWdBVUVDZEVHQWhnSkIrSVVDSUFRYmFpZ0NBQ0lCSUFFZ0Frc2JJZ0lnQTJvaUJVRVFhaUlIRURvaUFVVUVRQU5BSUFKQjR3Qk5CRUFnQUNnQ0FFSzRnSUNBSURjQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFKQkFYWWlBU0VDSUFFZ0Eyb2lCVUVRYWlJSEVEb2lBVVVOQUFzTElBWWdCaWdDVENBSGFqWUNUQ0FCSUFVMkFnZ2dBVUlBTndNQUlBUkZCRUFnQ0NBQk5nSTBEQUVMSUFRZ0FUWUNBQXNnQVNBQktBSUVJZ0FnQTJvMkFnUWdBU0FCS0FJSUlBTnJOZ0lJSUFBZ0FXcEJFR29McGdNQ0FuOEJmU0FCQW44Z0F4REhCbzRpQm90REFBQUFUMTBFUUNBR3FBd0JDMEdBZ0lDQWVBc2lCRFlDQUNBQ0FuOGdBMEVCSUFSMHNwVVFwZ0lnQUNvQ0hKUVF4Z1lpQTR0REFBQUFUMTBFUUNBRHFBd0JDMEdBZ0lDQWVBc2lCRFlDQUNBRUlBQW9BaFJCQVd0R0JFQWdBU0FCS0FJQVFRRnFOZ0lBSUFKQkFEWUNBRUVBSVFRTEFrQWdBZ0ovSUFFb0FnQWlBa0YvVEFSQUlBRkJBRFlDQUVFQURBRUxJQUlnQUNnQ0VDSUZTQTBCSUFFZ0JVRUJhellDQUNBQUtBSVVRUUZyQ3lJRU5nSUFDd0pBQWtBQ1FDQUJLQUlBSWdGQmYwb0VRQ0FCSUFBb0FoQk9EUUVnQkVGL1RBMENJQVFnQUNnQ0ZFNE5BdzhMUWNDVEJFR0swZ0FRTWtIeTFnQVFNa0dkS2hBeVFZd0NFRFZCaEM4UU1rRy8zQUFRTWhBMkVBQUFDMEhBa3dSQnIrQUFFREpCOHRZQUVESkJuU29RTWtHTkFoQTFRWVF2RURKQnZPUUFFRElRTmhBQUFBdEJ3Sk1FUWFEMUFCQXlRZkxXQUJBeVFaMHFFREpCamdJUU5VR0VMeEF5UWZMNEFCQXlFRFlRQUFBTFFjQ1RCRUdyL0FBUU1rSHkxZ0FRTWtHZEtoQXlRWThDRURWQmhDOFFNa0hlL3dBUU1oQTJFQUFBQzYwQkFDQUFJQUFxQWdBZ0FTb0NBQ0FDbEpJNEFnQWdBQ0FBS2dJRUlBRXFBZ1FnQXBTU09BSUVJQUFnQUNvQ0NDQUJLZ0lJSUFLVWtqZ0NDQ0FBSUFBcUFnd2dBU29DRENBQ2xKSTRBZ3dnQUNBQUtnSVFJQUVxQWhBZ0FwU1NPQUlRSUFBZ0FDb0NGQ0FCS2dJVUlBS1VramdDRkNBQUlBQXFBaGdnQVNvQ0dDQUNsSkk0QWhnZ0FDQUFLZ0ljSUFFcUFod2dBcFNTT0FJY0lBQWdBQ29DSUNBQktnSWdJQUtVa2pnQ0lBc1BBQ0FBSUFBb0FnQkJCR28yQWdBTEN3QWdBRUVRYWlBQkVHc0xFZ0FnQUVFRWFpQUFLQUlBSUFGc0VLRUZDd3dBSUFFZ0FpZ0NBRFlDQUFzT0FDQUFJQUVvQWdBMkFnQWdBQXVUQVFFQ2Z5QUJJQUFRUXlJQ1N3UkFJd0JCSUdzaUF5UUFBa0FnQVNBQ2F5SUJJQUFRTkNnQ0FDQUFLQUlFYTBFQ2RVMEVRQ0FBSUFFUXBBTU1BUXNnQUJBMElRSWdBMEVJYWlBQUlBQVFReUFCYWhEZEFpQUFFRU1nQWhEVkFpSUNJQUVRdHdZZ0FDQUNFTndDSUFJUXVBSUxJQU5CSUdva0FBOExJQUVnQWtrRVFDQUFJQUFvQWdBZ0FVRUNkR29RbVFRTEM1NEJBUU4vSXdCQkVHc2lBU1FBSXdCQkVHc2lBeVFBSUFOQkFEWUNEQ0FBSUFOQkRHb1Fnd0VqQUVFUWF5SUNKQUFnQWtFQU5nSU1JQUJCQkdvZ0FrRU1haUFDUVFocUVKZ0RJQUpCRUdva0FDQURRUkJxSkFBZ0FFRUlha0VBTmdJQUlBRkJBRFlDRENBQVFReHFJQUZCREdvZ0FVRUlhaENZQXlBQlFZQ0FnUHdETmdJRUlBQkJFR29nQVVFRWFpb0NBRGdDQUNBQlFSQnFKQUFnQUFzU0FDQUFFRFFvQWdBZ0FDZ0NBR3RCQVhVTEVBQWdBQ2dDQkNBQUtBSUFhMEVCZFFzU0FDQUFFRFFvQWdBZ0FDZ0NBR3RCQlhVTEZnRUJmeUFBRUVRaEFTQUFFTU1HSUFBZ0FSQ09CQXY5QVFFSGZ5QUJJQUFRUXlJQ1N3UkFJd0JCSUdzaUJ5UUFBa0FnQVNBQ2F5SURJQUFRTkNnQ0FDQUFLQUlFYTBFQ2RVMEVRQ0FBSUFNUXBBTU1BUXNnQUJBMElRUUNmeUFBSUFBUVF5QURhaERkQWlFRklBQVFReUVJUVFBaEFpTUFRUkJySWdZa0FDQUdRUUEyQWd3Z0IwRUlhaUlCUVF4cUlBWkJER29nQkJDeEFTQUZCRUFnQVNnQ0VCb2dCUkN6QmlFQ0N5QUJJQUkyQWdBZ0FTQUNJQWhCQW5ScUlnUTJBZ2dnQVNBRU5nSUVJQUVRUFNBQ0lBVkJBblJxTmdJQUlBWkJFR29rQUNBQkN5QURFTGNHSUFBZ0FSRGNBaUFCRUxnQ0N5QUhRU0JxSkFBUEN5QUJJQUpKQkVBZ0FDQUFLQUlBSUFGQkFuUnFFSmtFQ3d0U0FRSi9RZkR3QXlnQ0FDSUJJQUJCQTJwQmZIRWlBbW9oQUFKQUlBSkJBQ0FBSUFGTkd3MEFJQUEvQUVFUWRFc0VRQ0FBRUNCRkRRRUxRZkR3QXlBQU5nSUFJQUVQQzBHVS93TkJNRFlDQUVGL0N4SUFJQUFRV2lnQ0FDQUFLQUlBYTBFQ2RRc0hBQ0FBUVNCcUN4a0FJQUFRakFFRVFDQUFJQUVRbmdFUEN5QUFJQUVRcXdFTExBQUNRQ0FBSUFGR0RRQURRQ0FBSUFGQkFXc2lBVThOQVNBQUlBRVFtQWNnQUVFQmFpRUFEQUFMQUFzTERnQWdBQ2dDQ0VILy8vLy9CM0VMQ3dBZ0FFR0ltd1FRd2dFTDdnSUJBMzhqQUVFUWF5SUtKQUFnQ2lBQU9nQVBBa0FDUUFKQUlBTW9BZ0FnQWtjTkFFRXJJUXNnQUVIL0FYRWlEQ0FKTFFBWVJ3UkFRUzBoQ3lBSkxRQVpJQXhIRFFFTElBTWdBa0VCYWpZQ0FDQUNJQXM2QUFBTUFRc2dCaEEzUlNBQUlBVkhja1VFUUVFQUlRQWdDQ2dDQUNJQklBZHJRWjhCU2cwQ0lBUW9BZ0FoQUNBSUlBRkJCR28yQWdBZ0FTQUFOZ0lBREFFTFFYOGhBQ0FKSUFsQkdtb2dDa0VQYWhDOEF5QUpheUlGUVJkS0RRRUNRQUpBQWtBZ0FVRUlhdzREQUFJQUFRc2dBU0FGU2cwQkRBTUxJQUZCRUVjZ0JVRVdTSElOQUNBREtBSUFJZ0VnQWtZZ0FTQUNhMEVDU25JTkFpQUJRUUZyTFFBQVFUQkhEUUpCQUNFQUlBUkJBRFlDQUNBRElBRkJBV28yQWdBZ0FTQUZRZEN5QTJvdEFBQTZBQUFNQWdzZ0F5QURLQUlBSWdCQkFXbzJBZ0FnQUNBRlFkQ3lBMm90QUFBNkFBQWdCQ0FFS0FJQVFRRnFOZ0lBUVFBaEFBd0JDMEVBSVFBZ0JFRUFOZ0lBQ3lBS1FSQnFKQUFnQUFzTEFDQUFRWUNiQkJEQ0FRc2tBUUovSXdCQkVHc2lBaVFBSUFFZ0FCQ21CeUVESUFKQkVHb2tBQ0FCSUFBZ0F4c0xEd0FnQUNBQUtBSUFLQUljRVFBQUMrNE1BUWgvSXdCQkVHc2lCQ1FBSUFRZ0FEWUNEQUpBSUFCQjB3Rk5CRUJCNElRRFFhQ0dBeUFFUVF4cUVQQUVLQUlBSVFBTUFRc2dBRUY4VHdSQUVId0FDeUFFSUFBZ0FFSFNBVzRpQjBIU0FXd2lBMnMyQWdoQm9JWURRZUNIQXlBRVFRaHFFUEFFUWFDR0EydEJBblVoQlFKQUEwQWdCVUVDZEVHZ2hnTnFLQUlBSUFOcUlRQkJCU0VESUFZaEFRSkFBa0FEUUNBQklRWWdBMEV2UmdSQVFkTUJJUU1EUUNBQUlBTnVJZ0VnQTBrTkJDQUFJQUVnQTJ4R0RRTWdBQ0FEUVFwcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVF4cUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVJCcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVJKcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVJacUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVJ4cUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVI1cUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVNScUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVNocUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVNwcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVM1cUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVRScUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVRwcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVR4cUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUWNJQWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBIR0FHb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQnlBQnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFjNEFhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwSFNBR29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkIyQUJxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRZUFBYWlJQmJpSUNJQUZKRFFRZ0FDQUJJQUpzUmcwRElBQWdBMEhrQUdvaUFXNGlBaUFCU1EwRUlBQWdBU0FDYkVZTkF5QUFJQU5CNWdCcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUWVvQWFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBIc0FHb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQjhBQnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFmZ0FhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwSCtBR29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkJnZ0ZxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRWWdCYWlJQmJpSUNJQUZKRFFRZ0FDQUJJQUpzUmcwRElBQWdBMEdLQVdvaUFXNGlBaUFCU1EwRUlBQWdBU0FDYkVZTkF5QUFJQU5CamdGcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUVpRQmFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBHV0FXb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQm5BRnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFhSUJhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwR21BV29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkJxQUZxSWdGdUlnSWdBVWtOQkNBQUlBRWdBbXhHRFFNZ0FDQURRYXdCYWlJQmJpSUNJQUZKRFFRZ0FDQUJJQUpzUmcwRElBQWdBMEd5QVdvaUFXNGlBaUFCU1EwRUlBQWdBU0FDYkVZTkF5QUFJQU5CdEFGcUlnRnVJZ0lnQVVrTkJDQUFJQUVnQW14R0RRTWdBQ0FEUWJvQmFpSUJiaUlDSUFGSkRRUWdBQ0FCSUFKc1JnMERJQUFnQTBHK0FXb2lBVzRpQWlBQlNRMEVJQUFnQVNBQ2JFWU5BeUFBSUFOQndBRnFJZ0Z1SWdJZ0FVa05CQ0FBSUFFZ0FteEdEUU1nQUNBRFFjUUJhaUlCYmlJQ0lBRkpEUVFnQUNBQklBSnNSZzBESUFBZ0EwSEdBV29pQVc0aUFpQUJTUTBFSUFBZ0FTQUNiRVlOQXlBQUlBTkIwQUZxSWdGdUlnSWdBVWtOQkNBRFFkSUJhaUVESUFBZ0FTQUNiRWNOQUFzTUFnc2dBQ0FEUVFKMFFlQ0VBMm9vQWdBaUFXNGlBaUFCYkNFSUlBRWdBa3NpQWtVRVFDQUFJQVlnQWhzaEFTQURRUUZxSVFNZ0FDQUlSdzBCQ3dzZ0FpQUFJQWhIY2cwREMwRUFJQVZCQVdvaUFDQUFRVEJHSWdBYklRVWdBQ0FIYWlJSFFkSUJiQ0VEREFFTEN5QUVJQUEyQWd3TUFRc2dCQ0FBTmdJTUlBQWdCaUFDR3lFQUN5QUVRUkJxSkFBZ0FBdGtBZ0YvQVg0akFFRVFheUlDSkFBZ0FBSitJQUZGQkVCQ0FBd0JDeUFDSUFHdFFnQWdBV2NpQVVIUkFHb1FrQUVnQWlrRENFS0FnSUNBZ0lEQUFJVkJub0FCSUFGcnJVSXdobndoQXlBQ0tRTUFDemNEQUNBQUlBTTNBd2dnQWtFUWFpUUFDMUFCQVg0Q1FDQURRY0FBY1FSQUlBSWdBMEZBYXEySUlRRkNBQ0VDREFFTElBTkZEUUFnQWtIQUFDQURhNjJHSUFFZ0E2MGlCSWlFSVFFZ0FpQUVpQ0VDQ3lBQUlBRTNBd0FnQUNBQ053TUlDNE1CQWdOL0FYNENRQ0FBUW9DQWdJQVFWQVJBSUFBaEJRd0JDd05BSUFGQkFXc2lBU0FBSUFCQ0NvQWlCVUlLZm4yblFUQnlPZ0FBSUFCQy8vLy8vNThCVmlFQ0lBVWhBQ0FDRFFBTEN5QUZweUlDQkVBRFFDQUJRUUZySWdFZ0FpQUNRUXB1SWdOQkNteHJRVEJ5T2dBQUlBSkJDVXNoQkNBRElRSWdCQTBBQ3dzZ0FRdWhBUUVEZnlNQVFSQnJJZ1VrQUNBRklBSTJBZ3dqQUVHZ0FXc2lBeVFBSUFOQkNHcEIyUG9DUVpBQkVFQWFJQU1nQURZQ05DQURJQUEyQWh3Z0EwRitJQUJySWdSQi8vLy8vd2NnQkVILy8vLy9CMGtiSWdRMkFqZ2dBeUFBSUFScUlnQTJBaVFnQXlBQU5nSVlJQU5CQ0dvZ0FTQUNFUDhFSUFRRVFDQURLQUljSWdBZ0FDQURLQUlZUm10QkFEb0FBQXNnQTBHZ0FXb2tBQ0FGUVJCcUpBQUxwUUVDQVgwQ2Z3Si9JQUM4SWdKQkYzWkIvd0Z4SWdOQmxRRk5CRUFnQTBIOUFFMEVmU0FBUXdBQUFBQ1VCUUo5SUFBZ0FJd2dBa0YvU2hzaUFFTUFBQUJMa2tNQUFBRExraUFBa3lJQlF3QUFBRDllQkVBZ0FDQUJra01BQUlDL2tnd0JDeUFBSUFHU0lnQWdBVU1BQUFDL1gwVU5BQm9nQUVNQUFJQS9rZ3NpQUNBQWpDQUNRWDlLR3dzaEFBc2dBSXREQUFBQVQxMExCRUFnQUtnUEMwR0FnSUNBZUF1UUFnSUNmd0o5QWtBQ1FDQUF2Q0lCUVlDQWdBUlBRUUFnQVVGL1NodEZCRUFnQVVILy8vLy9CM0ZGQkVCREFBQ0F2eUFBSUFDVWxROExJQUZCZjB3RVFDQUFJQUNUUXdBQUFBQ1ZEd3NnQUVNQUFBQk1sTHdoQVVIb2ZpRUNEQUVMSUFGQi8vLy8rd2RMRFFGQmdYOGhBa01BQUFBQUlRQWdBVUdBZ0lEOEEwWU5BUXNnQWlBQlFZMzJxd0pxSWdGQkYzWnFzaUlEUTRCeE1UK1VJQUZCLy8vL0EzRkI4NG5VK1FOcXZrTUFBSUMva2lJQUlBTkQwZmNYTjVRZ0FDQUFRd0FBQUVDU2xTSURJQUFnQUVNQUFBQS9sSlFpQkNBRElBT1VJZ0FnQUNBQWxDSUFRKzdwa1Q2VVE2cXFLaitTbENBQUlBQkRKcDU0UHBSREU4N01QcEtVa3BLVWtpQUVrNUtTSVFBTElBQUxMd0VCZnlNQVFSQnJJZ0VrQUNBQVFnQTNBZ0FnQVVFQU5nSU1JQUJCQ0dvZ0FVRU1haENLQXlBQlFSQnFKQUFMRkFFQmYwRUlFRXNpQVNBQUtRSUFOd01BSUFFTEZBRUJmMEVFRUVzaUFTQUFLQUlBTmdJQUlBRUxEUUFnQUNnQ0JDQUJLQUlFU3dzaEFDQUFLQUlFSUFBUU5DZ0NBRWtFUUNBQUlBRVFwZ01QQ3lBQUlBRVEzQVVMb2dFQkFuOGdBQ2dDQkNBQUVEUW9BZ0JIQkVBakFFRVFheUlESkFBZ0F5QUFRUUVRdHdJaEFpQUFFRFFnQWlnQ0JDQUJFSXdDSUFJZ0FpZ0NCRUVFYWpZQ0JDQUNFSFFnQTBFUWFpUUFEd3NqQUVFZ2F5SURKQUFnQUJBMElnSWdBMEVJYWlBQUlBQVFRMEVCYWhEZEFpQUFFRU1nQWhEVkFpSUNLQUlJSUFFUWpBSWdBaUFDS0FJSVFRUnFOZ0lJSUFBZ0FoRGNBaUFDRUxnQ0lBTkJJR29rQUFzSUFDQUFRZlFBYWdzTEFDQUFJQUVRZ3dFZ0FBc2dBUUYvSUFBb0FnQWhBaUFBSUFFMkFnQWdBZ1JBSUFBUVNTQUNFSThHQ3dzeEFRRi9Jd0JCRUdzaUF5UUFJQU1nQVRZQ0RDQUFJQU5CREdvUWd3RWdBQ0FDS1FJQU53SUVJQU5CRUdva0FDQUFDeElBSUFBZ0Fqb0FCQ0FBSUFFMkFnQWdBQXNXQUNBQUlBRW9BZ0EyQWdBZ0FDQUNMUUFBT2dBRUN5QUJBWDhnQUNnQ0FDRUJJQUJCQURZQ0FDQUJCRUFnQUJCSklBRVFqd1lMQ3lnQkFYOGpBRUVRYXlJQ0pBQWdBaUFCTmdJSUlBQWdBa0VJYWhDTkFob2dBa0VRYWlRQUlBQUxDd0FnQUVJQU53SUFJQUFMREFBZ0FDQUJJQUFnQVVvYkN5UUFJQUFnQVRZQ0FDQUFJQUVvQWdRaUFUWUNCQ0FBSUFFZ0FrRUNkR28yQWdnZ0FBdE5BUUYvSUFBb0FnUWhBUU5BSUFFZ0FDZ0NDRWNFUUNBQUtBSVFHaUFBSUFBb0FnaEJCR3MyQWdnTUFRc0xJQUFvQWdBRVFDQUFLQUlRR2lBQUtBSUFJUUVnQUJDMEJob2dBUkF6Q3dzS0FDQUFLQUlBRUkwRUN5Y0FJQU1nQXlnQ0FDQUNJQUZySWdCcklnSTJBZ0FnQUVFQlRnUkFJQUlnQVNBQUVFQWFDd3RiQVFKL0l3QkJFR3NpQWlRQUlBSWdBVFlDRENBQklBQVEwd1lpQTAwRVFDQUFFTDBCSWdBZ0EwRUJka2tFUUNBQ0lBQkJBWFEyQWdnZ0FrRUlhaUFDUVF4cUVJQUJLQUlBSVFNTElBSkJFR29rQUNBRER3c1Fqd0VBQ3lBQkFYOGpBRUVRYXlJQ0pBQWdBQ0FCSUFFUXh3UVE2QVlnQWtFUWFpUUFDeE1BSUFBZ0FTQUNJQUFvQWdBb0FqQVJCQUFMSmdBZ0FDQUFLQUlZUlNBQUtBSVFJQUZ5Y2lJQk5nSVFJQUFvQWhRZ0FYRUVRQkI4QUFzTHhnRUJCbjhqQUVFUWF5SUVKQUFnQUJCSktBSUFJUVVDZnlBQ0tBSUFJQUFvQWdCcklnTkIvLy8vL3dkSkJFQWdBMEVCZEF3QkMwRi9DeUlEUVFRZ0F4c2hBeUFCS0FJQUlRWWdBQ2dDQUNFSElBVkJ3Z0pHQkg5QkFBVWdBQ2dDQUFzZ0F4RG1BaUlJQkVBZ0JVSENBa2NFUUNBQUVMc0JHZ3NnQkVIQkFqWUNCQ0FBSUFSQkNHb2dDQ0FFUVFScUVHTWlCUkNPQnlBRkVHSWdBU0FBS0FJQUlBWWdCMnRxTmdJQUlBSWdBQ2dDQUNBRFFYeHhhallDQUNBRVFSQnFKQUFQQ3hCOEFBc1RBQ0FBSUFGQkFDQUFLQUlBS0FJMEVRUUFDeE1BSUFBZ0FVRUFJQUFvQWdBb0FpUVJCQUFMOGdJQkFuOGpBRUVRYXlJS0pBQWdDaUFBTmdJTUFrQUNRQUpBSUFNb0FnQWdBa2NOQUVFcklRc2dBQ0FKS0FKZ1J3UkFRUzBoQ3lBSktBSmtJQUJIRFFFTElBTWdBa0VCYWpZQ0FDQUNJQXM2QUFBTUFRc2dCaEEzUlNBQUlBVkhja1VFUUVFQUlRQWdDQ2dDQUNJQklBZHJRWjhCU2cwQ0lBUW9BZ0FoQUNBSUlBRkJCR28yQWdBZ0FTQUFOZ0lBREFFTFFYOGhBQ0FKSUFsQjZBQnFJQXBCREdvUXRBUWdDV3NpQmtIY0FFb05BU0FHUVFKMUlRVUNRQUpBQWtBZ0FVRUlhdzREQUFJQUFRc2dBU0FGU2cwQkRBTUxJQUZCRUVjZ0JrSFlBRWh5RFFBZ0F5Z0NBQ0lCSUFKR0lBRWdBbXRCQWtweURRSWdBVUVCYXkwQUFFRXdSdzBDUVFBaEFDQUVRUUEyQWdBZ0F5QUJRUUZxTmdJQUlBRWdCVUhRc2dOcUxRQUFPZ0FBREFJTElBTWdBeWdDQUNJQVFRRnFOZ0lBSUFBZ0JVSFFzZ05xTFFBQU9nQUFJQVFnQkNnQ0FFRUJhallDQUVFQUlRQU1BUXRCQUNFQUlBUkJBRFlDQUFzZ0NrRVFhaVFBSUFBTFBRRUJmeU1BUVJCcklnTWtBQ0FEUVFocUlBRVFSeUFDSUFOQkNHb1FuUUlpQVJDaEFUb0FBQ0FBSUFFUW9BRWdBMEVJYWhCQ0lBTkJFR29rQUF1TkFRRUJmd0pBSUFBb0FnUWlBU0FCS0FJQVFReHJLQUlBYWlnQ0dFVU5BQ0FBS0FJRUlnRWdBU2dDQUVFTWF5Z0NBR29ReFFORkRRQWdBQ2dDQkNJQklBRW9BZ0JCREdzb0FnQnFLQUlFUVlEQUFIRkZEUUFnQUNnQ0JDSUJJQUVvQWdCQkRHc29BZ0JxS0FJWUVNWUNRWDlIRFFBZ0FDZ0NCQ0lBSUFBb0FnQkJER3NvQWdCcVFRRVF2Z0lMQ3dvQUlBQVF5Z01hSUFBTER3QWdBQ0FBS0FJQUtBSVlFUUFBQzlBRUFRUi9Jd0JCRUdzaUJDUUFBa0FDUUVIVStnSWdBU3dBQUJDRUFrVUVRRUdVL3dOQkhEWUNBQXdCQzBFQ0lRSUNmeUFCUVNzUWhBSkZCRUFnQVMwQUFFSHlBRWNoQWdzZ0FrR0FBWElMSUFJZ0FVSDRBQkNFQWhzaUFrR0FnQ0J5SUFJZ0FVSGxBQkNFQWhzaUFpQUNRY0FBY2lBQkxRQUFJZ0pCOGdCR0d5SUZRWUFFY2lBRklBSkI5d0JHR3lJRlFZQUljaUFGSUFKQjRRQkdHeUVDSUFSQnRnTTJBZ0FnQUNBQ1FZQ0FBbklnQkJBbklnQkJnV0JQQkVCQmxQOERRUUFnQUdzMkFnQkJmeUVBQ3lBQVFRQklEUUVqQUVFZ2F5SURKQUFDZndKQUFrQkIwUG9DSUFFc0FBQVFoQUpGQkVCQmxQOERRUncyQWdBTUFRdEJtQWtRT2lJQ0RRRUxRUUFNQVFzZ0FrRUFRWkFCRURzYUlBRkJLeENFQWtVRVFDQUNRUWhCQkNBQkxRQUFRZklBUmhzMkFnQUxBa0FnQVMwQUFFSGhBRWNFUUNBQ0tBSUFJUUVNQVFzZ0FFRURRUUFRRUNJQlFZQUljVVVFUUNBRElBRkJnQWh5TmdJUUlBQkJCQ0FEUVJCcUVCQWFDeUFDSUFJb0FnQkJnQUZ5SWdFMkFnQUxJQUpCL3dFNkFFc2dBa0dBQ0RZQ01DQUNJQUEyQWp3Z0FpQUNRWmdCYWpZQ0xBSkFJQUZCQ0hFTkFDQURJQU5CR0dvMkFnQWdBRUdUcUFFZ0F4QW1EUUFnQWtFS09nQkxDeUFDUWZBQk5nSW9JQUpCOFFFMkFpUWdBa0h5QVRZQ0lDQUNRZk1CTmdJTVFhei9BeWdDQUVVRVFDQUNRWDgyQWt3TElBSkJqSWdFS0FJQU5nSTRRWXlJQkNnQ0FDSUJCRUFnQVNBQ05nSTBDMEdNaUFRZ0FqWUNBQ0FDQ3lFQklBTkJJR29rQUNBQklnTU5BU0FBRUJFYUMwRUFJUU1MSUFSQkVHb2tBQ0FEQzVJQkFRTjhSQUFBQUFBQUFQQS9JQUFnQUtJaUFrUUFBQUFBQUFEZ1A2SWlBNkVpQkVRQUFBQUFBQUR3UHlBRW9TQURvU0FDSUFJZ0FpQUNSSkFWeXhtZ0Fmbytva1IzVWNFV2JNRld2NkNpUkV4VlZWVlZWYVUvb0tJZ0FpQUNvaUlESUFPaUlBSWdBa1RVT0lpKzZmcW92YUpFeExHMHZaN3VJVDZnb2tTdFVweUFUMzZTdnFDaW9LSWdBQ0FCb3FHZ29BdVpBUUVEZkNBQUlBQ2lJZ01nQXlBRG9xSWdBMFI4MWM5YU90bmxQYUpFNjV3cml1YmxXcjZnb2lBRElBTkVmZjZ4VitNZHh6NmlSTlZod1JtZ0FTcS9vS0pFcHZnUUVSRVJnVCtnb0NFRklBTWdBS0loQkNBQ1JRUkFJQVFnQXlBRm9rUkpWVlZWVlZYRnY2Q2lJQUNnRHdzZ0FDQURJQUZFQUFBQUFBQUE0RCtpSUFRZ0JhS2hvaUFCb1NBRVJFbFZWVlZWVmNVL29xQ2hDNmNDQVFWL0lBQW9BdFFESVFJZ0FDQUFLQUxRQXlnQ0NCRUFBRVVFUUNBQUtBSUFJZ0ZCR1RZQ0ZDQUFJQUVvQWdBUkFRQUxJQUFvQXRRQ1FRRk9CRUFEUUNBQUlBTkJBblFpQldvb0F0Z0NJUVFDUUFKQUlBQW9BdUFCQkVBZ0FDZ0NuQU1OQVNBQUtBS2tBdzBDQ3lBQ0lBUW9BaFJCQW5ScUtBSThJZ0ZDQURjQUFDQUJRZ0EzQURnZ0FVSUFOd0F3SUFGQ0FEY0FLQ0FCUWdBM0FDQWdBVUlBTndBWUlBRkNBRGNBRUNBQlFnQTNBQWdnQWlBRmFpSUJRUUEyQWlnZ0FVRUFOZ0lZSUFBb0F1QUJSUVJBSUFBb0FyUUREUUVNQWdzZ0FDZ0NuQU5GRFFFTElBSWdCQ2dDR0VFQ2RHb29BbnhCQUVHQUFoQTdHZ3NnQTBFQmFpSURJQUFvQXRRQ1NBMEFDd3NnQWtGd05nSVVJQUpDQURjQ0RDQUNJQUFvQXBnQ05nSTRDN2tLQVFwL0lBQW9BaGdpQmlnQ0JDRUVJQVlvQWdBaEJTQUFJQU0yQXVRQklBQWdBallDNEFFZ0FDQUJOZ0xjQVFKQUlBUkZCRUFnQUNBR0tBSU1FUUFBUlEwQklBWW9BZ0FoQlNBR0tBSUVJUVFMSUFVdEFBQWhBeUFFUVFGcklnRUVmeUFGUVFGcUJTQUFJQVlvQWd3UkFBQkZEUUVnQmlnQ0JDRUJJQVlvQWdBTElnUXRBQUFoQnlBQUlBRkJBV3NpQlFSL0lBUkJBV29GSUFBZ0JpZ0NEQkVBQUVVTkFTQUdLQUlFSVFVZ0JpZ0NBQXNpQkMwQUFEWUMxQUVnQUNBRlFRRnJJZ1VFZnlBRVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFFZ0JpZ0NCQ0VGSUFZb0FnQUxJZ1F0QUFCQkNIUWlBVFlDSUNBQUlBVkJBV3NpQlFSL0lBUkJBV29GSUFBZ0JpZ0NEQkVBQUVVTkFTQUFLQUlnSVFFZ0JpZ0NCQ0VGSUFZb0FnQUxJZ1F0QUFBZ0FXbzJBaUFnQUNBRlFRRnJJZ1VFZnlBRVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFFZ0JpZ0NCQ0VGSUFZb0FnQUxJZ1F0QUFCQkNIUWlBVFlDSENBQUlBVkJBV3NpQlFSL0lBUkJBV29GSUFBZ0JpZ0NEQkVBQUVVTkFTQUFLQUljSVFFZ0JpZ0NCQ0VGSUFZb0FnQUxJZ1F0QUFBZ0FXbzJBaHdnQUNBRlFRRnJJZ0VFZnlBRVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFFZ0JpZ0NCQ0VCSUFZb0FnQUxJZ1V0QUFBMkFpUWdBQ2dDQUNJQ0lBQW9BcmdETmdJWUlBSWdBQ2dDSERZQ0hDQUNJQUFvQWlBMkFpQWdBQ2dDSkNFRUlBSkI1Z0EyQWhRZ0FpQUVOZ0lrSUFCQkFTQUNLQUlFRVFJQUlBQW9BdEFES0FJUUJFQWdBQ2dDQUNJQ1FUMDJBaFFnQUNBQ0tBSUFFUUVBQ3lBRFFRaDBJQWR5UVFocklRSUNRQUpBSUFBb0FpQkZEUUFnQUNnQ0hFVU5BQ0FBS0FJa0lnUkJBRW9OQVFzZ0FDZ0NBQ0lEUVNFMkFoUWdBQ0FES0FJQUVRRUFJQUFvQWlRaEJBc2dCRUVEYkNBQ1J3UkFJQUFvQWdBaUFrRU1OZ0lVSUFBZ0FpZ0NBQkVCQUFzZ0FDZ0MyQUZGQkVBZ0FDQUFRUUVnQUNnQ0pFSFlBR3dnQUNnQ0JDZ0NBQkVFQURZQzJBRUxJQVZCQVdvaENDQUJRUUZySVFRZ0FDZ0NKRUVCVGdSQVFRQWhBUU5BSUFRRWZ5QUVCU0FBSUFZb0Fnd1JBQUJGRFFNZ0JpZ0NBQ0VJSUFZb0FnUUxRUUZySVFvZ0FDZ0MyQUVoQXlBSUxRQUFJUUlDUUNBQlJRUkFJQU1oQkF3QkN5QUJRUUpySVFzZ0FVRUJheUVKSUFNZ0FVSFlBR3hxSVFkQkFDRUZJQU1oQkFOQUlBSWdCQ2dDQUVZRVFDQURRZGdBYWlFRUlBTW9BZ0FoQlNBQlFRSlBCRUFnQ1VFRGNTRUNJQXRCQTA4RVFDQUpRWHh4SVFNRFFDQUVLQUtJQWlJSklBUW9BckFCSWdzZ0JDZ0NXQ0lNSUFRb0FnQWlEU0FGSUFVZ0RVZ2JJZ1VnQlNBTVNCc2lCU0FGSUF0SUd5SUZJQVVnQ1VnYklRVWdCRUhnQW1vaEJDQURRUVJySWdNTkFBc0xJQUlFUUFOQUlBUW9BZ0FpQXlBRklBTWdCVW9iSVFVZ0JFSFlBR29oQkNBQ1FRRnJJZ0lOQUFzTElBY2hCQXNnQlVFQmFpRUNEQUlMSUFSQjJBQnFJUVFnQlVFQmFpSUZJQUZIRFFBTElBY2hCQXNnQkNBQk5nSUVJQVFnQWpZQ0FDQUVJQW9FZnlBSVFRRnFCU0FBSUFZb0Fnd1JBQUJGRFFNZ0JpZ0NCQ0VLSUFZb0FnQUxJZ1V0QUFBaUFrRVBjVFlDRENBRUlBSkJCSFkyQWdnZ0JDQUtRUUZySWdNRWZ5QUZRUUZxQlNBQUlBWW9BZ3dSQUFCRkRRTWdCaWdDQkNFRElBWW9BZ0FMSWdJdEFBQTJBaEFnQUNnQ0FDSUhJQVFvQWdBMkFoZ2dCeUFFS0FJSU5nSWNJQWNnQkNnQ0REWUNJQ0FFS0FJUUlRUWdCMEhuQURZQ0ZDQUhJQVEyQWlRZ0FFRUJJQWNvQWdRUkFnQWdBa0VCYWlFSUlBTkJBV3NoQkNBQlFRRnFJZ0VnQUNnQ0pFZ05BQXNMSUFBb0F0QURRUUUyQWhBZ0JpQUVOZ0lFSUFZZ0NEWUNBRUVCRHd0QkFBdnRBUUlCZndSOUl3QkJNR3NpQmlRQUFuOGdBQVJBSUFCQkNHb2dBU0FHRUs0RElBQkJ1QUZxSUFZcUFnd2dCaW9DQUNBQ2xDQUdLZ0lFSUFPVWtwSWdCaW9DTENBR0tnSWdJQUtVSUFZcUFpUWdBNVNTa2lJSGxTQUdLZ0ljSUFZcUFoQWdBcFFnQmlvQ0ZDQURsSktTSUFlVklBUWdCUkJ4UVI5MURBRUxJQUVxQWh3aEJ5QUJLZ0lVSVFnZ0FTb0NFQ0VKSUFRZ0FTb0NEQ0FCS2dJQUlBS1VJQUVxQWdRZ0E1U1NraUFCS2dJc0lBRXFBaUFnQXBRZ0FTb0NKQ0FEbEpLU0lncVZPQUlBSUFVZ0J5QUpJQUtVSUFnZ0E1U1NraUFLbFRnQ0FFRUFDeUVCSUFaQk1Hb2tBQ0FCQzlBVkFncC9GSDBnQlVVRVFDTUFRU0JySWdja0FFTWd2TDVNSVFZQ1FDQURRUVJJRFFBZ0FDb0NMRU1BQUFBQVd3MEFJQU5CQm5RUU9pSUZSUVJBUVFCQkEwRzRoQUpCQUJBNFF3QUFnTDhoQmd3QkN5QURRUU4wRURvaUNnUkFBMEJCQUNFSklBaEJBMFlFUUNBRFFRRjBJUXNnQTdJaEdRSkFBMEFnQkNvQ0pDRWFJQVFxQWlBaEd5QUVLZ0ljSVJ3Z0JDb0NGQ0VkSUFRcUFoQWhIaUFFS2dJTUlSOGdCQ29DQkNFZ0lBUXFBZ0FoSVVNQUFBQUFJUlJCQUNFSUEwQWdBeUFJUndSQUlBSWdDRUVNYkdvaUFDb0NBQ0lUSUJ1VUlBQXFBZ1FpRWlBYWxKSkRBQUNBUDVJaUJrTUFBQUFBV3cwRElBRWdDRUVEZENJQWFpSU1LZ0lFSVJZZ0FDQUthaUFNS2dJQUlCOGdJU0FUbENBZ0lCS1VrcElpRlNBR2xaTWlGemdDQUNBS0lBQkJCSEpxSUJZZ0hDQVRJQjZVSUJJZ0haU1NraUlXSUFhVmt5SVlPQUlBSUFVZ0NFRUdkQ0lBYWlBVElBYVZJaUk0QWdBZ0JTQUFRUVJ5YWlBU0lBYVZJaU00QWdBZ0JTQUFRUWh5YWtNQUFJQS9JQWFWSWlRNEFnQWdCU0FBUVF4eWFrRUFOZ0lBSUFVZ0FFRVFjbXBCQURZQ0FDQUZJQUJCRkhKcVFRQTJBZ0FnQlNBQVFSaHlhaUFWSUJPTUloT1VJQVlnQnBRaUJwVTRBZ0FnQlNBQVFSeHlhaUFWSUJLTUloS1VJQWFWT0FJQUlBVWdBRUVnY21wQkFEWUNBQ0FGSUFCQkpISnFRUUEyQWdBZ0JTQUFRU2h5YWtFQU5nSUFJQVVnQUVFc2Ntb2dJamdDQUNBRklBQkJNSEpxSUNNNEFnQWdCU0FBUVRSeWFpQWtPQUlBSUFVZ0FFRTRjbW9nRmlBVGxDQUdsVGdDQUNBRklBQkJQSEpxSUJZZ0VwUWdCcFU0QWdBZ0ZDQVhJQmVVSUJnZ0dKU1NraUVVSUFoQkFXb2hDQXdCQ3dzQ1FDQVVJQm1WSWdaRHpjek1QVjBOQUFKQUlBbEZJQVpEQUFDQVFGMUZja1VFUUNBR0lCR1ZRNlJ3ZlQ5ZURRSWdDVUVLUncwQkRBSUxJQWxCQ2tZTkFRc2dCeUFLSUFVZ0N4Q29CVUYvVEEwQ0lBUWdCeW9DQUNBRUtnSUFramdDQUNBRUlBY3FBZ1FnQkNvQ0JKSTRBZ1FnQkNBSEtnSUlJQVFxQWd5U09BSU1JQVFnQnlvQ0RDQUVLZ0lRa2pnQ0VDQUVJQWNxQWhBZ0JDb0NGSkk0QWhRZ0JDQUhLZ0lVSUFRcUFoeVNPQUljSUFRZ0J5b0NHQ0FFS2dJZ2tqZ0NJQ0FFSUFjcUFod2dCQ29DSkpJNEFpUWdDVUVCYWlFSklBWWhFUXdCQ3dzZ0JSQXpJQW9RTXd3RUN5QUZFRE1nQ2hBelF5Qzh2a3doQmd3REJRTkFJQWxCQkVjRVFDQUpRUUowSWdzZ0JDQUlRUVIwSWd4cWFpQUFJQXhxSUF0cUtnSUFJQUFxQWl5Vk9BSUFJQWxCQVdvaENRd0JDd3NnQ0VFQmFpRUlEQUVMQUFzQUMwRUFRUU5CdUlRQ1FRQVFPQ0FGRUROREFBQ0F2eUVHQ3lBSFFTQnFKQUFnQmc4TElBWWhFeU1BUVNCcklnb2tBRU1ndkw1TUlRWUNRQ0FEUVFSSURRQWdBQ29DTEVNQUFBQUFXdzBBQW44Z0E3SWlHQ0FUbENJR2kwTUFBQUJQWFFSQUlBYW9EQUVMUVlDQWdJQjRDeUVISUFOQkJuUVFPaUlGUlFSQVFRQkJBMEc0aEFKQkFCQTRRd0FBZ0w4aEJnd0JDeUFEUVFOMEVEb2lDVVVFUUVFQVFRTkJ1SVFDUVFBUU9DQUZFRE5EQUFDQXZ5RUdEQUVMSUFOQkFuUWlDQkE2SWc5RkJFQkJBRUVEUWJpRUFrRUFFRGdnQlJBeklBa1FNME1BQUlDL0lRWU1BUXNnQ0JBNklnd0VRQ0FIUVFGclFRUWdCMEVFU2hzaEMwRUFJUWdEUUVFQUlRY2dDRUVEUmdSQUlBd2dDMEVDZEdvaEVFRUFJUTRDUUFOQUlBUXFBaVFoR1NBRUtnSWdJUm9nQkNvQ0hDRWJJQVFxQWhRaEhDQUVLZ0lRSVIwZ0JDb0NEQ0VlSUFRcUFnUWhIeUFFS2dJQUlTQkJBQ0VIQTBBZ0F5QUhSd1JBSUFJZ0IwRU1iR29pQUNvQ0FDSVRJQnFVSUFBcUFnUWlFaUFabEpKREFBQ0FQNUlpQmtNQUFBQUFXdzBESUFFZ0IwRURkQ0lBYWlJSUtnSUVJUmNnQUNBSmFpQUlLZ0lBSUI0Z0lDQVRsQ0FmSUJLVWtwSWlGQ0FHbFpNaUZUZ0NBQ0FKSUFCQkJISnFJQmNnR3lBVElCMlVJQklnSEpTU2tpSVhJQWFWa3lJV09BSUFJQXdnQjBFQ2RDSUFhaUFWSUJXVUlCWWdGcFNTSWhVNEFnQWdBQ0FQYWlBVk9BSUFJQVVnQjBFR2RDSUFhaUFUSUFhVkloVTRBZ0FnQlNBQVFRUnlhaUFTSUFhVkloWTRBZ0FnQlNBQVFRaHlha01BQUlBL0lBYVZJaUU0QWdBZ0JTQUFRUXh5YWtFQU5nSUFJQVVnQUVFUWNtcEJBRFlDQUNBRklBQkJGSEpxUVFBMkFnQWdCU0FBUVJoeWFpQVVJQk9NSWhPVUlBWWdCcFFpQnBVNEFnQWdCU0FBUVJ4eWFpQVVJQktNSWhLVUlBYVZPQUlBSUFVZ0FFRWdjbXBCQURZQ0FDQUZJQUJCSkhKcVFRQTJBZ0FnQlNBQVFTaHlha0VBTmdJQUlBVWdBRUVzY21vZ0ZUZ0NBQ0FGSUFCQk1ISnFJQlk0QWdBZ0JTQUFRVFJ5YWlBaE9BSUFJQVVnQUVFNGNtb2dGeUFUbENBR2xUZ0NBQ0FGSUFCQlBISnFJQmNnRXBRZ0JwVTRBZ0FnQjBFQmFpRUhEQUVMQ3lBTUlBTkJCRUhvQUJEM0JDQVFLZ0lBUXdBQWdFQ1VRd0FBZ0VHWEloUkRBQURBUUpVaEUwRUFJUWREQUFBQUFDRUdBMEFnQXlBSFJ3UkFJQk1oRWlBTUlBZEJBblJxS2dJQUloVWdGRjVGQkVBZ0UwTUFBSUEvUXdBQWdEOGdGU0FVbFpNaUVpQVNJQktVbEpPVUlSSUxJQWRCQVdvaEJ5QUdJQktTSVFZTUFRc0xBa0FnQmlBWWxTSUdRODNNekQxZERRQUNRQ0FPUlNBR1F3QUFnRUJkUlhKRkJFQWdCaUFSbFVPa2NIMC9YZzBDSUE1QkNrY05BUXdDQ3lBT1FRcEdEUUVMUVFBaEIwRUFJUWdEUUNBRElBZEhCRUFnRkNBUElBZEJBblJxS2dJQUloRmdCRUFnQlNBSVFRVjBJZzFxSWd0REFBQ0FQeUFSSUJTVmt5SVJJQkdVSWhFZ0JTQUhRUVowSWdCcUtnSUFsRGdDQUNBRklBMUJCSEpxSUJFZ0JTQUFRUVJ5YWlvQ0FKUTRBZ0FnQlNBTlFRaHlhaUFSSUFVZ0FFRUljbW9xQWdDVU9BSUFJQVVnRFVFTWNtb2dFU0FGSUFCQkRISnFLZ0lBbERnQ0FDQUZJQTFCRUhKcUlCRWdCU0FBUVJCeWFpb0NBSlE0QWdBZ0JTQU5RUlJ5YWlBUklBVWdBRUVVY21vcUFnQ1VPQUlBSUFVZ0RVRVljbW9nRVNBRklBQkJHSEpxS2dJQWxEZ0NBQ0FGSUExQkhISnFJQkVnQlNBQVFSeHlhaW9DQUpRNEFnQWdDeUFSSUFVZ0FFRWdjbW9xQWdDVU9BSWdJQXNnRVNBRklBQkJKSEpxS2dJQWxEZ0NKQ0FMSUJFZ0JTQUFRU2h5YWlvQ0FKUTRBaWdnQ3lBUklBVWdBRUVzY21vcUFnQ1VPQUlzSUFzZ0VTQUZJQUJCTUhKcUtnSUFsRGdDTUNBTElCRWdCU0FBUVRSeWFpb0NBSlE0QWpRZ0N5QVJJQVVnQUVFNGNtb3FBZ0NVT0FJNElBc2dFU0FGSUFCQlBISnFLZ0lBbERnQ1BDQUpJQWhCQW5ScUlnQWdFU0FKSUFkQkEzUWlDMm9xQWdDVU9BSUFJQUFnRVNBSklBdEJCSEpxS2dJQWxEZ0NCQ0FJUVFKcUlRZ0xJQWRCQVdvaEJ3d0JDd3NnQ0VFRlRBUkFJQVVRTXlBSkVETWdEeEF6SUF3UU0wTUFBSUMvSVFZTUJ3c2dDaUFKSUFVZ0NCQ29CVUYvVEEwQ0lBUWdDaW9DQUNBRUtnSUFramdDQUNBRUlBb3FBZ1FnQkNvQ0JKSTRBZ1FnQkNBS0tnSUlJQVFxQWd5U09BSU1JQVFnQ2lvQ0RDQUVLZ0lRa2pnQ0VDQUVJQW9xQWhBZ0JDb0NGSkk0QWhRZ0JDQUtLZ0lVSUFRcUFoeVNPQUljSUFRZ0Npb0NHQ0FFS2dJZ2tqZ0NJQ0FFSUFvcUFod2dCQ29DSkpJNEFpUWdEa0VCYWlFT0lBWWhFUXdCQ3dzZ0JSQXpJQWtRTXlBUEVETWdEQkF6REFRTElBVVFNeUFKRURNZ0R4QXpJQXdRTTBNZ3ZMNU1JUVlNQXdVRFFDQUhRUVJIQkVBZ0IwRUNkQ0lOSUFRZ0NFRUVkQ0lPYW1vZ0FDQU9haUFOYWlvQ0FDQUFLZ0lzbFRnQ0FDQUhRUUZxSVFjTUFRc0xJQWhCQVdvaENBd0JDd0FMQUF0QkFFRURRYmlFQWtFQUVEZ2dCUkF6SUFrUU15QVBFRE5EQUFDQXZ5RUdDeUFLUVNCcUpBQWdCZ3ZtRHdNSWZ3WjhCSDBqQUVIZ0FXc2lCeVFBSUFjZ0JFRUVkQkE2SWdrMkF0QUJJQWtFUUFKQUlBY2dCRUVZYkJBNklnczJBdFFCSUF0RkRRQWdCRUVBSUFSQkFFb2JJUTBEUUNBSUlBMUhCRUFnRlNBRElBaEJER3hxSWdvcUFnaVNJUlVnRmlBS0tnSUVraUVXSUJjZ0Npb0NBSkloRnlBSVFRRnFJUWdNQVFzTElCVWdCTElpR0pVaEZTQVdJQmlWSVJZZ0Z5QVlsU0VYUVFBaENBTkFJQWdnRFVjRVFDQUpJQWhCQkhScUlnb2dBaUFJUVFOMGFpSU1LZ0lBdXprREFDQUtJQXdxQWdTN09RTUlJQXNnQ0VFWWJHb2lDaUFESUFoQkRHeHFJZ3dxQWdBZ0Y1TzdPUU1BSUFvZ0RDb0NCQ0FXazdzNUF3Z2dDaUFNS2dJSUlCV1R1emtERUNBSVFRRnFJUWdNQVFzTElBY2dCRFlDMkFGQkFDRUNBMEJCQUNFSUlBSkJBMGNFUUFOQUlBaEJBMGNFUUNBSFFmQUFhaUFDUVFWMGFpQUlRUU4wYWlBQklBSkJCSFJxSUFoQkFuUnFLZ0lBdXprREFDQUlRUUZxSVFnTUFRc0xJQUpCQVdvaEFnd0JDd3NnQnlBQktnSU1JQmNnQVNvQ0FKUWdGaUFCS2dJRWxKSWdGU0FCS2dJSWxKS1N1emtEaUFFZ0J5QUJLZ0ljSUJjZ0FTb0NFSlFnRmlBQktnSVVsSklnRlNBQktnSVlsSktTdXprRHFBRWdCeUFCS2dJc0lCY2dBU29DSUpRZ0ZpQUJLZ0lrbEpJZ0ZTQUJLZ0lvbEpLU3V6a0R5QUVDUUNBR1JRUkFJQUFnQjBIUUFXb2dCMEh3QUdvZ0IwRVFhaUFIUVFocUVOUUZRWDlLRFFFZ0IwS0FnSUNBd1BEMXk4RUFOd01JREFFTElBZEI4QUJxSVFzZ0IwRVFhaUVLSXdCQm9BRnJJZ1FrQUVGL0lRRUNRQ0FIS0FMWUFTSURRUVJJRFFBQ2Z5QUFLd09BQVNBRHQ2SWlFSmxFQUFBQUFBQUE0RUZqQkVBZ0VLb01BUXRCZ0lDQWdIZ0xJUWtnQTBIZ0FHd1FPaUlHUlFSQVFRQkJBMEhKRFVFQUVEZ01BUXNnQTBFRWRCQTZJZ0pGQkVCQkFFRURRY2tOUVFBUU9DQUdFRE1NQVFzZ0EwRURkQ0lCRURvaURVVUVRRUVBUVFOQnlRMUJBQkE0SUFZUU15QUNFRE5CZnlFQkRBRUxJQUVRT2lJSUJFQWdDVUVCYTBFRElBbEJBMG9iSVFsQkFDRURBMEJCQUNFQklBTkJBMFlFUUNBSUlBbEJBM1JxSVE1QkFDRU1Ba0FEUUNBQUlBb2dCRUV3YWhEY0JrRUFJUUVEUUNBSEtBTFlBU0lESUFGS0JFQWdCRUdRQVdvZ0JFRXdhaUFIS0FMVUFTQUJRUmhzYWhEN0JVRi9UQTBESUFGQkJIUWlBeUFIS0FMUUFXb2lDU3NEQ0NFUklBUXJBNWdCSVJJZ0FpQURhaUFKS3dNQUlBUXJBNUFCb1NJUU9RTUFJQUlnQTBFSWNtb2dFU0FTb1NJUk9RTUFJQWdnQVVFRGRDSURhaUFRSUJDaUlCRWdFYUtnSWhBNUF3QWdBeUFOYWlBUU9RTUFJQUZCQVdvaEFRd0JDd3NnQ0NBRFFRaEJBUkQzQkVFQUlRRWdCeWdDMkFFaUEwRUFJQU5CQUVvYklRa2dEaXNEQUVRQUFBQUFBQUFRUUtKRUFBQUFBQUFBTUVDbEloSkVBQUFBQUFBQUdFQ2pJUkJFQUFBQUFBQUFBQUFoRXdOQUlBRWdDVWNFUUNBUUlSRWdDQ0FCUVFOMGFpc0RBQ0lVSUJKa1JRUkFJQkJFQUFBQUFBQUE4RDlFQUFBQUFBQUE4RDhnRkNBU282RWlFU0FSSUJHaW9xR2lJUkVMSUFGQkFXb2hBU0FUSUJHZ0lSTU1BUXNMQWtBZ0V5QUR0Nk1pRUNBQUt3Tm9ZdzBBQWtBZ0RFVU5BQ0FRSUFBckEzaGpSUTBBSUFBckEzQWdFQ0FQbzJNTkFRdEJBQ0VKUVFBaEN5QU1JQUFvQW1CR0RRQURRQ0FESUFsS0JFQWdFaUFOSUFsQkEzUnFLd01BSWc5bUJFQWdCaUFMUVFac1FRTjBJZ05xSWdFZ0FDQUtJQWNvQXRRQklBbEJHR3hxRVBRRlFYOU1EUVVnQVVRQUFBQUFBQUR3UHlBUElCS2pvU0lQSUEraUlnOGdBU3NEQUtJNUF3QWdCaUFEUVFoeWFpSURJQThnQXlzREFLSTVBd0FnQVNBUElBRXJBeENpT1FNUUlBRWdEeUFCS3dNWW9qa0RHQ0FCSUE4Z0FTc0RJS0k1QXlBZ0FTQVBJQUVyQXlpaU9RTW9JQUVnRHlBQkt3TXdvamtETUNBQklBOGdBU3NET0tJNUF6Z2dBVUZBYXlJRElBOGdBeXNEQUtJNUF3QWdBU0FQSUFFckEwaWlPUU5JSUFFZ0R5QUJLd05Rb2prRFVDQUJJQThnQVNzRFdLSTVBMWdnQWlBTFFRTjBhaUlCSUE4Z0FpQUpRUVIwSWdOcUt3TUFvamtEQUNBQklBOGdBaUFEUVFoeWFpc0RBS0k1QXdnZ0MwRUNhaUVMSUFjb0F0Z0JJUU1MSUFsQkFXb2hDUXdCQ3dzZ0MwRUZUQTBDSUFRZ0FpQUdJQXNRN3dWQmYwd05BaUFLSUFRUTZRVWdERUVCYWlFTUlCQWhEd3dCQ3dzZ0J5QVFPUU1JSUFZUU15QUNFRE1nRFJBeklBZ1FNMEVBSVFFTUJBc2dCaEF6SUFJUU15QU5FRE1nQ0JBelFYOGhBUXdEQlFOQUlBRkJCRWNFUUNBQlFRTjBJZ3dnQ2lBRFFRVjBJZzVxYWlBTElBNXFJQXhxS3dNQU9RTUFJQUZCQVdvaEFRd0JDd3NnQTBFQmFpRUREQUVMQUFzQUMwRUFRUU5CeVExQkFCQTRJQVlRTXlBQ0VETWdEUkF6UVg4aEFRc2dCRUdnQVdva0FDQUJRWDlLRFFBZ0IwS0FnSUNBd1BEMXk4RUFOd01JQ3lBSEtBTFFBUkF6SUFjb0F0UUJFRE5CQUNFQ0EwQkJBQ0VJSUFKQkEwY0VRQU5BSUFoQkEwY0VRQ0FGSUFKQkJIUnFJQWhCQW5ScUlBZEJFR29nQWtFRmRHb2dDRUVEZEdvckF3QzJPQUlBSUFoQkFXb2hDQXdCQ3dzZ0FrRUJhaUVDREFFTEN5QUZJQWNyQXlnZ0J5c0RFQ0FYdXlJUW9xRWdCeXNER0NBV3V5SVBvcUVnQnlzRElDQVZ1eUlSb3FHMk9BSU1JQVVnQnlzRFNDQUhLd013SUJDaW9TQUhLd000SUEraW9TQUhRVUJyS3dNQUlCR2lvYlk0QWh3Z0JTQUhLd05vSUFjckExQWdFS0toSUFjckExZ2dENktoSUFjckEyQWdFYUtodGpnQ0xDQUhLd01JSVJBZ0IwSGdBV29rQUNBUXRnOExDMEVBUVFOQjlJTUNRUUFRT0VFQkVBRUFDNjRDQVFWL0EwQUNmMEVBSVFJZ0FTZ0NUQnBCL3dFaEFpQUFJUU1DUUFOQUFuOGdBU2dDQkNJRVFRb2dBU2dDQ0NBRWF4RFdBeUlHQkVBZ0JpQUJLQUlFSWdSclFRRnFEQUVMSUFFb0FnZ2dBU2dDQkNJRWF3c2hCU0FESUFRZ0JTQUNJQUlnQlVzYklnUVFRQm9nQVNBQktBSUVJQVJxSWdVMkFnUWdBeUFFYWlFREFrQWdCZzBBSUFJZ0JHc2lCRVVOQUFKQUlBRW9BZ2dnQlVzRVFDQUJJQVZCQVdvMkFnUWdCUzBBQUNFQ0RBRUxJQUVRZ3dNaUFrRi9TZzBBUVFBaEFpQUFJQU5HRFFNZ0FTMEFBRUVRY1VVTkF3d0JDeUFESUFJNkFBQWdBMEVCYWlFRElBSkIvd0Z4UVFwR0RRQWdCRUVCYXlJQ0RRRUxDeUFBUlFSQVFRQWhBZ3dCQ3lBRFFRQTZBQUFnQUNFQ0N5QUNDd1JBSUFBdEFBQWlBMEVLUmlBRFFTTkdjZzBCQ3dzZ0Fnc1ZBQ0FBUXdBQWdEOGdBU0FCUXdBQUFBQmJHNVVMSWdBZ0FDQUJLZ0lBSUFJcUFnQ1RPQUlBSUFBZ0FTb0NCQ0FDS2dJRWt6Z0NCQXNSQUNBQVJRUkFEd3NnQUNBQk9RT0FBUXNSQUNBQUVOa0ZJQUVRMlFVZ0FoQ0tCZ3NtQVFGL0lBQkJCR29ROHdNaUFVRi9SZ1JBSUFBZ0FDZ0NBQ2dDQ0JFQkFBc2dBVUYvUmd0cUFRSi9Jd0JCRUdzaUJDUUFJQVJCQURZQ0RDQUFRUXhxSUFSQkRHb2dBeEN4QVNBQkJFQWdBQ2dDRUJvZ0FSRDJBeUVGQ3lBQUlBVTJBZ0FnQUNBRklBSkJBblJxSWdJMkFnZ2dBQ0FDTmdJRUlBQVFQU0FGSUFGQkFuUnFOZ0lBSUFSQkVHb2tBQ0FBQ3cwQUlBQW9BZ0FRTXlBQUVETUxKd0VCZnlNQVFSQnJJZ0VrQUNBQlFRaHFJQUFRbndFZ0FTZ0NDQ0VBSUFGQkVHb2tBQ0FBQ3hvQUlBQVFud1lnQUVIYzNnRTJBZ0FnQUVFRWFpQUJFT2NDQy9VVUFnMS9BWDBqQUVFUWF5SU5KQUFnQVNnQ0FFRUNSZ1JBQWtBQ1FBSkFBa0FDUUNBQ0tBSUFEZ01CQXdBQ0N5QUJLQUlZSVFzZ0FFRXNha0VBRUR3aEFDQUNLQUlZSVFnZ0FpZ0NDQ0VLQWtBZ0FpZ0NCQ0lIUVFSTEJFQWdDa0VFU3dSQUlBZEJBbXNoQmlBSFFRRnJRUUowSVFrZ0IwRURhMEVDZENFTUlBZEJCR3RCQW5RaERpQUFJUUVEUUFKQUlBTWdDa1lFUUVFQUlRVWdDeUVDSUFkQkFuUWlCQ0FBSWdacUlnRWhBeUFCSUFScUlnUWhDQXdCQzBFQ0lRVWdBU0FJSUFNZ0IyeEJBblJxSWdJcUFnZ2dBaW9DQUNJUUlCQkRBQURBUUpRZ0VDQUNLZ0lFa2tNQUFJQkFsSktTa2pnQ0FDQUJJQUlxQWd3Z0Fpb0NBQ0lRSUFJcUFnUkRBQURBUUpRZ0VDQUNLZ0lJa2tNQUFJQkFsSktTa2pnQ0JDQUJRUWhxSVFRRFFDQUZJQVpHQkVBZ0JDQUNJQWxxSWdFcUFnQWlFQ0FDSUE1cUtnSUFJQUlnQmtFQ2RHb2lCU29DQUVNQUFNQkFsQ0FRSUFJZ0RHb2lBaW9DQUpKREFBQ0FRSlNTa3BJNEFnQWdCQ0FCS2dJQUloQWdBaW9DQUNBUVF3QUF3RUNVSUJBZ0JTb0NBSkpEQUFDQVFKU1NrcEk0QWdRZ0EwRUJhaUVESUFSQkNHb2hBUXdEQlNBRUlBSWdCVUVDZEdvaUFTb0NDQ0FCUVFocktnSUFJQUVxQWdCREFBREFRSlFnQVVFRWF5b0NBQ0FDSUFWQkFXb2lCVUVDZEdvcUFnQ1NRd0FBZ0VDVWtwS1NPQUlBSUFSQkJHb2hCQXdCQ3dBTEFBc0xBMEFnQlNBSFJ3UkFJQUlnQ0NvQ0FDQUdLZ0lBSWhBZ0VFTUFBTUJBbENBUUlBTXFBZ0NTUXdBQWdFQ1VrcEtTUXdBQWdEdVVPQUlBSUFoQkJHb2hDQ0FEUVFScUlRTWdCa0VFYWlFR0lBSkJCR29oQWlBRlFRRnFJUVVNQVFzTElBc2dCMEVDZENJRGFpRUNJQU1nQkdvaEJrRUFJUVVnQUNFREEwQWdCU0FIUmdSQUFrQWdDa0VDYXlFTVFRSWhDUU5BQWtBZ0NTQU1SZ1JBSUFBZ0NrRUVheUFIYkVFQ2RHb2lBU0FIUVFKMElnTnFJZ1FnQTJvaUFpQURhaUVHSUFzZ0J5QU1iRUVDZEdvaEEwRUFJUVVNQVFzZ0FDQUpRUUpySUFkc1FRSjBhaUlCSUFkQkFuUWlBMm9pQkNBRGFpSUNJQU5xSWdZZ0Eyb2hBeUFMSUFjZ0NXeEJBblJxSVFoQkFDRUZBMEFnQlNBSFJnUkFJQWxCQVdvaENRd0RCU0FJSUFNcUFnQWdBU29DQUNBQ0tnSUFRd0FBd0VDVUlBUXFBZ0FnQmlvQ0FKSkRBQUNBUUpTU2twSkRBQUNBTzVRNEFnQWdBMEVFYWlFRElBWkJCR29oQmlBQ1FRUnFJUUlnQkVFRWFpRUVJQUZCQkdvaEFTQUlRUVJxSVFnZ0JVRUJhaUVGREFFTEFBc0FDd3NEUUNBRklBZEhCRUFnQXlBR0tnSUFJaEFnQVNvQ0FDQUNLZ0lBUXdBQXdFQ1VJQkFnQkNvQ0FKSkRBQUNBUUpTU2twSkRBQUNBTzVRNEFnQWdCa0VFYWlFR0lBSkJCR29oQWlBRVFRUnFJUVFnQVVFRWFpRUJJQU5CQkdvaEF5QUZRUUZxSVFVTUFRc0xJQUFnQ2tFRGF5QUhiRUVDZEdvaUFTQUhRUUowSWdCcUlnUWdBR29oQWlBTElBcEJBV3NnQjJ4QkFuUnFJUVpCQUNFRkEwQWdCU0FIUmcwQklBWWdBaW9DQUNJUUlBRXFBZ0FnRUVNQUFNQkFsQ0FRSUFRcUFnQ1NRd0FBZ0VDVWtwS1NRd0FBZ0R1VU9BSUFJQUpCQkdvaEFpQUVRUVJxSVFRZ0FVRUVhaUVCSUFaQkJHb2hCaUFGUVFGcUlRVU1BQXNBQ3dVZ0FpQUdLZ0lBSUFNcUFnQWlFQ0FCS2dJQVF3QUF3RUNVSUJBZ0JDb0NBSkpEQUFDQVFKU1NrcEpEQUFDQU81UTRBZ0FnQmtFRWFpRUdJQVJCQkdvaEJDQUJRUVJxSVFFZ0EwRUVhaUVESUFKQkJHb2hBaUFGUVFGcUlRVU1BUXNMREFJTFFjQ1RCRUh2TXhBeVFkMFpFREpCK1NRUU1rR3BBUkExUWYwcEVESkI1aTBRTWhBMkVBQUFDMEhBa3dSQjdCQVFNa0hkR1JBeVFma2tFREpCcUFFUU5VSDlLUkF5UWVZdEVESVFOaEFBQUFzTUF3dEJFQkFKSWdBZ0RVSFgrZ0FRbXdFUTJBSWdBRUdjM2dGQkRoQUlBQXRCRUJBSklnQWdEVUdjL1FBUW13RVEyQUlnQUVHYzNnRkJEaEFJQUFzZ0FTZ0NHQ0VMSUFBb0FpQWhBQ0FDS0FJWUlRZ2dBaWdDQ0NFS0FrQWdBaWdDQkNJSFFRUkxCRUFnQ2tFRVN3UkFJQWRCQkdzaENTQUhRUU5ySVF3Z0IwRUNheUVHSUFkQkFXc2hEaUFBSVFFRFFBSkFJQU1nQ2tZRVFFRUFJUVVnQ3lFQ0lBZEJBWFFpQkNBQUlnWnFJZ0VoQXlBQklBUnFJZ1FoQ0F3QkMwRUNJUVVnQVNBSUlBTWdCMnhxSWdJdEFBQWlCRUVIYkNBQ0xRQUNhaUFDTFFBQklBUnFRUUowYWpzQkFDQUJJQUl0QUFNZ0FpMEFBQ0lFSUFJdEFBRkJCbXhxYWlBQ0xRQUNJQVJxUVFKMGFqc0JBaUFCUVFScUlRUURRQ0FGSUFaR0JFQWdCQ0FDSUFscUxRQUFJQUlnRG1vaUFTMEFBQ0lGSUFJZ0Jtb2lEeTBBQUVFR2JHcHFJQVVnQWlBTWFpSUNMUUFBYWtFQ2RHbzdBUUFnQkNBQ0xRQUFJQUV0QUFBaUFVRUhiR29nRHkwQUFDQUJha0VDZEdvN0FRSWdBMEVCYWlFRElBUkJCR29oQVF3REJTQUVJQUlnQldvaUFTMEFBRUVHYkNBQlFRSnJMUUFBYWlBQ0lBVkJBV29pQldvdEFBQWdBVUVCYXkwQUFHcEJBblJxSUFFdEFBSnFPd0VBSUFSQkFtb2hCQXdCQ3dBTEFBc0xBMEFnQlNBSFJ3UkFJQUlnQ0M4QkFDQUdMd0VBSWdsQkIyd2dBeThCQUNBSmFrRUNkR3Bxc2tNQUFJQTdsRGdDQUNBSVFRSnFJUWdnQTBFQ2FpRURJQVpCQW1vaEJpQUNRUVJxSVFJZ0JVRUJhaUVGREFFTEN5QUxJQWRCQW5ScUlRSWdCQ0FIUVFGMGFpRUdRUUFoQlNBQUlRTURRQ0FGSUFkR0JFQUNRQ0FLUVFKcklReEJBaUVKQTBBQ1FDQUpJQXhHQkVBZ0FDQUtRUVJySUFkc1FRRjBhaUlCSUFkQkFYUWlBMm9pQkNBRGFpSUNJQU5xSVFZZ0N5QUhJQXhzUVFKMGFpRURRUUFoQlF3QkN5QUFJQWxCQW1zZ0IyeEJBWFJxSWdFZ0IwRUJkQ0lEYWlJRUlBTnFJZ0lnQTJvaUJpQURhaUVESUFzZ0J5QUpiRUVDZEdvaENFRUFJUVVEUUNBRklBZEdCRUFnQ1VFQmFpRUpEQU1GSUFnZ0F5OEJBQ0FCTHdFQUlBSXZBUUJCQm14cUlBWXZBUUFnQkM4QkFHcEJBblJxYXJKREFBQ0FPNVE0QWdBZ0EwRUNhaUVESUFaQkFtb2hCaUFDUVFKcUlRSWdCRUVDYWlFRUlBRkJBbW9oQVNBSVFRUnFJUWdnQlVFQmFpRUZEQUVMQUFzQUN3c0RRQ0FGSUFkSEJFQWdBeUFCTHdFQUlBSXZBUUJCQm14cUlBWXZBUUFpQ0NBRUx3RUFha0VDZEdvZ0NHcXlRd0FBZ0R1VU9BSUFJQVpCQW1vaEJpQUNRUUpxSVFJZ0JFRUNhaUVFSUFGQkFtb2hBU0FEUVFScUlRTWdCVUVCYWlFRkRBRUxDeUFBSUFwQkEyc2dCMnhCQVhScUlnRWdCMEVCZENJQWFpSUVJQUJxSVFJZ0N5QUtRUUZySUFkc1FRSjBhaUVHUVFBaEJRTkFJQVVnQjBZTkFTQUdJQUV2QVFBZ0FpOEJBQ0lBUVFac2FpQUFJQVF2QVFCcVFRSjBhaUFBYXJKREFBQ0FPNVE0QWdBZ0FrRUNhaUVDSUFSQkFtb2hCQ0FCUVFKcUlRRWdCa0VFYWlFR0lBVkJBV29oQlF3QUN3QUxCU0FDSUFZdkFRQWdBeThCQUNJSUlBRXZBUUJCQm14cUlBUXZBUUFnQ0dwQkFuUnFhckpEQUFDQU81UTRBZ0FnQmtFQ2FpRUdJQVJCQW1vaEJDQUJRUUpxSVFFZ0EwRUNhaUVESUFKQkJHb2hBaUFGUVFGcUlRVU1BUXNMREFJTFFjQ1RCRUh2TXhBeVFkMFpFREpCK1NRUU1rRTRFRFZCL1NrUU1rSG1MUkF5RURZUUFBQUxRY0NUQkVIc0VCQXlRZDBaRURKQitTUVFNa0UzRURWQi9Ta1FNa0htTFJBeUVEWVFBQUFMQ3lBTlFSQnFKQUFQQzBIQWt3UkIwZk1BRURKQjNSa1FNa0g1SkJBeVFlVUNFRFZCL1NrUU1rR0o5d0FRTWhBMkVBQUFDd3dBSUFFZ0Fpa0NBRGNDQUFzckFDQUFLQUlBR2lBQUtBSUFJQUFRdlFGQkRHeHFHaUFBS0FJQUdpQUFLQUlBSUFBUVYwRU1iR29hQzFBQkFYOGdBQkNYQkNBQUVEUWdBQ2dDQUNBQUtBSUVJQUZCQkdvaUFoQzZBaUFBSUFJUVNpQUFRUVJxSUFGQkNHb1FTaUFBRURRZ0FSQTlFRW9nQVNBQktBSUVOZ0lBSUFBZ0FCQkRFS0lEQzFzQkFuOGpBRUVRYXlJQ0pBQWdBaUFCTmdJTUlBRWdBQkNLQkNJRFRRUkFJQUFROEFFaUFDQURRUUYyU1FSQUlBSWdBRUVCZERZQ0NDQUNRUWhxSUFKQkRHb1FnQUVvQWdBaEF3c2dBa0VRYWlRQUlBTVBDeENQQVFBTE5BQWdBQ2dDQUJvZ0FDZ0NBQ0FBRU5FQlFRTjBhaG9nQUNnQ0FDQUFFRVJCQTNScUdpQUFLQUlBSUFBUTBRRkJBM1JxR2dzS0FDQUFLQUlFRUkwRUN5NEJBWDhnQUNnQ0JDQUJLQUlJRUx3QklnSUVRQ0FDSUFBZ0FSQ0xCRUYvU2dSQUlBSVBDeUFDRUVVTFFRQUxJUUVCZlFKQUlBQkRBQUFBQUYwTkFDQUJJQUFpQWwxRkRRQWdBU0VDQ3lBQ0M2UUJBUUovSUFBb0FnUWdBQkEwS0FJQVJ3UkFJd0JCRUdzaUF5UUFJQU1nQUVFQkVLMEdJUUlnQUJBMElBSW9BZ1FnQVJDc0JpQUNJQUlvQWdSQkpHbzJBZ1FnQWhCMElBTkJFR29rQUE4TEl3QkJJR3NpQXlRQUlBQVFOQ0lDSUFOQkNHb2dBQ0FBRUlVQlFRRnFFS3NHSUFBUWhRRWdBaENSQkNJQ0tBSUlJQUVRckFZZ0FpQUNLQUlJUVNScU5nSUlJQUFnQWhDUUJDQUNFSThFSUFOQklHb2tBQXU1Q1FRR2ZBRitBWDhCZlNBQVFRRWdCSFN5SWcwZ0FwUUNmQUpBQWtBQ1FDQUVRUUZydHlJSXZTSUxRaUNJcHlJRVFmLy8vLzhIY1NJQUlBdW5JZ3h5Qkh3Z0NFUUFBQUFBQUFBQVFLQWdBRUdBZ01EL0IwdEJBU0FNUlNBQVFZQ0F3UDhIUjNJYkRRUWFBa0FnREEwQUlBaEVBQUFBQUFBQUFBQWdDMEovVlJzZ0FFR0FnTUQvQjBZTkJSb2dBRUdBZ01EL0EwWUVRRVFBQUFBQUFBQUFRQ0FMUW45VkRRWWFSQUFBQUFBQUFPQS9EQVlMUkFBQUFBQUFBQkJBSUFSQmdJQ0FnQVJHRFFVYUlBUkJnSUNBL3dOSERRQkV6VHQvWnA2ZzlqOE1CUXNnQUVHQmdJQ1BCRThOQTBIdytRSXJBd0JFQUFBQUFBQUE4RDlCNFBrQ0t3TUFJZ1ZFQUFBQUFBQUE4RCtnb3lJR1JBQUFBQUFBQVBBL0lBV2hJZ2NnQnlBR29pSUh2VUtBZ0lDQWNJTy9JZ1pFQUFBQUFBQUFBRUNpb1VRQUFBQUFBQUR3UDBRQUFBQUFBQUFBUUNBRm9hRWdCcUtob2lJRklBWWdCcUlpQ1VRQUFBQUFBQUFJUUtBZ0JTQUhJQWFnb2lBSElBZWlJZ1VnQmFJZ0JTQUZJQVVnQlNBRlJPOU9SVW9vZnNvL29rUmwyOG1UU29iTlA2Q2lSQUZCSGFsZ2RORS9vS0pFVFNhUFVWVlYxVCtnb2tUL3EyL2J0bTNiUDZDaVJBTXpNek16TStNL29LS2dJZ3FndlVLQWdJQ0FjSU8vSWdXaUlBY2dDaUFGUkFBQUFBQUFBQWpBb0NBSm9hR2lvQ0lISUFjZ0JpQUZvaUlHb0wxQ2dJQ0FnSENEdnlJRklBYWhvVVQ5QXpyY0NjZnVQNklnQlVUMUFWc1U0QzgrdnFLZ29DSUdRWUQ2QWlzREFDSUhJQVlnQlVRQUFBRGdDY2Z1UDZJaUJhQ2dSQUFBQUFBQUFQQS9vTDFDZ0lDQWdIQ0R2eUlHUkFBQUFBQUFBUEEvb1NBSG9TQUZvYUVoQnlBR0lBdENnSUNBZ0hDRHZ5SUpvaUlGSUFjZ0NLSWdDQ0FKb1NBR29xQWlCcUFpQ0wwaUM2Y2hCQUpBSUF0Q0lJaW5JZ0JCZ0lEQWhBUk9CRUFnQUVHQWdNQ0VCR3NnQkhJTkF5QUdSUDZDSzJWSEZaYzhvQ0FJSUFXaFpFVU5BUXdEQ3lBQVFZRDQvLzhIY1VHQW1NT0VCRWtOQUNBQVFZRG92UHNEYWlBRWNnMERJQVlnQ0NBRm9XVkZEUUFNQXd0QkFDRUVBbndnQUVILy8vLy9CM0VpREVHQmdJRC9BMDhFZmtFQVFZQ0F3QUFnREVFVWRrSCtCMnQySUFCcUlnQkIvLzgvY1VHQWdNQUFja0dUQ0NBQVFSUjJRZjhQY1NJTWEzWWlCR3NnQkNBTFFnQlRHeUVFSUFZZ0JVR0FnRUFnREVIL0IydDFJQUJ4clVJZ2hyK2hJZ1dndlFVZ0N3dENnSUNBZ0hDRHZ5SUlSQUFBQUFCREx1WS9vaUlISUFZZ0NDQUZvYUZFN3puNi9rSXU1aitpSUFoRU9XeW9ER0ZjSUw2aW9DSUlvQ0lGSUFVZ0JTQUZJQVdpSWdZZ0JpQUdJQVlnQmtUUXBMNXlhVGRtUHFKRThXdlN4VUc5dTc2Z29rUXMzaVd2YWxZUlA2Q2lSSk85dmhac3dXYS9vS0pFUGxWVlZWVlZ4VCtnb3FFaUJxSWdCa1FBQUFBQUFBQUF3S0NqSUFnZ0JTQUhvYUVpQmlBRklBYWlvS0doUkFBQUFBQUFBUEEvb0NJRnZTSUxRaUNJcHlBRVFSUjBhaUlBUWYvL1Awd0VRQ0FGSUFRUTlnRU1BUXNnQzBMLy8vLy9ENE1nQUsxQ0lJYUV2d3RFQUFBQUFBQUE4RCtpQlVRQUFBQUFBQUR3UHdzTUF3dEVBQUFBQUFBQThIOE1BZ3RFQUFBQUFBQUFBQUFNQVF0RUFBQUFBQUFBOEg5RUFBQUFBQUFBQUFBZ0JFRUFTaHNMUkFBQUFBQUFBT0Mvb0xZaUFwSTRBZ0FnQVNBTklBT1VJQUtTT0FJQUN5UUFJQUFnQVRZQ0FDQUFJQUVvQWdRaUFUWUNCQ0FBSUFFZ0FrRU1iR28yQWdnZ0FBdEhBQ0FBSUFGSkJFQWdBQ0FCSUFJUVFCb1BDeUFDQkVBZ0FDQUNhaUVBSUFFZ0Ftb2hBUU5BSUFCQkFXc2lBQ0FCUVFGcklnRXRBQUE2QUFBZ0FrRUJheUlDRFFBTEN3dWNDQUVMZnlBQVJRUkFJQUVRT2c4TElBRkJRRThFUUVHVS93TkJNRFlDQUVFQUR3c0NmMEVRSUFGQkMycEJlSEVnQVVFTFNSc2hCaUFBUVFocklnVW9BZ1FpQ1VGNGNTRUVBa0FnQ1VFRGNVVUVRRUVBSUFaQmdBSkpEUUlhSUFaQkJHb2dCRTBFUUNBRklRSWdCQ0FHYTBId3JBUW9BZ0JCQVhSTkRRSUxRUUFNQWdzZ0JDQUZhaUVIQWtBZ0JDQUdUd1JBSUFRZ0Jtc2lBMEVRU1EwQklBVWdDVUVCY1NBR2NrRUNjallDQkNBRklBWnFJZ0lnQTBFRGNqWUNCQ0FISUFjb0FnUkJBWEkyQWdRZ0FpQURFT0FHREFFTElBZEJxS2tFS0FJQVJnUkFRWnlwQkNnQ0FDQUVhaUlFSUFaTkRRSWdCU0FKUVFGeElBWnlRUUp5TmdJRUlBVWdCbW9pQXlBRUlBWnJJZ0pCQVhJMkFnUkJuS2tFSUFJMkFnQkJxS2tFSUFNMkFnQU1BUXNnQjBHa3FRUW9BZ0JHQkVCQm1La0VLQUlBSUFScUlnTWdCa2tOQWdKQUlBTWdCbXNpQWtFUVR3UkFJQVVnQ1VFQmNTQUdja0VDY2pZQ0JDQUZJQVpxSWdRZ0FrRUJjallDQkNBRElBVnFJZ01nQWpZQ0FDQURJQU1vQWdSQmZuRTJBZ1FNQVFzZ0JTQUpRUUZ4SUFOeVFRSnlOZ0lFSUFNZ0JXb2lBaUFDS0FJRVFRRnlOZ0lFUVFBaEFrRUFJUVFMUWFTcEJDQUVOZ0lBUVppcEJDQUNOZ0lBREFFTElBY29BZ1FpQTBFQ2NRMEJJQU5CZUhFZ0JHb2lDaUFHU1EwQklBb2dCbXNoREFKQUlBTkIvd0ZOQkVBZ0J5Z0NDQ0lFSUFOQkEzWWlBa0VEZEVHNHFRUnFSaG9nQkNBSEtBSU1JZ05HQkVCQmtLa0VRWkNwQkNnQ0FFRitJQUozY1RZQ0FBd0NDeUFFSUFNMkFnd2dBeUFFTmdJSURBRUxJQWNvQWhnaEN3SkFJQWNnQnlnQ0RDSUlSd1JBSUFjb0FnZ2lBa0dncVFRb0FnQkpHaUFDSUFnMkFnd2dDQ0FDTmdJSURBRUxBa0FnQjBFVWFpSUVLQUlBSWdJTkFDQUhRUkJxSWdRb0FnQWlBZzBBUVFBaENBd0JDd05BSUFRaEF5QUNJZ2hCRkdvaUJDZ0NBQ0lDRFFBZ0NFRVFhaUVFSUFnb0FoQWlBZzBBQ3lBRFFRQTJBZ0FMSUF0RkRRQUNRQ0FISUFjb0Fod2lBMEVDZEVIQXF3UnFJZ0lvQWdCR0JFQWdBaUFJTmdJQUlBZ05BVUdVcVFSQmxLa0VLQUlBUVg0Z0EzZHhOZ0lBREFJTElBdEJFRUVVSUFzb0FoQWdCMFliYWlBSU5nSUFJQWhGRFFFTElBZ2dDellDR0NBSEtBSVFJZ0lFUUNBSUlBSTJBaEFnQWlBSU5nSVlDeUFIS0FJVUlnSkZEUUFnQ0NBQ05nSVVJQUlnQ0RZQ0dBc2dERUVQVFFSQUlBVWdDVUVCY1NBS2NrRUNjallDQkNBRklBcHFJZ0lnQWlnQ0JFRUJjallDQkF3QkN5QUZJQWxCQVhFZ0JuSkJBbkkyQWdRZ0JTQUdhaUlESUF4QkEzSTJBZ1FnQlNBS2FpSUNJQUlvQWdSQkFYSTJBZ1FnQXlBTUVPQUdDeUFGSVFJTElBSUxJZ0lFUUNBQ1FRaHFEd3NnQVJBNklnVkZCRUJCQUE4TElBVWdBRUY4UVhnZ0FFRUVheWdDQUNJQ1FRTnhHeUFDUVhoeGFpSUNJQUVnQVNBQ1N4c1FRQm9nQUJBeklBVUxSUUVCZnlNQVFSQnJJZ0lrQUFKQUlBRVFqQUZGQkVBZ0FDQUJLQUlJTmdJSUlBQWdBU2tDQURjQ0FBd0JDeUFBSUFFb0FnQWdBU2dDQkJDc0JBc2dBa0VRYWlRQUN4MEFJQUJCLy8vLy93TkxCRUJCME9BREVKUUJBQXNnQUVFQ2RCQkxDeVFBSUFCQkFrOEVmeUFBUVFScVFYeHhJZ0FnQUVFQmF5SUFJQUJCQWtZYkJVRUJDd3NrQUNBQVFRdFBCSDhnQUVFUWFrRndjU0lBSUFCQkFXc2lBQ0FBUVF0R0d3VkJDZ3NMQ0FBZ0FDZ0NBRVVMRHdBZ0FDQUFLQUlBUVFGcU5nSUFDejBCQVg4akFFRVFheUlESkFBZ0EwRUlhaUFCRUVjZ0FpQURRUWhxRUpzQ0lnRVFvUUUyQWdBZ0FDQUJFS0FCSUFOQkNHb1FRaUFEUVJCcUpBQUxPd0VCZnlNQVFSQnJJZ0lrQUNBQ1FRaHFJQUFRUnlBQ1FRaHFFSllCUWRDeUEwSHFzZ01nQVJEb0FTQUNRUWhxRUVJZ0FrRVFhaVFBSUFFTHRBUUJDMzhqQUVHQUFXc2lDQ1FBSUFnZ0FUWUNlQ0FDSUFNUTdnTWhDU0FJUWNFQ05nSVFJQWhCQ0dwQkFDQUlRUkJxRUdNaER5QUlRUkJxSVFvQ1FDQUpRZVVBVHdSQUlBa1FPaUlLUlEwQklBOGdDaEI1Q3lBS0lRY2dBaUVCQTBBZ0FTQURSZ1JBQTBBQ1FDQUFJQWhCK0FCcUVJMEJRUUFnQ1J0RkJFQWdBQ0FJUWZnQWFoQjZCRUFnQlNBRktBSUFRUUp5TmdJQUN3d0JDeUFBRUdZaERTQUdSUVJBSUFRZ0RSQ0dBU0VOQ3lBTVFRRnFJUkJCQUNFT0lBb2hCeUFDSVFFRFFDQUJJQU5HQkVBZ0VDRU1JQTVGRFFNZ0FCQjFHaUFLSVFjZ0FpRUJJQWtnQzJwQkFra05Bd05BSUFFZ0EwWUVRQXdGQlFKQUlBY3RBQUJCQWtjTkFDQUJFRGNnREVZTkFDQUhRUUE2QUFBZ0MwRUJheUVMQ3lBSFFRRnFJUWNnQVVFTWFpRUJEQUVMQUFzQUJRSkFJQWN0QUFCQkFVY05BQ0FCSUF3UXV3TW9BZ0FoRVFKQUlBWUVmeUFSQlNBRUlCRVFoZ0VMSUExR0JFQkJBU0VPSUFFUU55QVFSdzBDSUFkQkFqb0FBQ0FMUVFGcUlRc01BUXNnQjBFQU9nQUFDeUFKUVFGcklRa0xJQWRCQVdvaEJ5QUJRUXhxSVFFTUFRc0FDd0FMQ3dKQUFrQURRQ0FDSUFOR0RRRWdDaTBBQUVFQ1J3UkFJQXBCQVdvaENpQUNRUXhxSVFJTUFRc0xJQUloQXd3QkN5QUZJQVVvQWdCQkJISTJBZ0FMSUE4UVlpQUlRWUFCYWlRQUlBTVBCUUpBSUFFUXVBRkZCRUFnQjBFQk9nQUFEQUVMSUFkQkFqb0FBQ0FMUVFGcUlRc2dDVUVCYXlFSkN5QUhRUUZxSVFjZ0FVRU1haUVCREFFTEFBc0FDeEI4QUFzUkFDQUFJQUVnQUNnQ0FDZ0NEQkVEQUF1N0JBRUxmeU1BUVlBQmF5SUlKQUFnQ0NBQk5nSjRJQUlnQXhEdUF5RUpJQWhCd1FJMkFoQWdDRUVJYWtFQUlBaEJFR29RWXlFUElBaEJFR29oQ2dKQUlBbEI1UUJQQkVBZ0NSQTZJZ3BGRFFFZ0R5QUtFSGtMSUFvaEJ5QUNJUUVEUUNBQklBTkdCRUFEUUFKQUlBQWdDRUg0QUdvUWpnRkJBQ0FKRzBVRVFDQUFJQWhCK0FCcUVIc0VRQ0FGSUFVb0FnQkJBbkkyQWdBTERBRUxJQUFRWnlFTklBWkZCRUFnQkNBTkVQQUNJUTBMSUF4QkFXb2hFRUVBSVE0Z0NpRUhJQUloQVFOQUlBRWdBMFlFUUNBUUlRd2dEa1VOQXlBQUVIWWFJQW9oQnlBQ0lRRWdDU0FMYWtFQ1NRMERBMEFnQVNBRFJnUkFEQVVGQWtBZ0J5MEFBRUVDUncwQUlBRVFOeUFNUmcwQUlBZEJBRG9BQUNBTFFRRnJJUXNMSUFkQkFXb2hCeUFCUVF4cUlRRU1BUXNBQ3dBRkFrQWdCeTBBQUVFQlJ3MEFJQUVnREJBL0xBQUFJUkVDUUNBTlFmOEJjU0FHQkg4Z0VRVWdCQ0FSRVBBQ0MwSC9BWEZHQkVCQkFTRU9JQUVRTnlBUVJ3MENJQWRCQWpvQUFDQUxRUUZxSVFzTUFRc2dCMEVBT2dBQUN5QUpRUUZySVFrTElBZEJBV29oQnlBQlFReHFJUUVNQVFzQUN3QUxDd0pBQWtBRFFDQUNJQU5HRFFFZ0NpMEFBRUVDUndSQUlBcEJBV29oQ2lBQ1FReHFJUUlNQVFzTElBSWhBd3dCQ3lBRklBVW9BZ0JCQkhJMkFnQUxJQThRWWlBSVFZQUJhaVFBSUFNUEJRSkFJQUVRdUFGRkJFQWdCMEVCT2dBQURBRUxJQWRCQWpvQUFDQUxRUUZxSVFzZ0NVRUJheUVKQ3lBSFFRRnFJUWNnQVVFTWFpRUJEQUVMQUFzQUN4QjhBQXNOQUNBQVFRUnFFTVVDR2lBQUMxVUFJQUFnQVRZQ0JDQUFRUUE2QUFBZ0FTQUJLQUlBUVF4cktBSUFhaERGQXdSQUlBRWdBU2dDQUVFTWF5Z0NBR29vQWtnRVFDQUJJQUVvQWdCQkRHc29BZ0JxS0FKSUVQUUNDeUFBUVFFNkFBQUxJQUFMYmdFQ2Z5TUFRUkJySWdFa0FDQUFJQUFvQWdCQkRHc29BZ0JxS0FJWUJFQUNRQ0FCUVFocUlBQVE4d0lpQWkwQUFFVU5BQ0FBSUFBb0FnQkJER3NvQWdCcUtBSVlFTVlDUVg5SERRQWdBQ0FBS0FJQVFReHJLQUlBYWtFQkVMNENDeUFDRU1RQ0N5QUJRUkJxSkFBTERRQWdBRUVJYWhERkFob2dBQXNFQUVGL0N4MEFJQUFnQVNBQ0lBTWdCQ0FGSUFZZ0J5QUFLQUlBS0FJTUVRMEFDd3dBSUFBZ0FVRUVhaEN5QkFzUEFDQUFLQUpJR2lBQUlBRTJBa2dMWGdFQmZ5QUFLQUpNUVFCSUJFQWdBQ2dDQkNJQklBQW9BZ2hKQkVBZ0FDQUJRUUZxTmdJRUlBRXRBQUFQQ3lBQUVJTUREd3NDZnlBQUtBSUVJZ0VnQUNnQ0NFa0VRQ0FBSUFGQkFXbzJBZ1FnQVMwQUFBd0JDeUFBRUlNREN3dUNBUUVDZjBGL0lRSUNRQ0FBUVg5R0RRQWdBU2dDVEVFQVRpRURBa0FDUUFKQUlBRW9BZ1FpQWtVRVFDQUJFTmNER2lBQktBSUVJZ0pGRFFFTElBSWdBU2dDTEVFSWEwc05BUXRCZnlFQ0lBTU5BUXdDQ3lBQklBSkJBV3NpQWpZQ0JDQUNJQUE2QUFBZ0FTQUJLQUlBUVc5eE5nSUFJQUFoQWlBRFJRMEJDd3NnQWdzV0FDQUFSUVJBUVFBUEMwR1Uvd01nQURZQ0FFRi9Dd01BQVF2cUFRRUlmeUFBRUp3QklRVUNRRUc4aUFRb0FnQkZEUUFnQUMwQUFFVU5BQ0FBUVQwUWhBSU5BRUc4aUFRb0FnQW9BZ0FpQWtVTkFBSkFBMEJCdklnRUtBSUFJUVlDZnlBQUlRRkJBQ0FGSWdkRkRRQWFBbjhnQVMwQUFDSURCRUFEUUFKQUFrQWdBaTBBQUNJSVJRMEFJQWRCQVdzaUIwVU5BQ0FESUFoR0RRRUxJQU1NQXdzZ0FrRUJhaUVDSUFFdEFBRWhBeUFCUVFGcUlRRWdBdzBBQ3d0QkFBc2dBaTBBQUdzTFJRUkFJQVlnQkVFQ2RHb29BZ0FnQldvaUFTMEFBRUU5UmcwQ0N5QUdJQVJCQVdvaUJFRUNkR29vQWdBaUFnMEFDMEVBRHdzZ0FVRUJhaUVFQ3lBRUMwZ0JBbjhDZnlBQlFSOU5CRUFnQUNnQ0FDRUNJQUJCQkdvTUFRc2dBVUVnYXlFQklBQUxLQUlBSVFNZ0FDQUNJQUYwTmdJQUlBQWdBeUFCZENBQ1FTQWdBV3QyY2pZQ0JBdkZBZ0VGZnlNQVFmQUJheUlISkFBZ0J5QURLQUlBSWdnMkF1Z0JJQU1vQWdRaEF5QUhJQUEyQWdBZ0J5QUROZ0xzQVVFQUlBRnJJUW9DUUFKQUFrQUNRQ0FJUVFGSEJFQWdBQ0VJUVFFaENRd0JDeUFBSVFoQkFTRUpJQU1OQUNBQUlRTU1BUXNEUUNBSUlBWWdCRUVDZEdvb0FnQnJJZ01nQUNBQ0VRTUFRUUZJQkVBZ0NDRUREQUlMQWtBZ0JTQUVRUUpJY2tVRVFDQUVRUUowSUFacVFRaHJLQUlBSVFVZ0NDQUthaUlMSUFNZ0FoRURBRUYvU2cwQklBc2dCV3NnQXlBQ0VRTUFRWDlLRFFFTElBY2dDVUVDZEdvZ0F6WUNBQ0FIUWVnQmFpQUhRZWdCYWhEMkJDSUZFSUVESUFsQkFXb2hDU0FFSUFWcUlRUkJBQ0VGSUFNaENDQUhLQUxvQVVFQlJ3MEJJQWNvQXV3QkRRRU1Bd3NMSUFnaEF3d0JDeUFGRFFFTElBRWdCeUFKRVBVRUlBTWdBU0FDSUFRZ0JoRFRBd3NnQjBId0FXb2tBQXRJQVFKL0FuOGdBVUVmVFFSQUlBQW9BZ1FoQWlBQURBRUxJQUZCSUdzaEFTQUFRUVJxQ3lnQ0FDRURJQUFnQWlBQmRqWUNCQ0FBSUFKQklDQUJhM1FnQXlBQmRuSTJBZ0FMNVFJQkJuOGpBRUVRYXlJSEpBQWdBMEdBaUFRZ0F4c2lCU2dDQUNFREFrQUNRQUpBSUFGRkJFQWdBdzBCREFNTFFYNGhCQ0FDUlEwQ0lBQWdCMEVNYWlBQUd5RUdBa0FnQXdSQUlBSWhBQXdCQ3lBQkxRQUFJZ0JCR0hSQkdIVWlBMEVBVGdSQUlBWWdBRFlDQUNBRFFRQkhJUVFNQkFzZ0FTd0FBQ0VBUWFUdkF5Z0NBQ2dDQUVVRVFDQUdJQUJCLzc4RGNUWUNBRUVCSVFRTUJBc2dBRUgvQVhGQndnRnJJZ0JCTWtzTkFTQUFRUUowUVlDREEyb29BZ0FoQXlBQ1FRRnJJZ0JGRFFJZ0FVRUJhaUVCQ3lBQkxRQUFJZ2hCQTNZaUNVRVFheUFEUVJwMUlBbHFja0VIU3cwQUEwQWdBRUVCYXlFQUlBaEJnQUZySUFOQkJuUnlJZ05CQUU0RVFDQUZRUUEyQWdBZ0JpQUROZ0lBSUFJZ0FHc2hCQXdFQ3lBQVJRMENJQUZCQVdvaUFTMEFBQ0lJUWNBQmNVR0FBVVlOQUFzTElBVkJBRFlDQUVHVS93TkJHVFlDQUVGL0lRUU1BUXNnQlNBRE5nSUFDeUFIUVJCcUpBQWdCQXRCQVFKL0l3QkJFR3NpQVNRQVFYOGhBZ0pBSUFBUTF3TU5BQ0FBSUFGQkQycEJBU0FBS0FJZ0VRUUFRUUZIRFFBZ0FTMEFEeUVDQ3lBQlFSQnFKQUFnQWd0NEFDQUNRUUZHQkVBZ0FTQUFLQUlJSUFBb0FnUnJySDBoQVFzQ1FDQUFLQUlVSUFBb0FoeExCRUFnQUVFQVFRQWdBQ2dDSkJFRUFCb2dBQ2dDRkVVTkFRc2dBRUVBTmdJY0lBQkNBRGNERUNBQUlBRWdBaUFBS0FJb0VSTUFRZ0JURFFBZ0FFSUFOd0lFSUFBZ0FDZ0NBRUZ2Y1RZQ0FBc0x5d0VCQW44akFFRVFheUlCSkFBQ1FDQUF2VUlnaUtkQi8vLy8vd2R4SWdKQis4T2svd05OQkVBZ0FrR0FnTUR5QTBrTkFTQUFSQUFBQUFBQUFBQUFRUUFReVFJaEFBd0JDeUFDUVlDQXdQOEhUd1JBSUFBZ0FLRWhBQXdCQ3dKQUFrQUNRQUpBSUFBZ0FSQ01CVUVEY1E0REFBRUNBd3NnQVNzREFDQUJLd01JUVFFUXlRSWhBQXdEQ3lBQkt3TUFJQUVyQXdnUXlBSWhBQXdDQ3lBQkt3TUFJQUVyQXdoQkFSREpBcG9oQUF3QkN5QUJLd01BSUFFckF3Z1F5QUthSVFBTElBRkJFR29rQUNBQUM5VURBUTEvSUFBaEJrR2s3d01vQWdBaEFrRUFJUUFDUUFKQUEwQWdCaUFBUWJEVUFtb3RBQUJIQkVCQjF3QWhCQ0FBUVFGcUlnQkIxd0JIRFFFTUFnc0xJQUFpQkEwQVFaRFZBaUVHREFFTFFaRFZBaUVBQTBBZ0FDMEFBQ0VESUFCQkFXb2lCaUVBSUFNTkFDQUdJUUFnQkVFQmF5SUVEUUFMQ3lBQ0tBSVVJZ0FFZnlBQUtBSUVJUVFnQUNnQ0FDSUFLQUlJSUFBb0FnQkJvdHJ2MXdacUlnSVEvZ0VoQXlBQUtBSU1JQUlRL2dFaEJTQUFLQUlRSUFJUS9nRWhBUUpBSUFNZ0JFRUNkazhOQUNBQklBVnlRUU54SUFVZ0JDQURRUUowYXlJSFR5QUJJQWRQY25JTkFDQUJRUUoySVFvZ0JVRUNkaUVMUVFBaEJRTkFJQUFnQlNBRFFRRjJJZ2RxSWd4QkFYUWlEU0FMYWtFQ2RHb2lBU2dDQUNBQ0VQNEJJUWtnQkNBQktBSUVJQUlRL2dFaUFVMGdDU0FFSUFGclQzSU5BU0FBSUFFZ0NXcHFMUUFBRFFFZ0JpQUFJQUZxRUlVQ0lnRkZCRUFnQUNBS0lBMXFRUUowYWlJRktBSUFJQUlRL2dFaEF5QUVJQVVvQWdRZ0FoRCtBU0lDVFNBRElBUWdBbXRQY2cwQ1FRQWdBQ0FDYWlBQUlBSWdBMnBxTFFBQUd5RUlEQUlMSUFOQkFVWU5BU0FISUFNZ0Iyc2dBVUVBU0NJQkd5RURJQVVnRENBQkd5RUZEQUFMQUFzZ0NBVkJBQXNpQUNBR0lBQWJDOGtCQVFGL0FrQWdCRUVCU0EwQUlBUkJBV3NoQmlBQUlBRkJBblJxSVFBZ0FpQURRUUowYWlFQklBUkJBM0VpQWdSQUEwQWdBU2dDQUNBQUtBSUFJQVVRUUJvZ0JFRUJheUVFSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VCYXlJQ0RRQUxDeUFHUVFOSkRRQURRQ0FCS0FJQUlBQW9BZ0FnQlJCQUdpQUJLQUlFSUFBb0FnUWdCUkJBR2lBQktBSUlJQUFvQWdnZ0JSQkFHaUFCS0FJTUlBQW9BZ3dnQlJCQUdpQUJRUkJxSVFFZ0FFRVFhaUVBSUFSQkJFb2hBaUFFUVFScklRUWdBZzBBQ3dzTEVnQWdBQ0FCYWtFQmF5SUFJQUFnQVc5ckMvTUdBUXgvSXdCQm9BcHJJZ2NrQUNBQ1FRUlBCRUFnQUNnQ0FDSUVJQUkyQWhnZ0JFRTBOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ0FDUVFKMGFpSUVRYlFCYWlBRVFjUUJhaUFCR3lnQ0FDSUlSUVJBSUFBb0FnQWlCQ0FDTmdJWUlBUkJORFlDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQU1vQWdBaUNVVUVRQ0FESUFCQkFVR1FDeUFBS0FJRUtBSUFFUVFBSWdrMkFnQUxJQWtnQ0RZQ2pBRkJBQ0VFUVFFaEFnTkFJQVFnQWlBSWFpMEFBQ0lGYWlJRFFZRUNUZ1JBSUFBb0FnQWlCa0VKTmdJVUlBQWdCaWdDQUJFQkFBc2dCUVJBSUFkQmtBaHFJQVJxSUFJZ0JSQTdHaUFESVFRTElBSkJBV29pQWtFUlJ3MEFDMEVBSVFNZ0IwR1FDR29nQkdwQkFEb0FBQ0FITFFDUUNDSUdCRUFnQmtFWWRFRVlkU0VGUVFBaEFnTkFJQVpCR0hSQkdIVWdCVVlFUUFOQUlBY2dBMEVDZEdvZ0FqWUNBQ0FDUVFGcUlRSWdCU0FEUVFGcUlnTWdCMEdRQ0dwcUxBQUFJZ1pHRFFBTEMwRUJJQVYwSUFKTUJFQWdBQ2dDQUNJS1FRazJBaFFnQUNBS0tBSUFFUUVBQ3lBRlFRRnFJUVVnQWtFQmRDRUNJQVpCL3dGeERRQUxDMEVBSVFOQkFTRUNBMEFnQ1NBQ1FRSjBhaUFDSUFocUlnVXRBQUFFZnlBSklBSkJBblJxSUFNZ0J5QURRUUowYWlnQ0FHczJBa2dnQXlBRkxRQUFhaUlEUVFKMElBZHFRUVJyS0FJQUJVRi9DellDQUNBQ1FRRnFJZ0pCRVVjTkFBc2dDVUgvL3o4MkFrUkJBQ0VLSUFsQmtBRnFRUUJCZ0FnUU94cEJBU0VHQTBBZ0JpQUlhaUlNTFFBQUJFQkJBVUVJSUFacklnMTBJUVZCQVNFTEEwQWdDQ0FLYWlFT0lBY2dDa0VDZEdvb0FnQWdEWFFoQWlBRklRTURRQ0FKSUFKQkFuUnFJQVkyQXBBQklBSWdDV3BCa0FscUlBNHRBQkU2QUFBZ0FrRUJhaUVDSUFOQkFVb2hEeUFEUVFGcklRTWdEdzBBQ3lBS1FRRnFJUW9nQ3lBTUxRQUFTU0VDSUF0QkFXb2hDeUFDRFFBTEN5QUdRUUZxSWdaQkNVY05BQXNDUUNBQlJTQUVRUUZJY2cwQVFRQWhBaUFFUVFGSEJFQWdCRUYrY1NFREEwQWdBaUFJYWkwQUVVRVFUd1JBSUFBb0FnQWlBVUVKTmdJVUlBQWdBU2dDQUJFQkFBc2dDQ0FDUVFGeWFpMEFFVUVQU3dSQUlBQW9BZ0FpQVVFSk5nSVVJQUFnQVNnQ0FCRUJBQXNnQWtFQ2FpRUNJQU5CQW1zaUF3MEFDd3NnQkVFQmNVVU5BQ0FDSUFocUxRQVJRUkJKRFFBZ0FDZ0NBQ0lCUVFrMkFoUWdBQ0FCS0FJQUVRRUFDeUFIUWFBS2FpUUFDd2tBSUFCQkFEWUNBQXNuQVFKL0lBRW9BZ0FoQWlNQVFSQnJJZ01rQUNBQUlBRkJCR29nQWhDc0JDQURRUkJxSkFBTENRQWdBU0FDRU9jQ0Mwc0JBWDhqQUVFUWF5SURKQUFnQXlBQ05nSU1RYXlEQWlBQlFlVG9BMEhBL3dGQjFRQWdBMEVNYWhDcEFrSGs2QU5CbVA4QlFkWUFJQU5CREdvUXFRSVFMaUFEUVJCcUpBQWdBQXNLQUNBQVFSaHFFTThCQ3lBQUlBQXFBZ0FnQVNvQ0JKUWdBQ29DQkNBQktnSUFsSk9MUXdBQUFEK1VDN0lCQVFGOUlBQWdBU29DQUl3NEFnQWdBU29DQkNFRElBQkJnSUNBL0hzMkFnZ2dBQ0FEakRnQ0JDQUFRUXhxRU5NRklBQWdBaW9DQUNBQktnSUFsRGdDR0NBQUlBSXFBZ0FnQVNvQ0JKUTRBaHdnQUNBQ0tnSUFPQUlnSUFCQkpHb1Ewd1VnQUNBQktnSUFqRGdDTUNBQktnSUVJUU1nQUVHQWdJRDhlellDT0NBQUlBT01PQUkwSUFBZ0Fpb0NCQ0FCS2dJQWxEZ0NQQ0FBSUFJcUFnUWdBU29DQkpRNEFrQWdBQ0FDS2dJRU9BSkVDeUlBSUFBZ0FTQUNFS29CUXdBQUFBQmVJQU1nQkNBRkVLb0JRd0FBQUFCZWMwVUxEQUFnQUNBQklBQWdBVjBiQzBFQkFuOGpBRUVnYXlJQ0pBQWdBQkRSQVNBQlNRUkFJQUFRTkNFRElBQWdBa0VJYWlBQklBQVFSQ0FERUpjRElnQVFuUU1nQUJDY0F3c2dBa0VnYWlRQUN3OEFJQUFnQUNnQ0JFRUJhallDQkFzSkFDQUFJQUVRN0FVTENRQWdBQ0FCT2dCa0Myb0JBbjhqQUVFUWF5SUVKQUFnQkVFQU5nSU1JQUJCREdvZ0JFRU1haUFERUxFQklBRUVRQ0FBS0FJUUdpQUJFSVFHSVFVTElBQWdCVFlDQUNBQUlBVWdBa0VEZEdvaUFqWUNDQ0FBSUFJMkFnUWdBQkE5SUFVZ0FVRURkR28yQWdBZ0JFRVFhaVFBSUFBTENRQWdBQ0FCRUlNQkN3d0FJQUFnQVNBQUlBRklHd3NRQUNBQUtBSUFJQUVvQWdCclFRTjFDeXdBSUFBb0FnQWFJQUFvQWdBZ0FCRFJBVUVEZEdvYUlBQW9BZ0FnQUJEUkFVRURkR29hSUFBb0FnQWFDMDBCQVg4Z0FDZ0NCQ0VCQTBBZ0FTQUFLQUlJUndSQUlBQW9BaEFhSUFBZ0FDZ0NDRUVJYXpZQ0NBd0JDd3NnQUNnQ0FBUkFJQUFvQWhBYUlBQW9BZ0FoQVNBQUVLZ0dHaUFCRURNTEMxQUJBWDhnQUJEZUFpQUFFRFFnQUNnQ0FDQUFLQUlFSUFGQkJHb2lBaEM2QWlBQUlBSVFTaUFBUVFScUlBRkJDR29RU2lBQUVEUWdBUkE5RUVvZ0FTQUJLQUlFTmdJQUlBQWdBQkJFRUpzREMxc0JBbjhqQUVFUWF5SUNKQUFnQWlBQk5nSU1JQUVnQUJDR0JDSURUUVJBSUFBUTBRRWlBQ0FEUVFGMlNRUkFJQUlnQUVFQmREWUNDQ0FDUVFocUlBSkJER29RZ0FFb0FnQWhBd3NnQWtFUWFpUUFJQU1QQ3hDUEFRQUxCd0FnQUJCT0dndVRCZ0lLZndKOFFRQkJmd0ovSUFBb0FnQWhCU0FBS0FJRUlna2hCRUVBSVFBakFFSFFEMnNpQmlRQUFrQWdCRUgwQTBvTkFBSkFBa0FDUUNBRURnSURBQUVMSUFWRUFBQUFBQUFBOEQ4Z0JTc0RBS001QXdBTUFRc2dCRUVBSUFSQkFFb2JJUW9EUUNBQUlBcEdCRUFEUUNBRElBcEdCRUJCQUNFREEwQWdDaUFESWdGR0RRVURRQUpBSUFFZ0JFWUVRQ0FFSVFFTUFRc2dCaUFCUVFKMGFpZ0NBQ0FEUmcwQUlBRkJBV29oQVF3QkN3c2dCaUFCUVFKMGFpQUdJQU5CQW5ScUtBSUFOZ0lBSUFVZ0EwRURkR29oQUNBRklBRkJBM1JxSVFGQkFDRUNBMEFnQWlBS1J3UkFJQUVyQXdBaEN5QUJJQUFyQXdBNUF3QWdBQ0FMT1FNQUlBSkJBV29oQWlBQUlBbEJBM1FpQ0dvaEFDQUJJQWhxSVFFTUFRc0xJQU5CQVdvaEF3d0FDd0FMUkFBQUFBQUFBQUFBSVF0QmZ5RUNJQVVnQXlJQUlBbHNRUU4wYWlJSUlRRURRQ0FBSUFSSEJFQWdBU3NEQUpraURDQUxJQXNnREdNaUJ4c2hDeUFBSUFJZ0J4c2hBaUFBUVFGcUlRQWdBU0FKUVFOMGFpRUJEQUVMQzBFQUlRQWdBa0YvUmlBTFJMdTkxOW5mZk5zOVpYSU5CQ0FHSUFKQkFuUnFJZ0FvQWdBaEFTQUFJQVlnQTBFQ2RHb2lBQ2dDQURZQ0FDQUFJQUUyQWdBZ0JTQUNJQWxzUVFOMGFpRUFRUUFoQWlBSUlRRURRQ0FDSUFSSEJFQWdBQ3NEQUNFTElBQWdBU3NEQURrREFDQUJJQXM1QXdBZ0FrRUJhaUVDSUFGQkNHb2hBU0FBUVFocUlRQU1BUXNMSUFnckF3QWhDMEVCSVFFZ0NDRUFBMEFnQVNBRVJ3UkFJQUFnQUNzRENDQUxvemtEQUNBQlFRRnFJUUVnQUVFSWFpRUFEQUVMQ3lBQVJBQUFBQUFBQVBBL0lBdWpPUU1BUVFBaEJ3TkFJQVFnQjBjRVFDQURJQWRIQkVBZ0JTQUhJQWxzUVFOMGFpSUFLd01BSVF0QkFTRUJJQWdoQWdOQUlBRWdCRWNFUUNBQUlBQXJBd2dnQ3lBQ0t3TUFvcUU1QXdBZ0FrRUlhaUVDSUFGQkFXb2hBU0FBUVFocUlRQU1BUXNMSUFBZ0Fpc0RBQ0FMbXFJNUF3QUxJQWRCQVdvaEJ3d0JDd3NnQTBFQmFpRUREQUFMQUFVZ0JpQUFRUUowYWlBQU5nSUFJQUJCQVdvaEFBd0JDd0FMQUFzZ0JTRUFDeUFHUWRBUGFpUUFJQUFMR3dzSkFDQUFRUUEyQWdBTExBQWdBQ2dDQUJvZ0FDZ0NBQ0FBRVBBQlFRSjBhaG9nQUNnQ0FDQUFFUEFCUVFKMGFob2dBQ2dDQUJvTEt3RUJmeUFBSUFFb0FnQTJBZ0FnQVNnQ0FDRURJQUFnQVRZQ0NDQUFJQU1nQWtFQ2RHbzJBZ1FnQUF0VUFRSi9Jd0JCRUdzaUFpUUFJQUlnQUNBQkVMY0NJZ0VvQWdRaEF3TkFJQUVvQWdnZ0EwY0VRQ0FBRURRYUlBRW9BZ1FRb1FNZ0FTQUJLQUlFUVFScUlnTTJBZ1FNQVFzTElBRVFkQ0FDUVJCcUpBQUxLd0VCZnlBQUtBSUVJUUlEUUNBQklBSkhCRUFnQUJBMEdpQUNRUWhySVFJTUFRc0xJQUFnQVRZQ0JBcytBUUovSXdCQkVHc2lBeVFBSUFNZ0FFRUJFS2tHSVFJZ0FCQTBJQUlvQWdRZ0FSRGFBaUFDSUFJb0FnUkJDR28yQWdRZ0FoQjBJQU5CRUdva0FBc29BQ0FBSUFFUVNpQUFRUVJxSUFGQkJHb1FTaUFBRURRZ0FSQTBFRW9nQUJBMEdpQUJFRFFhQzRJQkFBSkFJQUpEQUFBQUFHQUVRQ0FBS0FJVXNpQUNYa1VOQVNBQUtnSVlJQUlReFFaQkFTQUJkTEtVRHd0QndKTUVRYTY5QVJBeVFibTNBUkF5UWZJa0VESkI2QUVRTlVINktSQXlRWXkrQVJBeUVEWVFBQUFMUWNDVEJFR0d1UUVRTWtHNXR3RVFNa0h5SkJBeVFla0JFRFZCK2lrUU1rSEZ2Z0VRTWhBMkVBQUFDMXNCQW44akFFRVFheUlDSkFBZ0FpQUJOZ0lNSUFFZ0FCRFFCaUlEVFFSQUlBQVEzQUVpQUNBRFFRRjJTUVJBSUFJZ0FFRUJkRFlDQ0NBQ1FRaHFJQUpCREdvUWdBRW9BZ0FoQXdzZ0FrRVFhaVFBSUFNUEN4Q1BBUUFMREFBZ0FTQUNMUUFBT2dBQUN5RUFJQUFnQVRZQ0FDQUFJQUVvQWdRaUFUWUNCQ0FBSUFFZ0FtbzJBZ2dnQUFzU0FDQUFFRDBvQWdBZ0FDZ0NBR3RCREcwTExBQWdBQ2dDQUJvZ0FDZ0NBQ0FBRUwwQlFReHNhaG9nQUNnQ0FDQUFFTDBCUVF4c2Fob2dBQ2dDQUJvTG5RRUNCSDhEZlFOQUlBUkJBMGNFUUNBQUlBUkJCWFJxSWdZckF4QzJJUWNnQmlzRENMWWhDQ0FHS3dNQXRpRUpRUUFoQXdOQUlBTkJCRWNFUUNBRFFRSjBJZ1VnQWlBRVFRUjBhbW9nQVNBRmFpSUZLZ0lBSUFtVUlBVXFBaEFnQ0pTU0lBVXFBaUFnQjVTU09BSUFJQU5CQVdvaEF3d0JDd3NnQWlBRVFRUjBhaUlESUFNcUFnd2dCaXNER0xhU09BSU1JQVJCQVdvaEJBd0JDd3NMSUFBZ0FTQUNLUUlBTndJQUlBRWdBaWdDRURZQ0VDQUJJQUlwQWdnM0FnZ0xXZ0lCZndGK0FrQUNmMEVBSUFCRkRRQWFJQUN0SUFHdGZpSURweUlDSUFBZ0FYSkJnSUFFU1EwQUdrRi9JQUlnQTBJZ2lLY2JDeUlDRURvaUFFVU5BQ0FBUVFSckxRQUFRUU54UlEwQUlBQkJBQ0FDRURzYUN5QUFDMGtCQW44Z0FDZ0NCQ0lGUVFoMUlRWWdBQ2dDQUNJQUlBRWdCVUVCY1FSL0lBSW9BZ0FnQm1vb0FnQUZJQVlMSUFKcUlBTkJBaUFGUVFKeEd5QUVJQUFvQWdBb0FoZ1JCUUFMODJzRERuOEVmUWw4SXdCQjRBRnJJZ3drQUNBTVFvQ0FnSUNBZ09DdHdBQTNBOWdCSUF4Q2dJQ0FnSUNBNEszQUFEY0R5QUVnREVLQWdJQ0FnSURBck1BQU53TzRBU0FNUW9DQWdJQ0FnTUNzd0FBM0E5QUJJQXhDZ0lDQWdJQ0E0SzNBQURjRHdBRWdERUtBZ0lDQWdJRGdyY0FBTndPd0FTQU1Rb0NBZ0lDQWdNQ3N3QUEzQTZnQklBeENnSUNBZ0lDQXdLekFBRGNEb0FFRFFDQU5RUVJIQkVBZ0RVRUVkQ0lPSUF4QjRBQnFhaUlSSUFrZ0Rtb2lEaXNEQURrREFDQVJJQTRyQXdnNUF3Z2dEVUVCYWlFTkRBRUxDeUFNUWFBQmFpRVhJQXhCNEFCcUlSZ2dERUVRYWlFVFFRQWhFVUVJUVFnUXZBRWhEMEVJUVFFUXZBRWhFRUVJUVFFUXZBRWhGQ0FRS0FJQUlSWWdEeWdDQUNFSkEwQWdFVUVFUndSQUlBa2dFVUVIZENJT2FpQVhJQkZCQkhRaUZXb2lEU3NEQURrREFDQUpJQTVCQ0hKcUlBMHJBd2c1QXdBZ0NTQU9RUkJ5YWtLQWdJQ0FnSUNBK0Q4M0F3QWdDU0FPUVJoeWFrSUFOd01BSUFrZ0RrRWdjbXBDQURjREFDQUpJQTVCS0hKcVFnQTNBd0FnQ1NBT1FUQnlhaUFWSUJocUloSXJBd0FnRFNzREFKcWlPUU1BSUFrZ0RrRTRjbW9nRWlzREFDQU5Ld01JbXFJNUF3QWdDU0FWUVFoeUlobEJBM1JxUWdBM0F3QWdDU0FPUWNnQWNtcENBRGNEQUNBSklBNUIwQUJ5YWtJQU53TUFJQWtnRGtIWUFISnFJQTByQXdBNUF3QWdDU0FPUWVBQWNtb2dEU3NEQ0RrREFDQUpJQTVCNkFCeWFrS0FnSUNBZ0lDQStEODNBd0FnQ1NBT1FmQUFjbW9nRWlzRENDQU5Ld01BbXFJNUF3QWdDU0FPUWZnQWNtb2dFaXNEQ0NBTkt3TUltcUk1QXdBZ0ZTQVdhaUFTS3dNQU9RTUFJQllnR1dvZ0Vpc0RDRGtEQUNBUlFRRnFJUkVNQVFzTElBOFFvQU1hSUJRZ0R5QVFFSXNFR2lBVUtBSUFJUTVCQUNFSkEwQWdDVUVDUndSQUlCTWdDVUVZYkNJUmFpSU5JQTRnRVdvaUVTc0RBRGtEQUNBTklCRXJBd2c1QXdnZ0RTQVJLd01RT1FNUUlBbEJBV29oQ1F3QkN3c2dFeUFPS3dNd09RTXdJQTRyQXpnaElTQVRRVUJyUW9DQWdJQ0FnSUQ0UHpjREFDQVRJQ0U1QXpnZ0R4QkZJQkFRUlNBVUVFVUNmeUFNS3dOd0lpRWdEQ3NEZ0FFaUg2RWlIaUFlb2lBTUt3TjRJaDRnRENzRGlBRWlJS0VpSWlBaW9xQWlJcGxFQUFBQUFBQUE0RUZqQkVBZ0lxb01BUXRCZ0lDQWdIZ0xJUWtDZndKL0lBd3JBNUFCSWlJZ0RDc0RZQ0lqb1NJbElDV2lJQXdyQTVnQklpVWdEQ3NEYUNJbW9TSWtJQ1Npb0NJa21VUUFBQUFBQUFEZ1FXTUVRQ0FrcWd3QkMwR0FnSUNBZUFzaURpQUpJQWtnRGtnYnR5QUtvaUFLb2lJa21VUUFBQUFBQUFEZ1FXTUVRQ0FrcWd3QkMwR0FnSUNBZUFzaEVRSi9JQ01nSWFFaUlTQWhvaUFtSUI2aElpRWdJYUtnSWlHWlJBQUFBQUFBQU9CQll3UkFJQ0dxREFFTFFZQ0FnSUI0Q3lFSkFuOENmeUFmSUNLaElpRWdJYUlnSUNBbG9TSWhJQ0dpb0NJaG1VUUFBQUFBQUFEZ1FXTUVRQ0FocWd3QkMwR0FnSUNBZUFzaURpQUpJQWtnRGtnYnR5QUtvaUFLb2lJaG1VUUFBQUFBQUFEZ1FXTUVRQ0FocWd3QkMwR0FnSUNBZUFzaERnSkFJQUJGQkVBZ0FpRUpBMEFnRGlBSklBa2lEV3hLQkVBZ0RVRUJkQ0VKSUFNZ0RVb05BUXNMSUFJaERnTkFJQTRpQ1NBSmJDQVJUZzBDSUFsQkFYUWhEaUFESUFsS0RRQUxEQUVMSUFJaENRTkFJQTRnQ1NBSklnMXNRUUowU2dSQUlBMUJBWFFoQ1NBRElBMUtEUUVMQ3lBQ0lRNERRQ0FPSWdrZ0NXeEJBblFnRVU0TkFTQUpRUUYwSVE0Z0F5QUpTZzBBQ3dzZ0NrUUFBQUFBQUFBa1FLSWhJVVFBQUFBQUFBRHdQeUFLb1VRQUFBQUFBQURnUDZKRUFBQUFBQUFBSkVDaUlRb2dBeUFKSUFNZ0NVZ2JJZ2tnQW0waEVTQURJQTBnQXlBTlNCc2lBeUFDYlNFU0lBSWdBbXdoRXdKQUFrQUNRQUpBSUFGRkJFQWdFMEVEYkNJVFFRUVFzQU1pRGtVTkJBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBY09Ed0FCQWdNRUJRWUhDQWtLQ3dVRkJRNExJQWxCQUNBSlFRQktHeUVQSUFOQkFDQURRUUJLR3lFUUlBcEVBQUFBQUFBQVdVQ2dJUjhnQTdjaElpQUp0eUVqUVFBaEFRTkFJQUVnRDBZTkRDQWZJQ0VnQWJkRUFBQUFBQUFBNEQrZ29pQWpvNkFoQ2tFQUlRMERRQ0FOSUJCSEJFQWdEQ3NEVUNBZklDRWdEYmRFQUFBQUFBQUE0RCtnb2lBaW82QWlIaUFNS3dOQW9pQUtJQXdyQTBpaW9LQWlJRVFBQUFBQUFBQUFBR0VORVNBTUlBd3JBeUFnSGlBTUt3TVFvaUFLSUF3ckF4aWlvS0FnSUtPMklobzRBZ3dnRENBTUt3TTRJQjRnRENzREtLSWdDaUFNS3dNd29xQ2dJQ0NqdGlJYk9BSUlJQWdnR2lBYklBeEJER29nREVFSWFoQnhHaUFNS2dJTUlSb0NmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWh1TFF3QUFBRTlkQkVBZ0c2Z01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFhUXdBQWdEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUliaTBNQUFBQlBYUVJBSUJ1b0RBRUxRWUNBZ0lCNEN5RURJQnBEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaUNVRUFTQ0FGSUFsTWNpQURRUUJJSUFNZ0JrNXlja1VFUUNBT0lBRWdFVzBnQW13Z0RTQVNiV3BCREd4cUlnY2dCeWdDQUNBRUlBTWdCV3dnQ1dwQkEyeHFJZ010QUFKcU5nSUFJQWNnQnlnQ0JDQURMUUFCYWpZQ0JDQUhJQWNvQWdnZ0F5MEFBR28yQWdnTElBMUJBV29oRFF3QkN3c2dBVUVCYWlFQkRBQUxBQXNnQ1VFQUlBbEJBRW9iSVE4Z0EwRUFJQU5CQUVvYklSQWdDa1FBQUFBQUFBQlpRS0FoSHlBRHR5RWlJQW0zSVNOQkFDRUJBMEFnQVNBUFJnMExJQjhnSVNBQnQwUUFBQUFBQUFEZ1A2Q2lJQ09qb0NFS1FRQWhEUU5BSUEwZ0VFY0VRQ0FNS3dOUUlCOGdJU0FOdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0llSUF3ckEwQ2lJQW9nRENzRFNLS2dvQ0lnUkFBQUFBQUFBQUFBWVEwUUlBd2dEQ3NESUNBZUlBd3JBeENpSUFvZ0RDc0RHS0tnb0NBZ283WWlHamdDRENBTUlBd3JBemdnSGlBTUt3TW9vaUFLSUF3ckF6Q2lvS0FnSUtPMkloczRBZ2dnQ0NBYUlCc2dERUVNYWlBTVFRaHFFSEVhSUF3cUFnd2hHZ0ovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJwREFBQ0FQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWh1TFF3QUFBRTlkQkVBZ0c2Z01BUXRCZ0lDQWdIZ0xJUU1nR2tNQUFBQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEN5SUpRUUJJSUFVZ0NVeHlJQU5CQUVnZ0F5QUdUbkp5UlFSQUlBNGdBU0FSYlNBQ2JDQU5JQkp0YWtFTWJHb2lCeUFIS0FJQUlBUWdBeUFGYkNBSmFrRURiR29pQXkwQUFHbzJBZ0FnQnlBSEtBSUVJQU10QUFGcU5nSUVJQWNnQnlnQ0NDQURMUUFDYWpZQ0NBc2dEVUVCYWlFTkRBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBSlFRQWdDVUVBU2hzaER5QURRUUFnQTBFQVNoc2hFQ0FLUkFBQUFBQUFBRmxBb0NFZklBTzNJU0lnQ2JjaEkwRUFJUUVEUUNBQklBOUdEUW9nSHlBaElBRzNSQUFBQUFBQUFPQS9vS0lnSTZPZ0lRcEJBQ0VOQTBBZ0RTQVFSd1JBSUF3ckExQWdIeUFoSUEyM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg0Z0RDc0RRS0lnQ2lBTUt3TklvcUNnSWlCRUFBQUFBQUFBQUFCaERROGdEQ0FNS3dNZ0lCNGdEQ3NERUtJZ0NpQU1Ld01Zb3FDZ0lDQ2p0aUlhT0FJTUlBd2dEQ3NET0NBZUlBd3JBeWlpSUFvZ0RDc0RNS0tnb0NBZ283WWlHemdDQ0NBSUlCb2dHeUFNUVF4cUlBeEJDR29RY1JvZ0RDb0NEQ0VhQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0drTUFBSUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXNoQXlBYVF3QUFBRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJZ2xCQUVnZ0JTQUpUSElnQTBFQVNDQURJQVpPY25KRkJFQWdEaUFCSUJGdElBSnNJQTBnRW0xcVFReHNhaUlISUFjb0FnQWdCQ0FESUFWc0lBbHFRUUowSWdOQkFuSnFMUUFBYWpZQ0FDQUhJQWNvQWdRZ0JDQURRUUZ5YWkwQUFHbzJBZ1FnQnlBSEtBSUlJQU1nQkdvdEFBQnFOZ0lJQ3lBTlFRRnFJUTBNQVFzTElBRkJBV29oQVF3QUN3QUxJQWxCQUNBSlFRQktHeUVQSUFOQkFDQURRUUJLR3lFUUlBcEVBQUFBQUFBQVdVQ2dJUjhnQTdjaElpQUp0eUVqUVFBaEFRTkFJQUVnRDBZTkNTQWZJQ0VnQWJkRUFBQUFBQUFBNEQrZ29pQWpvNkFoQ2tFQUlRMERRQ0FOSUJCSEJFQWdEQ3NEVUNBZklDRWdEYmRFQUFBQUFBQUE0RCtnb2lBaW82QWlIaUFNS3dOQW9pQUtJQXdyQTBpaW9LQWlJRVFBQUFBQUFBQUFBR0VORGlBTUlBd3JBeUFnSGlBTUt3TVFvaUFLSUF3ckF4aWlvS0FnSUtPMklobzRBZ3dnRENBTUt3TTRJQjRnRENzREtLSWdDaUFNS3dNd29xQ2dJQ0NqdGlJYk9BSUlJQWdnR2lBYklBeEJER29nREVFSWFoQnhHaUFNS2dJTUlSb0NmeUFBUVFGR0JFQUNmeUFNS2dJSVF3QUFnRCtTSWh1TFF3QUFBRTlkQkVBZ0c2Z01BUXRCZ0lDQWdIZ0xRUUp0UVFGMElRTUNmeUFhUXdBQWdEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwREFFTEFuOGdEQ29DQ0VNQUFBQS9raUliaTBNQUFBQlBYUVJBSUJ1b0RBRUxRWUNBZ0lCNEN5RURJQnBEQUFBQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUFzaUNVRUFTQ0FGSUFsTWNpQURRUUJJSUFNZ0JrNXlja1VFUUNBT0lBRWdFVzBnQW13Z0RTQVNiV3BCREd4cUlnY2dCeWdDQUNBRUlBTWdCV3dnQ1dwQkFuUWlBMm90QUFCcU5nSUFJQWNnQnlnQ0JDQUVJQU5CQVhKcUxRQUFhallDQkNBSElBY29BZ2dnQkNBRFFRSnlhaTBBQUdvMkFnZ0xJQTFCQVdvaERRd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0NVRUFJQWxCQUVvYklROGdBMEVBSUFOQkFFb2JJUkFnQ2tRQUFBQUFBQUJaUUtBaEh5QUR0eUVpSUFtM0lTTkJBQ0VCQTBBZ0FTQVBSZzBJSUI4Z0lTQUJ0MFFBQUFBQUFBRGdQNkNpSUNPam9DRUtRUUFoRFFOQUlBMGdFRWNFUUNBTUt3TlFJQjhnSVNBTnQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZUlBd3JBMENpSUFvZ0RDc0RTS0tnb0NJZ1JBQUFBQUFBQUFBQVlRME5JQXdnRENzRElDQWVJQXdyQXhDaUlBb2dEQ3NER0tLZ29DQWdvN1lpR2pnQ0RDQU1JQXdyQXpnZ0hpQU1Ld01vb2lBS0lBd3JBekNpb0tBZ0lLTzJJaHM0QWdnZ0NDQWFJQnNnREVFTWFpQU1RUWhxRUhFYUlBd3FBZ3doR2dKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlHNHREQUFBQVQxMEVRQ0FicUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCcERBQUNBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0lodUxRd0FBQUU5ZEJFQWdHNmdNQVF0QmdJQ0FnSGdMSVFNZ0drTUFBQUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDeUlKUVFCSUlBVWdDVXh5SUFOQkFFZ2dBeUFHVG5KeVJRUkFJQTRnQVNBUmJTQUNiQ0FOSUJKdGFrRU1iR29pQnlBSEtBSUFJQVFnQXlBRmJDQUpha0VDZENJRFFRRnlhaTBBQUdvMkFnQWdCeUFIS0FJRUlBUWdBMEVDY21vdEFBQnFOZ0lFSUFjZ0J5Z0NDQ0FFSUFOQkEzSnFMUUFBYWpZQ0NBc2dEVUVCYWlFTkRBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBSlFRQWdDVUVBU2hzaER5QURRUUFnQTBFQVNoc2hFQ0FLUkFBQUFBQUFBRmxBb0NFZklBTzNJU0lnQ2JjaEkwRUFJUUVEUUNBQklBOUdEUWNnSHlBaElBRzNSQUFBQUFBQUFPQS9vS0lnSTZPZ0lRcEJBQ0VOQTBBZ0RTQVFSd1JBSUF3ckExQWdIeUFoSUEyM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg0Z0RDc0RRS0lnQ2lBTUt3TklvcUNnSWlCRUFBQUFBQUFBQUFCaERRd2dEQ0FNS3dNZ0lCNGdEQ3NERUtJZ0NpQU1Ld01Zb3FDZ0lDQ2p0aUlhT0FJTUlBd2dEQ3NET0NBZUlBd3JBeWlpSUFvZ0RDc0RNS0tnb0NBZ283WWlHemdDQ0NBSUlCb2dHeUFNUVF4cUlBeEJDR29RY1JvZ0RDb0NEQ0VhQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0drTUFBSUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXNoQXlBYVF3QUFBRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJZ2xCQUVnZ0JTQUpUSElnQTBFQVNDQURJQVpPY25KRkJFQWdEaUFCSUJGdElBSnNJQTBnRW0xcVFReHNhaUlISUFRZ0F5QUZiQ0FKYW1vdEFBQWlBeUFIS0FJQWFqWUNBQ0FISUFNZ0J5Z0NCR28yQWdRZ0J5QURJQWNvQWdocU5nSUlDeUFOUVFGcUlRME1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBbEJBQ0FKUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVRSUFwRUFBQUFBQUFBV1VDZ0lSOGdBN2NoSWlBSnR5RWpRUUFoQVFOQUlBRWdEMFlOQmlBZklDRWdBYmRFQUFBQUFBQUE0RCtnb2lBam82QWhDa0VBSVEwRFFDQU5JQkJIQkVBZ0RDc0RVQ0FmSUNFZ0RiZEVBQUFBQUFBQTREK2dvaUFpbzZBaUhpQU1Ld05Bb2lBS0lBd3JBMGlpb0tBaUlFUUFBQUFBQUFBQUFHRU5DeUFNSUF3ckF5QWdIaUFNS3dNUW9pQUtJQXdyQXhpaW9LQWdJS08ySWhvNEFnd2dEQ0FNS3dNNElCNGdEQ3NES0tJZ0NpQU1Ld013b3FDZ0lDQ2p0aUliT0FJSUlBZ2dHaUFiSUF4QkRHb2dERUVJYWhCeEdpQU1LZ0lNSVJvQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QWFRd0FBZ0QrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0Q3lFRElCcERBQUFBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXNpQ1VFQVNDQUZJQWxNY2lBRFFRQklJQU1nQms1eWNrVUVRQ0FPSUFFZ0VXMGdBbXdnRFNBU2JXcEJER3hxSWdjZ0J5Z0NBQ0FFSUFNZ0JXd2dDV3BCQW5RaUEwRURjbW90QUFCcU5nSUFJQWNnQnlnQ0JDQUVJQU5CQW5KcUxRQUFhallDQkNBSElBY29BZ2dnQkNBRFFRRnlhaTBBQUdvMkFnZ0xJQTFCQVdvaERRd0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0NVRUFJQWxCQUVvYklROGdBMEVBSUFOQkFFb2JJUkFnQ2tRQUFBQUFBQUJaUUtBaEh5QUR0eUVpSUFtM0lTTkJBQ0VCQTBBZ0FTQVBSZzBGSUI4Z0lTQUJ0MFFBQUFBQUFBRGdQNkNpSUNPam9DRUtRUUFoRFFOQUlBMGdFRWNFUUNBTUt3TlFJQjhnSVNBTnQwUUFBQUFBQUFEZ1A2Q2lJQ0tqb0NJZUlBd3JBMENpSUFvZ0RDc0RTS0tnb0NJZ1JBQUFBQUFBQUFBQVlRMEtJQXdnRENzRElDQWVJQXdyQXhDaUlBb2dEQ3NER0tLZ29DQWdvN1lpR2pnQ0RDQU1JQXdyQXpnZ0hpQU1Ld01vb2lBS0lBd3JBekNpb0tBZ0lLTzJJaHM0QWdnZ0NDQWFJQnNnREVFTWFpQU1RUWhxRUhFYUlBd3FBZ3doR2dKL0lBQkJBVVlFUUFKL0lBd3FBZ2hEQUFDQVA1SWlHNHREQUFBQVQxMEVRQ0FicUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFoQXdKL0lCcERBQUNBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUU1BUXNDZnlBTUtnSUlRd0FBQUQrU0lodUxRd0FBQUU5ZEJFQWdHNmdNQVF0QmdJQ0FnSGdMSVFNZ0drTUFBQUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDeUlIUVFCSUlBVWdCMHh5SUFOQkFFZ2dBeUFHVG5KeVJRUkFBbjhnQkNBRElBVnNJZ01nQjBIKy93Tnhha0VCZEdvaUNTMEFBRUdBQVd1eUlodERUaG9CUkpRZ0JDQURJQWRxUVFGMFFRRnlhaTBBQUVFUWE3SkRmd3FWUTVRaUdwSWlISXREQUFBQVQxMEVRQ0FjcUF3QkMwR0FnSUNBZUFzaEJ5QUpMUUFDSVFrZ0RpQUJJQkZ0SUFKc0lBMGdFbTFxUVF4c2FpSURJQU1vQWdBZ0IwRUlkU0lIUVFBZ0IwRUFTaHNpQjBIL0FTQUhRZjhCU0J0cU5nSUFJQU1nQXlnQ0NBSi9JQm9nQ1VHQUFXdXlJaHhEb0VyTVE1U1NJaDJMUXdBQUFFOWRCRUFnSGFnTUFRdEJnSUNBZ0hnTFFRaDFJZ2RCQUNBSFFRQktHeUlIUWY4QklBZEIvd0ZJRzJvMkFnZ2dBeUFES0FJRUFuOGdHaUFiUS82VXlNS1VraUFjUTdnZVVNT1VraUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUlkU0lEUVFBZ0EwRUFTaHNpQTBIL0FTQURRZjhCU0J0cU5nSUVDeUFOUVFGcUlRME1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBbEJBQ0FKUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVRSUFwRUFBQUFBQUFBV1VDZ0lSOGdBN2NoSWlBSnR5RWpRUUFoQVFOQUlBRWdEMFlOQkNBZklDRWdBYmRFQUFBQUFBQUE0RCtnb2lBam82QWhDa0VBSVEwRFFDQU5JQkJIQkVBZ0RDc0RVQ0FmSUNFZ0RiZEVBQUFBQUFBQTREK2dvaUFpbzZBaUhpQU1Ld05Bb2lBS0lBd3JBMGlpb0tBaUlFUUFBQUFBQUFBQUFHRU5DU0FNSUF3ckF5QWdIaUFNS3dNUW9pQUtJQXdyQXhpaW9LQWdJS08ySWhvNEFnd2dEQ0FNS3dNNElCNGdEQ3NES0tJZ0NpQU1Ld013b3FDZ0lDQ2p0aUliT0FJSUlBZ2dHaUFiSUF4QkRHb2dERUVJYWhCeEdpQU1LZ0lNSVJvQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QWFRd0FBZ0QrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0Q3lFRElCcERBQUFBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXNpQjBFQVNDQUZJQWRNY2lBRFFRQklJQU1nQms1eWNrVUVRQUovSUFRZ0F5QUZiQ0lESUFkcVFRRjBhaTBBQUVFUWE3SkRmd3FWUTVRaUdpQUVJQWRCL3Y4RGNTQURha0VCZENJRFFRRnlhaTBBQUVHQUFXdXlJaHREVGhvQlJKU1NJaHlMUXdBQUFFOWRCRUFnSEtnTUFRdEJnSUNBZ0hnTElRY2dBeUFFYWkwQUF5RUpJQTRnQVNBUmJTQUNiQ0FOSUJKdGFrRU1iR29pQXlBREtBSUFJQWRCQ0hVaUIwRUFJQWRCQUVvYklnZEIvd0VnQjBIL0FVZ2JhallDQUNBRElBTW9BZ2dDZnlBYUlBbEJnQUZyc2lJY1E2Qkt6RU9Va2lJZGkwTUFBQUJQWFFSQUlCMm9EQUVMUVlDQWdJQjRDMEVJZFNJSFFRQWdCMEVBU2hzaUIwSC9BU0FIUWY4QlNCdHFOZ0lJSUFNZ0F5Z0NCQUovSUJvZ0cwUCtsTWpDbEpJZ0hFTzRIbEREbEpJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXRCQ0hVaUEwRUFJQU5CQUVvYklnTkIvd0VnQTBIL0FVZ2JhallDQkFzZ0RVRUJhaUVOREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFKUVFBZ0NVRUFTaHNoRHlBRFFRQWdBMEVBU2hzaEVDQUtSQUFBQUFBQUFGbEFvQ0VmSUFPM0lTSWdDYmNoSTBFQUlRRURRQ0FCSUE5R0RRTWdIeUFoSUFHM1JBQUFBQUFBQU9BL29LSWdJNk9nSVFwQkFDRU5BMEFnRFNBUVJ3UkFJQXdyQTFBZ0h5QWhJQTIzUkFBQUFBQUFBT0Evb0tJZ0lxT2dJaDRnRENzRFFLSWdDaUFNS3dOSW9xQ2dJaUJFQUFBQUFBQUFBQUJoRFFnZ0RDQU1Ld01nSUI0Z0RDc0RFS0lnQ2lBTUt3TVlvcUNnSUNDanRpSWFPQUlNSUF3Z0RDc0RPQ0FlSUF3ckF5aWlJQW9nRENzRE1LS2dvQ0FnbzdZaUd6Z0NDQ0FJSUJvZ0d5QU1RUXhxSUF4QkNHb1FjUm9nRENvQ0RDRWFBbjhnQUVFQlJnUkFBbjhnRENvQ0NFTUFBSUEva2lJYmkwTUFBQUJQWFFSQUlCdW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRDRURBbjhnR2tNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZEF3QkN3Si9JQXdxQWdoREFBQUFQNUlpRzR0REFBQUFUMTBFUUNBYnFBd0JDMEdBZ0lDQWVBc2hBeUFhUXdBQUFEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTElnbEJBRWdnQlNBSlRISWdBMEVBU0NBRElBWk9jbkpGQkVBZ0RpQUJJQkZ0SUFKc0lBMGdFbTFxUVF4c2FpSUhJQWNvQWdBZ0JDQURJQVZzSUFscVFRRjBJZ05CQVhKcUxRQUFJZ2xCQTNSQkJISkIvQUZ4YWpZQ0FDQUhJQWNvQWdnZ0F5QUVhaTBBQUNJRFFRUnlRZndCY1dvMkFnZ2dCeUFIS0FJRUlBTkJCWFFnQ1VFRGRuSkJBbkpCL2dGeGFqWUNCQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWZJQU8zSVNJZ0NiY2hJMEVBSVFFRFFDQUJJQTlHRFFJZ0h5QWhJQUczUkFBQUFBQUFBT0Evb0tJZ0k2T2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnSHlBaElBMjNSQUFBQUFBQUFPQS9vS0lnSXFPZ0loNGdEQ3NEUUtJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUWNnRENBTUt3TWdJQjRnRENzREVLSWdDaUFNS3dNWW9xQ2dJQ0NqdGlJYU9BSU1JQXdnRENzRE9DQWVJQXdyQXlpaUlBb2dEQ3NETUtLZ29DQWdvN1lpR3pnQ0NDQUlJQm9nR3lBTVFReHFJQXhCQ0dvUWNSb2dEQ29DRENFYUFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUliaTBNQUFBQlBYUVJBSUJ1b0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHa01BQUlBL2tpSWFpME1BQUFCUFhRUkFJQnFvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHNHREQUFBQVQxMEVRQ0FicUF3QkMwR0FnSUNBZUFzaEF5QWFRd0FBQUQrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMSWdsQkFFZ2dCU0FKVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUXhzYWlJSElBY29BZ0FnQkNBRElBVnNJQWxxUVFGMElnTkJBWEpxTFFBQUlnbEJBblJCQkhKQi9BRnhhallDQUNBSElBY29BZ2dnQXlBRWFpMEFBQ0lEUVFSeVFmd0JjV28yQWdnZ0J5QUhLQUlFSUFOQkJYUWdDVUVEZG5KQkJISkIvQUZ4YWpZQ0JBc2dEVUVCYWlFTkRBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBSlFRQWdDVUVBU2hzaER5QURRUUFnQTBFQVNoc2hFQ0FLUkFBQUFBQUFBRmxBb0NFZklBTzNJU0lnQ2JjaEkwRUFJUUVEUUNBQklBOUdEUUVnSHlBaElBRzNSQUFBQUFBQUFPQS9vS0lnSTZPZ0lRcEJBQ0VOQTBBZ0RTQVFSd1JBSUF3ckExQWdIeUFoSUEyM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg0Z0RDc0RRS0lnQ2lBTUt3TklvcUNnSWlCRUFBQUFBQUFBQUFCaERRWWdEQ0FNS3dNZ0lCNGdEQ3NERUtJZ0NpQU1Ld01Zb3FDZ0lDQ2p0aUlhT0FJTUlBd2dEQ3NET0NBZUlBd3JBeWlpSUFvZ0RDc0RNS0tnb0NBZ283WWlHemdDQ0NBSUlCb2dHeUFNUVF4cUlBeEJDR29RY1JvZ0RDb0NEQ0VhQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0drTUFBSUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXNoQXlBYVF3QUFBRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJZ2xCQUVnZ0JTQUpUSElnQTBFQVNDQURJQVpPY25KRkJFQWdEaUFCSUJGdElBSnNJQTBnRW0xcVFReHNhaUlISUFjb0FnQWdCQ0FESUFWc0lBbHFRUUYwSWdOQkFYSnFMUUFBUWZBQmNVRUljbW8yQWdBZ0J5QUhLQUlJSUFNZ0JHb3RBQUFpQTBFSWNrSDRBWEZxTmdJSUlBY2dCeWdDQkNBRFFRUjBRUWh5UWZnQmNXbzJBZ1FMSUExQkFXb2hEUXdCQ3dzZ0FVRUJhaUVCREFBTEFBc2dFU0FTYkNFQVFRQWhDVUVBSVEwRFFDQU5JQk5HRFFRZ0N5QU5haUFPSUExQkFuUnFLQUlBSUFCdU9nQUFJQTFCQVdvaERRd0FDd0FMSUJOQkJCQ3dBeUlPUlEwREFrQWdCMEVCVFFSQUlBbEJBQ0FKUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVRSUFwRUFBQUFBQUFBV1VDZ0lSOGdBN2NoSWlBSnR5RWpRUUFoQVFOQUlBRWdEMFlOQWlBZklDRWdBYmRFQUFBQUFBQUE0RCtnb2lBam82QWhDa0VBSVEwRFFDQU5JQkJIQkVBZ0RDc0RVQ0FmSUNFZ0RiZEVBQUFBQUFBQTREK2dvaUFpbzZBaUhpQU1Ld05Bb2lBS0lBd3JBMGlpb0tBaUlFUUFBQUFBQUFBQUFHRU5CaUFNSUF3ckF5QWdIaUFNS3dNUW9pQUtJQXdyQXhpaW9LQWdJS08ySWhvNEFnd2dEQ0FNS3dNNElCNGdEQ3NES0tJZ0NpQU1Ld013b3FDZ0lDQ2p0aUliT0FJSUlBZ2dHaUFiSUF4QkRHb2dERUVJYWhCeEdpQU1LZ0lNSVJvQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QWFRd0FBZ0QrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0Q3lFRElCcERBQUFBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXNpQjBFQVNDQUZJQWRNY2lBRFFRQklJQU1nQms1eWNrVUVRQ0FPSUFFZ0VXMGdBbXdnRFNBU2JXcEJBblJxSWdrZ0NTZ0NBQ0FFSUFNZ0JXd2dCMnBCQTJ4cUlnTXRBQUVnQXkwQUFHb2dBeTBBQW1wQkEyNXFOZ0lBQ3lBTlFRRnFJUTBNQVFzTElBRkJBV29oQVF3QUN3QUxJQWRCZm5GQkFrWUVRQ0FKUVFBZ0NVRUFTaHNoRHlBRFFRQWdBMEVBU2hzaEVDQUtSQUFBQUFBQUFGbEFvQ0VmSUFPM0lTSWdDYmNoSTBFQUlRRURRQ0FCSUE5R0RRSWdIeUFoSUFHM1JBQUFBQUFBQU9BL29LSWdJNk9nSVFwQkFDRU5BMEFnRFNBUVJ3UkFJQXdyQTFBZ0h5QWhJQTIzUkFBQUFBQUFBT0Evb0tJZ0lxT2dJaDRnRENzRFFLSWdDaUFNS3dOSW9xQ2dJaUJFQUFBQUFBQUFBQUJoRFFZZ0RDQU1Ld01nSUI0Z0RDc0RFS0lnQ2lBTUt3TVlvcUNnSUNDanRpSWFPQUlNSUF3Z0RDc0RPQ0FlSUF3ckF5aWlJQW9nRENzRE1LS2dvQ0FnbzdZaUd6Z0NDQ0FJSUJvZ0d5QU1RUXhxSUF4QkNHb1FjUm9nRENvQ0RDRWFBbjhnQUVFQlJnUkFBbjhnRENvQ0NFTUFBSUEva2lJYmkwTUFBQUJQWFFSQUlCdW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRDRURBbjhnR2tNQUFJQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEMwRUNiVUVCZEF3QkN3Si9JQXdxQWdoREFBQUFQNUlpRzR0REFBQUFUMTBFUUNBYnFBd0JDMEdBZ0lDQWVBc2hBeUFhUXdBQUFEK1NJaHFMUXdBQUFFOWRCRUFnR3FnTUFRdEJnSUNBZ0hnTElnZEJBRWdnQlNBSFRISWdBMEVBU0NBRElBWk9jbkpGQkVBZ0RpQUJJQkZ0SUFKc0lBMGdFbTFxUVFKMGFpSUpJQWtvQWdBZ0JDQURJQVZzSUFkcVFRSjBJZ05CQVhKcUxRQUFJQU1nQkdvdEFBQnFJQVFnQTBFQ2Ntb3RBQUJxUVFOdWFqWUNBQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUhRWDF4UVFSR0JFQWdDVUVBSUFsQkFFb2JJUThnQTBFQUlBTkJBRW9iSVJBZ0NrUUFBQUFBQUFCWlFLQWhIeUFEdHlFaUlBbTNJU05CQUNFQkEwQWdBU0FQUmcwQ0lCOGdJU0FCdDBRQUFBQUFBQURnUDZDaUlDT2pvQ0VLUVFBaERRTkFJQTBnRUVjRVFDQU1Ld05RSUI4Z0lTQU50MFFBQUFBQUFBRGdQNkNpSUNLam9DSWVJQXdyQTBDaUlBb2dEQ3NEU0tLZ29DSWdSQUFBQUFBQUFBQUFZUTBHSUF3Z0RDc0RJQ0FlSUF3ckF4Q2lJQW9nRENzREdLS2dvQ0FnbzdZaUdqZ0NEQ0FNSUF3ckF6Z2dIaUFNS3dNb29pQUtJQXdyQXpDaW9LQWdJS08ySWhzNEFnZ2dDQ0FhSUJzZ0RFRU1haUFNUVFocUVIRWFJQXdxQWd3aEdnSi9JQUJCQVVZRVFBSi9JQXdxQWdoREFBQ0FQNUlpRzR0REFBQUFUMTBFUUNBYnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRaEF3Si9JQnBEQUFDQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFNQVFzQ2Z5QU1LZ0lJUXdBQUFEK1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTElRTWdHa01BQUFBL2tpSWFpME1BQUFCUFhRUkFJQnFvREFFTFFZQ0FnSUI0Q3lJSFFRQklJQVVnQjB4eUlBTkJBRWdnQXlBR1RuSnlSUVJBSUE0Z0FTQVJiU0FDYkNBTklCSnRha0VDZEdvaUNTQUpLQUlBSUFRZ0F5QUZiQ0FIYWtFQ2RDSURRUUp5YWkwQUFDQUVJQU5CQVhKcUxRQUFhaUFFSUFOQkEzSnFMUUFBYWtFRGJtbzJBZ0FMSUExQkFXb2hEUXdCQ3dzZ0FVRUJhaUVCREFBTEFBc0NRQUpBQWtBQ1FBSkFBa0FnQjBFRmF3NEtBQWNCQWdNRUJRQUFBQWNMSUFsQkFDQUpRUUJLR3lFUElBTkJBQ0FEUVFCS0d5RVFJQXBFQUFBQUFBQUFXVUNnSVI4Z0E3Y2hJaUFKdHlFalFRQWhBUU5BSUFFZ0QwWU5CaUFmSUNFZ0FiZEVBQUFBQUFBQTREK2dvaUFqbzZBaENrRUFJUTBEUUNBTklCQkhCRUFnRENzRFVDQWZJQ0VnRGJkRUFBQUFBQUFBNEQrZ29pQWlvNkFpSGlBTUt3TkFvaUFLSUF3ckEwaWlvS0FpSUVRQUFBQUFBQUFBQUdFTkNpQU1JQXdyQXlBZ0hpQU1Ld01Rb2lBS0lBd3JBeGlpb0tBZ0lLTzJJaG80QWd3Z0RDQU1Ld000SUI0Z0RDc0RLS0lnQ2lBTUt3TXdvcUNnSUNDanRpSWJPQUlJSUFnZ0dpQWJJQXhCREdvZ0RFRUlhaEJ4R2lBTUtnSU1JUm9DZnlBQVFRRkdCRUFDZnlBTUtnSUlRd0FBZ0QrU0lodUxRd0FBQUU5ZEJFQWdHNmdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBJUU1DZnlBYVF3QUFnRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xRUUp0UVFGMERBRUxBbjhnRENvQ0NFTUFBQUEva2lJYmkwTUFBQUJQWFFSQUlCdW9EQUVMUVlDQWdJQjRDeUVESUJwREFBQUFQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBc2lCMEVBU0NBRklBZE1jaUFEUVFCSUlBTWdCazV5Y2tVRVFDQU9JQUVnRVcwZ0Ftd2dEU0FTYldwQkFuUnFJZ2tnQ1NnQ0FDQUVJQU1nQld3Z0IycHFMUUFBYWpZQ0FBc2dEVUVCYWlFTkRBRUxDeUFCUVFGcUlRRU1BQXNBQ3lBSlFRQWdDVUVBU2hzaER5QURRUUFnQTBFQVNoc2hFQ0FLUkFBQUFBQUFBRmxBb0NFZklBTzNJU0lnQ2JjaEkwRUFJUUVEUUNBQklBOUdEUVVnSHlBaElBRzNSQUFBQUFBQUFPQS9vS0lnSTZPZ0lRcEJBQ0VOQTBBZ0RTQVFSd1JBSUF3ckExQWdIeUFoSUEyM1JBQUFBQUFBQU9BL29LSWdJcU9nSWg0Z0RDc0RRS0lnQ2lBTUt3TklvcUNnSWlCRUFBQUFBQUFBQUFCaERRa2dEQ0FNS3dNZ0lCNGdEQ3NERUtJZ0NpQU1Ld01Zb3FDZ0lDQ2p0aUlhT0FJTUlBd2dEQ3NET0NBZUlBd3JBeWlpSUFvZ0RDc0RNS0tnb0NBZ283WWlHemdDQ0NBSUlCb2dHeUFNUVF4cUlBeEJDR29RY1JvZ0RDb0NEQ0VhQW44Z0FFRUJSZ1JBQW44Z0RDb0NDRU1BQUlBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQ0VEQW44Z0drTUFBSUEva2lJYWkwTUFBQUJQWFFSQUlCcW9EQUVMUVlDQWdJQjRDMEVDYlVFQmRBd0JDd0ovSUF3cUFnaERBQUFBUDVJaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXNoQXlBYVF3QUFBRCtTSWhxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJZ2RCQUVnZ0JTQUhUSElnQTBFQVNDQURJQVpPY25KRkJFQWdEaUFCSUJGdElBSnNJQTBnRW0xcVFRSjBhaUlKSUFrb0FnQWdCQ0FESUFWc0lBZHFRUUYwUVFGeWFpMEFBR28yQWdBTElBMUJBV29oRFF3QkN3c2dBVUVCYWlFQkRBQUxBQXNnQ1VFQUlBbEJBRW9iSVE4Z0EwRUFJQU5CQUVvYklSQWdDa1FBQUFBQUFBQlpRS0FoSHlBRHR5RWlJQW0zSVNOQkFDRUJBMEFnQVNBUFJnMEVJQjhnSVNBQnQwUUFBQUFBQUFEZ1A2Q2lJQ09qb0NFS1FRQWhEUU5BSUEwZ0VFY0VRQ0FNS3dOUUlCOGdJU0FOdDBRQUFBQUFBQURnUDZDaUlDS2pvQ0llSUF3ckEwQ2lJQW9nRENzRFNLS2dvQ0lnUkFBQUFBQUFBQUFBWVEwSUlBd2dEQ3NESUNBZUlBd3JBeENpSUFvZ0RDc0RHS0tnb0NBZ283WWlHamdDRENBTUlBd3JBemdnSGlBTUt3TW9vaUFLSUF3ckF6Q2lvS0FnSUtPMkloczRBZ2dnQ0NBYUlCc2dERUVNYWlBTVFRaHFFSEVhSUF3cUFnd2hHZ0ovSUFCQkFVWUVRQUovSUF3cUFnaERBQUNBUDVJaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXRCQW0xQkFYUWhBd0ovSUJwREFBQ0FQNUlpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRTUFRc0NmeUFNS2dJSVF3QUFBRCtTSWh1TFF3QUFBRTlkQkVBZ0c2Z01BUXRCZ0lDQWdIZ0xJUU1nR2tNQUFBQS9raUlhaTBNQUFBQlBYUVJBSUJxb0RBRUxRWUNBZ0lCNEN5SUhRUUJJSUFVZ0IweHlJQU5CQUVnZ0F5QUdUbkp5UlFSQUlBNGdBU0FSYlNBQ2JDQU5JQkp0YWtFQ2RHb2lDU0FKS0FJQUlBUWdBeUFGYkNBSGFrRUJkR290QUFCcU5nSUFDeUFOUVFGcUlRME1BUXNMSUFGQkFXb2hBUXdBQ3dBTElBbEJBQ0FKUVFCS0d5RVBJQU5CQUNBRFFRQktHeUVRSUFwRUFBQUFBQUFBV1VDZ0lSOGdBN2NoSWlBSnR5RWpRUUFoQVFOQUlBRWdEMFlOQXlBZklDRWdBYmRFQUFBQUFBQUE0RCtnb2lBam82QWhDa0VBSVEwRFFDQU5JQkJIQkVBZ0RDc0RVQ0FmSUNFZ0RiZEVBQUFBQUFBQTREK2dvaUFpbzZBaUhpQU1Ld05Bb2lBS0lBd3JBMGlpb0tBaUlFUUFBQUFBQUFBQUFHRU5CeUFNSUF3ckF5QWdIaUFNS3dNUW9pQUtJQXdyQXhpaW9LQWdJS08ySWhvNEFnd2dEQ0FNS3dNNElCNGdEQ3NES0tJZ0NpQU1Ld013b3FDZ0lDQ2p0aUliT0FJSUlBZ2dHaUFiSUF4QkRHb2dERUVJYWhCeEdpQU1LZ0lNSVJvQ2Z5QUFRUUZHQkVBQ2Z5QU1LZ0lJUXdBQWdEK1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTFFRSnRRUUYwSVFNQ2Z5QWFRd0FBZ0QrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMUVFKdFFRRjBEQUVMQW44Z0RDb0NDRU1BQUFBL2tpSWJpME1BQUFCUFhRUkFJQnVvREFFTFFZQ0FnSUI0Q3lFRElCcERBQUFBUDVJaUdvdERBQUFBVDEwRVFDQWFxQXdCQzBHQWdJQ0FlQXNpQjBFQVNDQUZJQWRNY2lBRFFRQklJQU1nQms1eWNrVUVRQ0FPSUFFZ0VXMGdBbXdnRFNBU2JXcEJBblJxSWdrZ0NTZ0NBQ0FFSUFNZ0JXd2dCMnBCQVhRaUEyb3RBQUFpQjBINEFYRWdCQ0FEUVFGeWFpMEFBQ0lEUVFOMFFmZ0JjV29nQjBFRmRDQURRUU4yY2tIOEFYRnFRUXBxUVFOdWFqWUNBQXNnRFVFQmFpRU5EQUVMQ3lBQlFRRnFJUUVNQUFzQUN5QUpRUUFnQ1VFQVNoc2hEeUFEUVFBZ0EwRUFTaHNoRUNBS1JBQUFBQUFBQUZsQW9DRWZJQU8zSVNJZ0NiY2hJMEVBSVFFRFFDQUJJQTlHRFFJZ0h5QWhJQUczUkFBQUFBQUFBT0Evb0tJZ0k2T2dJUXBCQUNFTkEwQWdEU0FRUndSQUlBd3JBMUFnSHlBaElBMjNSQUFBQUFBQUFPQS9vS0lnSXFPZ0loNGdEQ3NEUUtJZ0NpQU1Ld05Jb3FDZ0lpQkVBQUFBQUFBQUFBQmhEUVlnRENBTUt3TWdJQjRnRENzREVLSWdDaUFNS3dNWW9xQ2dJQ0NqdGlJYU9BSU1JQXdnRENzRE9DQWVJQXdyQXlpaUlBb2dEQ3NETUtLZ29DQWdvN1lpR3pnQ0NDQUlJQm9nR3lBTVFReHFJQXhCQ0dvUWNSb2dEQ29DRENFYUFuOGdBRUVCUmdSQUFuOGdEQ29DQ0VNQUFJQS9raUliaTBNQUFBQlBYUVJBSUJ1b0RBRUxRWUNBZ0lCNEMwRUNiVUVCZENFREFuOGdHa01BQUlBL2tpSWFpME1BQUFCUFhRUkFJQnFvREFFTFFZQ0FnSUI0QzBFQ2JVRUJkQXdCQ3dKL0lBd3FBZ2hEQUFBQVA1SWlHNHREQUFBQVQxMEVRQ0FicUF3QkMwR0FnSUNBZUFzaEF5QWFRd0FBQUQrU0locUxRd0FBQUU5ZEJFQWdHcWdNQVF0QmdJQ0FnSGdMSWdkQkFFZ2dCU0FIVEhJZ0EwRUFTQ0FESUFaT2NuSkZCRUFnRGlBQklCRnRJQUpzSUEwZ0VtMXFRUUowYWlJSklBa29BZ0FnQkNBRElBVnNJQWRxUVFGMElnTnFMUUFBSWdkQitBRnhJQVFnQTBFQmNtb3RBQUFpQTBFQ2RFSDRBWEZxSUFkQkJYUWdBMEVEZG5KQitBRnhha0VNYWtFRGJtbzJBZ0FMSUExQkFXb2hEUXdCQ3dzZ0FVRUJhaUVCREFBTEFBc2dDVUVBSUFsQkFFb2JJUThnQTBFQUlBTkJBRW9iSVJBZ0NrUUFBQUFBQUFCWlFLQWhIeUFEdHlFaUlBbTNJU05CQUNFQkEwQWdBU0FQUmcwQklCOGdJU0FCdDBRQUFBQUFBQURnUDZDaUlDT2pvQ0VLUVFBaERRTkFJQTBnRUVjRVFDQU1Ld05RSUI4Z0lTQU50MFFBQUFBQUFBRGdQNkNpSUNLam9DSWVJQXdyQTBDaUlBb2dEQ3NEU0tLZ29DSWdSQUFBQUFBQUFBQUFZUTBGSUF3Z0RDc0RJQ0FlSUF3ckF4Q2lJQW9nRENzREdLS2dvQ0FnbzdZaUdqZ0NEQ0FNSUF3ckF6Z2dIaUFNS3dNb29pQUtJQXdyQXpDaW9LQWdJS08ySWhzNEFnZ2dDQ0FhSUJzZ0RFRU1haUFNUVFocUVIRWFJQXdxQWd3aEdnSi9JQUJCQVVZRVFBSi9JQXdxQWdoREFBQ0FQNUlpRzR0REFBQUFUMTBFUUNBYnFBd0JDMEdBZ0lDQWVBdEJBbTFCQVhRaEF3Si9JQnBEQUFDQVA1SWlHb3REQUFBQVQxMEVRQ0FhcUF3QkMwR0FnSUNBZUF0QkFtMUJBWFFNQVFzQ2Z5QU1LZ0lJUXdBQUFEK1NJaHVMUXdBQUFFOWRCRUFnRzZnTUFRdEJnSUNBZ0hnTElRTWdHa01BQUFBL2tpSWFpME1BQUFCUFhRUkFJQnFvREFFTFFZQ0FnSUI0Q3lJSFFRQklJQVVnQjB4eUlBTkJBRWdnQXlBR1RuSnlSUVJBSUE0Z0FTQVJiU0FDYkNBTklCSnRha0VDZEdvaUNTQUpLQUlBSUFRZ0F5QUZiQ0FIYWtFQmRDSURhaTBBQUNJSFFmQUJjU0FIUVFSMFFmQUJjV29nQkNBRFFRRnlhaTBBQUVFSWNrSDRBWEZxUVJCcVFRTnVhallDQUFzZ0RVRUJhaUVOREFFTEN5QUJRUUZxSVFFTUFBc0FDeUFSSUJKc0lRQkJBQ0VKUVFBaERRTkFJQTBnRTBZTkF5QUxJQTFxSUE0Z0RVRUNkR29vQWdBZ0FHNDZBQUFnRFVFQmFpRU5EQUFMQUF0QkFFRURRY3NWUVFBUU9BdEJmeUVKQ3lBT0VETWdERUhnQVdva0FDQUpEd3RCQUVFRFFlY0xRUUFRT0VFQkVBRUFDeEVBSUFBZ0FTQUJLQUlBS0FJb0VRSUFDd2dBUWYvLy8vOEhDd1VBUWY4QUN5c0FBa0FnQUNBQlJnMEFBMEFnQUNBQlFRUnJJZ0ZQRFFFZ0FDQUJFRW9nQUVFRWFpRUFEQUFMQUFzTDNnTUJDSDhqQUVFUWF5SUtKQUFnQmhDV0FTRUxJQW9nQmhDYkFpSUdFS0FCQWtBZ0NoQzRBUVJBSUFzZ0FDQUNJQU1RNkFFZ0JTQURJQUlnQUd0QkFuUnFJZ1kyQWdBTUFRc2dCU0FETmdJQUFrQUNRQ0FBSWdndEFBQWlCMEVyYXc0REFBRUFBUXNnQ3lBSFFSaDBRUmgxRUtJQklRZ2dCU0FGS0FJQUlnZEJCR28yQWdBZ0J5QUlOZ0lBSUFCQkFXb2hDQXNDUUNBQ0lBaHJRUUpJRFFBZ0NDMEFBRUV3UncwQUlBZ3RBQUZCSUhKQitBQkhEUUFnQzBFd0VLSUJJUWNnQlNBRktBSUFJZ2xCQkdvMkFnQWdDU0FITmdJQUlBc2dDQ3dBQVJDaUFTRUhJQVVnQlNnQ0FDSUpRUVJxTmdJQUlBa2dCellDQUNBSVFRSnFJUWdMSUFnZ0FoQ1pBa0VBSVFrZ0JoQ2hBU0VNUVFBaEJ5QUlJUVlEZnlBQ0lBWk5CSDhnQXlBSUlBQnJRUUowYWlBRktBSUFFTFlESUFVb0FnQUZBa0FnQ2lBSEVEOHRBQUJGRFFBZ0NTQUtJQWNRUHl3QUFFY05BQ0FGSUFVb0FnQWlDVUVFYWpZQ0FDQUpJQXcyQWdBZ0J5QUhJQW9RTjBFQmEwbHFJUWRCQUNFSkN5QUxJQVlzQUFBUW9nRWhEU0FGSUFVb0FnQWlEa0VFYWpZQ0FDQU9JQTAyQWdBZ0JrRUJhaUVHSUFsQkFXb2hDUXdCQ3dzaEJnc2dCQ0FHSUFNZ0FTQUFhMEVDZEdvZ0FTQUNSaHMyQWdBZ0NoQTVHaUFLUVJCcUpBQUxUUUFnQUVFQU5nSVVJQUFnQVRZQ0dDQUFRUUEyQWd3Z0FFS0NvSUNBNEFBM0FnUWdBQ0FCUlRZQ0VDQUFRU0JxUVFCQktCQTdHaUFBUVJ4cUVMRUVJQUJCQURZQ1NDQUFRWDgyQWt3TDBBRUJBbjhnQWtHQUVIRUVRQ0FBUVNzNkFBQWdBRUVCYWlFQUN5QUNRWUFJY1FSQUlBQkJJem9BQUNBQVFRRnFJUUFMSUFKQmhBSnhJZ05CaEFKSEJFQWdBRUd1MUFBN0FBQWdBRUVDYWlFQUN5QUNRWUNBQVhFaEFnTkFJQUV0QUFBaUJBUkFJQUFnQkRvQUFDQUFRUUZxSVFBZ0FVRUJhaUVCREFFTEN5QUFBbjhDUUNBRFFZQUNSd1JBSUFOQkJFY05BVUhHQUVIbUFDQUNHd3dDQzBIRkFFSGxBQ0FDR3d3QkMwSEJBRUhoQUNBQ0d5QURRWVFDUmcwQUdrSEhBRUhuQUNBQ0d3czZBQUFnQTBHRUFrY0wxUU1CQ0g4akFFRVFheUlLSkFBZ0JoQ2RBU0VMSUFvZ0JoQ2RBaUlHRUtBQkFrQWdDaEM0QVFSQUlBc2dBQ0FDSUFNUTZRRWdCU0FESUFJZ0FHdHFJZ1kyQWdBTUFRc2dCU0FETmdJQUFrQUNRQ0FBSWdndEFBQWlCMEVyYXc0REFBRUFBUXNnQ3lBSFFSaDBRUmgxRUlZQklRZ2dCU0FGS0FJQUlnZEJBV28yQWdBZ0J5QUlPZ0FBSUFCQkFXb2hDQXNDUUNBQ0lBaHJRUUpJRFFBZ0NDMEFBRUV3UncwQUlBZ3RBQUZCSUhKQitBQkhEUUFnQzBFd0VJWUJJUWNnQlNBRktBSUFJZ2xCQVdvMkFnQWdDU0FIT2dBQUlBc2dDQ3dBQVJDR0FTRUhJQVVnQlNnQ0FDSUpRUUZxTmdJQUlBa2dCem9BQUNBSVFRSnFJUWdMSUFnZ0FoQ1pBa0VBSVFrZ0JoQ2hBU0VNUVFBaEJ5QUlJUVlEZnlBQ0lBWk5CSDhnQXlBSUlBQnJhaUFGS0FJQUVKa0NJQVVvQWdBRkFrQWdDaUFIRUQ4dEFBQkZEUUFnQ1NBS0lBY1FQeXdBQUVjTkFDQUZJQVVvQWdBaUNVRUJhallDQUNBSklBdzZBQUFnQnlBSElBb1FOMEVCYTBscUlRZEJBQ0VKQ3lBTElBWXNBQUFRaGdFaERTQUZJQVVvQWdBaURrRUJhallDQUNBT0lBMDZBQUFnQmtFQmFpRUdJQWxCQVdvaENRd0JDd3NoQmdzZ0JDQUdJQU1nQVNBQWEyb2dBU0FDUmhzMkFnQWdDaEE1R2lBS1FSQnFKQUFMREFBZ0FCQStJQUZCQW5ScUN6RUFJQUl0QUFBaEFnTkFBa0FnQUNBQlJ3Ui9JQUF0QUFBZ0FrY05BU0FBQlNBQkN3OExJQUJCQVdvaEFBd0FDd0FMNndNQkFYOGpBRUVRYXlJTUpBQWdEQ0FBT2dBUEFrQUNRQ0FBSUFWR0JFQWdBUzBBQUVVTkFVRUFJUUFnQVVFQU9nQUFJQVFnQkNnQ0FDSUJRUUZxTmdJQUlBRkJMam9BQUNBSEVEZEZEUUlnQ1NnQ0FDSUJJQWhyUVo4QlNnMENJQW9vQWdBaEFpQUpJQUZCQkdvMkFnQWdBU0FDTmdJQURBSUxBa0FnQUNBR1J3MEFJQWNRTjBVTkFDQUJMUUFBUlEwQlFRQWhBQ0FKS0FJQUlnRWdDR3RCbndGS0RRSWdDaWdDQUNFQUlBa2dBVUVFYWpZQ0FDQUJJQUEyQWdCQkFDRUFJQXBCQURZQ0FBd0NDMEYvSVFBZ0N5QUxRU0JxSUF4QkQyb1F2QU1nQzJzaUJVRWZTZzBCSUFWQjBMSURhaTBBQUNFR0FrQUNRQUpBQWtBZ0JVRVdhdzRFQVFFQUFBSUxJQU1nQkNnQ0FDSUJSd1JBSUFGQkFXc3RBQUJCM3dCeElBSXRBQUJCL3dCeFJ3MEZDeUFFSUFGQkFXbzJBZ0FnQVNBR09nQUFRUUFoQUF3RUN5QUNRZEFBT2dBQURBRUxJQUlzQUFBaUFDQUdRZDhBY1VjTkFDQUNJQUJCZ0FGeU9nQUFJQUV0QUFCRkRRQWdBVUVBT2dBQUlBY1FOMFVOQUNBSktBSUFJZ0FnQ0d0Qm53RktEUUFnQ2lnQ0FDRUJJQWtnQUVFRWFqWUNBQ0FBSUFFMkFnQUxJQVFnQkNnQ0FDSUFRUUZxTmdJQUlBQWdCam9BQUVFQUlRQWdCVUVWU2cwQklBb2dDaWdDQUVFQmFqWUNBQXdCQzBGL0lRQUxJQXhCRUdva0FDQUFDMXdCQVg4akFFRVFheUlGSkFBZ0JVRUlhaUFCRUVjZ0JVRUlhaENkQVVIUXNnTkI4TElESUFJUTZRRWdBeUFGUVFocUVKMENJZ0VRdndFNkFBQWdCQ0FCRUtFQk9nQUFJQUFnQVJDZ0FTQUZRUWhxRUVJZ0JVRVFhaVFBQzU0QkFnRi9BMzRqQUVHZ0FXc2lCQ1FBSUFSQkVHcEJBRUdRQVJBN0dpQUVRWDgyQWx3Z0JDQUJOZ0k4SUFSQmZ6WUNHQ0FFSUFFMkFoUWdCRUVRYWtJQUVNUUJJQVFnQkVFUWFpQURRUUVRL0FRZ0JDa0RDQ0VGSUFRcEF3QWhCaUFDQkVBZ0FpQUJJQUVnQkNrRGlBRWdCQ2dDRkNBRUtBSVlhNng4SWdlbmFpQUhVQnMyQWdBTElBQWdCamNEQUNBQUlBVTNBd2dnQkVHZ0FXb2tBQXNOQUNBQUlBRWdBa0ovRU1RRUN3b0FJQUJCR0hSQkdIVUxYUUVDZndKQUlBQW9BZ0FpQWtVTkFBSi9JQUlvQWhnaUF5QUNLQUljUmdSQUlBSWdBUkREQVNBQ0tBSUFLQUkwRVFNQURBRUxJQUlnQTBFQmFqWUNHQ0FESUFFNkFBQWdBUkREQVF0QmZ4QzJBVVVOQUNBQVFRQTJBZ0FMQ3drQUlBQVE4Z0lRTXd1NkFRRUNmeU1BUVJCcklnSWtBQ0FBSUFBb0FnQkJER3NvQWdCcUtBSVlCRUFnQWtFSWFpSUJJQUEyQWdRZ0FVRUFPZ0FBSUFBZ0FDZ0NBRUVNYXlnQ0FHb1F4UU1FUUNBQUlBQW9BZ0JCREdzb0FnQnFLQUpJQkVBZ0FDQUFLQUlBUVF4cktBSUFhaWdDU0JERUF3c2dBVUVCT2dBQUN3SkFJQUV0QUFCRkRRQWdBQ0FBS0FJQVFReHJLQUlBYWlnQ0dCREdBa0YvUncwQUlBQWdBQ2dDQUVFTWF5Z0NBR3BCQVJDK0Fnc2dBUkRFQWdzZ0FrRVFhaVFBQ3dnQUlBQW9BaEJGQ3drQUlBQVE5UUlRTXd1MTR3RUNEWDhCZkNBRFJRUkFJQVJCQVVZRVFDQUlCRUFDZnlBQUlRVkJBQ0VBSUFFaUJrRUFJQUZCQUVvYklRb2dCeWdDQUNJRElBRWdBaUlQUVFGcklnRnNRUUYwYWlFRUlBTWhBZ05BSUFBZ0NrY0VRQ0FFUVFBN0FRQWdBa0VBT3dFQUlBQkJBV29oQUNBQ1FRSnFJUUlnQkVFQ2FpRUVEQUVMQ3lBUFFRQWdEMEVBU2hzaENTQURJQVpCQVdzaUNrRUJkR29oQkVFQUlRQWdBeUVDQTBBZ0FDQUpSd1JBSUFSQkFEc0JBQ0FDUVFBN0FRQWdBRUVCYWlFQUlBUWdCa0VCZENJTGFpRUVJQUlnQzJvaEFnd0JDd3NnQVVFQklBRkJBVW9iSVJJZ0IwR1FnTWdBYWlFQklBZ2dCa0VCYWlJQWFpRU1JQUFnQldvaEN5QUtRUUVnQ2tFQlNoc2lFMEVCYXlFTklBTWdBRUVCZEdvaEFrRUFJQVpyUVFGMElSUkJBQ0VGUVFFaENnSkFBMEFnQ2lBU1J3UkFJQXNnRFdvaEVDQU1JQTFxSVE1QkFTRUVBMEFDUUFKQUFrQWdCQ0FUUndSQUlBc3RBQUFnREMwQUFFMEVRQ0FDSUJScUlnQXZBUUFpQTBFUWRFRVFkU0lJUVFGT0JFQWdBaUFJT3dFQUlBY2dBMEVjYkdvaUFFR01nTkFBYWlBS05nSUFJQUJCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQXlBREtBSUFJQVJxTmdJQUlBQkIvUC9QQUdvaUFDQUFLQUlBSUFwcU5nSUFEQVVMSUFCQkFtc3ZBUUFpQ0VFUWRFRVFkU0VESUFBdUFRSWlBRUVCVGdSQUlBTkJBVTRFUUNBSFFaQ0F5QUJxSWdrZ0FFRUNkR3BCQkdzb0FnQWlBeUFJUVFKMElBbHFRUVJyS0FJQUlnaEtCRUFnQWlBSU93RUFRUUFoQ1NBRlFRQWdCVUVBU2hzaEVTQUJJUUFEUUNBSklCRkdCRUFnQ0NFRERBZ0xJQU1nQUNnQ0FFWUVRQ0FBSUFnMkFnQUxJQWxCQVdvaENTQUFRUVJxSVFBTUFBc0FDeUFDSUFNN0FRQWdBeUFJVGcwRlFRQWhDU0FGUVFBZ0JVRUFTaHNoRVNBQklRQURRQ0FKSUJGR0RRWWdDQ0FBS0FJQVJnUkFJQUFnQXpZQ0FBc2dDVUVCYWlFSklBQkJCR29oQUF3QUN3QUxJQUpCQW1zdUFRQWlDRUVCVGdSQUlBZEJrSURJQUdvaUNTQUFRUUowYWtFRWF5Z0NBQ0lESUFoQi8vOERjVUVDZENBSmFrRUVheWdDQUNJSVNnUkFJQUlnQ0RzQkFFRUFJUWtnQlVFQUlBVkJBRW9iSVJFZ0FTRUFBMEFnQ1NBUlJnUkFJQWdoQXd3SEN5QURJQUFvQWdCR0JFQWdBQ0FJTmdJQUN5QUpRUUZxSVFrZ0FFRUVhaUVBREFBTEFBc2dBaUFET3dFQUlBTWdDRTROQkVFQUlRa2dCVUVBSUFWQkFFb2JJUkVnQVNFQUEwQWdDU0FSUmcwRklBZ2dBQ2dDQUVZRVFDQUFJQU0yQWdBTElBbEJBV29oQ1NBQVFRUnFJUUFNQUFzQUN5QUNJQUE3QVFBZ0J5QUFRUWRzUVFKMGFpSUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdNZ0F5Z0NBQ0FLYWpZQ0FDQUVJQUJCZ0lEUUFHb2lBeWdDQUVnRVFDQURJQVEyQWdBTElBQkJqSURRQUdvZ0NqWUNBQXdGQ3lBRFFRRk9CRUFnQWlBRE93RUFJQWNnQ0VFSGJFRUNkR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSURJQU1vQWdBZ0NtbzJBZ0FnQkNBQVFZU0EwQUJxSWdNb0FnQktCRUFnQXlBRU5nSUFDeUFBUVl5QTBBQnFJQW8yQWdBTUJRc2dBa0VDYXk4QkFDSUFRUkIwUVJCMUlnTkJBVTRFUUNBQ0lBTTdBUUFnQnlBQVFSeHNhaUlBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnTWdBeWdDQUNBS2FqWUNBQ0FBUVlTQTBBQnFJZ0FvQWdBZ0JFNE5CU0FBSUFRMkFnQU1CUXNnQlVHQWdBSk9CRUJCQUVFRFFjQUlRUUFRT0VGL0lRc01DUXNnQWlBRlFRRnFJZ0E3QVFBZ0J5QUZRUUowYWtHUWdNZ0FhaUFBUVJCMFFSQjFOZ0lBSUFjZ0JVRWNiR29pQTBHVWdOQUFhaUFFTmdJQUlBTkJrSURRQUdwQkFUWUNBQ0FEUVppQTBBQnFJQW8yQWdBZ0EwR2NnTkFBYWlBRU5nSUFJQU5Cb0lEUUFHb2dCRFlDQUNBRFFhU0EwQUJxSUFvMkFnQWdBMEdvZ05BQWFpQUtOZ0lBSUFBaEJRd0VDeUFDUVFBN0FRQU1Bd3NnQWtFRWFpRUNJQTVCQW1vaERDQVFRUUpxSVFzZ0NrRUJhaUVLREFVTElBY2dBMEVRZEVFUWRVRWNiR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSUFJQUFvQWdBZ0NtbzJBZ0FNQVFzZ0J5QURRUkIwUVJCMVFSeHNhaUlBUVl5QTBBQnFJQW8yQWdBZ0FFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTElBSkJBbW9oQWlBTVFRRnFJUXdnQzBFQmFpRUxJQVJCQVdvaEJBd0FDd0FMQ3lBRlFRQWdCVUVBU2hzaUEwRUJhaUVGUVFFaEFFRUJJUUlEUUNBQUlBVkhCRUFDUUNBQUlBRW9BZ0FpQkVZRVFDQUNJZ1JCQVdvaEFnd0JDeUFFUVFKMElBZHFRWXlBeUFCcUtBSUFJUVFMSUFFZ0JEWUNBQ0FCUVFScUlRRWdBRUVCYWlFQURBRUxDeUFISUFKQkFXc2lBRFlDQ0VFQUlBQkZEUUVhUVFBaEJDQUhRUXhxUVFBZ0FFRUNkQkE3R2lBSFFaQ0FLR3BCQUNBQVFRUjBFRHNhSUFCQkFDQUFRUUJLR3lFRklBZEJqSUFJYWlFQlFRQWhBQU5BSUFBZ0JVWUVRQ0FIUVpDQUtHb2hBUU5BSUFNZ0JFWUVRRUVBSVFzZ0J5Z0NDQ0lBUVFBZ0FFRUFTaHNoQWlBSFFaQ0FLR29oQVVFQUlRQURRQ0FBSUFKR0RRVWdBU0FBUVFSMElnTnFJZ1FnQkNzREFDQUhJQUJCQW5ScUtBSU10eUlXb3prREFDQUJJQU5CQ0hKcUlnTWdBeXNEQUNBV296a0RBQ0FBUVFGcUlRQU1BQXNBQ3lBSElBY2dCRUVDZEdwQmtJRElBR29vQWdCQkFXc2lBa0VDZENJRmFpSUFJQUFvQWd3Z0J5QUVRUWRzUVFKMGFpSUFRWkNBMEFCcUtBSUFhallDRENBQklBSkJCSFFpQW1vaUJpQUdLd01BSUFCQmxJRFFBR29vQWdDM29Ea0RBQ0FCSUFKQkNISnFJZ1lnQmlzREFDQUFRWmlBMEFCcUtBSUF0NkE1QXdBZ0FFR2NnTkFBYWlnQ0FDSUdJQUlnQjJwQmpJQUlhaUlDS0FJQVNBUkFJQUlnQmpZQ0FBc2dBRUdnZ05BQWFpZ0NBQ0lHSUFjZ0JVRUNkQ0lDUVFSeWFrR01nQWhxSWdVb0FnQktCRUFnQlNBR05nSUFDeUFBUWFTQTBBQnFLQUlBSWdVZ0J5QUNRUWh5YWtHTWdBaHFJZ1lvQWdCSUJFQWdCaUFGTmdJQUN5QUFRYWlBMEFCcUtBSUFJZ0FnQnlBQ1FReHlha0dNZ0FocUlnSW9BZ0JLQkVBZ0FpQUFOZ0lBQ3lBRVFRRnFJUVFNQUFzQUJTQUJJQUJCQkhRaUFtb2dCallDQUNBQklBSkJCSEpxUVFBMkFnQWdBU0FDUVFoeWFpQVBOZ0lBSUFFZ0FrRU1jbXBCQURZQ0FDQUFRUUZxSVFBTUFRc0FDd0FMSUFzTER3c2dCa1VFUUFKL0lBQWhDQ0FGSVFwQkFDRUFJQUVpQmtFQUlBRkJBRW9iSVFVZ0J5Z0NBQ0lESUFFZ0FpSVBRUUZySWdGc1FRRjBhaUVFSUFNaEFnTkFJQUFnQlVjRVFDQUVRUUE3QVFBZ0FrRUFPd0VBSUFCQkFXb2hBQ0FDUVFKcUlRSWdCRUVDYWlFRURBRUxDeUFQUVFBZ0QwRUFTaHNoQ1NBRElBWkJBV3NpQlVFQmRHb2hCRUVBSVFBZ0F5RUNBMEFnQUNBSlJ3UkFJQVJCQURzQkFDQUNRUUE3QVFBZ0FFRUJhaUVBSUFRZ0JrRUJkQ0lMYWlFRUlBSWdDMm9oQWd3QkN3c2dBVUVCSUFGQkFVb2JJUTBnQjBHUWdNZ0FhaUVCSUFnZ0JrRUJhaUlBYWlFTUlBVkJBU0FGUVFGS0d5SVNRUUZySVJNZ0F5QUFRUUYwYWlFQ1FRQWdCbXRCQVhRaEZFRUFJUVZCQVNFSkFrQURRQ0FKSUExSEJFQWdEQ0FUYWlFUVFRRWhCQU5BQWtBQ1FBSkFJQVFnRWtjRVFDQUtJQXd0QUFCT0JFQWdBaUFVYWlJQUx3RUFJZ05CRUhSQkVIVWlDRUVCVGdSQUlBSWdDRHNCQUNBSElBTkJIR3hxSWdCQmpJRFFBR29nQ1RZQ0FDQUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdBZ0FDZ0NBQ0FKYWpZQ0FBd0ZDeUFBUVFKckx3RUFJZ2hCRUhSQkVIVWhBeUFBTGdFQ0lnQkJBVTRFUUNBRFFRRk9CRUFnQjBHUWdNZ0FhaUlMSUFCQkFuUnFRUVJyS0FJQUlnTWdDRUVDZENBTGFrRUVheWdDQUNJSVNnUkFJQUlnQ0RzQkFFRUFJUXNnQlVFQUlBVkJBRW9iSVE0Z0FTRUFBMEFnQ3lBT1JnUkFJQWdoQXd3SUN5QURJQUFvQWdCR0JFQWdBQ0FJTmdJQUN5QUxRUUZxSVFzZ0FFRUVhaUVBREFBTEFBc2dBaUFET3dFQUlBTWdDRTROQlVFQUlRc2dCVUVBSUFWQkFFb2JJUTRnQVNFQUEwQWdDeUFPUmcwR0lBZ2dBQ2dDQUVZRVFDQUFJQU0yQWdBTElBdEJBV29oQ3lBQVFRUnFJUUFNQUFzQUN5QUNRUUpyTGdFQUlnaEJBVTRFUUNBSFFaQ0F5QUJxSWdzZ0FFRUNkR3BCQkdzb0FnQWlBeUFJUWYvL0EzRkJBblFnQzJwQkJHc29BZ0FpQ0VvRVFDQUNJQWc3QVFCQkFDRUxJQVZCQUNBRlFRQktHeUVPSUFFaEFBTkFJQXNnRGtZRVFDQUlJUU1NQndzZ0F5QUFLQUlBUmdSQUlBQWdDRFlDQUFzZ0MwRUJhaUVMSUFCQkJHb2hBQXdBQ3dBTElBSWdBenNCQUNBRElBaE9EUVJCQUNFTElBVkJBQ0FGUVFCS0d5RU9JQUVoQUFOQUlBc2dEa1lOQlNBSUlBQW9BZ0JHQkVBZ0FDQUROZ0lBQ3lBTFFRRnFJUXNnQUVFRWFpRUFEQUFMQUFzZ0FpQUFPd0VBSUFjZ0FFRUhiRUVDZEdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDV28yQWdBZ0JDQUFRWUNBMEFCcUlnTW9BZ0JJQkVBZ0F5QUVOZ0lBQ3lBQVFZeUEwQUJxSUFrMkFnQU1CUXNnQTBFQlRnUkFJQUlnQXpzQkFDQUhJQWhCQjJ4QkFuUnFJZ0JCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQXlBREtBSUFJQVJxTmdJQUlBQkIvUC9QQUdvaUF5QURLQUlBSUFscU5nSUFJQVFnQUVHRWdOQUFhaUlES0FJQVNnUkFJQU1nQkRZQ0FBc2dBRUdNZ05BQWFpQUpOZ0lBREFVTElBSkJBbXN2QVFBaUFFRVFkRUVRZFNJRFFRRk9CRUFnQWlBRE93RUFJQWNnQUVFY2JHb2lBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJRElBTW9BZ0FnQ1dvMkFnQWdBRUdFZ05BQWFpSUFLQUlBSUFST0RRVWdBQ0FFTmdJQURBVUxJQVZCZ0lBQ1RnUkFRUUJCQTBHZ0NFRUFFRGhCZnlFRERBa0xJQUlnQlVFQmFpSUFPd0VBSUFjZ0JVRUNkR3BCa0lESUFHb2dBRUVRZEVFUWRUWUNBQ0FISUFWQkhHeHFJZ05CbElEUUFHb2dCRFlDQUNBRFFaQ0EwQUJxUVFFMkFnQWdBMEdZZ05BQWFpQUpOZ0lBSUFOQm5JRFFBR29nQkRZQ0FDQURRYUNBMEFCcUlBUTJBZ0FnQTBHa2dOQUFhaUFKTmdJQUlBTkJxSURRQUdvZ0NUWUNBQ0FBSVFVTUJBc2dBa0VBT3dFQURBTUxJQUpCQkdvaEFpQVFRUUpxSVF3Z0NVRUJhaUVKREFVTElBY2dBMEVRZEVFUWRVRWNiR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSUFJQUFvQWdBZ0NXbzJBZ0FNQVFzZ0J5QURRUkIwUVJCMVFSeHNhaUlBUVl5QTBBQnFJQWsyQWdBZ0FFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDV28yQWdBTElBSkJBbW9oQWlBTVFRRnFJUXdnQkVFQmFpRUVEQUFMQUFzTElBVkJBQ0FGUVFCS0d5SURRUUZxSVFWQkFTRUFRUUVoQWdOQUlBQWdCVWNFUUFKQUlBQWdBU2dDQUNJRVJnUkFJQUlpQkVFQmFpRUNEQUVMSUFSQkFuUWdCMnBCaklESUFHb29BZ0FoQkFzZ0FTQUVOZ0lBSUFGQkJHb2hBU0FBUVFGcUlRQU1BUXNMSUFjZ0FrRUJheUlBTmdJSVFRQWdBRVVOQVJwQkFDRUVJQWRCREdwQkFDQUFRUUowRURzYUlBZEJrSUFvYWtFQUlBQkJCSFFRT3hvZ0FFRUFJQUJCQUVvYklRVWdCMEdNZ0FocUlRRkJBQ0VBQTBBZ0FDQUZSZ1JBSUFkQmtJQW9haUVCQTBBZ0F5QUVSZ1JBUVFBaEF5QUhLQUlJSWdCQkFDQUFRUUJLR3lFQ0lBZEJrSUFvYWlFQlFRQWhBQU5BSUFBZ0FrWU5CU0FCSUFCQkJIUWlCR29pQlNBRkt3TUFJQWNnQUVFQ2RHb29BZ3kzSWhhak9RTUFJQUVnQkVFSWNtb2lCQ0FFS3dNQUlCYWpPUU1BSUFCQkFXb2hBQXdBQ3dBTElBY2dCeUFFUVFKMGFrR1FnTWdBYWlnQ0FFRUJheUlDUVFKMElnVnFJZ0FnQUNnQ0RDQUhJQVJCQjJ4QkFuUnFJZ0JCa0lEUUFHb29BZ0JxTmdJTUlBRWdBa0VFZENJQ2FpSUdJQVlyQXdBZ0FFR1VnTkFBYWlnQ0FMZWdPUU1BSUFFZ0FrRUljbW9pQmlBR0t3TUFJQUJCbUlEUUFHb29BZ0Mzb0RrREFDQUFRWnlBMEFCcUtBSUFJZ1lnQWlBSGFrR01nQWhxSWdJb0FnQklCRUFnQWlBR05nSUFDeUFBUWFDQTBBQnFLQUlBSWdZZ0J5QUZRUUowSWdKQkJISnFRWXlBQ0dvaUJTZ0NBRW9FUUNBRklBWTJBZ0FMSUFCQnBJRFFBR29vQWdBaUJTQUhJQUpCQ0hKcVFZeUFDR29pQmlnQ0FFZ0VRQ0FHSUFVMkFnQUxJQUJCcUlEUUFHb29BZ0FpQUNBSElBSkJESEpxUVl5QUNHb2lBaWdDQUVvRVFDQUNJQUEyQWdBTElBUkJBV29oQkF3QUN3QUZJQUVnQUVFRWRDSUNhaUFHTmdJQUlBRWdBa0VFY21wQkFEWUNBQ0FCSUFKQkNISnFJQTgyQWdBZ0FTQUNRUXh5YWtFQU5nSUFJQUJCQVdvaEFBd0JDd0FMQUFzZ0F3c1BDd0ovSUFBaEJpQUZJUThnQVNJSVFRSnRJZ3RCQUNBTFFRQktHeUVGSUFjb0FnQWlBeUFDUVFKdElnMUJBV3NpQVNBTGJFRUJkR29oQkVFQUlRQWdBeUVDQTBBZ0FDQUZSd1JBSUFSQkFEc0JBQ0FDUVFBN0FRQWdBRUVCYWlFQUlBSkJBbW9oQWlBRVFRSnFJUVFNQVFzTElBMUJBQ0FOUVFCS0d5RUtJQU1nQzBFQmF5SUZRUUYwYWlFRVFRQWhBQ0FESVFJRFFDQUFJQXBIQkVBZ0JFRUFPd0VBSUFKQkFEc0JBQ0FBUVFGcUlRQWdCQ0FMUVFGMElnbHFJUVFnQWlBSmFpRUNEQUVMQ3lBQlFRRWdBVUVCU2hzaEVpQUZRUUVnQlVFQlNoc2hFeUFIUVpDQXlBQnFJUUVnQ0VFQmRDQUdha0VDYWlFTUlBdEJBWFFnQTJwQkFtb2hBa0VBSUF0clFRRjBJUlJCQUNFRlFRRWhDZ0pBQTBBZ0NpQVNSd1JBUVFFaEJBTkFBa0FDUUFKQUlBUWdFMGNFUUNBUElBd3RBQUJPQkVBZ0FpQVVhaUlBTHdFQUlnTkJFSFJCRUhVaUJrRUJUZ1JBSUFJZ0Jqc0JBQ0FISUFOQkhHeHFJZ0JCaklEUUFHb2dDallDQUNBQVFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUFRZmovendCcUlnTWdBeWdDQUNBRWFqWUNBQ0FBUWZ6L3p3QnFJZ0FnQUNnQ0FDQUthallDQUF3RkN5QUFRUUpyTHdFQUlnWkJFSFJCRUhVaEF5QUFMZ0VDSWdCQkFVNEVRQ0FEUVFGT0JFQWdCMEdRZ01nQWFpSUpJQUJCQW5ScVFRUnJLQUlBSWdNZ0JrRUNkQ0FKYWtFRWF5Z0NBQ0lHU2dSQUlBSWdCanNCQUVFQUlRa2dCVUVBSUFWQkFFb2JJUkFnQVNFQUEwQWdDU0FRUmdSQUlBWWhBd3dJQ3lBRElBQW9BZ0JHQkVBZ0FDQUdOZ0lBQ3lBSlFRRnFJUWtnQUVFRWFpRUFEQUFMQUFzZ0FpQURPd0VBSUFNZ0JrNE5CVUVBSVFrZ0JVRUFJQVZCQUVvYklSQWdBU0VBQTBBZ0NTQVFSZzBHSUFZZ0FDZ0NBRVlFUUNBQUlBTTJBZ0FMSUFsQkFXb2hDU0FBUVFScUlRQU1BQXNBQ3lBQ1FRSnJMZ0VBSWdaQkFVNEVRQ0FIUVpDQXlBQnFJZ2tnQUVFQ2RHcEJCR3NvQWdBaUF5QUdRZi8vQTNGQkFuUWdDV3BCQkdzb0FnQWlCa29FUUNBQ0lBWTdBUUJCQUNFSklBVkJBQ0FGUVFCS0d5RVFJQUVoQUFOQUlBa2dFRVlFUUNBR0lRTU1Cd3NnQXlBQUtBSUFSZ1JBSUFBZ0JqWUNBQXNnQ1VFQmFpRUpJQUJCQkdvaEFBd0FDd0FMSUFJZ0F6c0JBQ0FESUFaT0RRUkJBQ0VKSUFWQkFDQUZRUUJLR3lFUUlBRWhBQU5BSUFrZ0VFWU5CU0FHSUFBb0FnQkdCRUFnQUNBRE5nSUFDeUFKUVFGcUlRa2dBRUVFYWlFQURBQUxBQXNnQWlBQU93RUFJQWNnQUVFSGJFRUNkR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSURJQU1vQWdBZ0NtbzJBZ0FnQkNBQVFZQ0EwQUJxSWdNb0FnQklCRUFnQXlBRU5nSUFDeUFBUVl5QTBBQnFJQW8yQWdBTUJRc2dBMEVCVGdSQUlBSWdBenNCQUNBSElBWkJCMnhCQW5ScUlnQkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQUJCK1AvUEFHb2lBeUFES0FJQUlBUnFOZ0lBSUFCQi9QL1BBR29pQXlBREtBSUFJQXBxTmdJQUlBUWdBRUdFZ05BQWFpSURLQUlBU2dSQUlBTWdCRFlDQUFzZ0FFR01nTkFBYWlBS05nSUFEQVVMSUFKQkFtc3ZBUUFpQUVFUWRFRVFkU0lEUVFGT0JFQWdBaUFET3dFQUlBY2dBRUVjYkdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDbW8yQWdBZ0FFR0VnTkFBYWlJQUtBSUFJQVJPRFFVZ0FDQUVOZ0lBREFVTElBVkJnSUFDVGdSQVFRQkJBMEdBQ0VFQUVEaEJmeUVEREFrTElBSWdCVUVCYWlJQU93RUFJQWNnQlVFQ2RHcEJrSURJQUdvZ0FFRVFkRUVRZFRZQ0FDQUhJQVZCSEd4cUlnTkJsSURRQUdvZ0JEWUNBQ0FEUVpDQTBBQnFRUUUyQWdBZ0EwR1lnTkFBYWlBS05nSUFJQU5CbklEUUFHb2dCRFlDQUNBRFFhQ0EwQUJxSUFRMkFnQWdBMEdrZ05BQWFpQUtOZ0lBSUFOQnFJRFFBR29nQ2pZQ0FDQUFJUVVNQkFzZ0FrRUFPd0VBREFNTElBSkJCR29oQWlBS1FRRnFJUW9nQ0NBTWFrRUVhaUVNREFVTElBY2dBMEVRZEVFUWRVRWNiR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSUFJQUFvQWdBZ0NtbzJBZ0FNQVFzZ0J5QURRUkIwUVJCMVFSeHNhaUlBUVl5QTBBQnFJQW8yQWdBZ0FFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTElBSkJBbW9oQWlBTVFRSnFJUXdnQkVFQmFpRUVEQUFMQUFzTElBVkJBQ0FGUVFCS0d5SURRUUZxSVFWQkFTRUFRUUVoQWdOQUlBQWdCVWNFUUFKQUlBQWdBU2dDQUNJRVJnUkFJQUlpQkVFQmFpRUNEQUVMSUFSQkFuUWdCMnBCaklESUFHb29BZ0FoQkFzZ0FTQUVOZ0lBSUFGQkJHb2hBU0FBUVFGcUlRQU1BUXNMSUFjZ0FrRUJheUlBTmdJSVFRQWdBRVVOQVJwQkFDRUVJQWRCREdwQkFDQUFRUUowRURzYUlBZEJrSUFvYWtFQUlBQkJCSFFRT3hvZ0FFRUFJQUJCQUVvYklRVWdCMEdNZ0FocUlRRkJBQ0VBQTBBZ0FDQUZSZ1JBSUFkQmtJQW9haUVCQTBBZ0F5QUVSZ1JBUVFBaEF5QUhLQUlJSWdCQkFDQUFRUUJLR3lFQ0lBZEJrSUFvYWlFQlFRQWhBQU5BSUFBZ0FrWU5CU0FCSUFCQkJIUWlCR29pQlNBRkt3TUFJQWNnQUVFQ2RHb29BZ3kzSWhhak9RTUFJQUVnQkVFSWNtb2lCQ0FFS3dNQUlCYWpPUU1BSUFCQkFXb2hBQXdBQ3dBTElBY2dCeUFFUVFKMGFrR1FnTWdBYWlnQ0FFRUJheUlDUVFKMElnVnFJZ0FnQUNnQ0RDQUhJQVJCQjJ4QkFuUnFJZ0JCa0lEUUFHb29BZ0JxTmdJTUlBRWdBa0VFZENJQ2FpSUdJQVlyQXdBZ0FFR1VnTkFBYWlnQ0FMZWdPUU1BSUFFZ0FrRUljbW9pQmlBR0t3TUFJQUJCbUlEUUFHb29BZ0Mzb0RrREFDQUFRWnlBMEFCcUtBSUFJZ1lnQWlBSGFrR01nQWhxSWdJb0FnQklCRUFnQWlBR05nSUFDeUFBUWFDQTBBQnFLQUlBSWdZZ0J5QUZRUUowSWdKQkJISnFRWXlBQ0dvaUJTZ0NBRW9FUUNBRklBWTJBZ0FMSUFCQnBJRFFBR29vQWdBaUJTQUhJQUpCQ0hKcVFZeUFDR29pQmlnQ0FFZ0VRQ0FHSUFVMkFnQUxJQUJCcUlEUUFHb29BZ0FpQUNBSElBSkJESEpxUVl5QUNHb2lBaWdDQUVvRVFDQUNJQUEyQWdBTElBUkJBV29oQkF3QUN3QUZJQUVnQUVFRWRDSUNhaUFMTmdJQUlBRWdBa0VFY21wQkFEWUNBQ0FCSUFKQkNISnFJQTAyQWdBZ0FTQUNRUXh5YWtFQU5nSUFJQUJCQVdvaEFBd0JDd0FMQUFzZ0F3c1BDeUFJQkVBQ2Z5QUFJUVZCQUNFQUlBRWlCa0VBSUFGQkFFb2JJUW9nQnlnQ0FDSURJQUVnQWlJUFFRRnJJZ0ZzUVFGMGFpRUVJQU1oQWdOQUlBQWdDa2NFUUNBRVFRQTdBUUFnQWtFQU93RUFJQUJCQVdvaEFDQUNRUUpxSVFJZ0JFRUNhaUVFREFFTEN5QVBRUUFnRDBFQVNoc2hDU0FESUFaQkFXc2lDa0VCZEdvaEJFRUFJUUFnQXlFQ0EwQWdBQ0FKUndSQUlBUkJBRHNCQUNBQ1FRQTdBUUFnQUVFQmFpRUFJQVFnQmtFQmRDSUxhaUVFSUFJZ0Myb2hBZ3dCQ3dzZ0FVRUJJQUZCQVVvYklSSWdCMEdRZ01nQWFpRUJJQWdnQmtFQmFpSUFhaUVNSUFBZ0JXb2hDeUFLUVFFZ0NrRUJTaHNpRTBFQmF5RU5JQU1nQUVFQmRHb2hBa0VBSUFaclFRRjBJUlJCQUNFRlFRRWhDZ0pBQTBBZ0NpQVNSd1JBSUFzZ0RXb2hFQ0FNSUExcUlRNUJBU0VFQTBBQ1FBSkFBa0FnQkNBVFJ3UkFJQXN0QUFBZ0RDMEFBRXNFUUNBQ0lCUnFJZ0F2QVFBaUEwRVFkRUVRZFNJSVFRRk9CRUFnQWlBSU93RUFJQWNnQTBFY2JHb2lBRUdNZ05BQWFpQUtOZ0lBSUFCQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBQkIrUC9QQUdvaUF5QURLQUlBSUFScU5nSUFJQUJCL1AvUEFHb2lBQ0FBS0FJQUlBcHFOZ0lBREFVTElBQkJBbXN2QVFBaUNFRVFkRUVRZFNFRElBQXVBUUlpQUVFQlRnUkFJQU5CQVU0RVFDQUhRWkNBeUFCcUlna2dBRUVDZEdwQkJHc29BZ0FpQXlBSVFRSjBJQWxxUVFScktBSUFJZ2hLQkVBZ0FpQUlPd0VBUVFBaENTQUZRUUFnQlVFQVNoc2hFU0FCSVFBRFFDQUpJQkZHQkVBZ0NDRUREQWdMSUFNZ0FDZ0NBRVlFUUNBQUlBZzJBZ0FMSUFsQkFXb2hDU0FBUVFScUlRQU1BQXNBQ3lBQ0lBTTdBUUFnQXlBSVRnMEZRUUFoQ1NBRlFRQWdCVUVBU2hzaEVTQUJJUUFEUUNBSklCRkdEUVlnQ0NBQUtBSUFSZ1JBSUFBZ0F6WUNBQXNnQ1VFQmFpRUpJQUJCQkdvaEFBd0FDd0FMSUFKQkFtc3VBUUFpQ0VFQlRnUkFJQWRCa0lESUFHb2lDU0FBUVFKMGFrRUVheWdDQUNJRElBaEIvLzhEY1VFQ2RDQUpha0VFYXlnQ0FDSUlTZ1JBSUFJZ0NEc0JBRUVBSVFrZ0JVRUFJQVZCQUVvYklSRWdBU0VBQTBBZ0NTQVJSZ1JBSUFnaEF3d0hDeUFESUFBb0FnQkdCRUFnQUNBSU5nSUFDeUFKUVFGcUlRa2dBRUVFYWlFQURBQUxBQXNnQWlBRE93RUFJQU1nQ0U0TkJFRUFJUWtnQlVFQUlBVkJBRW9iSVJFZ0FTRUFBMEFnQ1NBUlJnMEZJQWdnQUNnQ0FFWUVRQ0FBSUFNMkFnQUxJQWxCQVdvaENTQUFRUVJxSVFBTUFBc0FDeUFDSUFBN0FRQWdCeUFBUVFkc1FRSjBhaUlBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnTWdBeWdDQUNBS2FqWUNBQ0FFSUFCQmdJRFFBR29pQXlnQ0FFZ0VRQ0FESUFRMkFnQUxJQUJCaklEUUFHb2dDallDQUF3RkN5QURRUUZPQkVBZ0FpQURPd0VBSUFjZ0NFRUhiRUVDZEdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDbW8yQWdBZ0JDQUFRWVNBMEFCcUlnTW9BZ0JLQkVBZ0F5QUVOZ0lBQ3lBQVFZeUEwQUJxSUFvMkFnQU1CUXNnQWtFQ2F5OEJBQ0lBUVJCMFFSQjFJZ05CQVU0RVFDQUNJQU03QVFBZ0J5QUFRUnhzYWlJQVFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUFRZmovendCcUlnTWdBeWdDQUNBRWFqWUNBQ0FBUWZ6L3p3QnFJZ01nQXlnQ0FDQUthallDQUNBQVFZU0EwQUJxSWdBb0FnQWdCRTROQlNBQUlBUTJBZ0FNQlFzZ0JVR0FnQUpPQkVCQkFFRURRYUFKUVFBUU9FRi9JUXNNQ1FzZ0FpQUZRUUZxSWdBN0FRQWdCeUFGUVFKMGFrR1FnTWdBYWlBQVFSQjBRUkIxTmdJQUlBY2dCVUVjYkdvaUEwR1VnTkFBYWlBRU5nSUFJQU5Ca0lEUUFHcEJBVFlDQUNBRFFaaUEwQUJxSUFvMkFnQWdBMEdjZ05BQWFpQUVOZ0lBSUFOQm9JRFFBR29nQkRZQ0FDQURRYVNBMEFCcUlBbzJBZ0FnQTBHb2dOQUFhaUFLTmdJQUlBQWhCUXdFQ3lBQ1FRQTdBUUFNQXdzZ0FrRUVhaUVDSUE1QkFtb2hEQ0FRUVFKcUlRc2dDa0VCYWlFS0RBVUxJQWNnQTBFUWRFRVFkVUVjYkdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTUFRc2dCeUFEUVJCMFFSQjFRUnhzYWlJQVFZeUEwQUJxSUFvMkFnQWdBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJQUlBQW9BZ0FnQ21vMkFnQUxJQUpCQW1vaEFpQU1RUUZxSVF3Z0MwRUJhaUVMSUFSQkFXb2hCQXdBQ3dBTEN5QUZRUUFnQlVFQVNoc2lBMEVCYWlFRlFRRWhBRUVCSVFJRFFDQUFJQVZIQkVBQ1FDQUFJQUVvQWdBaUJFWUVRQ0FDSWdSQkFXb2hBZ3dCQ3lBRVFRSjBJQWRxUVl5QXlBQnFLQUlBSVFRTElBRWdCRFlDQUNBQlFRUnFJUUVnQUVFQmFpRUFEQUVMQ3lBSElBSkJBV3NpQURZQ0NFRUFJQUJGRFFFYVFRQWhCQ0FIUVF4cVFRQWdBRUVDZEJBN0dpQUhRWkNBS0dwQkFDQUFRUVIwRURzYUlBQkJBQ0FBUVFCS0d5RUZJQWRCaklBSWFpRUJRUUFoQUFOQUlBQWdCVVlFUUNBSFFaQ0FLR29oQVFOQUlBTWdCRVlFUUVFQUlRc2dCeWdDQ0NJQVFRQWdBRUVBU2hzaEFpQUhRWkNBS0dvaEFVRUFJUUFEUUNBQUlBSkdEUVVnQVNBQVFRUjBJZ05xSWdRZ0JDc0RBQ0FISUFCQkFuUnFLQUlNdHlJV296a0RBQ0FCSUFOQkNISnFJZ01nQXlzREFDQVdvemtEQUNBQVFRRnFJUUFNQUFzQUN5QUhJQWNnQkVFQ2RHcEJrSURJQUdvb0FnQkJBV3NpQWtFQ2RDSUZhaUlBSUFBb0Fnd2dCeUFFUVFkc1FRSjBhaUlBUVpDQTBBQnFLQUlBYWpZQ0RDQUJJQUpCQkhRaUFtb2lCaUFHS3dNQUlBQkJsSURRQUdvb0FnQzNvRGtEQUNBQklBSkJDSEpxSWdZZ0Jpc0RBQ0FBUVppQTBBQnFLQUlBdDZBNUF3QWdBRUdjZ05BQWFpZ0NBQ0lHSUFJZ0IycEJqSUFJYWlJQ0tBSUFTQVJBSUFJZ0JqWUNBQXNnQUVHZ2dOQUFhaWdDQUNJR0lBY2dCVUVDZENJQ1FRUnlha0dNZ0FocUlnVW9BZ0JLQkVBZ0JTQUdOZ0lBQ3lBQVFhU0EwQUJxS0FJQUlnVWdCeUFDUVFoeWFrR01nQWhxSWdZb0FnQklCRUFnQmlBRk5nSUFDeUFBUWFpQTBBQnFLQUlBSWdBZ0J5QUNRUXh5YWtHTWdBaHFJZ0lvQWdCS0JFQWdBaUFBTmdJQUN5QUVRUUZxSVFRTUFBc0FCU0FCSUFCQkJIUWlBbW9nQmpZQ0FDQUJJQUpCQkhKcVFRQTJBZ0FnQVNBQ1FRaHlhaUFQTmdJQUlBRWdBa0VNY21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNBQ3dBTElBc0xEd3NnQmtVRVFBSi9JQUFoQ0NBRklRcEJBQ0VBSUFFaUJrRUFJQUZCQUVvYklRVWdCeWdDQUNJRElBRWdBaUlQUVFGcklnRnNRUUYwYWlFRUlBTWhBZ05BSUFBZ0JVY0VRQ0FFUVFBN0FRQWdBa0VBT3dFQUlBQkJBV29oQUNBQ1FRSnFJUUlnQkVFQ2FpRUVEQUVMQ3lBUFFRQWdEMEVBU2hzaENTQURJQVpCQVdzaUJVRUJkR29oQkVFQUlRQWdBeUVDQTBBZ0FDQUpSd1JBSUFSQkFEc0JBQ0FDUVFBN0FRQWdBRUVCYWlFQUlBUWdCa0VCZENJTGFpRUVJQUlnQzJvaEFnd0JDd3NnQVVFQklBRkJBVW9iSVEwZ0IwR1FnTWdBYWlFQklBZ2dCa0VCYWlJQWFpRU1JQVZCQVNBRlFRRktHeUlTUVFGcklSTWdBeUFBUVFGMGFpRUNRUUFnQm10QkFYUWhGRUVBSVFWQkFTRUpBa0FEUUNBSklBMUhCRUFnRENBVGFpRVFRUUVoQkFOQUFrQUNRQUpBSUFRZ0VrY0VRQ0FLSUF3dEFBQklCRUFnQWlBVWFpSUFMd0VBSWdOQkVIUkJFSFVpQ0VFQlRnUkFJQUlnQ0RzQkFDQUhJQU5CSEd4cUlnQkJqSURRQUdvZ0NUWUNBQ0FBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnQWdBQ2dDQUNBSmFqWUNBQXdGQ3lBQVFRSnJMd0VBSWdoQkVIUkJFSFVoQXlBQUxnRUNJZ0JCQVU0RVFDQURRUUZPQkVBZ0IwR1FnTWdBYWlJTElBQkJBblJxUVFScktBSUFJZ01nQ0VFQ2RDQUxha0VFYXlnQ0FDSUlTZ1JBSUFJZ0NEc0JBRUVBSVFzZ0JVRUFJQVZCQUVvYklRNGdBU0VBQTBBZ0N5QU9SZ1JBSUFnaEF3d0lDeUFESUFBb0FnQkdCRUFnQUNBSU5nSUFDeUFMUVFGcUlRc2dBRUVFYWlFQURBQUxBQXNnQWlBRE93RUFJQU1nQ0U0TkJVRUFJUXNnQlVFQUlBVkJBRW9iSVE0Z0FTRUFBMEFnQ3lBT1JnMEdJQWdnQUNnQ0FFWUVRQ0FBSUFNMkFnQUxJQXRCQVdvaEN5QUFRUVJxSVFBTUFBc0FDeUFDUVFKckxnRUFJZ2hCQVU0RVFDQUhRWkNBeUFCcUlnc2dBRUVDZEdwQkJHc29BZ0FpQXlBSVFmLy9BM0ZCQW5RZ0MycEJCR3NvQWdBaUNFb0VRQ0FDSUFnN0FRQkJBQ0VMSUFWQkFDQUZRUUJLR3lFT0lBRWhBQU5BSUFzZ0RrWUVRQ0FJSVFNTUJ3c2dBeUFBS0FJQVJnUkFJQUFnQ0RZQ0FBc2dDMEVCYWlFTElBQkJCR29oQUF3QUN3QUxJQUlnQXpzQkFDQURJQWhPRFFSQkFDRUxJQVZCQUNBRlFRQktHeUVPSUFFaEFBTkFJQXNnRGtZTkJTQUlJQUFvQWdCR0JFQWdBQ0FETmdJQUN5QUxRUUZxSVFzZ0FFRUVhaUVBREFBTEFBc2dBaUFBT3dFQUlBY2dBRUVIYkVFQ2RHb2lBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJRElBTW9BZ0FnQ1dvMkFnQWdCQ0FBUVlDQTBBQnFJZ01vQWdCSUJFQWdBeUFFTmdJQUN5QUFRWXlBMEFCcUlBazJBZ0FNQlFzZ0EwRUJUZ1JBSUFJZ0F6c0JBQ0FISUFoQkIyeEJBblJxSWdCQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBQkIrUC9QQUdvaUF5QURLQUlBSUFScU5nSUFJQUJCL1AvUEFHb2lBeUFES0FJQUlBbHFOZ0lBSUFRZ0FFR0VnTkFBYWlJREtBSUFTZ1JBSUFNZ0JEWUNBQXNnQUVHTWdOQUFhaUFKTmdJQURBVUxJQUpCQW1zdkFRQWlBRUVRZEVFUWRTSURRUUZPQkVBZ0FpQURPd0VBSUFjZ0FFRWNiR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSURJQU1vQWdBZ0NXbzJBZ0FnQUVHRWdOQUFhaUlBS0FJQUlBUk9EUVVnQUNBRU5nSUFEQVVMSUFWQmdJQUNUZ1JBUVFCQkEwR0FDVUVBRURoQmZ5RUREQWtMSUFJZ0JVRUJhaUlBT3dFQUlBY2dCVUVDZEdwQmtJRElBR29nQUVFUWRFRVFkVFlDQUNBSElBVkJIR3hxSWdOQmxJRFFBR29nQkRZQ0FDQURRWkNBMEFCcVFRRTJBZ0FnQTBHWWdOQUFhaUFKTmdJQUlBTkJuSURRQUdvZ0JEWUNBQ0FEUWFDQTBBQnFJQVEyQWdBZ0EwR2tnTkFBYWlBSk5nSUFJQU5CcUlEUUFHb2dDVFlDQUNBQUlRVU1CQXNnQWtFQU93RUFEQU1MSUFKQkJHb2hBaUFRUVFKcUlRd2dDVUVCYWlFSkRBVUxJQWNnQTBFUWRFRVFkVUVjYkdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDV28yQWdBTUFRc2dCeUFEUVJCMFFSQjFRUnhzYWlJQVFZeUEwQUJxSUFrMkFnQWdBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJQUlBQW9BZ0FnQ1dvMkFnQUxJQUpCQW1vaEFpQU1RUUZxSVF3Z0JFRUJhaUVFREFBTEFBc0xJQVZCQUNBRlFRQktHeUlEUVFGcUlRVkJBU0VBUVFFaEFnTkFJQUFnQlVjRVFBSkFJQUFnQVNnQ0FDSUVSZ1JBSUFJaUJFRUJhaUVDREFFTElBUkJBblFnQjJwQmpJRElBR29vQWdBaEJBc2dBU0FFTmdJQUlBRkJCR29oQVNBQVFRRnFJUUFNQVFzTElBY2dBa0VCYXlJQU5nSUlRUUFnQUVVTkFScEJBQ0VFSUFkQkRHcEJBQ0FBUVFKMEVEc2FJQWRCa0lBb2FrRUFJQUJCQkhRUU94b2dBRUVBSUFCQkFFb2JJUVVnQjBHTWdBaHFJUUZCQUNFQUEwQWdBQ0FGUmdSQUlBZEJrSUFvYWlFQkEwQWdBeUFFUmdSQVFRQWhBeUFIS0FJSUlnQkJBQ0FBUVFCS0d5RUNJQWRCa0lBb2FpRUJRUUFoQUFOQUlBQWdBa1lOQlNBQklBQkJCSFFpQkdvaUJTQUZLd01BSUFjZ0FFRUNkR29vQWd5M0loYWpPUU1BSUFFZ0JFRUljbW9pQkNBRUt3TUFJQmFqT1FNQUlBQkJBV29oQUF3QUN3QUxJQWNnQnlBRVFRSjBha0dRZ01nQWFpZ0NBRUVCYXlJQ1FRSjBJZ1ZxSWdBZ0FDZ0NEQ0FISUFSQkIyeEJBblJxSWdCQmtJRFFBR29vQWdCcU5nSU1JQUVnQWtFRWRDSUNhaUlHSUFZckF3QWdBRUdVZ05BQWFpZ0NBTGVnT1FNQUlBRWdBa0VJY21vaUJpQUdLd01BSUFCQm1JRFFBR29vQWdDM29Ea0RBQ0FBUVp5QTBBQnFLQUlBSWdZZ0FpQUhha0dNZ0FocUlnSW9BZ0JJQkVBZ0FpQUdOZ0lBQ3lBQVFhQ0EwQUJxS0FJQUlnWWdCeUFGUVFKMElnSkJCSEpxUVl5QUNHb2lCU2dDQUVvRVFDQUZJQVkyQWdBTElBQkJwSURRQUdvb0FnQWlCU0FISUFKQkNISnFRWXlBQ0dvaUJpZ0NBRWdFUUNBR0lBVTJBZ0FMSUFCQnFJRFFBR29vQWdBaUFDQUhJQUpCREhKcVFZeUFDR29pQWlnQ0FFb0VRQ0FDSUFBMkFnQUxJQVJCQVdvaEJBd0FDd0FGSUFFZ0FFRUVkQ0lDYWlBR05nSUFJQUVnQWtFRWNtcEJBRFlDQUNBQklBSkJDSEpxSUE4MkFnQWdBU0FDUVF4eWFrRUFOZ0lBSUFCQkFXb2hBQXdCQ3dBTEFBc2dBd3NQQ3dKL0lBQWhCaUFGSVE4Z0FTSUlRUUp0SWd0QkFDQUxRUUJLR3lFRklBY29BZ0FpQXlBQ1FRSnRJZzFCQVdzaUFTQUxiRUVCZEdvaEJFRUFJUUFnQXlFQ0EwQWdBQ0FGUndSQUlBUkJBRHNCQUNBQ1FRQTdBUUFnQUVFQmFpRUFJQUpCQW1vaEFpQUVRUUpxSVFRTUFRc0xJQTFCQUNBTlFRQktHeUVLSUFNZ0MwRUJheUlGUVFGMGFpRUVRUUFoQUNBRElRSURRQ0FBSUFwSEJFQWdCRUVBT3dFQUlBSkJBRHNCQUNBQVFRRnFJUUFnQkNBTFFRRjBJZ2xxSVFRZ0FpQUphaUVDREFFTEN5QUJRUUVnQVVFQlNoc2hFaUFGUVFFZ0JVRUJTaHNoRXlBSFFaQ0F5QUJxSVFFZ0NFRUJkQ0FHYWtFQ2FpRU1JQXRCQVhRZ0EycEJBbW9oQWtFQUlBdHJRUUYwSVJSQkFDRUZRUUVoQ2dKQUEwQWdDaUFTUndSQVFRRWhCQU5BQWtBQ1FBSkFJQVFnRTBjRVFDQVBJQXd0QUFCSUJFQWdBaUFVYWlJQUx3RUFJZ05CRUhSQkVIVWlCa0VCVGdSQUlBSWdCanNCQUNBSElBTkJIR3hxSWdCQmpJRFFBR29nQ2pZQ0FDQUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdBZ0FDZ0NBQ0FLYWpZQ0FBd0ZDeUFBUVFKckx3RUFJZ1pCRUhSQkVIVWhBeUFBTGdFQ0lnQkJBVTRFUUNBRFFRRk9CRUFnQjBHUWdNZ0FhaUlKSUFCQkFuUnFRUVJyS0FJQUlnTWdCa0VDZENBSmFrRUVheWdDQUNJR1NnUkFJQUlnQmpzQkFFRUFJUWtnQlVFQUlBVkJBRW9iSVJBZ0FTRUFBMEFnQ1NBUVJnUkFJQVloQXd3SUN5QURJQUFvQWdCR0JFQWdBQ0FHTmdJQUN5QUpRUUZxSVFrZ0FFRUVhaUVBREFBTEFBc2dBaUFET3dFQUlBTWdCazROQlVFQUlRa2dCVUVBSUFWQkFFb2JJUkFnQVNFQUEwQWdDU0FRUmcwR0lBWWdBQ2dDQUVZRVFDQUFJQU0yQWdBTElBbEJBV29oQ1NBQVFRUnFJUUFNQUFzQUN5QUNRUUpyTGdFQUlnWkJBVTRFUUNBSFFaQ0F5QUJxSWdrZ0FFRUNkR3BCQkdzb0FnQWlBeUFHUWYvL0EzRkJBblFnQ1dwQkJHc29BZ0FpQmtvRVFDQUNJQVk3QVFCQkFDRUpJQVZCQUNBRlFRQktHeUVRSUFFaEFBTkFJQWtnRUVZRVFDQUdJUU1NQndzZ0F5QUFLQUlBUmdSQUlBQWdCallDQUFzZ0NVRUJhaUVKSUFCQkJHb2hBQXdBQ3dBTElBSWdBenNCQUNBRElBWk9EUVJCQUNFSklBVkJBQ0FGUVFCS0d5RVFJQUVoQUFOQUlBa2dFRVlOQlNBR0lBQW9BZ0JHQkVBZ0FDQUROZ0lBQ3lBSlFRRnFJUWtnQUVFRWFpRUFEQUFMQUFzZ0FpQUFPd0VBSUFjZ0FFRUhiRUVDZEdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDbW8yQWdBZ0JDQUFRWUNBMEFCcUlnTW9BZ0JJQkVBZ0F5QUVOZ0lBQ3lBQVFZeUEwQUJxSUFvMkFnQU1CUXNnQTBFQlRnUkFJQUlnQXpzQkFDQUhJQVpCQjJ4QkFuUnFJZ0JCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQXlBREtBSUFJQVJxTmdJQUlBQkIvUC9QQUdvaUF5QURLQUlBSUFwcU5nSUFJQVFnQUVHRWdOQUFhaUlES0FJQVNnUkFJQU1nQkRZQ0FBc2dBRUdNZ05BQWFpQUtOZ0lBREFVTElBSkJBbXN2QVFBaUFFRVFkRUVRZFNJRFFRRk9CRUFnQWlBRE93RUFJQWNnQUVFY2JHb2lBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJRElBTW9BZ0FnQ21vMkFnQWdBRUdFZ05BQWFpSUFLQUlBSUFST0RRVWdBQ0FFTmdJQURBVUxJQVZCZ0lBQ1RnUkFRUUJCQTBIZ0NFRUFFRGhCZnlFRERBa0xJQUlnQlVFQmFpSUFPd0VBSUFjZ0JVRUNkR3BCa0lESUFHb2dBRUVRZEVFUWRUWUNBQ0FISUFWQkhHeHFJZ05CbElEUUFHb2dCRFlDQUNBRFFaQ0EwQUJxUVFFMkFnQWdBMEdZZ05BQWFpQUtOZ0lBSUFOQm5JRFFBR29nQkRZQ0FDQURRYUNBMEFCcUlBUTJBZ0FnQTBHa2dOQUFhaUFLTmdJQUlBTkJxSURRQUdvZ0NqWUNBQ0FBSVFVTUJBc2dBa0VBT3dFQURBTUxJQUpCQkdvaEFpQUtRUUZxSVFvZ0NDQU1ha0VFYWlFTURBVUxJQWNnQTBFUWRFRVFkVUVjYkdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTUFRc2dCeUFEUVJCMFFSQjFRUnhzYWlJQVFZeUEwQUJxSUFvMkFnQWdBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJQUlBQW9BZ0FnQ21vMkFnQUxJQUpCQW1vaEFpQU1RUUpxSVF3Z0JFRUJhaUVFREFBTEFBc0xJQVZCQUNBRlFRQktHeUlEUVFGcUlRVkJBU0VBUVFFaEFnTkFJQUFnQlVjRVFBSkFJQUFnQVNnQ0FDSUVSZ1JBSUFJaUJFRUJhaUVDREFFTElBUkJBblFnQjJwQmpJRElBR29vQWdBaEJBc2dBU0FFTmdJQUlBRkJCR29oQVNBQVFRRnFJUUFNQVFzTElBY2dBa0VCYXlJQU5nSUlRUUFnQUVVTkFScEJBQ0VFSUFkQkRHcEJBQ0FBUVFKMEVEc2FJQWRCa0lBb2FrRUFJQUJCQkhRUU94b2dBRUVBSUFCQkFFb2JJUVVnQjBHTWdBaHFJUUZCQUNFQUEwQWdBQ0FGUmdSQUlBZEJrSUFvYWlFQkEwQWdBeUFFUmdSQVFRQWhBeUFIS0FJSUlnQkJBQ0FBUVFCS0d5RUNJQWRCa0lBb2FpRUJRUUFoQUFOQUlBQWdBa1lOQlNBQklBQkJCSFFpQkdvaUJTQUZLd01BSUFjZ0FFRUNkR29vQWd5M0loYWpPUU1BSUFFZ0JFRUljbW9pQkNBRUt3TUFJQmFqT1FNQUlBQkJBV29oQUF3QUN3QUxJQWNnQnlBRVFRSjBha0dRZ01nQWFpZ0NBRUVCYXlJQ1FRSjBJZ1ZxSWdBZ0FDZ0NEQ0FISUFSQkIyeEJBblJxSWdCQmtJRFFBR29vQWdCcU5nSU1JQUVnQWtFRWRDSUNhaUlHSUFZckF3QWdBRUdVZ05BQWFpZ0NBTGVnT1FNQUlBRWdBa0VJY21vaUJpQUdLd01BSUFCQm1JRFFBR29vQWdDM29Ea0RBQ0FBUVp5QTBBQnFLQUlBSWdZZ0FpQUhha0dNZ0FocUlnSW9BZ0JJQkVBZ0FpQUdOZ0lBQ3lBQVFhQ0EwQUJxS0FJQUlnWWdCeUFGUVFKMElnSkJCSEpxUVl5QUNHb2lCU2dDQUVvRVFDQUZJQVkyQWdBTElBQkJwSURRQUdvb0FnQWlCU0FISUFKQkNISnFRWXlBQ0dvaUJpZ0NBRWdFUUNBR0lBVTJBZ0FMSUFCQnFJRFFBR29vQWdBaUFDQUhJQUpCREhKcVFZeUFDR29pQWlnQ0FFb0VRQ0FDSUFBMkFnQUxJQVJCQVdvaEJBd0FDd0FGSUFFZ0FFRUVkQ0lDYWlBTE5nSUFJQUVnQWtFRWNtcEJBRFlDQUNBQklBSkJDSEpxSUEwMkFnQWdBU0FDUVF4eWFrRUFOZ0lBSUFCQkFXb2hBQXdCQ3dBTEFBc2dBd3NQQ3lBRVFRRkdCRUFnQ0FSQUFuOGdBQ0VGUVFBaEFDQUJJZ1pCQUNBQlFRQktHeUVLSUFjb0FnQWlBeUFCSUFJaUQwRUJheUlCYkVFQmRHb2hCQ0FESVFJRFFDQUFJQXBIQkVBZ0JFRUFPd0VBSUFKQkFEc0JBQ0FBUVFGcUlRQWdBa0VDYWlFQ0lBUkJBbW9oQkF3QkN3c2dEMEVBSUE5QkFFb2JJUWtnQXlBR1FRRnJJZ3BCQVhScUlRUkJBQ0VBSUFNaEFnTkFJQUFnQ1VjRVFDQUVRUUE3QVFBZ0FrRUFPd0VBSUFCQkFXb2hBQ0FFSUFaQkFYUWlDMm9oQkNBQ0lBdHFJUUlNQVFzTElBRkJBU0FCUVFGS0d5RVRJQWRCa0lESUFHb2hBU0FJSUFaQkFXb2lBR29oRFNBQUlBVnFJUXNnQnlnQ0JDQUFhaUVNSUFwQkFTQUtRUUZLR3lJVVFRRnJJUklnQXlBQVFRRjBhaUVDUVFBZ0JtdEJBWFFoRUVFQUlRVkJBU0VLQWtBRFFDQUtJQk5IQkVBZ0N5QVNhaUVPSUEwZ0Vtb2hFVUVCSVFRRFFBSkFBa0FDUUNBRUlCUkhCRUFnQ3kwQUFDQU5MUUFBVFFSQUlBeEIvd0U2QUFBZ0FpQVFhaUlBTHdFQUlnTkJFSFJCRUhVaUNFRUJUZ1JBSUFJZ0NEc0JBQ0FISUFOQkhHeHFJZ0JCaklEUUFHb2dDallDQUNBQVFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUFRZmovendCcUlnTWdBeWdDQUNBRWFqWUNBQ0FBUWZ6L3p3QnFJZ0FnQUNnQ0FDQUthallDQUF3RkN5QUFRUUpyTHdFQUlnaEJFSFJCRUhVaEF5QUFMZ0VDSWdCQkFVNEVRQ0FEUVFGT0JFQWdCMEdRZ01nQWFpSUpJQUJCQW5ScVFRUnJLQUlBSWdNZ0NFRUNkQ0FKYWtFRWF5Z0NBQ0lJU2dSQUlBSWdDRHNCQUVFQUlRa2dCVUVBSUFWQkFFb2JJUlVnQVNFQUEwQWdDU0FWUmdSQUlBZ2hBd3dJQ3lBRElBQW9BZ0JHQkVBZ0FDQUlOZ0lBQ3lBSlFRRnFJUWtnQUVFRWFpRUFEQUFMQUFzZ0FpQURPd0VBSUFNZ0NFNE5CVUVBSVFrZ0JVRUFJQVZCQUVvYklSVWdBU0VBQTBBZ0NTQVZSZzBHSUFnZ0FDZ0NBRVlFUUNBQUlBTTJBZ0FMSUFsQkFXb2hDU0FBUVFScUlRQU1BQXNBQ3lBQ1FRSnJMZ0VBSWdoQkFVNEVRQ0FIUVpDQXlBQnFJZ2tnQUVFQ2RHcEJCR3NvQWdBaUF5QUlRZi8vQTNGQkFuUWdDV3BCQkdzb0FnQWlDRW9FUUNBQ0lBZzdBUUJCQUNFSklBVkJBQ0FGUVFCS0d5RVZJQUVoQUFOQUlBa2dGVVlFUUNBSUlRTU1Cd3NnQXlBQUtBSUFSZ1JBSUFBZ0NEWUNBQXNnQ1VFQmFpRUpJQUJCQkdvaEFBd0FDd0FMSUFJZ0F6c0JBQ0FESUFoT0RRUkJBQ0VKSUFWQkFDQUZRUUJLR3lFVklBRWhBQU5BSUFrZ0ZVWU5CU0FJSUFBb0FnQkdCRUFnQUNBRE5nSUFDeUFKUVFGcUlRa2dBRUVFYWlFQURBQUxBQXNnQWlBQU93RUFJQWNnQUVFSGJFRUNkR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSURJQU1vQWdBZ0NtbzJBZ0FnQkNBQVFZQ0EwQUJxSWdNb0FnQklCRUFnQXlBRU5nSUFDeUFBUVl5QTBBQnFJQW8yQWdBTUJRc2dBMEVCVGdSQUlBSWdBenNCQUNBSElBaEJCMnhCQW5ScUlnQkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQUJCK1AvUEFHb2lBeUFES0FJQUlBUnFOZ0lBSUFCQi9QL1BBR29pQXlBREtBSUFJQXBxTmdJQUlBUWdBRUdFZ05BQWFpSURLQUlBU2dSQUlBTWdCRFlDQUFzZ0FFR01nTkFBYWlBS05nSUFEQVVMSUFKQkFtc3ZBUUFpQUVFUWRFRVFkU0lEUVFGT0JFQWdBaUFET3dFQUlBY2dBRUVjYkdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDbW8yQWdBZ0FFR0VnTkFBYWlJQUtBSUFJQVJPRFFVZ0FDQUVOZ0lBREFVTElBVkJnSUFDVGdSQVFRQkJBMEdBQ2tFQUVEaEJmeUVMREFrTElBSWdCVUVCYWlJQU93RUFJQWNnQlVFQ2RHcEJrSURJQUdvZ0FFRVFkRUVRZFRZQ0FDQUhJQVZCSEd4cUlnTkJsSURRQUdvZ0JEWUNBQ0FEUVpDQTBBQnFRUUUyQWdBZ0EwR1lnTkFBYWlBS05nSUFJQU5CbklEUUFHb2dCRFlDQUNBRFFhQ0EwQUJxSUFRMkFnQWdBMEdrZ05BQWFpQUtOZ0lBSUFOQnFJRFFBR29nQ2pZQ0FDQUFJUVVNQkFzZ0FrRUFPd0VBSUF4QkFEb0FBQXdEQ3lBTVFRSnFJUXdnQWtFRWFpRUNJQkZCQW1vaERTQU9RUUpxSVFzZ0NrRUJhaUVLREFVTElBY2dBMEVRZEVFUWRVRWNiR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSUFJQUFvQWdBZ0NtbzJBZ0FNQVFzZ0J5QURRUkIwUVJCMVFSeHNhaUlBUVl5QTBBQnFJQW8yQWdBZ0FFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDbW8yQWdBTElBeEJBV29oRENBQ1FRSnFJUUlnRFVFQmFpRU5JQXRCQVdvaEN5QUVRUUZxSVFRTUFBc0FDd3NnQlVFQUlBVkJBRW9iSWdOQkFXb2hCVUVCSVFCQkFTRUNBMEFnQUNBRlJ3UkFBa0FnQUNBQktBSUFJZ1JHQkVBZ0FpSUVRUUZxSVFJTUFRc2dCRUVDZENBSGFrR01nTWdBYWlnQ0FDRUVDeUFCSUFRMkFnQWdBVUVFYWlFQklBQkJBV29oQUF3QkN3c2dCeUFDUVFGcklnQTJBZ2hCQUNBQVJRMEJHa0VBSVFRZ0IwRU1ha0VBSUFCQkFuUVFPeG9nQjBHUWdDaHFRUUFnQUVFRWRCQTdHaUFBUVFBZ0FFRUFTaHNoQlNBSFFZeUFDR29oQVVFQUlRQURRQ0FBSUFWR0JFQWdCMEdRZ0NocUlRRURRQ0FESUFSR0JFQkJBQ0VMSUFjb0FnZ2lBRUVBSUFCQkFFb2JJUUlnQjBHUWdDaHFJUUZCQUNFQUEwQWdBQ0FDUmcwRklBRWdBRUVFZENJRGFpSUVJQVFyQXdBZ0J5QUFRUUowYWlnQ0RMY2lGcU01QXdBZ0FTQURRUWh5YWlJRElBTXJBd0FnRnFNNUF3QWdBRUVCYWlFQURBQUxBQXNnQnlBSElBUkJBblJxUVpDQXlBQnFLQUlBUVFGcklnSkJBblFpQldvaUFDQUFLQUlNSUFjZ0JFRUhiRUVDZEdvaUFFR1FnTkFBYWlnQ0FHbzJBZ3dnQVNBQ1FRUjBJZ0pxSWdZZ0Jpc0RBQ0FBUVpTQTBBQnFLQUlBdDZBNUF3QWdBU0FDUVFoeWFpSUdJQVlyQXdBZ0FFR1lnTkFBYWlnQ0FMZWdPUU1BSUFCQm5JRFFBR29vQWdBaUJpQUNJQWRxUVl5QUNHb2lBaWdDQUVnRVFDQUNJQVkyQWdBTElBQkJvSURRQUdvb0FnQWlCaUFISUFWQkFuUWlBa0VFY21wQmpJQUlhaUlGS0FJQVNnUkFJQVVnQmpZQ0FBc2dBRUdrZ05BQWFpZ0NBQ0lGSUFjZ0FrRUljbXBCaklBSWFpSUdLQUlBU0FSQUlBWWdCVFlDQUFzZ0FFR29nTkFBYWlnQ0FDSUFJQWNnQWtFTWNtcEJqSUFJYWlJQ0tBSUFTZ1JBSUFJZ0FEWUNBQXNnQkVFQmFpRUVEQUFMQUFVZ0FTQUFRUVIwSWdKcUlBWTJBZ0FnQVNBQ1FRUnlha0VBTmdJQUlBRWdBa0VJY21vZ0R6WUNBQ0FCSUFKQkRISnFRUUEyQWdBZ0FFRUJhaUVBREFFTEFBc0FDeUFMQ3c4TElBWkZCRUFDZnlBQUlRZ2dCU0VLUVFBaEFDQUJJZ1pCQUNBQlFRQktHeUVGSUFjb0FnQWlBeUFCSUFJaUQwRUJheUlCYkVFQmRHb2hCQ0FESVFJRFFDQUFJQVZIQkVBZ0JFRUFPd0VBSUFKQkFEc0JBQ0FBUVFGcUlRQWdBa0VDYWlFQ0lBUkJBbW9oQkF3QkN3c2dEMEVBSUE5QkFFb2JJUWtnQXlBR1FRRnJJZ1ZCQVhScUlRUkJBQ0VBSUFNaEFnTkFJQUFnQ1VjRVFDQUVRUUE3QVFBZ0FrRUFPd0VBSUFCQkFXb2hBQ0FFSUFaQkFYUWlDMm9oQkNBQ0lBdHFJUUlNQVFzTElBRkJBU0FCUVFGS0d5RVNJQWRCa0lESUFHb2hBU0FJSUFaQkFXb2lBR29oRFNBSEtBSUVJQUJxSVF3Z0JVRUJJQVZCQVVvYkloTkJBV3NoRkNBRElBQkJBWFJxSVFKQkFDQUdhMEVCZENFUVFRQWhCVUVCSVFrQ1FBTkFJQWtnRWtjRVFDQU5JQlJxSVE1QkFTRUVBMEFDUUFKQUFrQWdCQ0FUUndSQUlBb2dEUzBBQUU0RVFDQU1RZjhCT2dBQUlBSWdFR29pQUM4QkFDSURRUkIwUVJCMUlnaEJBVTRFUUNBQ0lBZzdBUUFnQnlBRFFSeHNhaUlBUVl5QTBBQnFJQWsyQWdBZ0FFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDV28yQWdBTUJRc2dBRUVDYXk4QkFDSUlRUkIwUVJCMUlRTWdBQzRCQWlJQVFRRk9CRUFnQTBFQlRnUkFJQWRCa0lESUFHb2lDeUFBUVFKMGFrRUVheWdDQUNJRElBaEJBblFnQzJwQkJHc29BZ0FpQ0VvRVFDQUNJQWc3QVFCQkFDRUxJQVZCQUNBRlFRQktHeUVSSUFFaEFBTkFJQXNnRVVZRVFDQUlJUU1NQ0FzZ0F5QUFLQUlBUmdSQUlBQWdDRFlDQUFzZ0MwRUJhaUVMSUFCQkJHb2hBQXdBQ3dBTElBSWdBenNCQUNBRElBaE9EUVZCQUNFTElBVkJBQ0FGUVFCS0d5RVJJQUVoQUFOQUlBc2dFVVlOQmlBSUlBQW9BZ0JHQkVBZ0FDQUROZ0lBQ3lBTFFRRnFJUXNnQUVFRWFpRUFEQUFMQUFzZ0FrRUNheTRCQUNJSVFRRk9CRUFnQjBHUWdNZ0FhaUlMSUFCQkFuUnFRUVJyS0FJQUlnTWdDRUgvL3dOeFFRSjBJQXRxUVFScktBSUFJZ2hLQkVBZ0FpQUlPd0VBUVFBaEN5QUZRUUFnQlVFQVNoc2hFU0FCSVFBRFFDQUxJQkZHQkVBZ0NDRUREQWNMSUFNZ0FDZ0NBRVlFUUNBQUlBZzJBZ0FMSUF0QkFXb2hDeUFBUVFScUlRQU1BQXNBQ3lBQ0lBTTdBUUFnQXlBSVRnMEVRUUFoQ3lBRlFRQWdCVUVBU2hzaEVTQUJJUUFEUUNBTElCRkdEUVVnQ0NBQUtBSUFSZ1JBSUFBZ0F6WUNBQXNnQzBFQmFpRUxJQUJCQkdvaEFBd0FDd0FMSUFJZ0FEc0JBQ0FISUFCQkIyeEJBblJxSWdCQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBQkIrUC9QQUdvaUF5QURLQUlBSUFScU5nSUFJQUJCL1AvUEFHb2lBeUFES0FJQUlBbHFOZ0lBSUFRZ0FFR0FnTkFBYWlJREtBSUFTQVJBSUFNZ0JEWUNBQXNnQUVHTWdOQUFhaUFKTmdJQURBVUxJQU5CQVU0RVFDQUNJQU03QVFBZ0J5QUlRUWRzUVFKMGFpSUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdNZ0F5Z0NBQ0FKYWpZQ0FDQUVJQUJCaElEUUFHb2lBeWdDQUVvRVFDQURJQVEyQWdBTElBQkJqSURRQUdvZ0NUWUNBQXdGQ3lBQ1FRSnJMd0VBSWdCQkVIUkJFSFVpQTBFQlRnUkFJQUlnQXpzQkFDQUhJQUJCSEd4cUlnQkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQUJCK1AvUEFHb2lBeUFES0FJQUlBUnFOZ0lBSUFCQi9QL1BBR29pQXlBREtBSUFJQWxxTmdJQUlBQkJoSURRQUdvaUFDZ0NBQ0FFVGcwRklBQWdCRFlDQUF3RkN5QUZRWUNBQWs0RVFFRUFRUU5CNEFsQkFCQTRRWDhoREF3SkN5QUNJQVZCQVdvaUFEc0JBQ0FISUFWQkFuUnFRWkNBeUFCcUlBQkJFSFJCRUhVMkFnQWdCeUFGUVJ4c2FpSURRWlNBMEFCcUlBUTJBZ0FnQTBHUWdOQUFha0VCTmdJQUlBTkJtSURRQUdvZ0NUWUNBQ0FEUVp5QTBBQnFJQVEyQWdBZ0EwR2dnTkFBYWlBRU5nSUFJQU5CcElEUUFHb2dDVFlDQUNBRFFhaUEwQUJxSUFrMkFnQWdBQ0VGREFRTElBSkJBRHNCQUNBTVFRQTZBQUFNQXdzZ0RFRUNhaUVNSUFKQkJHb2hBaUFPUVFKcUlRMGdDVUVCYWlFSkRBVUxJQWNnQTBFUWRFRVFkVUVjYkdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlBSUFBb0FnQWdDV28yQWdBTUFRc2dCeUFEUVJCMFFSQjFRUnhzYWlJQVFZeUEwQUJxSUFrMkFnQWdBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJQUlBQW9BZ0FnQ1dvMkFnQUxJQXhCQVdvaERDQUNRUUpxSVFJZ0RVRUJhaUVOSUFSQkFXb2hCQXdBQ3dBTEN5QUZRUUFnQlVFQVNoc2lBMEVCYWlFRlFRRWhBRUVCSVFJRFFDQUFJQVZIQkVBQ1FDQUFJQUVvQWdBaUJFWUVRQ0FDSWdSQkFXb2hBZ3dCQ3lBRVFRSjBJQWRxUVl5QXlBQnFLQUlBSVFRTElBRWdCRFlDQUNBQlFRUnFJUUVnQUVFQmFpRUFEQUVMQ3lBSElBSkJBV3NpQURZQ0NFRUFJQUJGRFFFYVFRQWhCQ0FIUVF4cVFRQWdBRUVDZEJBN0dpQUhRWkNBS0dwQkFDQUFRUVIwRURzYUlBQkJBQ0FBUVFCS0d5RUZJQWRCaklBSWFpRUJRUUFoQUFOQUlBQWdCVVlFUUNBSFFaQ0FLR29oQVFOQUlBTWdCRVlFUUVFQUlRd2dCeWdDQ0NJQVFRQWdBRUVBU2hzaEFpQUhRWkNBS0dvaEFVRUFJUUFEUUNBQUlBSkdEUVVnQVNBQVFRUjBJZ05xSWdRZ0JDc0RBQ0FISUFCQkFuUnFLQUlNdHlJV296a0RBQ0FCSUFOQkNISnFJZ01nQXlzREFDQVdvemtEQUNBQVFRRnFJUUFNQUFzQUN5QUhJQWNnQkVFQ2RHcEJrSURJQUdvb0FnQkJBV3NpQWtFQ2RDSUZhaUlBSUFBb0Fnd2dCeUFFUVFkc1FRSjBhaUlBUVpDQTBBQnFLQUlBYWpZQ0RDQUJJQUpCQkhRaUFtb2lCaUFHS3dNQUlBQkJsSURRQUdvb0FnQzNvRGtEQUNBQklBSkJDSEpxSWdZZ0Jpc0RBQ0FBUVppQTBBQnFLQUlBdDZBNUF3QWdBRUdjZ05BQWFpZ0NBQ0lHSUFJZ0IycEJqSUFJYWlJQ0tBSUFTQVJBSUFJZ0JqWUNBQXNnQUVHZ2dOQUFhaWdDQUNJR0lBY2dCVUVDZENJQ1FRUnlha0dNZ0FocUlnVW9BZ0JLQkVBZ0JTQUdOZ0lBQ3lBQVFhU0EwQUJxS0FJQUlnVWdCeUFDUVFoeWFrR01nQWhxSWdZb0FnQklCRUFnQmlBRk5nSUFDeUFBUWFpQTBBQnFLQUlBSWdBZ0J5QUNRUXh5YWtHTWdBaHFJZ0lvQWdCS0JFQWdBaUFBTmdJQUN5QUVRUUZxSVFRTUFBc0FCU0FCSUFCQkJIUWlBbW9nQmpZQ0FDQUJJQUpCQkhKcVFRQTJBZ0FnQVNBQ1FRaHlhaUFQTmdJQUlBRWdBa0VNY21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNBQ3dBTElBd0xEd3NDZnlBQUlRWWdCU0VQSUFFaUNFRUNiU0lNUVFBZ0RFRUFTaHNoQlNBSEtBSUFJZ01nQWtFQ2JTSVNRUUZySWdFZ0RHeEJBWFJxSVFSQkFDRUFJQU1oQWdOQUlBQWdCVWNFUUNBRVFRQTdBUUFnQWtFQU93RUFJQUJCQVdvaEFDQUNRUUpxSVFJZ0JFRUNhaUVFREFFTEN5QVNRUUFnRWtFQVNoc2hDaUFESUF4QkFXc2lCVUVCZEdvaEJFRUFJUUFnQXlFQ0EwQWdBQ0FLUndSQUlBUkJBRHNCQUNBQ1FRQTdBUUFnQUVFQmFpRUFJQVFnREVFQmRDSUphaUVFSUFJZ0NXb2hBZ3dCQ3dzZ0FVRUJJQUZCQVVvYklSTWdCVUVCSUFWQkFVb2JJUlFnQjBHUWdNZ0FhaUVCSUF4QkFXb2lBQ0FIS0FJRWFpRU5JQWhCQVhRZ0JtcEJBbW9oQ3lBRElBQkJBWFJxSVFKQkFDQU1hMEVCZENFUVFRQWhCVUVCSVFvQ1FBTkFJQW9nRTBjRVFFRUJJUVFEUUFKQUFrQUNRQ0FFSUJSSEJFQWdEeUFMTFFBQVRnUkFJQTFCL3dFNkFBQWdBaUFRYWlJQUx3RUFJZ05CRUhSQkVIVWlCa0VCVGdSQUlBSWdCanNCQUNBSElBTkJIR3hxSWdCQmpJRFFBR29nQ2pZQ0FDQUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdBZ0FDZ0NBQ0FLYWpZQ0FBd0ZDeUFBUVFKckx3RUFJZ1pCRUhSQkVIVWhBeUFBTGdFQ0lnQkJBVTRFUUNBRFFRRk9CRUFnQjBHUWdNZ0FhaUlKSUFCQkFuUnFRUVJyS0FJQUlnTWdCa0VDZENBSmFrRUVheWdDQUNJR1NnUkFJQUlnQmpzQkFFRUFJUWtnQlVFQUlBVkJBRW9iSVE0Z0FTRUFBMEFnQ1NBT1JnUkFJQVloQXd3SUN5QURJQUFvQWdCR0JFQWdBQ0FHTmdJQUN5QUpRUUZxSVFrZ0FFRUVhaUVBREFBTEFBc2dBaUFET3dFQUlBTWdCazROQlVFQUlRa2dCVUVBSUFWQkFFb2JJUTRnQVNFQUEwQWdDU0FPUmcwR0lBWWdBQ2dDQUVZRVFDQUFJQU0yQWdBTElBbEJBV29oQ1NBQVFRUnFJUUFNQUFzQUN5QUNRUUpyTGdFQUlnWkJBVTRFUUNBSFFaQ0F5QUJxSWdrZ0FFRUNkR3BCQkdzb0FnQWlBeUFHUWYvL0EzRkJBblFnQ1dwQkJHc29BZ0FpQmtvRVFDQUNJQVk3QVFCQkFDRUpJQVZCQUNBRlFRQktHeUVPSUFFaEFBTkFJQWtnRGtZRVFDQUdJUU1NQndzZ0F5QUFLQUlBUmdSQUlBQWdCallDQUFzZ0NVRUJhaUVKSUFCQkJHb2hBQXdBQ3dBTElBSWdBenNCQUNBRElBWk9EUVJCQUNFSklBVkJBQ0FGUVFCS0d5RU9JQUVoQUFOQUlBa2dEa1lOQlNBR0lBQW9BZ0JHQkVBZ0FDQUROZ0lBQ3lBSlFRRnFJUWtnQUVFRWFpRUFEQUFMQUFzZ0FpQUFPd0VBSUFjZ0FFRUhiRUVDZEdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDbW8yQWdBZ0JDQUFRWUNBMEFCcUlnTW9BZ0JJQkVBZ0F5QUVOZ0lBQ3lBQVFZeUEwQUJxSUFvMkFnQU1CUXNnQTBFQlRnUkFJQUlnQXpzQkFDQUhJQVpCQjJ4QkFuUnFJZ0JCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQXlBREtBSUFJQVJxTmdJQUlBQkIvUC9QQUdvaUF5QURLQUlBSUFwcU5nSUFJQVFnQUVHRWdOQUFhaUlES0FJQVNnUkFJQU1nQkRZQ0FBc2dBRUdNZ05BQWFpQUtOZ0lBREFVTElBSkJBbXN2QVFBaUFFRVFkRUVRZFNJRFFRRk9CRUFnQWlBRE93RUFJQWNnQUVFY2JHb2lBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJRElBTW9BZ0FnQ21vMkFnQWdBRUdFZ05BQWFpSUFLQUlBSUFST0RRVWdBQ0FFTmdJQURBVUxJQVZCZ0lBQ1RnUkFRUUJCQTBIQUNVRUFFRGhCZnlFTERBa0xJQUlnQlVFQmFpSUFPd0VBSUFjZ0JVRUNkR3BCa0lESUFHb2dBRUVRZEVFUWRUWUNBQ0FISUFWQkhHeHFJZ05CbElEUUFHb2dCRFlDQUNBRFFaQ0EwQUJxUVFFMkFnQWdBMEdZZ05BQWFpQUtOZ0lBSUFOQm5JRFFBR29nQkRZQ0FDQURRYUNBMEFCcUlBUTJBZ0FnQTBHa2dOQUFhaUFLTmdJQUlBTkJxSURRQUdvZ0NqWUNBQ0FBSVFVTUJBc2dBa0VBT3dFQUlBMUJBRG9BQUF3REN5QU5RUUpxSVEwZ0FrRUVhaUVDSUFwQkFXb2hDaUFJSUF0cVFRUnFJUXNNQlFzZ0J5QURRUkIwUVJCMVFSeHNhaUlBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnQWdBQ2dDQUNBS2FqWUNBQXdCQ3lBSElBTkJFSFJCRUhWQkhHeHFJZ0JCaklEUUFHb2dDallDQUNBQVFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUFRZmovendCcUlnTWdBeWdDQUNBRWFqWUNBQ0FBUWZ6L3p3QnFJZ0FnQUNnQ0FDQUthallDQUFzZ0RVRUJhaUVOSUFKQkFtb2hBaUFMUVFKcUlRc2dCRUVCYWlFRURBQUxBQXNMSUFWQkFDQUZRUUJLR3lJRFFRRnFJUVZCQVNFQVFRRWhBZ05BSUFBZ0JVY0VRQUpBSUFBZ0FTZ0NBQ0lFUmdSQUlBSWlCRUVCYWlFQ0RBRUxJQVJCQW5RZ0IycEJqSURJQUdvb0FnQWhCQXNnQVNBRU5nSUFJQUZCQkdvaEFTQUFRUUZxSVFBTUFRc0xJQWNnQWtFQmF5SUFOZ0lJUVFBZ0FFVU5BUnBCQUNFRUlBZEJER3BCQUNBQVFRSjBFRHNhSUFkQmtJQW9ha0VBSUFCQkJIUVFPeG9nQUVFQUlBQkJBRW9iSVFVZ0IwR01nQWhxSVFGQkFDRUFBMEFnQUNBRlJnUkFJQWRCa0lBb2FpRUJBMEFnQXlBRVJnUkFRUUFoQ3lBSEtBSUlJZ0JCQUNBQVFRQktHeUVDSUFkQmtJQW9haUVCUVFBaEFBTkFJQUFnQWtZTkJTQUJJQUJCQkhRaUEyb2lCQ0FFS3dNQUlBY2dBRUVDZEdvb0FneTNJaGFqT1FNQUlBRWdBMEVJY21vaUF5QURLd01BSUJhak9RTUFJQUJCQVdvaEFBd0FDd0FMSUFjZ0J5QUVRUUowYWtHUWdNZ0FhaWdDQUVFQmF5SUNRUUowSWdWcUlnQWdBQ2dDRENBSElBUkJCMnhCQW5ScUlnQkJrSURRQUdvb0FnQnFOZ0lNSUFFZ0FrRUVkQ0lDYWlJR0lBWXJBd0FnQUVHVWdOQUFhaWdDQUxlZ09RTUFJQUVnQWtFSWNtb2lCaUFHS3dNQUlBQkJtSURRQUdvb0FnQzNvRGtEQUNBQVFaeUEwQUJxS0FJQUlnWWdBaUFIYWtHTWdBaHFJZ0lvQWdCSUJFQWdBaUFHTmdJQUN5QUFRYUNBMEFCcUtBSUFJZ1lnQnlBRlFRSjBJZ0pCQkhKcVFZeUFDR29pQlNnQ0FFb0VRQ0FGSUFZMkFnQUxJQUJCcElEUUFHb29BZ0FpQlNBSElBSkJDSEpxUVl5QUNHb2lCaWdDQUVnRVFDQUdJQVUyQWdBTElBQkJxSURRQUdvb0FnQWlBQ0FISUFKQkRISnFRWXlBQ0dvaUFpZ0NBRW9FUUNBQ0lBQTJBZ0FMSUFSQkFXb2hCQXdBQ3dBRklBRWdBRUVFZENJQ2FpQU1OZ0lBSUFFZ0FrRUVjbXBCQURZQ0FDQUJJQUpCQ0hKcUlCSTJBZ0FnQVNBQ1FReHlha0VBTmdJQUlBQkJBV29oQUF3QkN3QUxBQXNnQ3dzUEN5QUlCRUFDZnlBQUlRVkJBQ0VBSUFFaUJrRUFJQUZCQUVvYklRb2dCeWdDQUNJRElBRWdBaUlQUVFGcklnRnNRUUYwYWlFRUlBTWhBZ05BSUFBZ0NrY0VRQ0FFUVFBN0FRQWdBa0VBT3dFQUlBQkJBV29oQUNBQ1FRSnFJUUlnQkVFQ2FpRUVEQUVMQ3lBUFFRQWdEMEVBU2hzaENTQURJQVpCQVdzaUNrRUJkR29oQkVFQUlRQWdBeUVDQTBBZ0FDQUpSd1JBSUFSQkFEc0JBQ0FDUVFBN0FRQWdBRUVCYWlFQUlBUWdCa0VCZENJTGFpRUVJQUlnQzJvaEFnd0JDd3NnQVVFQklBRkJBVW9iSVJNZ0IwR1FnTWdBYWlFQklBZ2dCa0VCYWlJQWFpRU5JQUFnQldvaEN5QUhLQUlFSUFCcUlRd2dDa0VCSUFwQkFVb2JJaFJCQVdzaEVpQURJQUJCQVhScUlRSkJBQ0FHYTBFQmRDRVFRUUFoQlVFQklRb0NRQU5BSUFvZ0UwY0VRQ0FMSUJKcUlRNGdEU0FTYWlFUlFRRWhCQU5BQWtBQ1FBSkFJQVFnRkVjRVFDQUxMUUFBSUEwdEFBQkxCRUFnREVIL0FUb0FBQ0FDSUJCcUlnQXZBUUFpQTBFUWRFRVFkU0lJUVFGT0JFQWdBaUFJT3dFQUlBY2dBMEVjYkdvaUFFR01nTkFBYWlBS05nSUFJQUJCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQXlBREtBSUFJQVJxTmdJQUlBQkIvUC9QQUdvaUFDQUFLQUlBSUFwcU5nSUFEQVVMSUFCQkFtc3ZBUUFpQ0VFUWRFRVFkU0VESUFBdUFRSWlBRUVCVGdSQUlBTkJBVTRFUUNBSFFaQ0F5QUJxSWdrZ0FFRUNkR3BCQkdzb0FnQWlBeUFJUVFKMElBbHFRUVJyS0FJQUlnaEtCRUFnQWlBSU93RUFRUUFoQ1NBRlFRQWdCVUVBU2hzaEZTQUJJUUFEUUNBSklCVkdCRUFnQ0NFRERBZ0xJQU1nQUNnQ0FFWUVRQ0FBSUFnMkFnQUxJQWxCQVdvaENTQUFRUVJxSVFBTUFBc0FDeUFDSUFNN0FRQWdBeUFJVGcwRlFRQWhDU0FGUVFBZ0JVRUFTaHNoRlNBQklRQURRQ0FKSUJWR0RRWWdDQ0FBS0FJQVJnUkFJQUFnQXpZQ0FBc2dDVUVCYWlFSklBQkJCR29oQUF3QUN3QUxJQUpCQW1zdUFRQWlDRUVCVGdSQUlBZEJrSURJQUdvaUNTQUFRUUowYWtFRWF5Z0NBQ0lESUFoQi8vOERjVUVDZENBSmFrRUVheWdDQUNJSVNnUkFJQUlnQ0RzQkFFRUFJUWtnQlVFQUlBVkJBRW9iSVJVZ0FTRUFBMEFnQ1NBVlJnUkFJQWdoQXd3SEN5QURJQUFvQWdCR0JFQWdBQ0FJTmdJQUN5QUpRUUZxSVFrZ0FFRUVhaUVBREFBTEFBc2dBaUFET3dFQUlBTWdDRTROQkVFQUlRa2dCVUVBSUFWQkFFb2JJUlVnQVNFQUEwQWdDU0FWUmcwRklBZ2dBQ2dDQUVZRVFDQUFJQU0yQWdBTElBbEJBV29oQ1NBQVFRUnFJUUFNQUFzQUN5QUNJQUE3QVFBZ0J5QUFRUWRzUVFKMGFpSUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdNZ0F5Z0NBQ0FLYWpZQ0FDQUVJQUJCZ0lEUUFHb2lBeWdDQUVnRVFDQURJQVEyQWdBTElBQkJqSURRQUdvZ0NqWUNBQXdGQ3lBRFFRRk9CRUFnQWlBRE93RUFJQWNnQ0VFSGJFRUNkR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSURJQU1vQWdBZ0NtbzJBZ0FnQkNBQVFZU0EwQUJxSWdNb0FnQktCRUFnQXlBRU5nSUFDeUFBUVl5QTBBQnFJQW8yQWdBTUJRc2dBa0VDYXk4QkFDSUFRUkIwUVJCMUlnTkJBVTRFUUNBQ0lBTTdBUUFnQnlBQVFSeHNhaUlBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnTWdBeWdDQUNBS2FqWUNBQ0FBUVlTQTBBQnFJZ0FvQWdBZ0JFNE5CU0FBSUFRMkFnQU1CUXNnQlVHQWdBSk9CRUJCQUVFRFFlQUtRUUFRT0VGL0lRc01DUXNnQWlBRlFRRnFJZ0E3QVFBZ0J5QUZRUUowYWtHUWdNZ0FhaUFBUVJCMFFSQjFOZ0lBSUFjZ0JVRWNiR29pQTBHVWdOQUFhaUFFTmdJQUlBTkJrSURRQUdwQkFUWUNBQ0FEUVppQTBBQnFJQW8yQWdBZ0EwR2NnTkFBYWlBRU5nSUFJQU5Cb0lEUUFHb2dCRFlDQUNBRFFhU0EwQUJxSUFvMkFnQWdBMEdvZ05BQWFpQUtOZ0lBSUFBaEJRd0VDeUFDUVFBN0FRQWdERUVBT2dBQURBTUxJQXhCQW1vaERDQUNRUVJxSVFJZ0VVRUNhaUVOSUE1QkFtb2hDeUFLUVFGcUlRb01CUXNnQnlBRFFSQjBRUkIxUVJ4c2FpSUFRZlQvendCcUlnTWdBeWdDQUVFQmFqWUNBQ0FBUWZqL3p3QnFJZ01nQXlnQ0FDQUVhallDQUNBQVFmei96d0JxSWdBZ0FDZ0NBQ0FLYWpZQ0FBd0JDeUFISUFOQkVIUkJFSFZCSEd4cUlnQkJqSURRQUdvZ0NqWUNBQ0FBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnQWdBQ2dDQUNBS2FqWUNBQXNnREVFQmFpRU1JQUpCQW1vaEFpQU5RUUZxSVEwZ0MwRUJhaUVMSUFSQkFXb2hCQXdBQ3dBTEN5QUZRUUFnQlVFQVNoc2lBMEVCYWlFRlFRRWhBRUVCSVFJRFFDQUFJQVZIQkVBQ1FDQUFJQUVvQWdBaUJFWUVRQ0FDSWdSQkFXb2hBZ3dCQ3lBRVFRSjBJQWRxUVl5QXlBQnFLQUlBSVFRTElBRWdCRFlDQUNBQlFRUnFJUUVnQUVFQmFpRUFEQUVMQ3lBSElBSkJBV3NpQURZQ0NFRUFJQUJGRFFFYVFRQWhCQ0FIUVF4cVFRQWdBRUVDZEJBN0dpQUhRWkNBS0dwQkFDQUFRUVIwRURzYUlBQkJBQ0FBUVFCS0d5RUZJQWRCaklBSWFpRUJRUUFoQUFOQUlBQWdCVVlFUUNBSFFaQ0FLR29oQVFOQUlBTWdCRVlFUUVFQUlRc2dCeWdDQ0NJQVFRQWdBRUVBU2hzaEFpQUhRWkNBS0dvaEFVRUFJUUFEUUNBQUlBSkdEUVVnQVNBQVFRUjBJZ05xSWdRZ0JDc0RBQ0FISUFCQkFuUnFLQUlNdHlJV296a0RBQ0FCSUFOQkNISnFJZ01nQXlzREFDQVdvemtEQUNBQVFRRnFJUUFNQUFzQUN5QUhJQWNnQkVFQ2RHcEJrSURJQUdvb0FnQkJBV3NpQWtFQ2RDSUZhaUlBSUFBb0Fnd2dCeUFFUVFkc1FRSjBhaUlBUVpDQTBBQnFLQUlBYWpZQ0RDQUJJQUpCQkhRaUFtb2lCaUFHS3dNQUlBQkJsSURRQUdvb0FnQzNvRGtEQUNBQklBSkJDSEpxSWdZZ0Jpc0RBQ0FBUVppQTBBQnFLQUlBdDZBNUF3QWdBRUdjZ05BQWFpZ0NBQ0lHSUFJZ0IycEJqSUFJYWlJQ0tBSUFTQVJBSUFJZ0JqWUNBQXNnQUVHZ2dOQUFhaWdDQUNJR0lBY2dCVUVDZENJQ1FRUnlha0dNZ0FocUlnVW9BZ0JLQkVBZ0JTQUdOZ0lBQ3lBQVFhU0EwQUJxS0FJQUlnVWdCeUFDUVFoeWFrR01nQWhxSWdZb0FnQklCRUFnQmlBRk5nSUFDeUFBUWFpQTBBQnFLQUlBSWdBZ0J5QUNRUXh5YWtHTWdBaHFJZ0lvQWdCS0JFQWdBaUFBTmdJQUN5QUVRUUZxSVFRTUFBc0FCU0FCSUFCQkJIUWlBbW9nQmpZQ0FDQUJJQUpCQkhKcVFRQTJBZ0FnQVNBQ1FRaHlhaUFQTmdJQUlBRWdBa0VNY21wQkFEWUNBQ0FBUVFGcUlRQU1BUXNBQ3dBTElBc0xEd3NnQmtVRVFBSi9JQUFoQ0NBRklRcEJBQ0VBSUFFaUJrRUFJQUZCQUVvYklRVWdCeWdDQUNJRElBRWdBaUlQUVFGcklnRnNRUUYwYWlFRUlBTWhBZ05BSUFBZ0JVY0VRQ0FFUVFBN0FRQWdBa0VBT3dFQUlBQkJBV29oQUNBQ1FRSnFJUUlnQkVFQ2FpRUVEQUVMQ3lBUFFRQWdEMEVBU2hzaENTQURJQVpCQVdzaUJVRUJkR29oQkVFQUlRQWdBeUVDQTBBZ0FDQUpSd1JBSUFSQkFEc0JBQ0FDUVFBN0FRQWdBRUVCYWlFQUlBUWdCa0VCZENJTGFpRUVJQUlnQzJvaEFnd0JDd3NnQVVFQklBRkJBVW9iSVJJZ0IwR1FnTWdBYWlFQklBZ2dCa0VCYWlJQWFpRU5JQWNvQWdRZ0FHb2hEQ0FGUVFFZ0JVRUJTaHNpRTBFQmF5RVVJQU1nQUVFQmRHb2hBa0VBSUFaclFRRjBJUkJCQUNFRlFRRWhDUUpBQTBBZ0NTQVNSd1JBSUEwZ0ZHb2hEa0VCSVFRRFFBSkFBa0FDUUNBRUlCTkhCRUFnQ2lBTkxRQUFTQVJBSUF4Qi93RTZBQUFnQWlBUWFpSUFMd0VBSWdOQkVIUkJFSFVpQ0VFQlRnUkFJQUlnQ0RzQkFDQUhJQU5CSEd4cUlnQkJqSURRQUdvZ0NUWUNBQ0FBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnQWdBQ2dDQUNBSmFqWUNBQXdGQ3lBQVFRSnJMd0VBSWdoQkVIUkJFSFVoQXlBQUxnRUNJZ0JCQVU0RVFDQURRUUZPQkVBZ0IwR1FnTWdBYWlJTElBQkJBblJxUVFScktBSUFJZ01nQ0VFQ2RDQUxha0VFYXlnQ0FDSUlTZ1JBSUFJZ0NEc0JBRUVBSVFzZ0JVRUFJQVZCQUVvYklSRWdBU0VBQTBBZ0N5QVJSZ1JBSUFnaEF3d0lDeUFESUFBb0FnQkdCRUFnQUNBSU5nSUFDeUFMUVFGcUlRc2dBRUVFYWlFQURBQUxBQXNnQWlBRE93RUFJQU1nQ0U0TkJVRUFJUXNnQlVFQUlBVkJBRW9iSVJFZ0FTRUFBMEFnQ3lBUlJnMEdJQWdnQUNnQ0FFWUVRQ0FBSUFNMkFnQUxJQXRCQVdvaEN5QUFRUVJxSVFBTUFBc0FDeUFDUVFKckxnRUFJZ2hCQVU0RVFDQUhRWkNBeUFCcUlnc2dBRUVDZEdwQkJHc29BZ0FpQXlBSVFmLy9BM0ZCQW5RZ0MycEJCR3NvQWdBaUNFb0VRQ0FDSUFnN0FRQkJBQ0VMSUFWQkFDQUZRUUJLR3lFUklBRWhBQU5BSUFzZ0VVWUVRQ0FJSVFNTUJ3c2dBeUFBS0FJQVJnUkFJQUFnQ0RZQ0FBc2dDMEVCYWlFTElBQkJCR29oQUF3QUN3QUxJQUlnQXpzQkFDQURJQWhPRFFSQkFDRUxJQVZCQUNBRlFRQktHeUVSSUFFaEFBTkFJQXNnRVVZTkJTQUlJQUFvQWdCR0JFQWdBQ0FETmdJQUN5QUxRUUZxSVFzZ0FFRUVhaUVBREFBTEFBc2dBaUFBT3dFQUlBY2dBRUVIYkVFQ2RHb2lBRUgwLzg4QWFpSURJQU1vQWdCQkFXbzJBZ0FnQUVINC84OEFhaUlESUFNb0FnQWdCR28yQWdBZ0FFSDgvODhBYWlJRElBTW9BZ0FnQ1dvMkFnQWdCQ0FBUVlDQTBBQnFJZ01vQWdCSUJFQWdBeUFFTmdJQUN5QUFRWXlBMEFCcUlBazJBZ0FNQlFzZ0EwRUJUZ1JBSUFJZ0F6c0JBQ0FISUFoQkIyeEJBblJxSWdCQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBQkIrUC9QQUdvaUF5QURLQUlBSUFScU5nSUFJQUJCL1AvUEFHb2lBeUFES0FJQUlBbHFOZ0lBSUFRZ0FFR0VnTkFBYWlJREtBSUFTZ1JBSUFNZ0JEWUNBQXNnQUVHTWdOQUFhaUFKTmdJQURBVUxJQUpCQW1zdkFRQWlBRUVRZEVFUWRTSURRUUZPQkVBZ0FpQURPd0VBSUFjZ0FFRWNiR29pQUVIMC84OEFhaUlESUFNb0FnQkJBV28yQWdBZ0FFSDQvODhBYWlJRElBTW9BZ0FnQkdvMkFnQWdBRUg4Lzg4QWFpSURJQU1vQWdBZ0NXbzJBZ0FnQUVHRWdOQUFhaUlBS0FJQUlBUk9EUVVnQUNBRU5nSUFEQVVMSUFWQmdJQUNUZ1JBUVFCQkEwSEFDa0VBRURoQmZ5RU1EQWtMSUFJZ0JVRUJhaUlBT3dFQUlBY2dCVUVDZEdwQmtJRElBR29nQUVFUWRFRVFkVFlDQUNBSElBVkJIR3hxSWdOQmxJRFFBR29nQkRZQ0FDQURRWkNBMEFCcVFRRTJBZ0FnQTBHWWdOQUFhaUFKTmdJQUlBTkJuSURRQUdvZ0JEWUNBQ0FEUWFDQTBBQnFJQVEyQWdBZ0EwR2tnTkFBYWlBSk5nSUFJQU5CcUlEUUFHb2dDVFlDQUNBQUlRVU1CQXNnQWtFQU93RUFJQXhCQURvQUFBd0RDeUFNUVFKcUlRd2dBa0VFYWlFQ0lBNUJBbW9oRFNBSlFRRnFJUWtNQlFzZ0J5QURRUkIwUVJCMVFSeHNhaUlBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnQWdBQ2dDQUNBSmFqWUNBQXdCQ3lBSElBTkJFSFJCRUhWQkhHeHFJZ0JCaklEUUFHb2dDVFlDQUNBQVFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUFRZmovendCcUlnTWdBeWdDQUNBRWFqWUNBQ0FBUWZ6L3p3QnFJZ0FnQUNnQ0FDQUphallDQUFzZ0RFRUJhaUVNSUFKQkFtb2hBaUFOUVFGcUlRMGdCRUVCYWlFRURBQUxBQXNMSUFWQkFDQUZRUUJLR3lJRFFRRnFJUVZCQVNFQVFRRWhBZ05BSUFBZ0JVY0VRQUpBSUFBZ0FTZ0NBQ0lFUmdSQUlBSWlCRUVCYWlFQ0RBRUxJQVJCQW5RZ0IycEJqSURJQUdvb0FnQWhCQXNnQVNBRU5nSUFJQUZCQkdvaEFTQUFRUUZxSVFBTUFRc0xJQWNnQWtFQmF5SUFOZ0lJUVFBZ0FFVU5BUnBCQUNFRUlBZEJER3BCQUNBQVFRSjBFRHNhSUFkQmtJQW9ha0VBSUFCQkJIUVFPeG9nQUVFQUlBQkJBRW9iSVFVZ0IwR01nQWhxSVFGQkFDRUFBMEFnQUNBRlJnUkFJQWRCa0lBb2FpRUJBMEFnQXlBRVJnUkFRUUFoRENBSEtBSUlJZ0JCQUNBQVFRQktHeUVDSUFkQmtJQW9haUVCUVFBaEFBTkFJQUFnQWtZTkJTQUJJQUJCQkhRaUEyb2lCQ0FFS3dNQUlBY2dBRUVDZEdvb0FneTNJaGFqT1FNQUlBRWdBMEVJY21vaUF5QURLd01BSUJhak9RTUFJQUJCQVdvaEFBd0FDd0FMSUFjZ0J5QUVRUUowYWtHUWdNZ0FhaWdDQUVFQmF5SUNRUUowSWdWcUlnQWdBQ2dDRENBSElBUkJCMnhCQW5ScUlnQkJrSURRQUdvb0FnQnFOZ0lNSUFFZ0FrRUVkQ0lDYWlJR0lBWXJBd0FnQUVHVWdOQUFhaWdDQUxlZ09RTUFJQUVnQWtFSWNtb2lCaUFHS3dNQUlBQkJtSURRQUdvb0FnQzNvRGtEQUNBQVFaeUEwQUJxS0FJQUlnWWdBaUFIYWtHTWdBaHFJZ0lvQWdCSUJFQWdBaUFHTmdJQUN5QUFRYUNBMEFCcUtBSUFJZ1lnQnlBRlFRSjBJZ0pCQkhKcVFZeUFDR29pQlNnQ0FFb0VRQ0FGSUFZMkFnQUxJQUJCcElEUUFHb29BZ0FpQlNBSElBSkJDSEpxUVl5QUNHb2lCaWdDQUVnRVFDQUdJQVUyQWdBTElBQkJxSURRQUdvb0FnQWlBQ0FISUFKQkRISnFRWXlBQ0dvaUFpZ0NBRW9FUUNBQ0lBQTJBZ0FMSUFSQkFXb2hCQXdBQ3dBRklBRWdBRUVFZENJQ2FpQUdOZ0lBSUFFZ0FrRUVjbXBCQURZQ0FDQUJJQUpCQ0hKcUlBODJBZ0FnQVNBQ1FReHlha0VBTmdJQUlBQkJBV29oQUF3QkN3QUxBQXNnREFzUEN3Si9JQUFoQmlBRklROGdBU0lJUVFKdElneEJBQ0FNUVFCS0d5RUZJQWNvQWdBaUF5QUNRUUp0SWhKQkFXc2lBU0FNYkVFQmRHb2hCRUVBSVFBZ0F5RUNBMEFnQUNBRlJ3UkFJQVJCQURzQkFDQUNRUUE3QVFBZ0FFRUJhaUVBSUFKQkFtb2hBaUFFUVFKcUlRUU1BUXNMSUJKQkFDQVNRUUJLR3lFS0lBTWdERUVCYXlJRlFRRjBhaUVFUVFBaEFDQURJUUlEUUNBQUlBcEhCRUFnQkVFQU93RUFJQUpCQURzQkFDQUFRUUZxSVFBZ0JDQU1RUUYwSWdscUlRUWdBaUFKYWlFQ0RBRUxDeUFCUVFFZ0FVRUJTaHNoRXlBRlFRRWdCVUVCU2hzaEZDQUhRWkNBeUFCcUlRRWdERUVCYWlJQUlBY29BZ1JxSVEwZ0NFRUJkQ0FHYWtFQ2FpRUxJQU1nQUVFQmRHb2hBa0VBSUF4clFRRjBJUkJCQUNFRlFRRWhDZ0pBQTBBZ0NpQVRSd1JBUVFFaEJBTkFBa0FDUUFKQUlBUWdGRWNFUUNBUElBc3RBQUJJQkVBZ0RVSC9BVG9BQUNBQ0lCQnFJZ0F2QVFBaUEwRVFkRUVRZFNJR1FRRk9CRUFnQWlBR093RUFJQWNnQTBFY2JHb2lBRUdNZ05BQWFpQUtOZ0lBSUFCQjlQL1BBR29pQXlBREtBSUFRUUZxTmdJQUlBQkIrUC9QQUdvaUF5QURLQUlBSUFScU5nSUFJQUJCL1AvUEFHb2lBQ0FBS0FJQUlBcHFOZ0lBREFVTElBQkJBbXN2QVFBaUJrRVFkRUVRZFNFRElBQXVBUUlpQUVFQlRnUkFJQU5CQVU0RVFDQUhRWkNBeUFCcUlna2dBRUVDZEdwQkJHc29BZ0FpQXlBR1FRSjBJQWxxUVFScktBSUFJZ1pLQkVBZ0FpQUdPd0VBUVFBaENTQUZRUUFnQlVFQVNoc2hEaUFCSVFBRFFDQUpJQTVHQkVBZ0JpRUREQWdMSUFNZ0FDZ0NBRVlFUUNBQUlBWTJBZ0FMSUFsQkFXb2hDU0FBUVFScUlRQU1BQXNBQ3lBQ0lBTTdBUUFnQXlBR1RnMEZRUUFoQ1NBRlFRQWdCVUVBU2hzaERpQUJJUUFEUUNBSklBNUdEUVlnQmlBQUtBSUFSZ1JBSUFBZ0F6WUNBQXNnQ1VFQmFpRUpJQUJCQkdvaEFBd0FDd0FMSUFKQkFtc3VBUUFpQmtFQlRnUkFJQWRCa0lESUFHb2lDU0FBUVFKMGFrRUVheWdDQUNJRElBWkIvLzhEY1VFQ2RDQUpha0VFYXlnQ0FDSUdTZ1JBSUFJZ0Jqc0JBRUVBSVFrZ0JVRUFJQVZCQUVvYklRNGdBU0VBQTBBZ0NTQU9SZ1JBSUFZaEF3d0hDeUFESUFBb0FnQkdCRUFnQUNBR05nSUFDeUFKUVFGcUlRa2dBRUVFYWlFQURBQUxBQXNnQWlBRE93RUFJQU1nQms0TkJFRUFJUWtnQlVFQUlBVkJBRW9iSVE0Z0FTRUFBMEFnQ1NBT1JnMEZJQVlnQUNnQ0FFWUVRQ0FBSUFNMkFnQUxJQWxCQVdvaENTQUFRUVJxSVFBTUFBc0FDeUFDSUFBN0FRQWdCeUFBUVFkc1FRSjBhaUlBUWZUL3p3QnFJZ01nQXlnQ0FFRUJhallDQUNBQVFmai96d0JxSWdNZ0F5Z0NBQ0FFYWpZQ0FDQUFRZnovendCcUlnTWdBeWdDQUNBS2FqWUNBQ0FFSUFCQmdJRFFBR29pQXlnQ0FFZ0VRQ0FESUFRMkFnQUxJQUJCaklEUUFHb2dDallDQUF3RkN5QURRUUZPQkVBZ0FpQURPd0VBSUFjZ0JrRUhiRUVDZEdvaUFFSDAvODhBYWlJRElBTW9BZ0JCQVdvMkFnQWdBRUg0Lzg4QWFpSURJQU1vQWdBZ0JHbzJBZ0FnQUVIOC84OEFhaUlESUFNb0FnQWdDbW8yQWdBZ0JDQUFRWVNBMEFCcUlnTW9BZ0JLQkVBZ0F5QUVOZ0lBQ3lBQVFZeUEwQUJxSUFvMkFnQU1CUXNnQWtFQ2F5OEJBQ0lBUVJCMFFSQjFJZ05CQVU0RVFDQUNJQU03QVFBZ0J5QUFRUnhzYWlJQVFmVC96d0JxSWdNZ0F5Z0NBRUVCYWpZQ0FDQUFRZmovendCcUlnTWdBeWdDQUNBRWFqWUNBQ0FBUWZ6L3p3QnFJZ01nQXlnQ0FDQUthallDQUNBQVFZU0EwQUJxSWdBb0FnQWdCRTROQlNBQUlBUTJBZ0FNQlFzZ0JVR0FnQUpPQkVCQkFFRURRYUFLUVFBUU9FRi9JUXNNQ1FzZ0FpQUZRUUZxSWdBN0FRQWdCeUFGUVFKMGFrR1FnTWdBYWlBQVFSQjBRUkIxTmdJQUlBY2dCVUVjYkdvaUEwR1VnTkFBYWlBRU5nSUFJQU5Ca0lEUUFHcEJBVFlDQUNBRFFaaUEwQUJxSUFvMkFnQWdBMEdjZ05BQWFpQUVOZ0lBSUFOQm9JRFFBR29nQkRZQ0FDQURRYVNBMEFCcUlBbzJBZ0FnQTBHb2dOQUFhaUFLTmdJQUlBQWhCUXdFQ3lBQ1FRQTdBUUFnRFVFQU9nQUFEQU1MSUExQkFtb2hEU0FDUVFScUlRSWdDa0VCYWlFS0lBZ2dDMnBCQkdvaEN3d0ZDeUFISUFOQkVIUkJFSFZCSEd4cUlnQkI5UC9QQUdvaUF5QURLQUlBUVFGcU5nSUFJQUJCK1AvUEFHb2lBeUFES0FJQUlBUnFOZ0lBSUFCQi9QL1BBR29pQUNBQUtBSUFJQXBxTmdJQURBRUxJQWNnQTBFUWRFRVFkVUVjYkdvaUFFR01nTkFBYWlBS05nSUFJQUJCOVAvUEFHb2lBeUFES0FJQVFRRnFOZ0lBSUFCQitQL1BBR29pQXlBREtBSUFJQVJxTmdJQUlBQkIvUC9QQUdvaUFDQUFLQUlBSUFwcU5nSUFDeUFOUVFGcUlRMGdBa0VDYWlFQ0lBdEJBbW9oQ3lBRVFRRnFJUVFNQUFzQUN3c2dCVUVBSUFWQkFFb2JJZ05CQVdvaEJVRUJJUUJCQVNFQ0EwQWdBQ0FGUndSQUFrQWdBQ0FCS0FJQUlnUkdCRUFnQWlJRVFRRnFJUUlNQVFzZ0JFRUNkQ0FIYWtHTWdNZ0FhaWdDQUNFRUN5QUJJQVEyQWdBZ0FVRUVhaUVCSUFCQkFXb2hBQXdCQ3dzZ0J5QUNRUUZySWdBMkFnaEJBQ0FBUlEwQkdrRUFJUVFnQjBFTWFrRUFJQUJCQW5RUU94b2dCMEdRZ0NocVFRQWdBRUVFZEJBN0dpQUFRUUFnQUVFQVNoc2hCU0FIUVl5QUNHb2hBVUVBSVFBRFFDQUFJQVZHQkVBZ0IwR1FnQ2hxSVFFRFFDQURJQVJHQkVCQkFDRUxJQWNvQWdnaUFFRUFJQUJCQUVvYklRSWdCMEdRZ0NocUlRRkJBQ0VBQTBBZ0FDQUNSZzBGSUFFZ0FFRUVkQ0lEYWlJRUlBUXJBd0FnQnlBQVFRSjBhaWdDRExjaUZxTTVBd0FnQVNBRFFRaHlhaUlESUFNckF3QWdGcU01QXdBZ0FFRUJhaUVBREFBTEFBc2dCeUFISUFSQkFuUnFRWkNBeUFCcUtBSUFRUUZySWdKQkFuUWlCV29pQUNBQUtBSU1JQWNnQkVFSGJFRUNkR29pQUVHUWdOQUFhaWdDQUdvMkFnd2dBU0FDUVFSMElnSnFJZ1lnQmlzREFDQUFRWlNBMEFCcUtBSUF0NkE1QXdBZ0FTQUNRUWh5YWlJR0lBWXJBd0FnQUVHWWdOQUFhaWdDQUxlZ09RTUFJQUJCbklEUUFHb29BZ0FpQmlBQ0lBZHFRWXlBQ0dvaUFpZ0NBRWdFUUNBQ0lBWTJBZ0FMSUFCQm9JRFFBR29vQWdBaUJpQUhJQVZCQW5RaUFrRUVjbXBCaklBSWFpSUZLQUlBU2dSQUlBVWdCallDQUFzZ0FFR2tnTkFBYWlnQ0FDSUZJQWNnQWtFSWNtcEJqSUFJYWlJR0tBSUFTQVJBSUFZZ0JUWUNBQXNnQUVHb2dOQUFhaWdDQUNJQUlBY2dBa0VNY21wQmpJQUlhaUlDS0FJQVNnUkFJQUlnQURZQ0FBc2dCRUVCYWlFRURBQUxBQVVnQVNBQVFRUjBJZ0pxSUF3MkFnQWdBU0FDUVFSeWFrRUFOZ0lBSUFFZ0FrRUljbW9nRWpZQ0FDQUJJQUpCREhKcVFRQTJBZ0FnQUVFQmFpRUFEQUVMQUFzQUN5QUxDd3NVQUNBQVFZU01BellDQUNBQVFRUnFFRUlnQUFzVUFDQUFRY1NMQXpZQ0FDQUFRUVJxRUVJZ0FBdHFBUUovSUFCQmhJNEROZ0lBSUFBb0FpZ2hBUU5BSUFFRVFFRUFJQUFnQVVFQmF5SUJRUUowSWdJZ0FDZ0NKR29vQWdBZ0FDZ0NJQ0FDYWlnQ0FCRUdBQXdCQ3dzZ0FFRWNhaEJDSUFBb0FpQVFNeUFBS0FJa0VETWdBQ2dDTUJBeklBQW9BandRTXlBQUN3c0FJQUJCNkpvRUVNSUJDd3NBSUFCQjRKb0VFTUlCQ3k4QkFYOGdBRUVFYWhEckJDRUNJQUJCMkkwRE5nSUFJQUpCN0kwRE5nSUFJQUJCekkwREtBSUFhaUFCRUxnREN5OEJBWDhnQUVFRWFoRHhCQ0VDSUFCQnFJMEROZ0lBSUFKQnZJMEROZ0lBSUFCQm5JMERLQUlBYWlBQkVMZ0RDd2tBSUFBZ0FSRHZCQXZaQXdJQ2ZnSi9Jd0JCSUdzaUJDUUFBa0FnQVVMLy8vLy8vLy8vLy84QWd5SURRb0NBZ0lDQWdNQ0FQSDBnQTBLQWdJQ0FnSURBLzhNQWZWUUVRQ0FCUWdTR0lBQkNQSWlFSVFNZ0FFTC8vLy8vLy8vLy93K0RJZ0JDZ1lDQWdJQ0FnSUFJV2dSQUlBTkNnWUNBZ0lDQWdJREFBSHdoQWd3Q0N5QURRb0NBZ0lDQWdJQ0FRSDBoQWlBQVFvQ0FnSUNBZ0lDQUNJVkNBRklOQVNBQ0lBTkNBWU44SVFJTUFRc2dBRkFnQTBLQWdJQ0FnSURBLy84QVZDQURRb0NBZ0lDQWdNRC8vd0JSRzBVRVFDQUJRZ1NHSUFCQ1BJaUVRdi8vLy8vLy8vOERnMEtBZ0lDQWdJQ0EvUDhBaENFQ0RBRUxRb0NBZ0lDQWdJRDQvd0FoQWlBRFF2Ly8vLy8vLzcvL3d3QldEUUJDQUNFQ0lBTkNNSWluSWdWQmtmY0FTUTBBSUFSQkVHb2dBQ0FCUXYvLy8vLy8veitEUW9DQWdJQ0FnTUFBaENJQ0lBVkJnZmNBYXhDUUFTQUVJQUFnQWtHQitBQWdCV3NRb2dJZ0JDa0RDRUlFaGlBRUtRTUFJZ0JDUElpRUlRSWdCQ2tERUNBRUtRTVloRUlBVXEwZ0FFTC8vLy8vLy8vLy93K0RoQ0lBUW9HQWdJQ0FnSUNBQ0ZvRVFDQUNRZ0Y4SVFJTUFRc2dBRUtBZ0lDQWdJQ0FnQWlGUWdCU0RRQWdBa0lCZ3lBQ2ZDRUNDeUFFUVNCcUpBQWdBaUFCUW9DQWdJQ0FnSUNBZ0grRGhMOExRUUVCZnlNQVFSQnJJZ1VrQUNBRklBRWdBaUFESUFSQ2dJQ0FnSUNBZ0lDQWY0VVFvd0VnQUNBRktRTUFOd01BSUFBZ0JTa0RDRGNEQ0NBRlFSQnFKQUFMeEFFQ0FYOENma0YvSVFNQ1FDQUFRZ0JTSUFGQy8vLy8vLy8vLy8vL0FJTWlCRUtBZ0lDQWdJREEvLzhBVmlBRVFvQ0FnSUNBZ01ELy93QlJHdzBBUVFBZ0FrTC8vLy8vLy8vLy8vOEFneUlGUW9DQWdJQ0FnTUQvL3dCV0lBVkNnSUNBZ0lDQXdQLy9BRkViRFFBZ0FDQUVJQVdFaEZBRVFFRUFEd3NnQVNBQ2cwSUFXUVJBUVFBZ0FTQUNVeUFCSUFKUkd3MEJJQUFnQVNBQ2hZUkNBRklQQ3lBQVFnQlNJQUVnQWxVZ0FTQUNVUnNOQUNBQUlBRWdBb1dFUWdCU0lRTUxJQU1McndFQkJuOGpBRUh3QVdzaUJpUUFJQVlnQURZQ0FFRUJJUWNDUUNBRFFRSklEUUJCQUNBQmF5RUpJQUFoQlFOQUlBQWdCU0FKYWlJRklBUWdBMEVDYXlJS1FRSjBhaWdDQUdzaUNDQUNFUU1BUVFCT0JFQWdBQ0FGSUFJUkF3QkJmMG9OQWdzZ0JpQUhRUUowYWlBSUlBVWdDQ0FGSUFJUkF3QkJmMG9pQ0JzaUJUWUNBQ0FIUVFGcUlRY2dBMEVCYXlBS0lBZ2JJZ05CQVVvTkFBc0xJQUVnQmlBSEVQVUVJQVpCOEFGcUpBQUxaZ0VEZjBGL0lRSUNRQ0FBUlNBQlJYSU5BRUVBSVFJZ0FFRU1ha0VBUVlBSUVEc2FJQUVnQUNnQ0NDQUFLQUlFYkdvaEF3TkFJQUVnQTA4TkFTQUFJQUV0QUFCQkFuUnFJZ1JCREdvZ0JDZ0NERUVCYWpZQ0FDQUJRUUZxSVFFTUFBc0FDeUFDQzVFU0FnOS9BWDRqQUVIUUFHc2lCeVFBSUFjZ0FUWUNUQ0FIUVRkcUlSVWdCMEU0YWlFU1FRQWhBUU5BQWtBZ0RrRUFTQTBBUWYvLy8vOEhJQTVySUFGSUJFQkJsUDhEUVQwMkFnQkJmeUVPREFFTElBRWdEbW9oRGdzZ0J5Z0NUQ0lLSVFFQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFjQ2Z3SkFJQW90QUFBaUNBUkFBMEFDUUFKQUlBaEIvd0Z4SWdoRkJFQWdBU0VJREFFTElBaEJKVWNOQVNBQklRZ0RRQ0FCTFFBQlFTVkhEUUVnQnlBQlFRSnFJZ2syQWt3Z0NFRUJhaUVJSUFFdEFBSWhEeUFKSVFFZ0QwRWxSZzBBQ3dzZ0NDQUtheUVCSUFBRVFDQUFJQW9nQVJDSEFRc2dBUTBOSUFjb0Frd3NBQUVReFFFaENDQUhLQUpNSVFFZ0NFVU5BeUFCTFFBQ1FTUkhEUU1nQVN3QUFVRXdheUVSUVFFaEV5QUJRUU5xREFRTElBY2dBVUVCYWlJSk5nSk1JQUV0QUFFaENDQUpJUUVNQUFzQUN5QU9JUTBnQUEwSUlCTkZEUUpCQVNFQkEwQWdCQ0FCUVFKMGFpZ0NBQ0lBQkVBZ0F5QUJRUU4wYWlBQUlBSWdCaENCQlVFQklRMGdBVUVCYWlJQlFRcEhEUUVNQ2dzTFFRRWhEU0FCUVFwUERRZ0RRQ0FFSUFGQkFuUnFLQUlBRFFnZ0FVRUJhaUlCUVFwSERRQUxEQWdMUVg4aEVTQUJRUUZxQ3lJQk5nSk1RUUFoQ1FKQUlBRXNBQUFpRUVFZ2F5SUlRUjlMRFFCQkFTQUlkQ0lJUVluUkJIRkZEUUFEUUFKQUlBY2dBVUVCYWlJSk5nSk1JQUVzQUFFaUVFRWdheUlCUVNCUERRQkJBU0FCZENJQlFZblJCSEZGRFFBZ0FTQUljaUVJSUFraEFRd0JDd3NnQ1NFQklBZ2hDUXNDUUNBUVFTcEdCRUFnQndKL0FrQWdBU3dBQVJERkFVVU5BQ0FIS0FKTUlnRXRBQUpCSkVjTkFDQUJMQUFCUVFKMElBUnFRY0FCYTBFS05nSUFJQUVzQUFGQkEzUWdBMnBCZ0FOcktBSUFJUXhCQVNFVElBRkJBMm9NQVFzZ0V3MElRUUFoRTBFQUlRd2dBQVJBSUFJZ0FpZ0NBQ0lCUVFScU5nSUFJQUVvQWdBaERBc2dCeWdDVEVFQmFnc2lBVFlDVENBTVFYOUtEUUZCQUNBTWF5RU1JQWxCZ01BQWNpRUpEQUVMSUFkQnpBQnFFSUFGSWd4QkFFZ05CaUFIS0FKTUlRRUxRWDhoQ3dKQUlBRXRBQUJCTGtjTkFDQUJMUUFCUVNwR0JFQUNRQ0FCTEFBQ0VNVUJSUTBBSUFjb0Frd2lBUzBBQTBFa1J3MEFJQUVzQUFKQkFuUWdCR3BCd0FGclFRbzJBZ0FnQVN3QUFrRURkQ0FEYWtHQUEyc29BZ0FoQ3lBSElBRkJCR29pQVRZQ1RBd0NDeUFURFFjZ0FBUi9JQUlnQWlnQ0FDSUJRUVJxTmdJQUlBRW9BZ0FGUVFBTElRc2dCeUFIS0FKTVFRSnFJZ0UyQWt3TUFRc2dCeUFCUVFGcU5nSk1JQWRCekFCcUVJQUZJUXNnQnlnQ1RDRUJDMEVBSVFnRFFDQUlJUlJCZnlFTklBRXNBQUJCd1FCclFUbExEUWNnQnlBQlFRRnFJaEEyQWt3Z0FTd0FBQ0VJSUJBaEFTQUlJQlJCT214cVFiLzdBbW90QUFBaUNFRUJhMEVJU1EwQUN5QUlRUk5HRFFJZ0NFVU5CaUFSUVFCT0JFQWdCQ0FSUVFKMGFpQUlOZ0lBSUFjZ0F5QVJRUU4wYWlrREFEY0RRQXdFQ3lBQURRRUxRUUFoRFF3RkN5QUhRVUJySUFnZ0FpQUdFSUVGSUFjb0Frd2hFQXdDQ3lBUlFYOUtEUU1MUVFBaEFTQUFSUTBFQ3lBSlFmLy9lM0VpRHlBSklBbEJnTUFBY1JzaENFRUFJUTFCNlBzQ0lSRWdFaUVKQWtBQ1FBSkFBbjhDUUFKQUFrQUNRQUovQWtBQ1FBSkFBa0FDUUFKQUFrQWdFRUVCYXl3QUFDSUJRVjl4SUFFZ0FVRVBjVUVEUmhzZ0FTQVVHeUlCUWRnQWF3NGhCQklTRWhJU0VoSVNEaElQQmc0T0RoSUdFaElTRWdJRkF4SVNDUklCRWhJRUFBc0NRQ0FCUWNFQWF3NEhEaElMRWc0T0RnQUxJQUZCMHdCR0RRa01FUXNnQnlrRFFDRVdRZWo3QWd3RkMwRUFJUUVDUUFKQUFrQUNRQUpBQWtBQ1FDQVVRZjhCY1E0SUFBRUNBd1FYQlFZWEN5QUhLQUpBSUE0MkFnQU1GZ3NnQnlnQ1FDQU9OZ0lBREJVTElBY29Ba0FnRHF3M0F3QU1GQXNnQnlnQ1FDQU9Pd0VBREJNTElBY29Ba0FnRGpvQUFBd1NDeUFIS0FKQUlBNDJBZ0FNRVFzZ0J5Z0NRQ0FPckRjREFBd1FDeUFMUVFnZ0MwRUlTeHNoQ3lBSVFRaHlJUWhCK0FBaEFRc2dFaUVLSUFGQklIRWhEeUFIS1FOQUloWlFSUVJBQTBBZ0NrRUJheUlLSUJhblFROXhRZEQvQW1vdEFBQWdEM0k2QUFBZ0ZrSUVpQ0lXUWdCU0RRQUxDeUFJUVFoeFJTQUhLUU5BVUhJTkF5QUJRUVIyUWVqN0Ftb2hFVUVDSVEwTUF3c2dFaUVCSUFjcEEwQWlGbEJGQkVBRFFDQUJRUUZySWdFZ0ZxZEJCM0ZCTUhJNkFBQWdGa0lEaUNJV1FnQlNEUUFMQ3lBQklRb2dDRUVJY1VVTkFpQUxJQklnQ21zaUFVRUJhaUFCSUF0SUd5RUxEQUlMSUFjcEEwQWlGa0ovVndSQUlBZENBQ0FXZlNJV053TkFRUUVoRFVIbyt3SU1BUXNnQ0VHQUVIRUVRRUVCSVExQjZmc0NEQUVMUWVyN0FrSG8rd0lnQ0VFQmNTSU5Hd3NoRVNBV0lCSVFvd0loQ2dzZ0NFSC8vM3R4SUFnZ0MwRi9TaHNoQ0NBSEtRTkFJaFpDQUZJZ0MzSkZCRUJCQUNFTElCSWhDZ3dLQ3lBTElCWlFJQklnQ210cUlnRWdBU0FMU0JzaEN3d0pDeUFIS0FKQUlnRkI4dnNDSUFFYklncEJBQ0FMRU5ZRElnRWdDaUFMYWlBQkd5RUpJQThoQ0NBQklBcHJJQXNnQVJzaEN3d0lDeUFMQkVBZ0J5Z0NRQXdDQzBFQUlRRWdBRUVnSUF4QkFDQUlFSmdCREFJTElBZEJBRFlDRENBSElBY3BBMEErQWdnZ0J5QUhRUWhxTmdKQVFYOGhDeUFIUVFocUN5RUpRUUFoQVFKQUEwQWdDU2dDQUNJS1JRMEJJQWRCQkdvZ0NoQ0ZCU0lLUVFCSUlnOGdDaUFMSUFGclMzSkZCRUFnQ1VFRWFpRUpJQXNnQVNBS2FpSUJTdzBCREFJTEMwRi9JUTBnRHcwRkN5QUFRU0FnRENBQklBZ1FtQUVnQVVVRVFFRUFJUUVNQVF0QkFDRUpJQWNvQWtBaEVBTkFJQkFvQWdBaUNrVU5BU0FIUVFScUlBb1FoUVVpQ2lBSmFpSUpJQUZLRFFFZ0FDQUhRUVJxSUFvUWh3RWdFRUVFYWlFUUlBRWdDVXNOQUFzTElBQkJJQ0FNSUFFZ0NFR0F3QUJ6RUpnQklBd2dBU0FCSUF4SUd5RUJEQVVMSUFBZ0J5c0RRQ0FNSUFzZ0NDQUJJQVVSS3dBaEFRd0VDeUFISUFjcEEwQThBRGRCQVNFTElCVWhDaUFQSVFnTUFndEJmeUVOQ3lBSFFkQUFhaVFBSUEwUEN5QUFRU0FnRFNBSklBcHJJZzhnQ3lBTElBOUlHeUlRYWlJSklBd2dDU0FNU2hzaUFTQUpJQWdRbUFFZ0FDQVJJQTBRaHdFZ0FFRXdJQUVnQ1NBSVFZQ0FCSE1RbUFFZ0FFRXdJQkFnRDBFQUVKZ0JJQUFnQ2lBUEVJY0JJQUJCSUNBQklBa2dDRUdBd0FCekVKZ0JEQUFMQUF2aEFRRUNmeUFDUVFCSElRTUNRQUpBQWtBZ0FFRURjVVVnQWtWeURRQWdBVUgvQVhFaEJBTkFJQUF0QUFBZ0JFWU5BaUFDUVFGcklnSkJBRWNoQXlBQVFRRnFJZ0JCQTNGRkRRRWdBZzBBQ3dzZ0EwVU5BUXNDUUNBQUxRQUFJQUZCL3dGeFJpQUNRUVJKY2cwQUlBRkIvd0Z4UVlHQ2hBaHNJUU1EUUNBQUtBSUFJQU56SWdSQmYzTWdCRUdCZ29RSWEzRkJnSUdDaEhoeERRRWdBRUVFYWlFQUlBSkJCR3NpQWtFRFN3MEFDd3NnQWtVTkFDQUJRZjhCY1NFQkEwQWdBU0FBTFFBQVJnUkFJQUFQQ3lBQVFRRnFJUUFnQWtFQmF5SUNEUUFMQzBFQUMzd0JBbjhnQUNBQUxRQktJZ0ZCQVdzZ0FYSTZBRW9nQUNnQ0ZDQUFLQUljU3dSQUlBQkJBRUVBSUFBb0FpUVJCQUFhQ3lBQVFRQTJBaHdnQUVJQU53TVFJQUFvQWdBaUFVRUVjUVJBSUFBZ0FVRWdjallDQUVGL0R3c2dBQ0FBS0FJc0lBQW9BakJxSWdJMkFnZ2dBQ0FDTmdJRUlBRkJHM1JCSDNVTEtnRUJmeU1BUVJCcklnUWtBQ0FFSUFNMkFnd2dBQ0FCSUFJZ0F4Q0RBaUVBSUFSQkVHb2tBQ0FBQzJrQkFuOENRQ0FBS0FJVUlBQW9BaHhORFFBZ0FFRUFRUUFnQUNnQ0pCRUVBQm9nQUNnQ0ZBMEFRWDhQQ3lBQUtBSUVJZ0VnQUNnQ0NDSUNTUVJBSUFBZ0FTQUNhNnhCQVNBQUtBSW9FUk1BR2dzZ0FFRUFOZ0ljSUFCQ0FEY0RFQ0FBUWdBM0FnUkJBQXR1QVFGL0lBQUVRQ0FBS0FKTVFYOU1CRUFnQUJEWkF3OExJQUFRMlFNUEMwSGc3QU1vQWdBRVFFSGc3QU1vQWdBUTJnTWhBUXRCaklnRUtBSUFJZ0FFUUFOQUlBQW9Ba3dhSUFBb0FoUWdBQ2dDSEVzRVFDQUFFTmtESUFGeUlRRUxJQUFvQWpnaUFBMEFDd3NnQVF1TkFRQWdBRVFKOS8wTjRUMENQNkpFaUxJQmRlRHZTVCtnSUFDaVJEdVBhTFVvZ3FTL29DQUFva1JWUklnT1ZjSEpQNkFnQUtKRWZXL3JBeExXMUwrZ0lBQ2lSRlZWVlZWVlZjVS9vQ0FBb2lBQVJJS1NMckhGdUxNL29rUlpBWTBiYkFibXY2QWdBS0pFeUlwWm5PVXFBRUNnSUFDaVJFc3RpaHduT2dQQW9DQUFva1FBQUFBQUFBRHdQNkNqQy9ZQkFRRi9Ba0FDUUFKQUlBQWdBWE5CQTNFTkFDQUNRUUJISVFNQ1FDQUJRUU54UlNBQ1JYSU5BQU5BSUFBZ0FTMEFBQ0lET2dBQUlBTkZEUVFnQUVFQmFpRUFJQUpCQVdzaUFrRUFSeUVESUFGQkFXb2lBVUVEY1VVTkFTQUNEUUFMQ3lBRFJRMEJJQUV0QUFCRkRRSWdBa0VFU1EwQUEwQWdBU2dDQUNJRFFYOXpJQU5CZ1lLRUNHdHhRWUNCZ29SNGNRMEJJQUFnQXpZQ0FDQUFRUVJxSVFBZ0FVRUVhaUVCSUFKQkJHc2lBa0VEU3cwQUN3c2dBa1VOQUFOQUlBQWdBUzBBQUNJRE9nQUFJQU5GRFFJZ0FFRUJhaUVBSUFGQkFXb2hBU0FDUVFGcklnSU5BQXNMUVFBaEFnc2dBRUVBSUFJUU94b0xJZ0VCZnlNQVFSQnJJZ0VnQURZQ0NDQUJJQUVvQWdnb0FnUTJBZ3dnQVNnQ0RBc3NBUUYvSUFBUW13VWdBQ2dDQUFSQUlBQVFsUVVnQUJBMEdpQUFLQUlBSVFFZ0FCRGRBUm9nQVJBekN3dUxDZ0VPZnlBQktBSVVJUXNnQVNnQ0VDRUZJQUVvQWd3aENTQUJLQUlJSVFJZ0FDZ0M1QU1vQWhnaERRSkFJQUVvQWdRaUJ5QUJLQUlBSWdaS0JFQWdCaUVLQTBBZ0FpQUpUQVJBSUEwZ0NrRUNkR29vQWdBaERDQUNJUU1EUUNBRklBdE1CRUFnRENBRFFRWjBhaUFGUVFGMGFpRUFJQVVoQkFOQUlBQXZBUUFFUUNBQklBbzJBZ0FNQndzZ0FFRUNhaUVBSUFRZ0MwY2hDQ0FFUVFGcUlRUWdDQTBBQ3dzZ0F5QUpSeUVBSUFOQkFXb2hBeUFBRFFBTEN5QUhJQXBISVFBZ0NrRUJhaUVLSUFBTkFBc0xJQVloQ2dzQ1FDQUhJQXBLQkVBZ0J5RUlBMEFnQWlBSlRBUkFJQTBnQ0VFQ2RHb29BZ0FoRENBQ0lRTURRQ0FGSUF0TUJFQWdEQ0FEUVFaMGFpQUZRUUYwYWlFQUlBVWhCQU5BSUFBdkFRQUVRQ0FCSUFnMkFnUU1Cd3NnQUVFQ2FpRUFJQVFnQzBjaEJpQUVRUUZxSVFRZ0JnMEFDd3NnQXlBSlJ5RUFJQU5CQVdvaEF5QUFEUUFMQ3lBSUlBcEtJUUFnQ0VFQmF5RUlJQUFOQUFzTElBY2hDQXNDUUNBQ0lBbElCRUFnQWlFR0EwQWdDQ0FLSWdOT0JFQURRQ0FGSUF0TUJFQWdEU0FEUVFKMGFpZ0NBQ0FHUVFaMGFpQUZRUUYwYWlFQUlBVWhCQU5BSUFBdkFRQUVRQ0FCSUFZMkFnZ01Cd3NnQUVFQ2FpRUFJQVFnQzBjaEJ5QUVRUUZxSVFRZ0J3MEFDd3NnQXlBSVJ5RUFJQU5CQVdvaEF5QUFEUUFMQ3lBR0lBbEhJUUFnQmtFQmFpRUdJQUFOQUFzTElBSWhCZ3NDUUNBR0lBbElCRUFnQ1NFSEEwQWdDQ0FLSWdOT0JFQURRQ0FGSUF0TUJFQWdEU0FEUVFKMGFpZ0NBQ0FIUVFaMGFpQUZRUUYwYWlFQUlBVWhCQU5BSUFBdkFRQUVRQ0FCSUFjMkFnd01Cd3NnQUVFQ2FpRUFJQVFnQzBjaEFpQUVRUUZxSVFRZ0FnMEFDd3NnQXlBSVJ5RUFJQU5CQVdvaEF5QUFEUUFMQ3lBR0lBZElJUUFnQjBFQmF5RUhJQUFOQUFzTElBa2hCd3NDUUNBRklBdElCRUFnQmtFR2RDRU1JQVVoQXdOQUlBZ2dDaUlDVGdSQUEwQWdCaUFIVEFSQUlBMGdBa0VDZEdvb0FnQWdER29nQTBFQmRHb2hBQ0FHSVFRRFFDQUFMd0VBQkVBZ0FTQUROZ0lRREFjTElBQkJRR3NoQUNBRUlBZEhJUWtnQkVFQmFpRUVJQWtOQUFzTElBSWdDRWNoQUNBQ1FRRnFJUUlnQUEwQUN3c2dBeUFMUnlFQUlBTkJBV29oQXlBQURRQUxDeUFGSVFNTEFrQWdBeUFMU0FSQUlBWkJCblFoRENBTElRVURRQ0FJSUFvaUFrNEVRQU5BSUFZZ0Iwd0VRQ0FOSUFKQkFuUnFLQUlBSUF4cUlBVkJBWFJxSVFBZ0JpRUVBMEFnQUM4QkFBUkFJQUVnQlRZQ0ZBd0hDeUFBUVVCcklRQWdCQ0FIUnlFSklBUkJBV29oQkNBSkRRQUxDeUFDSUFoSElRQWdBa0VCYWlFQ0lBQU5BQXNMSUFNZ0JVZ2hBQ0FGUVFGcklRVWdBQTBBQ3dzZ0N5RUZDeUFCSUFjZ0JtdEJER3dpQUNBQWJDQUlJQXByUVFSMElnQWdBR3hxSUFVZ0Eyc2lEa0VEZENJQUlBQnNhallDR0VFQUlRUWdDQ0FLVGdSQUlBNUJBV3BCQTNFaEN3TkFJQVlnQjB3RVFDQU5JQXBCQW5ScUtBSUFJUThnQmlFQ0EwQWdBaUVNQWtBZ0F5QUZTZzBBSUE4Z0RFRUdkR29nQTBFQmRHb2hBaUFESVFBZ0N5RUpJQXNFUUFOQUlBQkJBV29oQUNBRUlBSXZBUUJCQUVkcUlRUWdBa0VDYWlFQ0lBbEJBV3NpQ1EwQUN3c2dEa0VEU1EwQUEwQWdCQ0FDTHdFQVFRQkhhaUFDTHdFQ1FRQkhhaUFDTHdFRVFRQkhhaUFDTHdFR1FRQkhhaUVFSUFKQkNHb2hBaUFBUVFOcUlRa2dBRUVFYWlFQUlBVWdDVWNOQUFzTElBeEJBV29oQWlBSElBeEhEUUFMQ3lBSUlBcEhJUUFnQ2tFQmFpRUtJQUFOQUFzTElBRWdCRFlDSEF2V0FRRURmeUFBS0FJRUlRUWdBa0h4ayt2Y0EwOEVRQ0FBS0FJQVFyaUFnSUF3TndJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQWtFSUlBSkJCM0VpQTJ0QkFDQURHMm9oQXlBQlFRSlBCRUFnQUNnQ0FDSUNJQUUyQWhnZ0FrRVBOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBMEVRYWlJRkVEb2lBa1VFUUNBQUtBSUFRcmlBZ0lEQUFEY0NGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBUWdCQ2dDVENBRmFqWUNUQ0FFSUFGQkFuUnFJZ0FvQWp3aEFTQUNRUUEyQWdnZ0FpQUROZ0lFSUFJZ0FUWUNBQ0FBSUFJMkFqd2dBa0VRYWd2SEFnRURmeUFBS0FJRUlRTUNRQ0FCUVFKUEJFQWdBQ2dDQUNJQ0lBRTJBaGdnQWtFUE5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUF3QkN5QUJRUUZIRFFBZ0F5Z0NSQ0lDQkVBRFFDQUNLQUlvQkVBZ0FrRUFOZ0lvSUFBZ0FrRXdhaUFDS0FJNEVRSUFDeUFDS0FJc0lnSU5BQXNMSUFOQkFEWUNSQ0FES0FKSUlnSUVRQU5BSUFJb0FpZ0VRQ0FDUVFBMkFpZ2dBQ0FDUVRCcUlBSW9BamdSQWdBTElBSW9BaXdpQWcwQUN3c2dBMEVBTmdKSUN5QURJQUZCQW5ScUlnRWlBQ2dDUENFQ0lBQkJBRFlDUENBQ0JFQURRQ0FDS0FJQUlRQWdBaWdDQkNBQ0tBSUlha0VRYWlFRUlBSVFNeUFESUFNb0Frd2dCR3MyQWt3Z0FDSUNEUUFMQ3lBQktBSTBJUUlnQVVFQU5nSTBJQUlFUUFOQUlBSW9BZ0FoQUNBQ0tBSUVJQUlvQWdocVFSQnFJUUVnQWhBeklBTWdBeWdDVENBQmF6WUNUQ0FBSWdJTkFBc0xDNGtEQVFaL0lBQW9BaGdpQVNnQ0JDRUNJQUVvQWdBaEJBTkFJQUpGQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFQQ3lBQktBSUFJUVFnQVNnQ0JDRUNDeUFFUVFGcUlRTWdBa0VCYXlFQ0lBUXRBQUJCL3dGSEJFQURRQ0FBS0FMUUF5SUVJQVFvQWhoQkFXbzJBaGdnQVNBQ05nSUVJQUVnQXpZQ0FDQUNCSDhnQWdVZ0FDQUJLQUlNRVFBQVJRUkFRUUFQQ3lBQktBSUFJUU1nQVNnQ0JBdEJBV3NoQWlBRExRQUFJUVFnQTBFQmFpRURJQVJCL3dGSERRQUxDd05BSUFJRWZ5QUNCU0FBSUFFb0Fnd1JBQUJGQkVCQkFBOExJQUVvQWdBaEF5QUJLQUlFQzBFQmF5RUNJQU10QUFBaEJTQURRUUZxSWdRaEF5QUZRZjhCUmcwQUN5QUZSUVJBSUFBb0F0QURJZ01nQXlnQ0dFRUNhallDR0NBQklBSTJBZ1FnQVNBRU5nSUFEQUVMQ3lBQUtBTFFBeWdDR0NJREJFQWdBQ2dDQUNJR0lBTTJBaGdnQmtIM0FEWUNGQ0FBS0FJQUlBVTJBaHdnQUVGL0lBQW9BZ0FvQWdRUkFnQWdBQ2dDMEFOQkFEWUNHQXNnQUNBRk5nSzRBeUFCSUFJMkFnUWdBU0FFTmdJQVFRRUx2UU1DQVg4RGZTTUFRU0JySWdZa0FDQUZBbjhDUUFKQUFrQWdBVVVOQUNBQUlBRWdCQ29DQ0NJSUlBUXFBZ3dpQ1NBR1FSeHFJQVpCRUdvUXpBSkJBRWdOQUNBRkFuOGdCaW9DSENJSGkwTUFBQUJQWFFSQUlBZW9EQUVMUVlDQWdJQjRDellDQUNBRkFuOGdCaW9DRUNJSGkwTUFBQUJQWFFSQUlBZW9EQUVMUVlDQWdJQjRDellDQkNBQ1JRMEJJQUFnQWlBSUlBa2dCa0VZYWlBR1FReHFFTXdDUVFCSURRRWdCUUovSUFZcUFod2lCeUFIa2lBR0tnSVlreUlIaTBNQUFBQlBYUVJBSUFlb0RBRUxRWUNBZ0lCNEN6WUNDQ0FGQW44Z0Jpb0NFQ0lISUFlU0lBWXFBZ3lUSWdlTFF3QUFBRTlkQkVBZ0I2Z01BUXRCZ0lDQWdIZ0xOZ0lNSUFORkRRSWdBQ0FESUFnZ0NTQUdRUlJxSUFaQkNHb1F6QUpCQUVnTkFpQUZBbjhnQmlvQ0ZDQUdLZ0ljUXdBQVFFQ1VJQVlxQWhoREFBQkFRSlNUa2lJSWkwTUFBQUJQWFFSQUlBaW9EQUVMUVlDQWdJQjRDellDRUNBR0tnSUlJQVlxQWhCREFBQkFRSlFnQmlvQ0RFTUFBRUJBbEpPU0lnaUxRd0FBQUU5ZEJFQWdDS2dNQkF0QmdJQ0FnSGdNQXdzZ0JVSi9Od0lBQ3lBRlFuODNBZ2dMSUFWQmZ6WUNFRUYvQ3pZQ0ZDQUdRU0JxSkFBTFRnRUNmU0FCS2dJQUlBQXFBZ0NUSWdRZ0JKUWdBU29DQkNBQUtnSUVreUlFSUFTVWtwRWlCVU1BQUFBQVhBUkFJQUlnQkNBRmxUZ0NBQ0FESUFFcUFnQWdBQ29DQUpNZ0JaVTRBZ0FMQ3ljQkFYOGpBRUVRYXlJQ0pBQWdBRUVEUWVpREFrR1kvd0ZCMndBZ0FSQUZJQUpCRUdva0FBdVBCQUVKZnlNQVFSQnJJZ3NrQUFKQUFrQUNRQUpBSUFJRVFDQURSUTBCSUFSRkRRSWdBQ0FCRU1nRklBSWdCR3hzSWdVMkFnd2dBeUFGYkNJTUlBQW9BaFJIQkVBZ0RCQkxJUVlqQUVFUWF5SU5KQUFDZnlNQVFTQnJJZ2NrQUNBTlFRaHFJZ2tnQmpZQ0FDQUhRUmhxSUFZUWt3WWhDa0VRRUVzaENDTUFRU0JySWdVa0FDQUZJQVkyQWd3Z0NCRDFBeUFJUVpUbUFUWUNBQ0FJUVF4cUlBVkJDR29nQlVFTWFpQUZRUmhxRUs0Q0lBVkJFR29RcmdJYUlBVkJJR29rQUNBSklBZzJBZ1FnQ2hDN0FSb2dCeUFHTmdJRUlBY2dCallDQUNBS0tBSUFJUVVnQ2tFQU5nSUFJQVVFUUNBRkVETUxJQWRCSUdva0FDQUpDeUFBUVJocUVQb0RJQWtRendFZ0RVRVFhaVFBSUFBb0FoaEZEUVFnQUNnQ0dFVU5CUXNnQUNBTU5nSVVJQUFnQkRZQ0VDQUFJQU0yQWdnZ0FDQUNOZ0lFSUFBZ0FUWUNBQ0FMUVJCcUpBQVBDMEhBa3dSQjB4TVFNa0cySHhBeVFhTW1FREpCL3dBUU5VR2tLaEF5UVljdkVESVFOaEFBQUF0QndKTUVRYXcxRURKQnRoOFFNa0dqSmhBeVFZQUJFRFZCcENvUU1rSHNPeEF5RURZUUFBQUxRY0NUQkVHUXpRQVFNa0cySHhBeVFhTW1FREpCZ2dFUU5VR2tLaEF5UWEzU0FCQXlFRFlRQUFBTFFjQ1RCRUdEMkFBUU1rRzJIeEF5UWFNbUVESkJsUUVRTlVHa0toQXlRZGZjQUJBeUVEWVFBQUFMUVJBUUNTSUFJQXRCMitBQUVKc0JFTmdDSUFCQm5ONEJRUTRRQ0FBTEVBQWdBQ2dDQUNBQktBSUFhMEVDZFF1S0RnRU9meU1BUVNCcklnc2tBQUpBSUFJdEFHUUVRQ0FMSUFCQnlBQnFJZ0VRM3dJMkFnZ2dDMEVZYWlBTFFRaHFFSTBDSVFBZ0FoQ3RBaEM1QWlFR0lBSVFyUUlRM3dJaENDQUFLQUlBSVFBakFFRWdheUlDSkFBZ0FpQUFOZ0lZSUFFb0FnQWhBQ0FDSUFFUXVRSTJBZ0FnQUNBQ1FSaHFJQUlRNXdOQkFuUnFJUVVDUUNBR0lBZ1EyZ1VpQTBFQlNBMEFJQUVRTkNnQ0FDQUJLQUlFSWdsclFRSjFJQU5PQkVBZ0FpQUlOZ0lBSUFrZ0JXc2lERUVDZFNJQUlBTklCRUFnQWlBR05nSUFJQUlnQUJEWUJTQUNLQUlBSVFjakFFRVFheUlLSkFBZ0NpQUJJQU1nQUdzUXR3SWhCQ0FCRURRaERpTUFRUkJySWdBa0FDQUFJQWcyQWdBZ0FDQUhOZ0lJQTBBZ0FFRUlhaUFBRUg4RVFDQU9JQVFvQWdRZ0FDZ0NDQkNNQWlBQVFRaHFFSWtDSUFRZ0JDZ0NCRUVFYWpZQ0JBd0JDd3NnQUVFUWFpUUFJQVFRZENBS1FSQnFKQUFnREVFQlNBMENDeU1BUVJCcklnZ2tBQ0FJSUFFZ0NTQUZJQUVvQWdRaUNpQUZJQU5CQW5ScWEyb2lBR3RCQW5VUXR3SWhCQ0FBSVFNRFFDQURJQWxKQkVBZ0FSQTBJQVFvQWdRZ0F4Q01BaUFFSUFRb0FnUkJCR28yQWdRZ0EwRUVhaUVEREFFTEN5QUVFSFFnQUNBRmF5SUFCRUFnQ2lBQWF5QUZJQUFRNVFJTElBaEJFR29rQUNBR0lBSW9BZ0FnQlJEVEFob01BUXNnQVJBMElRQWdBaUFCSUFFUVF5QURhaERkQWlBRklBRW9BZ0JyUVFKMUlBQVExUUlpQXlFSkl3QkJJR3NpQkNRQUlBUWdCallDR0NBRVFRaHFJQWxCQ0dvZ0JpQUlFTm9GRUtNRElRQURRQ0FBS0FJQUlBQW9BZ1JIQkVBZ0NTZ0NFQ0FBS0FJQUlBUW9BaGdRakFJZ0FDQUFLQUlBUVFScU5nSUFJQVJCR0dvUWlRSU1BUXNMSUFBUXNBRWdCRUVnYWlRQUlBRVFsd1FnQXlnQ0JDRUFJQUVRTkNBQktBSUFJQVVnQTBFRWFpSUdFTG9DSUFFUU5DQUZJQUVvQWdRZ0EwRUlhaUlGRUlrR0lBRWdCaEJLSUFGQkJHb2dCUkJLSUFFUU5DQURFRDBRU2lBRElBTW9BZ1EyQWdBZ0FTQUJFRU1Rb2dNZ0FDRUZJQU1RdUFJTElBVVFqUVFhSUFKQklHb2tBQXdCQ3lBTFFRaHFFRTRpRENFT0l3QkJJR3NpQ1NRQVFYOGhCRUYvSVFnZ0FrSG9BR29pQ2hCRElRSWdDVUVRYWlJR0VLY0NJQUlFUUNBR0VJWUVJQUpKQkVBUWp3RUFDeUFHRURRYUlBWWdBaENFQmlJSE5nSUFJQVlnQnpZQ0JDQUdFRFFnQnlBQ1FRTjBhallDQUNBR1FRQVFtd01nQmlBQ0VQNERDd0pBQTBBZ0JoQkVJQVZOQkVBZ0NFRi9Sd1JBSUE0Z0NpQUlFRHdRckFKQkFDRUZBMEFnQmhCRUlBVk5EUVFDUUNBRklBaEdEUUFnQmlBRkVGQW9BZ1FnQmlBSUVGQW9BZ1JHQkVBZ0RpQUtJQVVRUEJDc0Fnd0JDeUFHSUFVUVVDRUVBa0FnQVNnQ0JDQUJFRFFvQWdCSEJFQWdBU0FFRUtZRERBRUxJd0JCSUdzaURTUUFJQUVRTkNJQ0lBMUJDR29nQVNBQkVFUkJBV29RbmdNZ0FSQkVJQUlRbHdNaUFpZ0NDQ0FFRU5vQ0lBSWdBaWdDQ0VFSWFqWUNDQ0FCRU40Q0lBRVFOQ0VQSUFFb0FnQWhFQ0FCS0FJRUlRUWdBa0VFYWlJUklRY0RRQ0FFSUJCSEJFQWdEeUFIS0FJQVFRaHJJQVJCQ0dzaUJCRGFBaUFISUFjb0FnQkJDR3MyQWdBTUFRc0xJQUVnRVJCS0lBRkJCR29nQWtFSWFoQktJQUVRTkNBQ0VEMFFTaUFDSUFJb0FnUTJBZ0FnQVNBQkVFUVFtd01nQWlnQ0JDRUVBMEFnQkNBQ0tBSUlSd1JBSUFJb0FoQWFJQUlnQWlnQ0NFRUlhellDQ0F3QkN3c2dBaWdDQUFSQUlBSW9BaEFhSUFJb0FnQWhCQ0FDRUtnR0dpQUVFRE1MSUExQklHb2tBQXNnQVJDNUFpRUhJQUVRM3dJaERTTUFRU0JySWdRa0FDQUVJQTAyQWhBZ0JDQUhOZ0lZSUFSQkVHb2dCRUVZYWhDYUF5RVBJd0JCSUdzaUFpUUFJQUlnRFRZQ0VDQUNJQWMyQWhnQ1FDQVBRUUpJRFFBZ0FpQUNRUmhxSUE5QkFtdEJBWFlpQnhEeUFUWUNDQ0FDS0FJSUlBSkJFR29RMEFFb0FnQVFxZ0pGRFFBZ0FpQUNLQUlRS1FJQU53TUFBMEFDUUNBQ0tBSVFJQUlvQWdncEFnQTNBZ0FnQWlBQ0tBSUlOZ0lRSUFkRkRRQWdBaUFDUVJocUlBZEJBV3RCQW0waUJ4RHlBVFlDQ0NBQ0tBSUlJQUlRcWdJTkFRc0xJQUlvQWhBZ0Fpa0NBRGNDQUFzZ0FrRWdhaVFBSUFSQklHb2tBQXNnQlVFQmFpRUZEQUFMQUFzRklBb2dCUkE4S0FJQVFRUnFJQU1RbFFNaEFpQUpRUWhxSUFvZ0JSQThLQUlBSUFJUTdnRWFJQVlnQlJCUUlBa3BBd2czQWdBZ0FpQUVJQUlnQkVraUFoc2hCQ0FGSUFnZ0Foc2hDQ0FGUVFGcUlRVU1BUXNMUWNDVEJFR1d3QUVRTWtITGhBRVFNa0hTekFBUU1rR2JBUkExUWZUUkFCQXlRWm5CQVJBeUVEWVFBQUFMSUFZUStRVWdDVUVnYWlRQVFRQWhBZ05BSUF3UVF5QUNUUVJBQWtBZ0FDZ0NaQ0FBS0FKb1RnMEFJQUVRMndVTkFDQUJLQUlBS0FJQUlRSWdBUkRkQlNBQUlBQW9BbVJCQVdvMkFtUWdBQ0FCSUFJZ0F4RG9Bd3NnREJCekJTQUFJQUVnRENBQ0VEd29BZ0FnQXhEb0F5QUNRUUZxSVFJTUFRc0xDeUFMUVNCcUpBQUxHd0VCZnlBQUtBSUFJZ0ZGQkVBUEN5QUJFRE1nQUVFQU5nSUFDMWtCQVgwZ0FDQUNLZ0lJSUFJcUFnQWdBNVFnQWlvQ0JDQUVsSktTSUFJcUFpQWdBaW9DR0NBRGxDQUNLZ0ljSUFTVWtwSWlCWlU0QWdBZ0FTQUNLZ0lVSUFJcUFnd2dBNVFnQWlvQ0VDQUVsSktTSUFXVk9BSUFDMVFCQVg4Z0FCQ25BaUFCQkVBZ0FCQ0tCQ0FCU1FSQUVJOEJBQXNnQUJBMEdpQUFJQUVRc3dZaUFqWUNBQ0FBSUFJMkFnUWdBQkEwSUFJZ0FVRUNkR28yQWdBZ0FFRUFFS0lESUFBZ0FSQ2tBd3NnQUF1bUFRRUZmMEdJQVJBNklnRUVmd05BUVFBaEF5QUNRUU5HUlFSQUEwQWdBMEVFUmtVRVFDQURRUU4wSWdRZ0FTQUNRUVYwSWdWcWFpQUFJQVZxSUFScUt3TUFPUU1BSUFOQkFXb2hBd3dCQ3dzZ0FrRUJhaUVDREFFTEN5QUJRb0NBZ0lDQWdJRHdQemNEZ0FFZ0FVS0FnSUNBZ0lDQWlNQUFOd040SUFGQ2dJQ0FnTWpDNi9jL053TndJQUZDZ0lDQWdKcXo1dHcvTndOb0lBRkJDallDWUNBQkJVRUFDd3NMQUNBQUlBRkJKQkJBR2dzS0FDQUJJQUJyUVF4dEMxc0JBbjhnQWtFQUlBSkJBRW9iSVFJRFFDQUNJQVJIQkVBZ0FDQUVRUUowYWdKL0lBTWdBeWdDQUVIOWh3MXNRY085bWdGcUlnVTJBZ0FnQUNBRlFSQjJRZi8vQVhFZ0FXOUJBblJxQ3hCS0lBUkJBV29oQkF3QkN3c0xzQUlCQlg4Z0FTQUFFRU1pQTBzRVFDTUFRU0JySWdVa0FBSkFJQUVnQTJzaUFTQUFFRFFvQWdBZ0FDZ0NCR3RCQW5WTkJFQWpBRUVRYXlJREpBQWdBeUFBSUFFUXR3SWlBU2dDQkNFRUEwQWdBU2dDQ0NBRVJ3UkFJQUFRTkNBQktBSUVJQUlRakFJZ0FTQUJLQUlFUVFScUlnUTJBZ1FNQVFzTElBRVFkQ0FEUVJCcUpBQU1BUXNnQUJBMElRTWdCVUVJYWlBQUlBQVFReUFCYWhEZEFpQUFFRU1nQXhEVkFpSURJUVFqQUVFUWF5SUdKQUFnQmlBRVFRaHFJQUVRb3dNaUFTZ0NBQ0VIQTBBZ0FTZ0NCQ0FIUndSQUlBUW9BaEFnQVNnQ0FDQUNFSXdDSUFFZ0FTZ0NBRUVFYWlJSE5nSUFEQUVMQ3lBQkVMQUJJQVpCRUdva0FDQUFJQU1RM0FJZ0F4QzRBZ3NnQlVFZ2FpUUFEd3NnQVNBRFNRUkFJQUFnQUNnQ0FDQUJRUUowYWhDWkJBc0xEUUFnQUNnQ0FCb2dBQkRuQlF0TEFRSi9Jd0JCRUdzaUFTUUFJQUZCQ0dvQ2Z5TUFRUkJySWdJa0FDQUNRUWhxSUFCQkNHb29BZ0FRZUNnQ0FDRUFJQUpCRUdva0FDQUFDeEI0S0FJQUlRQWdBVUVRYWlRQUlBQUxFd0FnQUNBQUtBSUFRUUZySWdBMkFnQWdBQXNZQVFGL0l3QkJFR3NpQVNRQUlBQVFNeUFCUVJCcUpBQUxGd0FnQUJEOEJTQUFRUUEyQWdnZ0FFR2M0Z00yQWdBTEhBQWdBRUgvLy8vL0Ewc0VRRUdYRWhDVUFRQUxJQUJCQW5RUVN3dGdBZ04vQVh3Z0FDZ0NCQ0lDSUFFb0FnUkdCRUFnQWtFQUlBSkJBRW9iSVFJRFFDQUNJQU5HUlFSQUlBVWdBMEVEZENJRUlBQW9BZ0JxS3dNQUlBRW9BZ0FnQkdvckF3Q2lvQ0VGSUFOQkFXb2hBd3dCQ3dzZ0JROExRUUFRQVFBTEZnQkJBVUVnSUFCQkFXdG5hM1FnQUNBQVFRSlBHd3ZZQVFJRGZ3RjlJd0JCRUdzaUFpUUFJQUlnQVRZQ0RBSkFJQUlnQVVFQlJnUi9RUUlGSUFFZ0FVRUJhM0ZGRFFFZ0FSQ2dBZ3NpQVRZQ0RBc0NRQ0FBRUlrQklnTWdBVWtFUUNBQUlBRVEvd1VNQVFzZ0FTQURUdzBBSUFNUTRRRWhCQUovSUFBUVBTZ0NBTE1nQUJCYUtnSUFsWTBpQlVNQUFJQlBYU0FGUXdBQUFBQmdjUVJBSUFXcERBRUxRUUFMSVFFZ0FnSi9JQVFFUUNBQkVQZ0REQUVMSUFFUW9BSUxOZ0lJSUFJZ0FrRU1haUFDUVFocUVJQUJLQUlBSWdFMkFnd2dBU0FEVHcwQUlBQWdBUkQvQlFzZ0FrRVFhaVFBQ3hRQUlBQWdBUkJLSUFCQkJHb2dBVUVFYWhCS0N3Y0FJQUJCUEdvTEpBRUNmeU1BUVJCcklnQWtBQ0FBUVFocVFRQVFlQ2dDQUNFQklBQkJFR29rQUNBQkN6UUJBbjlCQ0JBNklnRUVmeUFCSUFCQkEzUVFPaUlDTmdJQUlBSkZCRUFnQVJBelFRQVBDeUFCSUFBMkFnUWdBUVZCQUFzTFZBRUNmeU1BUVJCcklnSWtBQ0FDSUFBZ0FSQ3BCaUlCS0FJRUlRTURRQ0FCS0FJSUlBTkhCRUFnQUJBMEdpQUJLQUlFRUlVR0lBRWdBU2dDQkVFSWFpSUROZ0lFREFFTEN5QUJFSFFnQWtFUWFpUUFDejBCQVg4akFFRVFheUlCSkFBZ0FVRUlhaUFBS0FJQUtBSUFRVUJyRUlFRUdpQUJLQUlJRURRUVdpRUFJQUZCQ0dvUXp3RWdBVUVRYWlRQUlBQUxHUUVCZnlBQUVKRUJJUUlnQUNBQkVQZ0VJQUFnQWhDSUJnc2tBQ0FBSUFFb0FnQTJBZ0FnQUNBQktBSUVJZ0UyQWdRZ0FRUkFJQUVRbEFNTElBQUxMQUVCZnlNQVFSQnJJZ0VrQUNBQlFRQTJBZ3dnQUNBQlFReHFJQUZCQ0dvUW1BTWdBVUVRYWlRQUlBQUxGUUFnQUVIdzNRRTJBZ0FnQUVFRWFoQ1dCQ0FBQzFVQkFuOGdBRUdBM2dFMkFnQWdBRUU0YWhCeklBQkJMR29RY3lBQVFTQnFJZ0VRb3dZZ0FTZ0NBQVJBSUFFZ0FTZ0NBQkNlQmlBQkVEUWFJQUVvQWdBaEFpQUJFSkFDR2lBQ0VETUxJQUFRZ3dRYUlBQUxFd0FnQUNBRG9pQUJJQVNpb0NBQ0lBV2lvQXREQVFGL0l3QkJFR3NpQVNRQUlBQVFOQm9nQVVILy8vLy9BVFlDRENBQlFmLy8vLzhITmdJSUlBRkJER29nQVVFSWFoREtBU2dDQUNFQUlBRkJFR29rQUNBQUN4UUFJQUFnQUtJZ0FTQUJvcUFnQWlBQ29xQ2ZDdzBBSUFBZ0FwUWdBU0FCbEpNTGJBRUJmeUFCRURRYUl3QkJFR3NpQWlRQUlBQkNBRGNDQUNBQ1FRQTJBZ3dnQUVFSWFpQUNRUXhxRUlvRElBSkJFR29rQUNBQUlBRW9BZ0EyQWdBZ0FDQUJLQUlFTmdJRUlBRVFOQ2dDQUNFQ0lBQVFOQ0FDTmdJQUlBRVFORUVBTmdJQUlBRkNBRGNDQUNBQUMwTUJBWDhqQUVFUWF5SUJKQUFnQUJBMEdpQUJRZi8vLy84RE5nSU1JQUZCLy8vLy93YzJBZ2dnQVVFTWFpQUJRUWhxRU1vQktBSUFJUUFnQVVFUWFpUUFJQUFMa1FJQ0RIOEJmRUYvSVFvQ1FDQUJLQUlJSWdZZ0FpZ0NCRWNOQUNBQUtBSUVJZ01nQVNnQ0JFY05BQ0FBS0FJSUlnY2dBaWdDQ0VjTkFFRUFJUW9nQTBFQUlBTkJBRW9iSVFzZ0IwRUFJQWRCQUVvYklRd2dCa0VBSUFaQkFFb2JJUTBnQUNnQ0FDRURBMEFnQkNBTFJnMEJJQVFnQm13aERrRUFJUVVEUUNBRklBeEdSUVJBSUFOQ0FEY0RBQ0FDS0FJQUlBVkJBM1JxSVFnZ0FTZ0NBQ0FPUVFOMGFpRUpRUUFoQUVRQUFBQUFBQUFBQUNFUEEwQWdBQ0FOUmtVRVFDQURJQThnQ1NzREFDQUlLd01Bb3FBaUR6a0RBQ0FBUVFGcUlRQWdDVUVJYWlFSklBZ2dCMEVEZEdvaENBd0JDd3NnQlVFQmFpRUZJQU5CQ0dvaEF3d0JDd3NnQkVFQmFpRUVEQUFMQUFzZ0NndkpBZ0lDZndGOUFrQUNRQ0FHUVFGSURRQWdCU2dDQkNBR1FRRnFUUTBBSUFkQkFVZ05BU0FIUVFGcUlnZ2dCU2dDQ0U4TkFTQUZJQWRCQVdzUVRTRUpJQVVnQnhCTklRY2dCU0FJRUUwaENDQUFJQWNnQmtFQ2RDSUZhaUlBS2dJRUlBQkJCR3NpQmlvQ0FKTkRBQUFBUDVRNEFnQWdBU0FGSUFocUlnRXFBZ0FnQlNBSmFpSUZLZ0lBazBNQUFBQS9sRGdDQUNBQ0lBQXFBZ1FnQmlvQ0FDQUFLZ0lBSWdvZ0NwS1RramdDQUNBRElBRXFBZ0FnQlNvQ0FDQUFLZ0lBSWdvZ0NwS1RramdDQUNBRUlBVkJCR3NxQWdBZ0FTb0NCSklnQlNvQ0JDQUJRUVJyS2dJQWtwTkRBQUNBUHBRNEFnQVBDMEhBa3dSQnRza0JFREpCNjdvQkVESkI4aVFRTWtHY0FoQTFRZm9wRURKQjZjUUJFRElRTmhBQUFBdEJ3Sk1FUVpQS0FSQXlRZXU2QVJBeVFmSWtFREpCblFJUU5VSDZLUkF5UWU3RkFSQXlFRFlRQUFBTEpBRUJmeU1BUVJCcklnRWtBQ0FCUVFocUlBQVFlQ2dDQUNFQUlBRkJFR29rQUNBQUN5c0FJQUFvQWdBYUlBQW9BZ0FnQUJEUkFVRURkR29hSUFBb0FnQWFJQUFvQWdBZ0FCQkVRUU4wYWhvTFZRRUJmeUFBS0FJRUlRRURRQ0FCSUFBb0FnaEhCRUFnQUNnQ0VCb2dBQ0FBS0FJSVFTUnJOZ0lJREFFTEN5QUFLQUlBQkVBZ0FDZ0NFQm9nQUNnQ0FDRUJJQUFRUFNnQ0FDQUFLQUlBYXhvZ0FSQXpDd3VlQVFFRWZ5QUFFTXdHSUFBUU5Cb2dBVUVFYWlJRElnSWdBaWdDQUNBQUtBSUVJQUFvQWdBaUJHc2lBa0ZjYlVFa2JHb2lCVFlDQUNBQ1FRRk9CRUFnQlNBRUlBSVFRQm9MSUFBZ0F4QktJQUJCQkdvZ0FVRUlhaEJLSUFBUU5DQUJFRDBRU2lBQklBRW9BZ1EyQWdBZ0FCQ0ZBUm9nQUNnQ0FCb2dBQ2dDQUNBQUVQRUJRU1JzYWhvZ0FDZ0NBQ0FBRVBFQlFTUnNhaG9nQUNnQ0FCb0xmd0VDZnlNQVFSQnJJZ1FrQUNBRVFRQTJBZ3dnQUVFTWFpQUVRUXhxSUFNUXNRRWdBUVJBSUFBb0FoQWFJQUZCeCtQeE9Fc0VRRUc0MHdFUWxBRUFDeUFCUVNSc0VFc2hCUXNnQUNBRk5nSUFJQUFnQlNBQ1FTUnNhaUlDTmdJSUlBQWdBallDQkNBQUVEMGdCU0FCUVNSc2FqWUNBQ0FFUVJCcUpBQWdBQXM0QVFGOUlBQkRBQUNBUDBFQklBUjBzcFVpQlNBQ2xDQUZRd0FBQUQrVVF3QUFBTCtTSWdLU09BSUFJQUVnQlNBRGxDQUNramdDQUFzSUFDQUFJQUVRVEFzWEFRRi9JQUFRaFFFaEFTQUFFTW9HSUFBZ0FSRElCZ3NFQUVFQkN6RUJBWDhnQUJEQ0JpQUFLQUlBQkVBZ0FDQUFLQUlBRU1FR0lBQVFOQm9nQUNnQ0FDRUJJQUFRa2dJYUlBRVFNd3NMTkFBZ0FDZ0NBQm9nQUNnQ0FDQUFFUEFCUVFKMGFob2dBQ2dDQUNBQUVFTkJBblJxR2lBQUtBSUFJQUFROEFGQkFuUnFHZ3NzQVFGL0lBQVF6QVlnQUNnQ0FBUkFJQUFReWdZZ0FCQTBHaUFBS0FJQUlRRWdBQkR4QVJvZ0FSQXpDd3NZQVFGL0lBQVFReUVDSUFBZ0FSQzRCaUFBSUFJUXRnWUxRZ0VDZnlNQVFTQnJJZ0lrQUNBQUVQRUJJQUZKQkVBZ0FCQTBJUU1nQUNBQ1FRaHFJQUVnQUJDRkFTQURFSkVFSWdBUWtBUWdBQkNQQkFzZ0FrRWdhaVFBQy9jSEFRZC9JQUVnQUJDb0FTSUNTd1JBSXdCQklHc2lDQ1FBQWtBZ0FTQUNheUlHSUFBUU5DZ0NBQ0FBS0FJRWEwRUZkVTBFUUNNQVFSQnJJZ0lrQUNBQ0lBQTJBZ0FnQWlBQUtBSUVJZ0UyQWdRZ0FpQUJJQVpCQlhScU5nSUlJQUlvQWdRaEFRTkFJQUlvQWdnZ0FVY0VRQ0FBRURRYUlBSW9BZ1FRdmdZZ0FpQUNLQUlFUVNCcUlnRTJBZ1FNQVFzTElBSVFkQ0FDUVJCcUpBQU1BUXNnQUJBMElRY2dDRUVJYWlFQ0FuOGdBQkNvQVNBR2FpRUZJd0JCRUdzaUF5UUFJQU1nQlRZQ0RBSi9Jd0JCRUdzaUJDUUFJQUFRTkJvZ0JFSC8vLzgvTmdJTUlBUkIvLy8vL3djMkFnZ2dCRUVNYWlBRVFRaHFFTW9CS0FJQUlRRWdCRUVRYWlRQUlBRWdCVThMQkVBZ0FCQ1NBaUlFSUFGQkFYWkpCRUFnQXlBRVFRRjBOZ0lJSUFOQkNHb2dBMEVNYWhDQUFTZ0NBQ0VCQ3lBRFFSQnFKQUFnQVF3QkN4Q1BBUUFMSVFNZ0FCQ29BU0VGUVFBaEFTTUFRUkJySWdRa0FDQUVRUUEyQWd3Z0FrRU1haUFFUVF4cUlBY1FzUUVnQXdSQUlBSW9BaEFhSUFOQi8vLy9QMHNFUUVHNDB3RVFsQUVBQ3lBRFFRVjBFRXNoQVFzZ0FpQUJOZ0lBSUFJZ0FTQUZRUVYwYWlJRk5nSUlJQUlnQlRZQ0JDQUNFRDBnQVNBRFFRVjBhallDQUNBRVFSQnFKQUFqQUVFUWF5SURKQUFnQXlBQ0tBSUlOZ0lBSUFJb0FnZ2hBU0FESUFKQkNHbzJBZ2dnQXlBQklBWkJCWFJxTmdJRUlBTW9BZ0FoQVFOQUlBTW9BZ1FnQVVjRVFDQUNLQUlRR2lBREtBSUFFTDRHSUFNZ0F5Z0NBRUVnYWlJQk5nSUFEQUVMQ3lBREVMQUJJQU5CRUdva0FDQUFFTUlHSUFBUU5Cb2dBQ2dDQUNFRklBQW9BZ1FoQkNBQ1FRUnFJZ2NoQmdOQUlBUWdCVWNFUUNBR0tBSUFRU0JySWdGQ0FEY0NBQ0FCUWdBM0FoQWdBVUlBTndJSUlBRkJHR29RdFFJYUlBRWdCRUVnYXlJRUlnTW9BZ0EyQWdBZ0FTQURLQUlFTmdJRUlBRWdBeWdDQ0RZQ0NDQUJJQU1vQWd3MkFnd2dBU0FES0FJUU5nSVFJQUVnQXlnQ0ZEWUNGQ0FCUVJocUlBTkJHR29Ra1FZZ0JpQUdLQUlBUVNCck5nSUFEQUVMQ3lBQUlBY1FTaUFBUVFScUlBSkJDR29RU2lBQUVEUWdBaEE5RUVvZ0FpQUNLQUlFTmdJQUlBQVFxQUVhSUFBb0FnQWFJQUFvQWdBZ0FCQ1NBa0VGZEdvYUlBQW9BZ0FnQUJDU0FrRUZkR29hSUFBb0FnQWFJQUlvQWdRaEFBTkFJQUFnQWlnQ0NFY0VRQ0FDS0FJUUdpQUNJQUlvQWdoQklHc2lBVFlDQ0NBQkVJNEREQUVMQ3lBQ0tBSUFCRUFnQWlnQ0VCb2dBaWdDQUNFQUlBSVFQU2dDQUNBQ0tBSUFheG9nQUJBekN3c2dDRUVnYWlRQUR3c2dBU0FDU1FSQUlBQW9BZ0FnQVVFRmRHb2hBU0FBRUtnQkdpQUFJQUVRd1FZZ0FDZ0NBQm9nQUNnQ0FDQUFFSklDUVFWMGFob2dBQ2dDQUJvZ0FDZ0NBQ0FBRUtnQlFRVjBhaG9MQzFVQkFYOGdBQ2dDQkNFQkEwQWdBU0FBS0FJSVJ3UkFJQUFvQWhBYUlBQWdBQ2dDQ0VFQmF6WUNDQXdCQ3dzZ0FDZ0NBQVJBSUFBb0FoQWFJQUFvQWdBaEFTQUFFRDBvQWdBZ0FDZ0NBR3NhSUFFUU13c0xVUUVCZnlBQUVKd0ZJQUFRTkNBQUtBSUFJQUFvQWdRZ0FVRUVhaUlDRUxvQ0lBQWdBaEJLSUFCQkJHb2dBVUVJYWhCS0lBQVFOQ0FCRUQwUVNpQUJJQUVvQWdRMkFnQWdBQ0FBRUpFQkVNOEdDMk1CQW44akFFRVFheUlFSkFBZ0JFRUFOZ0lNSUFCQkRHb2dCRUVNYWlBREVMRUJJQUVFUUNBQUtBSVFHaUFCRUVzaEJRc2dBQ0FGTmdJQUlBQWdBaUFGYWlJQ05nSUlJQUFnQWpZQ0JDQUFFRDBnQVNBRmFqWUNBQ0FFUVJCcUpBQWdBQXVMQVFFR2Z3TkFJQVZCQTBjRVFDQUFJQVZCQkhRaUIyb2lCaUVJUVFBaEF3TkFJQU5CQkVjRVFDQURRUUowSWdRZ0FpQUhhbW9nQmlvQ0FDQUJJQVJxSWdRcUFnQ1VJQVlxQWdRZ0JDb0NFSlNTSUFncUFnZ2dCQ29DSUpTU09BSUFJQU5CQVdvaEF3d0JDd3NnQWlBSGFpSURJQVlxQWd3Z0F5b0NESkk0QWd3Z0JVRUJhaUVGREFFTEN3dGJBUUovSXdCQkVHc2lBaVFBSUFJZ0FUWUNEQ0FCSUFBUTF3WWlBMDBFUUNBQUVOMEJJZ0FnQTBFQmRra0VRQ0FDSUFCQkFYUTJBZ2dnQWtFSWFpQUNRUXhxRUlBQktBSUFJUU1MSUFKQkVHb2tBQ0FERHdzUWp3RUFDeVFBSUFBZ0FUWUNBQ0FBSUFFb0FnUWlBVFlDQkNBQUlBRWdBa0VVYkdvMkFnZ2dBQXVRQWdFRGZ3SkFJQUVnQWlnQ0VDSUVCSDhnQkFWQkFDRUVBbjhnQWlBQ0xRQktJZ05CQVdzZ0EzSTZBRW9nQWlnQ0FDSURRUWh4QkVBZ0FpQURRU0J5TmdJQVFYOE1BUXNnQWtJQU53SUVJQUlnQWlnQ0xDSUROZ0ljSUFJZ0F6WUNGQ0FDSUFNZ0FpZ0NNR28yQWhCQkFBc05BU0FDS0FJUUN5QUNLQUlVSWdWclN3UkFJQUlnQUNBQklBSW9BaVFSQkFBUEN3Si9JQUlzQUV0QmYwb0VRQ0FCSVFRRFFDQUJJQVFpQTBVTkFob2dBQ0FEUVFGcklnUnFMUUFBUVFwSERRQUxJQUlnQUNBRElBSW9BaVFSQkFBaUJDQURTUTBDSUFBZ0Eyb2hBQ0FDS0FJVUlRVWdBU0FEYXd3QkN5QUJDeUVFSUFVZ0FDQUVFRUFhSUFJZ0FpZ0NGQ0FFYWpZQ0ZDQUJJUVFMSUFRTFN3RUNmeUFBS0FJRUlnWkJDSFVoQnlBQUtBSUFJZ0FnQVNBQ0lBWkJBWEVFZnlBREtBSUFJQWRxS0FJQUJTQUhDeUFEYWlBRVFRSWdCa0VDY1JzZ0JTQUFLQUlBS0FJVUVRc0FDeUFBQWtBZ0FDZ0NCQ0FCUncwQUlBQW9BaHhCQVVZTkFDQUFJQUkyQWh3TEM1b0JBQ0FBUVFFNkFEVUNRQ0FBS0FJRUlBSkhEUUFnQUVFQk9nQTBBa0FnQUNnQ0VDSUNSUVJBSUFCQkFUWUNKQ0FBSUFNMkFoZ2dBQ0FCTmdJUUlBQW9BakJCQVVjTkFpQURRUUZHRFFFTUFnc2dBU0FDUmdSQUlBQW9BaGdpQWtFQ1JnUkFJQUFnQXpZQ0dDQURJUUlMSUFBb0FqQkJBVWNOQWlBQ1FRRkdEUUVNQWdzZ0FDQUFLQUlrUVFGcU5nSWtDeUFBUVFFNkFEWUxDMTBCQVg4Z0FDZ0NFQ0lEUlFSQUlBQkJBVFlDSkNBQUlBSTJBaGdnQUNBQk5nSVFEd3NDUUNBQklBTkdCRUFnQUNnQ0dFRUNSdzBCSUFBZ0FqWUNHQThMSUFCQkFUb0FOaUFBUVFJMkFoZ2dBQ0FBS0FJa1FRRnFOZ0lrQ3dzSkFDQUFJQUVRNFFZTEt3RUJmeUFBUVl6a0F6WUNBQUpBSUFBb0FnUkJER3NpQVVFSWFoRHpBMEYvU2cwQUlBRVFNd3NnQUF1K0FRRURmeU1BUVJCcklnTWtBQ0FESUFFMkFnd0NRQUpBQWtBQ1FDQUFFSXdCQkVBZ0FCQ2FBaUVCSUFBb0FnUWlCQ0FCUVFGcklnSkdEUUVNQXd0QkFTRUVRUUVoQWlBQUxRQUxJZ0ZCQVVjTkFRc2dBQ0FDUVFFZ0FpQUNFT1lHSUFRaEFTQUFFSXdCRFFFTElBQWlBaUFCUVFGcUVLc0JEQUVMSUFBb0FnQWhBaUFBSUFSQkFXb1FuZ0VnQkNFQkN5QUNJQUZCQW5ScUlnQWdBMEVNYWhDREFTQURRUUEyQWdnZ0FFRUVhaUFEUVFocUVJTUJJQU5CRUdva0FBdTdBUUVEZnlNQVFSQnJJZ01rQUNBRElBRTZBQThDUUFKQUFrQUNRQ0FBRUl3QkJFQWdBQkNhQWlFQklBQW9BZ1FpQkNBQlFRRnJJZ0pHRFFFTUF3dEJDaUVFUVFvaEFpQUFMUUFMSWdGQkNrY05BUXNnQUNBQ1FRRWdBaUFDRUtzRUlBUWhBU0FBRUl3QkRRRUxJQUFpQWlBQlFRRnFFS3NCREFFTElBQW9BZ0FoQWlBQUlBUkJBV29RbmdFZ0JDRUJDeUFCSUFKcUlnQWdBMEVQYWhDVkFTQURRUUE2QUE0Z0FFRUJhaUFEUVE1cUVKVUJJQU5CRUdva0FBdXVBUUVEZnlNQVFSQnJJZ1VrQUNBQ1FXOGdBV3ROQkVBZ0FCQStJUVlDZnlBQlFlZi8vLzhIU1FSQUlBVWdBVUVCZERZQ0NDQUZJQUVnQW1vMkFnd2dCVUVNYWlBRlFRaHFFSUFCS0FJQUVPb0NEQUVMUVc0TFFRRnFJZ2NRU3lFQ0lBUUVRQ0FDSUFZZ0JCRGJBUXNnQXlBRWF5SURCRUFnQWlBRWFpQUVJQVpxSUFNUTJ3RUxJQUZCQ2tjRVFDQUdFRE1MSUFBZ0FoQ2ZBU0FBSUFjUTFBRWdCVUVRYWlRQUR3c1Ewd0VBQzNjQkEzOGpBRUVRYXlJREpBQWdBa0Z2VFFSQUFrQWdBa0VLVFFSQUlBQWdBaENyQVNBQUlRUU1BUXNnQUNBQ0VPb0NRUUZxSWdVUVN5SUVFSjhCSUFBZ0JSRFVBU0FBSUFJUW5nRUxJQVFnQVNBQ0VOc0JJQU5CQURvQUR5QUNJQVJxSUFOQkQyb1FsUUVnQTBFUWFpUUFEd3NRMHdFQUN4Y0FJQUFvQWdnUVZFY0VRQ0FBS0FJSUVNZ0VDeUFBQ3hzQkFYOUJBU0VCSUFBUWpBRUVmeUFBRUpvQ1FRRnJCVUVCQ3dzNkFRRi9Jd0JCRUdzaUF5UUFJQU1nQWpZQ0RDQURRUWhxSUFOQkRHb1F3UUVoQWlBQUlBRVFnZ0loQUNBQ0VNQUJJQU5CRUdva0FDQUFDd3NBSUFRZ0FqWUNBRUVEQyswSkFDQUFBbjhDUUVISW1nUXRBQUJCQVhFTkFFSEltZ1FRYjBVTkFFSEFtZ1FDZndKQVFieWFCQzBBQUVFQmNRMEFRYnlhQkJCdlJRMEFRWUNuQkJCaFFZQ25CRUh3dEFNMkFnQWpBRUVRYXlJQUpBQkJrS2NFUWdBM0F3QWdBRUVBTmdJTVFhQ25CQ0FBUVF4cUVJb0RRYUNvQkVFQU9nQUFJQUJCRUdva0FCRHpCa0VjU1FSQUVJOEJBQXRCa0tjRVFaQ25CQkNYQWtFY0VQSUdJZ0EyQWdCQmxLY0VJQUEyQWdCQmtLY0VFRm9nQUVId0FHbzJBZ0JCQUJEeEJrRWNFSUlIUWJDb0JFSGx0QU1RbXdFYVFaQ25CQkJESVFCQmtLY0VFSUVIUVpDbkJDQUFFSUFIUWNDa0JCQmhRY0NrQkVIb3Z3TTJBZ0JCd0tRRVFZeVpCQkJnRUdWQnlLUUVFR0ZCeUtRRVFZakFBellDQUVISXBBUkJsSmtFRUdBUVpVSFFwQVFRWVVIY3BBUkJBRG9BQUVIWXBBUkJBRFlDQUVIUXBBUkJoTFVETmdJQVFkaWtCRUdzbEFNb0FnQTJBZ0JCMEtRRVFkaWFCQkJnRUdWQjRLUUVFR0ZCNEtRRVFiUzVBellDQUVIZ3BBUkIwSm9FRUdBUVpVSG9wQVFRWVVIb3BBUkJ5TG9ETmdJQVFlaWtCRUhnbWdRUVlCQmxRZkNrQkJCaFFmQ2tCRUc0dFFNMkFnQkIrS1FFRUZRMkFnQkI4S1FFUWVpYUJCQmdFR1ZCZ0tVRUVHRkJnS1VFUWR5N0F6WUNBRUdBcFFSQjhKb0VFR0FRWlVHSXBRUVFZVUdJcFFSQjBMd0ROZ0lBUVlpbEJFSDRtZ1FRWUJCbFFaQ2xCQkJoUVppbEJFR3UyQUE3QVFCQmtLVUVRZWkxQXpZQ0FFR2NwUVFRUmhwQmtLVUVRWUNiQkJCZ0VHVkJzS1VFRUdGQnVLVUVRcTZBZ0lEQUJUY0NBRUd3cFFSQmtMWUROZ0lBUWNDbEJCQkdHa0d3cFFSQmlKc0VFR0FRWlVIUXBRUVFZVUhRcFFSQnFNQUROZ0lBUWRDbEJFR2NtUVFRWUJCbFFkaWxCQkJoUWRpbEJFR2N3Z00yQWdCQjJLVUVRYVNaQkJCZ0VHVkI0S1VFRUdGQjRLVUVRZkREQXpZQ0FFSGdwUVJCckprRUVHQVFaVUhvcFFRUVlVSG9wUVJCMk1VRE5nSUFRZWlsQkVHMG1RUVFZQkJsUWZDbEJCQmhRZkNsQkVHd3pRTTJBZ0JCOEtVRVFkeVpCQkJnRUdWQitLVUVFR0ZCK0tVRVFjVE9BellDQUVINHBRUkI1SmtFRUdBUVpVR0FwZ1FRWVVHQXBnUkJ1TThETmdJQVFZQ21CRUhzbVFRUVlCQmxRWWltQkJCaFFZaW1CRUdzMEFNMkFnQkJpS1lFUWZTWkJCQmdFR1ZCa0tZRUVHRkJrS1lFUWFEUkF6WUNBRUdRcGdSQi9Ka0VFR0FRWlVHWXBnUVFZVUdZcGdSQnhOSUROZ0lBUVppbUJFR0VtZ1FRWUJCbFFhQ21CQkJoUWFDbUJFSG8wd00yQWdCQm9LWUVRWXlhQkJCZ0VHVkJxS1lFRUdGQnFLWUVRWXpWQXpZQ0FFR29wZ1JCbEpvRUVHQVFaVUd3cGdRUVlVRzRwZ1JCbk9FRE5nSUFRYkNtQkVHZ3h3TTJBZ0JCdUtZRVFkREhBellDQUVHd3BnUkJ2SmtFRUdBUVpVSEFwZ1FRWVVISXBnUkJ3T0VETmdJQVFjQ21CRUdveVFNMkFnQkJ5S1lFUWRqSkF6WUNBRUhBcGdSQnhKa0VFR0FRWlVIUXBnUVFZVUhZcGdRUTdnWkIwS1lFUVpUTEF6WUNBRUhRcGdSQnpKa0VFR0FRWlVIZ3BnUVFZVUhvcGdRUTdnWkI0S1lFUWJETUF6WUNBRUhncGdSQjFKa0VFR0FRWlVId3BnUVFZVUh3cGdSQnNOWUROZ0lBUWZDbUJFR2NtZ1FRWUJCbFFmaW1CQkJoUWZpbUJFR28xd00yQWdCQitLWUVRYVNhQkJCZ0VHVkJ0Sm9FUVlDbkJEWUNBRUc0bWdSQnRKb0VOZ0lBUWJ5YUJCQnVDMEc0bWdRb0FnQUxFTElFUWNTYUJFSEFtZ1EyQWdCQnlKb0VFRzRMUWNTYUJDZ0NBQ2dDQUNJQUN6WUNBQ0FBRUpRREN4TUFJQUFnQVNnQ0FDSUFOZ0lBSUFBUWxBTUxHZ0FnQUNBQklBRW9BZ0JCREdzb0FnQnFLQUlZTmdJQUlBQUxNUUFnQWlnQ0FDRUNBMEFDUUNBQUlBRkhCSDhnQUNnQ0FDQUNSdzBCSUFBRklBRUxEd3NnQUVFRWFpRUFEQUFMQUF2MUF3RUJmeU1BUVJCcklnd2tBQ0FNSUFBMkFnd0NRQUpBSUFBZ0JVWUVRQ0FCTFFBQVJRMEJRUUFoQUNBQlFRQTZBQUFnQkNBRUtBSUFJZ0ZCQVdvMkFnQWdBVUV1T2dBQUlBY1FOMFVOQWlBSktBSUFJZ0VnQ0d0Qm53RktEUUlnQ2lnQ0FDRUNJQWtnQVVFRWFqWUNBQ0FCSUFJMkFnQU1BZ3NDUUNBQUlBWkhEUUFnQnhBM1JRMEFJQUV0QUFCRkRRRkJBQ0VBSUFrb0FnQWlBU0FJYTBHZkFVb05BaUFLS0FJQUlRQWdDU0FCUVFScU5nSUFJQUVnQURZQ0FFRUFJUUFnQ2tFQU5nSUFEQUlMUVg4aEFDQUxJQXRCZ0FGcUlBeEJER29RdEFRZ0Myc2lCVUg4QUVvTkFTQUZRUUoxUWRDeUEyb3RBQUFoQmdKQUFrQUNRQUpBSUFWQjJBQnJRUjUzRGdRQkFRQUFBZ3NnQXlBRUtBSUFJZ0ZIQkVBZ0FVRUJheTBBQUVIZkFIRWdBaTBBQUVIL0FIRkhEUVVMSUFRZ0FVRUJhallDQUNBQklBWTZBQUJCQUNFQURBUUxJQUpCMEFBNkFBQU1BUXNnQWl3QUFDSUFJQVpCM3dCeFJ3MEFJQUlnQUVHQUFYSTZBQUFnQVMwQUFFVU5BQ0FCUVFBNkFBQWdCeEEzUlEwQUlBa29BZ0FpQUNBSWEwR2ZBVW9OQUNBS0tBSUFJUUVnQ1NBQVFRUnFOZ0lBSUFBZ0FUWUNBQXNnQkNBRUtBSUFJZ0JCQVdvMkFnQWdBQ0FHT2dBQVFRQWhBQ0FGUWRRQVNnMEJJQW9nQ2lnQ0FFRUJhallDQUF3QkMwRi9JUUFMSUF4QkVHb2tBQ0FBQzF3QkFYOGpBRUVRYXlJRkpBQWdCVUVJYWlBQkVFY2dCVUVJYWhDV0FVSFFzZ05COExJRElBSVE2QUVnQXlBRlFRaHFFSnNDSWdFUXZ3RTJBZ0FnQkNBQkVLRUJOZ0lBSUFBZ0FSQ2dBU0FGUVFocUVFSWdCVUVRYWlRQUMrTVZBUVIvSXdCQkVHc2lBQ1FBQWtBZ0FFRU1haUFBUVFocUVDTU5BRUc4aUFRZ0FDZ0NERUVDZEVFRWFoQTZJZ0UyQWdBZ0FVVU5BQ0FBS0FJSUVEb2lBUVJBUWJ5SUJDZ0NBQ0FBS0FJTVFRSjBha0VBTmdJQVFieUlCQ2dDQUNBQkVDSkZEUUVMUWJ5SUJFRUFOZ0lBQ3lBQVFSQnFKQUFDUUVING1BUXRBQUJCQVhFTkFFSDRtQVFRYjBVTkFFSDRod01vQWdBaUFTRUNJd0JCRUdzaUFDUUFRWlNXQkJEZ0JDRURRYnlXQkVITWxnUTJBZ0JCdEpZRUlBSTJBZ0JCbEpZRVFZU0lBellDQUVISWxnUkJBRG9BQUVIRWxnUkJmellDQUNBQVFRaHFJQU1RK0FKQmxKWUVJQUJCQ0dwQmxKWUVLQUlBS0FJSUVRSUFJQUJCQ0dvUVFpQUFRUkJxSkFCQjhKQUVFUEVFSVFCQjZKQUVRY2lNQXpZQ0FDQUFRZHlNQXpZQ0FFSHNrQVJCQURZQ0FFRzhqQU1vQWdCQjZKQUVha0dVbGdRUXVBTWpBRUVRYXlJQUpBQkIxSllFRU5zRUlRSkIvSllFUVl5WEJEWUNBRUgwbGdRZ0FUWUNBRUhVbGdSQmtJa0ROZ0lBUVlpWEJFRUFPZ0FBUVlTWEJFRi9OZ0lBSUFCQkNHb2dBaEQ0QWtIVWxnUWdBRUVJYWtIVWxnUW9BZ0FvQWdnUkFnQWdBRUVJYWhCQ0lBQkJFR29rQUVISWtRUVE2d1FoQUVIQWtRUkIrSXdETmdJQUlBQkJqSTBETmdJQVFjU1JCRUVBTmdJQVFleU1BeWdDQUVIQWtRUnFRZFNXQkJDNEEwR1Vsd1JCaUlBREtBSUFJZ0JCeEpjRUVPMEVRWmlTQkVHVWx3UVF6Z05CekpjRUlBQkIvSmNFRU93RVFleVNCRUhNbHdRUXpRTkJoSmdFUVl5QUF5Z0NBQ0lBUWJTWUJCRHRCRUhBa3dSQmhKZ0VFTTREUWVpVUJFSEFrd1FvQWdCQkRHc29BZ0JCd0pNRWFpZ0NHQkRPQTBHOG1BUWdBRUhzbUFRUTdBUkJsSlFFUWJ5WUJCRE5BMEc4bFFSQmxKUUVLQUlBUVF4cktBSUFRWlNVQkdvb0FoZ1F6UU5CNkpBRUtBSUFRUXhyS0FJQVFlaVFCR3BCbUpJRUVQa0NRY0NSQkNnQ0FFRU1heWdDQUVIQWtRUnFRZXlTQkJENUFrSEFrd1FvQWdCQkRHc29BZ0JCd0pNRWFoRHBCRUdVbEFRb0FnQkJER3NvQWdCQmxKUUVhaERwQkVIQWt3UW9BZ0JCREdzb0FnQkJ3Sk1FYWtHWWtnUVErUUpCbEpRRUtBSUFRUXhyS0FJQVFaU1VCR3BCN0pJRUVQa0NRZmlZQkJCdUMwSDgvUU1RandJYVFaRCtBeENQQWhvakFFRVFheUlBSkFBakFFRWdheUlCSkFCQmtQd0JRWUQ5QVVIby9RRkJBRUg0L1FGQlBVSDcvUUZCQUVINy9RRkJBRUhFN2dGQi9mMEJRVDRRRnlNQVFSQnJJZ0lrQUVHUS9BRkJBVUdBL2dGQitQMEJRZHdBUVQ4UUZTQUNRUkJxSkFBZ0FVRUFOZ0ljSUFGQndBQTJBaGdnQVNBQktRTVlOd01RSXdCQkVHc2lBaVFBSUFJZ0FTa0NFRGNEQ0VHUS9BRkIrUGtCUVFOQmhQNEJRWmovQVVIZEFDQUNRUWhxRUtnQ1FRQVFCaUFDUVJCcUpBQWdBVUVBTmdJY0lBRkJ3UUEyQWhnZ0FTQUJLUU1ZTndNSUl3QkJFR3NpQWlRQUlBSWdBU2tDQ0RjRENFR1EvQUZCZ3ZvQlFRUkJvUDhCUWJEL0FVSGVBQ0FDUVFocUVLZ0NRUUFRQmlBQ1FSQnFKQUFnQVVFQU5nSWNJQUZCd2dBMkFoZ2dBU0FCS1FNWU53TUFJd0JCRUdzaUFpUUFJQUlnQVNrQ0FEY0RDRUdRL0FGQmlmb0JRUUpCdVA4QlFjRC9BVUhmQUNBQ1FRaHFFS2dDUVFBUUJpQUNRUkJxSkFBakFFRVFheUlDSkFBZ0FrSERBRFlDREVHUS9BRkJqdm9CUVFOQnhQOEJRZXovQVVIZ0FDQUNRUXhxRUtrQ1FRQVFCaUFDUVJCcUpBQWpBRUVRYXlJQ0pBQWdBa0hFQURZQ0RFR1EvQUZCa3ZvQlFRUkJnSUFDUVpDQUFrSGhBQ0FDUVF4cUVLa0NRUUFRQmlBQ1FSQnFKQUFnQVVFZ2FpUUFJd0JCSUdzaUFTUUFRWUNCQWtIQWdRSkIrSUVDUVFCQitQMEJRY1VBUWZ2OUFVRUFRZnY5QVVFQVFjL3VBVUg5L1FGQnhnQVFGeU1BUVJCcklnSWtBRUdBZ1FKQkFVR0lnZ0pCK1AwQlFlSUFRY2NBRUJVZ0FrRVFhaVFBSUFGQkFEWUNIQ0FCUWNnQU5nSVlJQUVnQVNrREdEY0RFQ01BUVJCcklnSWtBQ0FDSUFFcEFoQTNBd2hCZ0lFQ1FmajVBVUVEUVl5Q0FrR1kvd0ZCNHdBZ0FrRUlhaENvQWtFQUVBWWdBa0VRYWlRQUlBRkJBRFlDSENBQlFja0FOZ0lZSUFFZ0FTa0RHRGNEQ0NNQVFSQnJJZ0lrQUNBQ0lBRXBBZ2czQXdoQmdJRUNRWUw2QVVFRVFhQ0NBa0d3L3dGQjVBQWdBa0VJYWhDb0FrRUFFQVlnQWtFUWFpUUFJQUZCQURZQ0hDQUJRY29BTmdJWUlBRWdBU2tER0RjREFDTUFRUkJySWdJa0FDQUNJQUVwQWdBM0F3aEJnSUVDUVluNkFVRUNRYkNDQWtIQS93RkI1UUFnQWtFSWFoQ29Ba0VBRUFZZ0FrRVFhaVFBSXdCQkVHc2lBaVFBSUFKQnl3QTJBZ3hCZ0lFQ1FZNzZBVUVEUWJpQ0FrSHMvd0ZCNWdBZ0FrRU1haENwQWtFQUVBWWdBa0VRYWlRQUl3QkJFR3NpQWlRQUlBSkJ6QUEyQWd4QmdJRUNRWkw2QVVFRVFkQ0NBa0dRZ0FKQjV3QWdBa0VNYWhDcEFrRUFFQVlnQWtFUWFpUUFJQUZCSUdva0FDTUFRUkJySWdFa0FFSFg3Z0ZCQkVIZ2dnSkJrSUFDUWMwQVFTVVFCU0FCUVJCcUpBQkIzZTRCUVNZUTN3RkI1dTRCUVNjUTN3RWpBRUVRYXlJQkpBQkI3KzRCUVFOQitJSUNRZXovQVVIUEFFRW9FQVVnQVVFUWFpUUFJd0JCRUdzaUFTUUFRZjd1QVVFQ1FZU0RBa0hBL3dGQjBBQkJLUkFGSUFGQkVHb2tBRUdLN3dGQktoRGZBVUdYN3dGQkt4RGZBVUduN3dGQkxCREFCU01BUVJCcklnRWtBRUcwN3dGQkFrR1lnd0pCd1A4QlFkSUFRUzBRQlNBQlFSQnFKQUFDZjBHc2d3SkJ2KzhCUWJTREFrSFRBRUg5L1FGQjFBQVFMeUFBUVFocUMwSEo3d0ZCQUJDTkEwSE03d0ZCQkJDTkEwSFM3d0ZCQ0JDTkEwSFo3d0ZCREJDTkF4cEJySU1DRUMxQjNlOEJRUzRRd0FWQjZ1OEJRUzhRM3dGQjkrOEJRVEFRM3dFakFFRVFheUlCSkFCQml2QUJRUUpCdUlNQ1FjQ0RBa0hYQUVFeEVBVWdBVUVRYWlRQUl3QkJFR3NpQVNRQVFaYndBVUVCUWNTREFrSDQvUUZCMkFCQk1oQUZJQUZCRUdva0FFR2k4QUZCTXhDK0JVRzU4QUZCTkJDOUJVSFE4QUZCTlJDK0JVSG04QUZCTmhDOUJVSDg4QUZCTnhEbEEwR044UUZCT0JEZkFVR2U4UUZCT1JEbEEwR3I4UUZCT2hEZkFVRzQ4UUZCT3hEbEEwSEo4UUZCUEJEZkFVSGE4UUZCeE9zREVGOUI5L0VCUWN6ckF4QmZRWlB5QVVISTZ3TVFYeUFBUVFBMkFnaEJ0UElCSUFCQkNHb1FYeUFBUVFFMkFnaEJ4ZklCSUFCQkNHb1FYeUFBUVFBMkFnaEIxZklCSUFCQkNHb1FYeUFBUWVRQU5nSUlRZXZ5QVNBQVFRaHFFRjhnQUVFQU5nSUlRWWJ6QVNBQVFRaHFFRjhnQUVFQk5nSUlRYUR6QVNBQVFRaHFFRjhnQUVFQU5nSUlRYnJ6QVNBQVFRaHFFRjhnQUVFRk5nSUlRZFh6QVNBQVFRaHFFRjhnQUVLQWdJQ0FnSUNBOEQ4M0F3aEI1L01CUWJqcEF5QUFLd01JRUJZZ0FFRUFOZ0lJUWZ6ekFTQUFRUWhxRUY4Z0FFRUJOZ0lJUVkvMEFTQUFRUWhxRUY4Z0FFRUNOZ0lJUWFIMEFTQUFRUWhxRUY4Z0FFRUROZ0lJUWJQMEFTQUFRUWhxRUY4Z0FFRUVOZ0lJUWNiMEFTQUFRUWhxRUY4Z0FFRUFOZ0lJUWR6MEFTQUFRUWhxRUY4Z0FFRUJOZ0lJUWZ2MEFTQUFRUWhxRUY4Z0FFRUNOZ0lJUVovMUFTQUFRUWhxRUY4Z0FFRUROZ0lJUWNIMUFTQUFRUWhxRUY4Z0FFRUFOZ0lJUWVmMUFTQUFRUWhxRUY4Z0FFRUJOZ0lJUVlqMkFTQUFRUWhxRUY4Z0FFRUNOZ0lJUWJmMkFTQUFRUWhxRUY4Z0FFRUROZ0lJUWVIMkFTQUFRUWhxRUY4Z0FFRUVOZ0lJUVl6M0FTQUFRUWhxRUY4Z0FFRUZOZ0lJUWNEM0FTQUFRUWhxRUY4Z0FFRUdOZ0lJUWZQM0FTQUFRUWhxRUY4Z0FFRUhOZ0lJUWFENEFTQUFRUWhxRUY4Z0FFRUlOZ0lJUWNmNEFTQUFRUWhxRUY4Z0FFRUpOZ0lJUWZUNEFTQUFRUWhxRUY4Z0FFRVFhaVFBUVpIL0EwSHZBUkVBQUJvTFJRRUJmeU1BUVJCcklnTWtBQ0FESUFFMkFnd2dBeUFDTmdJSUlBTWdBMEVNYWhEQkFTRUJJQUJCOGJJRElBTW9BZ2dRK1FRaEFDQUJFTUFCSUFOQkVHb2tBQ0FBQzZVQ0FnVi9CSDRqQUVFZ2F5SUVKQUFDUUFKQUFrQWdBU0FDUndSQVFaVC9BeWdDQUNFSVFaVC9BMEVBTmdJQUl3QkJFR3NpQlNRQUVGUWFJd0JCRUdzaUJpUUFJd0JCRUdzaUJ5UUFJQWNnQVNBRVFSeHFRUUlRdndNZ0JpQUhLUU1BTndNQUlBWWdCeWtEQ0RjRENDQUhRUkJxSkFBZ0JTQUdLUU1BTndNQUlBVWdCaWtEQ0RjRENDQUdRUkJxSkFBZ0JDQUZLUU1BTndNQUlBUWdCU2tEQ0RjRENDQUZRUkJxSkFBZ0JDa0RDQ0VKSUFRcEF3QWhDa0dVL3dNb0FnQWlBVVVOQVNBRUtBSWNJQUpIRFFJZ0NpRUxJQWtoRENBQlFjUUFSdzBEREFJTElBTkJCRFlDQUF3Q0MwR1Uvd01nQ0RZQ0FDQUVLQUljSUFKR0RRRUxJQU5CQkRZQ0FDQUxJUW9nRENFSkN5QUFJQW8zQXdBZ0FDQUpOd01JSUFSQklHb2tBQXUyQVFJQ2ZBTi9Jd0JCRUdzaUJTUUFBa0FDUUFKQUlBQWdBVWNFUUVHVS93TW9BZ0FoQjBHVS93TkJBRFlDQUJCVUdpTUFRUkJySWdZa0FDQUdJQUFnQlVFTWFrRUJFTDhESUFZcEF3QWdCaWtEQ0JEUUF5RURJQVpCRUdva0FFR1Uvd01vQWdBaUFFVU5BU0FGS0FJTUlBRkhEUUlnQXlFRUlBQkJ4QUJIRFFNTUFnc2dBa0VFTmdJQURBSUxRWlQvQXlBSE5nSUFJQVVvQWd3Z0FVWU5BUXNnQWtFRU5nSUFJQVFoQXdzZ0JVRVFhaVFBSUFNTHRnRUNBbjBEZnlNQVFSQnJJZ1VrQUFKQUFrQUNRQ0FBSUFGSEJFQkJsUDhES0FJQUlRZEJsUDhEUVFBMkFnQVFWQm9qQUVFUWF5SUdKQUFnQmlBQUlBVkJER3BCQUJDL0F5QUdLUU1BSUFZcEF3Z1E5QVFoQXlBR1FSQnFKQUJCbFA4REtBSUFJZ0JGRFFFZ0JTZ0NEQ0FCUncwQ0lBTWhCQ0FBUWNRQVJ3MEREQUlMSUFKQkJEWUNBQXdDQzBHVS93TWdCellDQUNBRktBSU1JQUZHRFFFTElBSkJCRFlDQUNBRUlRTUxJQVZCRUdva0FDQURDOFlCQWdOL0FYNGpBRUVRYXlJRUpBQUNmZ0pBQWtBZ0FDQUJSd1JBQWtBQ1FDQUFMUUFBSWdWQkxVY05BQ0FBUVFGcUlnQWdBVWNOQUF3QkMwR1Uvd01vQWdBaEJrR1Uvd05CQURZQ0FDQUFJQVJCREdvZ0F4QlVFTUFESVFjQ1FFR1Uvd01vQWdBaUFBUkFJQVFvQWd3Z0FVY05BU0FBUWNRQVJnMEVEQVVMUVpUL0F5QUdOZ0lBSUFRb0Fnd2dBVVlOQkFzTEN5QUNRUVEyQWdCQ0FBd0NDeUFDUVFRMkFnQkNmd3dCQzBJQUlBZDlJQWNnQlVFdFJoc0xJUWNnQkVFUWFpUUFJQWNMMXdFQ0EzOEJmaU1BUVJCcklnUWtBQUovQWtBQ1FBSkFJQUFnQVVjRVFBSkFBa0FnQUMwQUFDSUZRUzFIRFFBZ0FFRUJhaUlBSUFGSERRQU1BUXRCbFA4REtBSUFJUVpCbFA4RFFRQTJBZ0FnQUNBRVFReHFJQU1RVkJEQUF5RUhBa0JCbFA4REtBSUFJZ0FFUUNBRUtBSU1JQUZIRFFFZ0FFSEVBRVlOQlF3RUMwR1Uvd01nQmpZQ0FDQUVLQUlNSUFGR0RRTUxDd3NnQWtFRU5nSUFRUUFNQXdzZ0IwTC8vLy8vRDFnTkFRc2dBa0VFTmdJQVFYOE1BUXRCQUNBSHB5SUFheUFBSUFWQkxVWWJDeUVBSUFSQkVHb2tBQ0FBQzVVREFRRi9Jd0JCa0FKcklnQWtBQ0FBSUFJMkFvQUNJQUFnQVRZQ2lBSWdBeERMQVNFR0lBQkIwQUZxSUFNZ0FFSC9BV29Rd3dJZ0FFSEFBV29RUmlJQklBRVFUeEJCSUFBZ0FVRUFFRDhpQWpZQ3ZBRWdBQ0FBUVJCcU5nSU1JQUJCQURZQ0NBTkFBa0FnQUVHSUFtb2dBRUdBQW1vUWpnRkZEUUFnQUNnQ3ZBRWdBUkEzSUFKcVJnUkFJQUVRTnlFRElBRWdBUkEzUVFGMEVFRWdBU0FCRUU4UVFTQUFJQU1nQVVFQUVEOGlBbW8yQXJ3QkN5QUFRWWdDYWhCbklBWWdBaUFBUWJ3QmFpQUFRUWhxSUFBc0FQOEJJQUJCMEFGcUlBQkJFR29nQUVFTWFrSFFzZ01RbkFJTkFDQUFRWWdDYWhCMkdnd0JDd3NDUUNBQVFkQUJhaEEzUlEwQUlBQW9BZ3dpQXlBQVFSQnFhMEdmQVVvTkFDQUFJQU5CQkdvMkFnd2dBeUFBS0FJSU5nSUFDeUFGSUFJZ0FDZ0N2QUVnQkNBR0VMMEVOZ0lBSUFCQjBBRnFJQUJCRUdvZ0FDZ0NEQ0FFRUlnQklBQkJpQUpxSUFCQmdBSnFFSHNFUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQW9nQ0lRSWdBUkE1R2lBQVFkQUJhaEE1R2lBQVFaQUNhaVFBSUFJTDNBRUNBMzhCZmlNQVFSQnJJZ1FrQUFKL0FrQUNRQUpBSUFBZ0FVY0VRQUpBQWtBZ0FDMEFBQ0lGUVMxSERRQWdBRUVCYWlJQUlBRkhEUUFNQVF0QmxQOERLQUlBSVFaQmxQOERRUUEyQWdBZ0FDQUVRUXhxSUFNUVZCREFBeUVIQWtCQmxQOERLQUlBSWdBRVFDQUVLQUlNSUFGSERRRWdBRUhFQUVZTkJRd0VDMEdVL3dNZ0JqWUNBQ0FFS0FJTUlBRkdEUU1MQ3dzZ0FrRUVOZ0lBUVFBTUF3c2dCMEwvL3dOWURRRUxJQUpCQkRZQ0FFSC8vd01NQVF0QkFDQUhweUlBYXlBQUlBVkJMVVliQ3lFQUlBUkJFR29rQUNBQVFmLy9BM0VMdGdFQ0FYNENmeU1BUVJCcklnVWtBQUpBQWtBZ0FDQUJSd1JBUVpUL0F5Z0NBQ0VHUVpUL0EwRUFOZ0lBSUFBZ0JVRU1haUFERUZRUXd3UWhCQUpBUVpUL0F5Z0NBQ0lBQkVBZ0JTZ0NEQ0FCUncwQklBQkJ4QUJHRFFNTUJBdEJsUDhESUFZMkFnQWdCU2dDRENBQlJnMERDd3NnQWtFRU5nSUFRZ0FoQkF3QkN5QUNRUVEyQWdBZ0JFSUJXUVJBUXYvLy8vLy8vLy8vL3dBaEJBd0JDMEtBZ0lDQWdJQ0FnSUIvSVFRTElBVkJFR29rQUNBRUM4TUJBZ0ovQVg0akFFRVFheUlFSkFBQ2Z3SkFBa0FnQUNBQlJ3UkFRWlQvQXlnQ0FDRUZRWlQvQTBFQU5nSUFJQUFnQkVFTWFpQURFRlFRd3dRaEJnSkFRWlQvQXlnQ0FDSUFCRUFnQkNnQ0RDQUJSdzBCSUFCQnhBQkdEUVFNQXd0QmxQOERJQVUyQWdBZ0JDZ0NEQ0FCUmcwQ0N3c2dBa0VFTmdJQVFRQU1BZ3NnQmtLQWdJQ0FlRk1nQmtMLy8vLy9CMVZ5RFFBZ0JxY01BUXNnQWtFRU5nSUFRZi8vLy84SElBWkNBVmtOQUJwQmdJQ0FnSGdMSVFBZ0JFRVFhaVFBSUFBTG1RRUJCSDhqQUVFUWF5SUZKQUFnQVNBQ0VNOERJZ1JCNy8vLy93Tk5CRUFDUUNBRVFRRk5CRUFnQUNBRUVLc0JJQUFoQXd3QkN5QUFJQVFRNlFKQkFXb2lCaERvQWlJREVKOEJJQUFnQmhEVUFTQUFJQVFRbmdFTEEwQWdBU0FDUndSQUlBTWdBUkNEQVNBRFFRUnFJUU1nQVVFRWFpRUJEQUVMQ3lBRlFRQTJBZ3dnQXlBRlFReHFFSU1CSUFWQkVHb2tBQThMRU5NQkFBc1dBQ0FBSUFFZ0FrS0FnSUNBZ0lDQWdJQi9FTVFFQzVnRUFnZC9CSDRqQUVFUWF5SUlKQUFDUUFKQUFrQWdBa0VrVEFSQUlBQXRBQUFpQmcwQklBQWhCQXdDQzBHVS93TkJIRFlDQUVJQUlRTU1BZ3NnQUNFRUFrQURRQ0FHUVJoMFFSaDFFSUVDUlEwQklBUXRBQUVoQmlBRVFRRnFJZ1VoQkNBR0RRQUxJQVVoQkF3QkN3SkFJQVF0QUFBaUJVRXJhdzREQUFFQUFRdEJmMEVBSUFWQkxVWWJJUWNnQkVFQmFpRUVDd0ovQWtBZ0FrRnZjUTBBSUFRdEFBQkJNRWNOQUVFQklRa2dCQzBBQVVIZkFYRkIyQUJHQkVBZ0JFRUNhaUVFUVJBTUFnc2dCRUVCYWlFRUlBSkJDQ0FDR3d3QkN5QUNRUW9nQWhzTElncXNJUXhCQUNFQ0EwQUNRQUpBSUFRc0FBQWlCVUV3YXlJR1FmOEJjVUVKVFEwQUlBVkI0UUJyUWY4QmNVRVpUUVJBSUFWQjF3QnJJUVlNQVFzZ0JVSEJBR3RCL3dGeFFSbExEUUVnQlVFM2F5RUdDeUFHSUFwT0RRQWdDQ0FNSUFzUXVnRkJBU0VGQWtBZ0NDa0RDRUlBVWcwQUlBc2dESDRpRFNBR3JDSU9RbitGVmcwQUlBMGdEbndoQzBFQklRa2dBaUVGQ3lBRVFRRnFJUVFnQlNFQ0RBRUxDeUFCQkVBZ0FTQUVJQUFnQ1JzMkFnQUxBa0FDUUNBQ0JFQkJsUDhEUWNRQU5nSUFJQWRCQUNBRFFnR0RJZ3hRR3lFSElBTWhDd3dCQ3lBRElBdFdEUUVnQTBJQmd5RU1DeUFNcHlBSGNrVUVRRUdVL3dOQnhBQTJBZ0FnQTBJQmZTRUREQUlMSUFNZ0Mxb05BRUdVL3dOQnhBQTJBZ0FNQVFzZ0N5QUhyQ0lEaFNBRGZTRURDeUFJUVJCcUpBQWdBd3N4QVFGL1FhVHZBeWdDQUNFQklBQUVRRUdrN3dOQjBQOERJQUFnQUVGL1JoczJBZ0FMUVg4Z0FTQUJRZEQvQTBZYkM3VUlBUVYvSUFFb0FnQWhCQUpBQWtBQ1FBSkFBa0FDUUFKQUFuOENRQUpBQWtBQ1FDQURSUTBBSUFNb0FnQWlCa1VOQUNBQVJRUkFJQUloQXd3REN5QURRUUEyQWdBZ0FpRUREQUVMQWtCQnBPOERLQUlBS0FJQVJRUkFJQUJGRFFFZ0FrVU5EQ0FDSVFZRFFDQUVMQUFBSWdNRVFDQUFJQU5CLzc4RGNUWUNBQ0FBUVFScUlRQWdCRUVCYWlFRUlBWkJBV3NpQmcwQkRBNExDeUFBUVFBMkFnQWdBVUVBTmdJQUlBSWdCbXNQQ3lBQ0lRTWdBRVVOQXd3RkN5QUVFSndCRHd0QkFTRUZEQU1MUVFBTUFRdEJBUXNoQlFOQUlBVkZCRUFnQkMwQUFFRURkaUlGUVJCcklBWkJHblVnQldweVFRZExEUU1DZnlBRVFRRnFJZ1VnQmtHQWdJQVFjVVVOQUJvZ0JTMEFBRUhBQVhGQmdBRkhCRUFnQkVFQmF5RUVEQWNMSUFSQkFtb2lCU0FHUVlDQUlIRkZEUUFhSUFVdEFBQkJ3QUZ4UVlBQlJ3UkFJQVJCQVdzaEJBd0hDeUFFUVFOcUN5RUVJQU5CQVdzaEEwRUJJUVVNQVFzRFFBSkFJQVJCQTNFZ0JDMEFBQ0lHUVFGclFmNEFTM0lOQUNBRUtBSUFJZ1pCZ1lLRUNHc2dCbkpCZ0lHQ2hIaHhEUUFEUUNBRFFRUnJJUU1nQkNnQ0JDRUdJQVJCQkdvaUJTRUVJQVlnQmtHQmdvUUlhM0pCZ0lHQ2hIaHhSUTBBQ3lBRklRUUxJQVpCL3dGeElnVkJBV3RCL2dCTkJFQWdBMEVCYXlFRElBUkJBV29oQkF3QkN3c2dCVUhDQVdzaUJVRXlTdzBESUFSQkFXb2hCQ0FGUVFKMFFZQ0RBMm9vQWdBaEJrRUFJUVVNQUFzQUN3TkFJQVZGQkVBZ0EwVU5Cd05BQWtBQ1FBSkFJQVF0QUFBaUJVRUJheUlIUWY0QVN3UkFJQVVoQmd3QkN5QUVRUU54SUFOQkJVbHlEUUVDUUFOQUlBUW9BZ0FpQmtHQmdvUUlheUFHY2tHQWdZS0VlSEVOQVNBQUlBWkIvd0Z4TmdJQUlBQWdCQzBBQVRZQ0JDQUFJQVF0QUFJMkFnZ2dBQ0FFTFFBRE5nSU1JQUJCRUdvaEFDQUVRUVJxSVFRZ0EwRUVheUlEUVFSTERRQUxJQVF0QUFBaEJnc2dCa0gvQVhFaUJVRUJheUVIQ3lBSFFmNEFTdzBCQ3lBQUlBVTJBZ0FnQUVFRWFpRUFJQVJCQVdvaEJDQURRUUZySWdNTkFRd0pDd3NnQlVIQ0FXc2lCVUV5U3cwRElBUkJBV29oQkNBRlFRSjBRWUNEQTJvb0FnQWhCa0VCSVFVTUFRc2dCQzBBQUNJRlFRTjJJZ2RCRUdzZ0J5QUdRUnAxYW5KQkIwc05BUUpBQWtBQ2Z5QUVRUUZxSWdjZ0JVR0FBV3NnQmtFR2RISWlCVUYvU2cwQUdpQUhMUUFBUVlBQmF5SUhRVDlMRFFFZ0JFRUNhaUlJSUFjZ0JVRUdkSElpQlVGL1NnMEFHaUFJTFFBQVFZQUJheUlIUVQ5TERRRWdCeUFGUVFaMGNpRUZJQVJCQTJvTElRUWdBQ0FGTmdJQUlBTkJBV3NoQXlBQVFRUnFJUUFNQVF0QmxQOERRUmsyQWdBZ0JFRUJheUVFREFVTFFRQWhCUXdBQ3dBTElBUkJBV3NoQkNBR0RRRWdCQzBBQUNFR0N5QUdRZjhCY1EwQUlBQUVRQ0FBUVFBMkFnQWdBVUVBTmdJQUN5QUNJQU5yRHd0QmxQOERRUmsyQWdBZ0FFVU5BUXNnQVNBRU5nSUFDMEYvRHdzZ0FTQUVOZ0lBSUFJTEl3RUNmeUFBSVFFRFFDQUJJZ0pCQkdvaEFTQUNLQUlBRFFBTElBSWdBR3RCQW5VTERnQWdBQkRLQkFSQUlBQVFNd3NMRndBZ0FCREZBVUVBUnlBQVFTQnlRZUVBYTBFR1NYSUxGd0FnQUVFQVJ5QUFRWkNUQTBkeElBQkJxSk1EUjNFTG5RTUJBMzhDUUNBQkxRQUFEUUJCd0pNREVQNENJZ0VFUUNBQkxRQUFEUUVMSUFCQkRHeEIwSk1EYWhEK0FpSUJCRUFnQVMwQUFBMEJDMEdZbEFNUS9nSWlBUVJBSUFFdEFBQU5BUXRCblpRRElRRUxBa0FEUUNBQklBSnFMUUFBSWdSRklBUkJMMFp5UlFSQVFROGhCQ0FDUVFGcUlnSkJEMGNOQVF3Q0N3c2dBaUVFQzBHZGxBTWhBd0pBQWtBQ1FBSkFBa0FnQVMwQUFDSUNRUzVHRFFBZ0FTQUVhaTBBQUEwQUlBRWhBeUFDUWNNQVJ3MEJDeUFETFFBQlJRMEJDeUFEUVoyVUF4Q0ZBa1VOQUNBRFFhV1VBeENGQWcwQkN5QUFSUVJBUWZTU0F5RUNJQU10QUFGQkxrWU5BZ3RCQUE4TFFZU1pCQ2dDQUNJQ0JFQURRQ0FESUFKQkNHb1FoUUpGRFFJZ0FpZ0NHQ0lDRFFBTEMwR0VtUVFvQWdBaUFnUkFBMEFnQXlBQ1FRaHFFSVVDUlFSQUlBSVBDeUFDS0FJWUlnSU5BQXNMQWtCQkhCQTZJZ0pGQkVCQkFDRUNEQUVMSUFKQjlKSURLUUlBTndJQUlBSkJDR29pQVNBRElBUVFRQm9nQVNBRWFrRUFPZ0FBSUFKQmhKa0VLQUlBTmdJWVFZU1pCQ0FDTmdJQUN5QUNRZlNTQXlBQUlBSnlHeUVDQ3lBQ0N5d0JBWDhnQUNnQ0FDSUJCRUFnQVJEVEJFRi9FTFlCUlFSQUlBQW9BZ0JGRHdzZ0FFRUFOZ0lBQzBFQkN5d0JBWDhnQUNnQ0FDSUJCRUFnQVJEV0JFRi9FTFlCUlFSQUlBQW9BZ0JGRHdzZ0FFRUFOZ0lBQzBFQkMxY0JBbjhDUUNBQUtBSUFJZ0pGRFFBQ2Z5QUNLQUlZSWdNZ0FpZ0NIRVlFUUNBQ0lBRWdBaWdDQUNnQ05CRURBQXdCQ3lBQ0lBTkJCR28yQWhnZ0F5QUJOZ0lBSUFFTFFYOFF0Z0ZGRFFBZ0FFRUFOZ0lBQ3dzT0FFRUFJQUFnQUVGL0VMWUJHd3NUQUNBQUlBQW9BZ0JCREdzb0FnQnFFTU1EQ3hNQUlBQWdBQ2dDQUVFTWF5Z0NBR29ROGdJTE1RRUJmeUFBS0FJTUlnRWdBQ2dDRUVZRVFDQUFJQUFvQWdBb0FpZ1JBQUFQQ3lBQUlBRkJCR28yQWd3Z0FTZ0NBQXNuQVFGL0lBQW9BZ3dpQVNBQUtBSVFSZ1JBSUFBZ0FDZ0NBQ2dDSkJFQUFBOExJQUVvQWdBTEVBQWdBQkRNQkNBQkVNd0VjMEVCY3dzMEFRRi9JQUFvQWd3aUFTQUFLQUlRUmdSQUlBQWdBQ2dDQUNnQ0tCRUFBQThMSUFBZ0FVRUJhallDRENBQkxBQUFFTU1CQ3lvQkFYOGdBQ2dDRENJQklBQW9BaEJHQkVBZ0FDQUFLQUlBS0FJa0VRQUFEd3NnQVN3QUFCRERBUXNRQUNBQUVNMEVJQUVRelFSelFRRnpDeE1BSUFBZ0FDZ0NBRUVNYXlnQ0FHb1F4Z01MRXdBZ0FDQUFLQUlBUVF4cktBSUFhaEQxQWdzUUFDQUFRbjgzQXdnZ0FFSUFOd01BQ3lvQUlBQkJoSXdETmdJQUlBQkJCR29Rc1FRZ0FFSUFOd0lZSUFCQ0FEY0NFQ0FBUWdBM0FnZ2dBQXNFQUVGL0N3Y0FJQUFRMmdRTEJ3QWdBQkRhQkFzRUFDQUFDeW9BSUFCQnhJc0ROZ0lBSUFCQkJHb1FzUVFnQUVJQU53SVlJQUJDQURjQ0VDQUFRZ0EzQWdnZ0FBc0pBQ0FBRU1VQ0VETUxpUUVCQlg4akFFRVFheUlCSkFBZ0FVRVFhaUVEQWtBRFFDQUFLQUlrSWdJZ0FDZ0NLQ0FCUVFocUlBTWdBVUVFYWlBQ0tBSUFLQUlVRVFvQUlRUkJmeUVDSUFGQkNHcEJBU0FCS0FJRUlBRkJDR3BySWdVZ0FDZ0NJQkRTQVNBRlJ3MEJBa0FnQkVFQmF3NENBUUlBQ3d0QmYwRUFJQUFvQWlBUTJnTWJJUUlMSUFGQkVHb2tBQ0FDQy84Q0FnVi9BWDRqQUVFZ2F5SUNKQUFDUUNBQUxRQTBCRUFnQUNnQ01DRURJQUZGRFFFZ0FFRUFPZ0EwSUFCQmZ6WUNNQXdCQ3lBQ1FRRTJBaGdnQWtFWWFpQUFRU3hxRU9ZRUtBSUFJZ1JCQUNBRVFRQktHeUVGQWtBRFFDQURJQVZIQkVBZ0FDZ0NJQkQ2QWlJR1FYOUdEUUlnQWtFWWFpQURhaUFHT2dBQUlBTkJBV29oQXd3QkN3c0NRQ0FBTFFBMUJFQWdBaUFDTEFBWU5nSVVEQUVMSUFKQkdHb2hBd05BQWtBZ0FDZ0NLQ0lGS1FJQUlRY0NRQ0FBS0FJa0lBVWdBa0VZYWlBQ1FSaHFJQVJxSWdVZ0FrRVFhaUFDUVJScUlBTWdBa0VNYWhEbEJFRUJhdzREQUFRQkF3c2dBQ2dDS0NBSE53SUFJQVJCQ0VZTkF5QUFLQUlnRVBvQ0lnWkJmMFlOQXlBRklBWTZBQUFnQkVFQmFpRUVEQUVMQ3lBQ0lBSXNBQmcyQWhRTEFrQWdBVVVFUUFOQUlBUkJBVWdOQWlBRVFRRnJJZ1FnQWtFWWFtb3NBQUFnQUNnQ0lCRDdBa0YvUncwQURBTUxBQXNnQUNBQ0tBSVVOZ0l3Q3lBQ0tBSVVJUU1NQVF0QmZ5RURDeUFDUVNCcUpBQWdBd3NNQUNBQUVNZ0RHaUFBRURNTEhRQWdBQ0FCSUFJZ0F5QUVJQVVnQmlBSElBQW9BZ0FvQWhBUkRRQUxKQUVDZnlNQVFSQnJJZ0lrQUNBQUlBRVFwZ2NoQXlBQ1FSQnFKQUFnQVNBQUlBTWJDNGdEQWdWL0FYNGpBRUVnYXlJQ0pBQUNRQ0FBTFFBMEJFQWdBQ2dDTUNFRElBRkZEUUVnQUVFQU9nQTBJQUJCZnpZQ01Bd0JDeUFDUVFFMkFoZ2dBa0VZYWlBQVFTeHFFT1lFS0FJQUlnUkJBQ0FFUVFCS0d5RUZBa0FEUUNBRElBVkhCRUFnQUNnQ0lCRDZBaUlHUVg5R0RRSWdBa0VZYWlBRGFpQUdPZ0FBSUFOQkFXb2hBd3dCQ3dzQ1FDQUFMUUExQkVBZ0FpQUNMUUFZT2dBWERBRUxJQUpCR0dvaEF3TkFBa0FnQUNnQ0tDSUZLUUlBSVFjQ1FDQUFLQUlrSUFVZ0FrRVlhaUFDUVJocUlBUnFJZ1VnQWtFUWFpQUNRUmRxSUFNZ0FrRU1haERsQkVFQmF3NERBQVFCQXdzZ0FDZ0NLQ0FITndJQUlBUkJDRVlOQXlBQUtBSWdFUG9DSWdaQmYwWU5BeUFGSUFZNkFBQWdCRUVCYWlFRURBRUxDeUFDSUFJdEFCZzZBQmNMQWtBZ0FVVUVRQU5BSUFSQkFVZ05BaUFFUVFGcklnUWdBa0VZYW1vc0FBQVF3d0VnQUNnQ0lCRDdBa0YvUncwQURBTUxBQXNnQUNBQ0xBQVhFTU1CTmdJd0N5QUNMQUFYRU1NQklRTU1BUXRCZnlFREN5QUNRU0JxSkFBZ0F3c01BQ0FBRU1rREdpQUFFRE1MRVFBZ0FDQUFLQUlFUVlEQUFISTJBZ1FMSndBZ0FDQUZPZ0FRSUFBZ0JEZ0NEQ0FBSUFNNEFnZ2dBQ0FDT0FJRUlBQWdBVGdDQUNBQUN4SUFJQUFRcFFjZ0FFR0lqd00yQWdBZ0FBdGVBUUovSXdCQkVHc2lBeVFBSUFBUTJ3UWhCQ0FBSUFFMkFpQWdBRUhjaWdNMkFnQWdBMEVJYWlBRUVQZ0NJQU5CQ0dvUXl3TWhBU0FEUVFocUVFSWdBQ0FDTmdJb0lBQWdBVFlDSkNBQUlBRVFud0k2QUN3Z0EwRVFhaVFBQzE0QkFuOGpBRUVRYXlJREpBQWdBQkRnQkNFRUlBQWdBVFlDSUNBQVFmU0pBellDQUNBRFFRaHFJQVFRK0FJZ0EwRUlhaERNQXlFQklBTkJDR29RUWlBQUlBSTJBaWdnQUNBQk5nSWtJQUFnQVJDZkFqb0FMQ0FEUVJCcUpBQUxMQUVCZnlBQUVQOEJJQUFvQWdBRVFDQUFFTjRHSUFBUU5Cb2dBQ2dDQUNFQklBQVF2UUVhSUFFUU13c0xDZ0FnQVNBQWEwRUNkUXQ5QVFOL0l3QkJFR3NpQlNRQUl3QkJFR3NpQXlRQUlBQWdBUkRQQXlFQkEwQWdBUVJBSUFNZ0FEWUNEQ0FESUFNb0Fnd2dBVUVCZGlJRVFRSjBhallDRENBQklBUkJmM05xSUFRZ0F5Z0NEQ0FDRVBRQklnUWJJUUVnQXlnQ0RFRUVhaUFBSUFRYklRQU1BUXNMSUFOQkVHb2tBQ0FGUVJCcUpBQWdBQXNTQUNBQUVLVUhJQUJCd0k0RE5nSUFJQUFMakFFQkEzOUIwSWdFUWRDSUJDZ0NBRUVCYWlJRk5nSUFJQUFnQlRZQ0FBSkFJQU1FUUFOQUlBSWdCRUVEZEdvaUJpZ0NBRVVOQWlBRVFRRnFJZ1FnQTBjTkFBc0xJQUFnQVNBQ0lBTkJCSFJCQ0hJUTVnSWdBMEVCZENJQUVQSUVJUUVnQUJBQ0lBRVBDeUFHSUFVMkFnQWdBaUFFUVFOMGFpSUFJQUUyQWdRZ0FFRUFOZ0lJSUFNUUFpQUNDNFFSQWdWL0MzNGpBRUhBQVdzaUJTUUFJQVJDLy8vLy8vLy9QNE1oRWlBQ1F2Ly8vLy8vL3orRElRd2dBaUFFaFVLQWdJQ0FnSUNBZ0lCL2d5RVJJQVJDTUlpblFmLy9BWEVoQndKQUFrQUNRQ0FDUWpDSXAwSC8vd0Z4SWdsQkFXdEIvZjhCVFFSQUlBZEJBV3RCL3Y4QlNRMEJDeUFCVUNBQ1F2Ly8vLy8vLy8vLy93Q0RJZ3BDZ0lDQWdJQ0F3UC8vQUZRZ0NrS0FnSUNBZ0lEQS8vOEFVUnRGQkVBZ0FrS0FnSUNBZ0lBZ2hDRVJEQUlMSUFOUUlBUkMvLy8vLy8vLy8vLy9BSU1pQWtLQWdJQ0FnSURBLy84QVZDQUNRb0NBZ0lDQWdNRC8vd0JSRzBVRVFDQUVRb0NBZ0lDQWdDQ0VJUkVnQXlFQkRBSUxJQUVnQ2tLQWdJQ0FnSURBLy84QWhZUlFCRUFnQXlBQ1FvQ0FnSUNBZ01ELy93Q0ZoRkFFUUVJQUlRRkNnSUNBZ0lDQTRQLy9BQ0VSREFNTElCRkNnSUNBZ0lDQXdQLy9BSVFoRVVJQUlRRU1BZ3NnQXlBQ1FvQ0FnSUNBZ01ELy93Q0ZoRkFFUUVJQUlRRU1BZ3NnQVNBS2hGQU5BaUFDSUFPRVVBUkFJQkZDZ0lDQWdJQ0F3UC8vQUlRaEVVSUFJUUVNQWdzZ0NrTC8vLy8vLy84L1dBUkFJQVZCc0FGcUlBRWdEQ0FCSUF3Z0RGQWlCaHQ1SUFaQkJuU3RmS2NpQmtFUGF4Q1FBVUVRSUFacklRWWdCU2tEdUFFaERDQUZLUU93QVNFQkN5QUNRdi8vLy8vLy96OVdEUUFnQlVHZ0FXb2dBeUFTSUFNZ0VpQVNVQ0lJRzNrZ0NFRUdkSzE4cHlJSVFROXJFSkFCSUFZZ0NHcEJFR3NoQmlBRktRT29BU0VTSUFVcEE2QUJJUU1MSUFWQmtBRnFJQkpDZ0lDQWdJQ0F3QUNFSWhSQ0Q0WWdBMEl4aUlRaUFrS0V5Zm5PdithOGd2VUFJQUo5SWdRUXVnRWdCVUdBQVdwQ0FDQUZLUU9ZQVgwZ0JCQzZBU0FGUWZBQWFpQUZLUU9JQVVJQmhpQUZLUU9BQVVJL2lJUWlCQ0FDRUxvQklBVkI0QUJxSUFSQ0FDQUZLUU40ZlJDNkFTQUZRZEFBYWlBRktRTm9RZ0dHSUFVcEEyQkNQNGlFSWdRZ0FoQzZBU0FGUVVCcklBUkNBQ0FGS1FOWWZSQzZBU0FGUVRCcUlBVXBBMGhDQVlZZ0JTa0RRRUkvaUlRaUJDQUNFTG9CSUFWQklHb2dCRUlBSUFVcEF6aDlFTG9CSUFWQkVHb2dCU2tES0VJQmhpQUZLUU1nUWorSWhDSUVJQUlRdWdFZ0JTQUVRZ0FnQlNrREdIMFF1Z0VnQmlBSklBZHJhaUVHQW41Q0FDQUZLUU1JUWdHR0lBVXBBd0JDUDRpRVFnRjlJZ3BDLy8vLy93K0RJZ1FnQWtJZ2lDSUxmaUlPSUFwQ0lJZ2lDaUFDUXYvLy8vOFBneUlQZm53aUFrSWdpQ0FDSUE1VXJVSWdob1FnQ2lBTGZud2dBa0lnaGlJTElBUWdEMzU4SWdJZ0MxU3RJQUlnQWlBRUlBTkNFWWhDLy8vLy93K0RJZzUrSWc4Z0NpQURRZytHUW9DQS92OFBneUlOZm53aUMwSWdoaUlRSUFRZ0RYNThJQkJVclNBS0lBNStJQXNnRDFTdFFpQ0dJQXRDSUlpRWZIeDhJZ0pXclh4OElBSkNBRkt0ZkgwaUMwTC8vLy8vRDRNaURpQUVmaUlQSUFvZ0RuNGlEU0FFSUF0Q0lJZ2lFSDU4SWd0Q0lJWjhJZzRnRDFTdElBb2dFSDRnQ3lBTlZLMUNJSVlnQzBJZ2lJUjhmQ0FPUWdBZ0FuMGlBa0lnaUNJTElBUitJZzhnQWtMLy8vLy9ENE1pRFNBS2Zud2lBa0lnaGlJUUlBUWdEWDU4SUJCVXJTQUtJQXQrSUFJZ0QxU3RRaUNHSUFKQ0lJaUVmSHg4SWdJZ0RsU3RmQ0FDUWdKOUlnOGdBbFN0ZkVJQmZTSUxRdi8vLy84UGd5SUNJQXhDQW9ZZ0FVSStpSVJDLy8vLy93K0RJZ1IrSWc0Z0FVSWVpRUwvLy8vL0Q0TWlDaUFMUWlDSUlndCtmQ0lOSUE1VXJTQU5JQTBnRDBJZ2lDSU9JQXhDSG9oQy8vL3YvdytEUW9DQUVJUWlESDU4SWcxV3JYd2dDeUFNZm53Z0FpQU1maUlUSUFRZ0MzNThJaEFnRTFTdFFpQ0dJQkJDSUlpRWZDQU5JQTBnRUVJZ2hud2lEVmF0ZkNBTklBMGdDaUFPZmlJVElBOUMvLy8vL3crRElnOGdCSDU4SWhBZ0UxU3RJQkFnRUNBQ0lBRkNBb1pDL1AvLy93K0RJaE4rZkNJUVZxMThmQ0lOVnExOElBMGdDeUFUZmlJTElBd2dEMzU4SWd3Z0JDQU9mbndpQkNBQ0lBcCtmQ0lDUWlDSUlBSWdCRlN0SUFzZ0RGYXRJQVFnREZTdGZIeENJSWFFZkNJRUlBMVVyWHdnQkNBRUlCQWdEaUFUZmlJTUlBb2dEMzU4SWdwQ0lJZ2dDaUFNVksxQ0lJYUVmQ0lLSUJCVXJTQUtJQUpDSUlaOElBcFVyWHg4SWdSV3JYd2lBa0wvLy8vLy8vLy9BRmdFUUNBQlFqR0dJQVJDSUlnaUFTQURRdi8vLy84UGd5SUtmaUlOSUFSQy8vLy8vdytESWd3Z0EwSWdpQ0lMZm53aURrSWdoaUlRSUFvZ0RINThJZzhnRUZTdGZTQVBRZ0JTclgwZ0FrTC8vLy8vRDRNZ0NuNGdEQ0FTUXYvLy8vOFBnMzU4SUFFZ0MzNThJQTBnRGxhdFFpQ0dJQTVDSUlpRWZDQUVJQlJDSUloK0lBTWdBa0lnaUg1OElBSWdDMzU4SUFFZ0VuNThRaUNHZkgwaEVpQUdRUUZySVFaQ0FDQVBmUXdCQ3lBRVFpR0lJUXdnQVVJd2hpQUNRaitHSUFSQ0FZaUVJZ1JDLy8vLy93K0RJZ0VnQTBJZ2lDSUtmaUlQSUF3Z0FrSWZob1FpRFVMLy8vLy9ENE1pRUNBRFF2Ly8vLzhQZ3lJTWZud2lDMElnaGlJVElBRWdESDU4SWc0Z0UxU3RmU0FPUWdCU3JYMGdCQ0FVUWlDSWZpQURJQUpDSVloK2ZDQUNRZ0dJSWdJZ0NuNThJQTBnRW41OFFpQ0dJQW9nRUg0Z0FrTC8vLy8vRDRNZ0RINThJQUVnRWtMLy8vLy9ENE4rZkNBTElBOVVyVUlnaGlBTFFpQ0loSHg4ZlNFU1FnQWdEbjBMSVFFZ0JrR0FnQUZPQkVBZ0VVS0FnSUNBZ0lEQS8vOEFoQ0VSUWdBaEFRd0JDeUFHUWYvL0FHb2hCeUFHUVlHQWYwd0VRQUpBSUFjTkFDQUVJQUZDQVlZZ0ExWWdFa0lCaGlBQlFqK0loQ0lCSUJSV0lBRWdGRkViclh3aUFTQUVWSzBnQWtMLy8vLy8vLzgvZzN3aUFrS0FnSUNBZ0lEQUFJTlFEUUFnQWlBUmhDRVJEQUlMUWdBaEFRd0JDeUFFSUFGQ0FZWWdBMW9nRWtJQmhpQUJRaitJaENJQklCUmFJQUVnRkZFYnJYd2lBU0FFVkswZ0FrTC8vLy8vLy84L2czd2dCNjFDTUlaOElCR0VJUkVMSUFBZ0FUY0RBQ0FBSUJFM0F3Z2dCVUhBQVdva0FBOExJQUJDQURjREFDQUFRb0NBZ0lDQWdPRC8vd0FnRVNBQ0lBT0VVQnMzQXdnZ0JVSEFBV29rQUF1MkF3SURmd0YrSXdCQklHc2lBeVFBQWtBZ0FVTC8vLy8vLy8vLy8vOEFneUlGUW9DQWdJQ0FnTURBUDMwZ0JVS0FnSUNBZ0lEQXY4QUFmVlFFUUNBQlFobUlweUVFSUFCUUlBRkMvLy8vRDRNaUJVS0FnSUFJVkNBRlFvQ0FnQWhSRzBVRVFDQUVRWUdBZ0lBRWFpRUNEQUlMSUFSQmdJQ0FnQVJxSVFJZ0FDQUZRb0NBZ0FpRmhFSUFVZzBCSUFJZ0JFRUJjV29oQWd3QkN5QUFVQ0FGUW9DQWdJQ0FnTUQvL3dCVUlBVkNnSUNBZ0lDQXdQLy9BRkViUlFSQUlBRkNHWWluUWYvLy93RnhRWUNBZ1A0SGNpRUNEQUVMUVlDQWdQd0hJUUlnQlVMLy8vLy8vLysvdjhBQVZnMEFRUUFoQWlBRlFqQ0lweUlFUVpIK0FFa05BQ0FEUVJCcUlBQWdBVUwvLy8vLy8vOC9nMEtBZ0lDQWdJREFBSVFpQlNBRVFZSCtBR3NRa0FFZ0F5QUFJQVZCZ2Y4QUlBUnJFS0lDSUFNcEF3Z2lBRUlaaUtjaEFpQURLUU1BSUFNcEF4QWdBeWtER0lSQ0FGS3RoQ0lGVUNBQVF2Ly8vdytESWdCQ2dJQ0FDRlFnQUVLQWdJQUlVUnRGQkVBZ0FrRUJhaUVDREFFTElBVWdBRUtBZ0lBSWhZUkNBRklOQUNBQ1FRRnhJQUpxSVFJTElBTkJJR29rQUNBQ0lBRkNJSWluUVlDQWdJQjRjWEsrQzZRQkFRVi9Jd0JCZ0FKcklnUWtBQUpBSUFKQkFrZ05BQ0FCSUFKQkFuUnFJZ2NnQkRZQ0FDQUFSUTBBSUFRaEF3TkFJQU1nQVNnQ0FDQUFRWUFDSUFCQmdBSkpHeUlGRUVBYVFRQWhBd05BSUFFZ0EwRUNkR29pQmlnQ0FDQUJJQU5CQVdvaUEwRUNkR29vQWdBZ0JSQkFHaUFHSUFZb0FnQWdCV28yQWdBZ0FpQURSdzBBQ3lBQUlBVnJJZ0JGRFFFZ0J5Z0NBQ0VEREFBTEFBc2dCRUdBQW1va0FBc21BUUYvSUFBb0FnQkJBV3RvSWdGRkJFQWdBQ2dDQkdnaUFFRWdha0VBSUFBYkR3c2dBUXZSQkFFR2Z5TUFRZEFCYXlJRUpBQWdCRUlCTndNSUFrQWdBU0FDYkNJSlJRMEFJQVFnQWpZQ0VDQUVJQUkyQWhSQkFDQUNheUVJSUFJaUFTRUhRUUloQlFOQUlBUkJFR29nQlVFQ2RHb2dBU0lHSUFJZ0IycHFJZ0UyQWdBZ0JVRUJhaUVGSUFZaEJ5QUJJQWxKRFFBTEFrQWdBQ0FBSUFscUlBaHFJZ1pQQkVCQkFTRUZRUUVoQVF3QkMwRUJJUVZCQVNFQkEwQUNmeUFGUVFOR0JFQWdBQ0FDSUFNZ0FTQUVRUkJxRU5NRElBUkJDR3BCQWhDQkF5QUJRUUpxREFFTEFrQWdCRUVRYWlBQlFRRnJJZ2RCQW5ScUtBSUFJQVlnQUd0UEJFQWdBQ0FDSUFNZ0JFRUlhaUFCUVFBZ0JFRVFhaENBQXd3QkN5QUFJQUlnQXlBQklBUkJFR29RMHdNTElBRkJBVVlFUUNBRVFRaHFRUUVRL3dKQkFBd0JDeUFFUVFocUlBY1Evd0pCQVFzaEFTQUVJQVFvQWdoQkFYSWlCVFlDQ0NBQUlBSnFJZ0FnQms4TkFTQUZRUU54SVFVTUFBc0FDeUFBSUFJZ0F5QUVRUWhxSUFGQkFDQUVRUkJxRUlBREEwQUNmd0pBQWtBZ0FVRUJSeUFGUVFGSGNrVUVRQ0FFS0FJTURRRU1CUXNnQVVFQlNnMEJDeUFFUVFocUlBUkJDR29ROWdRaUJoQ0JBeUFFS0FJSUlRVWdBU0FHYWd3QkN5QUVRUWhxUVFJUS93SWdCQ0FFS0FJSVFRZHpOZ0lJSUFSQkNHcEJBUkNCQXlBQUlBaHFJZ2NnQkVFUWFpQUJRUUpySWdaQkFuUnFLQUlBYXlBQ0lBTWdCRUVJYWlBQlFRRnJRUUVnQkVFUWFoQ0FBeUFFUVFocVFRRVEvd0lnQkNBRUtBSUlRUUZ5SWdVMkFnZ2dCeUFDSUFNZ0JFRUlhaUFHUVFFZ0JFRVFhaENBQXlBR0N5RUJJQUFnQ0dvaEFBd0FDd0FMSUFSQjBBRnFKQUFMS3dFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVFGcklRSU1BUXNMSUFBZ0FUWUNCQXZiSFFJUGZ3VitJd0JCa0FGcklnY2tBQ0FIUVFCQmtBRVFPeUlEUVg4MkFrd2dBeUFBTmdJc0lBTkIrUUUyQWlBZ0F5QUFOZ0pVSUFJaERTTUFRYkFDYXlJRkpBQWdBeWdDVEJvQ1FDQUJJZ0l0QUFBaUFFVU5BQUpBQWtBQ1FBSkFBMEFDUUFKQUlBQkIvd0Z4RUlFQ0JFQURRQ0FDSWdCQkFXb2hBaUFBTFFBQkVJRUNEUUFMSUFOQ0FCREVBUU5BQW44Z0F5Z0NCQ0lCSUFNb0FtaEpCRUFnQXlBQlFRRnFOZ0lFSUFFdEFBQU1BUXNnQXhCUkN4Q0JBZzBBQ3lBREtBSUVJUUlnQXlnQ2FBUkFJQU1nQWtFQmF5SUNOZ0lFQ3lBQ0lBTW9BZ2hyckNBREtRTjRJQlI4ZkNFVURBRUxBbjhDUUFKQUlBSXRBQUFpQVVFbFJnUkFJQUl0QUFFaUFFRXFSZzBCSUFCQkpVY05BZ3NnQTBJQUVNUUJJQUlnQVVFbFJtb2hBQUovSUFNb0FnUWlBU0FES0FKb1NRUkFJQU1nQVVFQmFqWUNCQ0FCTFFBQURBRUxJQU1RVVFzaUFTQUFMUUFBUndSQUlBTW9BbWdFUUNBRElBTW9BZ1JCQVdzMkFnUUxJQUZCZjBvTkMwRUFJUXdnRGcwTERBa0xJQlJDQVh3aEZBd0RDMEVBSVFjZ0FrRUNhZ3dCQ3dKQUlBQVF4UUZGRFFBZ0FpMEFBa0VrUncwQUlBSXRBQUZCTUdzaEFDTUFRUkJySWdFZ0RUWUNEQ0FCSUFCQkFuUWdEV3BCQkdzZ0RTQUFRUUZMR3lJQVFRUnFOZ0lJSUFBb0FnQWhCeUFDUVFOcURBRUxJQTBvQWdBaEJ5QU5RUVJxSVEwZ0FrRUJhZ3NoQUVFQUlRd0NRQ0FBTFFBQUVNVUJSUVJBUVFBaEFnd0JDMEVBSVFJRGZ5QUFRUUZxSVFFZ0FpQUFMUUFBYWtFd2F5RUNJQUF0QUFFUXhRRUVmeUFDUVFwc0lRSWdBU0VBREFFRklBRUxDeUVBQ3lBQUxRQUFJZ1JCN1FCSEJIOGdBQVZCQUNFSklBZEJBRWNoRENBQUxRQUJJUVJCQUNFS0lBQkJBV29MSWdGQkFXb2hBRUVESVFZQ1FBSkFBa0FDUUFKQUFrQWdCRUhCQUdzT09nUUtCQW9FQkFRS0Nnb0tBd29LQ2dvS0NnUUtDZ29LQkFvS0JBb0tDZ29LQkFvRUJBUUVCQUFFQlFvQkNnUUVCQW9LQkFJRUNnb0VDZ0lLQ3lBQlFRSnFJQUFnQVMwQUFVSG9BRVlpQVJzaEFFRitRWDhnQVJzaEJnd0VDeUFCUVFKcUlBQWdBUzBBQVVIc0FFWWlBUnNoQUVFRFFRRWdBUnNoQmd3REMwRUJJUVlNQWd0QkFpRUdEQUVMUVFBaEJpQUJJUUFMUVFFZ0JpQUFMUUFBSWdGQkwzRkJBMFlpQkJzaER3SkFJQUZCSUhJZ0FTQUVHeUlMUWRzQVJnMEFBa0FnQzBIdUFFY0VRQ0FMUWVNQVJ3MEJJQUpCQVNBQ1FRRktHeUVDREFJTElBY2dEeUFVRVBvRURBSUxJQU5DQUJERUFRTkFBbjhnQXlnQ0JDSUJJQU1vQW1oSkJFQWdBeUFCUVFGcU5nSUVJQUV0QUFBTUFRc2dBeEJSQ3hDQkFnMEFDeUFES0FJRUlRRWdBeWdDYUFSQUlBTWdBVUVCYXlJQk5nSUVDeUFCSUFNb0FnaHJyQ0FES1FONElCUjhmQ0VVQ3lBRElBS3NJaElReEFFQ1FDQURLQUlFSWdRZ0F5Z0NhQ0lCU1FSQUlBTWdCRUVCYWpZQ0JBd0JDeUFERUZGQkFFZ05CU0FES0FKb0lRRUxJQUVFUUNBRElBTW9BZ1JCQVdzMkFnUUxRUkFoQVFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FMUWRnQWF3NGhCZ3NMQWdzTEN3c0xBUXNDQkFFQkFRc0ZDd3NMQ3dzREJnc0xBZ3NFQ3dzR0FBc2dDMEhCQUdzaUFVRUdTMEVCSUFGMFFmRUFjVVZ5RFFvTElBVWdBeUFQUVFBUS9BUWdBeWtEZUVJQUlBTW9BZ1FnQXlnQ0NHdXNmVkVORUNBSFJRMEpJQVVwQXdnaEVpQUZLUU1BSVJNZ0R3NERCUVlIQ1FzZ0MwSHZBWEZCNHdCR0JFQWdCVUVnYWtGL1FZRUNFRHNhSUFWQkFEb0FJQ0FMUWZNQVJ3MElJQVZCQURvQVFTQUZRUUE2QUM0Z0JVRUFOZ0VxREFnTElBVkJJR29nQUMwQUFTSUJRZDRBUmlJRVFZRUNFRHNhSUFWQkFEb0FJQ0FBUVFKcUlBQkJBV29nQkJzaENBSi9Ba0FDUUNBQVFRSkJBU0FFRzJvdEFBQWlBRUV0UndSQUlBQkIzUUJHRFFFZ0FVSGVBRWNoQmlBSURBTUxJQVVnQVVIZUFFY2lCam9BVGd3QkN5QUZJQUZCM2dCSElnWTZBSDRMSUFoQkFXb0xJUUFEUUFKQUlBQXRBQUFpQVVFdFJ3UkFJQUZGRFJBZ0FVSGRBRWNOQVF3S0MwRXRJUUVnQUMwQUFTSUVSU0FFUWQwQVJuSU5BQ0FBUVFGcUlRZ0NRQ0FFSUFCQkFXc3RBQUFpQUUwRVFDQUVJUUVNQVFzRFFDQUFRUUZxSWdBZ0JVRWdhbW9nQmpvQUFDQUFJQWd0QUFBaUFVa05BQXNMSUFnaEFBc2dBU0FGYWlBR09nQWhJQUJCQVdvaEFBd0FDd0FMUVFnaEFRd0NDMEVLSVFFTUFRdEJBQ0VCQzBJQUlSSkJBQ0VFUVFBaENFRUFJUVlqQUVFUWF5SVFKQUFDZmdKQUFrQUNRQUpBQWtBZ0FVRWtUUVJBQTBBQ2Z5QURLQUlFSWdJZ0F5Z0NhRWtFUUNBRElBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBREVGRUxJZ0lRZ1FJTkFBc0NRQUpBSUFKQksyc09Bd0FCQUFFTFFYOUJBQ0FDUVMxR0d5RUdJQU1vQWdRaUFpQURLQUpvU1FSQUlBTWdBa0VCYWpZQ0JDQUNMUUFBSVFJTUFRc2dBeEJSSVFJTEFrQWdBVUZ2Y1NBQ1FUQkhja1VFUUFKL0lBTW9BZ1FpQWlBREtBSm9TUVJBSUFNZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFNUVVRc2lBa0ZmY1VIWUFFWUVRRUVRSVFFQ2Z5QURLQUlFSWdJZ0F5Z0NhRWtFUUNBRElBSkJBV28yQWdRZ0FpMEFBQXdCQ3lBREVGRUxJZ0pCOFlBRGFpMEFBRUVRU1EwRklBTW9BbWhGRFFnZ0F5QURLQUlFUVFGck5nSUVEQWdMSUFFTkFVRUlJUUVNQkFzZ0FVRUtJQUViSWdFZ0FrSHhnQU5xTFFBQVN3MEFJQU1vQW1nRVFDQURJQU1vQWdSQkFXczJBZ1FMSUFOQ0FCREVBVUdVL3dOQkhEWUNBRUlBREFjTElBRkJDa2NOQWlBQ1FUQnJJZ1JCQ1UwRVFFRUFJUUVEUUNBQklBUnFJUUVDZnlBREtBSUVJZ0lnQXlnQ2FFa0VRQ0FESUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFERUZFTElnSkJNR3NpQkVFSlN5QUJRWml6NXN3QlMzSkZCRUFnQVVFS2JDRUJEQUVMQ3lBQnJTRVNDeUFFUVFsTERRRWdFa0lLZmlFVElBU3RJUlVEUUFKL0lBTW9BZ1FpQVNBREtBSm9TUVJBSUFNZ0FVRUJhallDQkNBQkxRQUFEQUVMSUFNUVVRc2lBa0V3YXlJRVFRbExJQk1nRlh3aUVrS2FzK2JNbWJQbXpCbGFjZzBDSUJKQ0NuNGlFeUFFclNJVlFuK0ZXQTBBQzBFS0lRRU1Bd3RCbFA4RFFSdzJBZ0JDQUF3RkMwRUtJUUVnQkVFSlRRMEJEQUlMSUFFZ0FVRUJhM0VFUUNBQ1FmR0FBMm90QUFBaUNDQUJTUVJBQTBBZ0JDQUlhaUlFUWNiajhUaExJQUVDZnlBREtBSUVJZ0lnQXlnQ2FFa0VRQ0FESUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFERUZFTElnSkI4WUFEYWkwQUFDSUlUWEpGQkVBZ0FTQUViQ0VFREFFTEN5QUVyU0VTQ3lBQklBaE5EUUVnQWEwaEV3TkFJQklnRTM0aUZTQUlyVUwvQVlNaUZrSi9oVllOQWlBVklCWjhJUklnQVFKL0lBTW9BZ1FpQWlBREtBSm9TUVJBSUFNZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFNUVVRc2lBa0h4Z0FOcUxRQUFJZ2hORFFJZ0VDQVRJQklRdWdFZ0VDa0RDRkFOQUFzTUFRc2dBVUVYYkVFRmRrRUhjVUh4Z2dOcUxBQUFJUkVnQWtIeGdBTnFMUUFBSWdRZ0FVa0VRQU5BSUFRZ0NISWlDRUgvLy84L1N5QUJBbjhnQXlnQ0JDSUNJQU1vQW1oSkJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJSQ3lJQ1FmR0FBMm90QUFBaUJFMXlSUVJBSUFnZ0VYUWhDQXdCQ3dzZ0NLMGhFZ3NnQVNBRVRRMEFRbjhnRWEwaUU0Z2lGU0FTVkEwQUEwQWdCSzFDL3dHRElCSWdFNGFFSVJJZ0FRSi9JQU1vQWdRaUFpQURLQUpvU1FSQUlBTWdBa0VCYWpZQ0JDQUNMUUFBREFFTElBTVFVUXNpQWtIeGdBTnFMUUFBSWdSTkRRRWdFaUFWV0EwQUN3c2dBU0FDUWZHQUEyb3RBQUJORFFBRFFDQUJBbjhnQXlnQ0JDSUNJQU1vQW1oSkJFQWdBeUFDUVFGcU5nSUVJQUl0QUFBTUFRc2dBeEJSQzBIeGdBTnFMUUFBU3cwQUMwR1Uvd05CeEFBMkFnQkJBQ0VHUW44aEVnc2dBeWdDYUFSQUlBTWdBeWdDQkVFQmF6WUNCQXNnRWtKL1VRUkFJQVpCQVhKRkJFQkJsUDhEUWNRQU5nSUFRbjRNQXdzTElCSWdCcXdpRTRVZ0UzME1BUXNnQTBJQUVNUUJRZ0FMSVJJZ0VFRVFhaVFBSUFNcEEzaENBQ0FES0FJRUlBTW9BZ2hyckgxUkRRc2dCMFVnQzBId0FFZHlSUVJBSUFjZ0VqNENBQXdGQ3lBSElBOGdFaEQ2QkF3RUN5QUhJQk1nRWhEMEJEZ0NBQXdEQ3lBSElCTWdFaERRQXprREFBd0NDeUFISUJNM0F3QWdCeUFTTndNSURBRUxJQUpCQVdwQkh5QUxRZU1BUmlJRUd5RUdBa0FnRDBFQlJ5SUlSUVJBSUFjaEFTQU1CRUFnQmtFQ2RCQTZJZ0ZGRFFjTElBVkNBRGNEcUFKQkFDRUNBMEFnQVNFS0FrQURRQUovSUFNb0FnUWlBU0FES0FKb1NRUkFJQU1nQVVFQmFqWUNCQ0FCTFFBQURBRUxJQU1RVVFzaUFTQUZhaTBBSVVVTkFTQUZJQUU2QUJzZ0JVRWNhaUFGUVJ0cVFRRWdCVUdvQW1vUWdnTWlBVUYrUmcwQUlBRkJmMFlOQnlBS0JFQWdDaUFDUVFKMGFpQUZLQUljTmdJQUlBSkJBV29oQWdzZ0RDQUNJQVpHY1VVTkFBc2dDaUFHUVFGMFFRRnlJZ1pCQW5RUTVnSWlBUTBCREFZTEN5QUZRYWdDYWdSL0lBVW9BcWdDQlVFQUN3MEVRUUFoQ1F3QkN5QU1CRUJCQUNFQ0lBWVFPaUlCUlEwR0EwQWdBU0VKQTBBQ2Z5QURLQUlFSWdFZ0F5Z0NhRWtFUUNBRElBRkJBV28yQWdRZ0FTMEFBQXdCQ3lBREVGRUxJZ0VnQldvdEFDRkZCRUJCQUNFS0RBUUxJQUlnQ1dvZ0FUb0FBQ0FDUVFGcUlnSWdCa2NOQUF0QkFDRUtJQWtnQmtFQmRFRUJjaUlHRU9ZQ0lnRU5BQXNNQnd0QkFDRUNJQWNFUUFOQUFuOGdBeWdDQkNJQklBTW9BbWhKQkVBZ0F5QUJRUUZxTmdJRUlBRXRBQUFNQVFzZ0F4QlJDeUlCSUFWcUxRQWhCRUFnQWlBSGFpQUJPZ0FBSUFKQkFXb2hBZ3dCQlVFQUlRb2dCeUVKREFNTEFBc0FDd05BQW44Z0F5Z0NCQ0lCSUFNb0FtaEpCRUFnQXlBQlFRRnFOZ0lFSUFFdEFBQU1BUXNnQXhCUkN5QUZhaTBBSVEwQUMwRUFJUWxCQUNFS0N5QURLQUlFSVFFZ0F5Z0NhQVJBSUFNZ0FVRUJheUlCTmdJRUN5QURLUU40SUFFZ0F5Z0NDR3VzZkNJVFVDQUxRZU1BUmtFQUlCSWdFMUliY2cwSEFrQWdERVVOQUNBSVJRUkFJQWNnQ2pZQ0FBd0JDeUFISUFrMkFnQUxJQVFOQUNBS0JFQWdDaUFDUVFKMGFrRUFOZ0lBQ3lBSlJRUkFRUUFoQ1F3QkN5QUNJQWxxUVFBNkFBQUxJQU1vQWdRZ0F5Z0NDR3VzSUFNcEEzZ2dGSHg4SVJRZ0RpQUhRUUJIYWlFT0N5QUFRUUZxSVFJZ0FDMEFBU0lBRFFFTUJnc0xRUUFoQ1F3QkMwRUFJUWxCQUNFS0N5QU9EUUVMUVg4aERnc2dERVVOQUNBSkVETWdDaEF6Q3lBRlFiQUNhaVFBSUE0aEFDQURRWkFCYWlRQUlBQUxRd0FDUUNBQVJRMEFBa0FDUUFKQUFrQWdBVUVDYWc0R0FBRUNBZ1FEQkFzZ0FDQUNQQUFBRHdzZ0FDQUNQUUVBRHdzZ0FDQUNQZ0lBRHdzZ0FDQUNOd01BQ3d2NkF3SUVmd0YrQWtBQ1FBSkFBbjhnQUNnQ0JDSUNJQUFvQW1oSkJFQWdBQ0FDUVFGcU5nSUVJQUl0QUFBTUFRc2dBQkJSQ3lJRFFTdHJEZ01CQUFFQUN5QURRVEJySVFRTUFRc2dBMEV0UmlFRkFrQWdBVVVDZnlBQUtBSUVJZ0lnQUNnQ2FFa0VRQ0FBSUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFBRUZFTElnSkJNR3NpQkVFS1NYSU5BQ0FBS0FKb1JRMEFJQUFnQUNnQ0JFRUJhellDQkFzZ0FpRURDd0pBSUFSQkNVMEVRRUVBSVFJRFFDQUNJQU5xUVRCcklnRkJ5NW16NWdCS0FuOGdBQ2dDQkNJQ0lBQW9BbWhKQkVBZ0FDQUNRUUZxTmdJRUlBSXRBQUFNQVFzZ0FCQlJDeUlEUVRCcklnUkJDVXR5UlFSQUlBRkJDbXdoQWd3QkN3c2dBYXdoQmdKQUlBUkJDazhOQUFOQUlBT3RJQVpDQ241OFFqQjlJUVlDZnlBQUtBSUVJZ0VnQUNnQ2FFa0VRQ0FBSUFGQkFXbzJBZ1FnQVMwQUFBd0JDeUFBRUZFTElnTkJNR3NpQkVFSlN3MEJJQVpDcm8rRjE4ZkM2Nk1CVXcwQUN3c2dCRUVLU1FSQUEwQUNmeUFBS0FJRUlnRWdBQ2dDYUVrRVFDQUFJQUZCQVdvMkFnUWdBUzBBQUF3QkN5QUFFRkVMUVRCclFRcEpEUUFMQ3lBQUtBSm9CRUFnQUNBQUtBSUVRUUZyTmdJRUMwSUFJQVo5SUFZZ0JSc2hCZ3dCQzBLQWdJQ0FnSUNBZ0lCL0lRWWdBQ2dDYUVVTkFDQUFJQUFvQWdSQkFXczJBZ1JDZ0lDQWdJQ0FnSUNBZnc4TElBWUwzeklERUg4SGZnRjhJd0JCTUdzaURDUUFBa0FnQWtFQ1RRUkFJQUpCQW5RaUFrSGNnQU5xS0FJQUlROGdBa0hRZ0FOcUtBSUFJUTREUUFKL0lBRW9BZ1FpQWlBQktBSm9TUVJBSUFFZ0FrRUJhallDQkNBQ0xRQUFEQUVMSUFFUVVRc2lBaENCQWcwQUMwRUJJUWNDUUFKQUlBSkJLMnNPQXdBQkFBRUxRWDlCQVNBQ1FTMUdHeUVISUFFb0FnUWlBaUFCS0FKb1NRUkFJQUVnQWtFQmFqWUNCQ0FDTFFBQUlRSU1BUXNnQVJCUklRSUxBa0FDUUFOQUlBVkJrSUFEYWl3QUFDQUNRU0J5UmdSQUFrQWdCVUVHU3cwQUlBRW9BZ1FpQWlBQktBSm9TUVJBSUFFZ0FrRUJhallDQkNBQ0xRQUFJUUlNQVFzZ0FSQlJJUUlMSUFWQkFXb2lCVUVJUncwQkRBSUxDeUFGUVFOSEJFQWdCVUVJUmcwQklBTkZJQVZCQkVseURRSWdCVUVJUmcwQkN5QUJLQUpvSWdJRVFDQUJJQUVvQWdSQkFXczJBZ1FMSUFORklBVkJCRWx5RFFBRFFDQUNCRUFnQVNBQktBSUVRUUZyTmdJRUN5QUZRUUZySWdWQkEwc05BQXNMSXdCQkVHc2lBaVFBQW40Z0I3SkRBQUNBZjVTOElnTkIvLy8vL3dkeElnRkJnSUNBQkd0Qi8vLy85d2ROQkVBZ0FhMUNHWVpDZ0lDQWdJQ0FnTUEvZkF3QkN5QURyVUlaaGtLQWdJQ0FnSURBLy84QWhDQUJRWUNBZ1B3SFR3MEFHa0lBSUFGRkRRQWFJQUlnQWExQ0FDQUJaeUlCUWRFQWFoQ1FBU0FDS1FNQUlSUWdBaWtEQ0VLQWdJQ0FnSURBQUlWQmlmOEFJQUZyclVJd2hvUUxJUlVnRENBVU53TUFJQXdnRlNBRFFZQ0FnSUI0Y2ExQ0lJYUVOd01JSUFKQkVHb2tBQ0FNS1FNSUlSUWdEQ2tEQUNFVkRBSUxBa0FDUUFKQUlBVU5BRUVBSVFVRFFDQUZRWm1BQTJvc0FBQWdBa0VnY2tjTkFRSkFJQVZCQVVzTkFDQUJLQUlFSWdJZ0FTZ0NhRWtFUUNBQklBSkJBV28yQWdRZ0FpMEFBQ0VDREFFTElBRVFVU0VDQ3lBRlFRRnFJZ1ZCQTBjTkFBc01BUXNDUUFKQUlBVU9CQUFCQVFJQkN3SkFJQUpCTUVjTkFBSi9JQUVvQWdRaUJTQUJLQUpvU1FSQUlBRWdCVUVCYWpZQ0JDQUZMUUFBREFFTElBRVFVUXRCWDNGQjJBQkdCRUFqQUVHd0Eyc2lBaVFBQW44Z0FTZ0NCQ0lGSUFFb0FtaEpCRUFnQVNBRlFRRnFOZ0lFSUFVdEFBQU1BUXNnQVJCUkN5RUZBa0FDZndOQUlBVkJNRWNFUUFKQUlBVkJMa2NOQkNBQktBSUVJZ1VnQVNnQ2FFOE5BQ0FCSUFWQkFXbzJBZ1FnQlMwQUFBd0RDd1VnQVNnQ0JDSUZJQUVvQW1oSkJIOUJBU0VMSUFFZ0JVRUJhallDQkNBRkxRQUFCVUVCSVFzZ0FSQlJDeUVGREFFTEN5QUJFRkVMSVFWQkFTRUVJQVZCTUVjTkFBTkFJQmRDQVgwaEZ3Si9JQUVvQWdRaUJTQUJLQUpvU1FSQUlBRWdCVUVCYWpZQ0JDQUZMUUFBREFFTElBRVFVUXNpQlVFd1JnMEFDMEVCSVFzTFFvQ0FnSUNBZ01EL1B5RVZBMEFDUUNBRlFTQnlJUWtDUUFKQUlBVkJNR3NpQ2tFS1NRMEFJQWxCNFFCclFRWlBRUUFnQlVFdVJ4c05BaUFGUVM1SERRQWdCQTBDUVFFaEJDQVVJUmNNQVFzZ0NVSFhBR3NnQ2lBRlFUbEtHeUVGQWtBZ0ZFSUhWd1JBSUFVZ0JrRUVkR29oQmd3QkN5QVVRaHhYQkVBZ0FrRXdhaUFGRUtrQklBSkJJR29nR1NBVlFnQkNnSUNBZ0lDQXdQMC9FRnNnQWtFUWFpQUNLUU1nSWhrZ0Fpa0RLQ0lWSUFJcEF6QWdBaWtET0JCYklBSWdGaUFZSUFJcEF4QWdBaWtER0JDakFTQUNLUU1JSVJnZ0Fpa0RBQ0VXREFFTElBVkZJQWh5RFFBZ0FrSFFBR29nR1NBVlFnQkNnSUNBZ0lDQWdQOC9FRnNnQWtGQWF5QVdJQmdnQWlrRFVDQUNLUU5ZRUtNQklBSXBBMGdoR0VFQklRZ2dBaWtEUUNFV0N5QVVRZ0Y4SVJSQkFTRUxDeUFCS0FJRUlnVWdBU2dDYUVrRWZ5QUJJQVZCQVdvMkFnUWdCUzBBQUFVZ0FSQlJDeUVGREFFTEN3SitBa0FDUUNBTFJRUkFJQUVvQW1oRkJFQWdBdzBEREFJTElBRWdBU2dDQkNJRlFRRnJOZ0lFSUFORkRRRWdBU0FGUVFKck5nSUVJQVJGRFFJZ0FTQUZRUU5yTmdJRURBSUxJQlJDQjFjRVFDQVVJUlVEUUNBR1FRUjBJUVlnRlVJQmZDSVZRZ2hTRFFBTEN3SkFBa0FDUUNBRlFWOXhRZEFBUmdSQUlBRWdBeEQ3QkNJVlFvQ0FnSUNBZ0lDQWdIOVNEUU1nQXdSQUlBRW9BbWdOQWd3REMwSUFJUllnQVVJQUVNUUJRZ0FNQmdzZ0FTZ0NhRVVOQVFzZ0FTQUJLQUlFUVFGck5nSUVDMElBSVJVTElBWkZCRUFnQWtId0FHb2dCN2RFQUFBQUFBQUFBQUNpRU13QklBSXBBM0FoRmlBQ0tRTjREQU1MSUJjZ0ZDQUVHMElDaGlBVmZFSWdmU0lVUVFBZ0QydXRWUVJBUVpUL0EwSEVBRFlDQUNBQ1FhQUJhaUFIRUtrQklBSkJrQUZxSUFJcEE2QUJJQUlwQTZnQlFuOUMvLy8vLy8vL3YvLy9BQkJiSUFKQmdBRnFJQUlwQTVBQklBSXBBNWdCUW45Qy8vLy8vLy8vdi8vL0FCQmJJQUlwQTRBQklSWWdBaWtEaUFFTUF3c2dEMEhpQVd1c0lCUlhCRUFnQmtGL1NnUkFBMEFnQWtHZ0Eyb2dGaUFZUWdCQ2dJQ0FnSUNBd1ArL2Z4Q2pBU0FXSUJoQ2dJQ0FnSUNBZ1A4L0VOSURJUUVnQWtHUUEyb2dGaUFZSUJZZ0Fpa0RvQU1nQVVFQVNDSURHeUFZSUFJcEE2Z0RJQU1iRUtNQklCUkNBWDBoRkNBQ0tRT1lBeUVZSUFJcEE1QURJUllnQmtFQmRDQUJRWDlLY2lJR1FYOUtEUUFMQ3dKK0lCUWdENng5UWlCOEloV25JZ0ZCQUNBQlFRQktHeUFPSUJVZ0RxMVRHeUlCUWZFQVRnUkFJQUpCZ0FOcUlBY1FxUUVnQWlrRGlBTWhGeUFDS1FPQUF5RVpRZ0FNQVFzZ0FrSGdBbXBFQUFBQUFBQUE4RDlCa0FFZ0FXc1E5Z0VRekFFZ0FrSFFBbW9nQnhDcEFTQUNRZkFDYWlBQ0tRUGdBaUFDS1FQb0FpQUNLUVBRQWlJWklBSXBBOWdDSWhjUS9nUWdBaWtEK0FJaEdpQUNLUVB3QWdzaEZTQUNRY0FDYWlBR0lBWkJBWEZGSUJZZ0dFSUFRZ0FRZ0FKQkFFY2dBVUVnU0hGeElnRnFFS0VDSUFKQnNBSnFJQmtnRnlBQ0tRUEFBaUFDS1FQSUFoQmJJQUpCa0FKcUlBSXBBN0FDSUFJcEE3Z0NJQlVnR2hDakFTQUNRYUFDYWtJQUlCWWdBUnRDQUNBWUlBRWJJQmtnRnhCYklBSkJnQUpxSUFJcEE2QUNJQUlwQTZnQ0lBSXBBNUFDSUFJcEE1Z0NFS01CSUFKQjhBRnFJQUlwQTRBQ0lBSXBBNGdDSUJVZ0doRFJBeUFDS1FQd0FTSVZJQUlwQS9nQkloZENBRUlBRUlBQ1JRUkFRWlQvQTBIRUFEWUNBQXNnQWtIZ0FXb2dGU0FYSUJTbkVQMEVJQUlwQStBQklSWWdBaWtENkFFTUF3dEJsUDhEUWNRQU5nSUFJQUpCMEFGcUlBY1FxUUVnQWtIQUFXb2dBaWtEMEFFZ0Fpa0QyQUZDQUVLQWdJQ0FnSURBQUJCYklBSkJzQUZxSUFJcEE4QUJJQUlwQThnQlFnQkNnSUNBZ0lDQXdBQVFXeUFDS1FPd0FTRVdJQUlwQTdnQkRBSUxJQUZDQUJERUFRc2dBa0hnQUdvZ0I3ZEVBQUFBQUFBQUFBQ2lFTXdCSUFJcEEyQWhGaUFDS1FOb0N5RVVJQXdnRmpjREVDQU1JQlEzQXhnZ0FrR3dBMm9rQUNBTUtRTVlJUlFnRENrREVDRVZEQVlMSUFFb0FtaEZEUUFnQVNBQktBSUVRUUZyTmdJRUN5QUJJUVlnQWlFRklBY2hDMEVBSVFGQkFDRUhJd0JCa01ZQWF5SUVKQUJCQUNBT0lBOXFJaEpySVJNQ1FBSi9BMEFDUUNBRlFUQkhCRUFnQlVFdVJ3MEVJQVlvQWdRaUFpQUdLQUpvVHcwQklBWWdBa0VCYWpZQ0JDQUNMUUFBREFNTElBWW9BZ1FpQWlBR0tBSm9TUVJBSUFZZ0FrRUJhallDQkNBQ0xRQUFJUVVGSUFZUVVTRUZDMEVCSVFjTUFRc0xJQVlRVVFzaEJVRUJJUWdnQlVFd1J3MEFRbjhoRkFOL0FuOGdCaWdDQkNJQ0lBWW9BbWhKQkVBZ0JpQUNRUUZxTmdJRUlBSXRBQUFNQVFzZ0JoQlJDeUlGUVRCSEJIOUJBUVVnRkVJQmZTRVVEQUVMQ3lFSEN5QUVRUUEyQXBBR0FuNENRQUpBQWtBQ1FBSkFJQVZCTGtZaUNVRUJJQVZCTUdzaUFrRUpTeHNFUUFOQUFrQWdDVUVCY1FSQUlBaEZCRUFnRlNFVVFRRWhDQXdDQ3lBSFJTRUpEQVFMSUJWQ0FYd2hGU0FCUWZ3UFRBUkFJQTBnRmFjZ0JVRXdSaHNoRFNBRVFaQUdhaUFCUVFKMGFpSUhJQW9FZnlBRklBY29BZ0JCQ214cVFUQnJCU0FDQ3pZQ0FFRUJJUWRCQUNBS1FRRnFJZ0lnQWtFSlJpSUNHeUVLSUFFZ0Ftb2hBUXdCQ3lBRlFUQkdEUUFnQkNBRUtBS0FSa0VCY2pZQ2dFWkIzSThCSVEwTEFuOGdCaWdDQkNJQ0lBWW9BbWhKQkVBZ0JpQUNRUUZxTmdJRUlBSXRBQUFNQVFzZ0JoQlJDeUlGUVM1R0lna2dCVUV3YXlJQ1FRcEpjZzBBQ3dzZ0ZDQVZJQWdiSVJRZ0IwVWdCVUZmY1VIRkFFZHlSUVJBQWtBZ0JpQURFUHNFSWhkQ2dJQ0FnSUNBZ0lDQWYxSUVRQ0FVSUJkOElSUU1BUXNnQTBVTkJTQUdLQUpvUlEwQUlBWWdCaWdDQkVFQmF6WUNCQXNnQjBVTkF3d0ZDeUFIUlNFSklBVkJBRWdOQVFzZ0JpZ0NhRVVOQUNBR0lBWW9BZ1JCQVdzMkFnUUxJQWxGRFFJTFFaVC9BMEVjTmdJQUMwSUFJUlVnQmtJQUVNUUJRZ0FNQVFzZ0JDZ0NrQVlpQWtVRVFDQUVJQXUzUkFBQUFBQUFBQUFBb2hETUFTQUVLUU1BSVJVZ0JDa0RDQXdCQ3lBVUlCVlNJQlZDQ1ZWeUlBNUJIa3hCQUNBQ0lBNTJHM0pGQkVBZ0JFRXdhaUFMRUtrQklBUkJJR29nQWhDaEFpQUVRUkJxSUFRcEF6QWdCQ2tET0NBRUtRTWdJQVFwQXlnUVd5QUVLUU1RSVJVZ0JDa0RHQXdCQ3lBUFFYNXRyU0FVVXdSQVFaVC9BMEhFQURZQ0FDQUVRZUFBYWlBTEVLa0JJQVJCMEFCcUlBUXBBMkFnQkNrRGFFSi9Rdi8vLy8vLy83Ly8vd0FRV3lBRVFVQnJJQVFwQTFBZ0JDa0RXRUovUXYvLy8vLy8vNy8vL3dBUVd5QUVLUU5BSVJVZ0JDa0RTQXdCQ3lBUFFlSUJhNndnRkZVRVFFR1Uvd05CeEFBMkFnQWdCRUdRQVdvZ0N4Q3BBU0FFUVlBQmFpQUVLUU9RQVNBRUtRT1lBVUlBUW9DQWdJQ0FnTUFBRUZzZ0JFSHdBR29nQkNrRGdBRWdCQ2tEaUFGQ0FFS0FnSUNBZ0lEQUFCQmJJQVFwQTNBaEZTQUVLUU40REFFTElBb0VRQ0FLUVFoTUJFQWdCRUdRQm1vZ0FVRUNkR29pQXlnQ0FDRUNBMEFnQWtFS2JDRUNJQXBCQVdvaUNrRUpSdzBBQ3lBRElBSTJBZ0FMSUFGQkFXb2hBUXNDUUNBTklCU25JZ2hLSUExQkNVNXlJQWhCRVVweURRQWdDRUVKUmdSQUlBUkJ3QUZxSUFzUXFRRWdCRUd3QVdvZ0JDZ0NrQVlRb1FJZ0JFR2dBV29nQkNrRHdBRWdCQ2tEeUFFZ0JDa0RzQUVnQkNrRHVBRVFXeUFFS1FPZ0FTRVZJQVFwQTZnQkRBSUxJQWhCQ0V3RVFDQUVRWkFDYWlBTEVLa0JJQVJCZ0FKcUlBUW9BcEFHRUtFQ0lBUkI4QUZxSUFRcEE1QUNJQVFwQTVnQ0lBUXBBNEFDSUFRcEE0Z0NFRnNnQkVIZ0FXcEJBQ0FJYTBFQ2RFSFFnQU5xS0FJQUVLa0JJQVJCMEFGcUlBUXBBL0FCSUFRcEEvZ0JJQVFwQStBQklBUXBBK2dCRVBNRUlBUXBBOUFCSVJVZ0JDa0QyQUVNQWdzZ0RpQUlRWDFzYWtFYmFpSUNRUjVNUVFBZ0JDZ0NrQVlpQXlBQ2Roc05BQ0FFUWVBQ2FpQUxFS2tCSUFSQjBBSnFJQU1Rb1FJZ0JFSEFBbW9nQkNrRDRBSWdCQ2tENkFJZ0JDa0QwQUlnQkNrRDJBSVFXeUFFUWJBQ2FpQUlRUUowUVlpQUEyb29BZ0FRcVFFZ0JFR2dBbW9nQkNrRHdBSWdCQ2tEeUFJZ0JDa0RzQUlnQkNrRHVBSVFXeUFFS1FPZ0FpRVZJQVFwQTZnQ0RBRUxBMEFnQkVHUUJtb2dBU0lDUVFGcklnRkJBblJxS0FJQVJRMEFDMEVBSVFvQ1FDQUlRUWx2SWdGRkJFQkJBQ0VCREFFTElBRWdBVUVKYWlBSVFYOUtHeUVEQWtBZ0FrVUVRRUVBSVFGQkFDRUNEQUVMUVlDVTY5d0RRUUFnQTJ0QkFuUkIwSUFEYWlnQ0FDSUhiU0VHUVFBaENVRUFJUVZCQUNFQkEwQWdCRUdRQm1vZ0JVRUNkR29pRFNBSklBMG9BZ0FpRFNBSGJpSVFhaUlKTmdJQUlBRkJBV3BCL3c5eElBRWdDVVVnQVNBRlJuRWlDUnNoQVNBSVFRbHJJQWdnQ1JzaENDQUdJQTBnQnlBUWJHdHNJUWtnQlVFQmFpSUZJQUpIRFFBTElBbEZEUUFnQkVHUUJtb2dBa0VDZEdvZ0NUWUNBQ0FDUVFGcUlRSUxJQWdnQTJ0QkNXb2hDQXNEUUNBRVFaQUdhaUFCUVFKMGFpRUhBa0FEUUNBSVFTUk9CRUFnQ0VFa1J3MENJQWNvQWdCQjBlbjVCRThOQWdzZ0FrSC9EMm9oQlVJQUlSUURRRUVBSVFrZ0JFR1FCbW9nQlVIL0QzRWlBMEVDZEdvaUJUVUNBRUlkaGlBVWZDSVVRb0dVNjl3RFdnUkFJQlFnRkVLQWxPdmNBNEFpRlVLQWxPdmNBMzU5SVJRZ0ZhY2hDUXNnQlNBVXB5SUZOZ0lBSUFJZ0FpQUNJQU1nQlJzZ0FTQURSaUlGR3lBRElBSkJBV3RCL3c5eFJ4c2hBaUFGUlFSQUlBTkJBV3NoQlNBSnJTRVVEQUVMQ3lBS1FSMXJJUW9nQ1VVTkFBc2dBaUFCUVFGclFmOFBjU0lCUmdSQUlBUkJrQVpxSUFKQi9nOXFRZjhQY1VFQ2RHb2lBeUFES0FJQUlBUkJrQVpxSUFKQkFXdEIvdzl4SWdKQkFuUnFLQUlBY2pZQ0FBc2dDRUVKYWlFSUlBUkJrQVpxSUFGQkFuUnFJQWsyQWdBTUFRc0xBa0FEUUNBQ1FRRnFRZjhQY1NFRElBUkJrQVpxSUFKQkFXdEIvdzl4UVFKMGFpRUpBMEJCQ1VFQklBaEJMVW9iSVFZQ1FBTkFJQUVoQjBFQUlRVUNRQU5BQWtBZ0JTQUhha0gvRDNFaUFTQUNSZzBBSUFSQmtBWnFJQUZCQW5ScUtBSUFJZ0VnQlVFQ2RFR2dnQU5xS0FJQUlnMUpEUUFnQVNBTlN3MENJQVZCQVdvaUJVRUVSdzBCQ3dzZ0NFRWtSdzBBUWdBaEZFRUFJUVZDQUNFVkEwQWdBaUFGSUFkcVFmOFBjU0lCUmdSQUlBSkJBV3BCL3c5eElnSkJBblFnQkdwQkFEWUNqQVlMSUFSQmdBWnFJQlFnRlVJQVFvQ0FnSURsbXJlT3dBQVFXeUFFUWZBRmFpQUVRWkFHYWlBQlFRSjBhaWdDQUJDaEFpQUVRZUFGYWlBRUtRT0FCaUFFS1FPSUJpQUVLUVB3QlNBRUtRUDRCUkNqQVNBRUtRUG9CU0VWSUFRcEErQUZJUlFnQlVFQmFpSUZRUVJIRFFBTElBUkIwQVZxSUFzUXFRRWdCRUhBQldvZ0ZDQVZJQVFwQTlBRklBUXBBOWdGRUZzZ0JDa0R5QVVoRlVJQUlSUWdCQ2tEd0FVaEZpQUtRZkVBYWlJSUlBOXJJZ05CQUNBRFFRQktHeUFPSUFNZ0RrZ2lCUnNpQVVId0FFd05Ba0lBSVJjTUJRc2dCaUFLYWlFS0lBY2dBaUlCUmcwQUMwR0FsT3ZjQXlBR2RpRU5RWDhnQm5SQmYzTWhFRUVBSVFVZ0J5RUJBMEFnQkVHUUJtb2dCMEVDZEdvaUVTQUZJQkVvQWdBaUVTQUdkbW9pQlRZQ0FDQUJRUUZxUWY4UGNTQUJJQVZGSUFFZ0IwWnhJZ1ViSVFFZ0NFRUpheUFJSUFVYklRZ2dFQ0FSY1NBTmJDRUZJQWRCQVdwQi93OXhJZ2NnQWtjTkFBc2dCVVVOQVNBQklBTkhCRUFnQkVHUUJtb2dBa0VDZEdvZ0JUWUNBQ0FESVFJTUF3c2dDU0FKS0FJQVFRRnlOZ0lBSUFNaEFRd0JDd3NMSUFSQmtBVnFSQUFBQUFBQUFQQS9RZUVCSUFGckVQWUJFTXdCSUFSQnNBVnFJQVFwQTVBRklBUXBBNWdGSUJZZ0ZSRCtCQ0FFS1FPNEJTRVpJQVFwQTdBRklSZ2dCRUdBQldwRUFBQUFBQUFBOEQ5QjhRQWdBV3NROWdFUXpBRWdCRUdnQldvZ0ZpQVZJQVFwQTRBRklBUXBBNGdGRU44R0lBUkI4QVJxSUJZZ0ZTQUVLUU9nQlNJVUlBUXBBNmdGSWhjUTBRTWdCRUhnQkdvZ0dDQVpJQVFwQS9BRUlBUXBBL2dFRUtNQklBUXBBK2dFSVJVZ0JDa0Q0QVFoRmdzQ1FDQUhRUVJxUWY4UGNTSUdJQUpHRFFBQ1FDQUVRWkFHYWlBR1FRSjBhaWdDQUNJR1FmL0p0ZTRCVFFSQUlBWkJBU0FIUVFWcVFmOFBjU0FDUmh0RkRRRWdCRUh3QTJvZ0M3ZEVBQUFBQUFBQTBEK2lFTXdCSUFSQjRBTnFJQlFnRnlBRUtRUHdBeUFFS1FQNEF4Q2pBU0FFS1FQb0F5RVhJQVFwQStBRElSUU1BUXNnQmtHQXlyWHVBVWNFUUNBRVFkQUVhaUFMdDBRQUFBQUFBQURvUDZJUXpBRWdCRUhBQkdvZ0ZDQVhJQVFwQTlBRUlBUXBBOWdFRUtNQklBUXBBOGdFSVJjZ0JDa0R3QVFoRkF3QkN5QUx0eUViSUFJZ0IwRUZha0gvRDNGR0JFQWdCRUdRQkdvZ0cwUUFBQUFBQUFEZ1A2SVF6QUVnQkVHQUJHb2dGQ0FYSUFRcEE1QUVJQVFwQTVnRUVLTUJJQVFwQTRnRUlSY2dCQ2tEZ0FRaEZBd0JDeUFFUWJBRWFpQWJSQUFBQUFBQUFPZy9vaERNQVNBRVFhQUVhaUFVSUJjZ0JDa0RzQVFnQkNrRHVBUVFvd0VnQkNrRHFBUWhGeUFFS1FPZ0JDRVVDeUFCUWU4QVNnMEFJQVJCMEFOcUlCUWdGMElBUW9DQWdJQ0FnTUQvUHhEZkJpQUVLUVBRQXlBRUtRUFlBMElBUWdBUWdBSU5BQ0FFUWNBRGFpQVVJQmRDQUVLQWdJQ0FnSURBL3o4UW93RWdCQ2tEeUFNaEZ5QUVLUVBBQXlFVUN5QUVRYkFEYWlBV0lCVWdGQ0FYRUtNQklBUkJvQU5xSUFRcEE3QURJQVFwQTdnRElCZ2dHUkRSQXlBRUtRT29BeUVWSUFRcEE2QURJUllDUUVGK0lCSnJJQWhCLy8vLy93ZHhUZzBBSUFRZ0ZVTC8vLy8vLy8vLy8vOEFnemNEbUFNZ0JDQVdOd09RQXlBRVFZQURhaUFXSUJWQ0FFS0FnSUNBZ0lDQS96OFFXeUFFS1FPUUF5SVlJQVFwQTVnRElobENnSUNBZ0lDQWdMakFBQkRTQXlFQ0lCVWdCQ2tEaUFNZ0FrRUFTQ0lIR3lFVklCWWdCQ2tEZ0FNZ0J4c2hGaUFUSUFvZ0FrRi9TbW9pQ2tIdUFHcE9CRUFnQlNBRklBRWdBMGR4SUJnZ0dVS0FnSUNBZ0lDQXVNQUFFTklEUVFCSUcwRUJSdzBCSUJRZ0YwSUFRZ0FRZ0FKRkRRRUxRWlQvQTBIRUFEWUNBQXNnQkVId0Ftb2dGaUFWSUFvUS9RUWdCQ2tEOEFJaEZTQUVLUVA0QWdzaEZDQU1JQlUzQXlBZ0RDQVVOd01vSUFSQmtNWUFhaVFBSUF3cEF5Z2hGQ0FNS1FNZ0lSVU1CQXNnQVNnQ2FBUkFJQUVnQVNnQ0JFRUJhellDQkFzTUFRc0NRQUovSUFFb0FnUWlBaUFCS0FKb1NRUkFJQUVnQWtFQmFqWUNCQ0FDTFFBQURBRUxJQUVRVVF0QktFWUVRRUVCSVFVTUFRdENnSUNBZ0lDQTRQLy9BQ0VVSUFFb0FtaEZEUU1nQVNBQktBSUVRUUZyTmdJRURBTUxBMEFDZnlBQktBSUVJZ0lnQVNnQ2FFa0VRQ0FCSUFKQkFXbzJBZ1FnQWkwQUFBd0JDeUFCRUZFTElnSkJNR3RCQ2trZ0FrSEJBR3RCR2tseUlBSkIzd0JHY2tFQklBSkI0UUJyUVJwUEd3UkFJQVZCQVdvaEJRd0JDd3RDZ0lDQWdJQ0E0UC8vQUNFVUlBSkJLVVlOQWlBQktBSm9JZ0lFUUNBQklBRW9BZ1JCQVdzMkFnUUxJQU1FUUNBRlJRMERBMEFnQlVFQmF5RUZJQUlFUUNBQklBRW9BZ1JCQVdzMkFnUUxJQVVOQUFzTUF3c0xRWlQvQTBFY05nSUFJQUZDQUJERUFRdENBQ0VVQ3lBQUlCVTNBd0FnQUNBVU53TUlJQXhCTUdva0FBdS9BZ0VCZnlNQVFkQUFheUlFSkFBQ1FDQURRWUNBQVU0RVFDQUVRU0JxSUFFZ0FrSUFRb0NBZ0lDQWdJRC8vd0FRV3lBRUtRTW9JUUlnQkNrRElDRUJJQU5CLy84QlNBUkFJQU5CLy84QWF5RUREQUlMSUFSQkVHb2dBU0FDUWdCQ2dJQ0FnSUNBZ1AvL0FCQmJJQU5CL2Y4Q0lBTkIvZjhDU0J0Qi92OEJheUVESUFRcEF4Z2hBaUFFS1FNUUlRRU1BUXNnQTBHQmdIOUtEUUFnQkVGQWF5QUJJQUpDQUVLQWdJQ0FnSURBQUJCYklBUXBBMGdoQWlBRUtRTkFJUUVnQTBHRGdINUtCRUFnQTBIKy93QnFJUU1NQVFzZ0JFRXdhaUFCSUFKQ0FFS0FnSUNBZ0lEQUFCQmJJQU5CaG9COUlBTkJob0I5U2h0Qi9QOEJhaUVESUFRcEF6Z2hBaUFFS1FNd0lRRUxJQVFnQVNBQ1FnQWdBMEgvL3dCcXJVSXdoaEJiSUFBZ0JDa0RDRGNEQ0NBQUlBUXBBd0EzQXdBZ0JFSFFBR29rQUFzMUFDQUFJQUUzQXdBZ0FDQUNRdi8vLy8vLy96K0RJQVJDTUlpblFZQ0FBbkVnQWtJd2lLZEIvLzhCY1hLdFFqQ0doRGNEQ0FzUUFDQUFJQUVnQWtFQVFRQVFnd1VhQzFJQkEzOENRQ0FBS0FJQUxBQUFFTVVCUlFSQURBRUxBMEFnQUNnQ0FDSUNMQUFBSVFNZ0FDQUNRUUZxTmdJQUlBRWdBMnBCTUdzaEFTQUNMQUFCRU1VQlJRMEJJQUZCQ213aEFRd0FDd0FMSUFFTHV3SUFBa0FnQVVFVVN3MEFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQVVFSmF3NEtBQUVDQXdRRkJnY0lDUW9MSUFJZ0FpZ0NBQ0lCUVFScU5nSUFJQUFnQVNnQ0FEWUNBQThMSUFJZ0FpZ0NBQ0lCUVFScU5nSUFJQUFnQVRRQ0FEY0RBQThMSUFJZ0FpZ0NBQ0lCUVFScU5nSUFJQUFnQVRVQ0FEY0RBQThMSUFJZ0FpZ0NBRUVIYWtGNGNTSUJRUWhxTmdJQUlBQWdBU2tEQURjREFBOExJQUlnQWlnQ0FDSUJRUVJxTmdJQUlBQWdBVElCQURjREFBOExJQUlnQWlnQ0FDSUJRUVJxTmdJQUlBQWdBVE1CQURjREFBOExJQUlnQWlnQ0FDSUJRUVJxTmdJQUlBQWdBVEFBQURjREFBOExJQUlnQWlnQ0FDSUJRUVJxTmdJQUlBQWdBVEVBQURjREFBOExJQUlnQWlnQ0FFRUhha0Y0Y1NJQlFRaHFOZ0lBSUFBZ0FTc0RBRGtEQUE4TElBQWdBaUFERVFJQUN3c01BQ0FBSUFBb0FnQVErQVFMOWdJQkEzOGpBRUhRQVdzaUJTUUFJQVVnQWpZQ3pBRkJBQ0VDSUFWQm9BRnFRUUJCS0JBN0dpQUZJQVVvQXN3Qk5nTElBUUpBUVFBZ0FTQUZRY2dCYWlBRlFkQUFhaUFGUWFBQmFpQURJQVFRMVFOQkFFZ0VRRUYvSVFFTUFRc2dBQ2dDVEVFQVRpRUNJQUFvQWdBaEJpQUFMQUJLUVFCTUJFQWdBQ0FHUVY5eE5nSUFDeUFHUVNCeElRY0NmeUFBS0FJd0JFQWdBQ0FCSUFWQnlBRnFJQVZCMEFCcUlBVkJvQUZxSUFNZ0JCRFZBd3dCQ3lBQVFkQUFOZ0l3SUFBZ0JVSFFBR28yQWhBZ0FDQUZOZ0ljSUFBZ0JUWUNGQ0FBS0FJc0lRWWdBQ0FGTmdJc0lBQWdBU0FGUWNnQmFpQUZRZEFBYWlBRlFhQUJhaUFESUFRUTFRTWlBU0FHUlEwQUdpQUFRUUJCQUNBQUtBSWtFUVFBR2lBQVFRQTJBakFnQUNBR05nSXNJQUJCQURZQ0hDQUFRUUEyQWhBZ0FDZ0NGQ0VESUFCQkFEWUNGQ0FCUVg4Z0F4c0xJUUVnQUNBQUtBSUFJZ0FnQjNJMkFnQkJmeUFCSUFCQklIRWJJUUVnQWtVTkFBc2dCVUhRQVdva0FDQUJDMzhDQVg4QmZpQUF2U0lEUWpTSXAwSC9EM0VpQWtIL0QwY0VmQ0FDUlFSQUlBRWdBRVFBQUFBQUFBQUFBR0VFZjBFQUJTQUFSQUFBQUFBQUFQQkRvaUFCRUlRRklRQWdBU2dDQUVGQWFnczJBZ0FnQUE4TElBRWdBa0grQjJzMkFnQWdBMEwvLy8vLy8vLy9oNEIvZzBLQWdJQ0FnSUNBOEQrRXZ3VWdBQXNMRWdBZ0FFVUVRRUVBRHdzZ0FDQUJFSUlDQ3pvQUlBQW9Ba3hCQUU0RVFDQUFRZ0JCQUJDRUF5QUFJQUFvQWdCQlgzRTJBZ0FQQ3lBQVFnQkJBQkNFQXlBQUlBQW9BZ0JCWDNFMkFnQUxLd0VCZmdKQUlBR3NJUU1nQUNnQ1RFRi9UQVJBSUFBZ0F5QUNFSVFEREFFTElBQWdBeUFDRUlRREN3dGdBZ0YrQW44Z0FDZ0NLQ0VDUVFFaEF5QUFRZ0FnQUMwQUFFR0FBWEVFZjBFQ1FRRWdBQ2dDRkNBQUtBSWNTeHNGUVFFTElBSVJFd0FpQVVJQVdRUitJQUFvQWhRZ0FDZ0NIR3VzSUFFZ0FDZ0NDQ0FBS0FJRWE2eDlmQVVnQVFzTDd3SUNBMzhEZlNBQXZDSUNRZi8vLy84SGNTSUJRWUNBZ09RRVNRUkFBa0FDZnlBQlFmLy8vL1lEVFFSQUlBRkJnSUNBekFOSkRRSkJmeUVCUVFFTUFRc2dBSXNoQUFKOUlBRkIvLy9mL0FOTkJFQWdBVUgvLzcvNUEwMEVRQ0FBSUFDU1F3QUFnTCtTSUFCREFBQUFRSktWSVFCQkFDRUJRUUFNQXd0QkFTRUJJQUJEQUFDQXY1SWdBRU1BQUlBL2twVU1BUXNnQVVILy8rK0FCRTBFUUVFQ0lRRWdBRU1BQU1DL2tpQUFRd0FBd0QrVVF3QUFnRCtTbFF3QkMwRURJUUZEQUFDQXZ5QUFsUXNoQUVFQUN5RURJQUFnQUpRaUJTQUZsQ0lFSUFSRFJ4TGF2WlJEbU1wTXZwS1VJUVlnQlNBRUlBUkRKYXg4UFpSRERmVVJQcEtVUTZtcXFqNlNsQ0VFSUFNRVFDQUFJQUFnQmlBRWtwU1REd3NnQVVFQ2RDSUJRWkQ2QW1vcUFnQWdBQ0FHSUFTU2xDQUJRYUQ2QW1vcUFnQ1RJQUNUa3lJQUlBQ01JQUpCZjBvYklRQUxJQUFQQ3lBQVE5b1B5VDhnQUpnZ0FMeEIvLy8vL3dkeFFZQ0FnUHdIU3hzTEt3RUJmeUFBS0FJRUlRSURRQ0FCSUFKSEJFQWdBQkEwR2lBQ1FSUnJJUUlNQVFzTElBQWdBVFlDQkF1R0FnSURmd0Y4SXdCQkVHc2lBeVFBQWtBZ0FMd2lCRUgvLy8vL0IzRWlBa0hhbjZUdUJFMEVRQ0FCSUFDN0lnVWdCVVNEeU1sdE1GL2tQNkpFQUFBQUFBQUFPRU9nUkFBQUFBQUFBRGpEb0NJRlJBQUFBRkQ3SWZtL29xQWdCVVJqWWhwaHRCQlJ2cUtnT1FNQUlBV1pSQUFBQUFBQUFPQkJZd1JBSUFXcUlRSU1BZ3RCZ0lDQWdIZ2hBZ3dCQ3lBQ1FZQ0FnUHdIVHdSQUlBRWdBQ0FBazdzNUF3QkJBQ0VDREFFTElBTWdBaUFDUVJkMlFaWUJheUlDUVJkMGE3NjdPUU1JSUFOQkNHb2dBeUFDUVFGQkFCQ05CU0VDSUFNckF3QWhCU0FFUVg5TUJFQWdBU0FGbWprREFFRUFJQUpySVFJTUFRc2dBU0FGT1FNQUN5QURRUkJxSkFBZ0Fndk1DUU1FZkFWL0FYNGpBRUV3YXlJSUpBQUNRQUpBQWtBZ0FMMGlDMElnaUtjaUJrSC8vLy8vQjNFaUIwSDYxTDJBQkUwRVFDQUdRZi8vUDNGQis4TWtSZzBCSUFkQi9MS0xnQVJOQkVBZ0MwSUFXUVJBSUFFZ0FFUUFBRUJVK3lINXY2QWlBRVF4WTJJYVliVFF2YUFpQWprREFDQUJJQUFnQXFGRU1XTmlHbUcwMEwyZ09RTUlRUUVoQmd3RkN5QUJJQUJFQUFCQVZQc2grVCtnSWdCRU1XTmlHbUcwMEQyZ0lnSTVBd0FnQVNBQUlBS2hSREZqWWhwaHROQTlvRGtEQ0VGL0lRWU1CQXNnQzBJQVdRUkFJQUVnQUVRQUFFQlUreUVKd0tBaUFFUXhZMklhWWJUZ3ZhQWlBamtEQUNBQklBQWdBcUZFTVdOaUdtRzA0TDJnT1FNSVFRSWhCZ3dFQ3lBQklBQkVBQUJBVlBzaENVQ2dJZ0JFTVdOaUdtRzA0RDJnSWdJNUF3QWdBU0FBSUFLaFJERmpZaHBodE9BOW9Ea0RDRUYrSVFZTUF3c2dCMEc3alBHQUJFMEVRQ0FIUWJ6NzE0QUVUUVJBSUFkQi9MTExnQVJHRFFJZ0MwSUFXUVJBSUFFZ0FFUUFBREIvZk5rU3dLQWlBRVRLbEpPbmtRN3B2YUFpQWprREFDQUJJQUFnQXFGRXlwU1RwNUVPNmIyZ09RTUlRUU1oQmd3RkN5QUJJQUJFQUFBd2YzelpFa0NnSWdCRXlwU1RwNUVPNlQyZ0lnSTVBd0FnQVNBQUlBS2hSTXFVazZlUkR1azlvRGtEQ0VGOUlRWU1CQXNnQjBIN3crU0FCRVlOQVNBTFFnQlpCRUFnQVNBQVJBQUFRRlQ3SVJuQW9DSUFSREZqWWhwaHRQQzlvQ0lDT1FNQUlBRWdBQ0FDb1VReFkySWFZYlR3dmFBNUF3aEJCQ0VHREFRTElBRWdBRVFBQUVCVSt5RVpRS0FpQUVReFkySWFZYlR3UGFBaUFqa0RBQ0FCSUFBZ0FxRkVNV05pR21HMDhEMmdPUU1JUVh3aEJnd0RDeUFIUWZyRDVJa0VTdzBCQ3lBQklBQWdBRVNEeU1sdE1GL2tQNkpFQUFBQUFBQUFPRU9nUkFBQUFBQUFBRGpEb0NJRFJBQUFRRlQ3SWZtL29xQWlBaUFEUkRGallocGh0TkE5b2lJRm9TSUFPUU1BSUFkQkZIWWlDU0FBdlVJMGlLZEIvdzl4YTBFUlNDRUhBbjhnQTVsRUFBQUFBQUFBNEVGakJFQWdBNm9NQVF0QmdJQ0FnSGdMSVFZQ1FDQUhEUUFnQVNBQ0lBTkVBQUJnR21HMDBEMmlJZ0NoSWdRZ0EwUnpjQU11aWhtak82SWdBaUFFb1NBQW9hRWlCYUVpQURrREFDQUpJQUM5UWpTSXAwSC9EM0ZyUVRKSUJFQWdCQ0VDREFFTElBRWdCQ0FEUkFBQUFDNktHYU03b2lJQW9TSUNJQU5Fd1VrZ0pacURlem1pSUFRZ0FxRWdBS0doSWdXaElnQTVBd0FMSUFFZ0FpQUFvU0FGb1RrRENBd0JDeUFIUVlDQXdQOEhUd1JBSUFFZ0FDQUFvU0lBT1FNQUlBRWdBRGtEQ0VFQUlRWU1BUXNnQzBMLy8vLy8vLy8vQjROQ2dJQ0FnSUNBZ0xEQkFJUy9JUUFnQ0VFUWFpRUdJQWhCRUdwQkNISWhDVUVCSVFvRFFDQUdBbjhnQUpsRUFBQUFBQUFBNEVGakJFQWdBS29NQVF0QmdJQ0FnSGdMdHlJQ09RTUFJQUFnQXFGRUFBQUFBQUFBY0VHaUlRQWdDZ1JBUVFBaENpQUpJUVlNQVFzTElBZ2dBRGtESUNBSVFSQnFJQWdnQjBFVWRrR1dDR3NDZnlBQVJBQUFBQUFBQUFBQVlRUkFRUUVoQmdOQUlBWWlDVUVCYXlFR0lBaEJFR29nQ1VFRGRHb3JBd0JFQUFBQUFBQUFBQUJoRFFBTElBbEJBV29NQVF0QkF3dEJBUkNOQlNFR0lBZ3JBd0FoQUNBTFFuOVhCRUFnQVNBQW1qa0RBQ0FCSUFnckF3aWFPUU1JUVFBZ0Jtc2hCZ3dCQ3lBQklBQTVBd0FnQVNBSUt3TUlPUU1JQ3lBSVFUQnFKQUFnQmd2TkVRSURmQTkvSXdCQnNBUnJJZ2trQUNBQ0lBSkJBMnRCR0cwaUNFRUFJQWhCQUVvYkloRkJhR3hxSVF3Z0JFRUNkRUhBNHdKcUtBSUFJZzBnQTBFQmF5SUxha0VBVGdSQUlBTWdEV29oQ0NBUklBdHJJUUlEUUNBSlFjQUNhaUFLUVFOMGFpQUNRUUJJQkh4RUFBQUFBQUFBQUFBRklBSkJBblJCME9NQ2FpZ0NBTGNMT1FNQUlBSkJBV29oQWlBS1FRRnFJZ29nQ0VjTkFBc0xJQXhCR0dzaER5QU5RUUFnRFVFQVNoc2hDa0VBSVFnRFFFUUFBQUFBQUFBQUFDRUZJQU5CQUVvRVFDQUlJQXRxSVE1QkFDRUNBMEFnQlNBQUlBSkJBM1JxS3dNQUlBbEJ3QUpxSUE0Z0FtdEJBM1JxS3dNQW9xQWhCU0FDUVFGcUlnSWdBMGNOQUFzTElBa2dDRUVEZEdvZ0JUa0RBQ0FJSUFwR0lRSWdDRUVCYWlFSUlBSkZEUUFMUVM4Z0RHc2hFMEV3SUF4cklSSWdERUVaYXlFVUlBMGhDQUpBQTBBZ0NTQUlRUU4wYWlzREFDRUZRUUFoQWlBSUlRb2dDRUVCU0NJUVJRUkFBMEFnQ1VIZ0Eyb2dBa0VDZEdvQ2Z5QUZBbjhnQlVRQUFBQUFBQUJ3UHFJaUJabEVBQUFBQUFBQTRFRmpCRUFnQmFvTUFRdEJnSUNBZ0hnTHR5SUZSQUFBQUFBQUFIREJvcUFpQnBsRUFBQUFBQUFBNEVGakJFQWdCcW9NQVF0QmdJQ0FnSGdMTmdJQUlBa2dDa0VCYXlJS1FRTjBhaXNEQUNBRm9DRUZJQUpCQVdvaUFpQUlSdzBBQ3dzQ2Z5QUZJQThROWdFaUJTQUZSQUFBQUFBQUFNQS9vcHhFQUFBQUFBQUFJTUNpb0NJRm1VUUFBQUFBQUFEZ1FXTUVRQ0FGcWd3QkMwR0FnSUNBZUFzaERpQUZJQTYzb1NFRkFrQUNRQUpBQW44Z0QwRUJTQ0lWUlFSQUlBaEJBblFnQ1dvaUFpQUNLQUxjQXlJQ0lBSWdFblVpQWlBU2RHc2lDallDM0FNZ0FpQU9haUVPSUFvZ0UzVU1BUXNnRHcwQklBaEJBblFnQ1dvb0F0d0RRUmQxQ3lJTFFRRklEUUlNQVF0QkFpRUxJQVZFQUFBQUFBQUE0RDltRFFCQkFDRUxEQUVMQWtBZ0VBUkFRUUFoQ2d3QkMwRUFJUUpCQVNFUUEwQWdDVUhnQTJvZ0FrRUNkR29pRmlnQ0FDRUtBbjhnRmlBUUJIOUJBQ0FLUlEwQkdrR0FnSUFJSUFwckJVSC8vLzhISUFwckN6WUNBRUVCQ3lFS0lBSkJBV29pQWlBSVJnMEJJQXBGSVJBTUFBc0FDd0pBSUJVTkFFSC8vLzhESVFJQ1FBSkFJQlFPQWdFQUFndEIvLy8vQVNFQ0N5QUlRUUowSUFscUloQWdFQ2dDM0FNZ0FuRTJBdHdEQ3lBT1FRRnFJUTRnQzBFQ1J3MEFSQUFBQUFBQUFQQS9JQVdoSVFWQkFpRUxJQXBGRFFBZ0JVUUFBQUFBQUFEd1B5QVBFUFlCb1NFRkN5QUZSQUFBQUFBQUFBQUFZUVJBUVFBaENnSkFJQWdpQWlBTlRBMEFBMEFnQ1VIZ0Eyb2dBa0VCYXlJQ1FRSjBhaWdDQUNBS2NpRUtJQUlnRFVvTkFBc2dDa1VOQUNBUElRd0RRQ0FNUVJocklRd2dDVUhnQTJvZ0NFRUJheUlJUVFKMGFpZ0NBRVVOQUFzTUF3dEJBU0VDQTBBZ0FpSUtRUUZxSVFJZ0NVSGdBMm9nRFNBS2EwRUNkR29vQWdCRkRRQUxJQWdnQ21vaENnTkFJQWxCd0FKcUlBTWdDR29pQzBFRGRHb2dDRUVCYWlJSUlCRnFRUUowUWREakFtb29BZ0MzT1FNQVFRQWhBa1FBQUFBQUFBQUFBQ0VGSUFOQkFVNEVRQU5BSUFVZ0FDQUNRUU4wYWlzREFDQUpRY0FDYWlBTElBSnJRUU4wYWlzREFLS2dJUVVnQWtFQmFpSUNJQU5IRFFBTEN5QUpJQWhCQTNScUlBVTVBd0FnQ0NBS1NBMEFDeUFLSVFnTUFRc0xBa0FnQlVFWUlBeHJFUFlCSWdWRUFBQUFBQUFBY0VGbUJFQWdDVUhnQTJvZ0NFRUNkR29DZnlBRkFuOGdCVVFBQUFBQUFBQndQcUlpQlpsRUFBQUFBQUFBNEVGakJFQWdCYW9NQVF0QmdJQ0FnSGdMSWdLM1JBQUFBQUFBQUhEQm9xQWlCWmxFQUFBQUFBQUE0RUZqQkVBZ0Jhb01BUXRCZ0lDQWdIZ0xOZ0lBSUFoQkFXb2hDQXdCQ3dKL0lBV1pSQUFBQUFBQUFPQkJZd1JBSUFXcURBRUxRWUNBZ0lCNEN5RUNJQThoREFzZ0NVSGdBMm9nQ0VFQ2RHb2dBallDQUF0RUFBQUFBQUFBOEQ4Z0RCRDJBU0VGQWtBZ0NFRi9UQTBBSUFnaEFnTkFJQWtnQWtFRGRHb2dCU0FKUWVBRGFpQUNRUUowYWlnQ0FMZWlPUU1BSUFWRUFBQUFBQUFBY0Q2aUlRVWdBa0VBU2lFQUlBSkJBV3NoQWlBQURRQUxJQWhCZjB3TkFDQUlJUUlEUUNBSUlBSWlBR3NoQTBRQUFBQUFBQUFBQUNFRlFRQWhBZ05BQWtBZ0JTQUNRUU4wUWFENUFtb3JBd0FnQ1NBQUlBSnFRUU4wYWlzREFLS2dJUVVnQWlBTlRnMEFJQUlnQTBraERDQUNRUUZxSVFJZ0RBMEJDd3NnQ1VHZ0FXb2dBMEVEZEdvZ0JUa0RBQ0FBUVFGcklRSWdBRUVBU2cwQUN3c0NRQUpBQWtBQ1FBSkFJQVFPQkFFQ0FnQUVDMFFBQUFBQUFBQUFBQ0VHQWtBZ0NFRUJTQTBBSUFsQm9BRnFJQWhCQTNScUt3TUFJUVVnQ0NFQ0EwQWdDVUdnQVdvZ0FrRURkR29nQlNBSlFhQUJhaUFDUVFGcklnQkJBM1JxSWdNckF3QWlCeUFISUFXZ0lnV2hvRGtEQUNBRElBVTVBd0FnQWtFQlNpRURJQUFoQWlBRERRQUxJQWhCQWtnTkFDQUpRYUFCYWlBSVFRTjBhaXNEQUNFRklBZ2hBZ05BSUFsQm9BRnFJQUpCQTNScUlBVWdDVUdnQVdvZ0FrRUJheUlBUVFOMGFpSURLd01BSWdZZ0JpQUZvQ0lGb2FBNUF3QWdBeUFGT1FNQUlBSkJBa29oQXlBQUlRSWdBdzBBQzBRQUFBQUFBQUFBQUNFR0lBaEJBVXdOQUFOQUlBWWdDVUdnQVdvZ0NFRURkR29yQXdDZ0lRWWdDRUVDU2lFQUlBaEJBV3NoQ0NBQURRQUxDeUFKS3dPZ0FTRUZJQXNOQWlBQklBVTVBd0FnQ1NzRHFBRWhCU0FCSUFZNUF4QWdBU0FGT1FNSURBTUxSQUFBQUFBQUFBQUFJUVVnQ0VFQVRnUkFBMEFnQlNBSlFhQUJhaUFJUVFOMGFpc0RBS0FoQlNBSVFRQktJUUFnQ0VFQmF5RUlJQUFOQUFzTElBRWdCWm9nQlNBTEd6a0RBQXdDQzBRQUFBQUFBQUFBQUNFRklBaEJBRTRFUUNBSUlRSURRQ0FGSUFsQm9BRnFJQUpCQTNScUt3TUFvQ0VGSUFKQkFFb2hBQ0FDUVFGcklRSWdBQTBBQ3dzZ0FTQUZtaUFGSUFzYk9RTUFJQWtyQTZBQklBV2hJUVZCQVNFQ0lBaEJBVTRFUUFOQUlBVWdDVUdnQVdvZ0FrRURkR29yQXdDZ0lRVWdBaUFJUnlFQUlBSkJBV29oQWlBQURRQUxDeUFCSUFXYUlBVWdDeHM1QXdnTUFRc2dBU0FGbWprREFDQUpLd09vQVNFRklBRWdCcG81QXhBZ0FTQUZtamtEQ0FzZ0NVR3dCR29rQUNBT1FRZHhDeWdCQVg4akFFRVFheUlCSkFBZ0FTQUFOZ0lNUVlEVEFrRUZJQUVvQWd3UUJDQUJRUkJxSkFBTEtBRUJmeU1BUVJCcklnRWtBQ0FCSUFBMkFneEIyTklDUVFRZ0FTZ0NEQkFFSUFGQkVHb2tBQXNvQVFGL0l3QkJFR3NpQVNRQUlBRWdBRFlDREVHdzBnSkJBeUFCS0FJTUVBUWdBVUVRYWlRQUN5Z0JBWDhqQUVFUWF5SUJKQUFnQVNBQU5nSU1RWWpTQWtFQ0lBRW9BZ3dRQkNBQlFSQnFKQUFMS0FFQmZ5TUFRUkJySWdFa0FDQUJJQUEyQWd4QjRORUNRUUVnQVNnQ0RCQUVJQUZCRUdva0FBc29BUUYvSXdCQkVHc2lBU1FBSUFFZ0FEWUNERUc0MFFKQkFDQUJLQUlNRUFRZ0FVRVFhaVFBQzdjSEFRRi9RWVRvQTBIZ3h3SVFLa0djNkFOQjVjY0NRUUZCQVVFQUVDa2pBRUVRYXlJQUpBQWdBRUhxeHdJMkFneEJxT2dESUFBb0FneEJBVUdBZjBIL0FCQUhJQUJCRUdva0FDTUFRUkJySWdBa0FDQUFRZS9IQWpZQ0RFSEE2QU1nQUNnQ0RFRUJRWUIvUWY4QUVBY2dBRUVRYWlRQUl3QkJFR3NpQUNRQUlBQkIrOGNDTmdJTVFiVG9BeUFBS0FJTVFRRkJBRUgvQVJBSElBQkJFR29rQUNNQVFSQnJJZ0FrQUNBQVFZbklBallDREVITTZBTWdBQ2dDREVFQ1FZQ0Fma0gvL3dFUUJ5QUFRUkJxSkFBakFFRVFheUlBSkFBZ0FFR1B5QUkyQWd4QjJPZ0RJQUFvQWd4QkFrRUFRZi8vQXhBSElBQkJFR29rQUNNQVFSQnJJZ0FrQUNBQVFaN0lBallDREVIazZBTWdBQ2dDREVFRVFZQ0FnSUI0UWYvLy8vOEhFQWNnQUVFUWFpUUFJd0JCRUdzaUFDUUFJQUJCb3NnQ05nSU1RZkRvQXlBQUtBSU1RUVJCQUVGL0VBY2dBRUVRYWlRQUl3QkJFR3NpQUNRQUlBQkJyOGdDTmdJTVFmem9BeUFBS0FJTVFRUkJnSUNBZ0hoQi8vLy8vd2NRQnlBQVFSQnFKQUFqQUVFUWF5SUFKQUFnQUVHMHlBSTJBZ3hCaU9rRElBQW9BZ3hCQkVFQVFYOFFCeUFBUVJCcUpBQWpBRUVRYXlJQUpBQWdBRUhDeUFJMkFneEJsT2tESUFBb0FneENnSUNBZ0lDQWdJQ0FmMEwvLy8vLy8vLy8vLzhBRU4wR0lBQkJFR29rQUNNQVFSQnJJZ0FrQUNBQVFjcklBallDREVHZzZRTWdBQ2dDREVJQVFuOFEzUVlnQUVFUWFpUUFJd0JCRUdzaUFDUUFJQUJCMDhnQ05nSU1RYXpwQXlBQUtBSU1RUVFRRWlBQVFSQnFKQUFqQUVFUWF5SUFKQUFnQUVIWnlBSTJBZ3hCdU9rRElBQW9BZ3hCQ0JBU0lBQkJFR29rQUVHQS93RkI0TWdDRUJOQnlNNENRZXpJQWhBVFFhRFBBa0VFUVkzSkFoQU5RZnpQQWtFQ1FackpBaEFOUWRqUUFrRUVRYW5KQWhBTlFlVC9BVUc0eVFJUUtDTUFRUkJySWdBa0FDQUFRY2pKQWpZQ0RFR1EwUUpCQUNBQUtBSU1FQVFnQUVFUWFpUUFRZWJKQWhDVEJVR0x5Z0lRa2dWQnNzb0NFSkVGUWRIS0FoQ1FCVUg1eWdJUWp3VkJsc3NDRUk0Rkl3QkJFR3NpQUNRQUlBQkJ2TXNDTmdJTVFhalRBa0VFSUFBb0Fnd1FCQ0FBUVJCcUpBQWpBRUVRYXlJQUpBQWdBRUhheXdJMkFneEIwTk1DUVFVZ0FDZ0NEQkFFSUFCQkVHb2tBRUdCekFJUWt3VkJvY3dDRUpJRlFjTE1BaENSQlVIanpBSVFrQVZCaGMwQ0VJOEZRYWJOQWhDT0JTTUFRUkJySWdBa0FDQUFRY2pOQWpZQ0RFSDQwd0pCQmlBQUtBSU1FQVFnQUVFUWFpUUFJd0JCRUdzaUFDUUFJQUJCNTgwQ05nSU1RYURVQWtFSElBQW9BZ3dRQkNBQVFSQnFKQUFMREFBZ0FDQUFLQUlBRUlvRkN5WUJBWDhnQUNnQ0JDSUJCRUFnQUNBQktBSW9FUUVBQ3lBQVFRQTJBaFFnQUVFQU5nSUVDenNCQVg4Z0FDZ0NCQ0lCQkVBZ0FFRUJJQUVvQWlRUkFnQWdBQ2dDRUFSQUlBQkJBRFlDdUFJZ0FFSElBVFlDRkE4TElBQkI1QUEyQWhRTEMvY0NBUXAvSUFBb0F1UURJZ1FnQUNnQ1dDSUJRUUZHSWdJMkFod2dCQ0FBUVFGQi9nVkJnQUlnQWhzZ0FDZ0NlQ0FBS0FJRUtBSUlFUWtBTmdJWUlBQW9BbmhCQVU0RVFDQUVLQUlVSVFZZ0FVRUJSeUVJQTBBZ0JpQUVJQWRCQW5RaUFXb29BaUFpQW0waEJpQUlSUVJBSUFRb0FoZ2dBV29pQXlBREtBSUFRZjhCYWpZQ0FBc2dBa0grQVdvZ0FrRUJheUlKUVFGMElncHRJUVVnQkNnQ0dDQUJhaWdDQUNFQlFRQWhBa0VBSVFNRFFDQURJQVZLQkVBRFFDQURJQUpCQVdvaUFrRUJkRUVCY2tIL0FXd2dDV29nQ20waUJVb05BQXNMSUFFZ0Eyb2dBaUFHYkRvQUFDQURRUUZxSWdOQmdBSkhEUUFMSUFoRkJFQkJBU0VDQTBBZ0FTQUNheUlGSUFFdEFBQTZBQUFnQVNBQ2FpSURJQUV0QVA4Qk9nRC9BU0FCSUFKQmYzTnFJQUV0QUFBNkFBQWdBeUFCTFFEL0FUb0FnQUlnQlVFQ2F5QUJMUUFBT2dBQUlBTWdBUzBBL3dFNkFJRUNJQUpCQTJvaUFrR0FBa2NOQUFzTElBZEJBV29pQnlBQUtBSjRTQTBBQ3dzTDNBWUJDSDlCQVNFQkFrQUNRQ0FBS0FMVUFpSUNRUUZHQkVBZ0FDQUFLQUxZQWlJQ0tBSWNOZ0xvQWlBQUlBSW9BaUFpQXpZQzdBSWdBa0VCTmdKQUlBSkNnWUNBZ0JBM0FqZ2dBa0VCTmdKSUlBSWdBaWdDSkRZQ1JDQUNJQU1nQWlnQ0RDSUNjQ0lESUFJZ0F4czJBa3dnQUVJQk53UHdBZ3dCQ3lBQ1FRRnJRUVJQQkVBZ0FDZ0NBQ0lCSUFJMkFoZ2dBVUViTmdJVUlBQW9BZ0JCQkRZQ0hDQUFJQUFvQWdBb0FnQVJBUUFMSUFBZ0FDZ0NIQ0FBS0FLc0F5QUFLQUs4QW13UWFqWUM2QUlnQUNnQ0lDQUFLQUtzQXlBQUtBTEFBbXdRYWlFQ0lBQkJBRFlDOEFJZ0FDQUNOZ0xzQWlBQUtBTFVBa0VCU0EwQklBQkI5QUpxSVFZRFFDQUFJQU5CQW5ScUtBTFlBaUlCSUFFb0FnZ2lCRFlDT0NBQklBRW9BZ3dpQlRZQ1BDQUJJQVFnQld3aUFqWUNRQ0FCSUFRZ0FTZ0NKR3cyQWtRZ0FTQUJLQUljSUFSd0lnZ2dCQ0FJR3pZQ1NDQUJJQUVvQWlBZ0JYQWlBU0FGSUFFYk5nSk1JQUlnQjJwQkMwNEVRQ0FBS0FJQUlnRkJEallDRkNBQUlBRW9BZ0FSQVFBTEFrQWdBa0VCU0EwQUlBUWdCV3dpQVVFQmF5RUVJQUZCQTNFaUFRUkFBMEFnQUNBQUtBTHdBaUlGUVFGcU5nTHdBaUFBSUFWQkFuUnFJQU0yQXZRQ0lBSkJBV3NoQWlBQlFRRnJJZ0VOQUFzTElBUkJBMGtOQUFOQUlBQWdBQ2dDOEFJaUFVRUJhallDOEFJZ0JpQUJRUUowYWlBRE5nSUFJQUFnQUNnQzhBSWlBVUVCYWpZQzhBSWdCaUFCUVFKMGFpQUROZ0lBSUFBZ0FDZ0M4QUlpQVVFQmFqWUM4QUlnQmlBQlFRSjBhaUFETmdJQUlBQWdBQ2dDOEFJaUFVRUJhallDOEFJZ0JpQUJRUUowYWlBRE5nSUFJQUpCQkVvaEFTQUNRUVJySVFJZ0FRMEFDd3NnQTBFQmFpSURJQUFvQXRRQ0lnRklCRUFnQUNnQzhBSWhCd3dCQ3dzZ0FVRUJTQTBCQzBFQUlRSURRQ0FBSUFKQkFuUnFLQUxZQWlJREtBSlFSUVJBQWtBZ0F5Z0NFQ0lCUVFOTkJFQWdBQ0FCUVFKMGFpZ0NwQUVOQVFzZ0FDZ0NBQ0lFSUFFMkFoZ2dCRUUyTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQXlBQVFRRkJoQUVnQUNnQ0JDZ0NBQkVFQUNBQUlBRkJBblJxS0FLa0FVR0VBUkJBTmdKUUlBQW9BdFFDSVFFTElBSkJBV29pQWlBQlNBMEFDd3NnQUNBQUtBTFVBeWdDQUJFQkFDQUFJQUFvQXNRREtBSUFFUUVBSUFBb0Fzd0RJQUFvQXNRREtBSUVOZ0lBQzNNQkFuOGdBRVVFUUVFQVFRTkJwTVFBUVFBUU9BOExJQUFvQWdBaUFVVUVRQThMSUFFb0FnQVFNMEVBSVFFRGZ5QUFLQUlBSWdJb0Fnd2dBVXdFZnlBQ0tBSUlFRE1nQUNnQ0FCQXpJQUJCQURZQ0FFRUFCU0FDS0FJSUlBRkJER3hxS0FJQUVETWdBVUVCYWlFQkRBRUxDeG9MTlFBZ0FDZ0NBQm9nQUNnQ0FDQUFFTjBCUVJSc2Fob2dBQ2dDQUNBQUVJSUJRUlJzYWhvZ0FDZ0NBQ0FBRU4wQlFSUnNhaG9MTEFBZ0FDZ0NBQm9nQUNnQ0FDQUFFTndCYWhvZ0FDZ0NBQ0FBRUpFQmFob2dBQ2dDQUNBQUVOd0JhaG9MVWdBZ0FFSUFOd0pvSUFCQnB3RTJBaEFnQUVHb0FUWUNEQ0FBUWFrQk5nSUlJQUJCcWdFMkFnUWdBRUdyQVRZQ0FDQUFRZ0EzQW53Z0FFTCtBRGNDZENBQVFZQ3JBallDY0NBQVFRQTJBaFFnQUFzc0FRRi9JQUFRbkFVZ0FDZ0NBQVJBSUFBUWdnVWdBQkEwR2lBQUtBSUFJUUVnQUJEY0FSb2dBUkF6Q3d2bkVnRVZmeU1BUVlBTGF5SU5KQUFnQTBFRGRDSUZRV0J4UVFSeUlROGdBa0VDZENJSFFXQnhRUUp5SVJJZ0FVRURkQ0lNUVdCeFFRUnlJUk1nQUNnQzVBTW9BaGdoR0FKQUlBQW9Bb1FCSWdoQkFVZ0VRQXdCQ3lBUElBVkJISElpQ21wQkFYVWhGQ0FTSUFkQkhuSWlDMnBCQVhVaEZTQVRJQXhCSEhJaURtcEJBWFVoRmlBQUtBS0lBU0lGS0FJSUlSY2dCU2dDQkNFUUlBVW9BZ0FoRVVILy8vLy9CeUVNQTBBQ2Z5QUVJQkZxTFFBQUlnVWdFMGdFUUNBRklBNXJRUUYwSWdjZ0Iyd2hCeUFGSUJOclFRRjBJZ1VnQld3TUFRc2dCU0FPU2dSQUlBVWdFMnRCQVhRaUJ5QUhiQ0VISUFVZ0RtdEJBWFFpQlNBRmJBd0JDd0ovSUFVZ0Zrd0VRQ0FGSUE1clFRRjBJZ1VnQld3TUFRc2dCU0FUYTBFQmRDSUZJQVZzQ3lFSFFRQUxJUVlDZnlBRUlCQnFMUUFBSWdVZ0VrZ0VRQ0FHSUFVZ0VtdEJBMndpQmlBR2JHb2hCaUFGSUF0clFRTnNJZ1VnQld3TUFRc2dCU0FMU2dSQUlBWWdCU0FMYTBFRGJDSUdJQVpzYWlFR0lBVWdFbXRCQTJ3aUJTQUZiQXdCQ3lBRklCVk1CRUFnQlNBTGEwRURiQ0lGSUFWc0RBRUxJQVVnRW10QkEyd2lCU0FGYkFzZ0Iyb2hCd0ovSUFRZ0Yyb3RBQUFpQlNBUFNBUkFJQVlnQlNBUGF5SUdJQVpzYWlFR0lBVWdDbXNpQlNBRmJBd0JDeUFGSUFwS0JFQWdCaUFGSUFwcklnWWdCbXhxSVFZZ0JTQVBheUlGSUFWc0RBRUxJQVVnRkV3RVFDQUZJQXBySWdVZ0JXd01BUXNnQlNBUGF5SUZJQVZzQ3lFSklBMUJnQU5xSUFSQkFuUnFJQVkyQWdBZ0J5QUphaUlGSUF3Z0JTQU1TQnNoRENBRVFRRnFJZ1FnQ0VjTkFBc2dDRUVCY1NFRkFrQWdDRUVCUmdSQVFRQWhDMEVBSVFRTUFRc2dDRUYrY1NFR1FRQWhDMEVBSVFRRFFDQU1JQTFCZ0FOcUlBUkJBblJxS0FJQVRnUkFJQTFCZ0FGcUlBdHFJQVE2QUFBZ0MwRUJhaUVMQ3lBTUlBMUJnQU5xSUFSQkFYSWlCMEVDZEdvb0FnQk9CRUFnRFVHQUFXb2dDMm9nQnpvQUFDQUxRUUZxSVFzTElBUkJBbW9oQkNBR1FRSnJJZ1lOQUFzTElBVkZEUUFnRFVHQUEyb2dCRUVDZEdvb0FnQWdERW9OQUNBTlFZQUJhaUFMYWlBRU9nQUFJQXRCQVdvaEN3dEIvd0FoQmlBTlFZQURhaUVFQTBBZ0JFTC8vLy8vOS8vLy8vOEFOd0lZSUFSQy8vLy8vL2YvLy8vL0FEY0NFQ0FFUXYvLy8vLzMvLy8vL3dBM0FnZ2dCRUwvLy8vLzkvLy8vLzhBTndJQUlBUkJJR29oQkNBR1FRZEdJUVVnQmtFSWF5RUdJQVZGRFFBTFFRQWhGaUFMUVFCS0JFQURRQ0FQSUExQmdBRnFJQlpxTFFBQUlnb2dBQ2dDaUFFaUJ5Z0NDR290QUFCcklnaEJCSFFpQlVIQUFtb2hEaUFGUWNBQmFpRVVJQVZCUUdzaEZTQVRJQWNvQWdBZ0Ntb3RBQUJySWdsQkJuUWlGMEdBQW1vaEVFRUhJUVVnRFNJR1FZQURhaUVFSUJJZ0J5Z0NCQ0FLYWkwQUFHc2lFVUhJQUd4QmtBRnFJZ3doQnlBUlFRTnNJaEVnRVd3Z0NVRUJkQ0lKSUFsc2FpQUlJQWhzYWlJUklRa0RRQ0FFS0FJQUlBbEtCRUFnQkNBSk5nSUFJQVlnQ2pvQUFBc2dDU0FWYWlJSUlBUW9BZ1JJQkVBZ0JDQUlOZ0lFSUFZZ0Nqb0FBUXNnQ0NBVWFpSUlJQVFvQWdoSUJFQWdCQ0FJTmdJSUlBWWdDam9BQWdzZ0NDQU9haUlJSUFRb0FneElCRUFnQkNBSU5nSU1JQVlnQ2pvQUF3c2dCU0lJUVFGcklRVWdCeUFKYWlFSklBWkJCR29oQmlBRVFSQnFJUVFnQjBHZ0Ftb2hCeUFJRFFBTFFRY2hCU0FNSVFjZ0VDQVJhaUlRSVFrRFFDQUVLQUlBSUFsS0JFQWdCQ0FKTmdJQUlBWWdDam9BQUFzZ0NTQVZhaUlJSUFRb0FnUklCRUFnQkNBSU5nSUVJQVlnQ2pvQUFRc2dDQ0FVYWlJSUlBUW9BZ2hJQkVBZ0JDQUlOZ0lJSUFZZ0Nqb0FBZ3NnQ0NBT2FpSUlJQVFvQWd4SUJFQWdCQ0FJTmdJTUlBWWdDam9BQXdzZ0JTSUlRUUZySVFVZ0J5QUphaUVKSUFaQkJHb2hCaUFFUVJCcUlRUWdCMEdnQW1vaEJ5QUlEUUFMUVFjaEJTQU1JUWNnRUNBWGFrR0FCbW9pRUNFSkEwQWdCQ2dDQUNBSlNnUkFJQVFnQ1RZQ0FDQUdJQW82QUFBTElBa2dGV29pQ0NBRUtBSUVTQVJBSUFRZ0NEWUNCQ0FHSUFvNkFBRUxJQWdnRkdvaUNDQUVLQUlJU0FSQUlBUWdDRFlDQ0NBR0lBbzZBQUlMSUFnZ0Rtb2lDQ0FFS0FJTVNBUkFJQVFnQ0RZQ0RDQUdJQW82QUFNTElBVWlDRUVCYXlFRklBY2dDV29oQ1NBR1FRUnFJUVlnQkVFUWFpRUVJQWRCb0FKcUlRY2dDQTBBQ3lBUUlCZHFRWUFLYWlFSlFRY2hCUU5BSUFRb0FnQWdDVW9FUUNBRUlBazJBZ0FnQmlBS09nQUFDeUFKSUJWcUlnY2dCQ2dDQkVnRVFDQUVJQWMyQWdRZ0JpQUtPZ0FCQ3lBSElCUnFJZ2NnQkNnQ0NFZ0VRQ0FFSUFjMkFnZ2dCaUFLT2dBQ0N5QUhJQTVxSWdjZ0JDZ0NERWdFUUNBRUlBYzJBZ3dnQmlBS09nQURDeUFGSWdkQkFXc2hCU0FKSUF4cUlRa2dCa0VFYWlFR0lBUkJFR29oQkNBTVFhQUNhaUVNSUFjTkFBc2dGa0VCYWlJV0lBdEhEUUFMQ3lBQlFYeHhJUVZCQUNFSElBMGhCQ0FEUVh4eFFRRjBJUUFnQWtGNGNTSURRUUZ5UVFaMElRd2dBMEVDY2tFR2RDRUdJQU5CQTNKQkJuUWhDQ0FEUVFSeVFRWjBJUWtnQTBFRmNrRUdkQ0VLSUFOQkJuSkJCblFoQ3lBQ1FRZHlRUVowSVE4RFFDQVlJQVVnQjJwQkFuUnFLQUlBSWdFZ0EwRUdkR29nQUdvaUFpQUVMUUFBUVFGcU93RUFJQUlnQkMwQUFVRUJhanNCQWlBQ0lBUXRBQUpCQVdvN0FRUWdBaUFFTFFBRFFRRnFPd0VHSUFFZ0RHb2dBR29pQWlBRUxRQUVRUUZxT3dFQUlBSWdCQzBBQlVFQmFqc0JBaUFDSUFRdEFBWkJBV283QVFRZ0FpQUVMUUFIUVFGcU93RUdJQUVnQm1vZ0FHb2lBaUFFTFFBSVFRRnFPd0VBSUFJZ0JDMEFDVUVCYWpzQkFpQUNJQVF0QUFwQkFXbzdBUVFnQWlBRUxRQUxRUUZxT3dFR0lBRWdDR29nQUdvaUFpQUVMUUFNUVFGcU93RUFJQUlnQkMwQURVRUJhanNCQWlBQ0lBUXRBQTVCQVdvN0FRUWdBaUFFTFFBUFFRRnFPd0VHSUFFZ0NXb2dBR29pQWlBRUxRQVFRUUZxT3dFQUlBSWdCQzBBRVVFQmFqc0JBaUFDSUFRdEFCSkJBV283QVFRZ0FpQUVMUUFUUVFGcU93RUdJQUVnQ21vZ0FHb2lBaUFFTFFBVVFRRnFPd0VBSUFJZ0JDMEFGVUVCYWpzQkFpQUNJQVF0QUJaQkFXbzdBUVFnQWlBRUxRQVhRUUZxT3dFR0lBRWdDMm9nQUdvaUFpQUVMUUFZUVFGcU93RUFJQUlnQkMwQUdVRUJhanNCQWlBQ0lBUXRBQnBCQVdvN0FRUWdBaUFFTFFBYlFRRnFPd0VHSUFFZ0Qyb2dBR29pQVNBRUxRQWNRUUZxT3dFQUlBRWdCQzBBSFVFQmFqc0JBaUFCSUFRdEFCNUJBV283QVFRZ0FTQUVMUUFmUVFGcU93RUdJQVJCSUdvaEJDQUhRUUZxSWdkQkJFY05BQXNnRFVHQUMyb2tBQXZMQXdFRWZ5QUFLQUxrQXlBQVFRRkIvQThnQUNnQ0JDZ0NBQkVFQUNJQVFmd0hhaUlCTmdJb0lBQkMvLy8vL3c4M0F2Z0hJQUJDZ1lDQWdDQTNBb0FJSUFCQ2c0Q0FnTUFBTndLSUNDQUFRdjMvLy85dk53THdCeUFBUW9XQWdJRGdBRGNDa0FnZ0FFTDcvLy8vVHpjQzZBY2dBRUtIZ0lDQWdBRTNBcGdJSUFCQytmLy8vNjkvTndMZ0J5QUFRb21BZ0lDZ0FUY0NvQWdnQUVMMy8vLy9qMzgzQXRnSElBQkNpNENBZ01BQk53S29DQ0FBUXZYLy8vL3ZmamNDMEFjZ0FFS05nSUNBNEFFM0FyQUlJQUJDOC8vLy84OStOd0xJQnlBQVFRODJBcmdJSUFCQzhmLy8vNjkrTndMQUIwRVFJUUpCRUNFREEwQWdBU0FEUVFKMElnQnFJQUkyQWdBZ0FTQUFhMEVBSUFKcklnUTJBZ0FnQVNBQVFRUnlhaUFDTmdJQUlBRWdBMEYvYzBFQ2RHb2dCRFlDQUNBQ1FRRnFJUUpCTUNFQUlBTkJBbW9pQTBFd1J3MEFDd05BSUFFZ0FFRUNkQ0lDYWtFZ05nSUFJQUVnQW10QllEWUNBQ0FCSUFKQkJISnFRU0EyQWdBZ0FTQUFRWDl6UVFKMGFrRmdOZ0lBSUFFZ0FrRUljbXBCSURZQ0FDQUJRWDRnQUd0QkFuUnFRV0EyQWdBZ0FTQUNRUXh5YWtFZ05nSUFJQUZCZlNBQWEwRUNkR3BCWURZQ0FDQUFRUVJxSWdCQmdBSkhEUUFMQ3dvQUlBQW9BZ0FnQVdvTDJBRUJBbjhDUUNBQUtBSzBBZzBBQWtBZ0FDZ0NLRUVEYXc0RkFBRUJBUUFCQ3lBQUtBSWtRUU5IRFFBZ0FDZ0NMRUVDUncwQUlBQW9BbmhCQTBjTkFDQUFLQUt3QWcwQUlBQW9BdGdCSWdFb0FnaEJBa2NOQUNBQktBSmdRUUZIRFFBZ0FTZ0N1QUZCQVVjTkFDQUJLQUlNUVFKS0RRQWdBU2dDWkVFQlJ3MEFJQUVvQXJ3QlFRRkhEUUFnQVNnQ0pDSUNJQUFvQXNRQ1J3MEFJQUVvQW53Z0FrY05BQ0FCS0FMVUFTQUNSdzBBSUFFb0FpZ2lBaUFBS0FMSUFrY05BQ0FCS0FLQUFTQUNSdzBBSUFFb0F0Z0JJQUpHRHd0QkFBdnpBUUVHZnlBQUtBTGdBeUlCSUFCQkFVR0FDQ0FBS0FJRUtBSUFFUVFBTmdJSUlBRWdBRUVCUVlBSUlBQW9BZ1FvQWdBUkJBQTJBZ3dnQVNBQVFRRkJnQWdnQUNnQ0JDZ0NBQkVFQURZQ0VDQUJJQUJCQVVHQUNDQUFLQUlFS0FJQUVRUUFJZ00yQWhRZ0FTZ0NFQ0VFSUFFb0Fnd2hCU0FCS0FJSUlRWkJBQ0VCUVlCL0lRQURRQ0FHSUFGQkFuUWlBbW9nQUVIcHpRVnNRWUNBQW1wQkVIVTJBZ0FnQWlBRmFpQUFRYUtMQjJ4QmdJQUNha0VRZFRZQ0FDQUNJQVJxSUFCQnJwSjliRFlDQUNBQ0lBTnFJQUJCNTg5K2JFR0FnQUpxTmdJQUlBQkJBV29oQUNBQlFRRnFJZ0ZCZ0FKSERRQUxDL1pEQXk1L0Izd0JmaU1BUVJCcklpa2tBQ0FGUVFBZ0JVRUFTaHNoTkFOQUlDOGdORWNFUUNBTElEQkJDSFJxSWg4Z0JDQXZRYkR4Qkd4cUlnVW9BZ0EyQWdBQ1FDQUpJQVVyQXdpMklBVXJBeEMySUNsQkRHb2dLVUVJYWhEaUFVRUFTQTBBSUI4Z0tTb0NETHM1QXpnZ0gwRkFheUFwS2dJSXV6a0RBQ0FGUVJ4cUlUVWdCVUhjdUFKcUlUWWdCU2dDR0JvZ0JVR2M4UVJxSVNVZ0gwSElBR29oS2lBZlFhZ0JhaUl1SVRjakFFRVFheUluSkFCQkFoRDlBeUVXUVFJUS9RTWhJVUVDUVFJUXZBRWhIa0VBSVJrQ2Z3SkFBMEFnR1VFRVJ3UkFBbjhnSlNBWlFRRnFJaE5CQW5ScUtBSUFJZzRnSlNBWlFRSjBhaWdDQUNJRmEwRUJhcmRFbXBtWm1abVpxVCtpUkFBQUFBQUFBT0Evb0NJOElBVzNvQ0k5bVVRQUFBQUFBQURnUVdNRVFDQTlxZ3dCQzBHQWdJQ0FlQXNoQlFKL0lBNjNJRHloSWp5WlJBQUFBQUFBQU9CQll3UkFJRHlxREFFTFFZQ0FnSUI0Q3lBRmF5SVBRWDhnRDBGL1NodEJBV29oRUVFQUlRNGdEMEVCYWtFQ0VMd0JJU0lEUUNBT0lCQkhCRUFnQ1NBMUlBVWdEbXBCQW5RaUQyb29BZ0N5SUE4Z05tb29BZ0N5SUNkQkRHb2dKMEVJYWhEaUFVRUFTQTBFSUNJb0FnQWlEeUFPUVFSMEloSnFJQ2NxQWd5N09RTUFJQThnRWtFSWNtb2dKeW9DQ0xzNUF3QWdEa0VCYWlFT0RBRUxDMEYvSVJRQ1FDQWlLQUlFSWhkQkFrZ05BQ0FpS0FJSUlnVkJBa2dOQUNBZUtBSUlJQVZIRFFBZ0Z5QUZJQVVnRjBvYklnNGdIaWdDQkVjTkFDQVdLQUlFSUE1SERRQWdJU2dDQkNBRlJ3MEFBbjhnSWlnQ0JDQWlLQUlJRUx3QklnOEVRRUYvSVJJQ1FDQVBLQUlFSWc0Z0lpZ0NCRWNOQUNBUEtBSUlJaFVnSWlnQ0NFY05BRUVBSVJJZ0RrRUFJQTVCQUVvYklSZ2dGVUVBSUJWQkFFb2JJUkZCQUNFT0EwQWdEaUFZUmcwQklBNGdGV3doR2tFQUlSQURRQ0FRSUJGSEJFQWdFQ0FhYWtFRGRDSWJJQThvQWdCcUlDSW9BZ0FnRzJvckF3QTVBd0FnRUVFQmFpRVFEQUVMQ3lBT1FRRnFJUTRNQUFzQUN5QVBJQkpCZjBvTkFSb2dEeEJGQzBFQUN5SVlSUTBBUVFBaERrRUFJUkpCZnlFUUFrQWdHQ2dDQkNJUlFRRklEUUFnR0NnQ0NDSVBRUUZJRFFBZ0lTZ0NCQ0FQUncwQUEwQWdEaUFQUndSQUlDRW9BZ0FnRGtFRGRHcENBRGNEQUNBT1FRRnFJUTRNQVFzTElCZ29BZ0FoRUFOQUlCRWdFa1lFUUNBUnR5RThRUUFoRUVFQUlRNERRQ0FPSUE5R0RRTWdJU2dDQUNBT1FRTjBhaUlTSUJJckF3QWdQS001QXdBZ0RrRUJhaUVPREFBTEFBVWdJU2dDQUNFT1FRQWhGUU5BSUE4Z0ZVY0VRQ0FPSUJBckF3QWdEaXNEQUtBNUF3QWdGVUVCYWlFVklBNUJDR29oRGlBUVFRaHFJUkFNQVFzTElCSkJBV29oRWd3QkN3QUxBQXNDUUNBUVFRQklEUUJCZnlFVkFrQWdHQ2dDQ0NJT0lDRW9BZ1JIRFFCQkFDRVZJQTVCQUNBT1FRQktHeUVSSUJnb0FnUWlEa0VBSUE1QkFFb2JJUm9nR0NnQ0FDRU9RUUFoRUFOQUlCQWdHa1lOQVNBaEtBSUFJUTlCQUNFU0EwQWdFU0FTUndSQUlBNGdEaXNEQUNBUEt3TUFvVGtEQUNBU1FRRnFJUklnRGtFSWFpRU9JQTlCQ0dvaER3d0JDd3NnRUVFQmFpRVFEQUFMQUFzZ0ZVRUFTQTBBSUJlM255RThRUUFoRGlBRklCZHNJZ1ZCQUNBRlFRQktHeUVGQTBBZ0JTQU9Sd1JBSUJnb0FnQWdEa0VEZEdvaUR5QVBLd01BSUR5ak9RTUFJQTVCQVdvaERnd0JDd3NDZjBFQUlRNUJBQ0VQUVg4aEVBSkFBa0FnR0NnQ0JDSVNRUUpJRFFBZ0dDZ0NDQ0lGUVFKSURRQWdIaWdDQ0NBRlJ3MEFJQVVnRWlBRklCSklHeUlhSUI0b0FnUkhEUUFnRmlnQ0JDQWFSdzBBQWtBZ0dpQWFJQm9RdkFFaUZ5Z0NCRVlFUUNBWEtBSUlJQnBHRFFFTERBSUxBa0FnQlNBU1RDSTRSUVJBQWtBZ0dDZ0NCQ0lSSUJjb0FnUkhEUUFnRnlnQ0NDQVJSdzBBUVFBaEZDQVJRUUFnRVVFQVNoc2hJeUFZS0FJSUlodEJBQ0FiUVFCS0d5RWdJQmNvQWdBaUhTRUZBMEFnRHlBalJnMEJJQThnRzJ3aEtFRUFJUTREUUFKQUlBNGdFVWNFUUNBT0lBOUpCRUFnQlNBZElBNGdFV3dnRDJwQkEzUnFLd01BT1FNQURBSUxJQmdvQWdBaEVDQUZRZ0EzQXdBZ0VDQW9RUU4wYWlFU0lCQWdEaUFiYkVFRGRHb2hGVUVBSVJCRUFBQUFBQUFBQUFBaFBBTkFJQkFnSUVZTkFpQUZJRHdnRWlzREFDQVZLd01Bb3FBaVBEa0RBQ0FRUVFGcUlSQWdGVUVJYWlFVklCSkJDR29oRWd3QUN3QUxJQTlCQVdvaER3d0NDeUFPUVFGcUlRNGdCVUVJYWlFRkRBQUxBQXNBQ3lBVVFYOUtEUUVNQXdzQ1FDQVlLQUlJSWhFZ0Z5Z0NCRWNOQUNBWEtBSUlJQkZIRFFCQkFDRVFJQkZCQUNBUlFRQktHeUViSUJnb0FnUWlCVUVBSUFWQkFFb2JJU01nRnlnQ0FDSWdJUThEUUVFQUlRVWdEaUFiUmcwQkEwQUNRQ0FGSUJGSEJFQWdCU0FPU1FSQUlBOGdJQ0FGSUJGc0lBNXFRUU4wYWlzREFEa0RBQXdDQ3lBWUtBSUFJUlVnRDBJQU53TUFJQlVnQlVFRGRHb2hFaUFWSUE1QkEzUnFJUlZCQUNFVVJBQUFBQUFBQUFBQUlUd0RRQ0FVSUNOR0RRSWdEeUE4SUJVckF3QWdFaXNEQUtLZ0lqdzVBd0FnRkVFQmFpRVVJQklnRVVFRGRDSWRhaUVTSUJVZ0hXb2hGUXdBQ3dBTElBNUJBV29oRGd3Q0N5QUZRUUZxSVFVZ0QwRUlhaUVQREFBTEFBc0FDeUFRUVg5S0RRQU1BZ3NqQUVFUWF5SWpKQUJCZnlFUUFrQWdGeWdDQkNJYlFRSklEUUFnR3lBWEtBSUlSdzBBSUJZb0FnUWdHMGNOQUNBYkVQMERJaWhGRFFBZ0l5QWJRUUZySWhRMkFnd2dJeUFvS0FJQVFRaHFOZ0lJUVFBaER5TUFRUkJySWhFa0FFRi9JUndDUUNBWEtBSUlJaElnRnlnQ0JFY05BQ0FTSUJZb0FnUkhEUUFnRWlBaktBSU1RUUZxUncwQUlCSkJBbXNpSUVFQUlDQkJBRW9iSVNzRFFBSkFJQ3NnRHlJVlJ3UkFJQlZCQTNRaUhDQVdLQUlBYWlBWEtBSUFJQklnRld4QkEzUnFJaDBnSEdvckF3QTVBd0FnRVNBZElCVkJBV29pRDBFRGRDSXNhaUl0TmdJSUlCRWdFaUFWUVg5emFpSWtOZ0lNUVFBaEJRSkFJQkZCQ0dvaURpQU9FUGNEbnlJOFJBQUFBQUFBQUFBQVlRMEFJQTRvQWdBaUppQW1Ld01BSWowZ1BKb2dQQ0E5UkFBQUFBQUFBQUFBWXhzaVBLQWlQVGtEQUVRQUFBQUFBQUR3UHlBOElEMmluNk1oUFNBT0tBSUVJZzVCQUNBT1FRQktHeUVPQTBBZ0JTQU9SZzBCSUNZZ0JVRURkR29pTVNBOUlERXJBd0NpT1FNQUlBVkJBV29oQlF3QUN3QUxJQ01vQWdnZ0hHb2dQSm9pUERrREFDQVBJUVVnUEVRQUFBQUFBQUFBQUdFTkFnTkFSQUFBQUFBQUFBQUFJVHdnRHlFT0lBVWdFazROQWdOQUlBVWdEazBFUUNBRklCSnNJUndnQlNFT0EwQWdEaUFTU0FSQUlEd2dGeWdDQUNBT0lCeHFRUU4wYWlzREFDQWRJQTVCQTNScUt3TUFvcUFoUENBT1FRRnFJUTRNQVFzTElCWW9BZ0FnQlVFRGRHb2dQRGtEQUNBRlFRRnFJUVVNQWdVZ1BDQVhLQUlBSUE0Z0Vtd2dCV3BCQTNScUt3TUFJQjBnRGtFRGRHb3JBd0Npb0NFOElBNUJBV29oRGd3QkN3QUxBQXNBQ3dKQUFrQWdFa0VDVGdSQUlCWW9BZ0FpQlNBZ1FRTjBJZzVxSUJjb0FnQWlEeUFTSUNCc0loVWdJR3BCQTNScUt3TUFPUU1BSUNNb0FnZ2dEbW9nRHlBU1FRRnJJZzRnRldwQkEzUnFLd01BT1FNQURBRUxJQkpCQVVjTkFTQVdLQUlBSVFVZ0Z5Z0NBQ0VQUVFBaERnc2dCU0FPUVFOMGFpQVBJQTRnRW13Z0RtcEJBM1JxS3dNQU9RTUFDMEVBSVJ3Z0VrRUFJQkpCQUVvYklTWWdFaUVGQTBBZ0JVRUJTQTBESUJjb0FnQWdCVUVCYXlJUElCSnNRUU4wYWlFZEFrQWdCU0FnU2cwQUlCSWdCV3NoSkNBZElBVkJBM1JxSVNzZ0JTRVZBMEFnRWlBVlRBMEJJQkVnSkRZQ0RDQVJJQ1EyQWdRZ0VTQXJOZ0lJSUJFZ0Z5Z0NBQ0FTSUJWc0lpd2dCV3BCQTNScU5nSUFJQkZCQ0dvZ0VSRDNBeUU4SUFVaERnTkFJQTRnRWtnRVFDQVhLQUlBSUE0Z0xHcEJBM1JxSWkwZ0xTc0RBQ0E4SUIwZ0RrRURkR29yQXdDaW9Ua0RBQ0FPUVFGcUlRNE1BUXNMSUJWQkFXb2hGUXdBQ3dBTFFRQWhEZ05BSUE0Z0prY0VRQ0FkSUE1QkEzUnFRZ0EzQXdBZ0RrRUJhaUVPREFFTEN5QWRJQTlCQTNScVFvQ0FnSUNBZ0lENFB6Y0RBQ0FQSVFVTUFBc0FDeUFSSUNRMkFnd2dFU0FrTmdJRUlCRWdMVFlDQ0NBUklCWW9BZ0FnTEdvMkFnQWdFVUVJYWlBUkVQY0RSQUFBQUFBQUFPQS9vaUU4SUJJaEJRTkFJQVZCQVdzaUJTQVZUQTBCSUJZb0FnQWlIQ0FGUVFOMElnNXFJaVFnSkNzREFDQThJQTRnSFdvckF3QWlQYUtoSWo0NUF3QWdCU0FTYkNFa0lBVWhEZ05BSUE0Z0VrNE5BU0FYS0FJQUlBNGdKR3BCQTNScUlpWWdKaXNEQUNBOUlCd2dEa0VEZENJbWFpc0RBS0lnUGlBZElDWnFLd01Bb3FDaE9RTUFJQTVCQVdvaERnd0FDd0FMQUFzQUN5QVJRUkJxSkFBQ1FDQWNRUUJJRFFBZ0tDZ0NBQ0lSUWdBM0F3QWdGQ0VQQTBBZ0R5SUZJaEJCQVVnRVFFRUFJUVVEUUNBRklCUkdCRUJCQUNFUURBUUxJQllvQWdBaUVpQUZRUU4wYWlJVkt3TUFJajBoUENBRlFRRnFJZzhoRUNBRklRNERRQ0FRSUJ0SUJFQWdFaUFRUVFOMGFpc0RBQ0krSUR3Z1BDQStZeUlSR3lFOElCQWdEaUFSR3lFT0lCQkJBV29oRUF3QkN3c2dFaUFPUVFOMGFpQTlPUU1BSUJVZ1BEa0RBQ0FYS0FJQUloSWdCU0FiYkVFRGRHb2hFQ0FTSUE0Z0cyeEJBM1JxSVE1QkFDRUZBMEFnQlNBYlJnUkFJQThoQlF3Q0JTQU9Ld01BSVR3Z0RpQVFLd01BT1FNQUlCQWdQRGtEQUNBRlFRRnFJUVVnRUVFSWFpRVFJQTVCQ0dvaERnd0JDd0FMQUFzQUN3TkFBa0FnRUNJT1FRRklCRUJCQUNFT0RBRUxJQkVnRGtFRGRDSVBhaXNEQUprZ0ZpZ0NBQ0lTSUE1QkFXc2lFRUVEZEdvckF3Q1pJQThnRW1vckF3Q1pvRVNON2JXZzk4YXdQcUprRFFFTEN5QUZRUUZySVE4Z0JTQU9SZzBBSUE0Z0JTQUZJQTVJR3lFbUlCRWdCVUVEZENJcmFpRWNJQTVCQTNRaUxDQVJhaUV0UVFBaEVBTkFJQkJCNUFCR0RRRWdFRUVCYWlFVklCWW9BZ0FpSUNBc2Fpc0RBQ0FnSUN0cUlqRXJBd0FpUEtFZ0hDc0RBQ0k5SUQyaUlqMGdJQ0FQUVFOMGFpSTVLd01BSUR5aFJBQUFBQUFBQU9BL29pSThJRDBnUENBOG9xQ2ZJajJhSUQwZ1BFUUFBQUFBQUFBQUFHTWJvS09nSVQ4Z0xTc0RDQ0UrSUE0aEJRTkFJQVVnSmtjRVFBSkFJRCtaSWp3Z1BwbG1CRUFnUEVTOGlkaVhzdEtjUEdSRkJFQkVBQUFBQUFBQThEOGhQVVFBQUFBQUFBQUFBQ0U4REFJTElENmFJRCtqSWp4RUFBQUFBQUFBOEQ4Z1BDQThva1FBQUFBQUFBRHdQNkNmb3lJOW9pRThEQUVMSUQrYUlENmpJanhFQUFBQUFBQUE4RDhnUENBOG9rUUFBQUFBQUFEd1A2Q2ZveUk4b2lFOUN5QWdJQVZCQTNRaUpHb2lFQ0FRS3dNQUlrQWdQQ0E4SUVBZ0lDQUZRUUZxSWhKQkEzUWlFR29pTWlzREFDSkFvU0pCb2lBOUlEMmdJQkFnRVdvaUhTc0RBS0tnb2lKQ29Ua0RBQ0F5SUVBZ1FxQTVBd0FnQlNBT1NnUkFJQkVnSkdvaUVDQTlJQkFyQXdDaUlENGdQS0toT1FNQUN5QWRJQjByQXdBaVFDQThJRDBnUWFJZ1FDQThJRHlnb3FHaW9Ea0RBQ0FTSUJ0c0lUSWdCU0FiYkNFNlFRQWhFQU5BSUJBZ0cwY0VRQ0FYS0FJQUlqTWdFQ0E2YWtFRGRHb2lPeUE5SURzckF3QWlQNklnUENBeklCQWdNbXBCQTNScUlqTXJBd0FpUHFLaE9RTUFJRE1nUENBL29pQTlJRDZpb0RrREFDQVFRUUZxSVJBTUFRc0xJQVVnRDA0aEVDQVNJUVVnRUEwQklCMHJBd0FoUHlBUklDUnFJaEFnUFNBUUt3TVFJajJpT1FNUUlEMGdQSnFpSVQ0TUFRc0xJQlVoRUNBY0t3TUFtU0E1S3dNQW1TQXhLd01BbWFCRWplMjFvUGZHc0Q2aVpBMEFDd3dBQ3dBTElDZ1ExZ0lMSUNOQkVHb2tBQ0FRUVg5TURRRUNRQ0E0UlFSQVFRQWhEa0YvSVJVQ1FDQVlLQUlFSWdWQkFVZ05BQ0FZS0FJSUloRkJBVWdOQUNBWEtBSUVJQVZIRFFBZ0Z5Z0NDQ0FGUncwQUlCNG9BZ1FnQlVjTkFDQWVLQUlJSUJGSERRQWdGaWdDQkNBRlJ3MEFJQjRvQWdBaEZBTkFBa0FnQlNBT1JnUkFJQVVoRGd3QkN5QVdLQUlBSUE1QkEzUnFLd01BSWp4RXZJbllsN0xTbkR4akRRQWdCU0FPYkNFYVJBQUFBQUFBQVBBL0lEeVpuNk1oUFVFQUlSQURRQ0FRSUJGSEJFQWdHQ2dDQUNBUVFRTjBhaUVQSUJjb0FnQWdHa0VEZEdvaEZVRUFJUkpFQUFBQUFBQUFBQUFoUEFOQUlBVWdFa2NFUUNBU1FRRnFJUklnUENBVkt3TUFJQThyQXdDaW9DRThJQThnRVVFRGRHb2hEeUFWUVFocUlSVU1BUXNMSUJRZ1BTQThvamtEQUNBUVFRRnFJUkFnRkVFSWFpRVVEQUVMQ3lBT1FRRnFJUTRNQVFzTElBNGdCU0FGSUE1SUd5RUZRUUFoRlNBUlFRQWdFVUVBU2hzaER3TkFJQVVnRGtZTkFTQVdLQUlBSUE1QkEzUnFRZ0EzQXdCQkFDRVNBMEFnRHlBU1J3UkFJQlJDQURjREFDQVNRUUZxSVJJZ0ZFRUlhaUVVREFFTEN5QU9RUUZxSVE0TUFBc0FDeUFWUVg5S0RRRU1Bd3RCQUNFRklCcEJBQ0FhUVFCS0d5RU9JQjRvQWdBaER5QVhLQUlBSVJJRFFBSkFBbjhnQlNBT1J3UkFRUUFoRUNBV0tBSUFJQVZCQTNScUt3TUFSTHlKMkpleTBwdzhZMFVOQWlBRklRNExJQTRMSUJvZ0RpQWFTaHNoQlFOQUlBVWdEa1lOQXlBV0tBSUFJQTVCQTNScVFnQTNBd0JCQUNFUUEwQWdFQ0FhUndSQUlBOUNBRGNEQUNBUVFRRnFJUkFnRDBFSWFpRVBEQUVMQ3lBT1FRRnFJUTRNQUFzQUN3TkFJQkFnR2tjRVFDQVBJQklyQXdBNUF3QWdFRUVCYWlFUUlBOUJDR29oRHlBU1FRaHFJUklNQVFzTElBVkJBV29oQlF3QUN3QUxJQmNRUlVFQUlSQUxJQkFNQVFzZ0Z4QkZRWDhMSVJRZ0dCQkZRUUFoRGlBV0tBSUVJZ1ZCQUNBRlFRQktHeUVQUkFBQUFBQUFBQUFBSVR4QkFDRUZBMEFnQlNBUFJnUkFBMEFnRGlBUFJnMEVJQllvQWdBZ0RrRURkR29pQlNBRkt3TUFJRHlqT1FNQUlBNUJBV29oRGd3QUN3QUZJRHdnRmlnQ0FDQUZRUU4wYWlzREFLQWhQQ0FGUVFGcUlRVU1BUXNBQ3dBTElCZ1FSUXNnRkVFQVNBMENJQ29nR1VFWWJHb2lCU0FlS0FJQUlnNHJBd2dpUERrREFDQUZJQTRyQXdBaVBabzVBd2dnQlNBOElDRW9BZ0FpQlNzREFLSWdQU0FGS3dNSW9xR2FPUU1RSUNJUVJTQVRJUmtNQVFzTElCNFFSU0FoRU5ZQ0lCWVExZ0pCQUNFT0EwQkJBQ0FPUVFSR0RRSWFRWDhnS2lBT1FRRnJRUU54UVJoc2FpSUZLd01BSUNvZ0RrRVliR29pRHlzRENDSTlvaUFQS3dNQUlBVXJBd2dpUHFLaElqeVpSQzFESE92aU5oby9ZdzBDR2lBM0lBNUJCSFJxSWhBZ1BpQVBLd01Rb2lBOUlBVXJBeENpb1NBOG96a0RBQ0FRSUE4ckF3QWdCU3NERUtJZ0JTc0RBQ0FQS3dNUW9xRWdQS001QXdnZ0RrRUJhaUVPREFBTEFBc2dJaEJGSUI0UVJTQWhFTllDSUJZUTFnSkJmd3NoQlNBblFSQnFKQUFnQlVFQVNBMEFBbjhnSDBFSWFpSWpJUjRnSDBFVWFpSW5JU0VnSDBFb2FpSWdJU0lnSDBFTWFpSWRJUklnSDBFWWFpSXFJUkFnSDBFd2FpSW9JUmtnSDBId0FXb2hGU0FmUWZnQmFpRWJJd0JCa09BQWF5SVhKQUJCQVNFRkFrQWdDRUVDYTBFQ1N3MEFJQTFCamhaR0JFQWdCMEVDUVE1QktpQUFJQUVnQWlBRElBa2dMa1FBQUFBQUFBRHNQeUFYUVJCcUVMSURRWDlNQkVBZ0VrRi9OZ0lBUVhvaEJRd0NDd0ovSUJkQkVHb2hHRUVBSVJOQkFDRU9Jd0JCc0FGckloUWtBQ0FVUXNPQmdJRFFBVGNEbUFFZ0ZFS0FnSUNBNEJZM0E1QUJRZjhCSVE4RFFDQVRRUVJIQkVBZ0dDQVVRWkFCYWlBVFFRSjBhaWdDQUdvdEFBQWlCU0FQSUFVZ0QwSC9BWEZKR3lFUElBVWdEaUFGSUE1Qi93RnhTeHNoRGlBVFFRRnFJUk1NQVFzTEFuOGdEa0gvQVhFaUJTQVBRZjhCY1NJT2EwRWRUQVJBSUJCQkFEWUNBQ0FaUW9DQWdJQ0FnSUQ0djM4M0F3QkJmZ3dCQ3lBRklBNXFRUUYySVJwQkFDRU9RUUFoRXlBWkFud0NRQUpBQWtBRFFDQVRRUVJHQkVBQ1FBSkFBa0FEUUNBT0lnVkJCRVlOQVNBRlFRRnFJUTRnRkVHc0FXb2dCV290QUFCQkFVY05BQ0FVUWF3QmFpQU9RUU54YWkwQUFFRUJSdzBBSUJSQnJBRnFJQVZCQW1wQkEzRnFMUUFBRFFBTFFRQWhFVUgzQUNFV1FRMGhEa0gvQVNFWkFrQWdCU0lQRGdRQ0J3WURBQXNnRUNBRk5nSUFSQUFBQUFBQUFQQS9EQWdMSUJCQkFEWUNBQ0FaUW9DQWdJQ0FnSUQ0djM4M0F3QkJmUXdJQ3dOQUlBOUJEa1lOQmlBUFFRNXNJU1VnRDBIKy8vLy9CM0VoRGtFQUlSTURRQ0FUUVE1SEJFQUNRQ0FQUVFOSklCTkJBMnRCQjB0eVFRRWdEMEVMU1J0RkRRQWdFMEgrLy8vL0IzRWlFU0FPY2tVZ0VVRUJJQTVCREVZYlJYSWdFVUVNUmtFQUlBNUJERVliY2cwQUlCUWdGbW9nR0NBVElDVnFhaTBBQUNBYWF5SVJRUjkyT2dBQUlCRWdFVUVmZFNJY2FpQWNjeUlSSUJrZ0VTQVpTQnNoR1NBV1FRRnJJUllMSUJOQkFXb2hFd3dCQ3dzZ0QwRUJhaUVQREFBTEFBc0ZJQlJCckFGcUlCTnFJQm9nR0NBVVFaQUJhaUFUUVFKMGFpZ0NBR290QUFCTE9nQUFJQk5CQVdvaEV3d0JDd3NEUUVFQUlSTWdEa0VBU0EwRElBNUJmbkVoRHlBT1FRTnJJU1VEUUNBVFFRNUhCRUFDUUNBVFFRTkpJQ1ZCQjB0eVFRRWdFMEVMU1J0RkRRQkJBQ0FQUVF4R0lCTkIvdi8vL3dkeEloRWJJQThnRVhKRmNpQVBRUUVnRVVFTVJodEZjZzBBSUJRZ0Ztb2dHQ0FUUVE1c0lBNXFhaTBBQUNBYWF5SVJRUjkyT2dBQUlCRWdFVUVmZFNJY2FpQWNjeUlSSUJrZ0VTQVpTQnNoR1NBV1FRRnJJUllMSUJOQkFXb2hFd3dCQ3dzZ0RrRUJheUVPREFBTEFBc0RRQ0FPUVFCSURRSWdEa0VPYkNFUklBNUJmbkVoSlVFTklSTURRQ0FUUVFCT0JFQUNRQ0FPUVFOSUlCTkJBMnRCQjB0eVFRRWdEa0VMU0J0RkRRQWdFMEYrY1NJUFFReEhJaHhCQVNBbFFReEdHMFVnSEVFQklBNUJBa2tiUlhJZ0QwRUJJQTVCQWtrYlJYSU5BQ0FVSUJacUlCZ2dFU0FUYW1vdEFBQWdHbXNpRDBFZmRqb0FBQ0FQSUE5QkgzVWlIR29nSEhNaUR5QVpJQThnR1VnYklSa2dGa0VCYXlFV0N5QVRRUUZySVJNTUFRc0xJQTVCQVdzaERnd0FDd0FMQTBBZ0VVRU9SZzBCSUJGQi92Ly8vd2R4SVE0Z0VVRURheUVsUVEwaEV3TkFJQk5CQUU0RVFBSkFJQk5CQTBnZ0pVRUhTM0pCQVNBVFFRdElHMFVOQUNBT1FRRWdFMEYrY1NJUFFReEdHMFVOQUNBT1FReEhJaHhCQVNBUFFReEdHMFVnSEVFQklCTkJBa2tiUlhJTkFDQVVJQlpxSUJnZ0UwRU9iQ0FSYW1vdEFBQWdHbXNpRDBFZmRqb0FBQ0FQSUE5QkgzVWlIR29nSEhNaUR5QVpJQThnR1VnYklSa2dGa0VCYXlFV0N5QVRRUUZySVJNTUFRc0xJQkZCQVdvaEVRd0FDd0FMSUJBZ0JUWUNBRVFBQUFBQUFBRHdQeUFaUVI1S0RRQWFJQm0zUkFBQUFBQUFBRDVBb3dzNUF3QkJmRUdPRmtJQUlCUWdGRUdJQVdvUWp3Y2lCVUVBU0EwQUdpQVZCRUFnRlNBRk5nSUFDeUFYSUJRcEE0Z0JOd01JUVFBTElRVWdGRUd3QVdva0FDQUZRWDlNQ3dSQUlCSkJmellDQUF3Q0N5QVhLUU1JSWtOQ2YxRUVRQ0FTUVg4MkFnQkJleUVGREFJTElCSWdRNmRCLy84QmNVRUFJRU5DZ0lEKy93K0RVQnMyQWdBZ0cwVU5BU0FiSUVNM0F3QU1BUXNnQjBFQ0lBMUIvd0Z4SWdVZ0JVRURiQ0FBSUFFZ0FpQURJQWtnTGlBS0lCZEJFR29Rc2dOQmYwd0VRQ0FTUVg4MkFnQkJlaUVGREFFTElCZEJFR29oR0NBUUlSTkJBQ0VPUVFBaEQwSUFJVU1qQUVFd2F5SVVKQUFDZnlBRkloQkJBMnRCQms4RVFDQVNRWDgyQWdBZ0UwRUFOZ0lBSUJsQ2dJQ0FnSUNBZ1BpL2Z6Y0RBRUYvREFFTElCUkJBRFlDRUNBVUlCQkJBV3NpQlRZQ0hDQVVJQkFnRUd3aUdrRUJhellDR0NBVUlBVWdFR3cyQWhSQi93RWhGZ05BSUE1QkJFY0VRQ0FZSUJSQkVHb2dEa0VDZEdvb0FnQnFMUUFBSWhFZ0ZpQVJJQlpCL3dGeFNSc2hGaUFSSUE4Z0VTQVBRZjhCY1VzYklROGdEa0VCYWlFT0RBRUxDeUFQUWY4QmNTSU9JQlpCL3dGeElnOXJRUjFNQkVBZ0VrRi9OZ0lBSUJOQkFEWUNBQ0FaUW9DQWdJQ0FnSUQ0djM4M0F3QkJmZ3dCQ3lBT0lBOXFRUUYySVJGQkFDRVBRUUFoRGdKQUEwQWdEa0VFUmdSQUFrQUNRQU5BSUE4aURrRUVSZzBCSUE1QkFXb2hEeUFVUVN4cUlBNXFMUUFBUVFGSERRQWdGRUVzYWlBUFFRTnhhaTBBQUVFQlJ3MEFJQlJCTEdvZ0RrRUNha0VEY1dvdEFBQU5BQXNnRXlBT05nSUFRUUFoRGtIL0FTRVdBMEFnRGlBYVJ3UkFJQTRnR0dvaUR5QVBMUUFBSWc4Z0VVazZBQUFnRHlBUmF5SVBJQTlCSDNVaUQyb2dEM01pRHlBV0lBOGdGa2diSVJZZ0RrRUJhaUVPREFFTEN5QUZJUThDUUFKQUFrQWdFeWdDQUE0RUFBRUNCQWNMSUJCQkFDQVFRUUJLR3lFVFFRQWhEd05BSUE4Z0UwWU5CeUFQSUJCc0lSRkJBQ0VPQTBBZ0RpQVFSd1JBSUE0Z0QzSkZJQTVCQVNBRklBOUdHMFZ5SUFVZ0RrWkJBQ0FGSUE5R0czSkZCRUFnR0NBT0lCRnFhaTBBQUVFQVI2MGdRMElCaG9RaFF3c2dEa0VCYWlFT0RBRUxDeUFQUVFGcUlROE1BQXNBQ3lBUVFRQWdFRUVBU2hzaEUwRUFJUThEUUNBUElCTkdEUVlnQlNFT0EwQWdEa0VBVGdSQUFrQWdEMEVCSUFVZ0RrWWJSUTBBSUFVZ0QwY2lFVUVCSUFVZ0RrWWJSVUVCSUJFZ0RodEZjZzBBSUJnZ0RpQVFiQ0FQYW1vdEFBQkJBRWV0SUVOQ0FZYUVJVU1MSUE1QkFXc2hEZ3dCQ3dzZ0QwRUJhaUVQREFBTEFBc0RRQ0FQUVFCSURRVWdEeUFRYkNFVElBVWhEZ05BSUE1QkFFNEVRQ0FPSUE5eVJTQUZJQTVISWhGQkFTQUZJQTlHRzBWQkFTQVJJQThiUlhKeVJRUkFJQmdnRGlBVGFtb3RBQUJCQUVldElFTkNBWWFFSVVNTElBNUJBV3NoRGd3QkN3c2dEMEVCYXlFUERBQUxBQXNnRWtGL05nSUFJQk5CQURZQ0FDQVpRb0NBZ0lDQWdJRDR2MzgzQXdCQmZRd0VDd1VnRkVFc2FpQU9haUFSSUJnZ0ZFRVFhaUFPUVFKMGFpZ0NBR290QUFCTE9nQUFJQTVCQVdvaERnd0JDd3NnRUVFQUlCQkJBRW9iSVJNRFFDQVBRUUJJRFFGQkFDRU9BMEFnRGlBVFJ3UkFJQTlCQVNBRklBNUdHMFVnRGlBUGNrVkJBQ0FGSUE5R0lBNGJjbkpGQkVBZ0dDQU9JQkJzSUE5cWFpMEFBRUVBUjYwZ1EwSUJob1FoUXdzZ0RrRUJhaUVPREFFTEN5QVBRUUZySVE4TUFBc0FDeUFaSUJhM1JBQUFBQUFBQUQ1QW8wUUFBQUFBQUFEd1B5QVdRUjVNR3prREFBSkFBa0FDUUNBTlFZVUtSaUFOUVlRSWEwRUNTWElOQUNBTlFZTUVSd1JBSUExQmhBWkdEUUVnRFVHREFrY05BaUFVSUVPblFhRG1BR293QUFBM0F3aENsdE9sczVuTnBjdnBBQ0JEaUVJQmcxQU5BeUFTUVg4MkFnQWdHVUtBZ0lDQWdJQ0ErTDkvTndNQVFYd01CQXNnRkNCRHAwSGc1UUJxTUFBQU53TUlJRU5DLy8vLy93K0RJVU1nRlFSQUlCVkMvczd2N3R2Mzl2UCtBQ0JEaUtkQkFYRTJBZ0FMUW9Dd2tJR2dpSUNBZ1g4Z1E0aENBWU5RRFFJZ0VrRi9OZ0lBSUJsQ2dJQ0FnSUNBZ1BpL2Z6Y0RBRUY4REFNTElBMGdRMEVBSUJSQkNHb1Fqd2NpQlVGL1RBUkFJQkpCZnpZQ0FDQVpRb0NBZ0lDQWdJRDR2MzgzQXdCQmZBd0RDeUFGUlNBVlJYSU5BU0FWSUFVMkFnQU1BUXNnRkNCRE53TUlDeUFTSUJRcEF3ZytBZ0JCQUFzaEJTQVVRVEJxSkFBZ0cwVU5BQ0FiUWdBM0F3QUxBa0FnQ0VFQ1JpQUlRUVJMY2cwQUFuOGdCa1VFUUNBZVFYODJBZ0JCZnd3QkN3SkFBa0FnQ0E0RUFBRUJBQUVMSUFkQkFDQUdLQUljSWc0Z0RrRUNkQ0FBSUFFZ0FpQURJQWtnTGlBS0lCZEJFR29Rc2dOQmYwd0VRQ0FlUVg4MkFnQkJlZ3dDQ3lBR1FRQWdGMEVRYWlBR0tBSWNJQjRnSVNBaUVLZ0hEQUVMSUFkQkFTQUdLQUljSWc0Z0RrRUNkQ0FBSUFFZ0FpQURJQWtnTGlBS0lCZEJFR29Rc2dOQmYwd0VRQ0FlUVg4MkFnQkJlZ3dCQ3lBR1FRRWdGMEVRYWlBR0tBSWNJQjRnSVNBaUVLZ0hDeUVPSUFWQkFVWUVRQ0FPSVFVTUFRc2dEa0VCUmcwQUlBVWdEbkZCSDNVZ0RuRWhCUXNnRjBHUTRBQnFKQUFnQlVFR2FpSUZRUVpOQ3dSQUlCOGdCVUVDZEVIQTVRQnFLQUlBTmdMc0FRc2dDRUVDVFFSQUlCOGdJeUFkSUFoQkFra2lCUnNvQWdBMkFnUWdIeUFuSUNvZ0JSc29BZ0EyQWhBZ0h5QWdJQ2dnQlJzckF3QTVBeUFMSURCQkFXb2hNQXNnTDBFQmFpRXZEQUVMQ3lBTUlEQTJBZ0FnS1VFUWFpUUFRUUFMb1FnQkQzOGdBQ2dDQUNFTUlBQW9BZ1FoRFVFQlFid2dFTEFESWdaRkJFQkJBRUVEUWRjUFFRQVFPRUVCRUFFQUMwRUVFRXNpRGhDQ0JBSi9RUmdRU3lJSkVJSUVJUUVnQ1VFRWFoQ1BBaG9nQVFKL1FjZ0dFRXNpQkVFTWFoQk9HaUFFUVVCckVMVUNHaUFFUWNnQWFoQ1BBaG9nQkVIY0FHb2lBVUh3M1FFMkFnQWdBVUVFYWhCT0dpQUJRZ0EzQWhnZ0FVSUFOd0lRSUFGQmdONEJOZ0lBSUFGQklHb1FUaG9nQVVFc2FoQk9HaUFCUVRocUVFNGFJQVJCb0FGcUlnTkNpb0NBZ0tBQk53SUlJQU5DQURjQ0FDQURRUkJxRUU0YUlBTkJBVG9BSENBRFFTQnFFRTRhSUFOQ0FEY0NMQ0FEUW9DQWdJQ0FnSUNRd1FBM0FqUWdBMEU4YWhCT0dpQURRY2dBYWhCT0dpQURRWUNBd0lnRU5nSllJQU5CM0FCcUlnRkNBRGNDRENBQlFnQTNBZ0FnQVVJQU53SVVJQUZCSEdvUVRob2dBVUVvYWhCT0dpQURRWkFCYWhCT0lRRWdBMEdJSnhETkJpQUJRU1FRbEFJZ0JFRzhBbW9pQVVIZzRnRkJEQkR2QVNBQlFUQnFRWkRqQVVFTUVPOEJJQUZCNEFCcVFjRGpBVUVNRU84QklBRkJrQUZxUWZEakFVRU1FTzhCSUFGQndBRnFRYURrQVVFTUVPOEJJQUZCOEFGcVFkRGtBVUVNRU84QklBRkN6Wm16K0lPQWdQREFBRGNDdUFJZ0FVTE5tYlAycytiTStUNDNBckFDSUFGQ2dJQ0E5T1BNbWRNK053S29BaUFCUXMyWnMrNno1c3laUGpjQ29BSWdCRUg4QkdvUVRob2dCRUd6NXN6NUF6WUNpQVVnQkVHTUJXb2lBVUlBTndJQUlBRkJBVG9BRUNBQlFnQTNBZ2dnQVVFVWFrRUFRY2dBRURzYUlBRkIzQUJxRUk4Q0dpQUJRZkFBYWhCT0dpQUJRZndBYWhCT0dpQUVRWlFHYWlJRkVFNGFJQVZCREdvUVRob2dCVUVZYWhCT0dpQUZRWURJQUJDVUFnSkFJQVZCR0dvaUFSQkVJZ0pCZ0FoSkJFQWpBRUVnYXlJS0pBQUNRRUdBQ0NBQ2F5SUhJQUVRTkNnQ0FDQUJLQUlFYTBFRGRVMEVRQ0FCSUFjUS9nTU1BUXNnQVJBMElRSWdDa0VJYWlBQklBRVFSQ0FIYWhDZUF5QUJFRVFnQWhDWEF5SUxJUWdqQUVFUWF5SUNKQUFnQWlBSUtBSUlOZ0lBSUFnb0FnZ2hEeUFDSUFoQkNHbzJBZ2dnQWlBUElBZEJBM1JxTmdJRUlBSW9BZ0FoQndOQUlBSW9BZ1FnQjBjRVFDQUlLQUlRR2lBQ0tBSUFFSVVHSUFJZ0FpZ0NBRUVJYWlJSE5nSUFEQUVMQ3lBQ0VMQUJJQUpCRUdva0FDQUJJQXNRblFNZ0N4Q2NBd3NnQ2tFZ2FpUUFEQUVMSUFKQmdBaExCRUFnQVNnQ0FFR0FRR3NoQWlBQkVFUWhDQ0FCSUFJUXBRTWdBU0FJRUk0RUN3c2dCVUV5TmdJd0lBVkJxQWcyQWl3Z0JVR0FDRFlDS0NBRlF3clhJenc0QWlRZ0EwTUFBRUJBT0FJMElBTkRBQUNBUURnQ09DQURRZlFERU0wR0lBUkJBVG9BQ0NBRVFvaUFnSUNBZ0lDZ3dBQTNBZ0FnQkFzUW1RWWdDUXNRbWdZZ0JrS0JnSUNBY0RjQ0ZDQUdJQTAyQWhBZ0JpQU1OZ0lNSUFaQkFUWUNDQ0FHSUFBMkFnUWdCaUFPTmdJQUlBWUxHQUFnQUNnQ0FDSUJRVE0yQWhRZ0FDQUJLQUlBRVFFQUMvWUNBZ1YvQlgwakFFRVFheUlGSkFCQmZ5RUhJd0JCUUdvaUJpUUFBbjhnQUNvQ0hDQUFLZ0lzSWdvZ0E1U1RJUTBnQUNvQ0lDSUxJQU9VSUFBcUFoQ1RJUTRnQUNvQ0RDQUtJQUtVa3lFS1FYOGdDeUFDbENBQUtnSUFreUlMSUFBcUFpUWlEQ0FEbENBQUtnSVVreUlEbENBTUlBS1VJQUFxQWdTVElnd2dEcFNUSWdKREFBQUFBRnNOQUJvZ0JTQURJQXFVSUF3Z0RaU1RJQUtWT0FJTUlBVWdDeUFObENBT0lBcVVreUFDbFRnQ0NFRUFDeUVBSUFaQlFHc2tBQUpBSUFCQkFFZ05BQUovSUFVcUFnd2dBU29DRENJQ2xFTXpNOHRCbFVNQUFBQS9raUlEaTBNQUFBQlBYUVJBSUFPb0RBRUxRWUNBZ0lCNEN5SUFRUUJJRFFBZ0FTZ0NCQ0lJSUFCTURRQUNmeUFCS0FJSUlnbXlJQUlnQlNvQ0NKUkRNelBMd1pXU1F3QUFBRCtTSWdLTFF3QUFBRTlkQkVBZ0FxZ01BUXRCZ0lDQWdIZ0xJZ1pCQUVnZ0JpQUpUbklOQUNBRUlBRW9BZ0FnQmlBSWJDQUFhbW90QUFBNkFBQkJBQ0VIQ3lBRlFSQnFKQUFnQnd1QkNRSU1md0o5SXdCQk1Hc2lCaVFBSUFaQ2lJQ0FnQkEzQWlRZ0JpQUFOZ0lnSUFaQkFUWUNHQ0FHSUFNMkFoUWdCaUFCTmdJUUlBWkJDRFlDQ0NBR0lBTTJBZ1FnQmlBQ05nSUFBa0FDZnlBR0tBSUlJQVlvQWdRUXl3WWlDQVJBUVg4aEFnSkFJQWdvQWdRaUJTQUdLQUlJUncwQUlBZ29BZ2dpQUNBR0tBSUVSdzBBUVFBaEFpQUZRUUFnQlVFQVNoc2hBU0FBUVFBZ0FFRUFTaHNoQUNBSUtBSUFJUWNEUUNBQklBUkdEUUVnQmlnQ0FDQUVRUUowYWlFSlFRQWhBd05BSUFBZ0EwY0VRQ0FISUFrcUFnQTRBZ0FnQTBFQmFpRURJQWRCQkdvaEJ5QUpJQVZCQW5ScUlRa01BUXNMSUFSQkFXb2hCQXdBQ3dBTElBZ2dBa0YvU2cwQkdpQUlFRVVMUVFBTElnNUZCRUJCZnlFQ0RBRUxBa0FnRGlBR0VNUUdJZ3hGQkVCQmZ5RUNEQUVMQWtBZ0RpQUdRUkJxRU1RR0lnOUZCRUJCZnlFQ0RBRUxRUUFoQWdKQUFuOUJBQ0VEUVFCQmZ3Si9JQXdvQWdBaENTQU1LQUlFSWdzaEIwRUFJUUFqQUVIUUQyc2lDaVFBQWtBZ0IwSDBBMG9OQUFKQUFrQUNRQ0FIRGdJREFBRUxJQWxEQUFDQVB5QUpLZ0lBbFRnQ0FBd0JDeUFIUVFBZ0IwRUFTaHNoRFFOQUlBQWdEVVlFUUFOQUlBTWdEVVlFUUVFQUlRTURRQ0FOSUFNaUFFWU5CUU5BQWtBZ0FDQUhSZ1JBSUFjaEFBd0JDeUFLSUFCQkFuUnFLQUlBSUFOR0RRQWdBRUVCYWlFQURBRUxDeUFLSUFCQkFuUWlBV29nQ2lBRFFRSjBJZ0JxS0FJQU5nSUFJQUFnQ1dvaEFDQUJJQWxxSVFSQkFDRUZBMEFnQlNBTlJ3UkFJQVFxQWdBaEVDQUVJQUFxQWdBNEFnQWdBQ0FRT0FJQUlBVkJBV29oQlNBQUlBdEJBblFpQVdvaEFDQUJJQVJxSVFRTUFRc0xJQU5CQVdvaEF3d0FDd0FMUXdBQUFBQWhFVUYvSVFVZ0NTQURJZ0FnQzJ4QkFuUnFJZ0VoQkFOQUlBQWdCMGNFUUNBRUtnSUFpeUlRSUJFZ0VDQVJYaUlJR3lFUklBQWdCU0FJR3lFRklBQkJBV29oQUNBRUlBdEJBblJxSVFRTUFRc0xRUUFoQUNBRlFYOUdJQkZELytiYkxsOXlEUVFnQ2lBRlFRSjBhaUlBS0FJQUlRUWdBQ0FLSUFOQkFuUnFJZ0FvQWdBMkFnQWdBQ0FFTmdJQUlBa2dCU0FMYkVFQ2RHb2hBRUVBSVFVZ0FTRUVBMEFnQlNBSFJ3UkFJQUFxQWdBaEVDQUFJQVFxQWdBNEFnQWdCQ0FRT0FJQUlBVkJBV29oQlNBRVFRUnFJUVFnQUVFRWFpRUFEQUVMQ3lBQktnSUFJUkJCQVNFRUlBRWhBQU5BSUFRZ0IwY0VRQ0FBSUFBcUFnUWdFSlU0QWdBZ0JFRUJhaUVFSUFCQkJHb2hBQXdCQ3dzZ0FFTUFBSUEvSUJDVk9BSUFRUUFoQ0FOQUlBY2dDRWNFUUNBRElBaEhCRUFnQ1NBSUlBdHNRUUowYWlJQUtnSUFJUkJCQVNFRUlBRWhCUU5BSUFRZ0IwY0VRQ0FBSUFBcUFnUWdFQ0FGS2dJQWxKTTRBZ0FnQlVFRWFpRUZJQVJCQVdvaEJDQUFRUVJxSVFBTUFRc0xJQUFnQlNvQ0FDQVFqSlE0QWdBTElBaEJBV29oQ0F3QkN3c2dBMEVCYWlFRERBQUxBQVVnQ2lBQVFRSjBhaUFBTmdJQUlBQkJBV29oQUF3QkN3QUxBQXNnQ1NFQUN5QUtRZEFQYWlRQUlBQUxHMEVBU0FzRVFFRi9JUUlNQVFzZ0JrRWdhaUFNSUE4UXRRWWFDeUFQRUVVTElBd1FSUXNnRGhCRkN5QUdRVEJxSkFBZ0Fnc1pBQ0FBS0FJQUlBRTJBZ0FnQUNBQUtBSUFRUWhxTmdJQUM4SUNBZ0YvQkgwakFFRkFhaUlHSkFBQ1FDQUFCRUFnQUVFSWFpQUJJQVpCRUdvUXJnTkJmeUVCSUFCQnVBRnFJZ0FnQmlvQ0hDQUdLZ0lRSUFLVUlBWXFBaFFnQTVTU2tpQUdLZ0k4SUFZcUFqQWdBcFFnQmlvQ05DQURsSktTSWdlVklnZ2dCaW9DTENBR0tnSWdJQUtVSUFZcUFpUWdBNVNTa2lBSGxTSUNJQVFnQlJCeFFRQklEUUVnQUNBRUtnSUFJQVVxQWdBZ0JrRU1haUFHUVFocUVPSUJRUUJJRFFGQmYwRUFJQWdnQmlvQ0RKTWlBeUFEbENBQ0lBWXFBZ2lUSWdJZ0FwU1NRd0FBZ0Q5ZUd5RUJEQUVMSUFFcUFod2hCeUFCS2dJVUlRZ2dBU29DRUNFSklBUWdBU29DRENBQktnSUFJQUtVSUFFcUFnUWdBNVNTa2lBQktnSXNJQUVxQWlBZ0FwUWdBU29DSkNBRGxKS1NJZ3FWT0FJQUlBVWdCeUFKSUFLVUlBZ2dBNVNTa2lBS2xUZ0NBRUVBSVFFTElBWkJRR3NrQUNBQkN6d0JBWDhqQUVFUWF5SURKQUFnQTBFSWFpQUJJQUlnQUNnQ0FCRUdBQ0FES0FJSUVDd2dBeWdDQ0NFQUlBTW9BZ2dRS3lBRFFSQnFKQUFnQUF0UkFRSi9Jd0JCRUdzaUFpUUFJQUFvQWdBaEF5QUNJQUFvQWdRaUFFRUJkU0FCYWlJQklBQkJBWEVFZnlBQktBSUFJQU5xS0FJQUJTQURDeEVBQURZQ0RDQUNLQUlNSVFBZ0FrRVFhaVFBSUFBTEJ3QWdBQkVPQUFzd0FRRi9JQUFvQWdRaEFnTkFJQUVnQWtjRVFBSkFJQUFRTkNBQ1FReHJJZ0lRcndVTERBRUxDeUFBSUFFMkFnUUxCd0FnQVJBNUdndFhBUU4vSUFBb0FnUWhBUU5BSUFFZ0FDZ0NDRWNFUUNBQUtBSVFJUUlnQUNBQUtBSUlRUXhySWdNMkFnZ2dBaUFERUs4RkRBRUxDeUFBS0FJQUJFQWdBQ2dDRUJvZ0FDZ0NBQ0VCSUFBUXJBTWFJQUVRTXdzTGxnRUJCbjhnQUJEL0FTQUFFRFFhSUFBb0FnQWhCU0FBS0FJRUlRSWdBVUVFYWlJR0lRTURRQ0FDSUFWSEJFQWdBeWdDQUVFTWF5SUhJQUpCREdzaUFpSUVLUUlBTndJQUlBY2dCQ2dDQ0RZQ0NDQUVFS0lISUFNZ0F5Z0NBRUVNYXpZQ0FBd0JDd3NnQUNBR0VFb2dBRUVFYWlBQlFRaHFFRW9nQUJBMElBRVFQUkJLSUFFZ0FTZ0NCRFlDQUNBQUlBQVFWeEN0QXd1QUFRRUNmeU1BUVJCcklnUWtBQ0FFUVFBMkFnd2dBRUVNYWlBRVFReHFJQU1Rc1FFZ0FRUkFJQUFvQWhBYUlBRkIxYXJWcWdGTEJFQkJ0UGtCRUpRQkFBc2dBVUVNYkJCTElRVUxJQUFnQlRZQ0FDQUFJQVVnQWtFTWJHb2lBallDQ0NBQUlBSTJBZ1FnQUJBOUlBVWdBVUVNYkdvMkFnQWdCRUVRYWlRQUlBQUxDUUFnQUVFQkVIZ2FDNzBDQVFkL0lBQVFTUm9DUUNBQkJFQWdBQUovSUFFaUEwSC8vLy8vQTBzRVFFRzArUUVRbEFFQUN5QURRUUowRUVzTEVLOENJQUFRU1NBRE5nSUFBMEFnQWlBRFJnUkFJQUJCQ0dvaUFTZ0NBQ0lFUlEwRElBQWdCQ2dDQkNBREVGa2lCeEE4SUFFMkFnQURRQ0FFS0FJQUlnRkZEUVFDUUNBQktBSUVJQU1RV1NJRklBZEdEUUFnQVNFQ0lBQWdCUkE4S0FJQVJRUkFJQUFnQlJBOElBUTJBZ0FnQlNFSERBRUxBMEFDUUNBQ0lnWW9BZ0JGQkVCQkFDRUNEQUVMSUFBUVdpQUJRUWhxSUFZb0FnQkJDR29RemdFaENDQUdLQUlBSVFJZ0NBMEJDd3NnQkNBQ05nSUFJQVlnQUNBRkVEd29BZ0FvQWdBMkFnQWdBQ0FGRUR3b0FnQWdBVFlDQUF3QkN5QUJJUVFNQUFzQUJTQUFJQUlRUEVFQU5nSUFJQUpCQVdvaEFnd0JDd0FMQUFzZ0FFRUFFSzhDSUFBUVNVRUFOZ0lBQ3dzL0FRRi9JQUFvQWdBaEFTQUFRUUEyQWdBZ0FRUkFJQUFRU1NJQUxRQUVCRUFnQUNnQ0FDQUJRUWhxRUxjRkN5QUJCRUFnQUNnQ0FCb2dBUkF6Q3dzTDJBRUNBMzhCZlNNQVFSQnJJZ0lrQUNBQ0lBRTJBZ3dDUUNBQ0lBRkJBVVlFZjBFQ0JTQUJJQUZCQVd0eFJRMEJJQUVRb0FJTElnRTJBZ3dMQWtBZ0FCQ0pBU0lESUFGSkJFQWdBQ0FCRUxRRkRBRUxJQUVnQTA4TkFDQURFT0VCSVFRQ2Z5QUFFRDBvQWdDeklBQVFXaW9DQUpXTklnVkRBQUNBVDEwZ0JVTUFBQUFBWUhFRVFDQUZxUXdCQzBFQUN5RUJJQUlDZnlBRUJFQWdBUkQ0QXd3QkN5QUJFS0FDQ3pZQ0NDQUNJQUpCREdvZ0FrRUlhaENBQVNnQ0FDSUJOZ0lNSUFFZ0EwOE5BQ0FBSUFFUXRBVUxJQUpCRUdva0FBc0xBQ0FCUVFocUVNUUZHZ3ZMQ1FJS2Z3RjlJQU1vQWhnaERRSkFRUUVnQW5SQm9PQUJjVVVnQWtFT1MzSkZCRUFnQUNBRUlBTW9BZ2dpQkVFQmRHc2dCU0FES0FJUUlnSkJBWFJySUFGc2Ftb2hDQ0FCUVFGMElROUJBQ0FDYXlFQlFRQWdCR3NoQUNBREtBSVVJUkFnQXlnQ0RDRUZBMEFnQUNFQ0lBZ2hCeUFCSUJCS0RRSURRQ0FDSUFWS1JRUkFJQTB2QVFBaUJFR0FJRWNFUUNBS0lBY3RBQUFpRG1vaENpQUVJQTVzSUF0cUlRc2dEaUFPYkNBSmFpRUpDeUFDUVFGcUlRSWdEVUVDYWlFTklBZEJBbW9oQnd3QkN3c2dBVUVCYWlFQklBZ2dEMm9oQ0F3QUN3QUxJQUpCQVUwRVFFRUFJQU1vQWhCcklRZ2dBeWdDRkNFT0EwQWdDQ0FPU2cwQ0lBQWdDRUVCZENBRmFpQUJiQ0FFYWlBREtBSUlJZ2RCQVhSclFRTnNhaUVDUVFBZ0Iyc2hCeUFES0FJTUlROERRQ0FISUE5S1JRUkFJQTB2QVFBaUVFR0FJRWNFUUNBS0lBSXRBQUlnQWkwQUFTQUNMUUFBYW1wQkEyNGlER29oQ2lBTUlCQnNJQXRxSVFzZ0RDQU1iQ0FKYWlFSkN5QUhRUUZxSVFjZ0RVRUNhaUVOSUFKQkJtb2hBZ3dCQ3dzZ0NFRUJhaUVJREFBTEFBc2dBa0YrY1VFQ1JnUkFRUUFnQXlnQ0VHc2hDQ0FES0FJVUlRNERRQ0FJSUE1S0RRSWdBQ0FJUVFGMElBVnFJQUZzSUFScUlBTW9BZ2dpQjBFQmRHdEJBblJxSVFKQkFDQUhheUVISUFNb0Fnd2hEd05BSUFjZ0QwcEZCRUFnRFM4QkFDSVFRWUFnUndSQUlBb2dBaTBBQWlBQ0xRQUJJQUl0QUFCcWFrRURiaUlNYWlFS0lBd2dFR3dnQzJvaEN5QU1JQXhzSUFscUlRa0xJQWRCQVdvaEJ5QU5RUUpxSVEwZ0FrRUlhaUVDREFFTEN5QUlRUUZxSVFnTUFBc0FDeUFDUVgxeFFRUkdCRUJCQUNBREtBSVFheUVJSUFNb0FoUWhEZ05BSUFnZ0Rrb05BaUFBSUFoQkFYUWdCV29nQVd3Z0JHb2dBeWdDQ0NJSFFRRjBhMEVDZEdvaEFrRUFJQWRySVFjZ0F5Z0NEQ0VQQTBBZ0J5QVBTa1VFUUNBTkx3RUFJaEJCZ0NCSEJFQWdDaUFDTFFBRElBSXRBQUlnQWkwQUFXcHFRUU51SWd4cUlRb2dEQ0FRYkNBTGFpRUxJQXdnREd3Z0NXb2hDUXNnQjBFQmFpRUhJQTFCQW1vaERTQUNRUWhxSVFJTUFRc0xJQWhCQVdvaENBd0FDd0FMQWtBQ1FDQUNRUWRyRGdJQUFRSUxRUUFnQXlnQ0VHc2hDQ0FES0FJVUlRNERRQ0FJSUE1S0RRSWdBQ0FJUVFGMElBVnFJQUZzSUFScUlBTW9BZ2dpQWtFQmRHdEJBWFJxSVFkQkFDQUNheUVDSUFNb0Fnd2hEd05BSUFJZ0QwcEZCRUFnRFM4QkFDSVFRWUFnUndSQUlBb2dCeTBBQVNJTWFpRUtJQXdnRUd3Z0Myb2hDeUFNSUF4c0lBbHFJUWtMSUFKQkFXb2hBaUFOUVFKcUlRMGdCMEVFYWlFSERBRUxDeUFJUVFGcUlRZ01BQXNBQzBFQUlBTW9BaEJySVFnZ0F5Z0NGQ0VPQTBBZ0NDQU9TZzBCSUFBZ0NFRUJkQ0FGYWlBQmJDQUVhaUFES0FJSUlnSkJBWFJyUVFGMGFpRUhRUUFnQW1zaEFpQURLQUlNSVE4RFFDQUNJQTlLUlFSQUlBMHZBUUFpRUVHQUlFY0VRQ0FLSUFjdEFBQWlER29oQ2lBTUlCQnNJQXRxSVFzZ0RDQU1iQ0FKYWlFSkN5QUNRUUZxSVFJZ0RVRUNhaUVOSUFkQkJHb2hCd3dCQ3dzZ0NFRUJhaUVJREFBTEFBc2dCaUFKSUFvZ0Ntd2dBeWdDSkNJQWJXc2lBUVIvSUFzZ0F5Z0NJQ0FLYkNBQWJXdEI1QUJzSUFNb0FoeHRRZVFBYkFKL0lBR3lrU0lSaTBNQUFBQlBYUVJBSUJHb0RBRUxRWUNBZ0lCNEMyMEZRUUFMTmdJQUMwVUJBbjBnQVNvQ0FDQUFLZ0lBSWdPVElBSXFBZ1FnQUNvQ0JDSUVrNVFnQVNvQ0JDQUVreUFDS2dJQUlBT1RsSk5EQUFBQVA1UWlBNHdnQXlBRFF3QUFBQUJkR3dzRUFFRUNDd1FBUVFRTENBQkJEQkJMRUU0TEp3RUJmeU1BUVJCcklnSWtBQ0FBUVFKQjNJTUNRZVNEQWtIYUFDQUJFQVVnQWtFUWFpUUFDeWNCQVg4akFFRVFheUlDSkFBZ0FFRURRY2lEQWtIVWd3SkIyUUFnQVJBRklBSkJFR29rQUF1Y0RRTU9mUVovQVg0akFFRWdheUlVSkFBQ1FBSkFJQUpCQUVnTkFBSkFBa0FDUUFKQUFrQWdBZzRFQUFFQ0F3UUxJQVZCQW0yeUlRa2dCRUVDYmJJaENpQUZRUWh0c2lFTElBUkJDRzJ5SVF3Z0JVRUhiRUVJYmJJaERTQUVRUWRzUVFodHNpRU9RUUFoQWtGL0lRVURRQUpBQWtBQ1FDQUFJQUpCR0d4cUlnRW9BZ3hCQVdvT0FnSUFBUXNnQVNvQ0VDSUdJQXhkSUFZZ0RsNXlEUUFnQVNvQ0ZDSUlJQXRkSUFnZ0RWNXlEUUFnQmlBS2t5SUdJQWFVSUFnZ0NaTWlCaUFHbEpJaUJpQUhYa1VOQUNBQ0lRVWdCaUVIQ3lBQ1FRRnFJUUlNQVFzTFFYOGhBaUFGUVg5R0RRVWdBQ0FGUVJoc2FrRUJOZ0lNSUFVaEFnd0ZDeUFGUVFodHNpRUpJQVJCQ0cyeUlRb2dCVUVIYkVFSWJiSWhDeUFFUVFkc1FRaHRzaUVNUVg4aEJVRUFJUUlEUUFKQUFrQUNRQ0FBSUFKQkdHeHFJZ0VvQWd4QkFXb09BZ0lBQVFzZ0FTb0NFQ0lHSUFwZElBWWdERjV5RFFBZ0FTb0NGQ0lJSUFsZElBZ2dDMTV5RFFBZ0JpQURLZ0lBa3lJR0lBYVVJQWdnQXlvQ0JKTWlCaUFHbEpJaUJpQUhYa1VOQUNBR0lRY2dBaUVGQ3lBQ1FRRnFJUUlNQVFzTFFYOGhBaUFGUVg5R0RRUWdBQ0FGUVJoc2FrRUJOZ0lNSUFVaEFnd0VDeUFGUVFodHNpRUpJQVJCQ0cyeUlRb2dCVUVIYkVFSWJiSWhDeUFFUVFkc1FRaHRzaUVNUVg4aEJVRUFJUUlEUUFKQUFrQUNRQ0FBSUFKQkdHeHFJZ0VvQWd4QkFXb09BZ0lBQVFzZ0FTb0NFQ0lISUFwZElBY2dERjV5RFFBZ0FTb0NGQ0lJSUFsZElBZ2dDMTV5RFFBZ0J5QURLZ0lBSWdlVElBTXFBZ3dnQXlvQ0JDSU5rNVFnQ0NBTmt5QURLZ0lJSUFlVGxKTWlCeUFIbENJSElBWmVSUTBBSUFjaEJpQUNJUVVMSUFKQkFXb2hBZ3dCQ3d0QmZ5RUNJQVZCZjBZTkF5QUFJQVZCR0d4cVFRRTJBZ3dnQlNFQ0RBTUxJQU1nQTBFSWFpQVVRUnhxSUJSQkdHb1E1QU1nQXlBRFFSQnFJQlJCRkdvZ0ZFRVFhaERrQTBFQ1FRRWdGQ29DRkNJTElCUXFBaGdpQ1pRaUJpQVVLZ0lRSWd3Z0ZDb0NIQ0lLbENJSGswTUFBQUFBWUNJWEd5RVZRUUZCQWlBWEd5RVlJQWNnQnBNaERTQURRUmhxSVJrZ0JVRUliYkloRGlBRVFRaHRzaUVQSUFWQkIyeEJDRzJ5SVJBZ0JFRUhiRUVJYmJJaEVVRi9JUUpCQUNFRVF3QUFBQUFoQmdOQUFrQUNRQUpBQWtBQ1FDQUFJQVJCR0d4cUlnRW9BZ3hCQVdvT0FnRUFCQXNnQVNvQ0VDSUhJQTlkSUFjZ0VWNXlEUU1nQVNvQ0ZDSUlJQTVkSUFnZ0VGNXlEUU1nQXlBSE9BSVlJQU1nQVNvQ0ZEZ0NIQ0FESUJrZ0ZFRU1haUFVUVFocUVPUURJQlFxQWd3aEJ5QVhSUVJBSUJRcUFnZ2hDQXdDQ3lBSklBZVVJQW9nRkNvQ0NDSUlsSk5EQUFBQUFHQkZEUUZCQTBFQ0lBd2dCNVFnQ3lBSWxKTkRBQUFBQUdBaUFSc2hCVUVDUVFNZ0FSc2hBVUVCSVJZTUFnc2dBa0YvUmcwR0lBQWdBa0VZYkdwQkFUWUNEQXdHQ3lBTUlBZVVJaElnQ3lBSWxDSVRrME1BQUFBQVlFVWdEVU1BQUFBQVlFVnlSUVJBUVFOQkFTQUpJQWVVSUFvZ0NKU1RRd0FBQUFCZ0lnRWJJUVZCQVVFRElBRWJJUUZCQWlFV0RBRUxJQW9nQ0pRZ0NTQUhsSk5EQUFBQUFHQkZEUUZCQXlFV0lCZ2hBU0FWSVFVZ0V5QVNrME1BQUFBQVlFVU5BUXNnQXlBRElCWkJBM1JxSUFNZ0FVRURkR29pQVJDNUJTQURJQUVnQXlBRlFRTjBhaEM1QlpJaUJ5QUdYa1VOQUNBSElRWWdCQ0VDQ3lBRVFRRnFJUVFNQUFzQUN3SkFBMEFDUUFKQUFrQWdBU0FWUVJoc2FpSURLQUlNUVFGcURnSUNBQUVMSUFOQkFUWUNERUVBSVFJRFFBSkFBa0FnQUNBQ1FSaHNhaUlFS0FJTVFRRnFEZ0lEQUFFTElBTW9BZ0FnQkNnQ0FFY05BQ0FES0FJRUlBQWdBa0VZYkdvaUJTZ0NCRWNOQUNBREtBSUlJQVVvQWdoR0RRVUxJQUpCQVdvaEFnd0FDd0FMSUJWQkFXb2hGUXdCQ3dzZ0FVRi9OZ0lNUVFBaEFrSG8vUU5CQUVIby9RTW9BZ0FpQVFSL0lBRUZRYUQvQTBFQUVCbEJBV3V0TndNQVFlajlBeWdDQUF0QkFXb2lBU0FCUVlBQlJoczJBZ0JCQUNFRUEwQUNRQUpBQWtBZ0FDQUNRUmhzYWlnQ0RFRUJhZzRDQWdBQkN5QUVRUUZxSVFRTElBSkJBV29oQWd3QkN3c2dCRVVOQVFKL0FuOUJvUDhEUWFEL0F5a0RBRUt0L3RYazFJWDlxTmdBZmtJQmZDSWFOd01BSUFTeUlCcENJWWluc3BSREFBQUFNSlFpQm90REFBQUFUMTBMQkVBZ0JxZ01BUXRCZ0lDQWdIZ0xJUUZCQUNFRVFRQWhCUU5BQWtBQ1FDQUFJQVJCR0d4cUlnTW9BZ3dpQWtFQmFnNENCUUFCQ3lBQklBVkdCRUFnQTBFQk5nSU1JQVFoQWd3RkN5QUZRUUZxSVFVTElBUkJBV29oQkF3QUN3QUxJQVJCQVRZQ0RBd0JDMEYvSVFJTElCUkJJR29rQUNBQ0N5Y0JBWDhqQUVFUWF5SUNKQUFnQUVFRFFZeURBa0hzL3dGQjBRQWdBUkFGSUFKQkVHb2tBQXU3QkFJVGZRRi9Jd0JCTUdzaUZ5UUFBa0FnQUFSQUlBQkJDR29nQVNBWEVLNERJQmNxQWh3aUNDQUNLZ0lBSWdRZ0Z5b0NFQ0lRbENJUElBSXFBZ1FpQlNBWEtnSVVJZ2VVSWdxU2tpQVhLZ0lzSWdzZ0JDQVhLZ0lnSWd5VUloRWdCU0FYS2dJa0lnMlVJaEtTa2lJR2xTRUpJQmNxQWd3aURpQUVJQmNxQWdBaUU1UWlGQ0FGSUJjcUFnUWlGWlFpRnBLU0lBYVZJUVlnQ0NBUElBVkRBQUFnUVpJaUJTQUhsSktTSUFzZ0VTQUZJQTJVa3BJaUI1VWhEeUFPSUJRZ0JTQVZsSktTSUFlVklRY2dDQ0FFUXdBQUlFR1NJZ1FnRUpRZ0NwS1NJQXNnQkNBTWxDQVNrcElpQlpVaENDQU9JQVFnRTVRZ0ZwS1NJQVdWSVFRTUFRc2dBU29DSENJSklBSXFBZ0FpQkNBQktnSVFJZ2lVSWhBZ0Fpb0NCQ0lGUXdBQUlFR1NJZ1lnQVNvQ0ZDSUtsSktTSUFFcUFpd2lDeUFFSUFFcUFpQWlESlFpRVNBR0lBRXFBaVFpRFpTU2tpSUhsU0VQSUFFcUFnd2lEaUFFSUFFcUFnQWlFcFFpRXlBR0lBRXFBZ1FpQnBTU2tpQUhsU0VISUFrZ0JFTUFBQ0JCa2lJRUlBaVVJQVVnQ3BRaUNwS1NJQXNnQkNBTWxDQUZJQTJVSWd5U2tpSU5sU0VJSUE0Z0JDQVNsQ0FGSUFhVUlnV1NraUFObFNFRUlBa2dFQ0FLa3BJZ0N5QVJJQXlTa2lJR2xTRUpJQTRnRXlBRmtwSWdCcFVoQmdzZ0F5QUVJQWFUSWdRZ0JKUWdDQ0FKa3lJRUlBU1VraUlFSUFjZ0JwTWlCU0FGbENBUElBbVRJZ1VnQlpTU0lnVWdCQ0FGWFNJQUc1RkRYSThpUUpRNEFnUWdBeUFGSUFRZ0FCdVJRMXlQSWtDVU9BSUFJQmRCTUdva0FBdmNCUUlLZndGOUl3QkJJR3NpQkNRQUlBUWdBQkRYQWpZQ0VDQUVRUmhxSVFrakFFRWdheUlCSkFCQmtQNERFRDBhSUFBb0FnQWhCVUdRL2dNUWlRRWhBaUFCUVFBNkFCOENRQUpBSUFKRkRRQkJrUDRESUFVZ0FoQlpJZ1lRUENnQ0FDSURSUTBBQTBBZ0F5Z0NBQ0lEUlEwQklBVWdBeWdDQkVjRVFDQURLQUlFSUFJUVdTQUdSdzBDQzBHUS9nTVFXaUFEUVFocUlBQVF6Z0ZGRFFBTERBRUxJd0JCRUdzaUJ5UUFRWkQrQXhBMElRQWdBVUVRYWtISUFSQkxJQWRCQ0dvZ0FFRUFFTEVDRUxBQ0lnQW9BZ0JCQ0dvaENDQUVLQUlRSVFvakFFRVFheUlESkFBZ0F5QUtOZ0lJSUFnZ0F5Z0NDQ2dDQURZQ0FDQUlRUWhxUVFCQnVBRVFPeG9nQTBFUWFpUUFJQUFRU1VFQk9nQUVJQUFvQWdBZ0JUWUNCQ0FBS0FJQVFRQTJBZ0FnQjBFUWFpUUFBa0JCa1A0REFuOUJrUDRERUQwb0FnQkJBV3F6UVpEK0F4QmFLZ0lBSUFLemxGNUJBU0FDR3dSQUlBRWdBaERoQVVFQmN5QUNRUUYwY2pZQ0RDQUJBbjlCa1A0REVEMG9BZ0JCQVdxelFaRCtBeEJhS2dJQWxZMGlDME1BQUlCUFhTQUxRd0FBQUFCZ2NRUkFJQXVwREFFTFFRQUxOZ0lJUVpEK0F5QUJRUXhxSUFGQkNHb1FnQUVvQWdBUXRnVWdCVUdRL2dNUWlRRWlBaEJaSVFZTElBWUxFRHdvQWdBaUFFVUVRQ0FCS0FJUVFaaitBeWdDQURZQ0FFR1kvZ01nQVNnQ0VEWUNBRUdRL2dNZ0JoQThRWmorQXpZQ0FDQUJLQUlRS0FJQVJRMEJJQUVvQWhBaEFFR1EvZ01nQVNnQ0VDZ0NBQ2dDQkNBQ0VGa1FQQ0FBTmdJQURBRUxJQUVvQWhBZ0FDZ0NBRFlDQUNBQUlBRW9BaEEyQWdBTElBRkJFR29RdXdFaEEwR1EvZ01RUFNJQUlBQW9BZ0JCQVdvMkFnQWdBVUVCT2dBZklBRkJFR29pQWlnQ0FDRUFJQUpCQURZQ0FDQUFCRUFnQWhCSklnSXRBQVFFUUNBQ0tBSUFHZ3NnQUFSQUlBSW9BZ0FhSUFBUU13c0xDeUFKSUFGQkVHb2dBeEI0SUFGQkgyb1FzZ0lnQVVFZ2FpUUFJQVJCR0dvUWJDRUFJQVJCSUdva0FDQUFRUWhxQ3lJQUFrQWdBQVJBSUFBZ0FTQUNJQU1Rd1FVTUFRdEJBQ0FCSUFJZ0F4REJCUXNMRUFBQ1FDQUFRYkFDYWhEUUJRc2dBQXZ3QVFFQ2Z5QUFLQUxZQVNJQkJFQUNRQ0FCUlEwQUlBRW9BdkNHcndORkRRQWdBVUVBTmdMd2hxOERDeUFBS0FMWUFTSUJCRUFnQVNnQ2lJZXZBeUlDQkVBZ0FoQkZJQUZCQURZQ2lJZXZBd3NnQVNnQzRJYW5BaEF6SUFGQjVJYW5BbW9vQWdBUU15QUJFRE1MSUFCQkFEWUMyQUVMSUFBb0F0d0JCRUFnQUNnQzNBRWlBUVJBSUFFUTZRTWdBQ2dDM0FFUU15QUFRUUEyQXR3QkN5QUFRUUEyQXR3QkN5QUFLQUxBQVFSQUFrQWdBRUhBQVdvaUFVVU5BQ0FCS0FJQUlnSkZEUUFnQWlnQ3VBRVFNeUFCS0FJQUtBSzhBUkF6SUFFb0FnQVFNeUFCUVFBMkFnQUxJQUJCQURZQ3dBRUxDNkVCQVFOL0l3QkJJR3NpQXlRQUlBTWdBallDSENBRElBRVFtd0VpQWlFRUlBTW9BaHdoQlNNQVFZQVFheUlCSkFBZ0FVR0FFQ0FFRUQ0Z0JSQ0RBaG9nQTBFUWFpQUJFSnNCR2lBQlFZQVFhaVFBSUFOQkVHb2hCRUVBSVFFRFFDQUFFRVFnQVVzRVFDQUFJQUVRVUNnQ0FDSUZRUWdnQkNBRktBSUFLQUlJRVFZQUlBRkJBV29oQVF3QkN3c2dBMEVRYWhBNUdpQUNFRGthSUFOQklHb2tBQXZEQVFFQ2Z5QUFRUUUyQWhBZ0FDQUVOZ0lJSUFBZ0F6WUNCQ0FBSUFJMkFnQWdBQ0FFSUFWc05nSVVJd0JCRUdzaUJ5UUFJQUJCR0dvaUJDQUJOZ0lBSUFRQ2YwRVFFRXNoQmlNQVFTQnJJZ1FrQUNBRUlBRTJBZ3dnQmhEMUF5QUdRWWpsQVRZQ0FDQUdRUXhxSUFSQkNHb2dCRUVNYWlBRVFSaHFFSzRDSUFSQkVHb1FyZ0lhSUFSQklHb2tBQ0FHQ3pZQ0JDQUhJQUUyQWdRZ0J5QUJOZ0lBSUFkQkVHb2tBQ0FBSUFWQmYwd0VmeUFDRU1nRklBTnNCU0FGQ3pZQ0RDQUFDMG9CQVg4akFFRVFheUlCSkFBQ1FBSkFBa0FnQUVFQmF3NENBZ0VBQzBFUUVBa2lBQ0FCUWVma0FCQ2JBUkRZQWlBQVFaemVBVUVPRUFnQUMwRUVJUUFMSUFGQkVHb2tBQ0FBQ3o0QkFYOGpBRUdRQW1zaUFTUUFJQUZCakFKcUVCa2FJQUZCZ0FKQndSTWdBVUdNQW1wQmtJZ0VFQ1FRTUJvZ0FDQUJFSnNCR2lBQlFaQUNhaVFBQytvQ0FRbC9Jd0JCRUdzaUJpUUFJQUFvQWdBaEFpQUdRUUE2QUE4Z0JrRVBhaUVIQWtBZ0FFRUVhaUlERUpFQklnUWdBU0FDYkNJQ1NRUkFJd0JCSUdzaUNDUUFBa0FnQWlBRWF5SUNJQU1RTkNnQ0FDQURLQUlFYTAwRVFDTUFRUkJySWdRa0FDQUVJQU1nQWhDckF5SUNLQUlFSVFVRFFDQUNLQUlJSUFWSEJFQWdBeEEwSUFJb0FnUWdCeENxQXlBQ0lBSW9BZ1JCQVdvaUJUWUNCQXdCQ3dzZ0FoQjBJQVJCRUdva0FBd0JDeUFERURRaEJDQUlRUWhxSUFNZ0F4Q1JBU0FDYWhDcEF5QURFSkVCSUFRUW5nUWlCQ0VGSXdCQkVHc2lDU1FBSUFrZ0JVRUlhaUFDRVBZRklnSW9BZ0FoQ2dOQUlBSW9BZ1FnQ2tjRVFDQUZLQUlRSUFJb0FnQWdCeENxQXlBQ0lBSW9BZ0JCQVdvaUNqWUNBQXdCQ3dzZ0FoQ3dBU0FKUVJCcUpBQWdBeUFFRUowRUlBUVFuQVFMSUFoQklHb2tBQXdCQ3lBQ0lBUkpCRUFnQXlBREtBSUFJQUpxRUlBRUN3c2dBRUVRYWlBQkVKVUdJQVpCRUdva0FBc2dBQ0FBRURRYUEwQWdBUVJBSUFFb0FnQWhBQ0FCRURNZ0FDRUJEQUVMQ3d1OUFnRUhmeUFBRUVrYUFrQWdBUVJBSUFBQ2Z5QUJJZ05CLy8vLy93TkxCRUJCcFk4QkVKUUJBQXNnQTBFQ2RCQkxDeEN2QWlBQUVFa2dBellDQUFOQUlBSWdBMFlFUUNBQVFRaHFJZ0VvQWdBaUJFVU5BeUFBSUFRb0FnUWdBeEJaSWdjUVBDQUJOZ0lBQTBBZ0JDZ0NBQ0lCUlEwRUFrQWdBU2dDQkNBREVGa2lCU0FIUmcwQUlBRWhBaUFBSUFVUVBDZ0NBRVVFUUNBQUlBVVFQQ0FFTmdJQUlBVWhCd3dCQ3dOQUFrQWdBaUlHS0FJQVJRUkFRUUFoQWd3QkN5QUFFRm9nQVVFSWFpQUdLQUlBUVFocUVNNEJJUWdnQmlnQ0FDRUNJQWdOQVFzTElBUWdBallDQUNBR0lBQWdCUkE4S0FJQUtBSUFOZ0lBSUFBZ0JSQThLQUlBSUFFMkFnQU1BUXNnQVNFRURBQUxBQVVnQUNBQ0VEeEJBRFlDQUNBQ1FRRnFJUUlNQVFzQUN3QUxJQUJCQUJDdkFpQUFFRWxCQURZQ0FBc0xpUU1DQVh3RGZ5TUFRUkJySWdJa0FBSkFJQUM4SWdSQi8vLy8vd2R4SWdOQjJwK2srZ05OQkVBZ0EwR0FnSURNQTBrTkFTQUF1eERIQVNFQURBRUxJQU5CMGFmdGd3Uk5CRUFnQUxzaEFTQURRZU9YMjRBRVRRUkFJQVJCZjB3RVFDQUJSQmd0UkZUN0lmay9vQkRHQVl3aEFBd0RDeUFCUkJndFJGVDdJZm0vb0JER0FTRUFEQUlMUkJndFJGVDdJUW5BUkJndFJGVDdJUWxBSUFSQmYwb2JJQUdnbWhESEFTRUFEQUVMSUFOQjFlT0lod1JOQkVBZ0FMc2hBU0FEUWQvYnY0VUVUUVJBSUFSQmYwd0VRQ0FCUk5JaE0zOTgyUkpBb0JER0FTRUFEQU1MSUFGRTBpRXpmM3paRXNDZ0VNWUJqQ0VBREFJTFJCZ3RSRlQ3SVJuQVJCZ3RSRlQ3SVJsQUlBUkJmMG9iSUFHZ0VNY0JJUUFNQVFzZ0EwR0FnSUQ4QjA4RVFDQUFJQUNUSVFBTUFRc0NRQUpBQWtBQ1FDQUFJQUpCQ0dvUWl3VkJBM0VPQXdBQkFnTUxJQUlyQXdnUXh3RWhBQXdEQ3lBQ0t3TUlFTVlCSVFBTUFnc2dBaXNEQ0pvUXh3RWhBQXdCQ3lBQ0t3TUlFTVlCakNFQUN5QUNRUkJxSkFBZ0FBdnpBZ0lEZndGOEl3QkJFR3NpQVNRQUFuMGdBTHdpQTBILy8vLy9CM0VpQWtIYW42VDZBMDBFUUVNQUFJQS9JQUpCZ0lDQXpBTkpEUUVhSUFDN0VNWUJEQUVMSUFKQjBhZnRnd1JOQkVBZ0FMc2hCQ0FDUWVTWDI0QUVUd1JBUkJndFJGVDdJUW5BUkJndFJGVDdJUWxBSUFOQmYwb2JJQVNnRU1ZQmpBd0NDeUFEUVg5TUJFQWdCRVFZTFVSVSt5SDVQNkFReHdFTUFndEVHQzFFVlBzaCtUOGdCS0VReHdFTUFRc2dBa0hWNDRpSEJFMEVRQ0FDUWVEYnY0VUVUd1JBUkJndFJGVDdJUm5BUkJndFJGVDdJUmxBSUFOQmYwb2JJQUM3b0JER0FRd0NDeUFEUVg5TUJFQkUwaUV6ZjN6WkVzQWdBTHVoRU1jQkRBSUxJQUM3Uk5JaE0zOTgyUkxBb0JESEFRd0JDeUFBSUFDVElBSkJnSUNBL0FkUERRQWFBa0FDUUFKQUFrQWdBQ0FCUVFocUVJc0ZRUU54RGdNQUFRSURDeUFCS3dNSUVNWUJEQU1MSUFFckF3aWFFTWNCREFJTElBRXJBd2dReGdHTURBRUxJQUVyQXdnUXh3RUxJUUFnQVVFUWFpUUFJQUFMV0FFQ2Z5QUFFRDBvQWdBRVFDQUFJQUJCQ0dvaUFTZ0NBQkRMQlNBQlFRQTJBZ0FnQUJDSkFTRUNRUUFoQVFOQUlBRWdBa1lFUUNBQUVEMUJBRFlDQUFVZ0FDQUJFRHhCQURZQ0FDQUJRUUZxSVFFTUFRc0xDd3NVQUNBQUlBQkJDR29vQWdBUXl3VWdBQkN6QWdzd0FRSjlBbjlCQVNBQUtnSUFJZ0lnQVNvQ0FDSURYUTBBR2tFQUlBSWdBMTROQUJvZ0FDZ0NCQ0FCS0FJRVNBc0xiUUFnQUNvQ0FDQUJLZ0lBbENBQUtnSUVJQUVxQWdTVWtpQUFLZ0lJSUFFcUFnaVVraUFBS2dJTUlBRXFBZ3lVa2lBQUtnSVFJQUVxQWhDVWtpQUFLZ0lVSUFFcUFoU1VraUFBS2dJWUlBRXFBaGlVa2lBQUtnSWNJQUVxQWh5VWtpQUFLZ0lnSUFFcUFpQ1VrZ3NRQUNBQVFnQTNBZ0FnQUVFQU5nSUlDNndFQWdkL0JYd2pBRUdnQVdzaUJ5UUFRWDhoQlFKQUlBRW9BZ2dpQmtFRFNBMEFJQVpCNEFCc0VEb2lDRVVFUUVFQVFRTkJ1ZzFCQUJBNERBRUxJQVpCQkhRUU9pSUpCRUJCQUNFR0EwQkJBQ0VGSUFaQkEwWUVRRUVBSVFZQ1FBTkFJQUFnQXlBSFFUQnFFTndHUkFBQUFBQUFBQUFBSVF4QkFDRUZBMEFnQVNnQ0NDSUNJQVZLQkVBZ0IwR1FBV29nQjBFd2FpQUJLQUlFSUFWQkdHeHFFUHNGUVg5TURRTWdCVUVFZENJQ0lBRW9BZ0JxSWdvckF3Z2hEU0FIS3dPWUFTRVBJQUlnQ1dvZ0Npc0RBQ0FIS3dPUUFhRWlEamtEQUNBSklBSkJDSEpxSUEwZ0Q2RWlEVGtEQUNBTUlBNGdEcUlnRFNBTm9xQ2dJUXdnQlVFQmFpRUZEQUVMQ3dKQUlBd2dBcmVqSWd3Z0FDc0RhR01OQUFKQUlBWkZEUUFnRENBQUt3TjRZMFVOQUNBQUt3TndJQXdnRUtOakRRRUxRUUFoQlNBR0lBQW9BbUJHRFFBRFFDQUNJQVZLQkVBZ0NDQUZRZUFBYkdvZ0FDQURJQUVvQWdRZ0JVRVliR29ROUFWQkFFZ05CQ0FGUVFGcUlRVWdBU2dDQ0NFQ0RBRUxDeUFISUFrZ0NDQUNRUUYwRU84RlFYOU1EUUlnQXlBSEVPa0ZJQVpCQVdvaEJpQU1JUkFNQVFzTElBUWdERGtEQUNBSUVETWdDUkF6UVFBaEJRd0VDeUFJRURNZ0NSQXpRWDhoQlF3REJRTkFJQVZCQkVjRVFDQUZRUU4wSWdvZ0F5QUdRUVYwSWd0cWFpQUNJQXRxSUFwcUt3TUFPUU1BSUFWQkFXb2hCUXdCQ3dzZ0JrRUJhaUVHREFFTEFBc0FDMEVBUVFOQnVnMUJBQkE0SUFnUU13c2dCMEdnQVdva0FDQUZDMmtCQTMwZ0FDb0NFQ0FBS2dJVUlBQXFBaHdnQUNvQ0lCQ21BU0VCSUFBcUFnd2dBQ29DRkNBQUtnSVlJQUFxQWlBUXBnRWhBaUFBS2dJTUlBQXFBaEFnQUNvQ0dDQUFLZ0ljRUtZQklRTWdBU0FBS2dJQWxDQUNJQUFxQWdTVWt5QURJQUFxQWdpVWtnc01BQ0FBSUFFcEFnQTNBZ0FMMkFJQkNuMGdCU0FHS2dJQUlBY3FBZ0NTSUFncUFnQ1NJQWtxQWdDU1F3QUFnRDZVSWdvNEFnQWdCU0FHS2dJRUlBY3FBZ1NTSUFncUFnU1NJQWtxQWdTU1F3QUFnRDZVSWdzNEFnUWdCaW9DQUNBS2t5SU1JQXlVSUFZcUFnUWdDNU1pRFNBTmxKS1JJQWNxQWdBZ0NwTWlEaUFPbENBSEtnSUVJQXVUSWc4Z0Q1U1NrWklnQ0NvQ0FDQUtreUlRSUJDVUlBZ3FBZ1FnQzVNaUVTQVJsSktSa2lBSktnSUFJQXFUSWdvZ0NwUWdDU29DQkNBTGt5SUxJQXVVa3BHU1F3QUFnRDZVSWhKREFBQUFBRndFUUNBRVF3QUFnRDhnRXBXN1JNMDdmMmFlb1BZL29yWWlFemdDQUNBQUlBd2dFNVE0QWdBZ0FDQU5JQVFxQWdDVU9BSUVJQUVnRGlBRUtnSUFsRGdDQUNBQklBOGdCQ29DQUpRNEFnUWdBaUFRSUFRcUFnQ1VPQUlBSUFJZ0VTQUVLZ0lBbERnQ0JDQURJQW9nQkNvQ0FKUTRBZ0FnQXlBTElBUXFBZ0NVT0FJRUN5QVNRd0FBQUFCY0N4SUFJQUFnQUNnQ0FDQUJRUUowYWpZQ0FBc2tBUUYvSXdCQkVHc2lBU1FBSUFFZ0FEWUNDQ0FCS0FJSUlRQWdBVUVRYWlRQUlBQUxNQUVCZnlNQVFSQnJJZ0lrQUNBQ0lBRTJBZ0FnQWlBQU5nSUlJQUlnQWtFSWFoRG5BeUVBSUFKQkVHb2tBQ0FBQ3cwQUlBQW9BZ0FnQUNnQ0JFWUxWd0VDZnlNQVFTQnJJZ01rQUNBQUVEUWlBaUFEUVFocUlBQWdBQkJFUVFGcUVKNERJQUFRUkNBQ0VKY0RJZ0lvQWdnZ0FSRGFBaUFDSUFJb0FnaEJDR28yQWdnZ0FDQUNFSjBESUFJUW5BTWdBMEVnYWlRQUM3SUVBUWgvSUFBUXVRSWhBaUFBRU44Q0lRTWpBRUVnYXlJR0pBQWdCaUFETmdJUUlBWWdBallDR0NBR1FSQnFJQVpCR0dvUW1nTWhCU01BUVJCcklnUWtBQ0FFSUFNMkFnQWdCQ0FDTmdJSUlBVkJBazRFUUNBRUtBSUlJUU1nQkJEUUFTZ0NBQ0VCSXdCQkVHc2lBaVFBSUFJZ0F5a0NBRGNEQ0NBRElBRXBBZ0EzQWdBZ0FTQUNRUWhxS1FJQU53SUFJQUpCRUdva0FDQUVLQUlJSWdJaEF5QUVLQUlBR2lNQVFUQnJJZ0VrQUNBQklBSTJBaUFnQVNBRE5nSW9JQUZCSUdvZ0FVRW9haENhQXlFQ0FrQWdCVUVCYXlJRlFRSklEUUFnQlVFQ2EwRUJkaUlJSUFKSURRQWdBU0FCUVNocUlBSkJBWFFpQTBFQmNpSUNFUElCTmdJWUFrQWdBMEVDYWlJRElBVk9EUUFnQVNnQ0dDRUhJQUVnQVVFWWFrRUJFUElCTmdJUUlBY2dBU2dDRUJDcUFrVU5BQ0FCUVJocUVLVUJHaUFESVFJTElBRW9BaGdnQVNnQ0lCQ3FBZzBBSUFFZ0FTZ0NJQ2tDQURjREVBTkFBa0FnQVNnQ0lDQUJLQUlZS1FJQU53SUFJQUVnQVNnQ0dEWUNJQ0FDSUFoS0RRQWdBU0FCUVNocUlBSkJBWFFpQTBFQmNpSUNFUElCTmdJWUFrQWdBMEVDYWlJRElBVk9EUUFnQVNnQ0dDRUhJQUVnQVVFWWFrRUJFUElCTmdJSUlBY2dBU2dDQ0JDcUFrVU5BQ0FCUVJocUVLVUJHaUFESVFJTElBRW9BaGdnQVVFUWFoQ3FBa1VOQVFzTElBRW9BaUFnQVVFUWFpa0NBRGNDQUFzZ0FVRXdhaVFBQ3lBRVFSQnFKQUFnQmtFZ2FpUUFJQUFvQWdSQkNHc2hBaUFBRUVRaEF5QUFJQUlRcFFNZ0FDQURFSTRFQzdrQ0FnRjlBWDhnQWlBQkVOVUZJZ09MWUNJRVJRUkFJQUJEQUFDQVB5QURsU0lDSUFFcUFoQWdBU29DRkNBQktnSWNJQUVxQWlBUXBnR1VPQUlBSUFBZ0FpQUJLZ0lJSUFFcUFnUWdBU29DSUNBQktnSWNFS1lCbERnQ0JDQUFJQUlnQVNvQ0JDQUJLZ0lJSUFFcUFoQWdBU29DRkJDbUFaUTRBZ2dnQUNBQ0lBRXFBaFFnQVNvQ0RDQUJLZ0lnSUFFcUFoZ1FwZ0dVT0FJTUlBQWdBaUFCS2dJQUlBRXFBZ2dnQVNvQ0dDQUJLZ0lnRUtZQmxEZ0NFQ0FBSUFJZ0FTb0NDQ0FCS2dJQUlBRXFBaFFnQVNvQ0RCQ21BWlE0QWhRZ0FDQUNJQUVxQWd3Z0FTb0NFQ0FCS2dJWUlBRXFBaHdRcGdHVU9BSVlJQUFnQWlBQktnSUVJQUVxQWdBZ0FTb0NIQ0FCS2dJWUVLWUJsRGdDSENBQUlBSWdBU29DQUNBQktnSUVJQUVxQWd3Z0FTb0NFQkNtQVpRNEFpQUxJQVJGQzJvQkFYOGdBQkNuQWlBQkJFQWdBQkNHQkNBQlNRUkFFSThCQUFzZ0FCQTBHaUFCUWYvLy8vOEJTd1JBUWVtZ0FSQ1VBUUFMSUFBZ0FVRURkQkJMSWdJMkFnQWdBQ0FDTmdJRUlBQVFOQ0FDSUFGQkEzUnFOZ0lBSUFCQkFCQ2JBeUFBSUFFUS9nTUxJQUFMSVFBZ0FDZ0NCQ0FBRURRb0FnQkhCRUFnQUNBQkVLWUREd3NnQUNBQkVOd0ZDd2dBSUFCQi9BQnFDNjRCQVFOL0l3QkJFR3NpQnlRQUlBVVFiU0VGSUFBZ0JCQkVFSk1ESUFkQkRHb2hDQU5BSUFRUVJDQUdTd1JBSUFkQkNHb2dDQ0FCSUFNZ0JDQUdFRkFvQWdRUWF5b0NBQ0FESUFRZ0JoQlFLQUlFRUdzcUFnUVE2Z01nQlNBSEtnSUlJQUlnQkNBR0VGQW9BZ0FRYXlvQ0FKTVFiU0FIS2dJTUlBSWdCQ0FHRUZBb0FnQVFheW9DQkpNUWJaSmdCRUFnQUNBRUlBWVFVQkRnQlFzZ0JrRUJhaUVHREFFTEN5QUhRUkJxSkFBTCtDMENIMzhQZlNNQVFVQnFJaFFrQUNBVVFUQnFJQU1RUkJEZkJTRWZJQlJCSUdvZ0F4QkVFTjhGSVNBRGZ5QURFRVFnRWswRWYwRUFJUklnRkVFQU5nSVlJQlJCQURZQ0RDQVVRZ0EzQXdBZ0ZDQUdzaUltT0FJY0lCUWdKamdDRkNBVUlBV3lJaVk0QWhBZ0ZDQW1PQUlJQW44Z0gwRUFFRkFoRnlBZ1FRQVFVQ0VZSUFSQkRHb2lBU0FERUVRaUdSQ09BaUFBSVJBZ0ZDRUFJQVJCR0dvaEZTQUVLZ0lrSVNZZ0JDZ0NLQ0VjSUFRb0Fpd2hKQ0FFS0FJd0lRSWpBRUVRYXlJZEpBQUNRQ0FFSWlFUVF5QWNRUWxzVHdSQUlBRVFReUFaVHdSQUlCVVFSQ0FjVHdSQUlCbEJCRWdOQXlBZFFkSUpOZ0lNSUFGQkFCQThJUk1nSmhCdElTNGdBaUFaRUprRElTVWdFeUFaRU80RklCTWdHU0FaSUIxQkRHb1E3d01EUUNBUElCeE9JQTBnSkU1eVJRUkFJQk1nR1VFRUlCMUJER29RN3dNZ0Z5QVRLQUlNUVFOMElnSnFJUUVnQWlBWWFpRUNRUUFoQXdKQUlCY2dFeWdDQUVFRGRDSUphaUlFSUJjZ0V5Z0NCRUVEZENJSWFpSUtJQmNnRXlnQ0NFRURkQ0lNYWlJSEVLb0JRd0FBQUFCZUlBa2dHR29pQ1NBSUlCaHFJZ2dnRENBWWFpSU1FS29CUXdBQUFBQmVjdzBBSUFvZ0J5QUJFS29CUXdBQUFBQmVJQWdnRENBQ0VLb0JRd0FBQUFCZWN3MEFJQWNnQVNBRUVLb0JRd0FBQUFCZUlBd2dBaUFKRUtvQlF3QUFBQUJlY3cwQUlBRWdCQ0FLRUtvQlF3QUFBQUJlSUFJZ0NTQUlFS29CUXdBQUFBQmVjMFVoQXdzQ1FDQURSUTBBSUNFZ0QwRUpiQ0lpRUR3aEFTQVhJQk1vQWdCQkEzUWlBbW9oQXlBWElCTW9BZ1JCQTNRaUJHb2hDaUFYSUJNb0FnaEJBM1FpQjJvaENTQVhJQk1vQWd4QkEzUWlDR29oRENBQ0lCaHFJUkVnQkNBWWFpRVdJQWNnR0dvaEJ5QUlJQmhxSVFoQkFDRUNJd0JCa0FGcklnUWtBQUpBSUFSQlFHc2dCRUU0YWlBRVFUQnFJQVJCS0dvZ0JFSGNBR29nQkVIUUFHb2dBeUFLSUFrZ0RCRFhCVVVOQUNBRVFTQnFJQVJCR0dvZ0JFRVFhaUFFUVFocUlBUkIyQUJxSUFSQnlBQnFJQkVnRmlBSElBZ1Exd1ZGRFFBZ0JFSGdBR29oRENNQVFhQUNheUlLSkFBZ0NpQUVRVUJySUFSQklHb1FrQU1nQ2tISUFHb2dCRUU0YWlBRVFSaHFFSkFESUFwQmtBRnFJQVJCTUdvZ0JFRVFhaENRQXlBS1FkZ0JhaUFFUVNocUlBUkJDR29Ra0FOQkFDRVJBbjlCQUNFV0l3QkJvQUpySWdNa0FDTUFRU0JySWdja0FDQUhJQW9RVmpnQ0FDQUhJQXBCSkdvaUNSQldPQUlFSUFjZ0NrSElBR29RVmpnQ0NDQUhJQXBCN0FCcUVGWTRBZ3dnQnlBS1FaQUJhaEJXT0FJUUlBY2dDa0cwQVdvUVZqZ0NGQ0FISUFwQjJBRnFFRlk0QWhnZ0J5QUtRZndCYWhCV09BSWNJQWRCQjBFR1FRVkJCRUVEUVFJZ0J5b0NCQ0FIS2dJQVhpSUlJQWNxQWdnZ0J5QUlRUUowYWlvQ0FGNGJJZ2dnQnlvQ0RDQUhJQWhCQW5ScUtnSUFYaHNpQ0NBSEtnSVFJQWNnQ0VFQ2RHb3FBZ0JlR3lJSUlBY3FBaFFnQnlBSVFRSjBhaW9DQUY0YklnZ2dCeW9DR0NBSElBaEJBblJxS2dJQVhoc2lDQ0FIS2dJY0lBY2dDRUVDZEdvcUFnQmVHeUlJUVFKMGFpSUxLZ0lBSWlaREFBQUFBRndFUUNBS0lBb2dDRUVrYkdvUXJ3RWdBeUFLUXdBQWdEOGdDeW9DQUpHVkVNMEJJQU5CSkdvZ0NVRS9FTzhCQ3lBSFFTQnFKQUFDUUNBbVF3QUFBQUJiRFFBakFFRWdheUlISkFBZ0EwRWthaUlKSUFNZ0NrRWthaUlJRUdRZ0EwSElBR29pQ3lBRElBcEJ5QUJxRUdRZ0EwSHNBR29pRGlBRElBcEI3QUJxRUdRZ0EwR1FBV29pR2lBRElBcEJrQUZxRUdRZ0EwRzBBV29pR3lBRElBcEJ0QUZxRUdRZ0EwSFlBV29pSGlBRElBcEIyQUZxRUdRZ0EwSDhBV29pSXlBRElBcEIvQUZxRUdRZ0J5QUpFRlk0QWdBZ0J5QUxFRlk0QWdRZ0J5QU9FRlk0QWdnZ0J5QWFFRlk0QWd3Z0J5QWJFRlk0QWhBZ0J5QWVFRlk0QWhRZ0J5QWpFRlk0QWhnZ0IwRUdRUVZCQkVFRFFRSWdCeW9DQkNBSEtnSUFYaUlMSUFjcUFnZ2dCeUFMUVFKMGFpb0NBRjRiSWdzZ0J5b0NEQ0FISUF0QkFuUnFLZ0lBWGhzaUN5QUhLZ0lRSUFjZ0MwRUNkR29xQWdCZUd5SUxJQWNxQWhRZ0J5QUxRUUowYWlvQ0FGNGJJZ3NnQnlvQ0dDQUhJQXRCQW5ScUtnSUFYaHNpQzBFQ2RHb2lEaW9DQUNJbVF3QUFBQUJjQkVBZ0NTQUpJQXRCSkd3aUMyb1Fyd0VnQ0NBSUlBdHFFSzhCSUFrZ0NVTUFBSUEvSUE0cUFnQ1JsUkROQVFzZ0IwRWdhaVFBSUNaREFBQUFBRnNOQUNNQVFTQnJJZ2NrQUNBRFFjZ0FhaUlKSUFOQkpHb2lDQ0FLUWNnQWFpSUxFR1FnQTBIc0FHb2lEaUFJSUFwQjdBQnFFR1FnQTBHUUFXb2lHaUFJSUFwQmtBRnFFR1FnQTBHMEFXb2lHeUFJSUFwQnRBRnFFR1FnQTBIWUFXb2lIaUFJSUFwQjJBRnFFR1FnQTBIOEFXb2lJeUFJSUFwQi9BRnFFR1FnQnlBSkVGWTRBZ0FnQnlBT0VGWTRBZ1FnQnlBYUVGWTRBZ2dnQnlBYkVGWTRBZ3dnQnlBZUVGWTRBaEFnQnlBakVGWTRBaFFnQjBFRlFRUkJBMEVDSUFjcUFnUWdCeW9DQUY0aUNDQUhLZ0lJSUFjZ0NFRUNkR29xQWdCZUd5SUlJQWNxQWd3Z0J5QUlRUUowYWlvQ0FGNGJJZ2dnQnlvQ0VDQUhJQWhCQW5ScUtnSUFYaHNpQ0NBSEtnSVVJQWNnQ0VFQ2RHb3FBZ0JlR3lJSVFRSjBhaUlPS2dJQUlpWkRBQUFBQUZ3RVFDQUpJQWtnQ0VFa2JDSUlhaEN2QVNBTElBZ2dDMm9RcndFZ0NTQUpRd0FBZ0Q4Z0Rpb0NBSkdWRU0wQkN5QUhRU0JxSkFBZ0prTUFBQUFBV3cwQUl3QkJJR3NpQnlRQUlBTkI3QUJxSWdrZ0EwSElBR29pQ0NBS1Fld0FhaUlMRUdRZ0EwR1FBV29pRGlBSUlBcEJrQUZxRUdRZ0EwRzBBV29pR2lBSUlBcEJ0QUZxRUdRZ0EwSFlBV29pR3lBSUlBcEIyQUZxRUdRZ0EwSDhBV29pSGlBSUlBcEIvQUZxRUdRZ0J5QUpFRlk0QWdBZ0J5QU9FRlk0QWdRZ0J5QWFFRlk0QWdnZ0J5QWJFRlk0QWd3Z0J5QWVFRlk0QWhBZ0IwRUVRUU5CQWlBSEtnSUVJQWNxQWdCZUlnZ2dCeW9DQ0NBSElBaEJBblJxS2dJQVhoc2lDQ0FIS2dJTUlBY2dDRUVDZEdvcUFnQmVHeUlJSUFjcUFoQWdCeUFJUVFKMGFpb0NBRjRiSWdoQkFuUnFJZzRxQWdBaUprTUFBQUFBWEFSQUlBa2dDU0FJUVNSc0lnaHFFSzhCSUFzZ0NDQUxhaEN2QVNBSklBbERBQUNBUHlBT0tnSUFrWlVRelFFTElBZEJJR29rQUNBbVF3QUFBQUJiRFFBakFFRVFheUlISkFBZ0EwR1FBV29pQ1NBRFFld0FhaUlJSUFwQmtBRnFJZ3NRWkNBRFFiUUJhaUlPSUFnZ0NrRzBBV29RWkNBRFFkZ0JhaUlhSUFnZ0NrSFlBV29RWkNBRFFmd0JhaUliSUFnZ0NrSDhBV29RWkNBSElBa1FWamdDQUNBSElBNFFWamdDQkNBSElCb1FWamdDQ0NBSElCc1FWamdDRENBSFFRTkJBaUFIS2dJRUlBY3FBZ0JlSWdnZ0J5b0NDQ0FISUFoQkFuUnFLZ0lBWGhzaUNDQUhLZ0lNSUFjZ0NFRUNkR29xQWdCZUd5SUlRUUowYWlJT0tnSUFJaVpEQUFBQUFGd0VRQ0FKSUFrZ0NFRWtiQ0lJYWhDdkFTQUxJQWdnQzJvUXJ3RWdDU0FKUXdBQWdEOGdEaW9DQUpHVkVNMEJDeUFIUVJCcUpBQWdKa01BQUFBQVd3MEFJd0JCRUdzaUJ5UUFJQU5CdEFGcUlna2dBMEdRQVdvaUNDQUtRYlFCYWlJTEVHUWdBMEhZQVdvaURpQUlJQXBCMkFGcUVHUWdBMEg4QVdvaUdpQUlJQXBCL0FGcUVHUWdCeUFKRUZZNEFnUWdCeUFPRUZZNEFnZ2dCeUFhRUZZNEFnd2dCMEVFYWtFQ0lBZEJCR29pQ0NvQ0JDQUlLZ0lBWGlJT0lBZ3FBZ2dnQ0NBT1FRSjBhaW9DQUY0YklnaEJBblJxSWc0cUFnQWlKa01BQUFBQVhBUkFJQWtnQ1NBSVFTUnNJZ2hxRUs4QklBc2dDQ0FMYWhDdkFTQUpJQWxEQUFDQVB5QU9LZ0lBa1pVUXpRRUxJQWRCRUdva0FDQW1Rd0FBQUFCYkRRQWpBRUVRYXlJSEpBQWdBMEhZQVdvaUNTQURRYlFCYWlJTElBcEIyQUZxSWdnUVpDQURRZndCYWlJT0lBc2dDa0g4QVdvUVpDQUhJQWtRVmpnQ0NDQUhJQTRRVmpnQ0RDQUhRUWhxSUFjcUFnd2dCeW9DQ0Y0aUMwRUNkR29pRGlvQ0FDSW1Rd0FBQUFCY0JFQWdDU0FKSUF0QkpHd2lDMm9RcndFZ0NDQUlJQXRxRUs4QklBa2dDVU1BQUlBL0lBNHFBZ0NSbFJETkFRc2dCMEVRYWlRQUlDWkRBQUFBQUZzTkFDQURRZndCYWlJSElBTkIyQUZxSUFwQi9BRnFFR1FnQnhCV0lpWkRBQUFBQUZ3RVFDQUhJQWREQUFDQVB5QW1rWlVRelFFTElDWkRBQUFBQUZzTkFDTUFRWUFEYXlJSEpBQWdCeUFISUFOQkFCRGdBVGdDMEFJZ0J5QUhRU1JxSUFOQkFSRGdBVGdDMUFJZ0J5QUhRY2dBYWlBRFFRSVE0QUU0QXRnQ0lBY2dCMEhzQUdvZ0EwRURFT0FCT0FMY0FpQUhJQWRCa0FGcUlBTkJCQkRnQVRnQzRBSWdCeUFIUWJRQmFpQURRUVVRNEFFNEF1UUNJQWNnQjBIWUFXb2dBMEVHRU9BQk9BTG9BaUFISUFkQi9BRnFJQU5CQnhEZ0FUZ0M3QUlnQnlBSFFhQUNhaUFEUVFnUTRBRTRBdkFDSUFkQjBBSnFRUWhCQjBFR1FRVkJCRUVEUVFJZ0IwSFFBbW9pQ1NvQ0JDQUpLZ0lBWGlJSUlBa3FBZ2dnQ1NBSVFRSjBhaW9DQUY0YklnZ2dDU29DRENBSklBaEJBblJxS2dJQVhoc2lDQ0FKS2dJUUlBa2dDRUVDZEdvcUFnQmVHeUlJSUFrcUFoUWdDU0FJUVFKMGFpb0NBRjRiSWdnZ0NTb0NHQ0FKSUFoQkFuUnFLZ0lBWGhzaUNDQUpLZ0ljSUFrZ0NFRUNkR29xQWdCZUd5SUlJQWtxQWlBZ0NTQUlRUUowYWlvQ0FGNGJJZ2xCQW5ScUtnSUFJaVpEQUFBQUFGd0VRQ0FNSUFjZ0NVRWtiR29RN1FNTElBZEJnQU5xSkFBZ0prTUFBQUFBWENFV0N5QURRYUFDYWlRQUlCWUxCRUFnREJEVkJZdTdSUEZvNDRpMStPUStZMFVoRVFzZ0NrR2dBbW9rQUNBUlJRMEFJQVFxQWxRaEtpQUVLZ0pRSVM4Z0JDb0NiQ0V3SUFRcUFrd2hLQ0FFS2dKd0lTc2dCQ29DZUNFcElBUXFBbUFoTENBQklBUXFBa2dpTFNBRUtnSjhJakdVSUFRcUFtUWdCQ29DV0NJbmxaSWlNaUFFS2dKY0lpYVVPQUlFSUFFZ0tTQXRsQ0FzSUNlVmtpSXNJQ2FVT0FJQUlBUXFBa2doTFNBRUtnS0FBU0V6SUFRcUFtZ2hOQ0FCSURFZ0tKUWdLeUFubFpJaUt5QW1sRGdDRUNBQklDa2dLSlFnTUNBbmxaSWlLQ0FtbERnQ0RDQUJJRE1nTFpRZ05DQW5sWklnTENBdklDYVVJaW1Va3lBeUlDb2dKcFFpS3BTVE9BSUlJQUVnQkNvQ2dBRWdCQ29DVEpRZ0JDb0NkQ0FubFpJZ0tDQXBsSk1nS3lBcWxKTTRBaFFnQVNBRUtnSjRJQ2FVSWljNEFoZ2dBU0FFS2dKOElDYVVJaVk0QWh3Z0FTQUVLZ0tBQVNBbklBUXFBbENVa3lBbUlBUXFBbFNVa3pnQ0lFRUJJUUlMSUFSQmtBRnFKQUFnQWtVTkFDQWhJQ0lRUENFV1FRQWhJaU1BUVRCcklnd2tBQ0FNUVNocUlCWWdBQ0lKRU8wQklBeEJJR29nRmlBSlFRaHFJZ29RN1FFZ0RFRVlhaUFXSUFsQkVHb2lFUkR0QVNBTVFSQnFJQXhCS0dvUTFnVWdERUVJYWlBTVFTQnFFTllGQWtBZ0NTQUtJQkVnREVFb2FpQU1RU0JxSUF4QkdHb1FrUU5GRFFCQkF5RUxJQXhCS0dvaEF5QU1RU0JxSVFJZ0RFRVlhaUVCSUFBaENDQUtJUWNEUUNBTFFRUkhCRUFnQXlJRUlCWWdFVUVJYWlJUkVPMEJJQXRCQVdvaEN5QUlRUWhxSWdnZ0IwRUlhaUlISUJFZ0FpQUJJQU1Ra1FNaERpQUNJUU1nQVNFQ0lBUWhBU0FPRFFFTUFnc0xJQWNnRVNBSklBSWdBU0FNUVJCcUVKRURSUTBBSUJFZ0NTQUtJQUVnREVFUWFpQU1RUWhxRUpFRElTSUxJQXhCTUdva0FDQWlSUTBBSUE5QkFXb2hEd3NnRFVFQmFpRU5EQUVMQ3lBUFJRUkFRUUFoRHd3RUMwTUFBSUEvSUM2VklTWWdEMEVBSUE5QkFFb2JJUUJCQUNFTkEwQWdBQ0FOUmdSQVFRQWhBQU5BSUFBZ0dVaEJBQ0FQUVFKS0cwVUVRQ0FQUVFFZ0QwRUJTaHNoQUNBVlFRQVFVQ2dDQkNFQklCVkJBQkJRS2dJQUlTWkJBU0VOQTBBZ0FDQU5SZ1JBSUJBZ0lTQUJRUWxzRUR3UTdRTWdFQ29DSUNFbUlCQkJnSUNBL0FNMkFpQWdFQ0FRS2dJQVF3QUFnRDhnSnBVaUpwUTRBZ0FnRUNBbUlCQXFBZ1NVT0FJRUlCQWdKaUFRS2dJSWxEZ0NDQ0FRSUNZZ0VDb0NESlE0QWd3Z0VDQW1JQkFxQWhDVU9BSVFJQkFnSmlBUUtnSVVsRGdDRkNBUUlDWWdFQ29DR0pRNEFoZ2dFQ0FtSUJBcUFoeVVPQUljUVFFaER3d0pCU0FtSUJVZ0RSQlFLZ0lBWGdSQUlCVWdEUkJRS2dJQUlTWWdGU0FORUZBb0FnUWhBUXNnRFVFQmFpRU5EQUVMQUFzQUN5QUFJQ1VnR1NBQWF4Q1pBeUFBYWlJRUlBQWdCRW9iSVFwQkFDRUJBMEFnQVNBUFJnUkFJQlZCQUJCUUlRa2dEMEVDYlNBUFFRRnhha0VCYXlFSVFRQWhEU01BUVJCckloRWtBQ0FSUVFocUVMVUNJUWNDUUFKQUlBOGlDa0VBU2dSQUlBaEJBRXdOQVNBS1FRRnJJUThnQ1NBSVFRRnJJaFpCQTNScUlRd0RRQ0FOSUE5SUJFQWdCeUFNS2dJQU9BSUFJQWNnRENnQ0JEWUNCQ0FQSVFBZ0RTRUJBMEFnQVNFQ0EwQWdBaUlCUVFGcUlRSWdDU0FCUVFOMGFpSWNJQWNRMFFVTkFBc2dBQ0VEQTBBZ0F5SUFRUUZySVFNZ0J5QUpJQUJCQTNScUlnc1EwUVVOQUFzZ0FDQUJUZ1JBSUJ3Z0N4RElBU0FDSVFFZ0F5RUFDeUFBSUFGT0RRQUxJQThnQUNBQklBaElHeUVQSUFFZ0RTQUFJQlpJR3lFTkRBRUxDeUFkSUF3cEFnQTNBZ0FnRVVFUWFpUUFEQUlMUWNDVEJFSDgwd0VRTWtHKzFBRVFNa0hTekFBUU1rSFNBQkExUWZUUkFCQXlRYlhXQVJBeUVEWVFBQUFMUWNDVEJFSGExZ0VRTWtHKzFBRVFNa0hTekFBUU1rSFRBQkExUWZUUkFCQXlRYXZYQVJBeUVEWVFBQUFMSUFwQkFYVWhEeUFFSVFBTUFnc2dJU0FWSUFFUVVDZ0NCRUVKYkJBOElRY2dBQ0VOQTBBZ0NpQU5SZ1JBSUFGQkFXb2hBUXdDQlNBWElCTWdEVUVDZEdvb0FnQkJBM1FpQ1dvaEF5TUFRUkJySWdJa0FDQUNRUWhxSUFKQkRHb2dCeUFES2dJQUlBTXFBZ1FRNmdNZ0FpQUNLZ0lJSUFrZ0dHb2lBeW9DQUpNNEFnQWdBaUFDS2dJTUlBTXFBZ1NUT0FJRUlBSXFBZ0FpSnlBbmxDQUNLZ0lFSWljZ0o1U1NJQ2FVUXdBQWdEK1NFTUFHSVNjZ0FrRVFhaVFBSUJVZ0FSQlFJZ0lnSnlBQ0tnSUFramdDQUNBTlFRRnFJUTBNQVFzQUN3QUxBQXNBQlNBVklBMFFVRUVBTmdJQUlCVWdEUkJRSUEwMkFnUWdEVUVCYWlFTkRBRUxBQXNBQzBIQWt3UkJpZElCRURKQms4NEJFREpCMHN3QUVESkIrUUFRTlVIMDBRQVFNa0dDMHdFUU1oQTJFQUFBQzBIQWt3UkJ3TkFCRURKQms4NEJFREpCMHN3QUVESkIrQUFRTlVIMDBRQVFNa0dtMFFFUU1oQTJFQUFBQzBIQWt3UkJzTTBCRURKQms4NEJFREpCMHN3QUVESkI5d0FRTlVIMDBRQVFNa0hiendFUU1oQTJFQUFBQ3lBZFFSQnFKQUFnRHdzRVFDTUFRZkFBYXlJQUpBQUNmMEVBSUFCQklHb2dFRU9zeFNjM0VONEZSUTBBR2lBQVFnQTNBeGdnQUVFQU5nSVVJQUFnQmJJaUpqZ0NFQ0FBSUFheUlpYzRBZ3dnQUNBbU9BSUlJQUFnSnpnQ0JDQUFRUUEyQWdBZ0FFSG9BR29nQUVFZ2FpQUFRUmhxRU8wQklBQkI0QUJxSUFCQklHb2dBRUVRYWhEdEFTQUFRZGdBYWlBQVFTQnFJQUJCQ0dvUTdRRWdBRUhRQUdvZ0FFRWdhaUFBRU8wQkl3QkJNR3NpQVNRQUlBRkJLR29nQUVIZ0FHb2lCQ0FBUWVnQWFpSUNFTkVDSUFGQklHb2dBRUhZQUdvaUF5QUNFTkVDSUFGQkdHb2dBRUhRQUdvaURTQUNFTkVDSUFGQkVHb2dCQ0FERU5FQ0lBRkJDR29nRFNBREVORUNJQUZCS0dvZ0FVRWdhaENQQXlFbUlBRkJJR29nQVVFWWFoQ1BBeUVuSUFGQktHb2dBVUVZYWhDUEF5RW9JQUZCRUdvZ0FVRUlhaENQQXlFcElDWWdKeENTQXlBb0VKSURJQ2tRa2dNaEppQUJRVEJxSkFCQkFDQUZJQVpzdDBRdFF4enI0allhUDZLMklDWmVEUUFhSUFCQjZBQnFJZ0VnQUVIZ0FHb2lBaUFBUWRnQWFpSURFS29CSVNaQkFVRi9JQUlnQXlBQVFkQUFhaUlFRUtvQlF3QUFBQUJlRzBFQlFYOGdKa01BQUFBQVhodHFRUUZCZnlBRElBUWdBUkNxQVVNQUFBQUFYaHRxUVFGQmZ5QUVJQUVnQWhDcUFVTUFBQUFBWGh0cUlnRWdBVUVmZFNJQmFpQUJjMEVFUmdzaEVpQUFRZkFBYWlRQUN5QWdFT1FCSUI4UTVBRWdGRUZBYXlRQUlCSUZJQUVnQXlBU0VGQW9BZ0FRYXlvQ0FDRW1JQ0FnRWhCUUlDWTRBZ0FnQVNBRElCSVFVQ2dDQUJCcktnSUVJU1lnSUNBU0VGQWdKamdDQkNBQ0lBTWdFaEJRS0FJRUVHc3FBZ0FoSmlBZklCSVFVQ0FtT0FJQUlBSWdBeUFTRUZBb0FnUVFheW9DQkNFbUlCOGdFaEJRSUNZNEFnUWdFa0VCYWlFU0RBRUxDd3VCQ0FJRGZ3WjlJd0JCSUdzaUJDUUFJQVFnQXlBQktBSllieUFCS0FKVWJ5QUJLQUkwYnlJRk5nSU1JQVFnQXlBRmF5QUJLQUpZYnlBQktBSlVieUFCS0FJMGJTSUZOZ0lJSUFRZ0F5QUVLQUlNSUFFb0FqUWdCV3hxYXlBQktBSllieUFCS0FKVWJTSUZOZ0lFSUFRZ0F5QUVLQUlNSUFFb0FsUWdCV3dnQVNnQ05DQUVLQUlJYkdwcWF5QUJLQUpZYlNJRE5nSUFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQVFvQWd3aUJVRi9TZ1JBSUFVZ0FTZ0NORTROQVNBRUtBSUlJZ1ZCZjB3TkFpQUZJQUVvQWpoT0RRTWdCQ2dDQkNJRlFYOU1EUVFnQlNBQktBSThUZzBGSUFOQmYwd05CaUFESUFFb0FrQk9EUWNNQ1F0QndKTUVRWVBEQVJBeVFkN0RBUkF5UWRMTUFCQXlRYjRCRURWQjlORUFFREpCK2NRQkVESVFOZ3dIQzBIQWt3UkJ4c1VCRURKQjNzTUJFREpCMHN3QUVESkJ2d0VRTlVIMDBRQVFNa0g1eEFFUU1oQTJEQVlMUWNDVEJFSCt4UUVRTWtIZXd3RVFNa0hTekFBUU1rSEFBUkExUWZUUkFCQXlRZFBHQVJBeUVEWU1CUXRCd0pNRVFZUEhBUkF5UWQ3REFSQXlRZExNQUJBeVFjRUJFRFZCOU5FQUVESkIwOFlCRURJUU5nd0VDMEhBa3dSQjM4Y0JFREpCM3NNQkVESkIwc3dBRURKQndnRVFOVUgwMFFBUU1rRzZ5QUVRTWhBMkRBTUxRY0NUQkVHR3lRRVFNa0hld3dFUU1rSFN6QUFRTWtIREFSQTFRZlRSQUJBeVFicklBUkF5RURZTUFndEJ3Sk1FUWU3SkFSQXlRZDdEQVJBeVFkTE1BQkF5UWNRQkVEVkI5TkVBRURKQnpNb0JFRElRTmd3QkMwSEFrd1JCbThzQkVESkIzc01CRURKQjBzd0FFREpCeFFFUU5VSDAwUUFRTWtITXlnRVFNaEEyQ3hBQUFBc2dBQkNUQWlBQkVPRUZFRU1oQlNBQktBSndJUU1DUUNBQ0VFUWdCVThFUUNBRlFRQWdCVUVBU2hzaEJRTkFJQVVnQmtZTkFpQURLZ0lFSVFjZ0F5b0NDQ0VJSUFNcUFnd2hDU0FFS0FJSXQwUUFBQUFBQUFEZ1A2QzJJUW9nQkNnQ0JMZEVBQUFBQUFBQTREK2d0aUVMSUFRb0FnQzNSQUFBQUFBQUFPQS9vTFloRENBRUlBTXFBZ0FnQkNnQ0RMZEVBQUFBQUFBQTREK2d0cE9MT0FJY0lBUWdCeUFLazRzNEFoZ2dCQ0FKSUF5VGl6Z0NFQ0FFSUFnZ0M1T0xJZ2NnQVNnQ1BMSWdCNU1Ra2dNaUJ6Z0NGQ0FIUXdBQUFBQmdCRUFDUUNBRUtnSWNRd0FBZ0Q5ZFJRMEFJQVFxQWhoREFBQ0FQMTFGRFFBZ0JDb0NGRU1BQUlBL1hVVU5BQ0FFS2dJUVF3QUFnRDlkUlEwQUlBQWdBaUFCRU9FRklBWVFQQ2dDQUJCUUVPQUZDeUFEUVJCcUlRTWdCa0VCYWlFR0RBRUZRY0NUQkVHR3pBRVFNa0hld3dFUU1rSFN6QUFRTWtITkFoQTFRZlRSQUJBeVFkak1BUkF5RURZUUFBQUxBQXNBQzBIQWt3UkJqTUlCRURKQnJNWUFFREpCMHN3QUVESkIxZ0lRTlVIMDBRQVFNa0hUd2dFUU1oQTJFQUFBQ3lBRVFTQnFKQUFMMnhrREVuOEtmUUo4SXdCQk1Hc2lEU1FBSUExQklHb2dBeEJFUVFKMEVPc0RJUkFnRFVFUWFpQURFRVJCQW5RUTZ3TWhFUUpBQTM4Z0F4QkVJQWhOQkg4Z0JMSWlHa1BOekV3K2xDQWFraUlhakNFYklBV3lJaHhEemN4TVBwUWdISklpSEl3aEhTQUFJZ2hCQ2pZQ1FDQUlRUXcyQWp3Z0NFRUFOZ0k0SUFoQkFEWUNOQ0FJUW9DQWdQeUxnSURBUHpjQ0pDQUlJQnc0QWlBZ0NDQWRPQUljSUFnZ0dqZ0NHQ0FJSUJzNEFoUWdDRUdBZ0lDSkJEWUNMQ0FJUVFBMkFsUWdDRUVBTmdKWVF3QUFJRUVRd0FZaEdpQUlRUUU2QUJBZ0NFTUFBSUEvSUJxVk9BSXdJQWhCM0FCcUVNOEZJQWdnQjBFQmRiSTRBZ3dnQ0NBR1FRRjFzamdDQ0NBSUlBYzJBZ1FnQ0NBR05nSUFJQkJCQUJBOElSSWdFVUVBRUR3aEV5QURFRVFoQ1VFQUlRUWpBRUVRYXlJS0pBQWdDRUhjQUdvUXp3VWdDUVJBSUFoQjhBQnFJaFFnQ1VFQ2RCQ1VBaUFJUWZ3QWFpSVZJQWtRamdJZ0NDMEFFQVJBQWtBakFFRVFheUlQSkFBZ0NDZ0NBQ0FJS0FJRUVMWUNJUUVnRHlBSkVPc0RJUXNDUUFKQUlBbEJBRW9FUUNBSUtBSUFRUUJNRFFFZ0NDZ0NCRUVCU0EwQ0lCTkJER29oQWlBU1FReHFJUVVnQWJJaEdrRUFJUU1EUUNBRElBbEdCRUFDZlNBTFFRQVFQQ0VNSUFzUVF5SUJJUUlnQVVFQ2JTQUJRUUZ4YWtFQmF5RU9RUUFoQmdKQUlBSkJBRW9FUUNBT1FRQk1EUUVnQWtFQmF5RUhJQXdnRGtFQmF5SVdRUUowYWlFWEEwQWdGeW9DQUNFYUlBY2lBU0FHSWdKS0JFQURRQ0FDSVFNRFFDQURJZ0pCQVdvaEF5QU1JQUpCQW5ScUloZ3FBZ0FnR2wwTkFBc2dBU0VGQTBBZ0JTSUJRUUZySVFVZ0dpQU1JQUZCQW5ScUloa3FBZ0JkRFFBTElBRWdBazRFUUNBWUlCa1FwUVlnQXlFQ0lBVWhBUXNnQVNBQ1RnMEFDeUFISUFFZ0FpQU9TQnNoQnlBQ0lBWWdBU0FXU0JzaEJnd0JDd3NnR2d3Q0MwSEFrd1JCOXEwQkVESkI4NjhCRURKQm95VVFNa0UxRURWQm1pb1FNa0h3c2dFUU1oQTJFQUFBQzBIQWt3UkJsTFFCRURKQjg2OEJFREpCb3lVUU1rRTJFRFZCbWlvUU1rSG50QUVRTWhBMkVBQUFDeUVhSUFoQkJRSi9JQWdxQWhnZ0NDb0NGSk1nR2tNQUFJQStsQ0lhbFkwaUc0dERBQUFBVDEwRVFDQWJxQXdCQzBHQWdJQ0FlQXNRdGdJMkFqUWdDRUVGQW44Z0NDb0NJQ0FJS2dJY2t5QWFsWTBpR290REFBQUFUMTBFUUNBYXFBd0JDMEdBZ0lDQWVBc1F0Z0lpQVRZQ09DQUlJQUVnQ0NnQ05Hd2lBVFlDVkNBSUlBZ29BandnQVd3MkFsZ2dDeEJ6SUE5QkVHb2tBQXdGQlNBRklBTkJCSFFpQVdvcUFnQWdBU0FDYWlvQ0FCRFFBaUViSUFzZ0F4QThJQnNnR3BRNEFnQWdBMEVCYWlFRERBRUxBQXNBQzBIQWt3UkJnUFVBRURKQmloNFFNa0dqSlJBeVFkQUJFRFZCbWlvUU1rSGMrQUFRTWhBMkRBY0xRY0NUQkVHQi9BQVFNa0dLSGhBeVFhTWxFREpCMFFFUU5VR2FLaEF5UWNmL0FCQXlFRFlNQmd0QndKTUVRZGlDQVJBeVFZb2VFREpCb3lVUU1rSFNBUkExUVpvcUVESkIzWVVCRURJUU5nd0ZDd3NnQ1VFQUlBbEJBRW9iSVE5QkFDRURBMEFnQkNBUFJnUkFJQlFnQTBFQ2RCQ1VBaUFWSUFNUWpnSUZJQklnQkVFRWRDSUNhaUlCS2dJQUlSOGdBU29DQkNFZ0lBRXFBZ2doR2lBQktnSU1JUjBnQWlBVGFpSUJLZ0lBSVJzZ0FTb0NCQ0VjSUFFcUFnZ2hIaUFCS2dJTUlTRWpBRUVRYXlJQkpBQWdDaUFhSUI2VElobzRBZ1JFR0MxRVZQc2hHVUFoSkFKQUlCcTdJaVZFR0MxRVZQc2hDY0JsUlFSQVJCZ3RSRlQ3SVJuQUlTUWdKVVFZTFVSVSt5RUpRR1JGRFFFTElBb2dKQ0Fsb0xZaUdqZ0NCQXNDUUFKQUlCcTdJaVJFR0MxRVZQc2hDY0JrQkVBZ0pFUVlMVVJVK3lFSlFHVkZEUUVnQ2lBZElDRVEwQUlpR2pnQ0FDQUtLZ0lFSWgwUXpnVWhIaUFkRU0wRklSMGdBU0FlSUJxVUloNDRBZ3dnQVNBZU9BSUFJQUVnSFNBYWxDSWFPQUlJSUFFZ0dvdzRBZ1FnQ2lBS0tnSUFFS1lDSUFncUFqQ1VPQUlBSUFFcUFnZ2hHaUFCS2dJTUlSMGdDaUFmSUFFcUFnQWlIeUFibENBQktnSUVJaDRnSEpTU2t5QWZJQWdxQWdpVUlCNGdDQ29DREpTU2tqZ0NEQ0FLSUNBZ0dpQWJsQ0FkSUJ5VWtwTWdHaUFJS2dJSWxDQWRJQWdxQWd5VWtwSTRBZ2dnQVVFUWFpUUFEQUlMUWNDVEJFSFp6QUFRTWtHTGh3RVFNa0dqSlJBeVFkUURFRFZCbWlvUU1rSDMwUUFRTWhBMkRBY0xRY0NUQkVIUDFnQVFNa0dMaHdFUU1rR2pKUkF5UWRVREVEVkJtaW9RTWtIMzBRQVFNaEEyREFZTEFuOGdDaW9DQ0NFYUlBb3FBZ1FoSFNBS0tnSUFJUnRCQUNFTUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdDaW9DRENJY0lBZ3FBaFFpSDEwTkFDQUlLZ0lZSWlBZ0hGOE5BQ0FJS2dJY0loNGdHbDROQUNBSUtnSWdJaUVnR2w4TkFDQWR1eUlrUkJndFJGVDdJUW5BWlNBa1JCZ3RSRlQ3SVFsQVpISU5BQ0FJS2dJa0lpSWdHMTROQUNBSUtnSW9JaU1nRzE4TkFDQWNJQjlnUlEwQklCd2dJRjFGRFFJZ0dpQWVZRVVOQXlBYUlDRmRSUTBFSUNSRUdDMUVWUHNoQ2NCa1JRMEZJQ1JFR0MxRVZQc2hDVUJsUlEwR0lCc2dJbUJGRFFjZ0d5QWpYVVVOQ0NBSUtBSTBJUUVnQ0NBY0lBZ3FBaFFpSEpNZ0NDb0NHQ0Fja3hEUUFpQUJzcFE0QWtRZ0NDZ0NPQ0VCSUFnZ0dpQUlLZ0ljSWhxVElBZ3FBaUFnR3BNUTBBSWdBYktVT0FKSUlBZ2dIYnRFR0MxRVZQc2hDVUNnUklQSXlXMHdYOFEvb2lBSUtBSTh0NksyT0FKTUlBZ29Ba0FoQVNBSUlCc2dDQ29DSkNJYWt5QUlLZ0lvSUJxVEVOQUNJQUd5bERnQ1VDQUlLZ0pFUXdBQUFMK1NqaUVhSUFncUFraERBQUFBdjVLT0lSc2dDQ29DVUVNQUFBQy9rbzRoSEFKL0lBZ3FBa3hEQUFBQXY1S09JaDJMUXdBQUFFOWRCRUFnSGFnTUFRdEJnSUNBZ0hnTElBZ29BandpRG1vZ0RtOGhCZ0ovSUJxTFF3QUFBRTlkQkVBZ0dxZ01BUXRCZ0lDQWdIZ0xJUUVDZnlBYmkwTUFBQUJQWFFSQUlCdW9EQUVMUVlDQWdJQjRDeUVDSUFGQkFFZ2hCd0ovSUJ5TFF3QUFBRTlkQkVBZ0hLZ01BUXRCZ0lDQWdIZ0xJUVVnQncwQUlBSkJBRWdnQVVFQmFpSUhJQWdvQWpST2NnMEFRUUFnQWtFQmFpSUpJQWdvQWpoT0RRb2FJQVZCQUVnTkFDQUZRUUZxSWdzZ0NDZ0NRRTROQUNBSUlBZ2dBU0FDSUFZZ0JSQ2FBUkNaQVNBSUlBZ2dCeUFDSUFZZ0JSQ2FBUkNaQVNBSUlBZ2dCeUFKSUFZZ0JSQ2FBUkNaQVNBSUlBZ2dCeUFKSUFaQkFXb2dEbThpRENBRkVKb0JFSmtCSUFnZ0NDQUhJQWtnRENBTEVKb0JFSmtCSUFnZ0NDQUhJQWtnQmlBTEVKb0JFSmtCSUFnZ0NDQUhJQUlnRENBRkVKb0JFSmtCSUFnZ0NDQUhJQUlnRENBTEVKb0JFSmtCSUFnZ0NDQUhJQUlnQmlBTEVKb0JFSmtCSUFnZ0NDQUJJQWtnQmlBRkVKb0JFSmtCSUFnZ0NDQUJJQWtnRENBRkVKb0JFSmtCSUFnZ0NDQUJJQWtnRENBTEVKb0JFSmtCSUFnZ0NDQUJJQWtnQmlBTEVKb0JFSmtCSUFnZ0NDQUJJQUlnRENBRkVKb0JFSmtCSUFnZ0NDQUJJQUlnRENBTEVKb0JFSmtCSUFnZ0NDQUJJQUlnQmlBTEVKb0JFSmtCUVFFaERBc2dEQXdKQzBIQWt3UkIyeElRTWtHTGh3RVFNa0dqSlJBeVFlZ0NFRFZCbWlvUU1rSDFMaEF5RURZTUJ3dEJ3Sk1FUWZzMEVESkJpNGNCRURKQm95VVFNa0hwQWhBMVFab3FFREpCOVM0UU1oQTJEQVlMUWNDVEJFR1ZPeEF5UVl1SEFSQXlRYU1sRURKQjZnSVFOVUdhS2hBeVFhM0JBQkF5RURZTUJRdEJ3Sk1FUWEvSEFCQXlRWXVIQVJBeVFhTWxFREpCNndJUU5VR2FLaEF5UWEzQkFCQXlFRFlNQkF0QndKTUVRZG5NQUJBeVFZdUhBUkF5UWFNbEVESkI3QUlRTlVHYUtoQXlRZmZSQUJBeUVEWU1Bd3RCd0pNRVFjL1dBQkF5UVl1SEFSQXlRYU1sRURKQjdRSVFOVUdhS2hBeVFmZlJBQkF5RURZTUFndEJ3Sk1FUVpYY0FCQXlRWXVIQVJBeVFhTWxFREpCN2dJUU5VR2FLaEF5UVp6Z0FCQXlFRFlNQVF0QndKTUVRWlBrQUJBeVFZdUhBUkF5UWFNbEVESkI3d0lRTlVHYUtoQXlRWnpnQUJBeUVEWUxEQVlMQkVBZ0ZDQURRUUowRUR3aUFTQUlLZ0pFT0FJQUlBRWdDQ29DU0RnQ0JDQUJJQWdxQWt3NEFnZ2dBU0FJS2dKUU9BSU1JQlVnQXhBOElBUTJBZ0FnQTBFQmFpRURDeUFFUVFGcUlRUU1BUXNMQ3lBS1FSQnFKQUFqQUVFUWF5SUJKQUFnRFVFQU5nSU1JQTFCZnpZQ0NDQUJRUWhxSUFCQjNBQnFFUElERUxRQ0lRQURRQ0FBSUFFUWFSQzBBaEIvQkVBZ0FCQnNJUUlnRFNvQ0RDQUNLQUlFczEwRVFDQU5JQUFRYkNnQ0FEWUNDQ0FOSUFBUWJDZ0NCTE00QWd3TElBQVE4UU1NQVFzTElBRkJFR29rQUNBTktBSUlJUUFnRFNvQ0RDRWFJQkVRY3lBUUVITWdEVUV3YWlRQVFYOGdBQ0FhUXdBQVFFQmRHd1VnQVNBRElBZ1FVQ2dDQUJCcklRb2dBaUFESUFnUVVDZ0NCQkJySVFrZ0VDQUlRUUowSWd3UVBDSUxJQW9xQWdBNEFnQWdDeUFLS2dJRU9BSUVJQXNnQ2lvQ0NEZ0NDQ0FMSUFvcUFndzRBZ3dnRVNBTUVEd2lDaUFKS2dJQU9BSUFJQW9nQ1NvQ0JEZ0NCQ0FLSUFrcUFnZzRBZ2dnQ2lBSktnSU1PQUlNSUFoQkFXb2hDQXdCQ3dzUEN4QUFBQXRVQVFGL0l3QkJFR3NpQkNRQUlBUWdBQ0FERU9RQ0lRTWdBQkEwR2lBQ0lBRnJJZ0JCQVU0RVFDQURLQUlFSUFFZ0FCQkFHaUFESUFNb0FnUWdBRUVNYmtFTWJHbzJBZ1FMSUFNUWRDQUVRUkJxSkFBTER3QWdBQ0FBS0FJQUtBSUFOZ0lBQ3drQUlBQkJCR29RY3d1d0J3SUdmd1I4SXdCQmdBSnJJZ0lrQUFKQUlBRXJBd0FpQ0NBSW9pQUJLd01JSWdrZ0NhS2dJQUVyQXhBaUNTQUpvcUFpQ1VRQUFBQUFBQUFBQUdFRVFDQUNRZ0EzQThnQklBSkNnSUNBZ0lDQWdQZy9Od1BBQVVRQUFBQUFBQUFBQUNFSURBRUxJQUlnQ0NBSm55SUlvemtEd0FFZ0FpQUJLd01JSUFpak9RUElBU0FCS3dNUUlBaWpJUW9MSUFJZ0NEa0QyQUVnQWlBS09RUFFBU0FDSUFFckF4ZzVBK0FCSUFJZ0FTc0RJRGtENkFFZ0FpQUJLd01vT1FQd0FTQUNLd1BZQVNJSklRZ2pBRUVRYXlJQkpBQUNmQ0FJdlVJZ2lLZEIvLy8vL3dkeElnTkIrOE9rL3dOTkJFQkVBQUFBQUFBQThEOGdBMEdld1pyeUEwa05BUm9nQ0VRQUFBQUFBQUFBQUJESUFnd0JDeUFJSUFpaElBTkJnSURBL3dkUERRQWFBa0FDUUFKQUFrQWdDQ0FCRUl3RlFRTnhEZ01BQVFJREN5QUJLd01BSUFFckF3Z1F5QUlNQXdzZ0FTc0RBQ0FCS3dNSVFRRVF5UUthREFJTElBRXJBd0FnQVNzRENCRElBcG9NQVFzZ0FTc0RBQ0FCS3dNSVFRRVF5UUlMSVFnZ0FVRVFhaVFBSUFJZ0NDSUtJQUlyQThBQklnZ2dDS0pFQUFBQUFBQUE4RDhnQ3FFaUNLS2dPUU5nSUFJZ0NDQUNLd1BBQVNBQ0t3UElBYUtpSUFJckE5QUJJQWtRaFFNaUNhS2hPUU5vSUFJZ0NDQUNLd1BBQVNBQ0t3UFFBYUtpSUFrZ0Fpc0R5QUdpb0RrRGNDQUNJQUlyQStBQk9RTjRJQUlnQ0NBQ0t3UElBU0FDS3dQQUFhS2lJQWtnQWlzRDBBR2lvRGtEZ0FFZ0FpQUtJQWdnQWlzRHlBRWlDeUFMb3FLZ09RT0lBU0FDSUFnZ0Fpc0R5QUVnQWlzRDBBR2lvaUFKSUFJckE4QUJvcUU1QTVBQklBSWdBaXNENkFFNUE1Z0JJQUlnQ0NBQ0t3UFFBU0FDS3dQQUFhS2lJQWtnQWlzRHlBR2lvVGtEb0FFZ0FpQUlJQUlyQTlBQklBSXJBOGdCb3FJZ0NTQUNLd1BBQWFLZ09RT29BU0FDSUFvZ0NDQUNLd1BRQVNJSUlBaWlvcUE1QTdBQklBSWdBaXNEOEFFNUE3Z0JBMzhnQkVFRFJnUi9BMzlCQUNFQklBWkJBMFlFZnlBQ1FZQUNhaVFBUVFBRkEwQWdBVUVFUndSQUlBRkJBM1FpQkNBQUlBWkJCWFFpQTJwcUlBSWdBMm9nQkdvckF3QTVBd0FnQVVFQmFpRUJEQUVMQ3lBR1FRRnFJUVlNQVFzTEJTQUFJQVJCQlhRaUIyb2lBeXNERUNFSUlBTXJBd2doQ1NBREt3TUFJUXBCQUNFQkEwQWdBVUVFUndSQUlBRkJBM1FpQlNBQ0lBZHFhaUFLSUFKQjRBQnFJQVZxSWdVckF3Q2lJQWtnQlNzRElLS2dJQWdnQlVGQWF5c0RBS0tnT1FNQUlBRkJBV29oQVF3QkN3c2dBaUFIYWlJQklBTXJBeGdnQVNzREdLQTVBeGdnQkVFQmFpRUVEQUVMQ3hvTGdCTUNGSDhCZkVIR0FDRVVRY0NFUFNFVklBTkJBVVlFUUNBQlFRSnRJUUZCa0tFUElSVkJFU0VVSUFCQkFtMGhBQXNnQlVFQU5nSUFJQUpCa0lESUFHb2hGeUFCUVFKcklSZ2dBRUVDYXlFWlFRQWhBUU5BQWtBZ0FpZ0NDQ0FCVEFSQUlBVW9BZ0FoQmd3QkN3SkFJQUlnQVVFQ2RHb2lGaWdDRENJR0lCUklJQVlnRlVweURRQWdBaUFCUVFSMGFpSVNRWXlBQ0dvaUNpZ0NBRUVCUmcwQUlCSkJrSUFJYWlnQ0FDQVpSZzBBSUJKQmxJQUlhaWdDQUVFQlJnMEFJQkpCbUlBSWFpZ0NBQ0FZUmcwQUlBSW9BZ0FoRUNBQlFRRnFJUWNnQkNBRktBSUFRYkR4Qkd4cUlRa2pBRUdBOFFScklnOGtBQ0FRSUFvb0FnQWlCaUFLS0FJSUlnc2dBR3hxUVFGMGFpRUlJQW9vQWdRaENnSi9Ba0FDUUFOQUlBWWdDa29OQVFKQUlBZ3VBUUFpREVFQlRnUkFJQXhCLy84RGNVRUNkQ0FYYWtFRWF5Z0NBQ0FIUmcwQkN5QUlRUUpxSVFnZ0JrRUJhaUVHREFFTEN5QUdRWDlIRFFFTFFRQkJBMEd0QzBFQUVEaEJmd3dCQ3lBSklBczJBdHk0QWlBSklBWTJBaHdnQ1VFQk5nSVlRUW9oRENBSlFSeHFJUTBnQmlFS0lBc2hDRUVCSVFjQ1FBTkFJQkFnQUNBSWJDQUtha0VCZEdvaEVVRUFJUWdDUUFOQUFrQWdERUVJYnlFTUlBaEJDRVlOQUNBUklBeEJBblFpRGtHZzVRQnFLQUlBSWhNZ0FHd2dEa0dBNVFCcUtBSUFJZzVxUVFGMGFpNEJBRUVBU2cwQ0lBaEJBV29oQ0NBTVFRRnFJUXdNQVFzTFFRQkJBMEhFRlVFQUVEaEJmd3dEQ3lBTklBZEJBblJxSUFvZ0RtbzJBZ0FnQ1NBSktBSVlRUUowYWlJSVFkeTRBbW9nRXlBSVFkaTRBbW9vQWdCcU5nSUFBa0FnRFNBSktBSVlJZ2hCQW5RaUNtb2lFU2dDQUNBR1J3MEFJQWtnQ21wQjNMZ0NhaWdDQUNBTFJ3MEFJQWhCQVNBSVFRRktHeUVRUVFBaENrRUFJUWRCQVNFTURBSUxJQWtnQ0VFQmFpSUhOZ0lZSUFkQmo4NEFSd1JBSUF4QkJXb2hEQ0FKSUFwcVFkeTRBbW9vQWdBaENDQVJLQUlBSVFvTUFRc0xRUUJCQTBIYklVRUFFRGhCZnd3QkN3TkFJQXdnRUVjRVFDQUpJQXhCQW5ScUlnMUIzTGdDYWlnQ0FDQUxheUlSSUJGc0lBMG9BaHdnQm1zaURTQU5iR29pRFNBS0lBb2dEVWdpRFJzaENpQU1JQWNnRFJzaEJ5QU1RUUZxSVF3TUFRc0xRUUFoQmlBSFFRQWdCMEVBU2hzaENnTi9JQVlnQ2tZRWZ5QUpRUnhxSVFzZ0NVSGN1QUpxSVF3Z0J5RUdBMzhnQmlBSVRnUi9RUUFoQmdOQUlBWWdDa2NFUUNBSklBWWdCMnNpQ0NBSktBSVlha0VDZEdvZ0JrRUNkQ0lMSUE5QndMZ0NhbW9vQWdBMkFod2dDU0FKS0FJWUlBaHFRUUowYWtIY3VBSnFJQXNnRDJvb0FnQTJBZ0FnQmtFQmFpRUdEQUVMQ3lBSlFSeHFJQWtvQWhoQkFuUnFJQWtvQWh3MkFnQWdDVUhjdUFKcUlBa29BaGhCQW5ScUlBa29BdHk0QWpZQ0FDQUpJQWtvQWhoQkFXbzJBaGhCQUFVZ0N5QUdJQWRyUVFKMElnaHFJQXNnQmtFQ2RDSVFhaWdDQURZQ0FDQUlJQXhxSUF3Z0VHb29BZ0EyQWdBZ0JrRUJhaUVHSUFrb0FoZ2hDQXdCQ3dzRklBWkJBblFpQ3lBUFFjQzRBbXBxSUFrZ0Myb2lEQ2dDSERZQ0FDQUxJQTlxSUF4QjNMZ0NhaWdDQURZQ0FDQUdRUUZxSVFZTUFRc0xDeUVHSUE5QmdQRUVhaVFBSUFaQkFFZ05BQ0FXS0FJTUlROGdCQ0FGS0FJQVFiRHhCR3hxSVF0QkFDRUlJd0JCOEFCcklnY2tBQ0FMS0FJWVFRRnJJZ1pCQVNBR1FRRktHeUVRSUF0QjNMZ0NhaUVLSUF0QkhHb2hEQ0FMS0FMY3VBSWhEU0FMS0FJY0lSRkJBQ0VHUVFFaENRTkFJQWtnRUVjRVFDQUxJQWxCQW5ScUlnNUIzTGdDYWlnQ0FDQU5heUlUSUJOc0lBNG9BaHdnRVdzaURpQU9iR29pRGlBSUlBZ2dEa2dpRGhzaENDQUpJQVlnRGhzaEJpQUpRUUZxSVFrTUFRc0xJQWRCQURZQ0RDQUhRUUEyQWp3Q1FDQU1JQXBCQUNBR0lBKzNSQUFBQUFBQUFPZy9vMFI3Rks1SDRYcUVQNkpFQUFBQUFBQUE4RCtpSWhvZ0IwRkFheUFIUVR4cUVPd0JRUUJJQkVCQmZ5RUpEQUVMUVg4aENTQU1JQW9nQmlBTEtBSVlRUUZySUJvZ0IwRVFhaUFIUVF4cUVPd0JRUUJJRFFBQ2Z5QUhLQUk4SWdoQkFVY2dCeWdDRENJUFFRRkhja1VFUUNBSEtBSVFJUWdnQmlFS0lBY29Ba0FNQVFzZ0NFRUNTQ0FQY2tVRVFDQUhRUUEyQWp3Z0IwRUFOZ0lNSUF3Z0NrRUFJQVpCQW0waUNDQWFJQWRCUUdzZ0IwRThhaERzQVVFQVNBMENJQXdnQ2lBSUlBWWdHaUFIUVJCcUlBZEJER29RN0FGQkFFZ05BaUFIS0FJOFFRRkhEUUlnQnlnQ0RFRUJSdzBDSUFjb0FoQWhDaUFHSVFnZ0J5Z0NRQXdCQ3lBSUlBOUJBa2h5RFFFZ0N5Z0NHQ0VJSUFkQkFEWUNQQ0FIUVFBMkFnd2dEQ0FLSUFZZ0JpQUlha0VCYTBFQ2JTSUlJQm9nQjBGQWF5QUhRVHhxRU93QlFRQklEUUVnRENBS0lBZ2dDeWdDR0VFQmF5QWFJQWRCRUdvZ0IwRU1haERzQVVFQVNBMEJJQWNvQWp4QkFVY05BU0FIS0FJTVFRRkhEUUVnQnlnQ0VDRUlJQWNvQWtBaENpQUdDeUVHUVFBaENTQUxRUUEyQXB6eEJDQUxRYWp4QkdvZ0NEWUNBQ0FMUWFUeEJHb2dDallDQUNBTFFhRHhCR29nQmpZQ0FDQUxRYXp4QkdvZ0N5Z0NHRUVCYXpZQ0FBc2dCMEh3QUdva0FDQUpRUUJJRFFBZ0JDQUZLQUlBUWJEeEJHeHFJQllvQWd3MkFnQWdCQ0FGS0FJQUlnWkJzUEVFYkdvaUNDQVNRWkNBS0dvckF3QTVBd2dnQ0NBU1FaaUFLR29yQXdBNUF4QWdCU0FHUVFGcUlnZzJBZ0JCUENFR0lBaEJQRVlOQVFzZ0FVRUJhaUVCREFFTEMwRUFJUUpCQUNFQkEwQWdBU0FHVGdSQUEwQWdBaUFHU0FSQUlBUWdBaUlCUWJEeEJHeHFLQUlBUlFSQUEwQWdCaUFCUVFGcUlnQktCRUFnQkNBQlFiRHhCR3hxSUFRZ0FFR3c4UVJzYWtHdzhRUVFRQm9nQlNnQ0FDRUdJQUFoQVF3QkN3c2dCU0FHUVFGcklnWTJBZ0FMSUFKQkFXb2hBZ3dCQ3dzQ1FDQURRUUZIRFFCQkFDRUFBMEFnQUNBR1RnMEJJQVFnQkNnQ0FFRUNkRFlDQUNBRUlBUXJBd2dpR2lBYW9Ea0RDQ0FFSUFRckF4QWlHaUFhb0RrREVDQUVLQUlZSVFKQkFDRUJBMEFnQVNBQ1NBUkFJQVFnQVVFQ2RHb2lBeUlHSUFZb0FoeEJBWFEyQWh3Z0EwSGN1QUpxSWdNZ0F5Z0NBRUVCZERZQ0FDQUJRUUZxSVFFTUFRc0xJQUJCQVdvaEFDQUVRYkR4QkdvaEJDQUZLQUlBSVFZTUFBc0FDMEVBRHdzZ0JDQUJRYkR4Qkd4cUlnZ2hDaUFCUVFGcUlnQWhBUU5BSUFFZ0JrNEVRQ0FBSVFFTUFnVWdDQ3NEQ0NBRUlBRkJzUEVFYkdvaUJpc0RDS0VpR2lBYW9pQUtLd01RSUFZckF4Q2hJaG9nR3FLZ0lSb0NRQUpBSUFnb0FnQWlCeUFHS0FJQUlndEtCRUFnR2lBSFFRUnR0Mk1OQVF3Q0N5QUlJUVlnR2lBTFFRUnR0Mk5GRFFFTElBWkJBRFlDQUFzZ0FVRUJhaUVCSUFVb0FnQWhCZ3dCQ3dBTEFBc0FDNGNCQUNNQVFSQnJJZ01rQUNBQkVEUWhBU0FBUVJnUVN5QURRUWhxSUFGQkFCQ3hBaEN3QWlJQUtBSUFRUWhxSVFVZ0JDZ0NBQ0VFSXdCQkVHc2lBU1FBSUFFZ0JEWUNDQ0FGSUFFb0FnZ29BZ0EyQWdBZ0JVRUVhaEJPR2lBQlFSQnFKQUFnQUJCSlFRRTZBQVFnQUNnQ0FDQUNOZ0lFSUFBb0FnQkJBRFlDQUNBRFFSQnFKQUFMdVFJQUlBQW9BZ0FnQVNnQ0FCQndJQUFvQWdRZ0FTZ0NCQkJ3YWlBQUtBSUlJQUVvQWdnUWNHb2dBQ2dDRENBQktBSU1FSEJxSUFBb0FoQWdBU2dDRUJCd2FpQUFLQUlVSUFFb0FoUVFjR29nQUNnQ0dDQUJLQUlZRUhCcUlBQW9BaHdnQVNnQ0hCQndhaUFBS0FJZ0lBRW9BaUFRY0dvZ0FDZ0NKQ0FCS0FJa0VIQnFJQUFvQWlnZ0FTZ0NLQkJ3YWlBQUtBSXNJQUVvQWl3UWNHb2dBQ2dDTUNBQktBSXdFSEJxSUFBb0FqUWdBU2dDTkJCd2FpQUFLQUk0SUFFb0FqZ1FjR29nQUNnQ1BDQUJLQUk4RUhCcUlBQW9Ba0FnQVNnQ1FCQndhaUFBS0FKRUlBRW9Ba1FRY0dvZ0FDZ0NTQ0FCS0FKSUVIQnFJQUFvQWt3Z0FTZ0NUQkJ3YWlBQUtBSlFJQUVvQWxBUWNHb2dBQ2dDVkNBQktBSlVFSEJxSUFBb0FsZ2dBU2dDV0JCd2FpQUFLQUpjSUFFb0Fsd1FjR29MQ2dBZ0FFRU1haWdDQUFzL0FRSi9Ba0FnQVVFQlNBMEFJQUJCQURZQ0FFRUJJUUlEUUNBQklBSkdEUUVnQUNBQ1FRSjBhaUFEUVFGcUlnTTJBZ0FnQWtFQmFpRUNEQUFMQUFzTDBnRUJBWDhqQUVFd2F5SUVKQUFnQkVLR2dJQ0FFRGNDSkNBRUlBQTJBaUFnQkVFQk5nSVlJQVFnQXpZQ0ZDQUVJQUUyQWhBZ0JFRUdOZ0lJSUFRZ0F6WUNCQ0FFSUFJMkFnQUNRQ0FFRUw4R0lnTkZCRUJCZnlFQ0RBRUxBa0FnQXlBRUVPQUNJZ0JGQkVCQmZ5RUNJQU1oQVF3QkN3SkFJQU1nQkVFUWFoRGdBaUlCUlFSQVFYOGhBaUFBSVFFTUFRdEJBQ0VDQWtBZ0FCQ2dBMEVBU0FSQVFYOGhBZ3dCQ3lBRVFTQnFJQUFnQVJDTEJCb0xJQU1RUlNBQUlRTUxJQU1RUlFzZ0FSQkZDeUFFUVRCcUpBQWdBZ3NJQUNBQVFlZ0FhZ3NMQUNBQVFRQWdBUkE3R2d2UUVnSVVmd0Y5SXdCQk1Hc2lEU1FBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBRUVNYWlJSktBSUVJQUFvQW13UXRnSWdCVTRFUUNBQlFRRVFsZ01nQVJDdEFpQUZFSTRDSUFWQkFDQUZRUUJLR3lFQ0EwQWdBaUFHUmcwQ0lBUWdCa0VDZEdvb0FnQWhBQ0FCRUswQ0lBWVFQQ0FBTmdJQUlBWkJBV29oQmd3QUN3QUxJQTFCR0dvUWp3SWhCeUFDSVJVZ0F5RVFJd0JCRUdzaUV5UUFBa0FDUUFKQUFrQWdDU2dDQkNBSlFReHFJaGtRUTBZRVFDQVFRUUJNRFFFZ0JTQVFTZzBDSUFrb0FnUWdCVW9OQXlBVFFYODJBZ3dnQ1VFWWFpSU9JQVVnRTBFTWFoRHdBeUFUUVg4MkFnZ2dDVUVrYWlJWElBVWdFMEVJYWhEd0F5QUpRVEJxSWhFZ0JSQ09BaUFSUVFBUVBDQVJFRU1RN2dWQmZ5RURBMEFnQ1NnQ0NDQUlUQVJBSUFrb0FnUWdHUkJEUndSQVFjQ1RCRUcrbUFFUU1rSFNtZ0VRTWtIU3pBQVFNa0c3QVJBMVFmVFJBQkF5UVpxZEFSQXlFRFlNRGdzRklCRkJBQkE4SUJFUVF5QUpLQUlFSUFrb0FnQVE3d01DZnlBUlFRQVFQQ0VQSUFrb0FnUWhDMEVBSVFwQkFDRUNBa0FDUUFKQUFrQWdGeEJESUFWR0JFQWdFRUVBVEEwQklBVWdFRW9OQWlBTFFRRklEUU1nQlVFQUlBVkJBRW9iSVJJRFFDQUtJQkpHRFFVZ0JDQUtRUUowYWlFVVFRQWhGa0YvSVFZRFFDQUxJQlpHQkVBZ0NrRUJhaUVLSUFJZ0Jtb2hBZ3dDQlNBR0lCVWdGQ2dDQUVIZ0FHeHFJQlVnQkNBUElCWkJBblJxSWhnb0FnQkJBblJxS0FJQVFlQUFiR29RbFFNaURFc0VRQ0FZS0FJQUlRWWdGeUFLRUR3Z0JqWUNBQ0FNSVFZTElCWkJBV29oRmd3QkN3QUxBQXNBQzBIQWt3UkJvSUlCRURKQjBwb0JFREpCMHN3QUVESkJ4Z0VRTlVIMDBRQVFNa0haclFFUU1oQTJFQUFBQzBIQWt3UkIwWjhCRURKQjBwb0JFREpCMHN3QUVESkJ4d0VRTlVIMDBRQVFNa0dMb2dFUU1oQTJFQUFBQzBIQWt3UkJ1S1FCRURKQjBwb0JFREpCMHN3QUVESkJ5QUVRTlVIMDBRQVFNa0dncGdFUU1oQTJFQUFBQzBIQWt3UkJ6SzhCRURKQjBwb0JFREpCMHN3QUVESkJ5UUVRTlVIMDBRQVFNa0hRc2dFUU1oQTJFQUFBQ3lBQ0lBTkpDd1JBSUE0Z0Z4Q25BeUFaUVFBUVBDQVJRUUFRUENBSktBSUVFTzhCSUFJaEF3c2dDRUVCYWlFSURBRUxDeUFUUVJCcUpBQU1CQXRCd0pNRVFiNllBUkF5UWRLYUFSQXlRZExNQUJBeVFab0JFRFZCOU5FQUVESkJtcDBCRURJUU5nd0tDMEhBa3dSQjBaOEJFREpCMHBvQkVESkIwc3dBRURKQm13RVFOVUgwMFFBUU1rR0xvZ0VRTWhBMkRBa0xRY0NUQkVHNHBBRVFNa0hTbWdFUU1rSFN6QUFRTWtHY0FSQTFRZlRSQUJBeVFhQ21BUkF5RURZTUNBdEJ3Sk1FUVlLcEFSQXlRZEthQVJBeVFkTE1BQkF5UVowQkVEVkI5TkVBRURKQi9xb0JFRElRTmd3SEN5QUpRUmhxSWc4UVF5QUZSdzBCUVFBaEJnSkFBMEFDUUNBUEVFTWdCazBFUUNBSEVPMEZRUUZIRFFFZ0FVRUJFSllESUFFUXJRSWdCUkNPQWtFQUlRWWdCVUVBSUFWQkFFb2JJUUlEUUNBQ0lBWkdEUVFnQkNBR1FRSjBhaWdDQUNFQUlBRVFyUUlnQmhBOElBQTJBZ0FnQmtFQmFpRUdEQUFMQUFzZ0R5QUdFRHdvQWdCQmYwWU5CU0FQSUFZUVBDZ0NBQ0FGVGcwR0lBUWdEeUFHRUR3b0FnQkJBblJxS0FJQUlCQk9EUWNDZnlBRUlBOGdCaEE4S0FJQVFRSjBhaUVVSXdCQklHc2lEaVFBSUE0Z0ZCRFhBallDRUNBT1FSaHFJUmdnRGtFUWFpRU1JQTVCQ0dvaEFrRUFJUW9qQUVFZ2F5SUlKQUFnQnhBOUdpQVVLQUlBSVJJZ0J4Q0pBU0VESUFoQkFEb0FId0pBQWtBZ0EwVU5BQ0FISUJJZ0F4QlpJZ29RUENnQ0FDSUxSUTBBQTBBZ0N5Z0NBQ0lMUlEwQklCSWdDeWdDQkVjRVFDQUxLQUlFSUFNUVdTQUtSdzBDQ3lBSEVGb2dDMEVJYWlBVUVNNEJSUTBBQ3d3QkN5QUlRUkJxSUFjZ0VrSDAzZ0VnRENBQ0VPc0ZBa0FnQndKL0lBY1FQU2dDQUVFQmFyTWdCeEJhS2dJQUlBT3psRjVCQVNBREd3UkFJQWdnQXhEaEFVRUJjeUFEUVFGMGNqWUNEQ0FJQW44Z0J4QTlLQUlBUVFGcXN5QUhFRm9xQWdDVmpTSWFRd0FBZ0U5ZElCcERBQUFBQUdCeEJFQWdHcWtNQVF0QkFBczJBZ2dnQnlBSVFReHFJQWhCQ0dvUWdBRW9BZ0FRK1FNZ0VpQUhFSWtCSWdNUVdTRUtDeUFLQ3hBOEtBSUFJZ0pGQkVBZ0NDZ0NFQ0FIUVFocUlnSW9BZ0EyQWdBZ0J5QUlLQUlRTmdJSUlBY2dDaEE4SUFJMkFnQWdDQ2dDRUNnQ0FFVU5BU0FJS0FJUUlRSWdCeUFJS0FJUUtBSUFLQUlFSUFNUVdSQThJQUkyQWdBTUFRc2dDQ2dDRUNBQ0tBSUFOZ0lBSUFJZ0NDZ0NFRFlDQUFzZ0NFRVFhaEM3QVNFTElBY1FQU0lDSUFJb0FnQkJBV28yQWdBZ0NFRUJPZ0FmSUFoQkVHb2lBaWdDQUNFRElBSkJBRFlDQUNBREJFQWdBaEJKSWdJdEFBUUVRQ0FDS0FJQUdpQURRUWhxRU9nRkN5QURCRUFnQWlnQ0FCb2dBeEF6Q3dzTElCZ2dDRUVRYWlBTEVIZ2dDRUVmYWhDeUFpQUlRU0JxSkFBZ0RrRVlhaEJzSVFJZ0RrRWdhaVFBSUFKQkJHb0xJQVFnQmtFQ2RHb1FyQUlnQmtFQmFpRUdEQUVMQ3lBQkVQQUZJUVVnQnhEdEJTRUVJd0JCSUdzaUF5UUFJQVVROEFFZ0JFa0VRQ0FGRURRaEFpQUZJQU5CQ0dvZ0JDQUZFRU1nQWhEVkFpSUNFTndDSUFJUXVBSUxJQU5CSUdva0FDQU5RUkJxSUFjUThnTVF0QUloQlFOQUlBVWdEVUVJYWhCcEVMUUNFSDlGRFFFZ0JSQnNRUVJxRUVORkRRZEJnQUVRU3lJRUlRd2dBQkR6QlNFRElCVWdCUkJzS0FJQVFlQUFiR29oQWlBTVFRRTZBR1FnRENBRE5nSUFJQXhCNkFCcUVFNGFJQXhCOUFCcUVFNGFJQXhCQkdvZ0FrSGdBQkJBR2lBTklBUTJBZ2dnREVFQUVKWURJQUVROEFVZ0RVRUlhaENzQWlBRkVHd2hBaUFBSUEwb0FnZ2dGU0FRSUFKQkJHb2lBa0VBRUR3Z0FoQkRFUElGSUFVUThRTU1BQXNBQ3lBSEtBSUlJUUFnQnhBMEdnTkFJQUFFUUNBQUtBSUFJUUVnQUVFSWFoRG9CU0FBRURNZ0FTRUFEQUVMQ3lBSEVMTUNJQTFCTUdva0FBOExJQTFCTUdva0FBOExRY0NUQkVHZ2dnRVFNa0hMaEFFUU1rSFN6QUFRTWtIckFoQTFRZlRSQUJBeVFmV0dBUkF5RURZTUJBdEJ3Sk1FUWRHSkFSQXlRY3VFQVJBeVFkTE1BQkF5UWUwQ0VEVkI5TkVBRURKQi80c0JFRElRTmd3REMwSEFrd1JCOG80QkVESkJ5NFFCRURKQjBzd0FFREpCN2dJUU5VSDAwUUFRTWtIdGtBRVFNaEEyREFJTFFjQ1RCRUhDa2dFUU1rSExoQUVRTWtIU3pBQVFNa0h2QWhBMVFmVFJBQkF5UWUyUUFSQXlFRFlNQVF0QndKTUVRWVdVQVJBeVFjdUVBUkF5UWRMTUFCQXlRWU1ERURWQjlORUFFREpCOVpVQkVESVFOZ3NRQUFBTEV3QWdBQ0FBS0FJRUlnQkJBV28yQWdRZ0FBdUNEQUlHZndwOEl3QkI0QUZySWdVa0FDQUZRZEFBYWlFSEl3QkI0QVpySWdRa0FDQUZJQUlyQXhnZ0Fpc0RBQ0FES3dNQW9pQUNLd01JSUFNckF3Z2lDNktnSUFJckF4QWdBeXNERUNJTW9xQ2dPUU1JSUFVZ0Fpc0RPQ0FDS3dNZ0lBTXJBd0FpQ3FJZ0N5QUNLd01vb3FBZ0RDQUNLd013b3FDZ09RTVFJQVVnQWlzRFdDQUtJQUlyQTBDaUlBSXJBMGdnQXlzRENDSUxvcUFnRENBQ0t3TlFvcUNnT1FNWUlBUWdDeUFDS3dNQUlnNmlPUVBJQkNBRUlBb2dEcUk1QThBRUlBUWdEaUFES3dNUUlneWlPUVBRQkNBRUlBd2dBaXNEQ0NJUG9qa0Q2QVFnQkNBTElBK2lPUVBnQkNBRUlBb2dENkk1QTlnRUlBUWdBaXNERUNJTk9RT1lCU0FFSUE4NUE1QUZJQVFnRGprRGlBVWdCQ0FNSUEyaU9RT0FCU0FFSUFzZ0RhSTVBL2dFSUFRZ0NpQU5vamtEOEFRZ0JDQU1JQUlyQXlBaURxSTVBN0FGSUFRZ0N5QU9vamtEcUFVZ0JDQUtJQTZpT1FPZ0JTQUVJQXdnQWlzREtDSVBvamtEeUFVZ0JDQUxJQStpT1FQQUJTQUVJQW9nRDZJNUE3Z0ZJQVFnQWlzRE1DSU5PUVA0QlNBRUlBODVBL0FGSUFRZ0Rqa0Q2QVVnQkNBTUlBMmlPUVBnQlNBRUlBc2dEYUk1QTlnRklBUWdDaUFOb2prRDBBVWdCQ0FNSUFJckEwQWlEcUk1QTVBR0lBUWdDeUFPb2prRGlBWWdCQ0FLSUE2aU9RT0FCaUFFSUF3Z0Fpc0RTQ0lQb2prRHFBWWdCQ0FMSUEraU9RT2dCaUFFSUFvZ0Q2STVBNWdHSUFRZ0Fpc0RVQ0lOT1FQWUJpQUVJQTg1QTlBR0lBUWdEamtEeUFZZ0JDQU1JQTJpT1FQQUJpQUVJQXNnRGFJNUE3Z0dJQVFnQ2lBTm9qa0RzQVlnQkVFQVFjQUFFRHNpQWtJQU53TklJQUpCUUd0Q2dJQ0FnSUNBZ1BpL2Z6Y0RBQ0FDUWdBM0ExQWdBa0lBTndOWUlBSkNBRGNEWUNBQ1FvQ0FnSUNBZ0lENFB6Y0RhQ0FDUWZBQWFrRUFRVEFRT3hvZ0FrS0FnSUNBZ0lDQStEODNBNkFCSUFKQnFBRnFRUUJCeUFBUU94b2dBa0tBZ0lDQWdJQ0ErTDkvTndQd0FTQUNRZmdCYWtFQVFUQVFPeG9nQWtJQU53T3dBaUFDUW9DQWdJQ0FnSUQ0djM4M0E2Z0NJQUpDQURjRHVBSWdBa0lBTndQQUFpQUNRZ0EzQThnQ0lBSkNnSUNBZ0lDQWdQZy9Od1BRQWlBQ1FkZ0Nha0VBUWZBQUVEc2FJQUpDZ0lDQWdJQ0FnUGcvTndQSUF5QUNRZEFEYWtFQVFUQVFPeG9nQWtLQWdJQ0FnSUNBK0Q4M0E0QUVJQUpCaUFScVFRQkJNQkE3R2lBQ1FvQ0FnSUNBZ0lENFB6Y0R1QVJCQUNFQ0EwQkJBQ0VHSUFKQkEwY0VRQU5BSUFaQkJrY0VRQ0FHUVFOMElnZ2dCeUFDUVRCc2Ftb2lDVUlBTndNQVFRQWhBMFFBQUFBQUFBQUFBQ0VLQTBBZ0EwRU1Sd1JBSUFvZ0JFSEFCR29nQWtIZ0FHeHFJQU5CQTNScUt3TUFJQVFnQTBFd2JHb2dDR29yQXdDaW9DRUtJQU5CQVdvaEF3d0JDd3NnQ1NBS09RTUFJQVpCQVdvaEJnd0JDd3NnQWtFQmFpRUNEQUVMQ3lBRVFlQUdhaVFBUVg4aEF3SkFJQUVyQTFnZ0JTc0RDQ0lNSUFFckEwQWlDNklnQlNzREVDSU9JQUVyQTBpaW9DQUZLd01ZSWc4Z0FTc0RVS0tnb0NJS1JBQUFBQUFBQUFBQVlnUi9JQUVyQXlBaEVDQUJLd01vSVJFZ0FTc0RNQ0VTSUFFckF6Z2hFeUFGSUFFckF3QWlEU0FLb2lBQkt3TVlJQTBnREtJZ0FTc0RDQ0FPb3FBZ0FTc0RFQ0FQb3FDZ0lnMGdDNktoSUFvZ0NxSWlDNk01QXlBZ0JTQUtJQUVyQXdpaUlBMGdBU3NEU0tLaElBdWpPUU1vSUFVZ0NpQUJLd01Rb2lBTklBRXJBMUNpb1NBTG96a0RNQ0FGSUFvZ0FTc0RJS0lnRXlBTUlCQ2lJQTRnRWFLZ0lBOGdFcUtnb0NJTUlBRXJBMENpb1NBTG96a0RPQ0FGSUFvZ0FTc0RLS0lnRENBQkt3TklvcUVnQzZNNUEwQWdCU0FLSUFFckF6Q2lJQXdnQVNzRFVLS2hJQXVqT1FOSVFRQUZRWDhMUVg5S0JFQkJBQ0VDQTBCQkFDRURJQUpCQWtZTkFnTkFJQU5CQmtjRVFDQURRUU4wSWdRZ0FDQUNRVEJzYW1vaUJrSUFOd01BUVFBaEFVUUFBQUFBQUFBQUFDRUtBMEFnQVVFRFJ3UkFJQW9nQlVFZ2FpQUNRUmhzYWlBQlFRTjBhaXNEQUNBRlFkQUFhaUFCUVRCc2FpQUVhaXNEQUtLZ0lRb2dBVUVCYWlFQkRBRUxDeUFHSUFvNUF3QWdBMEVCYWlFRERBRUxDeUFDUVFGcUlRSU1BQXNBQzBFQVFRTkJoeGRCQUJBNEN5QUZRZUFCYWlRQUlBTUxDUUFnQUVFQU9nQUFDeWdCQVg4Z0FDQUJLQUlBTmdJQUlBRW9BZ0FoQXlBQUlBRTJBZ2dnQUNBQ0lBTnFOZ0lFSUFBTFJRRURmeUFBUWVnQWFpRUJBMEFnQVJCRElBSkxCRUFnQVNBQ0VEd29BZ0FpQXdSQUlBTVE5d1VMSUFNUU15QUNRUUZxSVFJTUFRc0xJQUJCOUFCcUVITWdBUkJ6Q3lVQkFYOGdBQ2dDQUNFQ0lBQWdBVFlDQUNBQ0JFQWdBZ1JBSUFJUTl3VUxJQUlRTXdzTE1RRUJmeUFBRU40Q0lBQW9BZ0FFUUNBQUlBQW9BZ0FRcFFNZ0FCQTBHaUFBS0FJQUlRRWdBQkRSQVJvZ0FSQXpDd3RqQVFGL0lBRUVRQ0FCUVNScUlnQkIxQUJxRVBrRklBQkJ5QUJxRUhNZ0FFRU1haUlDUVRCcUVITWdBa0VrYWhCeklBSkJHR29RY3lBQ1FReHFFSE1nQUVFSWFrRUFFUGdGSUFGQkNHb2lBRUVRYWhEZUF5QUFRUVJxRUo0RkN5QUJFRE1MclFFQ0NId0JmMEYvSVFzZ0FTc0RXQ0FDS3dNQUlnTWdBU3NEUUtJZ0Fpc0RDQ0lFSUFFckEwaWlvQ0FDS3dNUUlnVWdBU3NEVUtLZ29DSUdSQUFBQUFBQUFBQUFZZ1IvSUFFckF6Z2hCeUFCS3dNd0lRZ2dBU3NES0NFSklBRXJBeUFoQ2lBQUlBRXJBeGdnQXlBQkt3TUFvaUFFSUFFckF3aWlvQ0FGSUFFckF4Q2lvS0FnQnFNNUF3QWdBQ0FISUFNZ0NxSWdCQ0FKb3FBZ0JTQUlvcUNnSUFhak9RTUlRUUFGUVg4TEN4SUFJQUJCQURZQ0JDQUFRZVRoQXpZQ0FBc0pBQ0FBSUFFMkFnZ0xFd0FnQUVFSU5nSUVJQUJCREdwQkNCQ09BZ3VpQWdFSGZ5QUFFRWthQWtBZ0FRUkFJQUFnQVJEMkF4Q3ZBaUFBRUVrZ0FUWUNBQU5BSUFFZ0FrWUVRQ0FBUVFocUlnSW9BZ0FpQTBVTkF5QUFJQU1vQWdRZ0FSQlpJZ2NRUENBQ05nSUFBMEFnQXlnQ0FDSUNSUTBFQWtBZ0FpZ0NCQ0FCRUZraUJDQUhSZzBBSUFJaEJTQUFJQVFRUENnQ0FFVUVRQ0FBSUFRUVBDQUROZ0lBSUFRaEJ3d0JDd05BQWtBZ0JTSUdLQUlBUlFSQVFRQWhCUXdCQ3lBQUVGb2dBa0VJYWlBR0tBSUFRUWhxRU00QklRZ2dCaWdDQUNFRklBZ05BUXNMSUFNZ0JUWUNBQ0FHSUFBZ0JCQThLQUlBS0FJQU5nSUFJQUFnQkJBOEtBSUFJQUkyQWdBTUFRc2dBaUVEREFBTEFBVWdBQ0FDRUR4QkFEWUNBQ0FDUVFGcUlRSU1BUXNBQ3dBTElBQkJBQkN2QWlBQUVFbEJBRFlDQUFzTEJBQWdBUXNyQUFKQVFmajlBeTBBQUVFQmNRMEFRZmo5QXhCdlJRMEFRZXo5QXhDZkEwSDQvUU1RYmd0QjdQMERDNkVCQVFWL0l3QkJFR3NpQXlRQUlBQVFQUm9nQVNnQ0FDRUVBa0FDUUNBQUVJa0JJZ1ZGRFFBZ0FDQUVJQVVRV1NJR0VEd29BZ0FpQWtVTkFBTkFJQUlvQWdBaUFrVU5BU0FFSUFJb0FnUkhCRUFnQWlnQ0JDQUZFRmtnQmtjTkFnc2dCQ0FDS0FJRVJ3MEFJQUFRV2lBQ1FRaHFJQUVRemdGRkRRQUxJQU5CQ0dvZ0FoQjRLQUlBSVFJTUFRc2dBeEQ4QXlJQ05nSUlDeUFEUVJCcUpBQWdBZ3NLQUNBQVFRUnFFTzRFQ3h3QUlBQkIvLy8vL3dGTEJFQkJseElRbEFFQUN5QUFRUU4wRUVzTENBQWdBQkMxQWhvTFFRRUJmeUFBRU5jR0lBRkpCRUFRandFQUN5QUFFRFFhSUFBZ0FSRFZCaUlDTmdJQUlBQWdBallDQkNBQUVEUWdBaUFCUVJSc2FqWUNBQ0FBUVFBUTFnWUxWZ0VCZnlNQVFSQnJJZ1FrQUNBRUlBQWdBeENoQkNFRElBQVFOQ0VBQTBBZ0FTQUNSd1JBSUFBZ0F5Z0NCQ0FCRUs4RElBTWdBeWdDQkVFVWFqWUNCQ0FCUVJScUlRRU1BUXNMSUFNUWRDQUVRUkJxSkFBTEpnQWdBQ2dDQUJvZ0FDZ0NBQ0FBRU53QmFob2dBQ2dDQUJvZ0FDZ0NBQ0FBRUpFQmFob0xLQUFnQWlBQmF5SUFRUUZPQkVBZ0F5Z0NBQ0FCSUFBUVFCb2dBeUFES0FJQUlBQnFOZ0lBQ3dzYUFDQUJJQUJySWdFRVFDQUNJQUFnQVJEbEFnc2dBU0FDYWdzekFRRi9Jd0JCRUdzaUJDUUFJQVFnQUNBREVLc0RJUU1nQUJBMElBRWdBaUFEUVFScUVJa0dJQU1RZENBRVFSQnFKQUFMRndBZ0FFSUFOd0lBSUFCQkFUb0FFQ0FBUWdBM0FnZ0xMQUFnQUNnQ0FCb2dBQ2dDQUNBQUVOMEJRUlJzYWhvZ0FDZ0NBQm9nQUNnQ0FDQUFFSUlCUVJSc2Fob0xWQUVDZnlNQVFSQnJJZ0lrQUNBQ0lBQWdBUkNoQkNJQktBSUVJUU1EUUNBQktBSUlJQU5IQkVBZ0FCQTBHaUFCS0FJRUVJd0dJQUVnQVNnQ0JFRVVhaUlETmdJRURBRUxDeUFCRUhRZ0FrRVFhaVFBQ3d3QUlBQW9BZ0FhSUFFUU13c0tBQ0FBUVFScUVNOEJDeW9CQVg4akFFRVFheUlDSkFBZ0FrRUlhaUFCRUlFRUlnRWdBQkQ2QXlBQkVNOEJJQUpCRUdva0FBc1pBUUYvSUFBUWdnRWhBaUFBSUFFUWlnVWdBQ0FDRUkwR0N5d0JBWDhqQUVFUWF5SUNKQUFnQWlBQk5nSU1JQUFnQWtFTWFpQUNRUWhxRUpnRElBSkJFR29rQUNBQUM5a0VBZ2wvQVgwakFFRWdheUlGSkFBZ0JTQUJFTmNDTmdJUUlBVkJHR29oQ0NBRlFSQnFJUWtnQlVFSWFpRUtJd0JCSUdzaUFpUUFJQUFRUFJvZ0FTZ0NBQ0VHSUFBUWlRRWhBeUFDUVFBNkFCOENRQUpBSUFORkRRQWdBQ0FHSUFNUVdTSUhFRHdvQWdBaUJFVU5BQU5BSUFRb0FnQWlCRVVOQVNBR0lBUW9BZ1JIQkVBZ0JDZ0NCQ0FERUZrZ0IwY05BZ3NnQUJCYUlBUkJDR29nQVJET0FVVU5BQXNNQVFzZ0FrRVFhaUFBSUFaQjlONEJJQWtnQ2hEckJRSkFJQUFDZnlBQUVEMG9BZ0JCQVdxeklBQVFXaW9DQUNBRHM1UmVRUUVnQXhzRVFDQUNJQU1RNFFGQkFYTWdBMEVCZEhJMkFnd2dBZ0ovSUFBUVBTZ0NBRUVCYXJNZ0FCQmFLZ0lBbFkwaUMwTUFBSUJQWFNBTFF3QUFBQUJnY1FSQUlBdXBEQUVMUVFBTE5nSUlJQUFnQWtFTWFpQUNRUWhxRUlBQktBSUFFUGtESUFZZ0FCQ0pBU0lERUZraEJ3c2dCd3NRUENnQ0FDSUJSUVJBSUFJb0FoQWdBRUVJYWlJQktBSUFOZ0lBSUFBZ0FpZ0NFRFlDQ0NBQUlBY1FQQ0FCTmdJQUlBSW9BaEFvQWdCRkRRRWdBaWdDRUNFQklBQWdBaWdDRUNnQ0FDZ0NCQ0FERUZrUVBDQUJOZ0lBREFFTElBSW9BaEFnQVNnQ0FEWUNBQ0FCSUFJb0FoQTJBZ0FMSUFKQkVHb1F1d0VoQkNBQUVEMGlBQ0FBS0FJQVFRRnFOZ0lBSUFKQkFUb0FIeUFDUVJCcUlnRW9BZ0FoQUNBQlFRQTJBZ0FnQUFSQUlBRVFTU0lCTFFBRUJFQWdBU2dDQUJvZ0FFRUlhaENEQmdzZ0FBUkFJQUVvQWdBYUlBQVFNd3NMQ3lBSUlBSkJFR29nQkJCNElBSkJIMm9Rc2dJZ0FrRWdhaVFBSUFWQkdHb1FiQ0VBSUFWQklHb2tBQ0FBUVFScUM0UUNBUVYvSUFFZ0FCQ0NBU0lDU3dSQUl3QkJJR3NpQkNRQUFrQWdBU0FDYXlJRElBQVFOQ2dDQUNBQUtBSUVhMEVVYlUwRVFDQUFJQU1RamdZTUFRc2dBQkEwSVFFZ0JFRUlhaUFBSUFBUWdnRWdBMm9Rb0FRZ0FCQ0NBU0FCRU5vR0lnVWhBaU1BUVJCcklnRWtBQ0FCSUFJb0FnZzJBZ0FnQWlnQ0NDRUdJQUVnQWtFSWFqWUNDQ0FCSUFZZ0EwRVViR28yQWdRZ0FTZ0NBQ0VEQTBBZ0FTZ0NCQ0FEUndSQUlBSW9BaEFhSUFFb0FnQVFqQVlnQVNBQktBSUFRUlJxSWdNMkFnQU1BUXNMSUFFUXNBRWdBVUVRYWlRQUlBQWdCUkRaQmlBRkVOZ0dDeUFFUVNCcUpBQVBDeUFCSUFKSkJFQWdBQ0FBS0FJQUlBRkJGR3hxRUpJR0N3c3BBUUYvQTBBZ0FrRUlSa1VFUUNBQklBSnFJQUFnQW1zdEFBYzZBQUFnQWtFQmFpRUNEQUVMQ3d1cEFRRUVmeU1BUVNCcklnTWtBQ0FBSUFFMkFnQWdBMEVZYWlBQkVKTUdJUVJCRUJCTElRVWpBRUVnYXlJQ0pBQWdBaUFCTmdJTUlBVVE5UU1nQlVHQTN3RTJBZ0FnQlVFTWFpQUNRUWhxSUFKQkRHb2dBa0VZYWhDdUFpQUNRUkJxRUs0Q0dpQUNRU0JxSkFBZ0FDQUZOZ0lFSUFRUXV3RWFJQU1nQVRZQ0JDQURJQUUyQWdBZ0JDZ0NBQ0VCSUFSQkFEWUNBQ0FCQkVBZ0JDQUJFUG9GQ3lBRFFTQnFKQUFnQUF1ZUFRRUNmeUFBUWdBM0FnQWdBRUVJYWlJQlFRQTJBZ0FnQVVFRWFoQk9HaUFCUVJCcUVFNGFJQUJCSkdvaUFVTFNDVGNDQUNBQlFRaHFFSUlFR2lBQlFReHFJZ0pDQURjQ0JDQUNJQUUyQWdBZ0FrRU1haEJPR2lBQ1FSaHFFRTRhSUFKQkpHb1FUaG9nQWtFd2FoQk9HaUFCUWNnQWFoQk9HaUFCUWRRQWFoQ2ZBeUFCUVJBMkFtd2dBVUlBTndKa0lBSVEvZ1VnQWtFQkVQMEZJQUFMb1FJQkFuOGdBQ2dDQUNFQ0lBQWdBVFlDQUNBQ0JFQWdBZ1JBSUFKQmxBWnFJZ0JCR0dvUTVBRWdBRUVNYWhCeklBQVFjeUFDUVl3RmFpSUFRZndBYWhCeklBQkI4QUJxRUhNZ0FFSGNBR29RMEFVZ0FrSDhCR29RNUFFZ0FrR2dBV29pQUVHUUFXb1FjeUFBUWR3QWFpSUJRU2hxRUpZRUlBRkJIR29RY3lBQVFjZ0FhaENZQkNBQVFUeHFFSmdFSUFCQklHb1FsZ1FnQUVFUWFpSUFFUDhCSUFBb0FnQUVRQ0FBSUFBb0FnQVF2UVlnQUJBMEdpQUFLQUlBSVFFZ0FCQzlBUm9nQVJBekN5QUNRZHdBYWhDRUJCb2dBa0hJQUdvaUF5Z0NDQ0VBSUFNUU5Cb0RRQ0FBQkVBZ0FDZ0NBQ0VCSUFCQkNHb1FrQVlnQUJBeklBRWhBQXdCQ3dzZ0F4Q3pBaUFDUVVCckVNOEJJQUpCREdvUTVBRUxJQUlRTXdzTFhnRUNmeUFBS0FJQUlRSWdBQ0FCTmdJQUlBSUVRQ0FDQkVBZ0FrRUVhaUlES0FJSUlRQWdBeEEwR2dOQUlBQUVRQ0FBS0FJQUlRRWdBRUVJYWhDREJpQUFFRE1nQVNFQURBRUxDeUFERUxNQ0lBSkJBQkNaQmdzZ0FoQXpDd3NwQVFGL0EwQWdBa0VFUmtVRVFDQUJJQUpxSUFBZ0Ftc3RBQU02QUFBZ0FrRUJhaUVDREFFTEN3dUlBd0VGZndKQUFrQUNRQUpBSUFBb0FoZ09Bd0FBQVFJTElBQW9BaXdpQVVFQUlBRkJBRW9iSVFOQkFDRUJBMEFnQVNBRFJnMERBa0FnQUNBQlFRaDBhaUlDSWdSQk5Hb29BZ0JCQUVnTkFDQUNLd05RUkFBQUFBQUFBT0EvWTBVTkFDQUNRWDgyQWpnZ0JFRi9OZ0kwSUFKQkJqWUNuQUlMSUFGQkFXb2hBUXdBQ3dBTElBQW9BaXdpQVVFQUlBRkJBRW9iSVFOQkFDRUJBMEFnQVNBRFJnMENBa0FnQUNBQlFRaDBhaUlDSWdSQk5Hb29BZ0JCQUVnTkFDQUNLd05RUkFBQUFBQUFBT0EvWTBVTkFDQUNRWDgyQWp3Z0JFRi9OZ0kwSUFKQkJqWUNuQUlMSUFGQkFXb2hBUXdBQ3dBTElBQW9BaXdpQVVFQUlBRkJBRW9iSVFSQkFDRUJBMEFnQVNBRVJnMEJRUUFoQXdKQUlBQWdBVUVJZEdvaUFpSUZRVGhxS0FJQVFRQklEUUFnQWlzRFdFUUFBQUFBQUFEZ1AyTkZEUUFnQlVGL05nSTRRUUVoQXdzQ1FDQUNLQUk4UVFCSURRQWdBaXNEWUVRQUFBQUFBQURnUDJORkRRQWdBa0YvTmdJOElBTkZEUUFnQWtFR05nS2NBZ3NnQVVFQmFpRUJEQUFMQUFzTENRQWdBVUVBT3dFQUN5c0JBWDhnQUNnQ0JDRUNBMEFnQVNBQ1J3UkFJQUFRTkJvZ0FrRUNheUVDREFFTEN5QUFJQUUyQWdRTEN3QWdBRUhnNHdNMkFnQUwyUUVCQlg4akFFSEFBV3NpQXlRQUlBQWdBMEVJYWhDYkJpQUFRUVJxSUFOQkNHcEJCSElRbXdZRFFBSkFRUUFoQVNBQ1FRTkdCRUFEUUNBQklBQW9BckFCSWdKQkEzUkJ5TEVCYWlnQ0FFNE5BaUFBSUFGQkEzUWlBbXBCNkFCcUlBSWdBMnBCOEFCcUVKWUdJQUZCQVdvaEFRd0FDd0FGQTBBZ0FVRUVSa1VFUUNBQlFRTjBJZ1FnQUNBQ1FRVjBJZ1ZxYWtFSWFpQURJQVZxSUFScVFSQnFFSllHSUFGQkFXb2hBUXdCQ3dzZ0FrRUJhaUVDREFJTEFBc0xJQU1nQWpZQ3VBRWdBQ0FEUVFocVFiZ0JFRUFhSUFOQndBRnFKQUFMRlFBZ0FFSGMzZ0UyQWdBZ0FFRUVhaEE1R2lBQUMwMEJBbjhqQUVFZ2F5SURKQUFnQUNBRElBQkJPR3BCQUJBOElBSW9BZ0FnQWlnQ0JDQUNLQUlJSUFJb0Fnd1F4d1VpQkNBQ0VOa0NJQUFnQVNBRUVOa0NJQVFRamdNZ0EwRWdhaVFBQ3pVQUlBQW9BZ0FhSUFBb0FnQWdBQkNRQWtFQmRHb2FJQUFvQWdBZ0FCQ1JBa0VCZEdvYUlBQW9BZ0FnQUJDUUFrRUJkR29hQzdvS0FSUjhBa0FDUUFKQUFrQUNRQUpBSUFWQkFXc09CQUVDQXdBRkN5QUFLd01RSWhCRUFBQUFBQUFBR0VDaUlSWWdBQ3NER0NJUlJBQUFBQUFBQUJoQW9pRVhJQUlnQUNzRE9DSVlvU0FBS3dNb0lobWpJZ29nQ3FJaEFpQUJJQUFyQXpBaURxRWdBQ3NESUNJUG95SUxJQXVpSVFFZ0FDc0RRQ0VVSUFBckF3Z2hFaUFBS3dNQUlSTWdFU0FSb0NFTklCQWdFS0FoRlVFQklRVWdDaUVHSUFzaEJ3TkFBa0FDUUNBQlJBQUFBQUFBQUFBQVlpQUNSQUFBQUFBQUFBQUFZbkpGQkVCRUFBQUFBQUFBQUFBaEJ3d0JDeUFHSUJBZ0FpQUNvQ0FDSUFHZ0lnbWdvaUFHSUJNZ0NhSkVBQUFBQUFBQThEK2dJQWtnRWlBSm9xS2dJZ3lpb0NBR0lBMGdCeUFSSUFrZ0FTQUJvS0NpSUFZZ0ZTQUhvcUlnQnlBTW9xQ2dJQXVoSUJjZ0I2SWdGU0FHb2lBVElBSWdBVVFBQUFBQUFBQUlRS0lpQjZDaVJBQUFBQUFBQVBBL29DQVNJQUlnQXFJZ0FTQUJSQUFBQUFBQUFCUkFvcUlnQWlBSG9pSUpvS0Npb0tDZ282RWlCNklpREtLZ0lBcWhJQllnQnFJZ0V5QUJJQUpFQUFBQUFBQUFDRUNpb0tKRUFBQUFBQUFBOEQrZ0lCSWdBaUFDUkFBQUFBQUFBQlJBb3FJZ0FTQUJvaUFKb0tDaW9LQWdES0Nqb1NFR0lBVkJCRWNOQVNBR0lRZ0xJQU1nRGlBUElBZWlJQlNqb0RrREFDQVlJQmtnQ0tJZ0ZLT2dJUUlNQlFzZ0JVRUJhaUVGSUFZZ0JxSWhBaUFISUFlaUlRRU1BQXNBQ3lBQUt3TVlSQUFBQUFDRTE1ZEJveUlOUkFBQUFBQUFBQWhBb2lFSklBRWdBQ3NEQUNJTW9TSUJJQUdpSUFJZ0FDc0RDS0VpQmlBR29xQWlCNThpQ2lFQ1FRRWhCUU5BUkFBQUFBQUFBQUFBSVFnQ1FDQUNSQUFBQUFBQUFBQUFZZ1JBSUFZZ0FpQUNSQUFBQUFBQUFQQS9JQTBnQjZLaG9pQUtvVVFBQUFBQUFBRHdQeUFKSUFlaW9hT2hJZ2lpSUFLaklRWWdBU0FJb2lBQ295RUJJQVZCQTBjTkFTQUJJUXNnQmlFSUN5QURJQXdnQ3lBQUt3TVFvNkE1QXdBZ0NDQUFLd01Rb3lBQUt3TUlvQ0VDREFRTElBVkJBV29oQlNBQklBR2lJQVlnQnFLZ0lnZWZJUUlNQUFzQUN5QUFLd01ZUkFBQUFBQ0UxNWRCb3lJT1JBQUFBQUFBQUFoQW9pRVBJQUFyQXlCRUFBQUFBSVRYbDBHalJBQUFBQUFBYXZoQW95SU5SQUFBQUFBQUFCUkFvaUVKSUFFZ0FDc0RBQ0lNb1NJR0lBYWlJQUlnQUNzRENLRWlCeUFIb3FBaUFwOGlDaUVCUVFFaEJRTkFBa0FnQVVRQUFBQUFBQUFBQUdJRVFDQUhJQUVnQVVRQUFBQUFBQUR3UHlBT0lBS2lvU0FDSUEwZ0FxS2lvYUlnQ3FGRUFBQUFBQUFBOEQ4Z0R5QUNvcUVnQWlBSklBS2lvcUdqb1NJQ29pQUJveUVISUFZZ0FxSWdBYU1oQmlBRlFRTkhEUUVnQmlFTElBY2hDQXNnQXlBTUlBc2dBQ3NERUtPZ09RTUFJQWdnQUNzREVLTWdBQ3NEQ0tBaEFnd0RDeUFGUVFGcUlRVWdCaUFHb2lBSElBZWlvQ0lDbnlFQkRBQUxBQXNnQUNzRElFUUFBQUFBaE5lWFFhTWlEa1FBQUFBQUFBQUlRS0loRHlBQUt3TW9SQUFBQUFDRTE1ZEJvMFFBQUFBQUFHcjRRS01pRFVRQUFBQUFBQUFVUUtJaENTQUJJQUFyQXdBaURLRWdBQ3NER0tNaUJpQUdvaUFDSUFBckF3aWhJZ2NnQjZLZ0lnS2ZJZ29oQVVFQklRVURRQUpBSUFGRUFBQUFBQUFBQUFCaUJFQWdCeUFCSUFGRUFBQUFBQUFBOEQ4Z0RpQUNvcUVnQWlBTklBS2lvcUdpSUFxaFJBQUFBQUFBQVBBL0lBOGdBcUtoSUFJZ0NTQUNvcUtobzZFaUFxSWdBYU1oQnlBR0lBS2lJQUdqSVFZZ0JVRURSdzBCSUFZaEN5QUhJUWdMSUFNZ0RDQUxJQUFyQXhDam9Ea0RBQ0FJSUFBckF4Q2pJQUFyQXdpZ0lRSU1BZ3NnQlVFQmFpRUZJQVlnQnFJZ0J5QUhvcUFpQXA4aEFRd0FDd0FMSUFRZ0Fqa0RBQXNMTlFFQmZ5TUFRUkJySWdJa0FDQUNJQUFxQWdBNEFnd2dBQ0FCS2dJQU9BSUFJQUVnQWtFTWFpb0NBRGdDQUNBQ1FSQnFKQUFMREFBZ0FDQUJFUFFCUVFGekMrUUJBUUYvSXdCQklHc2lBeVFBSUFNZ0FUWUNFQ0FESUFBMkFoZ2dBeUFDTmdJSUlBTW9BaEFnQXlnQ0dCQ1RBU0VCSUFNb0FnZ2dBeWdDRUJDVEFTRUFBa0FDZndKL0lBRkZCRUJCQUNFQ0lBQkZEUU1nQXlnQ0VDQURLQUlJRU1nQlFRRWhBaUFES0FJUUlBTW9BaGdRa3dGRkRRTWdBMEVRYWlFQUlBTkJHR29NQVFzZ0F5Z0NHQ0VCSUFBRVFDQURRUWhxSVFCQkFRd0NDeUFCSUFNb0FoQVF5QUZCQVNFQ0lBTW9BZ2dnQXlnQ0VCQ1RBVVVOQWlBRFFRaHFJUUFnQTBFUWFnc29BZ0FoQVVFQ0N5RUNJQUVnQUNnQ0FCRElBUXNnQTBFZ2FpUUFJQUlMRWdBZ0FCQTlLQUlBSUFBb0FnQnJRUU4xQ3lRQUlBQWdBVFlDQUNBQUlBRW9BZ1FpQVRZQ0JDQUFJQUVnQWtFRGRHbzJBZ2dnQUFzTEFDQUFRUUJCSkJBN0dndVZBUUVEZnlNQVFSQnJJZ0lrQUNBQ0lBRTJBZ3dDZnlNQVFSQnJJZ01rQUNBQUVEUWFJQU5CeCtQeE9EWUNEQ0FEUWYvLy8vOEhOZ0lJSUFOQkRHb2dBMEVJYWhES0FTZ0NBQ0VFSUFOQkVHb2tBQ0FCSUFSTkN3UkFJQUFROFFFaUFDQUVRUUYyU1FSQUlBSWdBRUVCZERZQ0NDQUNRUWhxSUFKQkRHb1FnQUVvQWdBaEJBc2dBa0VRYWlRQUlBUVBDeENQQVFBTEN3QWdBU0FDUVNRUVFCb0xKQUFnQUNBQk5nSUFJQUFnQVNnQ0JDSUJOZ0lFSUFBZ0FTQUNRU1JzYWpZQ0NDQUFDeXNCQVg4Z0FDQUJLQUlBTmdJQUlBRW9BZ0FoQXlBQUlBRTJBZ2dnQUNBRElBSkJER3hxTmdJRUlBQUxnUUVCQkg4Z0FCRC9BU0FBRURRYUlBQW9BZ0FoQkNBQUtBSUVJUUlnQVVFRWFpSUZJUU1EUUNBQ0lBUkhCRUFnQXlnQ0FFRU1heUFDUVF4cklnSVFpUVFhSUFNZ0F5Z0NBRUVNYXpZQ0FBd0JDd3NnQUNBRkVFb2dBRUVFYWlBQlFRaHFFRW9nQUJBMElBRVFQUkJLSUFFZ0FTZ0NCRFlDQUNBQUlBQVFWeEN0QXd0WkFRSi9Jd0JCRUdzaUFpUUFJQUlnQUVFSWFpQUJFSzRHSWdFb0FnQWhBd05BSUFFb0FnUWdBMGNFUUNBQUtBSVFHaUFCS0FJQUVKOERJQUVnQVNnQ0FFRU1haUlETmdJQURBRUxDeUFCRUxBQklBSkJFR29rQUF1QUFRRUNmeU1BUVJCcklnUWtBQ0FFUVFBMkFnd2dBRUVNYWlBRVFReHFJQU1Rc1FFZ0FRUkFJQUFvQWhBYUlBRkIxYXJWcWdGTEJFQkJ1Tk1CRUpRQkFBc2dBVUVNYkJCTElRVUxJQUFnQlRZQ0FDQUFJQVVnQWtFTWJHb2lBallDQ0NBQUlBSTJBZ1FnQUJBOUlBVWdBVUVNYkdvMkFnQWdCRUVRYWlRQUlBQUxWQUVDZnlNQVFSQnJJZ0lrQUNBQ0lBQWdBUkRrQWlJQktBSUVJUU1EUUNBQktBSUlJQU5IQkVBZ0FCQTBHaUFCS0FJRUVKOERJQUVnQVNnQ0JFRU1haUlETmdJRURBRUxDeUFCRUhRZ0FrRVFhaVFBQ3gwQUlBQkIvLy8vL3dOTEJFQkJ1Tk1CRUpRQkFBc2dBRUVDZEJCTEN4SUFJQUFRUFNnQ0FDQUFLQUlBYTBFQ2RRdU5BZ0lNZndGOVFYOGhDZ0pBSUFFb0FnZ2lCaUFDS0FJRVJ3MEFJQUFvQWdRaUF5QUJLQUlFUncwQUlBQW9BZ2dpQnlBQ0tBSUlSdzBBUVFBaENpQURRUUFnQTBFQVNoc2hDeUFIUVFBZ0IwRUFTaHNoRENBR1FRQWdCa0VBU2hzaERTQUFLQUlBSVFNRFFDQUVJQXRHRFFFZ0JDQUdiQ0VPUVFBaEJRTkFJQVVnREVaRkJFQkJBQ0VBSUFOQkFEWUNBQ0FDS0FJQUlBVkJBblJxSVFnZ0FTZ0NBQ0FPUVFKMGFpRUpRd0FBQUFBaER3TkFJQUFnRFVaRkJFQWdBeUFQSUFrcUFnQWdDQ29DQUpTU0lnODRBZ0FnQUVFQmFpRUFJQWxCQkdvaENTQUlJQWRCQW5ScUlRZ01BUXNMSUFWQkFXb2hCU0FEUVFScUlRTU1BUXNMSUFSQkFXb2hCQXdBQ3dBTElBb0xLd0FnQUNnQ0FCb2dBQ2dDQUNBQUVQQUJRUUowYWhvZ0FDZ0NBQm9nQUNnQ0FDQUFFRU5CQW5ScUdndFpBUUovSXdCQkVHc2lBaVFBSUFJZ0FFRUlhaUFCRUtNRElnRW9BZ0FoQXdOQUlBRW9BZ1FnQTBjRVFDQUFLQUlRR2lBQktBSUFFS0VESUFFZ0FTZ0NBRUVFYWlJRE5nSUFEQUVMQ3lBQkVMQUJJQUpCRUdva0FBc3JBUUYvSUFBb0FnUWhBZ05BSUFFZ0FrY0VRQ0FBRURRYUlBSkJCR3NoQWd3QkN3c2dBQ0FCTmdJRUN3d0FJQUFnQUNnQ0FCQzRCZ3NyQVFGL0lBQW9BZ1FoQWdOQUlBRWdBa2NFUUNBQUVEUWFJQUpCSkdzaEFnd0JDd3NnQUNBQk5nSUVDeTRCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUU5Cb2dBa0VNYXlJQ0VPUUJEQUVMQ3lBQUlBRTJBZ1FMTVFFQmZ5QUFFUDhCSUFBb0FnQUVRQ0FBSUFBb0FnQVF1d1lnQUJBMEdpQUFLQUlBSVFFZ0FCQzlBUm9nQVJBekN3c3VBUUYvSUFBb0FnUWhBZ05BSUFFZ0FrY0VRQ0FBRURRYUlBSkJER3NpQWhDOEJnd0JDd3NnQUNBQk5nSUVDeUFBSUFCQ0FEY0NBQ0FBUWdBM0FoQWdBRUlBTndJSUlBQkJHR29RdFFJYUM4b0JBUWwvSUFBb0FnZ2dBQ2dDQkJDOEFTSUNCRUFDZjBGL0lRY0NRQ0FDS0FJRUlnTWdBQ2dDQ0VjTkFDQUNLQUlJSWdFZ0FDZ0NCRWNOQUVFQUlRY2dBMEVBSUFOQkFFb2JJUWdnQVVFQUlBRkJBRW9iSVFrZ0FpZ0NBQ0VFUVFBaEFRTkFJQUVnQ0VZTkFTQUFLQUlBSUFGQkEzUnFJUVZCQUNFR0EwQWdCaUFKUndSQUlBUWdCU3NEQURrREFDQUdRUUZxSVFZZ0JFRUlhaUVFSUFVZ0EwRURkR29oQlF3QkN3c2dBVUVCYWlFQkRBQUxBQXNnQjBGL1Nnc0VRQ0FDRHdzZ0FoQkZDMEVBQ3djQUlBQVFwZ0lMTGdFQmZ5QUFLQUlFSVFJRFFDQUJJQUpIQkVBZ0FCQTBHaUFDUVNCcklnSVFqZ01NQVFzTElBQWdBVFlDQkFzMUFDQUFLQUlBR2lBQUtBSUFJQUFRa2dKQkJYUnFHaUFBS0FJQUlBQVFxQUZCQlhScUdpQUFLQUlBSUFBUWtnSkJCWFJxR2dzTUFDQUFJQUFvQWdBUXBRTUxMZ0VCZnlBQUtBSUVJQUVvQWdnUXl3WWlBZ1JBSUFJZ0FDQUJFTFVHUVg5S0JFQWdBZzhMSUFJUVJRdEJBQXZ2REFJR2Z3VjlBbjFEQUFDQVB5RUpBa0FDUUFKQUlBRzhJZ1JCLy8vLy93ZHhJZ0pGRFFBZ0FMd2lCVUdBZ0lEOEEwWU5BQ0FBSUFHU0lBVkIvLy8vL3dkeElnTkJnSUNBL0FkTlFRQWdBa0dCZ0lEOEIwa2JSUTBER2dKL0FrQWdCVUYvU2cwQVFRSWdBa0gvLy8vYkJFc05BUm9nQWtHQWdJRDhBMGtOQUVFQUlBSkJsZ0VnQWtFWGRtc2lCbllpQnlBR2RDQUNSdzBCR2tFQ0lBZEJBWEZyREFFTFFRQUxJUVlDUUNBQ1FZQ0FnUHdEUndSQUlBSkJnSUNBL0FkSERRRWdBMEdBZ0lEOEEwWU5BaUFCUXdBQUFBQWdCRUYvU2hzZ0EwR0JnSUQ4QTA4TkJScERBQUFBQUNBQmpDQUVRWDlLR3d3RkN5QUFRd0FBZ0Q4Z0FKVWdCRUYvU2hzTUJBc2dBQ0FBbENBRVFZQ0FnSUFFUmcwREdpQUFrU0FFUVlDQWdQZ0RSeUFGUVFCSWNrVU5BeG9nQUlzaENDQUZRZi8vLy84RGNVR0FnSUQ4QTBkQkFDQURHMFVFUUVNQUFJQS9JQWlWSUFnZ0JFRUFTQnNoQ1NBRlFYOUtEUUVnQmlBRFFZQ0FnUHdEYTNKRkJFQWdDU0FKa3lJQUlBQ1ZEQVVMSUFtTUlBa2dCa0VCUmhzTUJBc0NRQ0FGUVg5S0RRQUNRQUpBSUFZT0FnQUJBZ3NnQUNBQWt5SUFJQUNWREFVTFF3QUFnTDhoQ1FzQ2ZTQUNRWUdBZ09nRVR3UkFJQWxEeXZKSmNaUkR5dkpKY1pRZ0NVTmdRcUlObEVOZ1FxSU5sQ0FFUVFCSUd5QURRZmYvLy9zRFRRMEZHaUFKUThyeVNYR1VROHJ5U1hHVUlBbERZRUtpRFpSRFlFS2lEWlFnQkVFQVNoc2dBMEdJZ0lEOEEwOE5CUm9nQ0VNQUFJQy9raUlBUTNDbDdEYVVJQUFnQUpSREFBQUFQeUFBSUFCREFBQ0F2cFJEcTZxcVBwS1VrNVJETzZxNHY1U1NJZ2dnQ0NBQVF3Q3F1RCtVSWdDU3ZFR0FZSEcrSWdnZ0FKT1REQUVMSUFoREFBQ0FTNVM4SUFNZ0EwR0FnSUFFU1NJQ0d5SUdRZi8vL3dOeElnVkJnSUNBL0FOeUlRTWdCa0VYZFVIcGZrR0JmeUFDRzJvaEJrRUFJUUlDUUNBRlFmS0k4d0JKRFFBZ0JVSFg1L1lDU1FSQVFRRWhBZ3dCQ3lBRlFZQ0FnUGdEY2lFRElBWkJBV29oQmdzZ0FrRUNkQ0lGUWFUakFtb3FBZ0JEQUFDQVB5QUZRWnpqQW1vcUFnQWlBQ0FEdmlJTGtwVWlDQ0FMSUFDVElnb2dBMEVCZGtHQTRQLy9BWEVnQWtFVmRHcEJnSUNBZ2dKcXZpSU1JQW9nQ0pRaUNyeEJnR0J4dmlJSWxKTWdDeUFNSUFDVGt5QUlsSk9VSWdBZ0NDQUlsQ0lMUXdBQVFFQ1NJQUFnQ2lBSWtwUWdDaUFLbENJQUlBQ1VJQUFnQUNBQUlBQWdBRU5DOFZNK2xFTlZNbXcra3BSREJhT0xQcEtVUTZ1cXFqNlNsRU8zYmRzK2twUkRtcGtaUDVLVWtpSU1rcnhCZ0dCeHZpSUFsQ0FLSUF3Z0FFTUFBRURBa2lBTGs1T1VraUlLSUFvZ0NDQUFsQ0lJa3J4QmdHQnh2aUlBSUFpVGswTlBPSFkvbENBQVE4WWo5cmlVa3BJaUNDQUZRYXpqQW1vcUFnQWlDaUFJSUFCREFFQjJQNVFpQUpLU0lBYXlJZ3VTdkVHQVlIRytJZ2dnQzVNZ0NwTWdBSk9UQ3lFS0lBZ2dCRUdBWUhHK0lndVVJZ0FnQ2lBQmxDQUJJQXVUSUFpVWtpSUJraUlJdkNJRFFZR0FnSmdFVGcwQkFrQkJBRUdBZ0lBRUFuOGdBMEdBZ0lDWUJFWUVRRUdHQVNBQlF6eXFPRE9TSUFnZ0FKTmVSUTBCR2d3RUN5QUJJQWdnQUpOZlJTQURRWUNBMkpoOFIzSkZJQU5CLy8vLy93ZHhJZ1JCZ1lEWW1BUlBjZzBFUVFBaEFpQUVRWUdBZ1BnRFNRMEJJQVJCRjNZTFFmNEFhM1lnQTJvaUJFSC8vLzhEY1VHQWdJQUVja0dXQVNBRVFSZDJRZjhCY1NJRmEzWWlBbXNnQWlBRFFRQklHeUVDSUFFZ0FFR0FnSUI4SUFWQi93QnJkU0FFY2I2VElnQ1N2Q0VEQ3lBSkFuMGdBMEdBZ0g1eHZpSUpRd0J5TVQrVUlnZ2dDVU9NdnI4MWxDQUJJQWtnQUpPVFF4aHlNVCtVa2lJSmtpSUFJQUFnQUNBQUlBQ1VJZ0VnQVNBQklBRWdBVU5NdXpFemxFTU82dDIxa3BSRFZiT0tPSktVUTJFTE5ydVNsRU9ycWlvK2twU1RJZ0dVSUFGREFBQUF3SktWSUFrZ0FDQUlrNU1pQVNBQUlBR1VrcE9UUXdBQWdEK1NJZ0M4SUFKQkYzUnFJZ05CLy8vL0Ewd0VRQUpBSUFKQmdBRk9CRUFnQUVNQUFBQi9sQ0VBSUFKQi93RklCRUFnQWtIL0FHc2hBZ3dDQ3lBQVF3QUFBSCtVSVFBZ0FrSDlBaUFDUWYwQ1NCdEIvZ0ZySVFJTUFRc2dBa0dCZjBvTkFDQUFRd0FBZ0FDVUlRQWdBa0dEZmtvRVFDQUNRZjRBYWlFQ0RBRUxJQUJEQUFDQUFKUWhBQ0FDUVlaOUlBSkJobjFLRzBIOEFXb2hBZ3NnQUNBQ1FSZDBRWUNBZ1B3RGFyNlVEQUVMSUFPK0M1UWhDUXNnQ1F3Q0N5QUpROHJ5U1hHVVE4cnlTWEdVREFFTElBbERZRUtpRFpSRFlFS2lEWlFMQ3dzQUlBQkRBQUFBUDVLT0N4QUFJQUFRcGdKREFBQUFRQkNtQXBVTExBQWdBQ2dDQUJvZ0FDZ0NBQ0FBRVBFQlFTUnNhaG9nQUNnQ0FCb2dBQ2dDQUNBQUVJVUJRU1JzYWhvTDd3RUJCWDhqQUVFUWF5SURKQUFDUUNBQVJRUkFRWDhoQkF3QkN5QUFLQUwwaHE4RElBRkdEUUFnQUNnQ2lJZXZBeUlDQkVBZ0FoQkZJQUJCQURZQ2lJZXZBd3NDUUFKQUFrQUNRQ0FCRGdVREFBQUFBUUlMSUFBb0FpUWhCU0FBS0FJb0lRWkJrQkFRT2lJQ0JFQWdBaUFHTmdJSUlBSWdCVFlDQkNBQ1FRQTJBZ0FMSUFBZ0FqWUNpSWV2QXd3Q0N5QUFRb0dBZ0lBUU53T0FoNjhEUVFRaEFRd0JDMEVBSVFGQkFFRURRZDhVUVFBUU9Bc2dBQ0FCTmdMMGhxOERJQUFvQWdCQkFVY05BQ0FESUFGQkFuUkJvRHhxS0FJQU5nSUFRUUJCQTBHMFBDQURFRGdMSUFOQkVHb2tBQ0FFQ3d3QUlBQWdBQ2dDQUJDNkJncytBUUovUVF3UU9pSUNCSDhnQWlBQUlBRnNRUUowRURvaUF6WUNBQ0FEUlFSQUlBSVFNMEVBRHdzZ0FpQUJOZ0lJSUFJZ0FEWUNCQ0FDQlVFQUN3czFBQ0FBS0FJQUdpQUFLQUlBSUFBUThRRkJKR3hxR2lBQUtBSUFJQUFRaFFGQkpHeHFHaUFBS0FJQUlBQVE4UUZCSkd4cUdnc1RBQ0FBSUFFMkFsUWdBRUU4YWlBQkVKb0VDeG9BSUFCQkRrMEVRQ0FBUVFKMFFaU3hBV29vQWdBUEMwRUFDeVlBSUFBb0FnQWFJQUFvQWdBZ0FCRGNBV29hSUFBb0FnQWdBQkRjQVdvYUlBQW9BZ0FhQ3o4QkFYOGpBRUVRYXlJQkpBQWdBQkEwR2lBQlFYODJBZ3dnQVVILy8vLy9CellDQ0NBQlFReHFJQUZCQ0dvUXlnRW9BZ0FoQUNBQlFSQnFKQUFnQUF0cUFRVjhJQUFyQXdBaUFpQUNvaUFBS3dNSUlnTWdBNktnSUFBckF4QWlCQ0FFb3FBZ0FDc0RHQ0lCSUFHaW9DSUZSQUFBQUFBQUFBQUFZUVJBRHdzZ0FDQUJJQVdmSWdHak9RTVlJQUFnQkNBQm96a0RFQ0FBSUFNZ0FhTTVBd2dnQUNBQ0lBR2pPUU1BQ3gwQUlBRkIxYXJWcWdGTEJFQkI2UGtBRUpRQkFBc2dBVUVNYkJCTEMwTUJBWDhqQUVFUWF5SUJKQUFnQUJBMEdpQUJRZFdxMWFvQk5nSU1JQUZCLy8vLy93YzJBZ2dnQVVFTWFpQUJRUWhxRU1vQktBSUFJUUFnQVVFUWFpUUFJQUFMRmdBZ0FTQUNLUUlBTndJQUlBRWdBaWdDQ0RZQ0NBc2RBQ0FBUWN5WnMrWUFTd1JBUWVqNUFCQ1VBUUFMSUFCQkZHd1FTd3NzQUNBQUtBSUFHaUFBS0FJQUlBQVEzUUZCRkd4cUdpQUFLQUlBSUFBUTNRRkJGR3hxR2lBQUtBSUFHZ3REQVFGL0l3QkJFR3NpQVNRQUlBQVFOQm9nQVVITW1iUG1BRFlDRENBQlFmLy8vLzhITmdJSUlBRkJER29nQVVFSWFoREtBU2dDQUNFQUlBRkJFR29rQUNBQUMxVUJBWDhnQUNnQ0JDRUJBMEFnQVNBQUtBSUlSd1JBSUFBb0FoQWFJQUFnQUNnQ0NFRVVhellDQ0F3QkN3c2dBQ2dDQUFSQUlBQW9BaEFhSUFBb0FnQWhBU0FBRUQwb0FnQWdBQ2dDQUdzYUlBRVFNd3NMaEFFQkJYOGdBQkNiQlNBQUVEUWhCQ0FBS0FJQUlRVWdBQ2dDQkNFQ0lBRkJCR29pQmlFREEwQWdBaUFGUndSQUlBUWdBeWdDQUVFVWF5QUNRUlJySWdJUXJ3TWdBeUFES0FJQVFSUnJOZ0lBREFFTEN5QUFJQVlRU2lBQVFRUnFJQUZCQ0dvUVNpQUFFRFFnQVJBOUVFb2dBU0FCS0FJRU5nSUFJQUFnQUJDQ0FSRFdCZ3RxQVFKL0l3QkJFR3NpQkNRQUlBUkJBRFlDRENBQVFReHFJQVJCREdvZ0F4Q3hBU0FCQkVBZ0FDZ0NFQm9nQVJEVkJpRUZDeUFBSUFVMkFnQWdBQ0FGSUFKQkZHeHFJZ0kyQWdnZ0FDQUNOZ0lFSUFBUVBTQUZJQUZCRkd4cU5nSUFJQVJCRUdva0FDQUFDeXNCQVg4Z0FDZ0NCQ0VDQTBBZ0FTQUNSd1JBSUFBUU5Cb2dBa0VNYXlFQ0RBRUxDeUFBSUFFMkFnUUxqZ0VCQm44RFFDQUZRUU5IQkVBZ0FDQUZRUVYwSWdkcUlnWWhDRUVBSVFNRFFDQURRUVJIQkVBZ0EwRURkQ0lFSUFJZ0IycHFJQVlyQXdBZ0FTQUVhaUlFS3dNQW9pQUdLd01JSUFRckF5Q2lvQ0FJS3dNUUlBUkJRR3NyQXdDaW9Ea0RBQ0FEUVFGcUlRTU1BUXNMSUFJZ0Iyb2lBeUFHS3dNWUlBTXJBeGlnT1FNWUlBVkJBV29oQlF3QkN3c0xIQUFnQUNBQlFRZ2dBcWNnQWtJZ2lLY2dBNmNnQTBJZ2lLY1FId3NNQUNBQUlBQW9BZ0FRMndZTHpRWUNCSDhEZmlNQVFZQUJheUlGSkFBQ1FBSkFBa0FnQXlBRVFnQkNBQkNBQWtVTkFBSi9JQVJDLy8vLy8vLy9QNE1oQ1FKL0lBUkNNSWluUWYvL0FYRWlCa0gvL3dGSEJFQkJCQ0FHRFFFYVFRSkJBeUFESUFtRVVCc01BZ3NnQXlBSmhGQUxDMFVOQUNBQ1FqQ0lweUlJUWYvL0FYRWlCa0gvL3dGSERRRUxJQVZCRUdvZ0FTQUNJQU1nQkJCYklBVWdCU2tERUNJQklBVXBBeGdpQWlBQklBSVE4d1FnQlNrRENDRUNJQVVwQXdBaEJBd0JDeUFCSUFKQy8vLy8vLy8vUDRNZ0JxMUNNSWFFSWdvZ0F5QUVRdi8vLy8vLy96K0RJQVJDTUlpblFmLy9BWEVpQjYxQ01JYUVJZ2tRZ0FKQkFFd0VRQ0FCSUFvZ0F5QUpFSUFDQkVBZ0FTRUVEQUlMSUFWQjhBQnFJQUVnQWtJQVFnQVFXeUFGS1FONElRSWdCU2tEY0NFRURBRUxJQVlFZmlBQkJTQUZRZUFBYWlBQklBcENBRUtBZ0lDQWdJREF1OEFBRUZzZ0JTa0RhQ0lLUWpDSXAwSDRBR3NoQmlBRktRTmdDeUVFSUFkRkJFQWdCVUhRQUdvZ0F5QUpRZ0JDZ0lDQWdJQ0F3THZBQUJCYklBVXBBMWdpQ1VJd2lLZEIrQUJySVFjZ0JTa0RVQ0VEQ3lBSlF2Ly8vLy8vL3orRFFvQ0FnSUNBZ01BQWhDRUpJQXBDLy8vLy8vLy9QNE5DZ0lDQWdJQ0F3QUNFSVFvZ0JpQUhTZ1JBQTBBQ2ZpQUtJQWw5SUFNZ0JGYXRmU0lMUWdCWkJFQWdDeUFFSUFOOUlnU0VVQVJBSUFWQklHb2dBU0FDUWdCQ0FCQmJJQVVwQXlnaEFpQUZLUU1nSVFRTUJRc2dDMElCaGlBRVFqK0loQXdCQ3lBS1FnR0dJQVJDUDRpRUN5RUtJQVJDQVlZaEJDQUdRUUZySWdZZ0Iwb05BQXNnQnlFR0N3SkFJQW9nQ1gwZ0F5QUVWcTE5SWdsQ0FGTUVRQ0FLSVFrTUFRc2dDU0FFSUFOOUlnU0VRZ0JTRFFBZ0JVRXdhaUFCSUFKQ0FFSUFFRnNnQlNrRE9DRUNJQVVwQXpBaEJBd0JDeUFKUXYvLy8vLy8vejlZQkVBRFFDQUVRaitJSVFFZ0JrRUJheUVHSUFSQ0FZWWhCQ0FCSUFsQ0FZYUVJZ2xDZ0lDQWdJQ0F3QUJVRFFBTEN5QUlRWUNBQW5FaEJ5QUdRUUJNQkVBZ0JVRkFheUFFSUFsQy8vLy8vLy8vUDRNZ0JrSDRBR29nQjNLdFFqQ0doRUlBUW9DQWdJQ0FnTUREUHhCYklBVXBBMGdoQWlBRktRTkFJUVFNQVFzZ0NVTC8vLy8vLy84L2d5QUdJQWR5clVJd2hvUWhBZ3NnQUNBRU53TUFJQUFnQWpjRENDQUZRWUFCYWlRQUM0c01BUVovSUFBZ0FXb2hCUUpBQWtBZ0FDZ0NCQ0lDUVFGeERRQWdBa0VEY1VVTkFTQUFLQUlBSWdJZ0FXb2hBUUpBSUFBZ0Ftc2lBRUdrcVFRb0FnQkhCRUFnQWtIL0FVMEVRQ0FBS0FJSUlnUWdBa0VEZGlJQ1FRTjBRYmlwQkdwR0dpQUFLQUlNSWdNZ0JFY05Ba0dRcVFSQmtLa0VLQUlBUVg0Z0FuZHhOZ0lBREFNTElBQW9BaGdoQmdKQUlBQWdBQ2dDRENJRFJ3UkFJQUFvQWdnaUFrR2dxUVFvQWdCSkdpQUNJQU0yQWd3Z0F5QUNOZ0lJREFFTEFrQWdBRUVVYWlJQ0tBSUFJZ1FOQUNBQVFSQnFJZ0lvQWdBaUJBMEFRUUFoQXd3QkN3TkFJQUloQnlBRUlnTkJGR29pQWlnQ0FDSUVEUUFnQTBFUWFpRUNJQU1vQWhBaUJBMEFDeUFIUVFBMkFnQUxJQVpGRFFJQ1FDQUFJQUFvQWh3aUJFRUNkRUhBcXdScUlnSW9BZ0JHQkVBZ0FpQUROZ0lBSUFNTkFVR1VxUVJCbEtrRUtBSUFRWDRnQkhkeE5nSUFEQVFMSUFaQkVFRVVJQVlvQWhBZ0FFWWJhaUFETmdJQUlBTkZEUU1MSUFNZ0JqWUNHQ0FBS0FJUUlnSUVRQ0FESUFJMkFoQWdBaUFETmdJWUN5QUFLQUlVSWdKRkRRSWdBeUFDTmdJVUlBSWdBellDR0F3Q0N5QUZLQUlFSWdKQkEzRkJBMGNOQVVHWXFRUWdBVFlDQUNBRklBSkJmbkUyQWdRZ0FDQUJRUUZ5TmdJRUlBVWdBVFlDQUE4TElBUWdBellDRENBRElBUTJBZ2dMQWtBZ0JTZ0NCQ0lDUVFKeFJRUkFJQVZCcUtrRUtBSUFSZ1JBUWFpcEJDQUFOZ0lBUVp5cEJFR2NxUVFvQWdBZ0FXb2lBVFlDQUNBQUlBRkJBWEkyQWdRZ0FFR2txUVFvQWdCSERRTkJtS2tFUVFBMkFnQkJwS2tFUVFBMkFnQVBDeUFGUWFTcEJDZ0NBRVlFUUVHa3FRUWdBRFlDQUVHWXFRUkJtS2tFS0FJQUlBRnFJZ0UyQWdBZ0FDQUJRUUZ5TmdJRUlBQWdBV29nQVRZQ0FBOExJQUpCZUhFZ0FXb2hBUUpBSUFKQi93Rk5CRUFnQlNnQ0NDSUVJQUpCQTNZaUFrRURkRUc0cVFScVJob2dCQ0FGS0FJTUlnTkdCRUJCa0trRVFaQ3BCQ2dDQUVGK0lBSjNjVFlDQUF3Q0N5QUVJQU0yQWd3Z0F5QUVOZ0lJREFFTElBVW9BaGdoQmdKQUlBVWdCU2dDRENJRFJ3UkFJQVVvQWdnaUFrR2dxUVFvQWdCSkdpQUNJQU0yQWd3Z0F5QUNOZ0lJREFFTEFrQWdCVUVVYWlJRUtBSUFJZ0lOQUNBRlFSQnFJZ1FvQWdBaUFnMEFRUUFoQXd3QkN3TkFJQVFoQnlBQ0lnTkJGR29pQkNnQ0FDSUNEUUFnQTBFUWFpRUVJQU1vQWhBaUFnMEFDeUFIUVFBMkFnQUxJQVpGRFFBQ1FDQUZJQVVvQWh3aUJFRUNkRUhBcXdScUlnSW9BZ0JHQkVBZ0FpQUROZ0lBSUFNTkFVR1VxUVJCbEtrRUtBSUFRWDRnQkhkeE5nSUFEQUlMSUFaQkVFRVVJQVlvQWhBZ0JVWWJhaUFETmdJQUlBTkZEUUVMSUFNZ0JqWUNHQ0FGS0FJUUlnSUVRQ0FESUFJMkFoQWdBaUFETmdJWUN5QUZLQUlVSWdKRkRRQWdBeUFDTmdJVUlBSWdBellDR0FzZ0FDQUJRUUZ5TmdJRUlBQWdBV29nQVRZQ0FDQUFRYVNwQkNnQ0FFY05BVUdZcVFRZ0FUWUNBQThMSUFVZ0FrRitjVFlDQkNBQUlBRkJBWEkyQWdRZ0FDQUJhaUFCTmdJQUN5QUJRZjhCVFFSQUlBRkJBM1lpQWtFRGRFRzRxUVJxSVFFQ2YwR1FxUVFvQWdBaUEwRUJJQUowSWdKeFJRUkFRWkNwQkNBQ0lBTnlOZ0lBSUFFTUFRc2dBU2dDQ0FzaEFpQUJJQUEyQWdnZ0FpQUFOZ0lNSUFBZ0FUWUNEQ0FBSUFJMkFnZ1BDMEVmSVFJZ0FFSUFOd0lRSUFGQi8vLy9CMDBFUUNBQlFRaDJJZ0lnQWtHQS9qOXFRUkIyUVFoeElnUjBJZ0lnQWtHQTRCOXFRUkIyUVFSeElnTjBJZ0lnQWtHQWdBOXFRUkIyUVFKeElnSjBRUTkySUFNZ0JISWdBbkpySWdKQkFYUWdBU0FDUVJWcWRrRUJjWEpCSEdvaEFnc2dBQ0FDTmdJY0lBSkJBblJCd0tzRWFpRUhBa0FDUUVHVXFRUW9BZ0FpQkVFQklBSjBJZ054UlFSQVFaU3BCQ0FESUFSeU5nSUFJQWNnQURZQ0FDQUFJQWMyQWhnTUFRc2dBVUVBUVJrZ0FrRUJkbXNnQWtFZlJodDBJUUlnQnlnQ0FDRURBMEFnQXlJRUtBSUVRWGh4SUFGR0RRSWdBa0VkZGlFRElBSkJBWFFoQWlBRUlBTkJCSEZxSWdkQkVHb29BZ0FpQXcwQUN5QUhJQUEyQWhBZ0FDQUVOZ0lZQ3lBQUlBQTJBZ3dnQUNBQU5nSUlEd3NnQkNnQ0NDSUJJQUEyQWd3Z0JDQUFOZ0lJSUFCQkFEWUNHQ0FBSUFRMkFnd2dBQ0FCTmdJSUN3c0hBQ0FCSUFCckMxTUJBWDhDUUNBQlJRMEFJQUZCcE9VRFFhVG5BeEN5QVNJQlJRMEFJQUVvQWdnZ0FDZ0NDRUYvYzNFTkFDQUFLQUlNSUFFb0FneEJBQkNCQVVVTkFDQUFLQUlRSUFFb0FoQkJBQkNCQVNFQ0N5QUNDMUlCQVg4Z0FDZ0NCQ0VFSUFBb0FnQWlBQ0FCQW45QkFDQUNSUTBBR2lBRVFRaDFJZ0VnQkVFQmNVVU5BQm9nQWlnQ0FDQUJhaWdDQUFzZ0Ftb2dBMEVDSUFSQkFuRWJJQUFvQWdBb0Fod1JCd0FMbEFFQkJIOGpBRUVRYXlJRkpBQWdBU0FDRUtjRUlnUkJiMDBFUUFKQUlBUkJDazBFUUNBQUlBUVFxd0VnQUNFRERBRUxJQUFnQkJEcUFrRUJhaUlHRUVzaUF4Q2ZBU0FBSUFZUTFBRWdBQ0FFRUo0QkN3TkFJQUVnQWtjRVFDQURJQUVRbFFFZ0EwRUJhaUVESUFGQkFXb2hBUXdCQ3dzZ0JVRUFPZ0FQSUFNZ0JVRVBhaENWQVNBRlFSQnFKQUFQQ3hEVEFRQUxJd0FnQUVFQU5nSU1JQUFnQVRZQ0JDQUFJQUUyQWdBZ0FDQUJRUUZxTmdJSUlBQUx2QUVCQTM4akFFRVFheUlGSkFBZ0FrSHYvLy8vQXlBQmEwMEVRQ0FBRUQ0aEJnSi9JQUZCNS8vLy93RkpCRUFnQlNBQlFRRjBOZ0lJSUFVZ0FTQUNhallDRENBRlFReHFJQVZCQ0dvUWdBRW9BZ0FRNlFJTUFRdEI3di8vL3dNTFFRRnFJZ2NRNkFJaEFpQUVCRUFnQWlBR0lBUVEyZ0VMSUFNZ0JHc2lBd1JBSUFSQkFuUWlCQ0FDYWlBRUlBWnFJQU1RMmdFTElBRkJBVWNFUUNBR0VETUxJQUFnQWhDZkFTQUFJQWNRMUFFZ0JVRVFhaVFBRHdzUTB3RUFDNGdDQVFOL0l3QkJFR3NpQ0NRQUlBSWdBVUYvYzBIdi8vLy9BMnBOQkVBZ0FCQStJUWtDZnlBQlFlZi8vLzhCU1FSQUlBZ2dBVUVCZERZQ0NDQUlJQUVnQW1vMkFnd2dDRUVNYWlBSVFRaHFFSUFCS0FJQUVPa0NEQUVMUWU3Ly8vOERDMEVCYWlJS0VPZ0NJUUlnQkFSQUlBSWdDU0FFRU5vQkN5QUdCRUFnQkVFQ2RDQUNhaUFISUFZUTJnRUxJQU1nQkNBRmFtc2lBd1JBSUFSQkFuUWlCeUFDYWlBR1FRSjBhaUFISUFscUlBVkJBblJxSUFNUTJnRUxJQUZCQVVjRVFDQUpFRE1MSUFBZ0FoQ2ZBU0FBSUFvUTFBRWdBQ0FFSUFacUlBTnFJZ0FRbmdFZ0NFRUFOZ0lFSUFJZ0FFRUNkR29nQ0VFRWFoQ0RBU0FJUVJCcUpBQVBDeERUQVFBTGZ3RURmeU1BUVJCcklnTWtBQ0FDUWUvLy8vOERUUVJBQWtBZ0FrRUJUUVJBSUFBZ0FoQ3JBU0FBSVFRTUFRc2dBQ0FDRU9rQ1FRRnFJZ1VRNkFJaUJCQ2ZBU0FBSUFVUTFBRWdBQ0FDRUo0QkN5QUVJQUVnQWhEYUFTQURRUUEyQWd3Z0JDQUNRUUowYWlBRFFReHFFSU1CSUFOQkVHb2tBQThMRU5NQkFBc1RBQ0FCQkVBZ0FDQUNFTU1CSUFFUU94b0xDKzRCQVFOL0l3QkJFR3NpQ0NRQUlBSWdBVUYvYzBFUmEwMEVRQ0FBRUQ0aENRSi9JQUZCNS8vLy93ZEpCRUFnQ0NBQlFRRjBOZ0lJSUFnZ0FTQUNhallDRENBSVFReHFJQWhCQ0dvUWdBRW9BZ0FRNmdJTUFRdEJiZ3RCQVdvaUNoQkxJUUlnQkFSQUlBSWdDU0FFRU5zQkN5QUdCRUFnQWlBRWFpQUhJQVlRMndFTElBTWdCQ0FGYW1zaUF3UkFJQUlnQkdvZ0Jtb2dCQ0FKYWlBRmFpQURFTnNCQ3lBQlFRcEhCRUFnQ1JBekN5QUFJQUlRbndFZ0FDQUtFTlFCSUFBZ0JDQUdhaUFEYWlJQUVKNEJJQWhCQURvQUJ5QUFJQUpxSUFoQkIyb1FsUUVnQ0VFUWFpUUFEd3NRMHdFQUMzSUJBMzhqQUVFUWF5SUVKQUFDUUNBQ0lBQVFUeUlEVFFSQUlBQVFQaUlESVFVZ0FnUkFJQVVnQVNBQ0VPVUNDeUFFUVFBNkFBOGdBaUFEYWlBRVFROXFFSlVCSUFBZ0FoQ1lBZ3dCQ3lBQUlBTWdBaUFEYXlBQUVEY2lBMEVBSUFNZ0FpQUJFT29HQ3lBRVFSQnFKQUFnQUFzREFBQUxEUUFnQUNBQ1NTQUFJQUZQY1FzSkFDQUFFRlEyQWdBTExBRUJmeUFBS0FJRUlRSURRQ0FCSUFKSEJFQWdBQkNYQWhvZ0FrRUVheUVDREFFTEN5QUFJQUUyQWdRTEdnQUNRQ0FBSUFGR0JFQWdBRUVBT2dCd0RBRUxJQUVRTXdzTE9BQkJrS2NFS0FJQUdrR1Fwd1FvQWdCQmtLY0VFSllDUVFKMGFocEJrS2NFS0FJQVFaQ25CQkNXQWtFQ2RHb2FRWkNuQkNnQ0FCb0xKZ0FDZnlBQUxRQndJQUZCSEV0eVJRUkFJQUJCQVRvQWNDQUFEQUVMSUFGQkFuUVFTd3NMUmdFQ2Z5TUFRUkJySWdBa0FFR1Fwd1FRbHdJYUlBQkIvLy8vL3dNMkFnd2dBRUgvLy8vL0J6WUNDQ0FBUVF4cUlBQkJDR29ReWdFb0FnQWhBU0FBUVJCcUpBQWdBUXNKQUNBQUVLMEVFRE1MRlFBZ0FFR1F0Z00yQWdBZ0FFRVFhaEE1R2lBQUN4VUFJQUJCNkxVRE5nSUFJQUJCREdvUU9Sb2dBQXRDQVFKL0l3QkJFR3NpQVNRQUlBRWdBRFlDRENBQlFRaHFJQUZCREdvUXdRRWhBRUVFUVFGQnBPOERLQUlBS0FJQUd5RUNJQUFRd0FFZ0FVRVFhaVFBSUFJTFBnRUJmeU1BUVJCcklnVWtBQ0FGSUFRMkFnd2dCVUVJYWlBRlFReHFFTUVCSVFRZ0FDQUJJQUlnQXhDQ0F5RUFJQVFRd0FFZ0JVRVFhaVFBSUFBTEVnQWdCQ0FDTmdJQUlBY2dCVFlDQUVFREN6VUJBWDhqQUVFUWF5SUNKQUFnQWtFSWFpQUFFRWNnQWtFSWFoQ2RBU0FCRUlZQklRQWdBa0VJYWhCQ0lBSkJFR29rQUNBQUN5Z0JBWDhnQUVHRXRRTTJBZ0FDUUNBQUtBSUlJZ0ZGRFFBZ0FDMEFERVVOQUNBQkVETUxJQUFMRHdBZ0FDZ0NEQm9nQUVFQU5nSU1DNDBCQVFSL0l3QkJFR3NpQlNRQUl3QkJFR3NpQXlRQUFrQWdBVUZ2VFFSQUFrQWdBVUVLVFFSQUlBQWdBUkNyQVNBQUlRUU1BUXNnQUNBQkVPb0NRUUZxSWdZUVN5SUVFSjhCSUFBZ0JoRFVBU0FBSUFFUW5nRUxJQVFnQVNBQ0VPa0dJQU5CQURvQUR5QUJJQVJxSUFOQkQyb1FsUUVnQTBFUWFpUUFEQUVMRU5NQkFBc2dCVUVRYWlRQUlBQUxOQUFnQUNnQ0FCb2dBQ2dDQUNBQUVKWUNRUUowYWhvZ0FDZ0NBQ0FBRUVOQkFuUnFHaUFBS0FJQUlBQVFsZ0pCQW5ScUdndHlBUUovSUFCQjhMUUROZ0lBSUFCQkVHb2hBUU5BSUFFUVF5QUNTd1JBSUFFZ0FoQThLQUlBQkVBZ0FTQUNFRHdvQWdBUTFBSWFDeUFDUVFGcUlRSU1BUXNMSUFCQnNBRnFFRGthSUFFUS9nWWdBU2dDQUFSQUlBRVFnUWNnQVJDWEFpQUJLQUlBSUFFUWxnSVE4QVlMSUFBTEt3QWdBQ2dDQUJvZ0FDZ0NBQ0FBRUpZQ1FRSjBhaG9nQUNnQ0FCb2dBQ2dDQUNBQUVFTkJBblJxR2dzTUFDQUFJQUFvQWdBUTd3WUxXUUVDZnlNQVFSQnJJZ0VrQUNBQlFaQ25CQ0FBRUxjQ0lnQW9BZ1FoQWdOQUlBQW9BZ2dnQWtjRVFFR1Fwd1FRbHdJYUlBQW9BZ1FRb1FNZ0FDQUFLQUlFUVFScUlnSTJBZ1FNQVFzTElBQVFkQ0FCUVJCcUpBQUxJQUFnQUVHNHRRTTJBZ0FnQUNnQ0NCQlVSd1JBSUFBb0FnZ1F5QVFMSUFBTEJBQkJmd3Z4QlFFS2Z5TUFRUkJySWhNa0FDQUNJQUEyQWdBZ0EwR0FCSEVoRmdOQUlCUkJCRVlFUUNBTkVEZEJBVXNFUUNBVElBMFFyUUUyQWdnZ0FpQVRRUWhxUVFFUWlRY2dEUkQ3QVNBQ0tBSUFFTk1DTmdJQUN5QURRYkFCY1NJRFFSQkhCRUFnQVNBRFFTQkdCSDhnQWlnQ0FBVWdBQXMyQWdBTElCTkJFR29rQUFVQ1FBSkFBa0FDUUFKQUFrQWdDQ0FVYWl3QUFBNEZBQUVEQWdRRkN5QUJJQUlvQWdBMkFnQU1CQXNnQVNBQ0tBSUFOZ0lBSUFaQklCQ2lBU0VQSUFJZ0FpZ0NBQ0lRUVFScU5nSUFJQkFnRHpZQ0FBd0RDeUFORUxnQkRRSWdEVUVBRUxzREtBSUFJUThnQWlBQ0tBSUFJaEJCQkdvMkFnQWdFQ0FQTmdJQURBSUxJQXdRdUFFZ0ZrVnlEUUVnQWlBTUVLMEJJQXdRK3dFZ0FpZ0NBQkRUQWpZQ0FBd0JDeUFDS0FJQUlSY2dCRUVFYWlBRUlBY2JJZ1FoRVFOQUFrQWdCU0FSVFEwQUlBWkJnQkFnRVNnQ0FCQzFBVVVOQUNBUlFRUnFJUkVNQVFzTElBNGlFa0VCVGdSQUEwQWdFa0VCU0NBRUlCRlBja1VFUUNBUlFRUnJJaEVvQWdBaER5QUNJQUlvQWdBaUVFRUVhallDQUNBUUlBODJBZ0FnRWtFQmF5RVNEQUVMQ3lBU1FRRklCSDlCQUFVZ0JrRXdFS0lCQ3lFVklBSW9BZ0FoRHdOQUlBOUJCR29oRUNBU1FRRk9CRUFnRHlBVk5nSUFJQkpCQVdzaEVpQVFJUThNQVFzTElBSWdFRFlDQUNBUElBazJBZ0FMQWtBZ0JDQVJSZ1JBSUFaQk1CQ2lBU0VQSUFJZ0FpZ0NBQ0lRUVFScUloRTJBZ0FnRUNBUE5nSUFEQUVMSUFzUXVBRUVmMEYvQlNBTFFRQVFQeXdBQUFzaEVFRUFJUTlCQUNFU0EwQWdCQ0FSUndSQUFuOGdEMEVCYWlBUElCQkhEUUFhSUFJZ0FpZ0NBQ0lRUVFScU5nSUFJQkFnQ2pZQ0FDQUxFRGNnRWtFQmFpSVNUUVJBSUE4aEVFRUJEQUVMSUFzZ0VoQS9MUUFBUWY4QVJnUkFRWDhoRUVFQkRBRUxJQXNnRWhBL0xBQUFJUkJCQVFzaER5QVJRUVJySWhFb0FnQWhGU0FDSUFJb0FnQWlHRUVFYWpZQ0FDQVlJQlUyQWdBTUFRc0xJQUlvQWdBaEVRc2dGeUFSRUxZREN5QVVRUUZxSVJRTUFRc0xDN3NDQVFGL0l3QkJFR3NpQ2lRQUlBa0NmeUFBQkVBZ0FoQ0xCeUVBQWtBZ0FRUkFJQW9nQUJENUFTQURJQW9vQWdBMkFBQWdDaUFBRVBnQkRBRUxJQW9nQUJDekF5QURJQW9vQWdBMkFBQWdDaUFBRUxNQkN5QUlJQW9RMVFFZ0NoQTVHaUFFSUFBUXZ3RTJBZ0FnQlNBQUVLRUJOZ0lBSUFvZ0FCQ2dBU0FHSUFvUWlnRWdDaEE1R2lBS0lBQVF0QUVnQnlBS0VOVUJJQW9RT1JvZ0FCRDNBUXdCQ3lBQ0VJb0hJUUFDUUNBQkJFQWdDaUFBRVBrQklBTWdDaWdDQURZQUFDQUtJQUFRK0FFTUFRc2dDaUFBRUxNRElBTWdDaWdDQURZQUFDQUtJQUFRc3dFTElBZ2dDaERWQVNBS0VEa2FJQVFnQUJDL0FUWUNBQ0FGSUFBUW9RRTJBZ0FnQ2lBQUVLQUJJQVlnQ2hDS0FTQUtFRGthSUFvZ0FCQzBBU0FISUFvUTFRRWdDaEE1R2lBQUVQY0JDellDQUNBS1FSQnFKQUFMNFFVQkNuOGpBRUVRYXlJVEpBQWdBaUFBTmdJQUlBTkJnQVJ4SVJVRFFDQVVRUVJHQkVBZ0RSQTNRUUZMQkVBZ0V5QU5FSzBCTmdJSUlBSWdFMEVJYWtFQkVKQUhJQTBRL1FFZ0FpZ0NBQkRUQWpZQ0FBc2dBMEd3QVhFaUEwRVFSd1JBSUFFZ0EwRWdSZ1IvSUFJb0FnQUZJQUFMTmdJQUN5QVRRUkJxSkFBUEN3SkFBa0FDUUFKQUFrQUNRQ0FJSUJScUxBQUFEZ1VBQVFNQ0JBVUxJQUVnQWlnQ0FEWUNBQXdFQ3lBQklBSW9BZ0EyQWdBZ0JrRWdFSVlCSVE4Z0FpQUNLQUlBSWhCQkFXbzJBZ0FnRUNBUE9nQUFEQU1MSUEwUXVBRU5BaUFOUVFBUVB5MEFBQ0VQSUFJZ0FpZ0NBQ0lRUVFGcU5nSUFJQkFnRHpvQUFBd0NDeUFNRUxnQklCVkZjZzBCSUFJZ0RCQ3RBU0FNRVAwQklBSW9BZ0FRMHdJMkFnQU1BUXNnQWlnQ0FDRVdJQVJCQVdvZ0JDQUhHeUlFSVJFRFFBSkFJQVVnRVUwTkFDQUdRWUFRSUJFc0FBQVF0d0ZGRFFBZ0VVRUJhaUVSREFFTEN5QU9JZzlCQVU0RVFBTkFJQTlCQVVnZ0JDQVJUM0pGQkVBZ0VVRUJheUlSTFFBQUlSQWdBaUFDS0FJQUloSkJBV28yQWdBZ0VpQVFPZ0FBSUE5QkFXc2hEd3dCQ3dzZ0QwRUJTQVIvUVFBRklBWkJNQkNHQVFzaEVnTkFJQUlnQWlnQ0FDSVFRUUZxTmdJQUlBOUJBVTRFUUNBUUlCSTZBQUFnRDBFQmF5RVBEQUVMQ3lBUUlBazZBQUFMQWtBZ0JDQVJSZ1JBSUFaQk1CQ0dBU0VQSUFJZ0FpZ0NBQ0lRUVFGcU5nSUFJQkFnRHpvQUFBd0JDeUFMRUxnQkJIOUJmd1VnQzBFQUVEOHNBQUFMSVJCQkFDRVBRUUFoRWdOQUlBUWdFVVlOQVFKL0lBOUJBV29nRHlBUVJ3MEFHaUFDSUFJb0FnQWlFRUVCYWpZQ0FDQVFJQW82QUFBZ0N4QTNJQkpCQVdvaUVrMEVRQ0FQSVJCQkFRd0JDeUFMSUJJUVB5MEFBRUgvQUVZRVFFRi9JUkJCQVF3QkN5QUxJQklRUHl3QUFDRVFRUUVMSVE4Z0VVRUJheUlSTFFBQUlSY2dBaUFDS0FJQUloaEJBV28yQWdBZ0dDQVhPZ0FBREFBTEFBc2dGaUFDS0FJQUVKa0NDeUFVUVFGcUlSUU1BQXNBQzdzQ0FRRi9Jd0JCRUdzaUNpUUFJQWtDZnlBQUJFQWdBaENTQnlFQUFrQWdBUVJBSUFvZ0FCRDVBU0FESUFvb0FnQTJBQUFnQ2lBQUVQZ0JEQUVMSUFvZ0FCQ3pBeUFESUFvb0FnQTJBQUFnQ2lBQUVMTUJDeUFJSUFvUWlnRWdDaEE1R2lBRUlBQVF2d0U2QUFBZ0JTQUFFS0VCT2dBQUlBb2dBQkNnQVNBR0lBb1FpZ0VnQ2hBNUdpQUtJQUFRdEFFZ0J5QUtFSW9CSUFvUU9Sb2dBQkQzQVF3QkN5QUNFSkVISVFBQ1FDQUJCRUFnQ2lBQUVQa0JJQU1nQ2lnQ0FEWUFBQ0FLSUFBUStBRU1BUXNnQ2lBQUVMTURJQU1nQ2lnQ0FEWUFBQ0FLSUFBUXN3RUxJQWdnQ2hDS0FTQUtFRGthSUFRZ0FCQy9BVG9BQUNBRklBQVFvUUU2QUFBZ0NpQUFFS0FCSUFZZ0NoQ0tBU0FLRURrYUlBb2dBQkMwQVNBSElBb1FpZ0VnQ2hBNUdpQUFFUGNCQ3pZQ0FDQUtRUkJxSkFBTE1RRUJmeU1BUVJCcklnSWtBQ0FDSUFBb0FnQTJBZ2dnQWtFSWFpQUJFTmdGSUFJb0FnZ2hBQ0FDUVJCcUpBQWdBQXNMQUNBQVFleVpCQkRDQVFzTEFDQUFRZlNaQkJEQ0FRc1ZBQ0FBSUFFb0FnQVEwZ1FnQVNnQ0FCRHVBUm9MbUJBQkNuOGpBRUd3QkdzaUN5UUFJQXNnQ2pZQ3BBUWdDeUFCTmdLb0JDQUxRY0lDTmdKZ0lBc2dDMEdJQVdvZ0MwR1FBV29nQzBIZ0FHb1FZeUlQS0FJQUlnRTJBb1FCSUFzZ0FVR1FBMm8yQW9BQklBdEI0QUJxRUVZaEVTQUxRZEFBYWhCR0lRNGdDMEZBYXhCR0lRd2dDMEV3YWhCR0lRMGdDMEVnYWhCR0lSQWpBRUVRYXlJQkpBQWdDd0ovSUFJRVFDQUJJQU1RaXdjaUFoRDVBU0FMSUFFb0FnQTJBSGdnQVNBQ0VQZ0JJQTBnQVJEVkFTQUJFRGthSUFFZ0FoQ3pBU0FNSUFFUTFRRWdBUkE1R2lBTElBSVF2d0UyQW5RZ0N5QUNFS0VCTmdKd0lBRWdBaENnQVNBUklBRVFpZ0VnQVJBNUdpQUJJQUlRdEFFZ0RpQUJFTlVCSUFFUU9Sb2dBaEQzQVF3QkN5QUJJQU1RaWdjaUFoRDVBU0FMSUFFb0FnQTJBSGdnQVNBQ0VQZ0JJQTBnQVJEVkFTQUJFRGthSUFFZ0FoQ3pBU0FNSUFFUTFRRWdBUkE1R2lBTElBSVF2d0UyQW5RZ0N5QUNFS0VCTmdKd0lBRWdBaENnQVNBUklBRVFpZ0VnQVJBNUdpQUJJQUlRdEFFZ0RpQUJFTlVCSUFFUU9Sb2dBaEQzQVFzMkFod2dBVUVRYWlRQUlBa2dDQ2dDQURZQ0FDQUVRWUFFY1NJU1FRbDJJUk5CQUNFQlFRQWhBZ05BSUFJaENnSkFBa0FDUUFKQUlBRkJCRVlOQUNBQUlBdEJxQVJxRUkwQlJRMEFRUUFoQkFKQUFrQUNRQUpBQWtBQ1FDQUxRZmdBYWlBQmFpd0FBQTRGQVFBRUF3VUpDeUFCUVFOR0RRY2dCMEdBd0FBZ0FCQm1FTFVCQkVBZ0MwRVFhaUFBRUl3SElCQWdDeWdDRUJDcEJBd0NDeUFGSUFVb0FnQkJCSEkyQWdCQkFDRUFEQVlMSUFGQkEwWU5CZ3NEUUNBQUlBdEJxQVJxRUkwQlJRMEdJQWRCZ01BQUlBQVFaaEMxQVVVTkJpQUxRUkJxSUFBUWpBY2dFQ0FMS0FJUUVLa0VEQUFMQUFzZ0RCQTNRUUFnRFJBM2EwWU5CQUpBSUF3UU53UkFJQTBRTncwQkN5QU1FRGNoQXlBQUVHWWhBaUFEQkVBZ0RCQStLQUlBSUFKR0JFQWdBQkIxR2lBTUlBb2dEQkEzUVFGTEd5RUNEQWdMSUFaQkFUb0FBQXdHQ3lBQ0lBMFFQaWdDQUVjTkJTQUFFSFVhSUFaQkFUb0FBQ0FOSUFvZ0RSQTNRUUZMR3lFQ0RBWUxJQUFRWmlBTUVENG9BZ0JHQkVBZ0FCQjFHaUFNSUFvZ0RCQTNRUUZMR3lFQ0RBWUxJQUFRWmlBTkVENG9BZ0JHQkVBZ0FCQjFHaUFHUVFFNkFBQWdEU0FLSUEwUU4wRUJTeHNoQWd3R0N5QUZJQVVvQWdCQkJISTJBZ0JCQUNFQURBTUxJQW9nQVVFQ1NYSkZCRUJCQUNFQ0lCTWdBVUVDUmlBTExRQjdRUUJIY1hKRkRRVUxJQXNnRGhDdEFUWUNDQ0FMUVJCcUlBdEJDR29RalFJaEFnSkFJQUZGRFFBZ0FTQUxhaTBBZDBFQlN3MEFBMEFDUUNBTElBNFErd0UyQWdnZ0FpQUxRUWhxRUg5RkRRQWdCMEdBd0FBZ0FpZ0NBQ2dDQUJDMUFVVU5BQ0FDRUlrQ0RBRUxDeUFMSUE0UXJRRTJBZ2dnQWlBTFFRaHFFT2NESWdJZ0VCQTNUUVJBSUFzZ0VCRDdBVFlDQ0NBTFFRaHFRUUFnQW1zUWlRY2hBeUFRRVBzQklRUWdEaEN0QVNFVUl3QkJJR3NpQWlRQUlBSWdCRFlDRUNBQ0lBTTJBaGdnQWlBVU5nSUlBMEFDUUNBQ1FSaHFJQUpCRUdvUWZ5SURSUTBBSUFJb0FoZ2dBaWdDQ0JESkFVVU5BQ0FDUVJocUVJa0NJQUpCQ0dvUWlRSU1BUXNMSUFKQklHb2tBQ0FEUVFGekRRRUxJQXNnRGhDdEFUWUNBQ0FMUVFocUlBc1FqUUlhSUFzZ0N5Z0NDRFlDRUFzZ0N5QUxLQUlRTmdJSUEwQUNRQ0FMSUE0USt3RTJBZ0FnQzBFSWFpQUxFSDlGRFFBZ0FDQUxRYWdFYWhDTkFVVU5BQ0FBRUdZZ0N5Z0NDQ2dDQUVjTkFDQUFFSFVhSUF0QkNHb1FpUUlNQVFzTElCSkZEUU1nQ3lBT0VQc0JOZ0lBSUF0QkNHb2dDeEIvUlEwRElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUFnc0RRQUpBSUFBZ0MwR29CR29RalFGRkRRQUNmeUFIUVlBUUlBQVFaaUlDRUxVQkJFQWdDU2dDQUNJRElBc29BcVFFUmdSQUlBZ2dDU0FMUWFRRWFoQy9BaUFKS0FJQUlRTUxJQWtnQTBFRWFqWUNBQ0FESUFJMkFnQWdCRUVCYWd3QkN5QVJFRGRGSUFSRmNnMEJJQUlnQ3lnQ2NFY05BU0FMS0FLRUFTSUNJQXNvQW9BQlJnUkFJQThnQzBHRUFXb2dDMEdBQVdvUXZ3SWdDeWdDaEFFaEFnc2dDeUFDUVFScU5nS0VBU0FDSUFRMkFnQkJBQXNoQkNBQUVIVWFEQUVMQ3lBRVJTQUxLQUtFQVNJQ0lBOG9BZ0JHY2tVRVFDQUxLQUtBQVNBQ1JnUkFJQThnQzBHRUFXb2dDMEdBQVdvUXZ3SWdDeWdDaEFFaEFnc2dDeUFDUVFScU5nS0VBU0FDSUFRMkFnQUxBa0FnQ3lnQ0hFRUJTQTBBQWtBZ0FDQUxRYWdFYWhCNlJRUkFJQUFRWmlBTEtBSjBSZzBCQ3lBRklBVW9BZ0JCQkhJMkFnQkJBQ0VBREFNTEEwQWdBQkIxR2lBTEtBSWNRUUZJRFFFQ1FDQUFJQXRCcUFScUVIcEZCRUFnQjBHQUVDQUFFR1lRdFFFTkFRc2dCU0FGS0FJQVFRUnlOZ0lBUVFBaEFBd0VDeUFKS0FJQUlBc29BcVFFUmdSQUlBZ2dDU0FMUWFRRWFoQy9BZ3NnQUJCbUlRSWdDU0FKS0FJQUlnTkJCR28yQWdBZ0F5QUNOZ0lBSUFzZ0N5Z0NIRUVCYXpZQ0hBd0FDd0FMSUFvaEFpQUlLQUlBSUFrb0FnQkhEUU1nQlNBRktBSUFRUVJ5TmdJQVFRQWhBQXdCQ3dKQUlBcEZEUUJCQVNFRUEwQWdDaEEzSUFSTkRRRUNRQ0FBSUF0QnFBUnFFSHBGQkVBZ0FCQm1JQW9nQkJDN0F5Z0NBRVlOQVFzZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3REN5QUFFSFVhSUFSQkFXb2hCQXdBQ3dBTFFRRWhBQ0FQS0FJQUlBc29Bb1FCUmcwQVFRQWhBQ0FMUVFBMkFoQWdFU0FQS0FJQUlBc29Bb1FCSUF0QkVHb1FpQUVnQ3lnQ0VBUkFJQVVnQlNnQ0FFRUVjallDQUF3QkMwRUJJUUFMSUJBUU9Sb2dEUkE1R2lBTUVEa2FJQTRRT1JvZ0VSQTVHaUFQRUdJZ0MwR3dCR29rQUNBQUR3c2dDaUVDQ3lBQlFRRnFJUUVNQUFzQUN4MEFJQUFnQVJDN0FSQjVJQUVRU1NnQ0FDRUJJQUFRU1NBQk5nSUFDK1FQQWhWL0FYNGpBRUhRSFdzaUJDUUFJQVJCMEJ4cVFlRG1BRUU4RUVBYUlBUkJrQnhxUWFEbkFFSEFBQkJBR2lBRVFaQWJha0hnNXdCQi9BQVFRQm9nQkVHUUdtcEI0T2dBUVlBQkVFQWFJQVJCa0JacVFlRHBBRUg4QXhCQUdpQUVRWkFTYWtIZzdRQkJnQVFRUUJwQmRDRVJRUUloREFKQUFrQUNmd0pBQWtBQ2Z3SkFBa0FnQUVHRUNHc09BZ0VFQUFzZ0FFR0VCa1lFUUVGM0lSRkJBUXdDQ3lBQVFZVUtSZzBDUVg4aEJTQUFRWTRXUncwR1FVQWhFVUg0QUNFUVFmOEFJUTFCQ1NFTUlBUkJrQkpxSVFzZ0JFR1FGbW9oRHd3RkMwRjdJUkZCQWdzaERFRU5JUkJCRHlFTklBUkIwQnhxSVE4Z0JFR1FIR29NQWd0QmVTRVJRUU1oREF0QkZpRVFRUjhoRFNBRVFaQWJhaUVQSUFSQmtCcHFDeUVMUVFBaEFBTi9JQUFnRUVZRWZ5QUVRWkFkYWdVZ0JFR1FIV29nQUdvZ0FhZEJBWEU2QUFBZ0FFRUJhaUVBSUFGQ0FZZ2hBUXdCQ3dzaEFnc2dERUVCZENJU1FRRnlJUWRCQVNFRkEwQUNRQ0FGSUFkSEJFQkJBQ0VJSUFSQnNBUnFJQVZCQW5ScUlnWkJBRFlDQUVFQUlRQURRQ0FBSUJCR0RRSWdBQ0FDYWkwQUFBUkFJQVlnQ0NBUElBQWdCV3dnRFhCQkFuUnFLQUlBY3lJSU5nSUFDeUFBUVFGcUlRQU1BQXNBQ3dKQUlCUkZEUUFnQkVFQU5nS2dCaUFFSUFRb0FyUUVJZ2syQXFRR0lBUkJBVFlDdUFjZ0JFRUFOZ0x3QmtFQklRQURRQ0FBSUJKR1JRUkFJQVJCOEFacUlBQkJBblJxSWdoQmZ6WUNBQ0FJUVFBMkFrZ2dBRUVCYWlFQURBRUxDeUFFUWdBM0E5QUZJQVJDLy8vLy93ODNBNEFGSUJKQkFXc2hGMEVBSVFkQkFDRUdBMEFnQmtFQmFpRU9JQVloQ0FKQUlBbEJmMFlFUUNBRVFkQUZhaUFHUVFKcUlnaEJBblJxSUFjMkFnQWdCMEYvSUFkQmYwb2JRUUZxSVFWQkFDRUFBMEFnQUNBRlJnMENJQUJCQW5RaUNpQUVRZkFHYWlBSVFjZ0FiR3BxSUFSQjhBWnFJQTVCeUFCc2FpQUthaUlLS0FJQUlnazJBZ0FnQ2lBTElBbEJBblJxS0FJQU5nSUFJQUJCQVdvaEFBd0FDd0FMQTBBZ0JFR2dCbW9nQ0NJQVFRSjBhaWdDQUVGL1JnUkFJQUJCQVdzaENDQUFRUUJLRFFFTEN5QUFJUVVnQUVFQlRnUkFBMEFnQUVFQmF5SUlRUUowSWdvZ0JFR2dCbXBxS0FJQVFYOUhCRUFnQ0NBRklBUkJnQVZxSUFWQkFuUnFLQUlBSUFSQmdBVnFJQXBxS0FJQVNCc2hCUXNnQUVFQlNpRUtJQWdoQUNBS0RRQUxDeUFFUWRBRmFpQUdRUUpxSWdoQkFuUnFJQWNnRGlBRmF5SVRJQVZCQW5RaUZTQUVRZEFGYW1vaUZpZ0NBR29pQUNBQUlBZElHeUlLTmdJQVFRQWhBQU5BSUFBZ0VrWUVRQ0FKSUExcUlRa2dGaWdDQUNJQVFYOGdBRUYvU2h0QkFXb2hGaUFFUWFBR2FpQVZhaUVWUVFBaEFBTkFJQUFnRmtZRVFDQUhRWDhnQjBGL1NodEJBV29oQlVFQUlRQURRQ0FBSUFWR0JFQWdDaUVIREFZRklBQkJBblFpQnlBRVFmQUdhaUFJUWNnQWJHcHFJZ2tnQkVId0Jtb2dEa0hJQUd4cUlBZHFJZ2NvQWdBaUV5QUpLQUlBY3pZQ0FDQUhJQXNnRTBFQ2RHb29BZ0EyQWdBZ0FFRUJhaUVBREFFTEFBc0FDeUFFUWZBR2FpQUZRY2dBYkdvZ0FFRUNkR29vQWdBaUdFRi9Sd1JBSUFSQjhBWnFJQWhCeUFCc2FpQUFJQk5xUVFKMGFpQVBJQWtnR0dvZ0ZTZ0NBR3NnRFc5QkFuUnFLQUlBTmdJQUN5QUFRUUZxSVFBTUFBc0FCU0FFUWZBR2FpQUlRY2dBYkdvZ0FFRUNkR3BCQURZQ0FDQUFRUUZxSVFBTUFRc0FDd0FMSUFoQkFuUWlBQ0FFUVlBRmFtb2dEaUFIYXpZQ0FDQUdJQmRIQkVBZ0JFR2dCbW9nQUdvaUJTQUVRYkFFYWlBQWFpZ0NBQ0lHUVg5R0JIOUJBQVVnRHlBR1FRSjBhaWdDQUFzaUJqWUNBRUVCSVFBZ0IwRUFJQWRCQUVvYlFRRnFJUW9EUUNBQUlBcEdSUVJBQWtBZ0JFR3dCR29nQ0NBQWEwRUNkR29vQWdBaUNVRi9SZzBBSUFSQjhBWnFJQWhCeUFCc2FpQUFRUUowYWlnQ0FDSVRSUTBBSUFVZ0JpQVBJQXNnRTBFQ2RHb29BZ0FnQ1dvZ0RXOUJBblJxS0FJQWN5SUdOZ0lBQ3lBQVFRRnFJUUFNQVFzTElBVWdDeUFHUVFKMGFpZ0NBQ0lKTmdJQUlBNGhCaUFISUF4TURRRUxDMEYvSVFVZ0J5QU1TZzBESUFkQmZ5QUhRWDlLRzBFQmFpRUdRUUFoQUNBRVFmQUdhaUFJUWNnQWJHb2hCUU5BSUFBZ0JrWUVRQ0FIUVFBZ0IwRUFTaHNpRGtFQmFpRUZJQVJCOEFacUlBaEJ5QUJzYWlFR1FRRWhBQU5BSUFBZ0JVWUVRQ0FOUVFGcUlRcEJBQ0VHUVFFaENRTkFRUUVoQUVFQklRc2dDU0FLUmtVRVFBTkFJQUFnQlVaRkJFQWdCQ0FBUVFKMGFpSU1LQUlBSWhKQmYwY0VRQ0FNSUFBZ0Vtb2dEVzhpRERZQ0FDQVBJQXhCQW5ScUtBSUFJQXR6SVFzTElBQkJBV29oQUF3QkN3c2dDMFVFUUNBRVFUQnFJQVpCQW5ScUlBMGdDV3MyQWdBZ0JrRUJhaUVHQ3lBSlFRRnFJUWtNQVFzTFFYOGhCU0FHSUFkSERRZEJBQ0VBQTBBZ0FDQU9SZzBGSUFJZ0JFRXdhaUFBUVFKMGFpZ0NBR29pQmlBR0xRQUFRUUZ6T2dBQUlBQkJBV29oQUF3QUN3QUZJQVFnQUVFQ2RDSUthaUFHSUFwcUtBSUFOZ0lBSUFCQkFXb2hBQXdCQ3dBTEFBVWdCU0FBUVFKMGFpSU9JQXNnRGlnQ0FFRUNkR29vQWdBMkFnQWdBRUVCYWlFQURBRUxBQXNBQ3lBRFFnQTNBd0FnRUNBUmFpRUFRZ0VoQVFOQUlBQWdFRTVGQkVBZ0F5QUJJQUFnQW1veEFBQitJQmw4SWhrM0F3QWdBRUVCYWlFQUlBRkNBWVloQVF3QkN3c2dGRVVFUUVFQUlRVU1Bd3NnQkVIUUJXb2dDRUVDZEdvb0FnQWhCUXdDQ3lBR0lBc2dDRUVDZEdvb0FnQTJBZ0JCQVNBVUlBZ2JJUlFnQlVFQmFpRUZEQUFMQUFzZ0JFSFFIV29rQUNBRkN6UUJBWDhqQUVFUWF5SUNKQUFnQWlBQUtBSUFOZ0lJSUFJZ0FpZ0NDQ0FCYWpZQ0NDQUNLQUlJSVFBZ0FrRVFhaVFBSUFBTEN3QWdBRUhjbVFRUXdnRUxDd0FnQUVIa21RUVF3Z0VMd3dFQkJuOGpBRUVRYXlJRUpBQWdBQkJKS0FJQUlRVUNmeUFDS0FJQUlBQW9BZ0JySWdOQi8vLy8vd2RKQkVBZ0EwRUJkQXdCQzBGL0N5SURRUUVnQXhzaEF5QUJLQUlBSVFZZ0FDZ0NBQ0VISUFWQndnSkdCSDlCQUFVZ0FDZ0NBQXNnQXhEbUFpSUlCRUFnQlVIQ0FrY0VRQ0FBRUxzQkdnc2dCRUhCQWpZQ0JDQUFJQVJCQ0dvZ0NDQUVRUVJxRUdNaUJSQ09CeUFGRUdJZ0FTQUFLQUlBSUFZZ0IydHFOZ0lBSUFJZ0F5QUFLQUlBYWpZQ0FDQUVRUkJxSkFBUEN4QjhBQXNsQVFGL0lBRW9BZ0FRMVFSQkdIUkJHSFVoQWlBQUlBRW9BZ0EyQWdRZ0FDQUNPZ0FBQzgwUUFRcC9Jd0JCc0FScklnc2tBQ0FMSUFvMkFxUUVJQXNnQVRZQ3FBUWdDMEhDQWpZQ2FDQUxJQXRCaUFGcUlBdEJrQUZxSUF0QjZBQnFFR01pRHlnQ0FDSUJOZ0tFQVNBTElBRkJrQU5xTmdLQUFTQUxRZWdBYWhCR0lSRWdDMEhZQUdvUVJpRU9JQXRCeUFCcUVFWWhEQ0FMUVRocUVFWWhEU0FMUVNocUVFWWhFQ01BUVJCcklnRWtBQ0FMQW44Z0FnUkFJQUVnQXhDU0J5SUNFUGtCSUFzZ0FTZ0NBRFlBZUNBQklBSVErQUVnRFNBQkVJb0JJQUVRT1JvZ0FTQUNFTE1CSUF3Z0FSQ0tBU0FCRURrYUlBc2dBaEMvQVRvQWR5QUxJQUlRb1FFNkFIWWdBU0FDRUtBQklCRWdBUkNLQVNBQkVEa2FJQUVnQWhDMEFTQU9JQUVRaWdFZ0FSQTVHaUFDRVBjQkRBRUxJQUVnQXhDUkJ5SUNFUGtCSUFzZ0FTZ0NBRFlBZUNBQklBSVErQUVnRFNBQkVJb0JJQUVRT1JvZ0FTQUNFTE1CSUF3Z0FSQ0tBU0FCRURrYUlBc2dBaEMvQVRvQWR5QUxJQUlRb1FFNkFIWWdBU0FDRUtBQklCRWdBUkNLQVNBQkVEa2FJQUVnQWhDMEFTQU9JQUVRaWdFZ0FSQTVHaUFDRVBjQkN6WUNKQ0FCUVJCcUpBQWdDU0FJS0FJQU5nSUFJQVJCZ0FSeEloSkJDWFloRTBFQUlRRkJBQ0VDQTBBZ0FpRUtBa0FDUUFKQUFrQWdBVUVFUmcwQUlBQWdDMEdvQkdvUWpnRkZEUUJCQUNFRUFrQUNRQUpBQWtBQ1FBSkFJQXRCK0FCcUlBRnFMQUFBRGdVQkFBUURCUWtMSUFGQkEwWU5CeUFIUVlEQUFDQUFFR2NRdHdFRVFDQUxRUmhxSUFBUWxBY2dFQ0FMTEFBWUVLb0VEQUlMSUFVZ0JTZ0NBRUVFY2pZQ0FFRUFJUUFNQmdzZ0FVRURSZzBHQ3dOQUlBQWdDMEdvQkdvUWpnRkZEUVlnQjBHQXdBQWdBQkJuRUxjQlJRMEdJQXRCR0dvZ0FCQ1VCeUFRSUFzc0FCZ1FxZ1FNQUFzQUN5QU1FRGRCQUNBTkVEZHJSZzBFQWtBZ0RCQTNCRUFnRFJBM0RRRUxJQXdRTnlFRElBQVFaeUVDSUFNRVFDQU1RUUFRUHkwQUFDQUNRZjhCY1VZRVFDQUFFSFlhSUF3Z0NpQU1FRGRCQVVzYklRSU1DQXNnQmtFQk9nQUFEQVlMSUExQkFCQS9MUUFBSUFKQi93RnhSdzBGSUFBUWRob2dCa0VCT2dBQUlBMGdDaUFORURkQkFVc2JJUUlNQmdzZ0FCQm5RZjhCY1NBTVFRQVFQeTBBQUVZRVFDQUFFSFlhSUF3Z0NpQU1FRGRCQVVzYklRSU1CZ3NnQUJCblFmOEJjU0FOUVFBUVB5MEFBRVlFUUNBQUVIWWFJQVpCQVRvQUFDQU5JQW9nRFJBM1FRRkxHeUVDREFZTElBVWdCU2dDQUVFRWNqWUNBRUVBSVFBTUF3c2dDaUFCUVFKSmNrVUVRRUVBSVFJZ0V5QUJRUUpHSUFzdEFIdEJBRWR4Y2tVTkJRc2dDeUFPRUswQk5nSVFJQXRCR0dvZ0MwRVFhaENOQWlFQ0FrQWdBVVVOQUNBQklBdHFMUUIzUVFGTERRQURRQUpBSUFzZ0RoRDlBVFlDRUNBQ0lBdEJFR29RZjBVTkFDQUhRWURBQUNBQ0tBSUFMQUFBRUxjQlJRMEFJQUlRN0FJTUFRc0xJQXNnRGhDdEFUWUNFQ0FDS0FJQUlBc29BaEJySWdJZ0VCQTNUUVJBSUFzZ0VCRDlBVFlDRUNBTFFSQnFRUUFnQW1zUWtBY2hBeUFRRVAwQklRUWdEaEN0QVNFVUl3QkJJR3NpQWlRQUlBSWdCRFlDRUNBQ0lBTTJBaGdnQWlBVU5nSUlBMEFDUUNBQ1FSaHFJQUpCRUdvUWZ5SURSUTBBSUFJb0FoZ3RBQUFnQWlnQ0NDMEFBRWNOQUNBQ1FSaHFFT3dDSUFKQkNHb1E3QUlNQVFzTElBSkJJR29rQUNBRFFRRnpEUUVMSUFzZ0RoQ3RBVFlDQ0NBTFFSQnFJQXRCQ0dvUWpRSWFJQXNnQ3lnQ0VEWUNHQXNnQ3lBTEtBSVlOZ0lRQTBBQ1FDQUxJQTRRL1FFMkFnZ2dDMEVRYWlBTFFRaHFFSDlGRFFBZ0FDQUxRYWdFYWhDT0FVVU5BQ0FBRUdkQi93RnhJQXNvQWhBdEFBQkhEUUFnQUJCMkdpQUxRUkJxRU93Q0RBRUxDeUFTUlEwRElBc2dEaEQ5QVRZQ0NDQUxRUkJxSUF0QkNHb1FmMFVOQXlBRklBVW9BZ0JCQkhJMkFnQkJBQ0VBREFJTEEwQUNRQ0FBSUF0QnFBUnFFSTRCUlEwQUFuOGdCMEdBRUNBQUVHY2lBaEMzQVFSQUlBa29BZ0FpQXlBTEtBS2tCRVlFUUNBSUlBa2dDMEdrQkdvUWt3Y2dDU2dDQUNFREN5QUpJQU5CQVdvMkFnQWdBeUFDT2dBQUlBUkJBV29NQVFzZ0VSQTNSU0FFUlhJTkFTQUxMUUIySUFKQi93RnhSdzBCSUFzb0FvUUJJZ0lnQ3lnQ2dBRkdCRUFnRHlBTFFZUUJhaUFMUVlBQmFoQy9BaUFMS0FLRUFTRUNDeUFMSUFKQkJHbzJBb1FCSUFJZ0JEWUNBRUVBQ3lFRUlBQVFkaG9NQVFzTElBUkZJQXNvQW9RQklnSWdEeWdDQUVaeVJRUkFJQXNvQW9BQklBSkdCRUFnRHlBTFFZUUJhaUFMUVlBQmFoQy9BaUFMS0FLRUFTRUNDeUFMSUFKQkJHbzJBb1FCSUFJZ0JEWUNBQXNDUUNBTEtBSWtRUUZJRFFBQ1FDQUFJQXRCcUFScUVIdEZCRUFnQUJCblFmOEJjU0FMTFFCM1JnMEJDeUFGSUFVb0FnQkJCSEkyQWdCQkFDRUFEQU1MQTBBZ0FCQjJHaUFMS0FJa1FRRklEUUVDUUNBQUlBdEJxQVJxRUh0RkJFQWdCMEdBRUNBQUVHY1F0d0VOQVFzZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3RUN5QUpLQUlBSUFzb0FxUUVSZ1JBSUFnZ0NTQUxRYVFFYWhDVEJ3c2dBQkJuSVFJZ0NTQUpLQUlBSWdOQkFXbzJBZ0FnQXlBQ09nQUFJQXNnQ3lnQ0pFRUJhellDSkF3QUN3QUxJQW9oQWlBSUtBSUFJQWtvQWdCSERRTWdCU0FGS0FJQVFRUnlOZ0lBUVFBaEFBd0JDd0pBSUFwRkRRQkJBU0VFQTBBZ0NoQTNJQVJORFFFQ1FDQUFJQXRCcUFScUVIdEZCRUFnQUJCblFmOEJjU0FLSUFRUVB5MEFBRVlOQVFzZ0JTQUZLQUlBUVFSeU5nSUFRUUFoQUF3REN5QUFFSFlhSUFSQkFXb2hCQXdBQ3dBTFFRRWhBQ0FQS0FJQUlBc29Bb1FCUmcwQVFRQWhBQ0FMUVFBMkFoZ2dFU0FQS0FJQUlBc29Bb1FCSUF0QkdHb1FpQUVnQ3lnQ0dBUkFJQVVnQlNnQ0FFRUVjallDQUF3QkMwRUJJUUFMSUJBUU9Sb2dEUkE1R2lBTUVEa2FJQTRRT1JvZ0VSQTVHaUFQRUdJZ0MwR3dCR29rQUNBQUR3c2dDaUVDQ3lBQlFRRnFJUUVNQUFzQUN3d0FJQUJCQVVFdEVLTUhHZ3NNQUNBQVFRRkJMUkQ5QmhvTE5RRUJmeU1BUVJCcklnSWtBQ0FDSUFBdEFBQTZBQThnQUNBQkxRQUFPZ0FBSUFFZ0FrRVBhaTBBQURvQUFDQUNRUkJxSkFBTFpBRUJmeU1BUVJCcklnWWtBQ0FHUVFBNkFBOGdCaUFGT2dBT0lBWWdCRG9BRFNBR1FTVTZBQXdnQlFSQUlBWkJEV29nQmtFT2FoQ1lCd3NnQWlBQklBRWdBaWdDQUJEaEJpQUdRUXhxSUFNZ0FDZ0NBQkFoSUFGcU5nSUFJQVpCRUdva0FBdENBQ0FCSUFJZ0F5QUVRUVFRMXdFaEFTQURMUUFBUVFSeFJRUkFJQUFnQVVIUUQyb2dBVUhzRG1vZ0FTQUJRZVFBU0JzZ0FVSEZBRWdiUWV3T2F6WUNBQXNMUUFBZ0FpQURJQUJCQ0dvZ0FDZ0NDQ2dDQkJFQUFDSUFJQUJCb0FKcUlBVWdCRUVBRU84Q0lBQnJJZ0JCbndKTUJFQWdBU0FBUVF4dFFReHZOZ0lBQ3d0QUFDQUNJQU1nQUVFSWFpQUFLQUlJS0FJQUVRQUFJZ0FnQUVHb0FXb2dCU0FFUVFBUTd3SWdBR3NpQUVHbkFVd0VRQ0FCSUFCQkRHMUJCMjgyQWdBTEN6SUFBa0JCZnlBQUtBSk1FTFlCUlFSQUlBQW9Ba3doQUF3QkN5QUFJQUJCSUJENkJpSUFOZ0pNQ3lBQVFSaDBRUmgxQzBJQUlBRWdBaUFESUFSQkJCRFlBU0VCSUFNdEFBQkJCSEZGQkVBZ0FDQUJRZEFQYWlBQlFld09haUFCSUFGQjVBQklHeUFCUWNVQVNCdEI3QTVyTmdJQUN3dEFBQ0FDSUFNZ0FFRUlhaUFBS0FJSUtBSUVFUUFBSWdBZ0FFR2dBbW9nQlNBRVFRQVE4UUlnQUdzaUFFR2ZBa3dFUUNBQklBQkJERzFCREc4MkFnQUxDMEFBSUFJZ0F5QUFRUWhxSUFBb0FnZ29BZ0FSQUFBaUFDQUFRYWdCYWlBRklBUkJBQkR4QWlBQWF5SUFRYWNCVEFSQUlBRWdBRUVNYlVFSGJ6WUNBQXNMdlFVQkNuOGpBRUVRYXlJSkpBQWdCaENXQVNFS0lBa2dCaENiQWlJTkVLQUJJQVVnQXpZQ0FBSkFBa0FnQUNJSExRQUFJZ1pCSzJzT0F3QUJBQUVMSUFvZ0JrRVlkRUVZZFJDaUFTRUdJQVVnQlNnQ0FDSUhRUVJxTmdJQUlBY2dCallDQUNBQVFRRnFJUWNMQWtBQ1FDQUNJQWNpQm10QkFVd05BQ0FITFFBQVFUQkhEUUFnQnkwQUFVRWdja0g0QUVjTkFDQUtRVEFRb2dFaEJpQUZJQVVvQWdBaUNFRUVhallDQUNBSUlBWTJBZ0FnQ2lBSExBQUJFS0lCSVFZZ0JTQUZLQUlBSWdoQkJHbzJBZ0FnQ0NBR05nSUFJQWRCQW1vaUJ5RUdBMEFnQWlBR1RRMENJQVlzQUFBUVZCREpCRVVOQWlBR1FRRnFJUVlNQUFzQUN3TkFJQUlnQmswTkFTQUdMQUFBSVFnUVZCb2dDQkRGQVVVTkFTQUdRUUZxSVFZTUFBc0FDd0pBSUFrUXVBRUVRQ0FLSUFjZ0JpQUZLQUlBRU9nQklBVWdCU2dDQUNBR0lBZHJRUUowYWpZQ0FBd0JDeUFISUFZUW1RSWdEUkNoQVNFT0lBY2hDQU5BSUFZZ0NFMEVRQ0FESUFjZ0FHdEJBblJxSUFVb0FnQVF0Z01GQWtBZ0NTQUxFRDhzQUFCQkFVZ05BQ0FNSUFrZ0N4QS9MQUFBUncwQUlBVWdCU2dDQUNJTVFRUnFOZ0lBSUF3Z0RqWUNBQ0FMSUFzZ0NSQTNRUUZyU1dvaEMwRUFJUXdMSUFvZ0NDd0FBQkNpQVNFUElBVWdCU2dDQUNJUVFRUnFOZ0lBSUJBZ0R6WUNBQ0FJUVFGcUlRZ2dERUVCYWlFTURBRUxDd3NDUUFKQUEwQWdBaUFHVFEwQklBWXRBQUFpQjBFdVJ3UkFJQW9nQjBFWWRFRVlkUkNpQVNFSElBVWdCU2dDQUNJSVFRUnFOZ0lBSUFnZ0J6WUNBQ0FHUVFGcUlRWU1BUXNMSUEwUXZ3RWhCeUFGSUFVb0FnQWlDMEVFYWlJSU5nSUFJQXNnQnpZQ0FDQUdRUUZxSVFZTUFRc2dCU2dDQUNFSUN5QUtJQVlnQWlBSUVPZ0JJQVVnQlNnQ0FDQUNJQVpyUVFKMGFpSUZOZ0lBSUFRZ0JTQURJQUVnQUd0QkFuUnFJQUVnQWtZYk5nSUFJQWtRT1JvZ0NVRVFhaVFBQ3kwQkFYOGdBQ0VCUVFBaEFBTkFJQUJCQTBjRVFDQUJJQUJCQW5ScVFRQTJBZ0FnQUVFQmFpRUFEQUVMQ3d1OEFRRUZmeU1BUVJCcklnY2tBQ01BUVJCcklnVWtBQUpBSUFGQjcvLy8vd05OQkVBQ1FDQUJRUUZOQkVBZ0FDQUJFS3NCSUFBaEJnd0JDeUFBSUFFUTZRSkJBV29pQXhEb0FpSUdFSjhCSUFBZ0F4RFVBU0FBSUFFUW5nRUxJQVloQkNBQklnTUVmeUFEQkVBRFFDQUVJQUkyQWdBZ0JFRUVhaUVFSUFOQkFXc2lBdzBBQ3d0QkFBVWdCQXNhSUFWQkFEWUNEQ0FHSUFGQkFuUnFJQVZCREdvUWd3RWdCVUVRYWlRQURBRUxFTk1CQUFzZ0IwRVFhaVFBSUFBTHF3VUJDbjhqQUVFUWF5SUpKQUFnQmhDZEFTRUtJQWtnQmhDZEFpSU5FS0FCSUFVZ0F6WUNBQUpBQWtBZ0FDSUhMUUFBSWdaQksyc09Bd0FCQUFFTElBb2dCa0VZZEVFWWRSQ0dBU0VHSUFVZ0JTZ0NBQ0lIUVFGcU5nSUFJQWNnQmpvQUFDQUFRUUZxSVFjTEFrQUNRQ0FDSUFjaUJtdEJBVXdOQUNBSExRQUFRVEJIRFFBZ0J5MEFBVUVnY2tINEFFY05BQ0FLUVRBUWhnRWhCaUFGSUFVb0FnQWlDRUVCYWpZQ0FDQUlJQVk2QUFBZ0NpQUhMQUFCRUlZQklRWWdCU0FGS0FJQUlnaEJBV28yQWdBZ0NDQUdPZ0FBSUFkQkFtb2lCeUVHQTBBZ0FpQUdUUTBDSUFZc0FBQVFWQkRKQkVVTkFpQUdRUUZxSVFZTUFBc0FDd05BSUFJZ0JrME5BU0FHTEFBQUlRZ1FWQm9nQ0JERkFVVU5BU0FHUVFGcUlRWU1BQXNBQ3dKQUlBa1F1QUVFUUNBS0lBY2dCaUFGS0FJQUVPa0JJQVVnQlNnQ0FDQUdJQWRyYWpZQ0FBd0JDeUFISUFZUW1RSWdEUkNoQVNFT0lBY2hDQU5BSUFZZ0NFMEVRQ0FESUFjZ0FHdHFJQVVvQWdBUW1RSUZBa0FnQ1NBTUVEOHNBQUJCQVVnTkFDQUxJQWtnREJBL0xBQUFSdzBBSUFVZ0JTZ0NBQ0lMUVFGcU5nSUFJQXNnRGpvQUFDQU1JQXdnQ1JBM1FRRnJTV29oREVFQUlRc0xJQW9nQ0N3QUFCQ0dBU0VQSUFVZ0JTZ0NBQ0lRUVFGcU5nSUFJQkFnRHpvQUFDQUlRUUZxSVFnZ0MwRUJhaUVMREFFTEN3c0RRQUpBSUFvQ2Z5QUNJQVpMQkVBZ0JpMEFBQ0lIUVM1SERRSWdEUkMvQVNFSElBVWdCU2dDQUNJSVFRRnFOZ0lBSUFnZ0J6b0FBQ0FHUVFGcUlRWUxJQVlMSUFJZ0JTZ0NBQkRwQVNBRklBVW9BZ0FnQWlBR2Eyb2lCVFlDQUNBRUlBVWdBeUFCSUFCcmFpQUJJQUpHR3pZQ0FDQUpFRGthSUFsQkVHb2tBQThMSUFvZ0IwRVlkRUVZZFJDR0FTRUhJQVVnQlNnQ0FDSUlRUUZxTmdJQUlBZ2dCem9BQUNBR1FRRnFJUVlNQUFzQUN3c0FJQUJCaEk0RE5nSUFDdzBBSUFBb0FnQWdBU2dDQUVnTG9BTUJBbjhqQUVIZ0Ftc2lBQ1FBSUFBZ0FqWUMwQUlnQUNBQk5nTFlBaUFERU1zQklRWWdBeUFBUWVBQmFoRHVBaUVISUFCQjBBRnFJQU1nQUVITUFtb1E3UUlnQUVIQUFXb1FSaUlCSUFFUVR4QkJJQUFnQVVFQUVEOGlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUhZQW1vZ0FFSFFBbW9RalFGRkRRQWdBQ2dDdkFFZ0FSQTNJQUpxUmdSQUlBRVFOeUVESUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRThRUVNBQUlBTWdBVUVBRUQ4aUFtbzJBcndCQ3lBQVFkZ0NhaEJtSUFZZ0FpQUFRYndCYWlBQVFRaHFJQUFvQXN3Q0lBQkIwQUZxSUFCQkVHb2dBRUVNYWlBSEVNSUNEUUFnQUVIWUFtb1FkUm9NQVFzTEFrQWdBRUhRQVdvUU4wVU5BQ0FBS0FJTUlnTWdBRUVRYW10Qm53RktEUUFnQUNBRFFRUnFOZ0lNSUFNZ0FDZ0NDRFlDQUFzZ0JTQUNJQUFvQXJ3QklBUWdCaEM5QkRZQ0FDQUFRZEFCYWlBQVFSQnFJQUFvQWd3Z0JCQ0lBU0FBUWRnQ2FpQUFRZEFDYWhCNkJFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBTFlBaUVDSUFFUU9Sb2dBRUhRQVdvUU9Sb2dBRUhnQW1va0FDQUNDL1VIQWdwL0Ezd2dBRUVBSUFOQkFFb2JSUVJBSUFSQkFEWUNBQ0FGUVFBMkFnQWdCa0tBZ0lDQWdJQ0ErTDkvTndNQVFYOFBDeUFESUFOc0lRa0NRQUpBQWtBQ1FDQUJSUVJBSUFsQkRHd1FPaUlMUlEwRUlBbEJBMndoQ1VFQUlRRURRQ0FCSUFsR1JRUkFJQWNnQVNBQ2FpMEFBRUgvQVhOcUlRY2dBVUVCYWlFQkRBRUxDeUFISUFsdUlRcEJBQ0VIUVFBaEFRTkFJQUVnQ1VaRkJFQWdDeUFCUVFKMGFpQUJJQUpxTFFBQVFmOEJjeUFLYXlJSU5nSUFJQUZCQVdvaEFTQUlJQWhzSUFkcUlRY01BUXNMSUFlM255SVNJQU8zUkpFclVPWjZ0dnMvb3FORUFBQUFBQUFBTGtCakRRSkJBQ0VISUFBb0FnQWlBVUVBSUFGQkFFb2JJUTVCZnlFSVFYOGhDa0YvSVF3RFFDQUhJQTVIQkVBZ0FDZ0NDQ0VCQWtBRFFBSkFJQUVnREVFQmFpSU1RUUowSWc5cUtBSUFEZ01CQUFJQUN3c2dBQ2dDRUNFUVFRQWhBd05BSUFOQkJFWU5BU0FESUE5cUlRMUJBQ0VDUVFBaEFRTkFJQUVnQ1VaRkJFQWdBaUFCUVFKMElnSWdBQ2dDRENBTlFRSjBhaWdDQUdvb0FnQWdBaUFMYWlnQ0FHeHFJUUlnQVVFQmFpRUJEQUVMQ3lBQ3R5QVFJQTFCQTNScUt3TUFveUFTb3lJVElCRWdFU0FUWXlJQkd5RVJJQXdnQ2lBQkd5RUtJQU1nQ0NBQkd5RUlJQU5CQVdvaEF3d0FDd0FMSUFkQkFXb2hCd3dCQ3dzTUFRc2dDVUVDZEJBNklndEZEUU5CQUNFQkEwQWdBU0FKUmtVRVFDQUhJQUVnQW1vdEFBQkIvd0Z6YWlFSElBRkJBV29oQVF3QkN3c2dCeUFKYmlFS1FRQWhCMEVBSVFFRFFDQUJJQWxHUlFSQUlBc2dBVUVDZEdvZ0FTQUNhaTBBQUVIL0FYTWdDbXNpQ0RZQ0FDQUJRUUZxSVFFZ0NDQUliQ0FIYWlFSERBRUxDeUFIdDU4aUVpQUR0Nk5FQUFBQUFBQUFMa0JqRFFKQkFDRUhJQUFvQWdBaUFVRUFJQUZCQUVvYklRNUJmeUVJUVg4aENrRi9JUXdEUUNBSElBNUhCRUFnQUNnQ0NDRUJBa0FEUUFKQUlBRWdERUVCYWlJTVFRSjBJZzlxS0FJQURnTUJBQUlBQ3dzZ0FDZ0NHQ0VRUVFBaEF3TkFJQU5CQkVZTkFTQURJQTlxSVExQkFDRUNRUUFoQVFOQUlBRWdDVVpGQkVBZ0FpQUJRUUowSWdJZ0FDZ0NGQ0FOUVFKMGFpZ0NBR29vQWdBZ0FpQUxhaWdDQUd4cUlRSWdBVUVCYWlFQkRBRUxDeUFDdHlBUUlBMUJBM1JxS3dNQW95QVNveUlUSUJFZ0VTQVRZeUlCR3lFUklBd2dDaUFCR3lFS0lBTWdDQ0FCR3lFSUlBTkJBV29oQXd3QUN3QUxJQWRCQVdvaEJ3d0JDd3NMSUFVZ0NEWUNBQ0FFSUFvMkFnQWdCaUFST1FNQUlBc1FNMEVBRHdzZ0JFRUFOZ0lBSUFWQkFEWUNBQ0FHUW9DQWdJQ0FnSUQ0djM4M0F3QWdDeEF6UVg0UEN5QUVRUUEyQWdBZ0JVRUFOZ0lBSUFaQ2dJQ0FnSUNBZ1BpL2Z6Y0RBQ0FMRUROQmZnOExRUUJCQTBIbkMwRUFFRGhCQVJBQkFBdHBBQ0FBUlFSQUR3c0NRQ0FBS0FJQUlBRkdEUUFnQUNBQk5nSUFJQUZGQkVBZ0FFSGtocWNDYWlJQUtBSUFFRE1nQUVFQU5nSUFEQUVMSUFCQjVJYW5BbW9nQUNnQ0tDQUFLQUlrYkJBNklnQTJBZ0FnQUEwQVFRQkJBMEdSQzBFQUVEaEJBUkFCQUFzTDhnRUJBWDhqQUVFZ2F5SUdKQUFnQmlBQk5nSVlBa0FnQXlnQ0JFRUJjVVVFUUNBR1FYODJBZ0FnQmlBQUlBRWdBaUFESUFRZ0JpQUFLQUlBS0FJUUVRZ0FJZ0UyQWhnQ1FBSkFBa0FnQmlnQ0FBNENBQUVDQ3lBRlFRQTZBQUFNQXdzZ0JVRUJPZ0FBREFJTElBVkJBVG9BQUNBRVFRUTJBZ0FNQVFzZ0JpQURFRWNnQmhDV0FTRUJJQVlRUWlBR0lBTVFSeUFHRUpzQ0lRQWdCaEJDSUFZZ0FCQzBBU0FHUVF4eUlBQVFzd0VnQlNBR1FSaHFJQUlnQmlBR1FSaHFJZ01nQVNBRVFRRVE3d0lnQmtZNkFBQWdCaWdDR0NFQkEwQWdBMEVNYXhBNUlnTWdCa2NOQUFzTElBWkJJR29rQUNBQkMvd0NBUUYvSXdCQmtBSnJJZ0FrQUNBQUlBSTJBb0FDSUFBZ0FUWUNpQUlnQUVIUUFXb1FSaUVHSUFCQkVHb2dBeEJISUFCQkVHb1FuUUZCMExJRFFlcXlBeUFBUWVBQmFoRHBBU0FBUVJCcUVFSWdBRUhBQVdvUVJpSUNJQUlRVHhCQklBQWdBa0VBRUQ4aUFUWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQU5BQWtBZ0FFR0lBbW9nQUVHQUFtb1FqZ0ZGRFFBZ0FDZ0N2QUVnQWhBM0lBRnFSZ1JBSUFJUU55RURJQUlnQWhBM1FRRjBFRUVnQWlBQ0VFOFFRU0FBSUFNZ0FrRUFFRDhpQVdvMkFyd0JDeUFBUVlnQ2FoQm5RUkFnQVNBQVFid0JhaUFBUVFocVFRQWdCaUFBUVJCcUlBQkJER29nQUVIZ0FXb1FuQUlOQUNBQVFZZ0NhaEIyR2d3QkN3c2dBaUFBS0FLOEFTQUJheEJCSUFJUVBpRUJFRlFoQXlBQUlBVTJBZ0FnQVNBRElBQVF1QVJCQVVjRVFDQUVRUVEyQWdBTElBQkJpQUpxSUFCQmdBSnFFSHNFUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQW9nQ0lRRWdBaEE1R2lBR0VEa2FJQUJCa0FKcUpBQWdBUXZPQXdBakFFR2dBbXNpQUNRQUlBQWdBallDa0FJZ0FDQUJOZ0tZQWlBQVFlQUJhaUFESUFCQjhBRnFJQUJCN3dGcUlBQkI3Z0ZxRUw0RElBQkIwQUZxRUVZaUFTQUJFRThRUVNBQUlBRkJBQkEvSWdJMkFzd0JJQUFnQUVFZ2FqWUNIQ0FBUVFBMkFoZ2dBRUVCT2dBWElBQkJ4UUE2QUJZRFFBSkFJQUJCbUFKcUlBQkJrQUpxRUk0QlJRMEFJQUFvQXN3QklBRVFOeUFDYWtZRVFDQUJFRGNoQXlBQklBRVFOMEVCZEJCQklBRWdBUkJQRUVFZ0FDQURJQUZCQUJBL0lnSnFOZ0xNQVFzZ0FFR1lBbW9RWnlBQVFSZHFJQUJCRm1vZ0FpQUFRY3dCYWlBQUxBRHZBU0FBTEFEdUFTQUFRZUFCYWlBQVFTQnFJQUJCSEdvZ0FFRVlhaUFBUWZBQmFoQzlBdzBBSUFCQm1BSnFFSFlhREFFTEN3SkFJQUJCNEFGcUVEZEZEUUFnQUMwQUYwVU5BQ0FBS0FJY0lnTWdBRUVnYW10Qm53RktEUUFnQUNBRFFRUnFOZ0ljSUFNZ0FDZ0NHRFlDQUFzZ0FDQUNJQUFvQXN3QklBUVF1UVFnQlNBQUtRTUFOd01BSUFVZ0FDa0RDRGNEQ0NBQVFlQUJhaUFBUVNCcUlBQW9BaHdnQkJDSUFTQUFRWmdDYWlBQVFaQUNhaEI3QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FLWUFpRUNJQUVRT1JvZ0FFSGdBV29RT1JvZ0FFR2dBbW9rQUNBQ0M3MERBQ01BUVpBQ2F5SUFKQUFnQUNBQ05nS0FBaUFBSUFFMkFvZ0NJQUJCMEFGcUlBTWdBRUhnQVdvZ0FFSGZBV29nQUVIZUFXb1F2Z01nQUVIQUFXb1FSaUlCSUFFUVR4QkJJQUFnQVVFQUVEOGlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0NBQVFRRTZBQWNnQUVIRkFEb0FCZ05BQWtBZ0FFR0lBbW9nQUVHQUFtb1FqZ0ZGRFFBZ0FDZ0N2QUVnQVJBM0lBSnFSZ1JBSUFFUU55RURJQUVnQVJBM1FRRjBFRUVnQVNBQkVFOFFRU0FBSUFNZ0FVRUFFRDhpQW1vMkFyd0JDeUFBUVlnQ2FoQm5JQUJCQjJvZ0FFRUdhaUFDSUFCQnZBRnFJQUFzQU44QklBQXNBTjRCSUFCQjBBRnFJQUJCRUdvZ0FFRU1haUFBUVFocUlBQkI0QUZxRUwwRERRQWdBRUdJQW1vUWRob01BUXNMQWtBZ0FFSFFBV29RTjBVTkFDQUFMUUFIUlEwQUlBQW9BZ3dpQXlBQVFSQnFhMEdmQVVvTkFDQUFJQU5CQkdvMkFnd2dBeUFBS0FJSU5nSUFDeUFGSUFJZ0FDZ0N2QUVnQkJDNkJEa0RBQ0FBUWRBQmFpQUFRUkJxSUFBb0Fnd2dCQkNJQVNBQVFZZ0NhaUFBUVlBQ2FoQjdCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUFLQUtJQWlFQ0lBRVFPUm9nQUVIUUFXb1FPUm9nQUVHUUFtb2tBQ0FDQzcwREFDTUFRWkFDYXlJQUpBQWdBQ0FDTmdLQUFpQUFJQUUyQW9nQ0lBQkIwQUZxSUFNZ0FFSGdBV29nQUVIZkFXb2dBRUhlQVdvUXZnTWdBRUhBQVdvUVJpSUJJQUVRVHhCQklBQWdBVUVBRUQ4aUFqWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQ0FBUVFFNkFBY2dBRUhGQURvQUJnTkFBa0FnQUVHSUFtb2dBRUdBQW1vUWpnRkZEUUFnQUNnQ3ZBRWdBUkEzSUFKcVJnUkFJQUVRTnlFRElBRWdBUkEzUVFGMEVFRWdBU0FCRUU4UVFTQUFJQU1nQVVFQUVEOGlBbW8yQXJ3QkN5QUFRWWdDYWhCbklBQkJCMm9nQUVFR2FpQUNJQUJCdkFGcUlBQXNBTjhCSUFBc0FONEJJQUJCMEFGcUlBQkJFR29nQUVFTWFpQUFRUWhxSUFCQjRBRnFFTDBERFFBZ0FFR0lBbW9RZGhvTUFRc0xBa0FnQUVIUUFXb1FOMFVOQUNBQUxRQUhSUTBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQkM3QkRnQ0FDQUFRZEFCYWlBQVFSQnFJQUFvQWd3Z0JCQ0lBU0FBUVlnQ2FpQUFRWUFDYWhCN0JFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQUtBS0lBaUVDSUFFUU9Sb2dBRUhRQVdvUU9Sb2dBRUdRQW1va0FDQUNDNVVEQVFGL0l3QkJrQUpySWdBa0FDQUFJQUkyQW9BQ0lBQWdBVFlDaUFJZ0F4RExBU0VHSUFCQjBBRnFJQU1nQUVIL0FXb1F3d0lnQUVIQUFXb1FSaUlCSUFFUVR4QkJJQUFnQVVFQUVEOGlBallDdkFFZ0FDQUFRUkJxTmdJTUlBQkJBRFlDQ0FOQUFrQWdBRUdJQW1vZ0FFR0FBbW9RamdGRkRRQWdBQ2dDdkFFZ0FSQTNJQUpxUmdSQUlBRVFOeUVESUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRThRUVNBQUlBTWdBVUVBRUQ4aUFtbzJBcndCQ3lBQVFZZ0NhaEJuSUFZZ0FpQUFRYndCYWlBQVFRaHFJQUFzQVA4QklBQkIwQUZxSUFCQkVHb2dBRUVNYWtIUXNnTVFuQUlOQUNBQVFZZ0NhaEIyR2d3QkN3c0NRQ0FBUWRBQmFoQTNSUTBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQ0FHRUx3RU53TUFJQUJCMEFGcUlBQkJFR29nQUNnQ0RDQUVFSWdCSUFCQmlBSnFJQUJCZ0FKcUVIc0VRQ0FFSUFRb0FnQkJBbkkyQWdBTElBQW9Bb2dDSVFJZ0FSQTVHaUFBUWRBQmFoQTVHaUFBUVpBQ2FpUUFJQUlMbFFNQkFYOGpBRUdRQW1zaUFDUUFJQUFnQWpZQ2dBSWdBQ0FCTmdLSUFpQURFTXNCSVFZZ0FFSFFBV29nQXlBQVFmOEJhaEREQWlBQVFjQUJhaEJHSWdFZ0FSQlBFRUVnQUNBQlFRQVFQeUlDTmdLOEFTQUFJQUJCRUdvMkFnd2dBRUVBTmdJSUEwQUNRQ0FBUVlnQ2FpQUFRWUFDYWhDT0FVVU5BQ0FBS0FLOEFTQUJFRGNnQW1wR0JFQWdBUkEzSVFNZ0FTQUJFRGRCQVhRUVFTQUJJQUVRVHhCQklBQWdBeUFCUVFBUVB5SUNhallDdkFFTElBQkJpQUpxRUdjZ0JpQUNJQUJCdkFGcUlBQkJDR29nQUN3QS93RWdBRUhRQVdvZ0FFRVFhaUFBUVF4cVFkQ3lBeENjQWcwQUlBQkJpQUpxRUhZYURBRUxDd0pBSUFCQjBBRnFFRGRGRFFBZ0FDZ0NEQ0lESUFCQkVHcHJRWjhCU2cwQUlBQWdBMEVFYWpZQ0RDQURJQUFvQWdnMkFnQUxJQVVnQWlBQUtBSzhBU0FFSUFZUXZ3UTdBUUFnQUVIUUFXb2dBRUVRYWlBQUtBSU1JQVFRaUFFZ0FFR0lBbW9nQUVHQUFtb1Fld1JBSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dBQ2dDaUFJaEFpQUJFRGthSUFCQjBBRnFFRGthSUFCQmtBSnFKQUFnQWd1VkF3RUJmeU1BUVpBQ2F5SUFKQUFnQUNBQ05nS0FBaUFBSUFFMkFvZ0NJQU1ReXdFaEJpQUFRZEFCYWlBRElBQkIvd0ZxRU1NQ0lBQkJ3QUZxRUVZaUFTQUJFRThRUVNBQUlBRkJBQkEvSWdJMkFyd0JJQUFnQUVFUWFqWUNEQ0FBUVFBMkFnZ0RRQUpBSUFCQmlBSnFJQUJCZ0FKcUVJNEJSUTBBSUFBb0Fyd0JJQUVRTnlBQ2FrWUVRQ0FCRURjaEF5QUJJQUVRTjBFQmRCQkJJQUVnQVJCUEVFRWdBQ0FESUFGQkFCQS9JZ0pxTmdLOEFRc2dBRUdJQW1vUVp5QUdJQUlnQUVHOEFXb2dBRUVJYWlBQUxBRC9BU0FBUWRBQmFpQUFRUkJxSUFCQkRHcEIwTElERUp3Q0RRQWdBRUdJQW1vUWRob01BUXNMQWtBZ0FFSFFBV29RTjBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BcndCSUFRZ0JoREFCRGNEQUNBQVFkQUJhaUFBUVJCcUlBQW9BZ3dnQkJDSUFTQUFRWWdDYWlBQVFZQUNhaEI3QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FLSUFpRUNJQUVRT1JvZ0FFSFFBV29RT1JvZ0FFR1FBbW9rQUNBQ0M1VURBUUYvSXdCQmtBSnJJZ0FrQUNBQUlBSTJBb0FDSUFBZ0FUWUNpQUlnQXhETEFTRUdJQUJCMEFGcUlBTWdBRUgvQVdvUXd3SWdBRUhBQVdvUVJpSUJJQUVRVHhCQklBQWdBVUVBRUQ4aUFqWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQU5BQWtBZ0FFR0lBbW9nQUVHQUFtb1FqZ0ZGRFFBZ0FDZ0N2QUVnQVJBM0lBSnFSZ1JBSUFFUU55RURJQUVnQVJBM1FRRjBFRUVnQVNBQkVFOFFRU0FBSUFNZ0FVRUFFRDhpQW1vMkFyd0JDeUFBUVlnQ2FoQm5JQVlnQWlBQVFid0JhaUFBUVFocUlBQXNBUDhCSUFCQjBBRnFJQUJCRUdvZ0FFRU1ha0hRc2dNUW5BSU5BQ0FBUVlnQ2FoQjJHZ3dCQ3dzQ1FDQUFRZEFCYWhBM1JRMEFJQUFvQWd3aUF5QUFRUkJxYTBHZkFVb05BQ0FBSUFOQkJHbzJBZ3dnQXlBQUtBSUlOZ0lBQ3lBRklBSWdBQ2dDdkFFZ0JDQUdFTUVFTmdJQUlBQkIwQUZxSUFCQkVHb2dBQ2dDRENBRUVJZ0JJQUJCaUFKcUlBQkJnQUpxRUhzRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0FvZ0NJUUlnQVJBNUdpQUFRZEFCYWhBNUdpQUFRWkFDYWlRQUlBSUw4Z0VCQVg4akFFRWdheUlHSkFBZ0JpQUJOZ0lZQWtBZ0F5Z0NCRUVCY1VVRVFDQUdRWDgyQWdBZ0JpQUFJQUVnQWlBRElBUWdCaUFBS0FJQUtBSVFFUWdBSWdFMkFoZ0NRQUpBQWtBZ0JpZ0NBQTRDQUFFQ0N5QUZRUUE2QUFBTUF3c2dCVUVCT2dBQURBSUxJQVZCQVRvQUFDQUVRUVEyQWdBTUFRc2dCaUFERUVjZ0JoQ2RBU0VCSUFZUVFpQUdJQU1RUnlBR0VKMENJUUFnQmhCQ0lBWWdBQkMwQVNBR1FReHlJQUFRc3dFZ0JTQUdRUmhxSUFJZ0JpQUdRUmhxSWdNZ0FTQUVRUUVROFFJZ0JrWTZBQUFnQmlnQ0dDRUJBMEFnQTBFTWF4QTVJZ01nQmtjTkFBc0xJQVpCSUdva0FDQUJDMEFCQVg5QkFDRUFBMzhnQVNBQ1JnUi9JQUFGSUFFb0FnQWdBRUVFZEdvaUFFR0FnSUNBZjNFaUEwRVlkaUFEY2lBQWN5RUFJQUZCQkdvaEFRd0JDd3NMR3dBakFFRVFheUlCSkFBZ0FDQUNJQU1Rd2dRZ0FVRVFhaVFBQzFRQkFuOENRQU5BSUFNZ0JFY0VRRUYvSVFBZ0FTQUNSZzBDSUFFb0FnQWlCU0FES0FJQUlnWklEUUlnQlNBR1NnUkFRUUVQQlNBRFFRUnFJUU1nQVVFRWFpRUJEQUlMQUFzTElBRWdBa2NoQUFzZ0FBdEFBUUYvUVFBaEFBTi9JQUVnQWtZRWZ5QUFCU0FCTEFBQUlBQkJCSFJxSWdCQmdJQ0FnSDl4SWdOQkdIWWdBM0lnQUhNaEFDQUJRUUZxSVFFTUFRc0xDeHNBSXdCQkVHc2lBU1FBSUFBZ0FpQURFT1FHSUFGQkVHb2tBQXRVQVFKL0FrQURRQ0FESUFSSEJFQkJmeUVBSUFFZ0FrWU5BaUFCTEFBQUlnVWdBeXdBQUNJR1NBMENJQVVnQmtvRVFFRUJEd1VnQTBFQmFpRURJQUZCQVdvaEFRd0NDd0FMQ3lBQklBSkhJUUFMSUFBTENRQWdBQkRLQXhBekM3UUJBUVIvSXdCQkVHc2lCU1FBQTBBQ1FDQUNJQU5NRFFBZ0FDZ0NHQ0lFSUFBb0Fod2lCazhFUUNBQUlBRW9BZ0FnQUNnQ0FDZ0NOQkVEQUVGL1JnMEJJQU5CQVdvaEF5QUJRUVJxSVFFRklBVWdCaUFFYTBFQ2RUWUNEQ0FGSUFJZ0EyczJBZ2dnQlVFTWFpQUZRUWhxRUo0Q0lRUWdBQ2dDR0NBQklBUW9BZ0FpQkJEYUFTQUFJQVJCQW5RaUJpQUFLQUlZYWpZQ0dDQURJQVJxSVFNZ0FTQUdhaUVCQ3d3QkN3c2dCVUVRYWlRQUlBTUxMQUFnQUNBQUtBSUFLQUlrRVFBQVFYOUdCRUJCZnc4TElBQWdBQ2dDRENJQVFRUnFOZ0lNSUFBb0FnQUx6UUVCQkg4akFFRVFheUlFSkFBRFFBSkFJQUlnQlV3TkFDQUFLQUlNSWdNZ0FDZ0NFQ0lHU1FSQUlBUkIvLy8vL3djMkFnd2dCQ0FHSUFOclFRSjFOZ0lJSUFRZ0FpQUZhellDQkNBRVFReHFJQVJCQ0dvZ0JFRUVhaENlQWhDZUFpRURJQUVnQUNnQ0RDQURLQUlBSWdNUTJnRWdBQ0FBS0FJTUlBTkJBblJxTmdJTUlBTWdCV29oQlNBQklBTkJBblJxSVFFTUFnc2dBQ0FBS0FJQUtBSW9FUUFBSWdOQmYwWU5BQ0FCSUFNMkFnQWdCVUVCYWlFRklBRkJCR29oQVF3QkN3c2dCRUVRYWlRQUlBVUxDUUFnQUJESUF4QXpDNjhCQVFSL0l3QkJFR3NpQlNRQUEwQUNRQ0FDSUFSTURRQWdBQ2dDR0NJRElBQW9BaHdpQms4RVFDQUFJQUVzQUFBUXd3RWdBQ2dDQUNnQ05CRURBRUYvUmcwQklBUkJBV29oQkNBQlFRRnFJUUVGSUFVZ0JpQURhellDRENBRklBSWdCR3MyQWdnZ0JVRU1haUFGUVFocUVKNENJUU1nQUNnQ0dDQUJJQU1vQWdBaUF4RGJBU0FBSUFNZ0FDZ0NHR28yQWhnZ0F5QUVhaUVFSUFFZ0Eyb2hBUXNNQVFzTElBVkJFR29rQUNBRUN5OEFJQUFnQUNnQ0FDZ0NKQkVBQUVGL1JnUkFRWDhQQ3lBQUlBQW9BZ3dpQUVFQmFqWUNEQ0FBTEFBQUVNTUJDOGNCQVFSL0l3QkJFR3NpQkNRQUEwQUNRQ0FDSUFWTURRQWdBQ2dDRENJRElBQW9BaEFpQmtrRVFDQUVRZi8vLy84SE5nSU1JQVFnQmlBRGF6WUNDQ0FFSUFJZ0JXczJBZ1FnQkVFTWFpQUVRUWhxSUFSQkJHb1FuZ0lRbmdJaEF5QUJJQUFvQWd3Z0F5Z0NBQ0lERU5zQklBQWdBQ2dDRENBRGFqWUNEQ0FESUFWcUlRVWdBU0FEYWlFQkRBSUxJQUFnQUNnQ0FDZ0NLQkVBQUNJRFFYOUdEUUFnQVNBREVNRURPZ0FBSUFWQkFXb2hCU0FCUVFGcUlRRU1BUXNMSUFSQkVHb2tBQ0FGQ3drQUlBQVF5UU1RTXd2OUFRRUZmeU1BUVNCcklnSWtBQUovQWtBQ1FDQUJRWDhRdGdFTkFDQUNJQUUyQWhRZ0FDMEFMQVJBSUFKQkZHcEJCRUVCSUFBb0FpQVEwZ0ZCQVVjTkFnd0JDeUFDSUFKQkdHbzJBaEFnQWtFZ2FpRUZJQUpCR0dvaEJpQUNRUlJxSVFNRFFDQUFLQUlrSUFBb0FpZ2dBeUFHSUFKQkRHb2dBa0VZYWlBRklBSkJFR29ROXdJaEJDQUNLQUlNSUFOR0RRSWdCRUVEUmdSQUlBTkJBVUVCSUFBb0FpQVEwZ0ZCQVVZTkFnd0RDeUFFUVFGTERRSWdBa0VZYWtFQklBSW9BaEFnQWtFWWFtc2lBeUFBS0FJZ0VOSUJJQU5IRFFJZ0FpZ0NEQ0VESUFSQkFVWU5BQXNMSUFFUXp3UU1BUXRCZndzaEFDQUNRU0JxSkFBZ0FBdG1BUUYvQWtBZ0FDMEFMRVVFUUNBQ1FRQWdBa0VBU2hzaEFnTkFJQUlnQTBZTkFpQUFJQUVvQWdBZ0FDZ0NBQ2dDTkJFREFFRi9SZ1JBSUFNUEJTQUJRUVJxSVFFZ0EwRUJhaUVEREFFTEFBc0FDeUFCUVFRZ0FpQUFLQUlnRU5JQklRSUxJQUlMSmdBZ0FDQUFLQUlBS0FJWUVRQUFHaUFBSUFFUXl3TWlBVFlDSkNBQUlBRVFud0k2QUN3TGdBSUJCWDhqQUVFZ2F5SUNKQUFDZndKQUFrQWdBVUYvRUxZQkRRQWdBaUFCRU1FRE9nQVhJQUF0QUN3RVFDQUNRUmRxUVFGQkFTQUFLQUlnRU5JQlFRRkhEUUlNQVFzZ0FpQUNRUmhxTmdJUUlBSkJJR29oQlNBQ1FSaHFJUVlnQWtFWGFpRURBMEFnQUNnQ0pDQUFLQUlvSUFNZ0JpQUNRUXhxSUFKQkdHb2dCU0FDUVJCcUVQY0NJUVFnQWlnQ0RDQURSZzBDSUFSQkEwWUVRQ0FEUVFGQkFTQUFLQUlnRU5JQlFRRkdEUUlNQXdzZ0JFRUJTdzBDSUFKQkdHcEJBU0FDS0FJUUlBSkJHR3BySWdNZ0FDZ0NJQkRTQVNBRFJ3MENJQUlvQWd3aEF5QUVRUUZHRFFBTEN5QUJFTThFREFFTFFYOExJUUFnQWtFZ2FpUUFJQUFMYVFFQmZ3SkFJQUF0QUN4RkJFQWdBa0VBSUFKQkFFb2JJUUlEUUNBQ0lBTkdEUUlnQUNBQkxBQUFFTU1CSUFBb0FnQW9BalFSQXdCQmYwWUVRQ0FERHdVZ0FVRUJhaUVCSUFOQkFXb2hBd3dCQ3dBTEFBc2dBVUVCSUFJZ0FDZ0NJQkRTQVNFQ0N5QUNDeVlBSUFBZ0FDZ0NBQ2dDR0JFQUFCb2dBQ0FCRU13RElnRTJBaVFnQUNBQkVKOENPZ0FzQy84QkFRTi9Jd0JCSUdzaUFpUUFJQUZCZnhDMkFTRURJQUF0QURRaEJBSkFJQUFDZnlBREJFQWdBU0VESUFRTkFpQUFLQUl3SWdGQmZ4QzJBVUVCY3d3QkN5QUVCRUFnQWlBQUtBSXdOZ0lRQW44Q1FBSkFBa0FnQUNnQ0pDQUFLQUlvSUFKQkVHb2dBa0VVYWlBQ1FReHFJQUpCR0dvZ0FrRWdhaUFDUVJScUVQY0NRUUZyRGdNQ0FnQUJDeUFBS0FJd0lRTWdBaUFDUVJscU5nSVVJQUlnQXpvQUdBc0RRRUVCSUFJb0FoUWlBeUFDUVJocVRRMENHaUFDSUFOQkFXc2lBellDRkNBRExBQUFJQUFvQWlBUSt3SkJmMGNOQUFzTFFYOGhBMEVBQzBVTkFnc2dBQ0FCTmdJd1FRRUxPZ0EwSUFFaEF3c2dBa0VnYWlRQUlBTUxDUUFnQUVFQkVPTUVDd2tBSUFCQkFCRGpCQXN6QUNBQUlBRVF5d01pQVRZQ0pDQUFJQUVReGdJMkFpd2dBQ0FBS0FJa0VKOENPZ0ExSUFBb0FpeEJDVTRFUUJCOEFBc0xnZ0lCQTM4akFFRWdheUlDSkFBZ0FVRi9FTFlCSVFNZ0FDMEFOQ0VFQWtBZ0FBSi9JQU1FUUNBQklRTWdCQTBDSUFBb0FqQWlBVUYvRUxZQlFRRnpEQUVMSUFRRVFDQUNJQUFvQWpBUXdRTTZBQk1DZndKQUFrQUNRQ0FBS0FJa0lBQW9BaWdnQWtFVGFpQUNRUlJxSUFKQkRHb2dBa0VZYWlBQ1FTQnFJQUpCRkdvUTl3SkJBV3NPQXdJQ0FBRUxJQUFvQWpBaEF5QUNJQUpCR1dvMkFoUWdBaUFET2dBWUN3TkFRUUVnQWlnQ0ZDSURJQUpCR0dwTkRRSWFJQUlnQTBFQmF5SUROZ0lVSUFNc0FBQWdBQ2dDSUJEN0FrRi9SdzBBQ3d0QmZ5RURRUUFMUlEwQ0N5QUFJQUUyQWpCQkFRczZBRFFnQVNFREN5QUNRU0JxSkFBZ0F3c0pBQ0FBUVFFUTV3UUxDUUFnQUVFQUVPY0VDek1BSUFBZ0FSRE1BeUlCTmdJa0lBQWdBUkRHQWpZQ0xDQUFJQUFvQWlRUW53STZBRFVnQUNnQ0xFRUpUZ1JBRUh3QUN3c2VBRUdZa2dRUTlBSkI3SklFRU1RRFFlaVVCQkQwQWtHOGxRUVF4QU1MSHdCQjFJZ0VLQUlBUlFSQVFkaUlCQ0FCTmdJQVFkU0lCQ0FBTmdJQUN3c0VBRUVBQ3dZQVFjeUlCQXNHQUVISWlBUUxCZ0JCd0lnRUM5UUNBUWQvSXdCQklHc2lBeVFBSUFNZ0FDZ0NIQ0lFTmdJUUlBQW9BaFFoQlNBRElBSTJBaHdnQXlBQk5nSVlJQU1nQlNBRWF5SUJOZ0lVSUFFZ0Ftb2hCRUVDSVFjZ0EwRVFhaUVCQW44Q1FBSkFJQUFvQWp3Z0EwRVFha0VDSUFOQkRHb1FEeEQ4QWtVRVFBTkFJQVFnQXlnQ0RDSUZSZzBDSUFWQmYwd05BeUFCSUFVZ0FTZ0NCQ0lJU3lJR1FRTjBhaUlKSUFVZ0NFRUFJQVliYXlJSUlBa29BZ0JxTmdJQUlBRkJERUVFSUFZYmFpSUpJQWtvQWdBZ0NHczJBZ0FnQkNBRmF5RUVJQUFvQWp3Z0FVRUlhaUFCSUFZYklnRWdCeUFHYXlJSElBTkJER29RRHhEOEFrVU5BQXNMSUFSQmYwY05BUXNnQUNBQUtBSXNJZ0UyQWh3Z0FDQUJOZ0lVSUFBZ0FTQUFLQUl3YWpZQ0VDQUNEQUVMSUFCQkFEWUNIQ0FBUWdBM0F4QWdBQ0FBS0FJQVFTQnlOZ0lBUVFBZ0IwRUNSZzBBR2lBQ0lBRW9BZ1JyQ3lFRUlBTkJJR29rQUNBRUMxUUJBbjhnQVNBQUtBSlVJZ0VnQVVFQUlBSkJnQUpxSWdNUTFnTWlCQ0FCYXlBRElBUWJJZ01nQWlBQ0lBTkxHeUlDRUVBYUlBQWdBU0FEYWlJRE5nSlVJQUFnQXpZQ0NDQUFJQUVnQW1vMkFnUWdBZ3NFQUVJQUN3a0FJQUFvQWp3UUVRc3BBQ0FCSUFFb0FnQkJEMnBCY0hFaUFVRVFhallDQUNBQUlBRXBBd0FnQVNrRENCRFFBemtEQUF2QUZ3TVNmd0orQVh3akFFR3dCR3NpQ1NRQUlBbEJBRFlDTEFKQUlBRzlJaGhDZjFjRVFFRUJJUkpCNFA4Q0lSTWdBWm9pQWIwaEdBd0JDeUFFUVlBUWNRUkFRUUVoRWtIai93SWhFd3dCQzBIbS93SkI0ZjhDSUFSQkFYRWlFaHNoRXlBU1JTRVhDd0pBSUJoQ2dJQ0FnSUNBZ1BqL0FJTkNnSUNBZ0lDQWdQai9BRkVFUUNBQVFTQWdBaUFTUVFOcUlnMGdCRUgvLzN0eEVKZ0JJQUFnRXlBU0VJY0JJQUJCKy84Q1FmLy9BaUFGUVNCeElnTWJRZlAvQWtIMy93SWdBeHNnQVNBQllodEJBeENIQVF3QkN5QUpRUkJxSVJBQ1FBSi9Ba0FnQVNBSlFTeHFFSVFGSWdFZ0FhQWlBVVFBQUFBQUFBQUFBR0lFUUNBSklBa29BaXdpQmtFQmF6WUNMQ0FGUVNCeUloUkI0UUJIRFFFTUF3c2dCVUVnY2lJVVFlRUFSZzBDSUFrb0Fpd2hDMEVHSUFNZ0EwRUFTQnNNQVFzZ0NTQUdRUjFySWdzMkFpd2dBVVFBQUFBQUFBQ3dRYUloQVVFR0lBTWdBMEVBU0JzTElRb2dDVUV3YWlBSlFkQUNhaUFMUVFCSUd5SU9JUWdEUUNBSUFuOGdBVVFBQUFBQUFBRHdRV01nQVVRQUFBQUFBQUFBQUdaeEJFQWdBYXNNQVF0QkFBc2lBellDQUNBSVFRUnFJUWdnQVNBRHVLRkVBQUFBQUdYTnpVR2lJZ0ZFQUFBQUFBQUFBQUJpRFFBTEFrQWdDMEVCU0FSQUlBc2hBeUFJSVFZZ0RpRUhEQUVMSUE0aEJ5QUxJUU1EUUNBRFFSMGdBMEVkU0JzaERBSkFJQWhCQkdzaUJpQUhTUTBBSUF5dElSbENBQ0VZQTBBZ0JpQUdOUUlBSUJtR0lCaDhJaGdnR0VLQWxPdmNBNEFpR0VLQWxPdmNBMzU5UGdJQUlBY2dCa0VFYXlJR1RRUkFJQmhDLy8vLy93K0RJUmdNQVFzTElCaW5JZ05GRFFBZ0IwRUVheUlISUFNMkFnQUxBMEFnQnlBSUlnWkpCRUFnQmtFRWF5SUlLQUlBUlEwQkN3c2dDU0FKS0FJc0lBeHJJZ00yQWl3Z0JpRUlJQU5CQUVvTkFBc0xJQXBCR1dwQkNXMGhDQ0FEUVg5TUJFQWdDRUVCYWlFTklCUkI1Z0JHSVJVRFFFRUpRUUFnQTJzZ0EwRjNTQnNoRmdKQUlBWWdCMHNFUUVHQWxPdmNBeUFXZGlFUFFYOGdGblJCZjNNaEVVRUFJUU1nQnlFSUEwQWdDQ0FESUFnb0FnQWlEQ0FXZG1vMkFnQWdEQ0FSY1NBUGJDRURJQWhCQkdvaUNDQUdTUTBBQ3lBSElBZEJCR29nQnlnQ0FCc2hCeUFEUlEwQklBWWdBellDQUNBR1FRUnFJUVlNQVFzZ0J5QUhRUVJxSUFjb0FnQWJJUWNMSUFrZ0NTZ0NMQ0FXYWlJRE5nSXNJQTRnQnlBVkd5SUlJQTFCQW5ScUlBWWdCaUFJYTBFQ2RTQU5TaHNoQmlBRFFRQklEUUFMQzBFQUlRZ0NRQ0FHSUFkTkRRQWdEaUFIYTBFQ2RVRUpiQ0VJSUFjb0FnQWlERUVLU1EwQVFlUUFJUU1EUUNBSVFRRnFJUWdnQXlBTVN3MEJJQU5CQ213aEF3d0FDd0FMSUFwQkFDQUlJQlJCNWdCR0cyc2dGRUhuQUVZZ0NrRUFSM0ZySWdNZ0JpQU9hMEVDZFVFSmJFRUphMGdFUUNBRFFZRElBR29pRVVFSmJTSU1RUUowSUFsQk1HcEJCSElnQ1VIVUFtb2dDMEVBU0J0cVFZQWdheUVOUVFvaEF3SkFJQkVnREVFSmJHc2lERUVIU2cwQVFlUUFJUU1EUUNBTVFRRnFJZ3hCQ0VZTkFTQURRUXBzSVFNTUFBc0FDd0pBSUEwb0FnQWlFU0FSSUFOdUlnd2dBMnhySWc5QkFTQU5RUVJxSWdzZ0JrWWJSUTBBUkFBQUFBQUFBT0EvUkFBQUFBQUFBUEEvUkFBQUFBQUFBUGcvSUFZZ0MwWWJSQUFBQUFBQUFQZy9JQThnQTBFQmRpSUxSaHNnQ3lBUFN4c2hHa1FCQUFBQUFBQkFRMFFBQUFBQUFBQkFReUFNUVFGeEd5RUJBa0FnRncwQUlCTXRBQUJCTFVjTkFDQWFtaUVhSUFHYUlRRUxJQTBnRVNBUGF5SUxOZ0lBSUFFZ0dxQWdBV0VOQUNBTklBTWdDMm9pQXpZQ0FDQURRWUNVNjl3RFR3UkFBMEFnRFVFQU5nSUFJQWNnRFVFRWF5SU5Td1JBSUFkQkJHc2lCMEVBTmdJQUN5QU5JQTBvQWdCQkFXb2lBellDQUNBRFFmK1Q2OXdEU3cwQUN3c2dEaUFIYTBFQ2RVRUpiQ0VJSUFjb0FnQWlDMEVLU1EwQVFlUUFJUU1EUUNBSVFRRnFJUWdnQXlBTFN3MEJJQU5CQ213aEF3d0FDd0FMSUExQkJHb2lBeUFHSUFNZ0Jra2JJUVlMQTBBZ0JpSUxJQWROSWd4RkJFQWdDMEVFYXlJR0tBSUFSUTBCQ3dzQ1FDQVVRZWNBUndSQUlBUkJDSEVoRHd3QkN5QUlRWDl6UVg4Z0NrRUJJQW9iSWdZZ0NFb2dDRUY3U25FaUF4c2dCbW9oQ2tGL1FYNGdBeHNnQldvaEJTQUVRUWh4SWc4TkFFRjNJUVlDUUNBTURRQWdDMEVFYXlnQ0FDSURSUTBBUVFBaEJpQURRUXB3RFFCQkFDRU1RZVFBSVFZRFFDQURJQVp3UlFSQUlBeEJBV29oRENBR1FRcHNJUVlNQVFzTElBeEJmM01oQmdzZ0N5QU9hMEVDZFVFSmJDRURJQVZCWDNGQnhnQkdCRUJCQUNFUElBb2dBeUFHYWtFSmF5SURRUUFnQTBFQVNoc2lBeUFESUFwS0d5RUtEQUVMUVFBaER5QUtJQU1nQ0dvZ0JtcEJDV3NpQTBFQUlBTkJBRW9iSWdNZ0F5QUtTaHNoQ2dzZ0NpQVBja0VBUnlFUklBQkJJQ0FDSUFWQlgzRWlERUhHQUVZRWZ5QUlRUUFnQ0VFQVNoc0ZJQkFnQ0NBSVFSOTFJZ05xSUFOenJTQVFFS01DSWdaclFRRk1CRUFEUUNBR1FRRnJJZ1pCTURvQUFDQVFJQVpyUVFKSURRQUxDeUFHUVFKckloVWdCVG9BQUNBR1FRRnJRUzFCS3lBSVFRQklHem9BQUNBUUlCVnJDeUFLSUJKcUlCRnFha0VCYWlJTklBUVFtQUVnQUNBVElCSVFod0VnQUVFd0lBSWdEU0FFUVlDQUJITVFtQUVDUUFKQUFrQWdERUhHQUVZRVFDQUpRUkJxUVFoeUlRTWdDVUVRYWtFSmNpRUlJQTRnQnlBSElBNUxHeUlGSVFjRFFDQUhOUUlBSUFnUW93SWhCZ0pBSUFVZ0IwY0VRQ0FHSUFsQkVHcE5EUUVEUUNBR1FRRnJJZ1pCTURvQUFDQUdJQWxCRUdwTERRQUxEQUVMSUFZZ0NFY05BQ0FKUVRBNkFCZ2dBeUVHQ3lBQUlBWWdDQ0FHYXhDSEFTQUhRUVJxSWdjZ0RrME5BQXRCQUNFR0lCRkZEUUlnQUVHRGdBTkJBUkNIQVNBS1FRRklJQWNnQzA5eURRRURRQ0FITlFJQUlBZ1Fvd0lpQmlBSlFSQnFTd1JBQTBBZ0JrRUJheUlHUVRBNkFBQWdCaUFKUVJCcVN3MEFDd3NnQUNBR0lBcEJDU0FLUVFsSUd4Q0hBU0FLUVFscklRWWdCMEVFYWlJSElBdFBEUU1nQ2tFSlNpRURJQVloQ2lBRERRQUxEQUlMQWtBZ0NrRUFTQTBBSUFzZ0IwRUVhaUFISUF0Skd5RUZJQWxCRUdwQkNYSWhDeUFKUVJCcVFRaHlJUU1nQnlFSUEwQWdDeUFJTlFJQUlBc1Fvd0lpQmtZRVFDQUpRVEE2QUJnZ0F5RUdDd0pBSUFjZ0NFY0VRQ0FHSUFsQkVHcE5EUUVEUUNBR1FRRnJJZ1pCTURvQUFDQUdJQWxCRUdwTERRQUxEQUVMSUFBZ0JrRUJFSWNCSUFaQkFXb2hCa0VBSUFwQkFFd2dEeHNOQUNBQVFZT0FBMEVCRUljQkN5QUFJQVlnQ3lBR2F5SUdJQW9nQmlBS1NCc1Fod0VnQ2lBR2F5RUtJQWhCQkdvaUNDQUZUdzBCSUFwQmYwb05BQXNMSUFCQk1DQUtRUkpxUVJKQkFCQ1lBU0FBSUJVZ0VDQVZheENIQVF3Q0N5QUtJUVlMSUFCQk1DQUdRUWxxUVFsQkFCQ1lBUXNNQVFzZ0UwRUphaUFUSUFWQklIRWlDeHNoQ2dKQUlBTkJDMHNOQUVFTUlBTnJJZ1pGRFFCRUFBQUFBQUFBSUVBaEdnTkFJQnBFQUFBQUFBQUFNRUNpSVJvZ0JrRUJheUlHRFFBTElBb3RBQUJCTFVZRVFDQWFJQUdhSUJxaG9Kb2hBUXdCQ3lBQklCcWdJQnFoSVFFTElCQWdDU2dDTENJR0lBWkJIM1VpQm1vZ0JuT3RJQkFRb3dJaUJrWUVRQ0FKUVRBNkFBOGdDVUVQYWlFR0N5QVNRUUp5SVE0Z0NTZ0NMQ0VJSUFaQkFtc2lEQ0FGUVE5cU9nQUFJQVpCQVd0QkxVRXJJQWhCQUVnYk9nQUFJQVJCQ0hFaENDQUpRUkJxSVFjRFFDQUhJZ1VDZnlBQm1VUUFBQUFBQUFEZ1FXTUVRQ0FCcWd3QkMwR0FnSUNBZUFzaUJrSFEvd0pxTFFBQUlBdHlPZ0FBUVFFZ0EwRUFTaUFCSUFhM29VUUFBQUFBQUFBd1FLSWlBVVFBQUFBQUFBQUFBR0p5SUFnYlJTQUZRUUZxSWdjZ0NVRVFhbXRCQVVkeVJRUkFJQVZCTGpvQUFTQUZRUUpxSVFjTElBRkVBQUFBQUFBQUFBQmlEUUFMSUFCQklDQUNJQTRnRUNBSlFSQnFJQXhxYXlBSGFpQURJQkJxSUF4clFRSnFJQU5GSUFjZ0NXdEJFbXNnQTA1eUd5SURhaUlOSUFRUW1BRWdBQ0FLSUE0UWh3RWdBRUV3SUFJZ0RTQUVRWUNBQkhNUW1BRWdBQ0FKUVJCcUlBY2dDVUVRYW1zaUJSQ0hBU0FBUVRBZ0F5QUZJQkFnREdzaUEycHJRUUJCQUJDWUFTQUFJQXdnQXhDSEFRc2dBRUVnSUFJZ0RTQUVRWURBQUhNUW1BRWdDVUd3Qkdva0FDQUNJQTBnQWlBTlNoc0xRZ0VCZnlNQVFSQnJJZ01rQUNBQUtBSThJQUduSUFGQ0lJaW5JQUpCL3dGeElBTkJDR29RSGhEOEFpRUFJQU1wQXdnaEFTQURRUkJxSkFCQ2Z5QUJJQUFiQ3pNQkFYOGdBQ2dDRkNJRElBRWdBaUFBS0FJUUlBTnJJZ0VnQVNBQ1N4c2lBUkJBR2lBQUlBQW9BaFFnQVdvMkFoUWdBZ3ZVQVFFRWZ5TUFRU0JySWdNa0FDQURJQUUyQWhBZ0F5QUNJQUFvQWpBaUJFRUFSMnMyQWhRZ0FDZ0NMQ0VGSUFNZ0JEWUNIQ0FESUFVMkFoaEJmeUVFQWtBQ1FDQUFLQUk4SUFOQkVHcEJBaUFEUVF4cUVDVVEvQUpGQkVBZ0F5Z0NEQ0lFUVFCS0RRRUxJQUFnQUNnQ0FDQUVRVEJ4UVJCemNqWUNBQXdCQ3lBRUlBTW9BaFFpQmswTkFDQUFJQUFvQWl3aUJUWUNCQ0FBSUFVZ0JDQUdhMm8yQWdnZ0FDZ0NNQVJBSUFBZ0JVRUJhallDQkNBQklBSnFRUUZySUFVdEFBQTZBQUFMSUFJaEJBc2dBMEVnYWlRQUlBUUxPUUVCZmdKK0lBQW9Ba3hCZjB3RVFDQUFFSWdGREFFTElBQVFpQVVMSWdGQ2dJQ0FnQWhaQkVCQmxQOERRVDAyQWdCQmZ3OExJQUduQ3lFQkFuOGdBQkNjQVVFQmFpSUJFRG9pQWtVRVFFRUFEd3NnQWlBQUlBRVFRQXZhQVFFQ2Z3SkFJQUZCL3dGeElnTUVRQ0FBUVFOeEJFQURRQ0FBTFFBQUlnSkZJQUlnQVVIL0FYRkdjZzBESUFCQkFXb2lBRUVEY1EwQUN3c0NRQ0FBS0FJQUlnSkJmM01nQWtHQmdvUUlhM0ZCZ0lHQ2hIaHhEUUFnQTBHQmdvUUliQ0VEQTBBZ0FpQURjeUlDUVg5eklBSkJnWUtFQ0d0eFFZQ0Jnb1I0Y1EwQklBQW9BZ1FoQWlBQVFRUnFJUUFnQWtHQmdvUUlheUFDUVg5emNVR0FnWUtFZUhGRkRRQUxDd05BSUFBaUFpMEFBQ0lEQkVBZ0FrRUJhaUVBSUFNZ0FVSC9BWEZIRFFFTEN5QUNEd3NnQUJDY0FTQUFhZzhMSUFBTEJnQkJsUDhEQ3ljQkFYOGpBRUVRYXlJQkpBQWdBU0FBTmdJTUlBRW9BZ3doQUJDVUJTQUJRUkJxSkFBZ0FBc3FBUUYvSXdCQkVHc2lBU1FBSUFFZ0FEWUNEQ0FCS0FJTUVOMERFT0VISVFBZ0FVRVFhaVFBSUFBTDhnb0JEbjhqQUVFd2F5SUVKQUFnQUNnQzFBTWhCd0ovQWtBZ0FDZ0NtQUpGRFFBZ0J5Z0NMQTBBSUFBb0F0QURJZ01nQXlnQ0dDQUhLQUlRUVFodGFqWUNHQ0FIUVFBMkFoQkJBQ0FBSUFNb0FnZ1JBQUJGRFFFYUlBQW9BdFFDUVFGT0JFQkJBQ0VEQTBBZ0J5QURRUUowYWtFQU5nSVlJQU5CQVdvaUF5QUFLQUxVQWtnTkFBc0xJQWRCQURZQ0ZDQUhJQUFvQXBnQ05nSXNJQUFvQXJnRERRQWdCMEVBTmdJb0N5QUhLQUlvUlFSQUlBQW9BclFESVEwZ0FDZ0NzQU1oRHlBRUlBQTJBaWdnQkNBQUtBSVlJZ1lvQWdBaUNEWUNHQ0FFSUFZb0FnUWlBallDSENBSEtBSVFJUU1nQnlnQ0RDRUZJQVFnQnlnQ0pEWUNFQ0FFSUFjcEFodzNBd2dnQkNBSEtRSVVOd01BSUFBb0F2QUNRUUZPQkVBRFFDQUJJQXhCQW5RaUMyb29BZ0FoRGlBSElBdHFJZ29vQW1RaEJnSi9Ba0FDZnlBRFFRZE1CRUJCQUNBRVFSaHFJQVVnQTBFQUVHaEZEUWNhSUFRb0FpQWhCVUVCSUFRb0FpUWlBMEVJU0EwQkdnc2dCaUFGSUFOQkNHdDFRZjhCY1NJQ1FRSjBhaWdDa0FFaUNBMEJRUWtMSVFKQkFDQUVRUmhxSUFVZ0F5QUdJQUlRM2dFaUFrRUFTQTBGR2lBRUtBSWdJUVVnQkNnQ0pBd0JDeUFDSUFacVFaQUphaTBBQUNFQ0lBTWdDR3NMSVFNZ0NpZ0NqQUVoQ1FKQUFrQWdDaWdDdEFFaUNnUkFJQUlFZnlBQ0lBTktCRUJCQUNBRVFSaHFJQVVnQXlBQ0VHaEZEUWdhSUFRb0FpQWhCU0FFS0FJa0lRTUxJQUpCQW5RaUJrR1F2UUpxS0FJQUlnZ2dCU0FESUFKcklnTjFjU0lDUVFBZ0NDQUNJQVpCakwwQ2FpZ0NBRW9iYXdWQkFBc2hBaUFFSUFBZ0Myb29BdlFDUVFKMGFpSUdRUVJxSUFZb0FnUWdBbW9pQWpZQ0FDQU9JQUk3QVFCQkFTRUdJQXBCQWtnTkFRTkFBbjhDUUFKL0lBTkJCMHdFUUVFQUlBUkJHR29nQlNBRFFRQVFhRVVOQ3hvZ0JDZ0NJQ0VGUVFFZ0JDZ0NKQ0lEUVFoSURRRWFDeUFKSUFVZ0EwRUlhM1ZCL3dGeElnSkJBblJxS0FLUUFTSUlEUUZCQ1FzaEFrRUFJQVJCR0dvZ0JTQURJQWtnQWhEZUFTSUNRUUJJRFFrYUlBUW9BaUFoQlNBRUtBSWtEQUVMSUFJZ0NXcEJrQWxxTFFBQUlRSWdBeUFJYXdzaEF5QUNRUVIySVFnQ1FDQUNRUTl4SWdJRVFDQUNJQU5LQkVCQkFDQUVRUmhxSUFVZ0F5QUNFR2hGRFFvYUlBUW9BaUFoQlNBRUtBSWtJUU1MSUE0Z0R5QUdJQWhxSWdaQkFuUnFLQUlBUVFGMGFpQUNRUUowSWdoQmtMMENhaWdDQUNJTElBVWdBeUFDYXlJRGRYRWlBa0VBSUFzZ0FpQUlRWXk5QW1vb0FnQktHMnM3QVFBTUFRc2dDRUVQUncwRUlBWkJEMm9oQmdzZ0JrRUJhaUlHSUFwSURRQUxEQUVMUVFFaEJpQUNSUTBBSUFJZ0Ewb0VmMEVBSUFSQkdHb2dCU0FESUFJUWFFVU5CaG9nQkNnQ0lDRUZJQVFvQWlRRklBTUxJQUpySVFNTElBWWdEVW9OQUFOQUFuOENRQUovSUFOQkIwd0VRRUVBSUFSQkdHb2dCU0FEUVFBUWFFVU5DUm9nQkNnQ0lDRUZRUUVnQkNnQ0pDSURRUWhJRFFFYUN5QUpJQVVnQTBFSWEzVkIvd0Z4SWdKQkFuUnFLQUtRQVNJSURRRkJDUXNoQWtFQUlBUkJHR29nQlNBRElBa2dBaERlQVNJQ1FRQklEUWNhSUFRb0FpQWhCU0FFS0FJa0RBRUxJQUlnQ1dwQmtBbHFMUUFBSVFJZ0F5QUlhd3NoQXlBQ1FRUjJJUWdDUUNBQ1FROXhJZ0lFUUNBQ0lBTktCSDlCQUNBRVFSaHFJQVVnQXlBQ0VHaEZEUWdhSUFRb0FpQWhCU0FFS0FJa0JTQURDeUFDYXlFRERBRUxJQWhCRDBjTkFnc2dCaUFJYWtFQmFpSUdJQTFNRFFBTEN5QU1RUUZxSWd3Z0FDZ0M4QUpJRFFBTElBQW9BaGdoQmlBRUtBSVlJUWdnQkNnQ0hDRUNDeUFHSUFJMkFnUWdCaUFJTmdJQUlBY2dBellDRUNBSElBVTJBZ3dnQnlBRUtBSVFOZ0lrSUFjZ0JDa0RDRGNDSENBSElBUXBBd0EzQWhRTElBY2dCeWdDTEVFQmF6WUNMRUVCQ3lFSUlBUkJNR29rQUNBSUMrVUtBUXgvSXdCQk1Hc2lCQ1FBSUFBb0F0UURJUVlDZndKQUlBQW9BcGdDUlEwQUlBWW9BaXdOQUNBQUtBTFFBeUlESUFNb0FoZ2dCaWdDRUVFSWJXbzJBaGdnQmtFQU5nSVFRUUFnQUNBREtBSUlFUUFBUlEwQkdpQUFLQUxVQWtFQlRnUkFRUUFoQXdOQUlBWWdBMEVDZEdwQkFEWUNHQ0FEUVFGcUlnTWdBQ2dDMUFKSURRQUxDeUFHUVFBMkFoUWdCaUFBS0FLWUFqWUNMQ0FBS0FLNEF3MEFJQVpCQURZQ0tBc2dCaWdDS0VVRVFDQUVJQUEyQWlnZ0JDQUFLQUlZSWdJb0FnQWlDRFlDR0NBRUlBSW9BZ1FpQ1RZQ0hDQUdLQUlRSVFNZ0JpZ0NEQ0VGSUFRZ0JpZ0NKRFlDRUNBRUlBWXBBaHczQXdnZ0JDQUdLUUlVTndNQUlBQW9BdkFDUVFGT0JFQURRQ0FCSUF0QkFuUWlDbW9vQWdBaERDQUdJQXBxSWdnb0FtUWhBZ0ovQWtBQ2Z5QURRUWRNQkVCQkFDQUVRUmhxSUFVZ0EwRUFFR2hGRFFjYUlBUW9BaUFoQlVFQklBUW9BaVFpQTBFSVNBMEJHZ3NnQWlBRklBTkJDR3QxUWY4QmNTSUhRUUowYWlnQ2tBRWlDUTBCUVFrTElRbEJBQ0FFUVJocUlBVWdBeUFDSUFrUTNnRWlBa0VBU0EwRkdpQUVLQUlnSVFVZ0JDZ0NKQXdCQ3lBQ0lBZHFRWkFKYWkwQUFDRUNJQU1nQ1dzTElRTWdDQ2dDakFFaENRSkFBa0FnQ0NnQ3RBRWlEUVJBSUFJRWZ5QUNJQU5LQkVCQkFDQUVRUmhxSUFVZ0F5QUNFR2hGRFFnYUlBUW9BaUFoQlNBRUtBSWtJUU1MSUFKQkFuUWlCMEdRdlFKcUtBSUFJZ2dnQlNBRElBSnJJZ04xY1NJQ1FRQWdDQ0FDSUFkQmpMMENhaWdDQUVvYmF3VkJBQXNoQ0NBRUlBQWdDbW9vQXZRQ1FRSjBhaUlDUVFScUlBSW9BZ1FnQ0dvaUFqWUNBQ0FNSUFJN0FRQkJBU0VJSUExQkFrZ05BUU5BQW44Q1FBSi9JQU5CQjB3RVFFRUFJQVJCR0dvZ0JTQURRUUFRYUVVTkN4b2dCQ2dDSUNFRlFRRWdCQ2dDSkNJRFFRaElEUUVhQ3lBSklBVWdBMEVJYTNWQi93RnhJZ0pCQW5ScUtBS1FBU0lIRFFGQkNRc2hBa0VBSUFSQkdHb2dCU0FESUFrZ0FoRGVBU0lDUVFCSURRa2FJQVFvQWlBaEJTQUVLQUlrREFFTElBSWdDV3BCa0FscUxRQUFJUUlnQXlBSGF3c2hBeUFDUVFSMklRY0NRQ0FDUVE5eElnSUVRQ0FDSUFOS0JFQkJBQ0FFUVJocUlBVWdBeUFDRUdoRkRRb2FJQVFvQWlBaEJTQUVLQUlrSVFNTElBd2dCeUFJYWlJSFFRSjBRZEM5QW1vb0FnQkJBWFJxSUFKQkFuUWlDRUdRdlFKcUtBSUFJZ29nQlNBRElBSnJJZ04xY1NJQ1FRQWdDaUFDSUFoQmpMMENhaWdDQUVvYmF6c0JBQXdCQ3lBSFFROUhEUVFnQ0VFUGFpRUhDeUFIUVFGcUlnZ2dEVWdOQUFzZ0IwRStUQTBCREFJTFFRRWhDQ0FDUlEwQUlBSWdBMG9FZjBFQUlBUkJHR29nQlNBRElBSVFhRVVOQmhvZ0JDZ0NJQ0VGSUFRb0FpUUZJQU1MSUFKcklRTUxBMEFDZndKQUFuOGdBMEVIVEFSQVFRQWdCRUVZYWlBRklBTkJBQkJvUlEwSkdpQUVLQUlnSVFWQkFTQUVLQUlrSWdOQkNFZ05BUm9MSUFrZ0JTQURRUWhyZFVIL0FYRWlBa0VDZEdvb0FwQUJJZ2NOQVVFSkN5RUNRUUFnQkVFWWFpQUZJQU1nQ1NBQ0VONEJJZ0pCQUVnTkJ4b2dCQ2dDSUNFRklBUW9BaVFNQVFzZ0FpQUpha0dRQ1dvdEFBQWhBaUFESUFkckN5RURJQUpCQkhZaEJ3SkFJQUpCRDNFaUFnUkFJQUlnQTBvRWYwRUFJQVJCR0dvZ0JTQURJQUlRYUVVTkNCb2dCQ2dDSUNFRklBUW9BaVFGSUFNTElBSnJJUU1NQVFzZ0IwRVBSdzBDQ3lBSElBaHFRUUZxSWdoQndBQklEUUFMQ3lBTFFRRnFJZ3NnQUNnQzhBSklEUUFMSUFRb0Fod2hDU0FFS0FJWUlRZ2dBQ2dDR0NFQ0N5QUNJQWsyQWdRZ0FpQUlOZ0lBSUFZZ0F6WUNFQ0FHSUFVMkFnd2dCaUFFS0FJUU5nSWtJQVlnQkNrRENEY0NIQ0FHSUFRcEF3QTNBaFFMSUFZZ0JpZ0NMRUVCYXpZQ0xFRUJDeUVISUFSQk1Hb2tBQ0FIQytjRkFRdC9Jd0JCTUdzaUF5UUFJQUFvQXFnRElRb2dBQ2dDMUFNaEJBSi9Ba0FnQUNnQ21BSkZEUUFnQkNnQ0xBMEFJQUFvQXRBRElnVWdCU2dDR0NBRUtBSVFRUWh0YWpZQ0dDQUVRUUEyQWhCQkFDQUFJQVVvQWdnUkFBQkZEUUVhSUFBb0F0UUNRUUZPQkVCQkFDRUZBMEFnQkNBRlFRSjBha0VBTmdJWUlBVkJBV29pQlNBQUtBTFVBa2dOQUFzTElBUkJBRFlDRkNBRUlBQW9BcGdDTmdJc0lBQW9BcmdERFFBZ0JFRUFOZ0lvQ3lBRUtBSW9SUVJBSUFNZ0FEWUNLQ0FESUFBb0FoZ2lBaWdDQUNJSU5nSVlJQU1nQWlnQ0JDSUdOZ0ljSUFRb0FoQWhCU0FFS0FJTUlRY2dBeUFFS0FJa05nSVFJQU1nQkNrQ0hEY0RDQ0FESUFRcEFoUTNBd0FnQUNnQzhBSkJBVTRFUUVFQUlRZ0RRQ0FCSUFoQkFuUWlBbW9vQWdBaEN5QUVJQUFnQUNBQ2FpZ0M5QUpCQW5RaURHb29BdGdDS0FJVVFRSjBhaWdDTUNFQ0FuOENRQUovSUFWQkIwd0VRRUVBSUFOQkdHb2dCeUFGUVFBUWFFVU5CeG9nQXlnQ0lDRUhRUUVnQXlnQ0pDSUZRUWhJRFFFYUN5QUNJQWNnQlVFSWEzVkIvd0Z4SWdaQkFuUnFLQUtRQVNJSkRRRkJDUXNoQ1VFQUlBTkJHR29nQnlBRklBSWdDUkRlQVNJQ1FRQklEUVVhSUFNb0FpQWhCeUFES0FJa0RBRUxJQUlnQm1wQmtBbHFMUUFBSVFJZ0JTQUphd3NoQlNBQ0JIOGdBaUFGU2dSQVFRQWdBMEVZYWlBSElBVWdBaEJvUlEwRkdpQURLQUlnSVFjZ0F5Z0NKQ0VGQ3lBQ1FRSjBJZ1pCa0wwQ2FpZ0NBQ0lKSUFjZ0JTQUNheUlGZFhFaUFrRUFJQWtnQWlBR1FZeTlBbW9vQWdCS0cyc0ZRUUFMSVFZZ0F5QU1haUlDUVFScUlBSW9BZ1FnQm1vaUFqWUNBQ0FMSUFJZ0NuUTdBUUFnQ0VFQmFpSUlJQUFvQXZBQ1NBMEFDeUFES0FJY0lRWWdBeWdDR0NFSUlBQW9BaGdoQWdzZ0FpQUdOZ0lFSUFJZ0NEWUNBQ0FFSUFVMkFoQWdCQ0FITmdJTUlBUWdBeWdDRURZQ0pDQUVJQU1wQXdnM0Fod2dCQ0FES1FNQU53SVVDeUFFSUFRb0FpeEJBV3MyQWl4QkFRc2hCaUFEUVRCcUpBQWdCZ3VQQmdFTWZ5TUFRU0JySWdRa0FDQUFLQUxVQXlFRkFuOENRQ0FBS0FLWUFrVU5BQ0FGS0FJc0RRQWdBQ2dDMEFNaUFpQUNLQUlZSUFVb0FoQkJDRzFxTmdJWUlBVkJBRFlDRUVFQUlBQWdBaWdDQ0JFQUFFVU5BUm9nQUNnQzFBSkJBVTRFUUVFQUlRSURRQ0FGSUFKQkFuUnFRUUEyQWhnZ0FrRUJhaUlDSUFBb0F0UUNTQTBBQ3dzZ0JVRUFOZ0lVSUFVZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBRlFRQTJBaWdMSUFVb0FpaEZCRUFDUUNBRktBSVVJZ0lFUUNBQ1FRRnJJUU1NQVFzZ0JDQUFOZ0lZSUFRZ0FDZ0NHQ0lDS0FJQU5nSUlJQVFnQWlnQ0JEWUNEQ0FGS0FJUUlRSWdCU2dDRENFR0FrQWdBQ2dDbkFNaUJ5QUFLQUtnQXlJS1NnMEFJQVVvQWtBaENDQUJLQUlBSVFzZ0FDZ0NzQU1oRENBQUtBS29BeUVOQTBBQ2Z3SkFBbjhnQWtFSFRBUkFRUUFnQkVFSWFpQUdJQUpCQUJCb1JRMElHaUFFS0FJUUlRWkJBU0FFS0FJVUlnSkJDRWdOQVJvTElBZ2dCaUFDUVFocmRVSC9BWEVpQVVFQ2RHb29BcEFCSWdNTkFVRUpDeUVEUVFBZ0JFRUlhaUFHSUFJZ0NDQURFTjRCSWdGQkFFZ05CaG9nQkNnQ0VDRUdJQVFvQWhRTUFRc2dBU0FJYWtHUUNXb3RBQUFoQVNBQ0lBTnJDeUVDSUFGQkJIWWhBd0pBSUFGQkQzRWlBUVJBSUFFZ0Frb0VRRUVBSUFSQkNHb2dCaUFDSUFFUWFFVU5CeG9nQkNnQ0VDRUdJQVFvQWhRaEFnc2dDeUFNSUFNZ0Iyb2lBMEVDZEdvb0FnQkJBWFJxSUFGQkFuUWlDVUdRdlFKcUtBSUFJZ2NnQmlBQ0lBRnJJZ0oxY1NJQlFRQWdCeUFCSUFsQmpMMENhaWdDQUVvYmF5QU5kRHNCQUF3QkN5QURRUTlIQkVBZ0EwVU5BeUFDSUFOSUJFQkJBQ0FFUVFocUlBWWdBaUFERUdoRkRRY2FJQVFvQWhBaEJpQUVLQUlVSVFJTElBTkJBblJCa0wwQ2FpZ0NBQ0FHSUFJZ0Eyc2lBblZ4UVg4Z0EzUkJmM05xSVFNTUF3c2dCMEVQYWlFREN5QURRUUZxSVFjZ0F5QUtTQTBBQzBFQUlRTUxJQUFvQWhnaUFDQUVLQUlJTmdJQUlBQWdCQ2dDRERZQ0JDQUZJQUkyQWhBZ0JTQUdOZ0lNQ3lBRklBTTJBaFFMSUFVZ0JTZ0NMRUVCYXpZQ0xFRUJDeUVKSUFSQklHb2tBQ0FKQzZrREFRaC9Jd0JCSUdzaUJDUUFJQUFvQXRRRElRTUNRQUpBSUFBb0FwZ0NSUTBBSUFNb0Fpd05BQ0FBS0FMUUF5SUNJQUlvQWhnZ0F5Z0NFRUVJYldvMkFoZ2dBMEVBTmdJUUlBQWdBaWdDQ0JFQUFFVU5BU0FBS0FMVUFrRUJUZ1JBUVFBaEFnTkFJQU1nQWtFQ2RHcEJBRFlDR0NBQ1FRRnFJZ0lnQUNnQzFBSklEUUFMQ3lBRFFRQTJBaFFnQXlBQUtBS1lBallDTENBQUtBSzRBdzBBSUFOQkFEWUNLQXNnQkNBQU5nSVlJQVFnQUNnQ0dDSUZLQUlBSWdZMkFnZ2dCQ0FGS0FJRUlnYzJBZ3hCQVNFSklBTW9BaEFoQWlBREtBSU1JUWdnQUNnQzhBSkJBVTRFUUVFQklBQW9BcWdEZENFR1FRQWhCUU5BSUFKQkFFd0VRQ0FFUVFocUlBZ2dBa0VCRUdoRkJFQkJBQ0VKREFRTElBUW9BaEFoQ0NBRUtBSVVJUUlMSUFnZ0FrRUJheUlDZGtFQmNRUkFJQUVnQlVFQ2RHb29BZ0FpQnlBSEx3RUFJQVp5T3dFQUN5QUZRUUZxSWdVZ0FDZ0M4QUpJRFFBTElBUW9BZ3doQnlBRUtBSUlJUVlnQUNnQ0dDRUZDeUFGSUFjMkFnUWdCU0FHTmdJQUlBTWdBallDRUNBRElBZzJBZ3dnQXlBREtBSXNRUUZyTmdJc0N5QUVRU0JxSkFBZ0NRdW1DZ0VSZnlNQVFhQUNheUlESkFBZ0FDZ0MxQU1oQmdKQUFrQWdBQ2dDbUFKRkRRQWdCaWdDTEEwQUlBQW9BdEFESWdrZ0NTZ0NHQ0FHS0FJUVFRaHRhallDR0NBR1FRQTJBaEFnQUNBSktBSUlFUUFBUlEwQklBQW9BdFFDUVFGT0JFQURRQ0FHSUFKQkFuUnFRUUEyQWhnZ0FrRUJhaUlDSUFBb0F0UUNTQTBBQ3dzZ0JrRUFOZ0lVSUFZZ0FDZ0NtQUkyQWl3Z0FDZ0N1QU1OQUNBR1FRQTJBaWdMQWtBZ0JpZ0NLRVVFUUNBQUtBS3dBeUVOSUFBb0FxQURJUXNnQUNnQ3FBTWhCQ0FESUFBMkFwZ0NJQU1nQUNnQ0dDSUpLQUlBTmdLSUFpQURJQWtvQWdRMkFvd0NRWDhnQkhRaERrRUJJQVIwSVF3Z0JpZ0NFQ0VDSUFBb0Fwd0RJUVFnQVNnQ0FDRUtJQVlvQWd3aEJRSi9Ba0FnQmlnQ0ZDSUpCRUFNQVFzZ0JpZ0NRQ0VQQTBBQ2Z3SkFBbjhnQWtFSFRBUkFJQU5CaUFKcUlBVWdBa0VBRUdoRkRRZ2dBeWdDa0FJaEJVRUJJQU1vQXBRQ0lnSkJDRWdOQVJvTElBOGdCU0FDUVFocmRVSC9BWEVpQVVFQ2RHb29BcEFCSWdrTkFVRUpDeUVCSUFOQmlBSnFJQVVnQWlBUElBRVEzZ0VpQVVFQVNBMEdJQU1vQXBBQ0lRVWdBeWdDbEFJTUFRc2dBU0FQYWtHUUNXb3RBQUFoQVNBQ0lBbHJDeUVDSUFGQkJIWWhDQUpBQWtBQ1FBSkFBa0FnQVVFUGNRNENBZ0VBQ3lBQUtBSUFJZ0ZCK1FBMkFoUWdBRUYvSUFFb0FnUVJBZ0FMSUFKQkFFd0VRQ0FEUVlnQ2FpQUZJQUpCQVJCb1JRMElJQU1vQXBBQ0lRVWdBeWdDbEFJaEFnc2dEQ0FPSUFVZ0FrRUJheUlDZGtFQmNSc2hFQXdCQzBFQUlSQWdDRUVQUmcwQVFRRWhDU0FJUlEwRElBSWdDRWdFUUNBRFFZZ0NhaUFGSUFJZ0NCQm9SUTBISUFNb0FwQUNJUVVnQXlnQ2xBSWhBZ3NnQ0VFQ2RFR1F2UUpxS0FJQUlBVWdBaUFJYXlJQ2RYRkJBU0FJZEdvaUNRMEREQUVMSUFRZ0N5QUVJQXRLR3lJU1FRRnFJUWtDUUFOQUFrQWdDaUFOSUFRaUFVRUNkR29vQWdCQkFYUnFJZ1F2QVFBRVFDQUNRUUJNQkVBZ0EwR0lBbW9nQlNBQ1FRRVFhRVVOQ2lBREtBS1FBaUVGSUFNb0FwUUNJUUlMSUFVZ0FrRUJheUlDZGtFQmNVVU5BU0FNSUFRdUFRQWlFWEVOQVNBRUlCRWdEQ0FPSUJGQmYwb2JhanNCQUF3QkN5QUlRUUZJRFFJZ0NFRUJheUVJQ3lBQlFRRnFJUVFnQVNBU1J3MEFDeUFKSVFFTElCQUVRQ0FLSUEwZ0FVRUNkR29vQWdBaUJFRUJkR29nRURzQkFDQURJQWRCQW5ScUlBUTJBZ0FnQjBFQmFpRUhDeUFCUVFGcUlRUWdBU0FMU0EwQkN3dEJBQXdCQ3lBRUlBc2dCQ0FMU2hzaEN3TkFBa0FnQ2lBTklBUWlBVUVDZEdvb0FnQkJBWFJxSWdRdkFRQkZEUUFnQWtFQVRBUkFJQU5CaUFKcUlBVWdBa0VCRUdoRkRRVWdBeWdDa0FJaEJTQURLQUtVQWlFQ0N5QUZJQUpCQVdzaUFuWkJBWEZGRFFBZ0RDQUVMZ0VBSWdoeERRQWdCQ0FJSUF3Z0RpQUlRWDlLRzJvN0FRQUxJQUZCQVdvaEJDQUJJQXRIRFFBTElBbEJBV3NMSVFRZ0FDZ0NHQ0lBSUFNb0FvZ0NOZ0lBSUFBZ0F5Z0NqQUkyQWdRZ0JpQUVOZ0lVSUFZZ0FqWUNFQ0FHSUFVMkFnd0xJQVlnQmlnQ0xFRUJhellDTEVFQklRUU1BUXRCQUNFRUlBZEZEUUFnQjBFQmF5RUFJQWRCQTNFaUFnUkFBMEFnQ2lBRElBZEJBV3NpQjBFQ2RHb29BZ0JCQVhScVFRQTdBUUFnQWtFQmF5SUNEUUFMQ3lBQVFRTkpEUUFEUUNBS0lBZEJBblFnQTJvaUFFRUVheWdDQUVFQmRHcEJBRHNCQUNBS0lBQkJDR3NvQWdCQkFYUnFRUUE3QVFBZ0NpQUFRUXhyS0FJQVFRRjBha0VBT3dFQUlBb2dBeUFIUVFScklnZEJBblJxS0FJQVFRRjBha0VBT3dFQUlBY05BQXNMSUFOQm9BSnFKQUFnQkF1MUN3RUhmeUFBS0FLY0F5RUNJQUFvQXRRRElRTUNRQ0FBS0FMZ0FRUkFJQUFvQXFBRElRRUNRQUpBQWtBZ0FrVUVRQ0FCUlEwQkRBSUxJQUVnQWtnTkFTQUJJQUFvQXJRRFNnMEJJQUFvQXRRQ1FRRkhEUUVMQWtBZ0FDZ0NwQU1pQVVVRVFDQUFLQUtvQXlFRURBRUxJQUZCQVdzaUJDQUFLQUtvQTBjTkFRc2dCRUVPU0EwQkN5QUFLQUlBSWdFZ0FqWUNHQ0FCUVJFMkFoUWdBQ2dDQUNBQUtBS2dBellDSENBQUtBSUFJQUFvQXFRRE5nSWdJQUFvQWdBZ0FDZ0NxQU0yQWlRZ0FDQUFLQUlBS0FJQUVRRUFDeUFBS0FMVUFpSUNRUUZPQkVCQkFDRUVBMEFnQUNBRVFRSjBhaWdDMkFJb0FnUWhCeUFBS0FLZ0FTRUZBbjlCQUNBQUtBS2NBeUlCUlEwQUdpQUJJQVVnQjBFSWRHb29BZ0JCZjBvTkFCb2dBQ2dDQUNJQklBYzJBaGdnQVVIMkFEWUNGQ0FBS0FJQVFRQTJBaHdnQUVGL0lBQW9BZ0FvQWdRUkFnQWdBQ2dDbkFNTElnSWdBQ2dDb0FOTUJFQURRQ0FBS0FLa0F5QUZJQWRCQ0hScUlBSkJBblJxSWdZb0FnQWlBVUVBSUFGQkFFb2JSd1JBSUFBb0FnQWlBU0FITmdJWUlBRkI5Z0EyQWhRZ0FDZ0NBQ0FDTmdJY0lBQkJmeUFBS0FJQUtBSUVFUUlBQ3lBR0lBQW9BcWdETmdJQUlBSWdBQ2dDb0FOSUlRRWdBa0VCYWlFQ0lBRU5BQXNMSUFSQkFXb2lCQ0FBS0FMVUFpSUNTQTBBQ3dzZ0EwSHBBVUhxQVNBQUtBS2NBeUlFRzBIckFVSHNBU0FFR3lBQUtBS2tBeHMyQWdRQ1FDQUNRUUZJRFFCQkFDRUNBMEFnQUNBQ1FRSjBJZ1pxS0FMWUFpRUJBa0FnQkVVRVFDQUFLQUtrQXcwQklBQkJBU0FCS0FJVUlnRWdBeUFCUVFKMGFrRXdhaENKQXd3QkN5QUFRUUFnQVNnQ0dDSUJJQU1nQVVFQ2RHb2lBVUV3YWhDSkF5QURJQUVvQWpBMkFrQUxJQU1nQm1wQkFEWUNHQ0FDUVFGcUlnSWdBQ2dDMUFKT0RRRWdBQ2dDbkFNaEJBd0FDd0FMSUFOQkFEWUNGQXdCQ3dKQUFrQWdBZzBBSUFBb0FxUUREUUFnQUNnQ3FBTU5BQ0FBS0FMY0FVRUJJQUFvQXFBRElnRkJQMG9iUlEwQklBRWdBQ2dDdEFOR0RRRUxJQUFvQWdBaUFVSDlBRFlDRkNBQVFYOGdBU2dDQkJFQ0FBc2dBMEh0QVVIdUFTQUFLQUswQTBFL1JoczJBZ1JCQUNFQ0lBQW9BdFFDUVFCS0JFQURRQ0FBUVFFZ0FDQUNRUUowSWdWcUtBTFlBaUlHS0FJVUlnRWdBeUFCUVFKMGFrSEVBR29RaVFNZ0FDZ0N0QU1FUUNBQVFRQWdCaWdDR0NJQklBTWdBVUVDZEdwQjFBQnFFSWtEQ3lBRElBVnFRUUEyQWhnZ0FrRUJhaUlDSUFBb0F0UUNTQTBBQ3dzZ0FDZ0M4QUpCQUV3TkFBTkFJQU1nQkVFQ2RDSUJhaUlHSUFNZ0FDQUFJQUZxS0FMMEFrRUNkR29vQXRnQ0lnRW9BaFJCQW5ScUtBSkVOZ0prSUFZZ0F5QUJLQUlZUVFKMGFpZ0NWRFlDakFFQ1FDQUJLQUkwUlFSQVFRQWhBZ3dCQ3lBQktBSWtJUVVnQVNnQ0tDRUJRUUVoQWdKL0FrQUNRQUpBQWtBQ1FBSkFBa0FnQUNnQ3RBTU9NUWdHQmdBR0JnWUdBUVlHQmdZR0JnSUdCZ1lHQmdZR0JnTUdCZ1lHQmdZR0JnWUdCQVlHQmdZR0JnWUdCZ1lHQmdVR0N5QUJRUUZIUVFOMElBVkJBVWRCQW5SeVFjQzJBbW9NQmdzZ0FVRUJheUlCUVFJZ0FVRUNTUnRCREd3Z0JVRUJheUlCUVFJZ0FVRUNTUnRCQW5ScVFkQzJBbW9NQlFzZ0FVRUJheUlCUVFNZ0FVRURTUnRCQkhRZ0JVRUJheUlCUVFNZ0FVRURTUnRCQW5ScVFZQzNBbW9NQkFzZ0FVRUJheUlCUVFRZ0FVRUVTUnRCRkd3Z0JVRUJheUlCUVFRZ0FVRUVTUnRCQW5ScVFjQzNBbW9NQXdzZ0FVRUJheUlCUVFVZ0FVRUZTUnRCR0d3Z0JVRUJheUlCUVFVZ0FVRUZTUnRCQW5ScVFiQzRBbW9NQWdzZ0FVRUJheUlCUVFZZ0FVRUdTUnRCSEd3Z0JVRUJheUlCUVFZZ0FVRUdTUnRCQW5ScVFjQzVBbW9NQVFzZ0FVRUJheUlCUVFjZ0FVRUhTUnRCQlhRZ0JVRUJheUlCUVFjZ0FVRUhTUnRCQW5ScVFaQzdBbW9MS0FJQVFRRnFJUUlMSUFZZ0FqWUN0QUVnQkVFQmFpSUVJQUFvQXZBQ1NBMEFDd3NnQTBFQU5nSW9JQU5DQURjQ0RDQURJQUFvQXBnQ05nSXNDeTBCQVg4Z0FDZ0MwQU1pQVNBQktBSVlJQUFvQXRRRElnQkJFR29vQWdCQkNHMXFOZ0lZSUFCQkFEWUNFQXM4QUNBQUlBRWdBaWdDQUNBRUlBVW9BZ0JCQW5ScUlBQW9BdHdES0FJTUVRY0FJQVVnQlNnQ0FFRUJhallDQUNBQ0lBSW9BZ0JCQVdvMkFnQUx2UU1CREg4Z0FrRUNkQ0lDSUFFb0FnaHFLQUlBSVFVZ0FTZ0NCQ0FDYWlnQ0FDRUdJQUVvQWdBZ0Ftb29BZ0FoQnlBREtBSUFJUUVnQUNnQzBBSWhBaUFBS0FMY0F5SURLQUljSVFnZ0F5Z0NHQ0VMSUFNb0FoUWhEQ0FES0FJUUlRMGdBQ2dDY0NJRFFRRjJJZzRFZndOQUlBd2dCaTBBQUVFQ2RDSUVhaWdDQUNFRElBc2dCUzBBQUVFQ2RDSUphaWdDQUNFS0lBUWdDR29vQWdBaER5QUJJQUlnQ1NBTmFpZ0NBQ0lKSUFjdEFBQWlCR3BxTFFBQU9nQUFJQUVnQWlBRUlBb2dEMnBCRUhVaUNtcHFMUUFBT2dBQklBRWdBaUFESUFScWFpMEFBRG9BQWlBQklBSWdDU0FITFFBQklnUnFhaTBBQURvQUF5QUJJQUlnQkNBS2Ftb3RBQUE2QUFRZ0FTQUNJQU1nQkdwcUxRQUFPZ0FGSUFGQkJtb2hBU0FIUVFKcUlRY2dCVUVCYWlFRklBWkJBV29oQmlBT1FRRnJJZzROQUFzZ0FDZ0NjQVVnQXd0QkFYRUVRQ0FNSUFZdEFBQkJBblFpQUdvb0FnQWhBeUFMSUFVdEFBQkJBblFpQldvb0FnQWhCaUFBSUFocUtBSUFJUWdnQVNBQ0lBY3RBQUFpQUNBRklBMXFLQUlBYW1vdEFBQTZBQUFnQVNBQ0lBQWdCaUFJYWtFUWRXcHFMUUFBT2dBQklBRWdBaUFBSUFOcWFpMEFBRG9BQWdzTGl3SUJCSDhqQUVFUWF5SUhKQUFDUUFKQUlBQW9BdHdESWdNb0FpUUVRQ0FEUVNCcVFRQWdCQ0FGS0FJQVFRSjBha0VBUVFFZ0F5Z0NLQkNIQXlBRFFRQTJBaVFnQlNBRktBSUFRUUZxTmdJQUlBTWdBeWdDTEVFQmF6WUNMQXdCQ3lBREtBSXNJUWdnQnlBRUlBVW9BZ0FpQ1VFQ2RHb2lDaWdDQURZQ0NDQUhBbjhnQmlBSmF5SUVJQWhCQWlBSVFRSkpHeUlHSUFRZ0Jra2JJZ1JCQWs4RVFDQUtLQUlFREFFTElBTkJBVFlDSkNBREtBSWdDellDRENBQUlBRWdBaWdDQUNBSFFRaHFJQU1vQWd3UkJ3QWdBeWdDSkNFQUlBVWdCU2dDQUNBRWFqWUNBQ0FESUFNb0Fpd2dCR3MyQWl3Z0FBMEJDeUFDSUFJb0FnQkJBV28yQWdBTElBZEJFR29rQUF1SkJRRU9meUFDUVFKMElnVWdBU2dDQ0dvb0FnQWhDaUFCS0FJRUlBVnFLQUlBSVFzZ0FTZ0NBQ0lGSUFKQkEzUWlBV29vQWdBaEJ5QUZJQUZCQkhKcUtBSUFJUWdnQXlnQ0JDRUNJQU1vQWdBaEF5QUFLQUxRQWlFRUlBQW9BdHdESWdFb0Fod2hEaUFCS0FJWUlROGdBU2dDRkNFUUlBRW9BaEFoRVNBQUtBSndJZ0ZCQVhZaUNRUi9BMEFnRUNBTExRQUFRUUowSWdGcUtBSUFJUXdnRHlBS0xRQUFRUUowSWdacUtBSUFJUVVnQVNBT2FpZ0NBQ0VCSUFNZ0JDQUdJQkZxS0FJQUlnMGdCeTBBQUNJR2Ftb3RBQUE2QUFBZ0F5QUVJQVlnQVNBRmFrRVFkU0lGYW1vdEFBQTZBQUVnQXlBRUlBWWdER3BxTFFBQU9nQUNJQU1nQkNBTklBY3RBQUVpQVdwcUxRQUFPZ0FESUFNZ0JDQUJJQVZxYWkwQUFEb0FCQ0FESUFRZ0FTQU1hbW90QUFBNkFBVWdBaUFFSUEwZ0NDMEFBQ0lCYW1vdEFBQTZBQUFnQWlBRUlBRWdCV3BxTFFBQU9nQUJJQUlnQkNBQklBeHFhaTBBQURvQUFpQUNJQVFnRFNBSUxRQUJJZ0ZxYWkwQUFEb0FBeUFDSUFRZ0FTQUZhbW90QUFBNkFBUWdBaUFFSUFFZ0RHcHFMUUFBT2dBRklBSkJCbW9oQWlBSVFRSnFJUWdnQTBFR2FpRURJQWRCQW1vaEJ5QUtRUUZxSVFvZ0MwRUJhaUVMSUFsQkFXc2lDUTBBQ3lBQUtBSndCU0FCQzBFQmNRUkFJQkFnQ3kwQUFFRUNkQ0lBYWlnQ0FDRUpJQThnQ2kwQUFFRUNkQ0lCYWlnQ0FDRUZJQUFnRG1vb0FnQWhBQ0FESUFRZ0FTQVJhaWdDQUNJQklBY3RBQUFpQm1wcUxRQUFPZ0FBSUFNZ0JDQUdJQUFnQldwQkVIVWlBR3BxTFFBQU9nQUJJQU1nQkNBR0lBbHFhaTBBQURvQUFpQUNJQVFnQVNBSUxRQUFJZ05xYWkwQUFEb0FBQ0FDSUFRZ0FDQURhbW90QUFBNkFBRWdBaUFFSUFNZ0NXcHFMUUFBT2dBQ0N3c2JBUUYvSUFBb0F0d0RJZ0ZCQURZQ0pDQUJJQUFvQW5RMkFpd0x3QU1CR1g4Z0EwRUJUZ1JBUVFBZ0FDZ0NlQ0lJYXlFU0lBQW9BbkFpQ1VFQmF5SVRJQWhzSVJRZ0FDZ0MwQUloRlNBQUtBTGtBeUVGSUFoQkFVZ2hGaUFKUVFGcVFRRjBJUmNEUUVFQUlRWWdBaUFOUVFKMElnQnFJaGdvQWdCQkFDQUpFRHNhSUJaRkJFQWdBQ0FCYWlFWkEwQWdHU2dDQUNBR2FpRUhJQmdvQWdBaEFBSi9JQVVvQWxRRVFDQUFJQk5xSVFBZ0J5QVVhaUVIUVg4aERpQVNJUThnQlNBR1FRSjBhaWdDUkNBWGFnd0JDMEVCSVE0Z0NDRVBJQVVnQmtFQ2RHb29Ba1FMSVFRQ1FDQUpSUVJBUVFBaENnd0JDeUFHUVFKMElnc2dCU2dDRUdvb0FnQWhHaUFGS0FJWUlBdHFLQUlBSVJ0QkFDRVFRUWdoRENBSklSRkJBQ0VLQTM4Z0FDQWJJQlVnQnkwQUFDQU1JQVFnRGtFQmRHb2lDeTRCQUdwQkJIVnFhaTBBQUNJY2FpMEFBQ0lNSUFBdEFBQnFPZ0FBSUFRZ0hDQU1JQnBxTFFBQWF5SUVRUU5zSUFwcU93RUFJQVJCQld3Z0VHb2hDaUFSUVFGckloRUVmeUFBSUE1cUlRQWdCeUFQYWlFSElBUkJCMnhCQ0dvaERDQUVJUkFnQ3lFRURBRUZJQXNMQ3lFRUN5QUVJQW83QVFBZ0JrRUJhaUlHSUFoSERRQUxDeUFGSUFVb0FsUkZOZ0pVSUExQkFXb2lEU0FEUncwQUN3c0w5Z0lCRUg4Z0EwRUJUZ1JBSUFBb0FuZ2hCaUFBS0FMa0F5RUhJQUFvQW5BaUNFRitjU0VQSUFoQkFYRWhFQU5BSUFJZ0NrRUNkQ0lBYWlJUktBSUFRUUFnQ0JBN0dpQUhLQUl3SVFzZ0JrRUJUZ1JBSUFBZ0FXb2hFa0VBSVFrRFFBSkFJQWhGRFFBZ0NVRUNkQ0lBSUFjb0FoaHFLQUlBSVF3Z0FDQUhhaWdDTkNFTklCSW9BZ0FnQ1dvaEJDQVJLQUlBSVFCQkFDRUZJQThoRGlBSVFRRkhCRUFEUUNBQUlBQXRBQUFnRENBTklBdEJCblJxSWhNZ0JVRUNkR29vQWdBZ0JDMEFBR3BxTFFBQWFqb0FBQ0FBSUFBdEFBRWdEQ0FUSUFWQkFXcEJEM0ZCQW5ScUtBSUFJQVFnQm1vaUJDMEFBR3BxTFFBQWFqb0FBU0FBUVFKcUlRQWdCVUVDYWtFUGNTRUZJQVFnQm1vaEJDQU9RUUpySWc0TkFBc0xJQkJGRFFBZ0FDQUFMUUFBSUF3Z0RTQUxRUVowYWlBRlFRSjBhaWdDQUNBRUxRQUFhbW90QUFCcU9nQUFDeUFKUVFGcUlna2dCa2NOQUFzTElBY2dDMEVCYWtFUGNUWUNNQ0FLUVFGcUlnb2dBMGNOQUFzTEM0MENBUTkvSUFOQkFVNEVRQ0FBS0FKd0lRb2dBQ2dDNUFNaUJDZ0NHQ0lBS0FJSUlRMGdBQ2dDQkNFT0lBQW9BZ0FoRHlBRUtBSXdJUVlEUUNBS0JFQWdCQ2dDUENFUUlBUW9BamdoRVNBRUtBSTBJUklnQVNBSFFRSjBJZ1ZxS0FJQUlRQWdBaUFGYWlnQ0FDRUlRUUFoQ1NBS0lRVURRQ0FJSUE0Z0NVRUNkQ0lMSUJFZ0JrRUdkQ0lNYW1vb0FnQWdBQzBBQVdwcUxRQUFJQThnRENBU2FpQUxhaWdDQUNBQUxRQUFhbW90QUFCcUlBMGdEQ0FRYWlBTGFpZ0NBQ0FBTFFBQ2Ftb3RBQUJxT2dBQUlBaEJBV29oQ0NBQVFRTnFJUUFnQ1VFQmFrRVBjU0VKSUFWQkFXc2lCUTBBQ3dzZ0JDQUdRUUZxUVE5eElnWTJBakFnQjBFQmFpSUhJQU5IRFFBTEN3dmlBZ0VPZnlBRFFRRk9CRUFnQUNnQ2NDRU5JQUFvQXVRREtBSVlJUVlnQUNnQ2VDSUlRWHh4SVE4Z0NFRURjU0VRSUFoQkFXdEJBMGtoRVFOQUlBMEVRQ0FCSUFsQkFuUWlBR29vQWdBaENpQUFJQUpxS0FJQUlRc2dEU0VPQTBBQ1FDQUlRUUJNQkVCQkFDRUVEQUVMUVFBaEJFRUFJUVVnQ2lFQUlBOGhCeUFSUlFSQUEwQWdCQ0FHSUFWQkFuUWlER29vQWdBZ0FDMEFBR290QUFCcUlBWWdERUVFY21vb0FnQWdBQzBBQVdvdEFBQnFJQVlnREVFSWNtb29BZ0FnQUMwQUFtb3RBQUJxSUFZZ0RFRU1jbW9vQWdBZ0FDMEFBMm90QUFCcUlRUWdCVUVFYWlFRklBQkJCR29oQUNBSFFRUnJJZ2NOQUFzTElCQWlCd1JBQTBBZ0JDQUdJQVZCQW5ScUtBSUFJQUF0QUFCcUxRQUFhaUVFSUFWQkFXb2hCU0FBUVFGcUlRQWdCMEVCYXlJSERRQUxDeUFJSUFwcUlRb0xJQXNnQkRvQUFDQUxRUUZxSVFzZ0RrRUJheUlPRFFBTEN5QUpRUUZxSWdrZ0EwY05BQXNMQzZBQ0FRbC9JQU5CQVU0RVFDQUFLQUxrQXlnQ0dDSUVLQUlJSVFjZ0JDZ0NCQ0VJSUFRb0FnQWhDU0FBS0FKd0lnWkJBV3NoQ3lBR1FRRnhJUXdEUUFKQUlBWkZEUUFnQVNBS1FRSjBJZ1JxS0FJQUlRQWdBaUFFYWlnQ0FDRUZJQXdFZnlBRklBY2dBQzBBQW1vdEFBQWdDQ0FBTFFBQmFpMEFBQ0FKSUFBdEFBQnFMUUFBYW1vNkFBQWdCVUVCYWlFRklBQkJBMm9oQUNBTEJTQUdDeUVFSUFaQkFVWU5BQU5BSUFVZ0J5QUFMUUFDYWkwQUFDQUlJQUF0QUFGcUxRQUFJQWtnQUMwQUFHb3RBQUJxYWpvQUFDQUZJQWNnQUMwQUJXb3RBQUFnQ0NBQUxRQUVhaTBBQUNBSklBQXRBQU5xTFFBQWFtbzZBQUVnQlVFQ2FpRUZJQUJCQm1vaEFDQUVRUUpySWdRTkFBc0xJQXBCQVdvaUNpQURSdzBBQ3dzTDN3UUJCMzhnQUNBQUtBTGtBeUlDS0FJUU5nS0lBU0FBSUFJb0FoUTJBb1FCQWtBQ1FBSkFBa0FDUUNBQUtBSllEZ01BQVFJREN5QUFLQUo0UVFOR0JFQWdBa0hkQVRZQ0JBOExJQUpCM2dFMkFnUVBDeUFBS0FKNElRRWdBa0VBTmdJd0lBSkIzd0ZCNEFFZ0FVRURSaHMyQWdRZ0FpZ0NIRVVFUUNBQUVKZ0ZDeUFDS0FJMERRSWdBQ2dDZUNJRFFRRklEUUlnQUNnQzVBTWhCa0VBSVFJRFFDQUdJQUpCQW5ScUlnZ29BaUFoQkVFQUlRRUNRQUpBSUFKRkRRQURRQ0FHSUFGQkFuUnFJZ1VvQWlBZ0JFY0VRQ0FCUVFGcUlnRWdBa2NOQVF3Q0N3c2dCU2dDTkNJRkRRRUxJQVJCQ1hSQmdBUnJJUWRCQUNFRUlBQkJBVUdBQ0NBQUtBSUVLQUlBRVFRQUlRVURRRUVBSVFFRFFDQUZJQVJCQm5ScUlBRkJBblJxQW44Z0JFRUVkQ0FCYWtHd3RBSnFMUUFBUVlKOGJDSURRZjZEZkV3RVFFRUFRZitEZkNBRGF5QUhiV3NNQVFzZ0EwR0IvQU5xSUFkdEN6WUNBQ0FCUVFGcUlnRkJFRWNOQUFzZ0JFRUJhaUlFUVJCSERRQUxJQUFvQW5naEF3c2dDQ0FGTmdJMElBSkJBV29pQWlBRFNBMEFDd3dDQzBFQUlRRWdBa0VBTmdKVUlBSkI0UUUyQWdRQ1FDQUNLQUpFQkVBZ0FDZ0NlQ0VEREFFTElBQW9BbmhCQVVnTkFpQUFLQUp3UVFGMFFRUnFJUVFEUUNBQ0lBRkJBblJxSUFCQkFTQUVJQUFvQWdRb0FnUVJCQUEyQWtRZ0FVRUJhaUlCSUFBb0FuZ2lBMGdOQUFzTElBTkJBVWdOQVNBQUtBSndRUUYwUVFScUlRTkJBQ0VCQTBBZ0FpQUJRUUowYWlnQ1JFRUFJQU1RT3hvZ0FVRUJhaUlCSUFBb0FuaElEUUFMREFFTElBQW9BZ0FpQVVFeE5nSVVJQUFnQVNnQ0FCRUJBQXNMR2dFQmZ5QUFLQUlBSWdGQkx6WUNGQ0FBSUFFb0FnQVJBUUFMdUEwQkNIOUJBaUVDQWtBZ0FDZ0N6QU1pQlNnQ0ZBMEFBMEFDUUNBQUFuOENRQUpBSUFBZ0FDZ0MwQU1vQWdRUkFBQWlBa0VCUndSQUlBSkJBa2NOQmlBRlFRRTJBaFFnQlNnQ0dFVU5BVUVDSVFJZ0FDZ0MwQU1vQWhCRkRRWWdBQ2dDQUNJQlFUNDJBaFFnQUNBQktBSUFFUUVBUVFJUEN3SkFBa0FDUUNBRktBSVlEZ0lDQVFBTElBQW9BdFFDSVFJTUJRc0NRQ0FBS0FJZ1Fkei9BMHdFUUNBQUtBSWNRZDMvQTBnTkFRc2dBQ2dDQUVLcWdJQ0F3UHMvTndJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQUNnQzFBRWlBVUVJYTBFRlR3UkFJQUFvQWdBaUFpQUJOZ0lZSUFKQkVEWUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBQW9BaVFpQTBFTFRnUkFJQUFvQWdBaUFTQUROZ0lZSUFGQkd6WUNGQ0FBS0FJQVFRbzJBaHdnQUNBQUtBSUFLQUlBRVFFQUlBQW9BaVFoQXdzZ0FFS0JnSUNBRURjQ3ZBSWdBMEVCVGdSQUlBQW9BdGdCSVFKQkFDRUlRUUVoQVVFQklRUURRQUpBSUFJb0FnZ2lCa0VCYTBFRFRRUkFJQUlvQWd3aUIwRUJhMEVFU1EwQkN5QUFLQUlBSWdGQkV6WUNGQ0FBSUFFb0FnQVJBUUFnQUNnQ0pDRURJQUlvQWd3aEJ5QUFLQUxBQWlFQklBSW9BZ2doQmlBQUtBSzhBaUVFQ3lBQUlBRWdCeUFCSUFkS0d5SUJOZ0xBQWlBQUlBUWdCaUFFSUFaS0d5SUVOZ0s4QWlBQ1FkZ0FhaUVDSUFoQkFXb2lDQ0FEU0EwQUN3c2dBQ2dDM0FFTkFpQUFLQUxnQVFSQUlBQW9BdFFDRFFNTEFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUFLQUtnQXlJQlFmY0FUQVJBSUFFT1pBRU9EZ0lPRGc0T0F3NE9EZzRPRGdRT0RnNE9EZzRPRGdVT0RnNE9EZzRPRGc0T0JnNE9EZzRPRGc0T0RnNE9EZ2NPRGc0T0RnNE9EZzRPRGc0T0RoRU9EZzRPRGc0T0RnNE9EZzRPRGc0T0NBNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0Rna09DeUFCUWNJQlRBUkFJQUZCK0FCR0RRb2dBVUdQQVVZTkN5QUJRYWdCUncwT0lBQkJQellDdEFNZ0FFSFF2UUkyQXJBRElBQkJEVFlDckFOQkRRd1NDeUFCUWNNQlJnMExJQUZCNEFGR0RRd2dBVUgvQVVjTkRTQUFRVDgyQXJRRElBQkIwTDBDTmdLd0F5QUFRUkEyQXF3RFFSQU1FUXNnQUVFQU5nSzBBeUFBUWRDOUFqWUNzQU1nQUVFQk5nS3NBMEVCREJBTElBQkJBellDdEFNZ0FFR1F4d0kyQXJBRElBQkJBallDckFOQkFnd1BDeUFBUVFnMkFyUURJQUJCb01ZQ05nS3dBeUFBUVFNMkFxd0RRUU1NRGdzZ0FFRVBOZ0swQXlBQVFhREZBallDc0FNZ0FFRUVOZ0tzQTBFRURBMExJQUJCR0RZQ3RBTWdBRUh3d3dJMkFyQURJQUJCQlRZQ3JBTkJCUXdNQ3lBQVFTTTJBclFESUFCQm9NSUNOZ0t3QXlBQVFRWTJBcXdEUVFZTUN3c2dBRUV3TmdLMEF5QUFRWkRBQWpZQ3NBTWdBRUVITmdLc0EwRUhEQW9MSUFCQlB6WUN0QU1nQUVIUXZRSTJBckFESUFCQkNUWUNyQU5CQ1F3SkN5QUFRVDgyQXJRRElBQkIwTDBDTmdLd0F5QUFRUW8yQXF3RFFRb01DQXNnQUVFL05nSzBBeUFBUWRDOUFqWUNzQU1nQUVFTE5nS3NBMEVMREFjTElBQkJQellDdEFNZ0FFSFF2UUkyQXJBRElBQkJERFlDckFOQkRBd0dDeUFBUVQ4MkFyUURJQUJCMEwwQ05nS3dBeUFBUVE0MkFxd0RRUTRNQlFzZ0FFRS9OZ0swQXlBQVFkQzlBallDc0FNZ0FFRVBOZ0tzQTBFUERBUUxJQUFvQWdBaUFVRVJOZ0lVSUFFZ0FDZ0NuQU0yQWhnZ0FDZ0NBQ0FBS0FLZ0F6WUNIQ0FBS0FJQUlBQW9BcVFETmdJZ0lBQW9BZ0FnQUNnQ3FBTTJBaVFnQUNBQUtBSUFLQUlBRVFFQUlBQW9BaVFoQXlBQUtBS3NBd3dEQ3lBRktBSVFSUVJBSUFBb0FnQWlBVUVrTmdJVUlBQWdBU2dDQUJFQkFBc2dBQ2dDMUFKRkRRUWdBQkNaQlVFQkR3dEJBaUVDSUFBb0FwQUJJZ0VnQUNnQ21BRk9EUVFnQUNBQk5nS1lBUXdFQ3lBQVFUODJBclFESUFCQjBMMENOZ0t3QXlBQVFRZzJBcXdEUVFnTElnRTJBc2dDSUFBZ0FUWUN4QUlnQTBFQlRnUkFJQUFvQXRnQklRSkJBU0VFQTBBZ0FpQUJOZ0lvSUFJZ0FUWUNKQ0FDSUFJb0FnZ2dBQ2dDSEd3Z0FDZ0N2QUlnQVd3UWFqWUNIQ0FDSUFJb0Fnd2dBQ2dDSUd3Z0FDZ0NyQU1nQUNnQ3dBSnNFR28yQWlBZ0FpQUNLQUlJSUFBb0FoeHNJQUFvQXJ3Q0VHbzJBaXdnQWlnQ0RDQUFLQUlnYkNBQUtBTEFBaEJxSVFFZ0FrRUFOZ0pRSUFKQkFUWUNOQ0FDSUFFMkFqQWdCQ0FBS0FJa1RrVUVRQ0FFUVFGcUlRUWdBa0hZQUdvaEFpQUFLQUtzQXlFQkRBRUxDeUFBS0FLc0F5RUJDeUFBSUFBb0FpQWdBU0FBS0FMQUFtd1FhallDekFKQkFTRUJJQUFvQXN3RElBQW9BdFFDSWdJZ0FDZ0NKRTRFZnlBQUtBTGdBVUVBUndWQkFRczJBaEFMSUFKRkJFQWdCVUVDTmdJWURBRUxDeUFGUVFBMkFoaEJBUThMSUFJTFF3RUJmeUFBS0FMTUF5SUJRUUUyQWhnZ0FVSUFOd0lRSUFGQjJRRTJBZ0FnQUNBQUtBSUFLQUlRRVFFQUlBQWdBQ2dDMEFNb0FnQVJBUUFnQUVFQU5nS2dBUXNjQUNBQUlBQW9BdFFES0FJSUVRRUFJQUFvQXN3RFFka0JOZ0lBQzVJSUFSRi9Jd0JCZ0FKckloQWtBQ0FBS0FMUUFpRUpJQUVvQWxRaEFDQVFJUUZCQ0NFSEEwQUNmd0pBSUFJdUFSQWlCaUFDTGdFZ0lnVnlRZi8vQTNGRkJFQUNRQ0FDTHdFd0RRQWdBaThCUUEwQUlBSXZBVkFOQUNBQ0x3RmdEUUFnQWk4QmNFVU5BZ3RCQUNFRkN5QUJJQUFvQXNBQklBSXVBV0JzSWdnZ0FDZ0NRQ0FGYkNJTGFpSUZJQUFvQW9BQklBSXVBVUJzSWdvZ0FDZ0NBQ0FDTGdFQWJDSU1haUlOYWlJT0lBQW9BdUFCSUFJdUFYQnNJZzhnQUNnQ0lDQUdiQ0lSYWlJU0lBQW9BcUFCSUFJdUFWQnNJaE1nQUNnQ1lDQUNMZ0V3YkNJVWFpSVZhaUlHYXpZQzRBRWdBU0FHSUE1cU5nSUFJQUVnQ3lBSWEwSHFBbXhCQ0hVZ0JXc2lDQ0FNSUFwcklndHFJZ29nRVNBUGF5SU1JQk1nRkdzaURtcEIyUU5zUVFoMUlnOGdCaUFPUVowRmJFRUlkV3BySWdack5nTEFBU0FCSUFZZ0NtbzJBaUFnQVNBTElBaHJJZ2dnRWlBVmEwSHFBbXhCQ0hVZ0Jtc2lCbXMyQXFBQklBRWdCaUFJYWpZQ1FDQUJJQThnREVHVkFteEJDSFVnQm1wcklnWWdEU0FGYXlJRmFqWUNZQ0FGSUFacklRVWdBVUdBQVdvTUFRc2dBU0FBS0FJQUlBSXVBUUJzSWdVMkFzQUJJQUVnQlRZQ29BRWdBU0FGTmdLQUFTQUJJQVUyQW1BZ0FTQUZOZ0pBSUFFZ0JUWUNJQ0FCSUFVMkFnQWdBVUhnQVdvTElBVTJBZ0FnQWtFQ2FpRUNJQUJCQkdvaEFDQUJRUVJxSVFFZ0IwRUJTeUVGSUFkQkFXc2hCeUFGRFFBTElBbEJnQU5ySVFCQkFDRUZJQkFoQWdOQUlBSW9BZ0JCa0lBQmFpRUdJQU1nQlVFQ2RHb29BZ0FnQkdvaEFRSkFBa0FnQWlnQ0JDSUpJQUlvQWdnaUIzSU5BRUVBSVFjZ0FpZ0NEQTBBSUFJb0FoQU5BQ0FDS0FJVURRQWdBaWdDR0EwQUlBSW9BaHdOQUNBQklBQWdCa0VGZGtIL0IzRnFNUUFBUW9HQ2hJaVFvTUNBQVg0M0FBQU1BUXNnQVNBQUlBSW9BaHdpQ2lBSmFpSU1JQUlvQWd3aURTQUNLQUlVSWc1cUlnOXFJZ2dnQWlnQ0dDSVJJQWRxSWdzZ0FpZ0NFQ0lTSUFacUloTnFJaFJxUVFWMlFmOEhjV290QUFBNkFBQWdBU0FBSUJRZ0NHdEJCWFpCL3dkeGFpMEFBRG9BQnlBQklBQWdDU0FLYXlJS0lBNGdEV3NpQ1dwQjJRTnNRUWgxSWcwZ0NVR2RCV3hCQ0hVZ0NHcHJJZ2tnQnlBUmEwSHFBbXhCQ0hVZ0Myc2lDQ0FHSUJKcklnWnFJZ2RxUVFWMlFmOEhjV290QUFBNkFBRWdBU0FBSUFjZ0NXdEJCWFpCL3dkeGFpMEFBRG9BQmlBQklBQWdEQ0FQYTBIcUFteEJDSFVnQ1dzaUJ5QUdJQWhySWdacVFRVjJRZjhIY1dvdEFBQTZBQUlnQVNBQUlBWWdCMnRCQlhaQi93ZHhhaTBBQURvQUJTQUJJQUFnRFNBS1FaVUNiRUVJZFNBSGFtc2lCeUFUSUF0cklnWnFRUVYyUWY4SGNXb3RBQUE2QUFNZ0FTQUFJQVlnQjJ0QkJYWkIvd2R4YWkwQUFEb0FCQXNnQWtFZ2FpRUNJQVZCQVdvaUJVRUlSdzBBQ3lBUVFZQUNhaVFBQzYwR0FROS9JQUFvQXRRRElRWWdBQ2dDbUFJRVFDQUdJQVlvQWpnaUFnUi9JQUlGSUFBUXlnSWdCaWdDT0F0QkFXczJBamdMQWtBQ1FDQUdLQUlVUVg5R0RRQWdBQ2dDOEFKQkFVZ05BQ0FHUWJ3QmFpRU9JQUFvQXJBRElROERRQ0FCSUFwQkFuUWlBbW9vQWdBaERRSkFJQUFnQmlBQUlBQWdBbW9vQXZRQ1FRSjBJZ0pxS0FMWUFpSUxLQUlVSWd4QkFuUnFJaEJCUEdvb0FnQWdBaUFHYWlJRklnaEJLR29vQWdCcUlnUVFYVVVFUUNBSVFRQTJBaWdnQlNnQ0dDRUNEQUVMUVFBaEIwRUFJUUlDUUNBQUlBUWdBQ0FFUVFGcUVGMGlDV3BCQW1vaUJCQmRJZ05GRFFBZ0F5RUNJQUFnRUNnQ1BFRVVhaUlFRUYxRkRRQURRQ0FDUVFGMElnSkJnSUFDUmcwRklBQWdCRUVCYWlJRUVGME5BQXNMQWtBZ0FrRUJJQUFnREdvaURDMEE2QUYwUVFGMVNBMEFJQWxCQW5RaEEwRUJJQXd0QVBnQmRFRUJkU0FDU0FSQUlBTkJER29oQnd3QkN5QURRUVJxSVFjTElBZ2dCellDS0NBQ1FRRjFJZ01FUUNBRVFRNXFJUVFEUUNBRFFRQWdBQ0FFRUYwYklBSnlJUUlnQTBFQmRTSUhJUU1nQncwQUN3c2dCU0FGS0FJWUlBSkJmM01nQWtFQmFpQUpHMm9pQWpZQ0dBc2dEU0FDT3dFQUFrQWdBQ2dDdEFORkRRQWdBQ0FMS0FJWUlnSnFJUWdnQmlBQ1FRSjBhaUVIUVFBaEFnTkFJQUFnQnlnQ2ZDQUNJZ1JCQTJ4cUlnTVFYUTBCQTBBQ1FDQUVRUUZxSVFJZ0FDQURRUUZxRUYwTkFDQURRUU5xSVFNZ0FpSUVJQUFvQXJRRFNBMEJEQVlMQ3lBQUlBNFFYU0VKQWtBZ0FDQURRUUpxSWdVUVhTSURSUVJBUVFBaEF3d0JDd0pBSUFBZ0JSQmRSUTBBSUFOQkFYUWhBeUFBSUFjb0FueEJ2UUZCMlFFZ0JDQUlMUUNJQWtnYmFpSUZFRjFGRFFBRFFDQURRUUYwSWdOQmdJQUNSZzBISUFBZ0JVRUJhaUlGRUYwTkFBc0xJQU5CQVhVaUJFVU5BQ0FGUVE1cUlRVURRQ0FFUVFBZ0FDQUZFRjBiSUFOeUlRTWdCRUVCZFNJTElRUWdDdzBBQ3dzZ0RTQVBJQUpCQW5ScUtBSUFRUUYwYWlBRFFYOXpJQU5CQVdvZ0NSczdBUUFnQWlBQUtBSzBBMGdOQUFzTElBcEJBV29pQ2lBQUtBTHdBa2dOQUFzTFFRRVBDeUFBS0FJQUlnRkI5UUEyQWhRZ0FFRi9JQUVvQWdRUkFnQWdCa0YvTmdJVVFRRUxqd01CQ244Z0FDZ0MxQU1oQXlBQUtBS1lBZ1JBSUFNZ0F5Z0NPQ0lDQkg4Z0FnVWdBQkRLQWlBREtBSTRDMEVCYXpZQ09Bc0NRQ0FES0FJVVFYOUdEUUJCZnlBQUtBS29BeUlDZENFRlFRRWdBblFoQmlBQUtBS2dBeUVFSUFFb0FnQWhCeUFBS0FLd0F5RUlJQUFvQXRnQ0tBSVlJUUlDUUFOQUlBY2dDQ0FFUVFKMGFpZ0NBRUVCZEdvdkFRQU5BU0FFUVFGcklnUU5BQXRCQUNFRUN5QURRYndCYWlFS0lBQW9BcHdEUVFGcklRRWdBeUFDUVFKMGFpRUxBMEFnQ3lnQ2ZDQUJRUU5zYWlFQ0lBRWdCRTRFUUNBQUlBSVFYUTBDQ3dKQUFuOENRQU5BSUFjZ0NDQUJRUUZxSWdGQkFuUnFLQUlBUVFGMGFpSUpMd0VBQkVBZ0FDQUNRUUpxRUYxRkRRUWdDUzRCQUNJQ1FYOUtEUUlnQWlBRmFnd0RDeUFBSUFKQkFXb1FYUVJBSUFVZ0JpQUFJQW9RWFJzTUF3c2dBa0VEYWlFQ0lBRWdBQ2dDb0FOSURRQUxJQUFvQWdBaUFVSDFBRFlDRkNBQVFYOGdBU2dDQkJFQ0FDQURRWDgyQWhSQkFROExJQUlnQm1vTElRSWdDU0FDT3dFQUN5QUJJQUFvQXFBRFNBMEFDd3RCQVF1TkFRRUVmeUFBS0FMVUF5RUNJQUFvQXBnQ0JFQWdBaUFDS0FJNElnTUVmeUFEQlNBQUVNb0NJQUlvQWpnTFFRRnJOZ0k0Q3lBQUtBTHdBa0VCVGdSQUlBSkJ2QUZxSVFOQkFTQUFLQUtvQTNRaEJFRUFJUUlEUUNBQUlBTVFYUVJBSUFFZ0FrRUNkR29vQWdBaUJTQUZMd0VBSUFSeU93RUFDeUFDUVFGcUlnSWdBQ2dDOEFKSURRQUxDMEVCQzhFREFRdC9JQUFvQXRRRElRTWdBQ2dDbUFJRVFDQURJQU1vQWpnaUJBUi9JQVFGSUFBUXlnSWdBeWdDT0F0QkFXczJBamdMQWtBQ1FDQURLQUlVUVg5R0RRQWdBMEc4QVdvaEJ5QUFLQUtjQTBFQmF5RUVJQUFnQUNnQzJBSW9BaGdpQW1vaENDQURJQUpCQW5ScUlRWWdBU2dDQUNFSklBQW9BckFESVFvRFFDQUFJQVlvQW53Z0JDSUNRUU5zYWlJQkVGME5BUU5BQWtBZ0FrRUJhaUVFSUFBZ0FVRUJhaEJkRFFBZ0FVRURhaUVCSUFRaUFpQUFLQUtnQTBnTkFRd0VDd3NnQUNBSEVGMGhDd0pBSUFBZ0FVRUNhaUlGRUYwaUFVVUVRRUVBSVFFTUFRc0NRQ0FBSUFVUVhVVU5BQ0FCUVFGMElRRWdBQ0FHS0FKOFFiMEJRZGtCSUFJZ0NDMEFpQUpJRzJvaUJSQmRSUTBBQTBBZ0FVRUJkQ0lCUVlDQUFrWU5CU0FBSUFWQkFXb2lCUkJkRFFBTEN5QUJRUUYxSWdKRkRRQWdCVUVPYWlFTUEwQWdBa0VBSUFBZ0RCQmRHeUFCY2lFQklBSkJBWFVpQlNFQ0lBVU5BQXNMSUFrZ0NpQUVRUUowYWlnQ0FFRUJkR29nQVVGL2N5QUJRUUZxSUFzYklBQW9BcWdEZERzQkFDQUVJQUFvQXFBRFNBMEFDd3RCQVE4TElBQW9BZ0FpQVVIMUFEWUNGQ0FBUVg4Z0FTZ0NCQkVDQUNBRFFYODJBaFJCQVF2bEF3RU1meUFBS0FMVUF5RUVJQUFvQXBnQ0JFQWdCQ0FFS0FJNElnSUVmeUFDQlNBQUVNb0NJQVFvQWpnTFFRRnJOZ0k0Q3dKQUlBUW9BaFJCZjBZTkFDQUFLQUx3QWtFQlNBMEFBMEFnQVNBSVFRSjBJZ05xS0FJQUlRMENRQ0FBSUFRZ0FDQUFJQU5xS0FMMEFrRUNkQ0lEYWlnQzJBSW9BaFFpQmtFQ2RHb2lCVUU4YWlnQ0FDQURJQVJxSWdraUMwRW9haWdDQUdvaUF4QmRSUVJBSUF0QkFEWUNLQ0FKS0FJWUlRSU1BUXRCQUNFS1FRQWhBZ0pBSUFBZ0F5QUFJQU5CQVdvUVhTSU1ha0VDYWlJSEVGMGlBMFVOQUNBRElRSWdBQ0FGS0FJOFFSUnFJZ2NRWFVVTkFBTkFJQUpCQVhRaUFrR0FnQUpHQkVBZ0FDZ0NBQ0lCUWZVQU5nSVVJQUJCZnlBQktBSUVFUUlBSUFSQmZ6WUNGRUVCRHdzZ0FDQUhRUUZxSWdjUVhRMEFDd3NDUUNBQ1FRRWdBQ0FHYWlJRExRRG9BWFJCQVhWSURRQWdERUVDZENFRlFRRWdBeTBBK0FGMFFRRjFJQUpJQkVBZ0JVRU1haUVLREFFTElBVkJCR29oQ2dzZ0N5QUtOZ0lvSUFKQkFYVWlCZ1JBSUFkQkRtb2hCUU5BSUFaQkFDQUFJQVVRWFJzZ0FuSWhBaUFHUVFGMUlnTWhCaUFERFFBTEN5QUpJQWtvQWhnZ0FrRi9jeUFDUVFGcUlBd2JhaUlDTmdJWUN5QU5JQUlnQUNnQ3FBTjBPd0VBSUFoQkFXb2lDQ0FBS0FMd0FrZ05BQXNMUVFFTG93Z0JCMzhnQUNnQ25BTWhBaUFBS0FMVUF5RURBa0FnQUNnQzRBRUVRQ0FBS0FLZ0F5RUJBa0FDUUFKQUlBSkZCRUFnQVVVTkFRd0NDeUFCSUFKSURRRWdBU0FBS0FLMEEwb05BU0FBS0FMVUFrRUJSdzBCQ3dKQUlBQW9BcVFESWdGRkJFQWdBQ2dDcUFNaEJBd0JDeUFCUVFGcklnUWdBQ2dDcUFOSERRRUxJQVJCRGtnTkFRc2dBQ2dDQUNJQklBSTJBaGdnQVVFUk5nSVVJQUFvQWdBZ0FDZ0NvQU0yQWh3Z0FDZ0NBQ0FBS0FLa0F6WUNJQ0FBS0FJQUlBQW9BcWdETmdJa0lBQWdBQ2dDQUNnQ0FCRUJBQXNnQUNnQzFBSWlBa0VCVGdSQVFRQWhCQU5BSUFBZ0JFRUNkR29vQXRnQ0tBSUVJUVlnQUNnQ29BRWhCUUovUVFBZ0FDZ0NuQU1pQVVVTkFCb2dBU0FGSUFaQkNIUnFLQUlBUVg5S0RRQWFJQUFvQWdBaUFTQUdOZ0lZSUFGQjlnQTJBaFFnQUNnQ0FFRUFOZ0ljSUFCQmZ5QUFLQUlBS0FJRUVRSUFJQUFvQXB3REN5SUNJQUFvQXFBRFRBUkFBMEFnQUNnQ3BBTWdCU0FHUVFoMGFpQUNRUUowYWlJSEtBSUFJZ0ZCQUNBQlFRQktHMGNFUUNBQUtBSUFJZ0VnQmpZQ0dDQUJRZllBTmdJVUlBQW9BZ0FnQWpZQ0hDQUFRWDhnQUNnQ0FDZ0NCQkVDQUFzZ0J5QUFLQUtvQXpZQ0FDQUNJQUFvQXFBRFNDRUJJQUpCQVdvaEFpQUJEUUFMQ3lBRVFRRnFJZ1FnQUNnQzFBSWlBa2dOQUFzTElBQW9BcHdESVFFZ0FDZ0NwQU5GQkVBZ0FVVUVRQ0FEUWRFQk5nSUVEQU1MSUFOQjBnRTJBZ1FNQWdzZ0FVVUVRQ0FEUWRNQk5nSUVEQUlMSUFOQjFBRTJBZ1FNQVFzQ1FBSkFJQUlOQUNBQUtBS2tBdzBBSUFBb0FxZ0REUUFnQUNnQ29BTWlBVUUvU2cwQklBRWdBQ2dDdEFOR0RRRUxJQUFvQWdBaUFVSDlBRFlDRkNBQVFYOGdBU2dDQkJFQ0FBc2dBMEhWQVRZQ0JDQUFLQUxVQWlFQ0N5QUNRUUZPQkVCQkFDRUVBMEFnQUNBRVFRSjBJZ2RxS0FMWUFpRUZBa0FDUUNBQUtBTGdBUVJBSUFBb0Fwd0REUUVnQUNnQ3BBTU5BZ3NnQlNnQ0ZDSUNRUkJQQkVBZ0FDZ0NBQ0lCSUFJMkFoZ2dBVUV5TmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQXlBQ1FRSjBhaUlCUVR4cUtBSUFJZ0pGQkVBZ0FTQUFRUUZCd0FBZ0FDZ0NCQ2dDQUJFRUFDSUNOZ0k4Q3lBQ1FnQTNBQUFnQWtJQU53QTRJQUpDQURjQU1DQUNRZ0EzQUNnZ0FrSUFOd0FnSUFKQ0FEY0FHQ0FDUWdBM0FCQWdBa0lBTndBSUlBTWdCMm9pQVVFQU5nSW9JQUZCQURZQ0dDQUFLQUxnQVVVRVFDQUFLQUswQXcwQkRBSUxJQUFvQXB3RFJRMEJDeUFGS0FJWUlnSkJFRThFUUNBQUtBSUFJZ0VnQWpZQ0dDQUJRVEkyQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFESUFKQkFuUnFJZ0ZCL0FCcUtBSUFJZ0pGQkVBZ0FTQUFRUUZCZ0FJZ0FDZ0NCQ2dDQUJFRUFDSUNOZ0o4Q3lBQ1FRQkJnQUlRT3hvTElBUkJBV29pQkNBQUtBTFVBa2dOQUFzTElBTkJjRFlDRkNBRFFnQTNBZ3dnQXlBQUtBS1lBallDT0F1ckRRSUtmd0Y4SUFBb0FpUkJBVTRFUUNBQUtBTFlBeUVLSUFBb0F0Z0JJUWNEUUNBQklRWWdBaUVFQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFjb0FpZ2dCeWdDSkNJSVFRaDBhaUlEUVlNUVRBUkFJQU5CZ1FoTUJFQUNRQ0FEUVlFRWF3NEVGd01pSGdBTFFhMEJJUUZCQUNFQ0FrQWdBMEdCQW1zT0FpWWZBQXNnQTBHREJtc09CQU1oSVJ3aEN5QURRWUlNVEFSQUFrQWdBMEdDQ0dzT0J4WWlCU0lpSWh3QUN5QURRWVVLYXc0R0JTRWhJU0VhSVFzQ1FDQURRWU1NYXc0S0ZDRWhCaUVoSVNFaEdRQUxJQU5CaHc1ckRnZ0dJQ0FnSUNBZ0Z5QUxJQU5CaFJoTUJFQWdBMEdFRkV3RVFDQURRWVFRYXc0TkV5RWhJUjhoSVNFaElTRWhGeUFMSUFOQmhSUnJEZ1lSSUNBZ0lBY0lDeUFEUVlZY1RBUkFJQU5CaGhockRnY1FJQ0FnSUNBSkNnc0NRQ0FEUVljY2F3NElEeUFnSUNBZ0lBc0FDeUFEUVlnZ2F3NEpEUjhmSHg4Zkh4OE1Dd3RCcmdFaEFVRUFJUUlNSWd0QnJ3RWhBUXdoQzBHd0FTRUJRUUFoQWd3Z0MwR3hBU0VCUVFBaEFnd2ZDMEd5QVNFQlFRQWhBZ3dlQzBHekFTRUJRUUFoQWd3ZEMwRzBBU0VCUVFBaEFnd2NDeUFEUVlzV1J3MFhRYlVCSVFGQkFDRUNEQnNMUWJZQklRRkJBQ0VDREJvTElBTkJqUnBIRFJWQnR3RWhBVUVBSVFJTUdRdEJ1QUVoQVVFQUlRSU1HQXNnQTBHUEhrY05FMEc1QVNFQlFRQWhBZ3dYQzBHNkFTRUJRUUFoQWd3V0MwRzdBU0VCUVFBaEFnd1ZDMEc4QVNFQlFRQWhBZ3dVQzBHOUFTRUJRUUFoQWd3VEMwRytBU0VCUVFBaEFnd1NDMEcvQVNFQlFRQWhBZ3dSQzBIQUFTRUJRUUFoQWd3UUMwSEJBU0VCUVFBaEFnd1BDMEhDQVNFQlFRQWhBZ3dPQzBIREFTRUJRUUFoQWd3TkMwSEVBU0VCUVFBaEFnd01DMEhGQVNFQlFRQWhBZ3dMQzBIR0FTRUJRUUFoQWd3S0MwSEhBU0VCUVFBaEFnd0pDMEhJQVNFQkRBZ0xRY2tCSVFGQkFDRUNEQWNMUWNvQklRRU1CZ3NnQUNnQ1NDSUNRUU5KRFFJZ0FDZ0NBQ0lCUVRFMkFoUWdBQ0FCS0FJQUVRRUFEQU1MSUFOQmlSSkdEUU1MSUFBb0FnQWlBU0FJTmdJWUlBRkJCellDRkNBQUtBSUFJQWNvQWlnMkFod2dBQ0FBS0FJQUtBSUFFUUVBREFFTElBSkJBblJCMExBQ2FpZ0NBQ0VCREFJTElBWWhBU0FFSVFJTUFRdEJ5d0VoQVVFQUlRSUxJQW9nQ1VFQ2RHb2lCQ0FCTmdJRUFrQWdCeWdDTkVVTkFDQUVLQUlzSUFKR0RRQWdCeWdDVUNJRFJRMEFJQVFnQWpZQ0xBSkFBa0FDUUFKQUlBSU9Bd0FCQWdNTElBY29BbFFoQmtFQUlRVURRQ0FHSUFWQkFuUnFJQU1nQlVFQmRHb3ZBUUEyQWdBZ0JpQUZRUUZ5SWdSQkFuUnFJQU1nQkVFQmRHb3ZBUUEyQWdBZ0JpQUZRUUp5SWdSQkFuUnFJQU1nQkVFQmRHb3ZBUUEyQWdBZ0JpQUZRUU55SWdSQkFuUnFJQU1nQkVFQmRHb3ZBUUEyQWdBZ0JVRUVhaUlGUWNBQVJ3MEFDd3dEQ3lBSEtBSlVJUVpCQUNFRkEwQWdCaUFGUVFKMGFpQUZRUUYwSWdSQmtLOENhaTRCQUNBRElBUnFMd0VBYkVHQUVHcEJESFUyQWdBZ0JpQUZRUUZ5SWdSQkFuUnFJQVJCQVhRaUJFR1Fyd0pxTGdFQUlBTWdCR292QVFCc1FZQVFha0VNZFRZQ0FDQUZRUUpxSWdWQndBQkhEUUFMREFJTElBY29BbFFoQ0VFQUlRWkJBQ0VGQTBBZ0NDQUZRUUowYWlBR1FRTjBRWkN3QW1vckF3QWlDeUFESUFWQkFYUnFMd0VBdUtKRUFBQUFBQUFBd0QraXRqZ0NBQ0FJSUFWQkFYSWlCRUVDZEdvZ0N5QURJQVJCQVhScUx3RUF1S0pFNzJGSXNWQXg5aitpUkFBQUFBQUFBTUEvb3JZNEFnQWdDQ0FGUVFKeUlnUkJBblJxSUFzZ0F5QUVRUUYwYWk4QkFMaWlSTXB2VFpHdTUvUS9va1FBQUFBQUFBREFQNksyT0FJQUlBZ2dCVUVEY2lJRVFRSjBhaUFMSUFNZ0JFRUJkR292QVFDNG9rU3FFV3p2WXREeVA2SkVBQUFBQUFBQXdEK2l0amdDQUNBSUlBVkJCSElpQkVFQ2RHb2dDeUFESUFSQkFYUnFMd0VBdUtKRUFBQUFBQUFBd0QraXRqZ0NBQ0FJSUFWQkJYSWlCRUVDZEdvZ0N5QURJQVJCQVhScUx3RUF1S0pFTzcrbndHa2s2VCtpUkFBQUFBQUFBTUEvb3JZNEFnQWdDQ0FGUVFaeUlnUkJBblJxSUFzZ0F5QUVRUUYwYWk4QkFMaWlSTHNneDN0NlVlRS9va1FBQUFBQUFBREFQNksyT0FJQUlBZ2dCVUVIY2lJRVFRSjBhaUFMSUFNZ0JFRUJkR292QVFDNG9rUmRxM0xlVmFqUlA2SkVBQUFBQUFBQXdEK2l0amdDQUNBRlFRaHFJUVVnQmtFQmFpSUdRUWhIRFFBTERBRUxJQUFvQWdBaUJFRXhOZ0lVSUFBZ0JDZ0NBQkVCQUFzZ0IwSFlBR29oQnlBSlFRRnFJZ2tnQUNnQ0pFZ05BQXNMQzRNSkFnOTlCWDhqQUVHQUFtc2lGU1FBSUFBb0F0QUNJUmNnQVNnQ1ZDRUFRUWdoRkNBVklRRURRQUovQWtBQ2ZTQUNMd0VRSWhZZ0FpOEJJQ0lZY2dSQUlCaEJFSFJCRUhXeURBRUxBa0FnQWk4Qk1BMEFJQUl2QVVBTkFDQUNMd0ZRRFFBZ0FpOEJZQTBBSUFJdkFYQkZEUUlMUXdBQUFBQUxJUVVnQVNBQUtnSUFJQUl1QVFDeWxDSUhJQUFxQW9BQklBSXVBVUN5bENJSWtpSU5JQUFxQWtBZ0JaUWlDU0FBS2dMQUFTQUNMZ0Znc3BRaUNwSWlCWklpQ3lBQUtnSmdJQUl1QVRDeWxDSU1JQUFxQXFBQklBSXVBVkN5bENJT2tpSVBJQUFxQWlBZ0ZrRVFkRUVRZGJLVUloQWdBQ29DNEFFZ0FpNEJjTEtVSWhHU0loS1NJZ2FUT0FMZ0FTQUJJQXNnQnBJNEFnQWdBU0FISUFpVElnY2dDU0FLazBQekJMVS9sQ0FGa3lJSWtpSUpJQTRnREpNaUNpQVFJQkdUSWd1U1ExNkQ3RCtVSWd3Z0NrTjFQU2ZBbEpJZ0JwTWlCcE00QXNBQklBRWdDU0FHa2pnQ0lDQUJJQWNnQ0pNaUJ5QVNJQStUUS9NRXRUK1VJQWFUSWdhVE9BS2dBU0FCSUFjZ0JwSTRBa0FnQVNBTklBV1RJZ1VnRENBTFE5U0xpcitVa2lBR2t5SUdramdDWUNBRklBYVRJUVVnQVVHQUFXb01BUXNnQVNBQUtnSUFJQUl1QVFDeWxDSUZPQUxBQVNBQklBVTRBcUFCSUFFZ0JUZ0NnQUVnQVNBRk9BSmdJQUVnQlRnQ1FDQUJJQVU0QWlBZ0FTQUZPQUlBSUFGQjRBRnFDeUFGT0FJQUlBSkJBbW9oQWlBQVFRUnFJUUFnQVVFRWFpRUJJQlJCQVVzaEZpQVVRUUZySVJRZ0ZnMEFDeUFYUVlBRGF5RUFRUUFoRkNBVklRSURRQ0FESUJSQkFuUnFLQUlBSUFScUlnRWdBQUovSUFJcUFnQkRBQ0FBUkpJaUJ5QUNLZ0lRSWdpU0lnMGdBaW9DQ0NJSklBSXFBaGdpQ3BJaUJaSWlDeUFDS2dJVUlnd2dBaW9DRENJT2tpSVBJQUlxQWdRaUVDQUNLZ0ljSWhHU0loS1NJZ2FTSWhPTFF3QUFBRTlkQkVBZ0U2Z01BUXRCZ0lDQWdIZ0xRZjhIY1dvdEFBQTZBQUFnQVNBQUFuOGdDeUFHa3lJTGkwTUFBQUJQWFFSQUlBdW9EQUVMUVlDQWdJQjRDMEgvQjNGcUxRQUFPZ0FISUFFZ0FBSi9JQWNnQ0pNaUJ5QUpJQXFUUS9NRXRUK1VJQVdUSWdpU0lna2dEQ0FPa3lJS0lCQWdFWk1pQzVKRFhvUHNQNVFpRENBS1EzVTlKOENVa2lBR2t5SUdraUlLaTBNQUFBQlBYUVJBSUFxb0RBRUxRWUNBZ0lCNEMwSC9CM0ZxTFFBQU9nQUJJQUVnQUFKL0lBa2dCcE1pQ1l0REFBQUFUMTBFUUNBSnFBd0JDMEdBZ0lDQWVBdEIvd2R4YWkwQUFEb0FCaUFCSUFBQ2Z5QUhJQWlUSWdjZ0VpQVBrMFB6QkxVL2xDQUdreUlHa2lJSWkwTUFBQUJQWFFSQUlBaW9EQUVMUVlDQWdJQjRDMEgvQjNGcUxRQUFPZ0FDSUFFZ0FBSi9JQWNnQnBNaUI0dERBQUFBVDEwRVFDQUhxQXdCQzBHQWdJQ0FlQXRCL3dkeGFpMEFBRG9BQlNBQklBQUNmeUFOSUFXVElnVWdEQ0FMUTlTTGlyK1VraUFHa3lJR2tpSUhpME1BQUFCUFhRUkFJQWVvREFFTFFZQ0FnSUI0QzBIL0IzRnFMUUFBT2dBRElBRWdBQUovSUFVZ0JwTWlCWXREQUFBQVQxMEVRQ0FGcUF3QkMwR0FnSUNBZUF0Qi93ZHhhaTBBQURvQUJDQUNRU0JxSVFJZ0ZFRUJhaUlVUVFoSERRQUxJQlZCZ0FKcUpBQUxad0VCZnlBREtBSUFJQVJxSUFBb0F0QUNRWUFEYXlJQUlBRW9BbFFpQVNnQ0lDQUNMd0VRYkNJRklBRW9BZ0FnQWk4QkFHeEJoQ0JxSWdGcVFRTjJRZjhIY1dvdEFBQTZBQUFnQXlnQ0JDQUVhaUFBSUFFZ0JXdEJBM1pCL3dkeGFpMEFBRG9BQUF2YkF3RU5meUFES0FJQUlBUnFJZ1VnQUNnQzBBSkJnQU5ySWdBZ0FTZ0NWQ0lCS0FKZ0lBSXVBVEJzSWdZZ0FTZ0NJQ0FDTGdFUWJDSUhha0hSSW13aUNDQUhRZjR3YkdvaUJ5QUJLQUpBSUFJdkFTQnNJZ2tnQVNnQ0FDQUNMd0VBYkNJS2FrRU5kQ0lOYWtHQWdJSVFhaUlMSUFFb0FtUWdBaTRCTW13aURpQUJLQUlrSUFJdUFSSnNJZ3hxUWRFaWJDSVBJQXhCL2pCc2FpSU1JQUVvQWtRZ0FpOEJJbXdpRUNBQktBSUVJQUl2QVFKc0lnRnFRUTEwSWdKcUloRnFRUkIyUWY4SGNXb3RBQUE2QUFBZ0JTQUFJQXNnRVd0QkVIWkIvd2R4YWkwQUFEb0FBU0FES0FJRUlBUnFJZ1VnQUNBSUlBWkIzNGwvYkdvaUJpQUtJQWxyUVExMElnaHFRWUNBZ2hCcUlna2dEeUFPUWQrSmYyeHFJZ29nQVNBUWEwRU5kQ0lCYWlJTGFrRVFka0gvQjNGcUxRQUFPZ0FBSUFVZ0FDQUpJQXRyUVJCMlFmOEhjV290QUFBNkFBRWdBeWdDQ0NBRWFpSUZJQUFnQ0NBR2EwR0FnSUlRYWlJR0lBRWdDbXNpQVdwQkVIWkIvd2R4YWkwQUFEb0FBQ0FGSUFBZ0JpQUJhMEVRZGtIL0IzRnFMUUFBT2dBQklBTW9BZ3dnQkdvaUFTQUFJQTBnQjJ0QmdJQ0NFR29pQXlBQ0lBeHJJZ0pxUVJCMlFmOEhjV290QUFBNkFBQWdBU0FBSUFNZ0FtdEJFSFpCL3dkeGFpMEFBRG9BQVF2YUF3RU1meUFBS0FMUUFpRU9JQUVvQWxRaEFTTUFRZEFBYXlJSUlRQkJBU0VIQTBBZ0FTZ0NRQ0VLSUFJdUFTQWhDeUFBSUFJdUFRQWdBU2dDQUd4QkRYUkJnQWh5SWd3Z0FTZ0NnQUVnQWk0QlFHd2lEVUcrcFg5c2FrRUxkU0lQSUFFb0FpQWdBaTRCRUd3aUJTQUJLQUpnSUFJdUFUQnNJZ1lnQVNnQ29BRWdBaTRCVUd3aUNXcHJRUUowSWhCck5nSXdJQUFnRHlBUWFqWUNEQ0FBSUFvZ0MyeEJzYzRBYkNJS0lBMUJvUzFzSUF4cUlndHFJZ3dnQlNBSmFrRzJGMndpRFNBRklBWnFRUTEwYWlJRmEwRUxkVFlDUENBQUlBVWdER3BCQzNVMkFnQWdBQ0FMSUFwcklnVWdEU0FKSUFaclFRMTBhaUlHYTBFTGRUWUNKQ0FBSUFVZ0JtcEJDM1UyQWhnZ0IwRURSa1VFUUNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQUhRUUZxSVFjTUFRc0xJQTVCZ0FOcklRRkJBQ0VBSUFnaEFnTkFJQU1nQUVFQ2RHb29BZ0FnQkdvaUNDQUJJQUlvQWdCQkRYUkJnSUNJd0FCcUlnY2dBaWdDQ0NJRlFhRXRiR29pQmlBQ0tBSUVRYkhPQUd3aUNXcEJFblpCL3dkeGFpMEFBRG9BQUNBSUlBRWdCaUFKYTBFU2RrSC9CM0ZxTFFBQU9nQUNJQWdnQVNBRlFiNmxmMndnQjJwQkVuWkIvd2R4YWkwQUFEb0FBU0FDUVF4cUlRSWdBRUVCYWlJQVFRWkhEUUFMQzZZR0FSSi9JQUFvQXRBQ0lRc2dBU2dDVkNFQUl3QkJnQUZySWdraEFVRUVJUWNEUUFKL0FrQWdBaTRCRUNJR0lBSXVBU0FpQlhKQi8vOERjVVVFUUFKQUlBSXZBVEFOQUNBQ0x3RkFEUUFnQWk4QlVBMEFJQUl2QVdBTkFDQUNMd0Z3UlEwQ0MwRUFJUVVMSUFFZ0FDZ0N3QUVnQWk0QllHd2lDaUFBS0FKQUlBVnNJZ1ZxUWRFaWJDSU1JQVZCL2pCc2FpSVJJQUl1QVVBZ0FDZ0NnQUZzUVExMElnMGdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlEbW9pRW1vaUR5QUFLQUlnSUFac0lnVWdBQ2dDNEFFZ0FpNEJjR3dpQm1wQnMwWnNJaE1nQlVHTDRBQnNhaUFGSUFBb0FxQUJJQUl1QVZCc0lnaHFJaEFnQUNnQ1lDQUNMZ0V3YkNJRklBWnFJaFJxUWFITEFHd2lGU0FRUVlSbmJHb2lFR29pRm10QkMzVTJBbkFnQVNBUElCWnFRUXQxTmdJQUlBRWdEQ0FLUWQrSmYyeHFJZ29nRGlBTmF5SU1haUlOSUJVZ0ZFRzdnbjlzYWlJT0lBVWdDR3BCL2R0K2JDSVBJQVZCMU1RQmJHcHFJZ1ZyUVF0MU5nSmdJQUVnQlNBTmFrRUxkVFlDRUNBQklBd2dDbXNpQlNBUElBaEJzNE1CYkdvZ0VHb2lDR3RCQzNVMkFsQWdBU0FGSUFocVFRdDFOZ0lnSUFFZ0V5QUdRWTRUYkdvZ0Rtb2lCU0FTSUJGcklnWnFRUXQxTmdJd0lBWWdCV3RCQzNVaEJTQUJRVUJyREFFTElBRWdBaTRCQUNBQUtBSUFiRUVDZENJRk5nSmdJQUVnQlRZQ1VDQUJJQVUyQWtBZ0FTQUZOZ0l3SUFFZ0JUWUNJQ0FCSUFVMkFoQWdBU0FGTmdJQUlBRkI4QUJxQ3lBRk5nSUFJQUpCQW1vaEFpQUFRUVJxSVFBZ0FVRUVhaUVCSUFkQkFVc2hCU0FIUVFGcklRY2dCUTBBQ3lBTFFZQURheUVBUVFBaEJ5QUpJUUlEUUNBRElBZEJBblJxS0FJQUlBUnFJZ0VnQUNBQ0tBSU1JZ2tnQWlnQ0JDSUZha0hSSW13aUJpQUZRZjR3YkdvaUJTQUNLQUlBUVpDQUFXb2lDQ0FDS0FJSUlndHFRUTEwSWdwcVFSSjJRZjhIY1dvdEFBQTZBQUFnQVNBQUlBb2dCV3RCRW5aQi93ZHhhaTBBQURvQUF5QUJJQUFnQmlBSlFkK0pmMnhxSWdrZ0NDQUxhMEVOZENJRmFrRVNka0gvQjNGcUxRQUFPZ0FCSUFFZ0FDQUZJQWxyUVJKMlFmOEhjV290QUFBNkFBSWdBa0VRYWlFQ0lBZEJBV29pQjBFSVJ3MEFDd3VUQmdFU2Z5TUFRZEFCYXlJUEpBQWdBQ2dDMEFJaERTQUJLQUpVSVFBZ0R5RUJRUUVoQ1FOQUlBQW9Bc0FCSVFnZ0FpNEJZQ0VHSUFBb0FrQWhDaUFDTGdFZ0lRNGdBU0FDTGdFQUlBQW9BZ0JzUVExMFFZQUljaUlGSUFBb0FvQUJJQUl1QVVCc0lndEJ2cVYvYkdwQkMzVWlFQ0FBS0FJZ0lBSXVBUkJzSWdjZ0FDZ0NvQUVnQWk0QlVHd2lFU0FBS0FKZ0lBSXVBVEJzSWhJZ0FDZ0M0QUVnQWk0QmNHd2lFMnNpREdwclFRSjBJaFJyTmdLTUFTQUJJQkFnRkdvMkFpZ2dBU0FHSUFoc0lnZ2dDaUFPYkNJR2FrR2FOV3dpQ2lBR1FmRWdiR29pQmlBTFFaM0pBR3dnQldvaURtb2lFQ0FNUWVNVGJDSVVJQkZCRFhRaUVXb2lGU0FTSUJOcUloSkI3enhzSWhNZ0IwR3oyUUJzYW1vaUZtdEJDM1UyQXJRQklBRWdFQ0FXYWtFTGRUWUNBQ0FCSUE0Z0Jtc2lCaUFIUVpRT2JDQVRheUFWYWlJT2EwRUxkVFlDWkNBQklBWWdEbXBCQzNVMkFsQWdBU0FMUVlSa2JDQUZhaUlGSUFvZ0NFSGM5SDVzYWlJTGF5SUlJQkVnRkdzZ0RFRU1kR3NpRENBSFFZd3BiQ0FTUWM4bGJDSUdhMm9pQ210QkMzVTJBbmdnQVNBSUlBcHFRUXQxTmdJOElBRWdCU0FMYWlJRklBZEIwOUFBYkNBR0lBeHFheUlIYTBFTGRUWUNvQUVnQVNBRklBZHFRUXQxTmdJVUlBbEJCVVpGQkVBZ0FVRUVhaUVCSUFCQkJHb2hBQ0FDUVFKcUlRSWdDVUVCYWlFSkRBRUxDeUFOUVlBRGF5RUFRUUFoQnlBUElRRURRQ0FESUFkQkFuUnFLQUlBSUFScUlnSWdBQ0FCS0FJTUlna2dBU2dDQkNJRmFrR2FOV3dpQ3lBRlFmRWdiR29pQlNBQktBSUFRUTEwUVlDQWlNQUFhaUlNSUFFb0FnZ2lEU0FCS0FJUUlnaHJJZ1pCMEJac2FpSUtJQWdnRFdwQnpESnNJZzFxSWdocVFSSjJRZjhIY1dvdEFBQTZBQUFnQWlBQUlBZ2dCV3RCRW5aQi93ZHhhaTBBQURvQUJDQUNJQUFnQ3lBSlFkejBmbXhxSWdrZ0NpQU5heUlGYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUlnQUNBRklBbHJRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUFJQVpCd0tWL2JDQU1ha0VTZGtIL0IzRnFMUUFBT2dBQ0lBRkJGR29oQVNBSFFRRnFJZ2RCQ2tjTkFBc2dEMEhRQVdva0FBdjNCZ0VTZnlNQVFhQUNheUlTSkFBZ0FDZ0MwQUloRXlBQktBSlVJUUFnRWlFQlFRRWhDQU5BSUFBb0FvQUJJUTRnQWk0QlFDRUtJQUVnQUNnQ1FDQUNMZ0VnYkNJSklBQW9Bc0FCSUFJdUFXQnNJaEJyUVExMElnc2dBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlCV29pRENBQUtBSWdJQUl1QVJCc0lnWWdBQ2dDNEFFZ0FpNEJjR3dpQjJzaUVTQUFLQUpnSUFJdUFUQnNJZzhnQUNnQ29BRWdBaTRCVUd3aURXc2lGR3BCMFNKc0loVWdFVUgrTUd4cUloRnJRUXQxTmdMd0FTQUJJQXdnRVdwQkMzVTJBaGdnQVNBRklBdHJJZ3NnRlNBVVFkK0pmMnhxSWd4clFRdDFOZ0tvQVNBQklBc2dER3BCQzNVMkFtQWdBU0FLSUE1c1FiSE9BR3dpQ2lBRmFpSUxJQkJCRFhRaUVDQUpRYmJYQUd4cUlneHJJaEVnQnlBR0lBMXFJaFJxUVkwM2JDSU9JQTlCcjExc0loVWdCa0hjVkd4cUlBZEJqSUYvYkdwcUloWnJRUXQxTmdLUUFTQUJJQkVnRm1wQkMzVTJBbmdnQVNBTElBeHFJZ3NnRGlBVVFkc1FiR29pRENBUFFjL1RBR3dpRHlBR1FmY1JiR3BxSWdaclFRdDFOZ0tJQWlBQklBWWdDMnBCQzNVMkFnQWdBU0FKUWJZWGJDQVFheUlHSUFVZ0Ntc2lCV29pQ1NBSElBMXFRWXU5ZjJ3aUNpQU5RYkNoZjJ3Z0ZXcHFJQXhxSWcxclFRdDFOZ0xZQVNBQklBa2dEV3BCQzNVMkFqQWdBU0FGSUFacklnVWdCMEhHNVFCc0lBOXJJQTVxSUFwcUlnZHJRUXQxTmdMQUFTQUJJQVVnQjJwQkMzVTJBa2dnQ0VFR1JrVUVRQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBSVFRRnFJUWdNQVFzTElCTkJnQU5ySVFCQkFDRUhJQkloQVFOQUlBTWdCMEVDZEdvb0FnQWdCR29pQWlBQUlBRW9BaFFpQ0NBQktBSUVJZ1ZxUWJZWGJDSU5JQUVvQWd3aUJpQUZha0VOZEdvaUNTQUJLQUlBUVExMFFZQ0FpTUFBYWlJUElBRW9BaEFpRGtHaExXeHFJaE1nQVNnQ0NFR3h6Z0JzSWdwcUloQnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQkFnQ1d0QkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFBZ0JTQUdJQWhxYTBFTmRDSUZJQTVCdnFWL2JDQVBhaUlKYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUlnQUNBSklBVnJRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUFJQTBnQ0NBR2EwRU5kR29pQ0NBVElBcHJJZ1ZxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFBSUFVZ0NHdEJFblpCL3dkeGFpMEFBRG9BQXlBQlFSaHFJUUVnQjBFQmFpSUhRUXhIRFFBTElCSkJvQUpxSkFBTHJRZ0JGWDhqQUVHUUEyc2lFeVFBSUFBb0F0QUNJUlFnQVNnQ1ZDRUFJQk1oQVVFQklRd0RRQ0FBS0FMQUFTRU5JQUl1QVdBaENDQUFLQUpBSVFrZ0FpNEJJQ0VMSUFFZ0FpNEJBQ0FBS0FJQWJFRU5kRUdBQ0hJaUNpQUFLQUtBQVNBQ0xnRkFiQ0lPUWI2bGYyeHFRUXQxSWc4Z0FDZ0M0QUVnQWk0QmNHd2lFQ0FBS0FJZ0lBSXVBUkJzSWdjZ0FDZ0NZQ0FDTGdFd2JDSUZheUlSSUFBb0FxQUJJQUl1QVZCc0lnWnJha0VDZENJU2F6WUNtQUlnQVNBUElCSnFOZ0pVSUFFZ0NDQU5iQ0lJSUFrZ0Myd2lDV3BCNHNZQWJDSUxJQWhCL0pGL2JHb2lEeUFPUVpJVWJDQUthaUlTYWlJVklBVWdCbXBCNzNWc0lCQkJEWFFpRFdzaUVDQUZJQWRxUWJmVkFHd2lGeUFGUWU1a2JHcHFJaFpyUVF0MU5nTFFBaUFCSUJVZ0ZtcEJDM1UyQWh3Z0FTQUlRZUduZjJ3Z0NVR2pKMnhxSWdnZ0RrSEpSMndnQ21vaUZXb2lGaUFRSUFZZ0Iyb2lFRUhTekFCc0loZ2dCa0dKNkg1c2Ftb2lHV3RCQzNVMkFyUUNJQUVnRmlBWmFrRUxkVFlDT0NBQklCSWdEMnNpRHlBUlFmSWRiQ0FOYXlJUklBWWdCV3RCK05rQWJDSVNJQVZCbVN0c2Ftb2lCV3RCQzNVMkF1QUJJQUVnQlNBUGFrRUxkVFlDakFFZ0FTQU9RY2JSQUd3Z0Ntb2lCU0FMSUFsQnZSRnNhaUlLYXlJT0lCQkJsREJzSWdrZ0IwR0x2SDlzYWlBUmFpSUxhMEVMZFRZQ3hBRWdBU0FMSUE1cVFRdDFOZ0tvQVNBQklBVWdDbW9pQlNBWElBZEI4TGQvYkdvZ0dHb2dEV29pQjJ0QkMzVTJBdXdDSUFFZ0JTQUhha0VMZFRZQ0FDQUJJQlVnQ0dzaUJTQVNJQVpCNXBOL2JHb2dDV29nRFdvaUJtdEJDM1UyQXZ3QklBRWdCU0FHYWtFTGRUWUNjQ0FNUVFkR1JRUkFJQUZCQkdvaEFTQUFRUVJxSVFBZ0FrRUNhaUVDSUF4QkFXb2hEQXdCQ3dzZ0ZFR0FBMnNoQUVFQUlRVWdFeUVCQTBBZ0F5QUZRUUowYWlnQ0FDQUVhaUlDSUFBZ0FTZ0NEQ0lISUFFb0FnUWlCbXBCN3p0c0lnZ2dCaUFIYTBIekNtd2lDV3NnQVNnQ0ZDSU1JQVpxUWFNbmJDSVVhaUlMSUFFb0FoQWlCaUFCS0FJWUlncHJRYmM0YkNJUElBcEJnM3RzYWlBQktBSUFRUTEwUVlDQWlNQUFhaUlPSUFvZ0FTZ0NDQ0lOYWlJS1FjYlJBR3hxSWhCcUloRnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUFJQkVnQzJ0QkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFBZ0J5QU1ha0hocDM5c0lnY2dDQ0FKYW1vaUNDQU5JQVpyUVpJVWJDSUpJQVpCbFlwL2JDQU9hbW9nRDJvaUMycEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBQWdDeUFJYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQUNBVUlBeEIzdmNBYkdvZ0Iyb2lCeUFKSUExQjhlRitiR29nRUdvaURHcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBQWdEQ0FIYTBFU2RrSC9CM0ZxTFFBQU9nQUVJQUlnQUNBR0lBcHJRY0hhQUd3Z0RtcEJFblpCL3dkeGFpMEFBRG9BQXlBQlFSeHFJUUVnQlVFQmFpSUZRUTVIRFFBTElCTkJrQU5xSkFBTHlna0JHbjhqQUVHQUJHc2lGQ1FBSUFBb0F0QUNJUThnQVNnQ1ZDRUFJQlFoQVVFQklSQURRQ0FCSUFBb0FrQWdBaTRCSUd3aURDQUFLQUxBQVNBQ0xnRmdiQ0lOYXlJS1FlUFlBR3dpRGlBTlFZT2tBV3hxSWhFZ0FDZ0NnQUVnQWk0QlFHd2lDMEhQMHdCc0loVWdBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlDV29pRm1vaUVpQUFLQUpnSUFJdUFUQnNJZ2dnQUNnQ0lDQUNMZ0VRYkNJRmFrSE8xZ0JzSWhNZ0JVSFc3WDVzYWlBQUtBS2dBU0FDTGdGUWJDSUhJQVZxSWhsQjZjOEFiQ0lYYWlBQUtBTGdBU0FDTGdGd2JDSUdJQVZxUWZ6RkFHd2lHbW9pR0d0QkMzVTJBdUFESUFFZ0VpQVlha0VMZFRZQ0FDQUJJQXBCMUJGc0lnb2dERUhOT1d4cUloSWdDMEhSSW13aUN5QUphaUlZYWlJYklBWWdDR29pSEVHclZXd2lIU0FISUFocVFmQUliQ0llSUJNZ0NFSE5CR3hxYW1vaUUydEJDM1UyQXNBRElBRWdFeUFiYWtFTGRUWUNJQ0FCSUE0Z0RFSENXV3hxSWd3Z0NTQUxheUlPYWlJTElBWWdCMnBCc3FsL2JDSVRJQjRnQjBINnQzOXNhaUFYYW1vaUYydEJDM1UyQXFBRElBRWdDeUFYYWtFTGRUWUNRQ0FCSUFvZ0RVR3dYMnhxSWcwZ0NTQVZheUlKYWlJS0lCMGdCa0dZeEFCc2FpQWFhaUFUYWlJTGEwRUxkVFlDZ0FNZ0FTQUtJQXRxUVF0MU5nSmdJQUVnQ1NBTmF5SUpJQVlnQjJ0Qm94cHNJZzBnQlNBR2EwRzJPV3dpQ2lBY1FaZXdmMndpQ3lBR1FZWEpBV3hxYW1vaUJtdEJDM1UyQXVBQ0lBRWdCaUFKYWtFTGRUWUNnQUVnQVNBT0lBeHJJZ1lnR1VIVkttd2lDU0FISUFoclFZbmFBR3dpRENBSFFmcE9iR3BxSUExcUlnZHJRUXQxTmdMQUFpQUJJQVlnQjJwQkMzVTJBcUFCSUFFZ0dDQVNheUlISUFVZ0NHdEJveHBzSWdZZ0NFR2EvZ0JzYWlBTWFpQUxhaUlJYTBFTGRUWUNvQUlnQVNBSElBaHFRUXQxTmdMQUFTQUJJQllnRVdzaUNDQUdJQVZCd29wL2JHb2dDV29nQ21vaUJXdEJDM1UyQW9BQ0lBRWdCU0FJYWtFTGRUWUM0QUVnRUVFSVJrVUVRQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBUVFRRnFJUkFNQVFzTElBOUJnQU5ySVFCQkFDRUlJQlFoQVFOQUlBTWdDRUVDZEdvb0FnQWdCR29pQWlBQUlBRW9BZ1FpQlNBQktBSWNJZ2RxUWJOR2JDSVFJQVZCaStBQWJHb2dCU0FCS0FJVUlnWnFJZ2tnQVNnQ0RDSUZJQWRxSWd4cVFhSExBR3dpRFNBSlFZUm5iR29pQ1dvaUR5QUJLQUlZSWdvZ0FTZ0NDQ0lPYWtIUkltd2lFU0FPUWY0d2JHb2lEaUFCS0FJQVFaQ0FBV29pQ3lBQktBSVFJaFZxUVExMEloWnFJaEpxUVJKMlFmOEhjV290QUFBNkFBQWdBaUFBSUJJZ0QydEJFblpCL3dkeGFpMEFBRG9BQnlBQ0lBQWdEU0FNUWJ1Q2YyeHFJZ3dnQlNBR2FrSDkyMzVzSWcwZ0JVSFV4QUZzYW1vaUJTQVJJQXBCMzRsL2JHb2lEeUFMSUJWclFRMTBJZ3BxSWhGcVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQUlCRWdCV3RCRW5aQi93ZHhhaTBBQURvQUJpQUNJQUFnRFNBR1FiT0RBV3hxSUFscUlnVWdDaUFQYXlJR2FrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FDQUdJQVZyUVJKMlFmOEhjV290QUFBNkFBVWdBaUFBSUJBZ0IwR09FMnhxSUF4cUlnVWdGaUFPYXlJSGFrRVNka0gvQjNGcUxRQUFPZ0FESUFJZ0FDQUhJQVZyUVJKMlFmOEhjV290QUFBNkFBUWdBVUVnYWlFQklBaEJBV29pQ0VFUVJ3MEFDeUFVUVlBRWFpUUFDMkVBSUFNb0FnQWdCR29pQXlBQUtBTFFBa0dBQTJzaUFDQUJLQUpVSWdFb0FnUWdBaThCQW13aUJDQUJLQUlBSUFJdkFRQnNRWVFnYWlJQmFrRURka0gvQjNGcUxRQUFPZ0FBSUFNZ0FDQUJJQVJyUVFOMlFmOEhjV290QUFBNkFBRUx1d01CRFg4Z0F5Z0NBQ0FFYWlJRklBQW9BdEFDUVlBRGF5SUFJQUVvQWxRaUFTZ0NMQ0FDTGdFV2JDSUdJQUVvQWd3Z0FpNEJCbXdpQjJvaUNDQUJLQUlrSUFJdUFSSnNJZ29nQVNnQ0JDQUNMZ0VDYkNJTGFpSUpha0hSSW13aURDQUpRZjR3YkdvaUNTQUJLQUlnSUFJdkFSQnNJZzBnQVNnQ0FDQUNMd0VBYkNJT2FrR0VJR29pRHlBQktBSW9JQUl2QVJSc0loQWdBU2dDQ0NBQ0x3RUViQ0lDYWlJQmFrRU5kQ0lSYWtFUWRrSC9CM0ZxTFFBQU9nQUFJQVVnQUNBUklBbHJRUkIyUWY4SGNXb3RBQUE2QUFNZ0JTQUFJQXdnQ0VIZmlYOXNhaUlJSUE4Z0FXdEJEWFFpQVdwQkVIWkIvd2R4YWkwQUFEb0FBU0FGSUFBZ0FTQUlhMEVRZGtIL0IzRnFMUUFBT2dBQ0lBTW9BZ1FnQkdvaUFTQUFJQWNnQm1zaUF5QUxJQXBySWdScVFkRWliQ0lGSUFSQi9qQnNhaUlFSUE0Z0RXdEJoQ0JxSWdZZ0FpQVFheUlDYWtFTmRDSUhha0VRZGtIL0IzRnFMUUFBT2dBQUlBRWdBQ0FISUFSclFSQjJRZjhIY1dvdEFBQTZBQU1nQVNBQUlBVWdBMEhmaVg5c2FpSURJQVlnQW10QkRYUWlBbXBCRUhaQi93ZHhhaTBBQURvQUFTQUJJQUFnQWlBRGEwRVFka0gvQjNGcUxRQUFPZ0FDQzhVSEFRdC9JQUFvQXRBQ0lRa2dBaTRCRUNFRklBRW9BbFFpQVNnQ0lDRUhJd0JCMEFCcklnQWdBaTRCQUNBQktBSUFiRUVOZEVHQUNISWlCaUFCS0FKQUlBSXVBU0JzSWdoQnZxVi9iR3BCQzNVMkFoZ2dBQ0FJUWFFdGJDQUdhaUlHSUFVZ0IyeEJzYzRBYkNJRmEwRUxkVFlDTUNBQUlBVWdCbXBCQzNVMkFnQWdBU2dDSkNFRklBSXVBUkloQnlBQUlBSXVBUUlnQVNnQ0JHeEJEWFJCZ0FoeUlnWWdBU2dDUkNBQ0xnRWliQ0lJUWI2bGYyeHFRUXQxTmdJY0lBQWdDRUdoTFd3Z0Jtb2lCaUFGSUFkc1FiSE9BR3dpQld0QkMzVTJBalFnQUNBRklBWnFRUXQxTmdJRUlBRW9BaWdoQlNBQ0xnRVVJUWNnQUNBQ0xnRUVJQUVvQWdoc1FRMTBRWUFJY2lJR0lBRW9Ba2dnQWk0QkpHd2lDRUcrcFg5c2FrRUxkVFlDSUNBQUlBaEJvUzFzSUFacUlnWWdCU0FIYkVHeHpnQnNJZ1ZyUVF0MU5nSTRJQUFnQlNBR2FrRUxkVFlDQ0NBQktBSXNJUVVnQWk0QkZpRUhJQUFnQWk0QkJpQUJLQUlNYkVFTmRFR0FDSElpQmlBQktBSk1JQUl1QVNac0lnaEJ2cVYvYkdwQkMzVTJBaVFnQUNBSVFhRXRiQ0FHYWlJR0lBVWdCMnhCc2M0QWJDSUZhMEVMZFRZQ1BDQUFJQVVnQm1wQkMzVTJBZ3dnQVNnQ01DRUZJQUl1QVJnaEJ5QUFJQUl1QVFnZ0FTZ0NFR3hCRFhSQmdBaHlJZ1lnQVNnQ1VDQUNMZ0VvYkNJSVFiNmxmMnhxUVF0MU5nSW9JQUFnQ0VHaExXd2dCbW9pQmlBRklBZHNRYkhPQUd3aUJXdEJDM1UyQWtBZ0FDQUZJQVpxUVF0MU5nSVFJQUVvQWpRaEJTQUNMZ0VhSVFjZ0FDQUNMZ0VLSUFFb0FoUnNRUTEwUVlBSWNpSUdJQUVvQWxRZ0FpNEJLbXdpQVVHK3BYOXNha0VMZFRZQ0xDQUFJQUZCb1Mxc0lBWnFJZ0VnQlNBSGJFR3h6Z0JzSWdKclFRdDFOZ0pFSUFBZ0FTQUNha0VMZFRZQ0ZDQUpRWUFEYXlFQlFRQWhDU0FBSVFJRFFDQURJQWxCQW5ScUtBSUFJQVJxSWdBZ0FTQUNLQUlVSWdVZ0FpZ0NCQ0lIYWtHMkYyd2lDQ0FDS0FJTUlnWWdCMnBCRFhScUlnb2dBaWdDQUVFTmRFR0FnSWpBQUdvaUN5QUNLQUlRSWd4Qm9TMXNhaUlOSUFJb0FnaEJzYzRBYkNJT2FpSVBha0VTZGtIL0IzRnFMUUFBT2dBQUlBQWdBU0FQSUFwclFSSjJRZjhIY1dvdEFBQTZBQVVnQUNBQklBY2dCU0FHYW10QkRYUWlCeUFNUWI2bGYyd2dDMm9pQ21wQkVuWkIvd2R4YWkwQUFEb0FBU0FBSUFFZ0NpQUhhMEVTZGtIL0IzRnFMUUFBT2dBRUlBQWdBU0FJSUFVZ0JtdEJEWFJxSWdVZ0RTQU9heUlIYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUFnQVNBSElBVnJRUkoyUWY4SGNXb3RBQUE2QUFNZ0FrRVlhaUVDSUFsQkFXb2lDVUVEUncwQUN3dWJCUUVRZnlBQUtBTFFBaUVKSUFFb0FsUWhBU01BUVlBQmF5SUZJUUJCQVNFSEEwQWdBQ0FCS0FKQUlBSXVBU0JzSWdZZ0FTZ0NBQ0FDTGdFQWJDSUtha0VDZENJTElBRW9BbUFnQWk0Qk1Hd2lEQ0FCS0FJZ0lBSXVBUkJzSWdocVFkRWliRUdBQ0dvaURTQUlRZjR3YkdwQkMzVWlDR3MyQW1BZ0FDQUlJQXRxTmdJQUlBQWdDaUFHYTBFQ2RDSUdJQTBnREVIZmlYOXNha0VMZFNJS2F6WUNRQ0FBSUFZZ0NtbzJBaUFnQjBFSVJrVUVRQ0FBUVFScUlRQWdBVUVFYWlFQklBSkJBbW9oQWlBSFFRRnFJUWNNQVFzTElBbEJnQU5ySVFCQkFDRUhJQVVoQWdOQUlBTWdCMEVDZEdvb0FnQWdCR29pQVNBQUlBSW9BZ1FpQlNBQ0tBSWNJZ2xxUWJOR2JDSUtJQVZCaStBQWJHb2dCU0FDS0FJVUlnWnFJZ3NnQWlnQ0RDSUZJQWxxSWd4cVFhSExBR3dpQ0NBTFFZUm5iR29pQzJvaURTQUNLQUlZSWc0Z0FpZ0NDQ0lQYWtIUkltd2lFQ0FQUWY0d2JHb2lEeUFDS0FJQVFaQ0FBV29pRVNBQ0tBSVFJaEpxUVExMEloTnFJaFJxUVJKMlFmOEhjV290QUFBNkFBQWdBU0FBSUJRZ0RXdEJFblpCL3dkeGFpMEFBRG9BQnlBQklBQWdDQ0FNUWJ1Q2YyeHFJZ3dnQlNBR2FrSDkyMzVzSWdnZ0JVSFV4QUZzYW1vaUJTQVFJQTVCMzRsL2JHb2lEU0FSSUJKclFRMTBJZzVxSWhCcVFSSjJRZjhIY1dvdEFBQTZBQUVnQVNBQUlCQWdCV3RCRW5aQi93ZHhhaTBBQURvQUJpQUJJQUFnQ0NBR1FiT0RBV3hxSUF0cUlnVWdEaUFOYXlJR2FrRVNka0gvQjNGcUxRQUFPZ0FDSUFFZ0FDQUdJQVZyUVJKMlFmOEhjV290QUFBNkFBVWdBU0FBSUFvZ0NVR09FMnhxSUF4cUlnVWdFeUFQYXlJSmFrRVNka0gvQjNGcUxRQUFPZ0FESUFFZ0FDQUpJQVZyUVJKMlFmOEhjV290QUFBNkFBUWdBa0VnYWlFQ0lBZEJBV29pQjBFRVJ3MEFDd3V4QmdFU2Z5TUFRYUFCYXlJUEpBQWdBQ2dDMEFJaENpQUJLQUpVSVFFZ0R5RUFRUUVoQndOQUlBRW9BbUFoQmlBQ0xnRXdJUVVnQVNnQ0lDRUpJQUl1QVJBaEN5QUFJQUl1QVFBZ0FTZ0NBR3hCRFhSQmdBaHlJZ3dnQVNnQ1FDQUNMZ0VnYkNJSUlBRW9Bb0FCSUFJdUFVQnNJZzFySWc1QndLVi9iR3BCQzNVMkFrQWdBQ0FPUWRBV2JDQU1haUlNSUFnZ0RXcEJ6REpzSWdocUlnMGdCU0FHYkNJR0lBa2dDMndpQldwQm1qVnNJZ2tnQlVIeElHeHFJZ1ZyUVF0MU5nS0FBU0FBSUFVZ0RXcEJDM1UyQWdBZ0FDQU1JQWhySWdVZ0NTQUdRZHowZm14cUlnWnJRUXQxTmdKZ0lBQWdCU0FHYWtFTGRUWUNJQ0FIUVFoR1JRUkFJQUJCQkdvaEFDQUJRUVJxSVFFZ0FrRUNhaUVDSUFkQkFXb2hCd3dCQ3dzZ0NrR0FBMnNoQUVFQUlRb2dEeUVCQTBBZ0F5QUtRUUowYWlnQ0FDQUVhaUlDSUFBZ0FTZ0NIQ0lHSUFFb0Fnd2lCV29pQzBIdlBHd2lEQ0FCS0FJRUlnZEJzOWtBYkdvZ0JTQUdheUlHUWVNVGJDSUlJQUVvQWhRaURVRU5kQ0lPYWlJVGFpSVFJQUVvQWhnaUVTQUJLQUlJSWdWcVFabzFiQ0lTSUFWQjhTQnNhaUlVSUFFb0FnQkJEWFJCZ0lDSXdBQnFJZ1VnQVNnQ0VDSUpRWjNKQUd4cUloVnFJaFpxUVJKMlFmOEhjV290QUFBNkFBQWdBaUFBSUJZZ0VHdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBQWdCMEhUMEFCc0lBdEJ6eVZzSWdzZ0RpQUlheUFHUVF4MGF5SUlhbXNpRGlBU0lCRkIzUFIrYkdvaUVDQUpRWVJrYkNBRmFpSVJhaUlTYWtFU2RrSC9CM0ZxTFFBQU9nQUJJQUlnQUNBU0lBNXJRUkoyUWY4SGNXb3RBQUE2QUFnZ0FpQUFJQWNnQmlBTmFtdEJEWFFpQmlBSlFiNmxmMndnQldvaUJXcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBQWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUhJQUlnQUNBSUlBZEJqQ2xzSUF0cmFpSUdJQkVnRUdzaUJXcEJFblpCL3dkeGFpMEFBRG9BQXlBQ0lBQWdCU0FHYTBFU2RrSC9CM0ZxTFFBQU9nQUdJQUlnQUNBSFFaUU9iQ0FNYXlBVGFpSUhJQlVnRkdzaUJtcEJFblpCL3dkeGFpMEFBRG9BQkNBQ0lBQWdCaUFIYTBFU2RrSC9CM0ZxTFFBQU9nQUZJQUZCSUdvaEFTQUtRUUZxSWdwQkJVY05BQXNnRDBHZ0FXb2tBQXVlQndFVWZ5TUFRY0FCYXlJUUpBQWdBQ2dDMEFJaENpQUJLQUpVSVFFZ0VDRUFRUUVoQmdOQUlBRW9Ba0FoRENBQ0xnRWdJUTBnQUNBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJSElBRW9Bb0FCSUFJdUFVQnNJZzVCdnFWL2JHcEJDM1VpRHlBQktBSWdJQUl1QVJCc0lnZ2dBU2dDWUNBQ0xnRXdiQ0lKSUFFb0FxQUJJQUl1QVZCc0lnVnFhMEVDZENJTGF6WUNnQUVnQUNBTElBOXFOZ0lnSUFBZ0RDQU5iRUd4emdCc0lnd2dEa0doTFd3Z0Iyb2lEV29pQnlBRklBaHFRYllYYkNJT0lBZ2dDV3BCRFhScUlnaHJRUXQxTmdLZ0FTQUFJQWNnQ0dwQkMzVTJBZ0FnQUNBTklBeHJJZ2dnRGlBRklBbHJRUTEwYWlJSmEwRUxkVFlDWUNBQUlBZ2dDV3BCQzNVMkFrQWdCa0VJUmtVRVFDQUFRUVJxSVFBZ0FVRUVhaUVCSUFKQkFtb2hBaUFHUVFGcUlRWU1BUXNMSUFwQmdBTnJJUUZCQUNFSUlCQWhBQU5BSUFNZ0NFRUNkR29vQWdBZ0JHb2lBaUFCSUFBb0Fnd2lERUhQMHdCc0lnNGdBQ2dDQkNJSlFmY1JiR29nQUNnQ0ZDSUZJQWxxSWdvZ0FDZ0NIQ0lHYWtHTk4yd2lEU0FLUWRzUWJHb2lEMm9pQ3lBQUtBSVlJaEZCRFhRaUVpQUFLQUlJSWdkQnR0Y0FiR29pRkNBQUtBSUFRUTEwUVlDQWlNQUFhaUlLSUFBb0FoQkJzYzRBYkNJVmFpSVdhaUlUYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQVNBVElBdHJRUkoyUWY4SGNXb3RBQUE2QUFzZ0FpQUJJQWtnQm1zaUN5QU1JQVZySWhOcVFkRWliQ0lYSUF0Qi9qQnNhaUlMSUFjZ0VXdEJEWFFpRVNBS2FpSVlha0VTZGtIL0IzRnFMUUFBT2dBQklBSWdBU0FZSUF0clFSSjJRZjhIY1dvdEFBQTZBQW9nQWlBQklBOGdCU0FHYWtHTHZYOXNJZzhnREVHdlhXd2lEQ0FGUWJDaGYyeHFhbW9pQlNBSFFiWVhiQ0FTYXlJSElBb2dGV3NpQzJvaUVtcEJFblpCL3dkeGFpMEFBRG9BQWlBQ0lBRWdFaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUpJQUlnQVNBR1FjYmxBR3dnRG1zZ0RXb2dEMm9pQlNBTElBZHJJZ2RxUVJKMlFmOEhjV290QUFBNkFBTWdBaUFCSUFjZ0JXdEJFblpCL3dkeGFpMEFBRG9BQ0NBQ0lBRWdGeUFUUWQrSmYyeHFJZ1VnQ2lBUmF5SUtha0VTZGtIL0IzRnFMUUFBT2dBRUlBSWdBU0FLSUFWclFSSjJRZjhIY1dvdEFBQTZBQWNnQWlBQklBd2dDVUhjVkd4cUlBWkJqSUYvYkdvZ0RXb2lCaUFXSUJScklnbHFRUkoyUWY4SGNXb3RBQUE2QUFVZ0FpQUJJQWtnQm10QkVuWkIvd2R4YWkwQUFEb0FCaUFBUVNCcUlRQWdDRUVCYWlJSVFRWkhEUUFMSUJCQndBRnFKQUFMOFFnQkZIOGpBRUhnQVdzaUV5UUFJQUFvQXRBQ0lRd2dBU2dDVkNFQklCTWhBRUVCSVE0RFFDQUJLQUtnQVNFSElBSXVBVkFoQ1NBQktBSWdJUTBnQWk0QkVDRVBJQUVvQW1BaENDQUNMZ0V3SVJRZ0FDQUNMZ0VBSUFFb0FnQnNRUTEwUVlBSWNpSUZJQUVvQW9BQklBSXVBVUJzSWdZZ0FTZ0N3QUVnQWk0QllHd2lDaUFCS0FKQUlBSXVBU0JzSWd0cUloQnJRY0hhQUd4cVFRdDFOZ0pnSUFBZ0VFSEcwUUJzSUFWcUloQWdCaUFLYTBHM09Hd2lFU0FLUVlON2JHcHFJaElnQnlBSmJDSUtJQTBnRDJ3aUIycEJveWRzSWcwZ0NDQVViQ0lKSUFkcVFlODdiQ0lQSUFjZ0NXdEI4d3BzSWdkcmFpSUlhMEVMZFRZQ3dBRWdBQ0FJSUJKcVFRdDFOZ0lBSUFBZ0N5QUdhMEdTRkd3aUNDQUxRZkhoZm14cUlCQnFJZ3NnQ1NBS2FrSGhwMzlzSWdrZ0RTQUtRZDczQUd4cWFpSUthMEVMZFRZQ2dBRWdBQ0FLSUF0cVFRdDFOZ0pBSUFBZ0JrR1ZpbjlzSUFWcUlBaHFJQkZxSWdZZ0J5QVBhaUFKYWlJRmEwRUxkVFlDb0FFZ0FDQUZJQVpxUVF0MU5nSWdJQTVCQ0VaRkJFQWdBRUVFYWlFQUlBRkJCR29oQVNBQ1FRSnFJUUlnRGtFQmFpRU9EQUVMQ3lBTVFZQURheUVCUVFBaERpQVRJUUFEUUNBRElBNUJBblJxS0FJQUlBUnFJZ0lnQVNBQUtBSWNJZzlCRFhRaUN5QUFLQUlNSWdZZ0FDZ0NCQ0lLYWtHMzFRQnNJZ2dnQ2tId3QzOXNhaUFBS0FJVUlnVWdDbW9pRkVIU3pBQnNJaEJxYWlJUklBQW9BaGdpRENBQUtBSUlJZzFxUWVMR0FHd2lFaUFOUWIwUmJHb2lGaUFBS0FJQVFRMTBRWUNBaU1BQWFpSUhJQUFvQWhBaUNVSEcwUUJzYWlJWGFpSVZha0VTZGtIL0IzRnFMUUFBT2dBQUlBSWdBU0FWSUJGclFSSjJRZjhIY1dvdEFBQTZBQTBnQWlBQklBVWdCbXBCNzNWc0lBdHJJaEVnQ0NBR1FlNWtiR3BxSWdnZ0VpQU1RZnlSZjJ4cUloSWdCeUFKUVpJVWJHb2lGV29pR0dwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFFZ0dDQUlhMEVTZGtIL0IzRnFMUUFBT2dBTUlBSWdBU0FRSUFWQmllaCtiR29nRVdvaUNDQU1RZUduZjJ3Z0RVR2pKMnhxSWd3Z0NVSEpSMndnQjJvaURXb2lFR3BCRW5aQi93ZHhhaTBBQURvQUFpQUNJQUVnRUNBSWEwRVNka0gvQjNGcUxRQUFPZ0FMSUFJZ0FTQVBJQW9nQm1zaUNDQUZhMnBCRFhRaUR5QUpRYjZsZjJ3Z0Iyb2lCMnBCRW5aQi93ZHhhaTBBQURvQUF5QUNJQUVnQnlBUGEwRVNka0gvQjNGcUxRQUFPZ0FLSUFJZ0FTQVVRWlF3YkNJSElBVWdCbXRCK05rQWJDSUpJQXNnQlVIbWszOXNhbXBxSWdVZ0RTQU1heUlNYWtFU2RrSC9CM0ZxTFFBQU9nQUVJQUlnQVNBTUlBVnJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUJJQWhCOGgxc0lBdHJJZ1VnQ1NBR1Faa3JiR3BxSWdZZ0ZTQVNheUlMYWtFU2RrSC9CM0ZxTFFBQU9nQUZJQUlnQVNBTElBWnJRUkoyUWY4SGNXb3RBQUE2QUFnZ0FpQUJJQWNnQ2tHTHZIOXNhaUFGYWlJR0lCY2dGbXNpQldwQkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFFZ0JTQUdhMEVTZGtIL0IzRnFMUUFBT2dBSElBQkJJR29oQUNBT1FRRnFJZzVCQjBjTkFBc2dFMEhnQVdva0FBdW9Dd0VaZnlNQVFZQUNheUlWSkFBZ0FDZ0MwQUloRVNBQktBSlVJUUJCQ0NFS0lCVWhBUU5BQW44Q1FDQUNMZ0VRSWdZZ0FpNEJJQ0lGY2tILy93TnhSUVJBQWtBZ0FpOEJNQTBBSUFJdkFVQU5BQ0FDTHdGUURRQWdBaThCWUEwQUlBSXZBWEJGRFFJTFFRQWhCUXNnQVNBQUtBTEFBU0FDTGdGZ2JDSUhJQUFvQWtBZ0JXd2lCV3BCMFNKc0lnc2dCVUgrTUd4cUloQWdBaTRCUUNBQUtBS0FBV3hCRFhRaUNTQUNMZ0VBSUFBb0FnQnNRUTEwUVlBSWNpSVNhaUlNYWlJTklBQW9BaUFnQm13aUJTQUFLQUxnQVNBQ0xnRndiQ0lHYWtHelJtd2lFeUFGUVl2Z0FHeHFJQVVnQUNnQ29BRWdBaTRCVUd3aUNHb2lEaUFBS0FKZ0lBSXVBVEJzSWdVZ0Jtb2lGR3BCb2NzQWJDSVdJQTVCaEdkc2FpSU9haUlQYTBFTGRUWUM0QUVnQVNBTklBOXFRUXQxTmdJQUlBRWdDeUFIUWQrSmYyeHFJZ2NnRWlBSmF5SUxhaUlKSUJZZ0ZFRzdnbjlzYWlJU0lBVWdDR3BCL2R0K2JDSU5JQVZCMU1RQmJHcHFJZ1ZyUVF0MU5nTEFBU0FCSUFVZ0NXcEJDM1UyQWlBZ0FTQUxJQWRySWdVZ0RTQUlRYk9EQVd4cUlBNXFJZ2hyUVF0MU5nS2dBU0FCSUFVZ0NHcEJDM1UyQWtBZ0FTQVRJQVpCamhOc2FpQVNhaUlGSUF3Z0VHc2lCbXBCQzNVMkFtQWdCaUFGYTBFTGRTRUZJQUZCZ0FGcURBRUxJQUVnQWk0QkFDQUFLQUlBYkVFQ2RDSUZOZ0xBQVNBQklBVTJBcUFCSUFFZ0JUWUNnQUVnQVNBRk5nSmdJQUVnQlRZQ1FDQUJJQVUyQWlBZ0FTQUZOZ0lBSUFGQjRBRnFDeUFGTmdJQUlBSkJBbW9oQWlBQVFRUnFJUUFnQVVFRWFpRUJJQXBCQVVzaEJTQUtRUUZySVFvZ0JRMEFDeUFSUVlBRGF5RUJRUUFoRVNBVklRQURRQ0FESUJGQkFuUnFLQUlBSUFScUlnSWdBU0FBS0FJTUlnVWdBQ2dDQkNJS2FrSE8xZ0JzSWdrZ0NrSFc3WDVzYWlBQUtBSVVJZ1lnQ21vaUVrSHB6d0JzSWd4cUlBQW9BaHdpQ0NBS2FrSDh4UUJzSWcxcUloTWdBQ2dDQ0NJTElBQW9BaGdpRUdzaURrSGoyQUJzSWhRZ0VFR0RwQUZzYWlJV0lBQW9BZ0JCRFhSQmdJQ0l3QUJxSWdjZ0FDZ0NFQ0lQUWMvVEFHd2lHR29pR1dvaUYycEJFblpCL3dkeGFpMEFBRG9BQUNBQ0lBRWdGeUFUYTBFU2RrSC9CM0ZxTFFBQU9nQVBJQUlnQVNBRklBaHFJaE5CcTFWc0loY2dCU0FHYWtId0NHd2lHaUFKSUFWQnpRUnNhbXBxSWdrZ0RrSFVFV3dpRGlBTFFjMDViR29pR3lBSElBOUIwU0pzSWc5cUloeHFJaDFxUVJKMlFmOEhjV290QUFBNkFBRWdBaUFCSUIwZ0NXdEJFblpCL3dkeGFpMEFBRG9BRGlBQ0lBRWdCaUFJYWtHeXFYOXNJZ2tnR2lBR1FmcTNmMnhxSUF4cWFpSU1JQlFnQzBIQ1dXeHFJZ3NnQnlBUGF5SVVhaUlQYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUlnQVNBUElBeHJRUkoyUWY4SGNXb3RBQUE2QUEwZ0FpQUJJQmNnQ0VHWXhBQnNhaUFOYWlBSmFpSUpJQTRnRUVHd1gyeHFJaEFnQnlBWWF5SUhhaUlNYWtFU2RrSC9CM0ZxTFFBQU9nQURJQUlnQVNBTUlBbHJRUkoyUWY4SGNXb3RBQUE2QUF3Z0FpQUJJQWdnQm10Qm94cHNJZ2tnQ2lBSWEwRzJPV3dpRENBVFFaZXdmMndpRFNBSVFZWEpBV3hxYW1vaUNDQUhJQkJySWdkcVFSSjJRZjhIY1dvdEFBQTZBQVFnQWlBQklBY2dDR3RCRW5aQi93ZHhhaTBBQURvQUN5QUNJQUVnRWtIVkttd2lDQ0FHSUFWclFZbmFBR3dpQnlBR1FmcE9iR3BxSUFscUlnWWdGQ0FMYXlJTGFrRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FTQUxJQVpyUVJKMlFmOEhjV290QUFBNkFBb2dBaUFCSUFvZ0JXdEJveHBzSWdZZ0JVR2EvZ0JzYWlBSGFpQU5haUlGSUJ3Z0cyc2lCMnBCRW5aQi93ZHhhaTBBQURvQUJpQUNJQUVnQnlBRmEwRVNka0gvQjNGcUxRQUFPZ0FKSUFJZ0FTQUdJQXBCd29wL2JHb2dDR29nREdvaUJTQVpJQlpySWdwcVFSSjJRZjhIY1dvdEFBQTZBQWNnQWlBQklBb2dCV3RCRW5aQi93ZHhhaTBBQURvQUNDQUFRU0JxSVFBZ0VVRUJhaUlSUVFoSERRQUxJQlZCZ0FKcUpBQUx5QXdCR244akFFR0FCR3NpR1NRQUlBQW9BdEFDSVF3Z0FTZ0NWQ0VBSUJraEFVRUJJUkVEUUNBQklBQW9Ba0FnQWk0QklHd2lDaUFBS0FMQUFTQUNMZ0ZnYkNJTmF5SVFRZVBZQUd3aURpQU5RWU9rQVd4cUloSWdBQ2dDZ0FFZ0FpNEJRR3dpQzBIUDB3QnNJaE1nQWk0QkFDQUFLQUlBYkVFTmRFR0FDSElpQm1vaUZHb2lGU0FBS0FKZ0lBSXVBVEJzSWdjZ0FDZ0NJQ0FDTGdFUWJDSUpha0hPMWdCc0lnOGdDVUhXN1g1c2FpQUFLQUtnQVNBQ0xnRlFiQ0lJSUFscUlocEI2YzhBYkNJV2FpQUFLQUxnQVNBQ0xnRndiQ0lGSUFscVFmekZBR3dpRjJvaUdHdEJDM1UyQXVBRElBRWdGU0FZYWtFTGRUWUNBQ0FCSUJCQjFCRnNJaEFnQ2tITk9XeHFJaFVnQzBIUkltd2lDeUFHYWlJWWFpSWJJQVVnQjJvaUhFR3JWV3dpSFNBSElBaHFRZkFJYkNJZUlBOGdCMEhOQkd4cWFtb2lEMnRCQzNVMkFzQURJQUVnRHlBYmFrRUxkVFlDSUNBQklBNGdDa0hDV1d4cUlnb2dCaUFMYXlJT2FpSUxJQVVnQ0dwQnNxbC9iQ0lQSUI0Z0NFSDZ0MzlzYWlBV2Ftb2lGbXRCQzNVMkFxQURJQUVnQ3lBV2FrRUxkVFlDUUNBQklCQWdEVUd3WDJ4cUlnMGdCaUFUYXlJR2FpSVFJQjBnQlVHWXhBQnNhaUFYYWlBUGFpSUxhMEVMZFRZQ2dBTWdBU0FMSUJCcVFRdDFOZ0pnSUFFZ0JpQU5heUlHSUFVZ0NHdEJveHBzSWcwZ0NTQUZhMEcyT1d3aUVDQWNRWmV3ZjJ3aUN5QUZRWVhKQVd4cWFtb2lCV3RCQzNVMkF1QUNJQUVnQlNBR2FrRUxkVFlDZ0FFZ0FTQU9JQXBySWdVZ0drSFZLbXdpQmlBSUlBZHJRWW5hQUd3aUNpQUlRZnBPYkdwcUlBMXFJZ2hyUVF0MU5nTEFBaUFCSUFVZ0NHcEJDM1UyQXFBQklBRWdHQ0FWYXlJSUlBa2dCMnRCb3hwc0lnVWdCMEdhL2dCc2FpQUthaUFMYWlJSGEwRUxkVFlDb0FJZ0FTQUhJQWhxUVF0MU5nTEFBU0FCSUJRZ0Vtc2lCeUFGSUFsQndvcC9iR29nQm1vZ0VHb2lDV3RCQzNVMkFvQUNJQUVnQnlBSmFrRUxkVFlDNEFFZ0VVRUlSa1VFUUNBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQVJRUUZxSVJFTUFRc0xJQXhCZ0FOcklRRkJBQ0VSSUJraEFBTkFJQU1nRVVFQ2RHb29BZ0FnQkdvaUFpQUJJQUFvQWd3aUJ5QUFLQUlFSWdscVFjN1dBR3dpRENBSlFkYnRmbXhxSUFBb0FoUWlDQ0FKYWlJUVFlblBBR3dpRG1vZ0FDZ0NIQ0lGSUFscVFmekZBR3dpRW1vaUN5QUFLQUlJSWdvZ0FDZ0NHQ0lOYXlJVFFlUFlBR3dpRkNBTlFZT2tBV3hxSWhVZ0FDZ0NBRUVOZEVHQWdJakFBR29pQmlBQUtBSVFJZzlCejlNQWJDSWFhaUlXYWlJWGFrRVNka0gvQjNGcUxRQUFPZ0FBSUFJZ0FTQVhJQXRyUVJKMlFmOEhjV290QUFBNkFBOGdBaUFCSUFVZ0Iyb2lDMEdyVld3aUZ5QUhJQWhxUWZBSWJDSVlJQXdnQjBITkJHeHFhbW9pRENBVFFkUVJiQ0lUSUFwQnpUbHNhaUliSUFZZ0QwSFJJbXdpRDJvaUhHb2lIV3BCRW5aQi93ZHhhaTBBQURvQUFTQUNJQUVnSFNBTWEwRVNka0gvQjNGcUxRQUFPZ0FPSUFJZ0FTQUZJQWhxUWJLcGYyd2lEQ0FZSUFoQityZC9iR29nRG1wcUlnNGdGQ0FLUWNKWmJHb2lDaUFHSUE5ckloUnFJZzlxUVJKMlFmOEhjV290QUFBNkFBSWdBaUFCSUE4Z0RtdEJFblpCL3dkeGFpMEFBRG9BRFNBQ0lBRWdGeUFGUVpqRUFHeHFJQkpxSUF4cUlnd2dFeUFOUWJCZmJHb2lEU0FHSUJwcklnWnFJZzVxUVJKMlFmOEhjV290QUFBNkFBTWdBaUFCSUE0Z0RHdEJFblpCL3dkeGFpMEFBRG9BRENBQ0lBRWdCU0FJYTBHakdtd2lEQ0FKSUFWclFiWTViQ0lPSUF0Qmw3Qi9iQ0lTSUFWQmhja0JiR3BxYWlJRklBWWdEV3NpQm1wQkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFFZ0JpQUZhMEVTZGtIL0IzRnFMUUFBT2dBTElBSWdBU0FRUWRVcWJDSUZJQWdnQjJ0Qmlkb0FiQ0lHSUFoQitrNXNhbW9nREdvaUNDQVVJQXBySWdwcVFSSjJRZjhIY1dvdEFBQTZBQVVnQWlBQklBb2dDR3RCRW5aQi93ZHhhaTBBQURvQUNpQUNJQUVnQ1NBSGEwR2pHbXdpQ0NBSFFacitBR3hxSUFacUlCSnFJZ2NnSENBYmF5SUdha0VTZGtIL0IzRnFMUUFBT2dBR0lBSWdBU0FHSUFkclFSSjJRZjhIY1dvdEFBQTZBQWtnQWlBQklBZ2dDVUhDaW45c2FpQUZhaUFPYWlJSElCWWdGV3NpQ1dwQkVuWkIvd2R4YWkwQUFEb0FCeUFDSUFFZ0NTQUhhMEVTZGtIL0IzRnFMUUFBT2dBSUlBQkJJR29oQUNBUlFRRnFJaEZCRUVjTkFBc2dHVUdBQkdva0FBdXZDd0VZZnlNQVFlQURheUlZSkFBZ0FDZ0MwQUloRkNBQktBSlVJUUFnR0NFQlFRRWhFUU5BSUFBb0FxQUJJUVVnQWk0QlVDRUhJQUFvQWlBaEVDQUNMZ0VRSVFvZ0FDZ0M0QUVoQ0NBQ0xnRndJUXNnQUNnQ1lDRVZJQUl1QVRBaERDQUJJQUl1QVFBZ0FDZ0NBR3hCRFhSQmdBaHlJZzhnQUNnQ3dBRWdBaTRCWUd3aURVRytwWDlzYWlJU0lBQW9Ba0FnQWk0QklHd2lDU0FBS0FLQUFTQUNMZ0ZBYkNJT2F5SUdRY0NsZjJ4cVFRdDFOZ0xnQVNBQklBMUJuY2tBYkNBUGFpSVRJQVpCOWdKc0loWWdDU0FPYWlJT1FjN1ZBR3dpR1dwcUloY2dDQ0FMYkNJSVFhT2RBV3dnRENBVmJDSUxRZmFwZjJ3aUZXc2dCU0FIYkVHeHpnQnNJZ2NnQ2lBUWJDSUZJQWhySWhCQmd0b0FiR29pQ21vaURHdEJDM1UyQXNBRElBRWdEQ0FYYWtFTGRUWUNBQ0FCSUExQmhHUnNJQTlxSWc4Z0JrSFFGbXdpRFNBT1Fjd3liQ0lNYW1vaUZ5QUxJQWhySWhvZ0JXcEJtalZzSWhzZ0JVSHhJR3hxSWh4clFRdDFOZ0tnQXlBQklCY2dIR3BCQzNVMkFpQWdBU0FTSUFaQm9DMXNhaUlTSUJCQnNjNEFiQ0FIYXlJUWEwRUxkVFlDZ0FNZ0FTQVFJQkpxUVF0MU5nSkFJQUVnQmtHNVptd2lCaUFPUVlJamJDSU9heUFUYWlJUUlBVWdDR3BCNkNSc0loSWdCeUFWYWlBSVFhOUliR3BxSWdoclFRdDFOZ0tnQWlBQklBZ2dFR3BCQzNVMkFxQUJJQUVnQ1VHVDNBQnNJZ2dnR1dzZ0Ztb2dEMm9pQ1NBTFFlWktiQ0lMSUFWQnVSNXNhaUFIYXlBU2FpSUhhMEVMZFRZQzRBSWdBU0FISUFscVFRdDFOZ0pnSUFFZ0V5QU1heUFOYWlJSElCc2dHa0hjOUg1c2FpSU5hMEVMZFRZQ3dBSWdBU0FISUExcVFRdDFOZ0tBQVNBQklBNGdDR3NnQm1vZ0Qyb2lCaUFMSUFWQjU3aC9iR29nQ21vaUJXdEJDM1UyQW9BQ0lBRWdCU0FHYWtFTGRUWUN3QUVnRVVFSVJrVUVRQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBUlFRRnFJUkVNQVFzTElCUkJnQU5ySVFGQkFDRVJJQmdoQUFOQUlBTWdFVUVDZEdvb0FnQWdCR29pQWlBQklBQW9BaHdpQmtHam5RRnNJQUFvQWd3aUQwSDJxWDlzSWhCcklBQW9BaFJCc2M0QWJDSUhJQUFvQWdRaUJTQUdheUlLUVlMYUFHeHFJaFZxSWhRZ0FDZ0NBRUVOZEVHQWdJakFBR29pRFNBQUtBSVlJZ2xCbmNrQWJHb2lFeUFBS0FJSUlnNGdBQ2dDRUNJTGF5SUlRZllDYkNJTUlBc2dEbW9pQzBITzFRQnNJaEpxYWlJV2FrRVNka0gvQjNGcUxRQUFPZ0FBSUFJZ0FTQVdJQlJyUVJKMlFmOEhjV290QUFBNkFBNGdBaUFCSUFVZ0R5QUdheUlXYWtHYU5Xd2lHU0FGUWZFZ2JHb2lGeUFKUVlSa2JDQU5haUlVSUFoQjBCWnNJaG9nQzBITU1td2lHMnBxSWh4cVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQklCd2dGMnRCRW5aQi93ZHhhaTBBQURvQURTQUNJQUVnQ2tHeHpnQnNJQWRySWdvZ0NVRytwWDlzSUExcUlnMGdDRUdnTFd4cUlnbHFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQWtnQ210QkVuWkIvd2R4YWkwQUFEb0FEQ0FDSUFFZ0JTQUdha0hvSkd3aUNTQVBRZVpLYkNJUElBVkJ1UjVzYWlBSGEyb2lDaUFPUVpQY0FHd2lEaUFTYXlBTWFpQVVhaUlNYWtFU2RrSC9CM0ZxTFFBQU9nQURJQUlnQVNBTUlBcHJRUkoyUWY4SGNXb3RBQUE2QUFzZ0FpQUJJQmtnRmtIYzlINXNhaUlLSUJNZ0cyc2dHbW9pREdwQkVuWkIvd2R4YWkwQUFEb0FCQ0FDSUFFZ0RDQUthMEVTZGtIL0IzRnFMUUFBT2dBS0lBSWdBU0FISUJCcUlBWkJyMGhzYWlBSmFpSUdJQWhCdVdac0lnY2dDMEdDSTJ3aUNXc2dFMm9pRTJwQkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFFZ0V5QUdhMEVTZGtIL0IzRnFMUUFBT2dBSklBSWdBU0FQSUFWQjU3aC9iR29nRldvaUJTQUpJQTVySUFkcUlCUnFJZ1pxUVJKMlFmOEhjV290QUFBNkFBWWdBaUFCSUFZZ0JXdEJFblpCL3dkeGFpMEFBRG9BQ0NBQ0lBRWdEU0FJUWNDbGYyeHFRUkoyUWY4SGNXb3RBQUE2QUFjZ0FFRWdhaUVBSUJGQkFXb2lFVUVQUncwQUN5QVlRZUFEYWlRQUM5RUtBUlYvSXdCQndBTnJJaFlrQUNBQUtBTFFBaUVVSUFFb0FsUWhBQ0FXSVFGQkFTRVFBMEFnQUNnQ3dBRWhDaUFDTGdGZ0lRY2dBQ2dDUUNFTElBSXVBU0FoQ0NBQklBSXVBUUFnQUNnQ0FHeEJEWFJCZ0FoeUlnd2dBQ2dDZ0FFZ0FpNEJRR3dpQ1VHK3BYOXNha0VMZFNJUklBQW9BdUFCSUFJdUFYQnNJZzRnQUNnQ0lDQUNMZ0VRYkNJTklBQW9BbUFnQWk0Qk1Hd2lCV3NpRWlBQUtBS2dBU0FDTGdGUWJDSUdhMnBCQW5RaUQyczJBc0FDSUFFZ0R5QVJhallDWUNBQklBY2dDbXdpQnlBSUlBdHNJZ3RxUWVMR0FHd2lDQ0FIUWZ5UmYyeHFJaEVnQ1VHU0ZHd2dER29pRDJvaUZTQUZJQVpxUWU5MWJDQU9RUTEwSWdwcklnNGdCU0FOYWtHMzFRQnNJaGNnQlVIdVpHeHFhaUlUYTBFTGRUWUNnQU1nQVNBVElCVnFRUXQxTmdJZ0lBRWdCMEhocDM5c0lBdEJveWRzYWlJSElBbEJ5VWRzSUF4cUloVnFJaE1nRGlBR0lBMXFJZzVCMHN3QWJDSVlJQVpCaWVoK2JHcHFJaGxyUVF0MU5nTGdBaUFCSUJNZ0dXcEJDM1UyQWtBZ0FTQVBJQkZySWhFZ0VrSHlIV3dnQ21zaUVpQUdJQVZyUWZqWkFHd2lEeUFGUVprcmJHcHFJZ1ZyUVF0MU5nS0FBaUFCSUFVZ0VXcEJDM1UyQXFBQklBRWdDVUhHMFFCc0lBeHFJZ1VnQ0NBTFFiMFJiR29pREdzaUNTQU9RWlF3YkNJTElBMUJpN3gvYkdvZ0Vtb2lDR3RCQzNVMkF1QUJJQUVnQ0NBSmFrRUxkVFlDd0FFZ0FTQUZJQXhxSWdVZ0Z5QU5RZkMzZjJ4cUlCaHFJQXBxSWcxclFRdDFOZ0tnQXlBQklBVWdEV3BCQzNVMkFnQWdBU0FWSUFkcklnVWdEeUFHUWVhVGYyeHFJQXRxSUFwcUlnWnJRUXQxTmdLZ0FpQUJJQVVnQm1wQkMzVTJBb0FCSUJCQkNFWkZCRUFnQVVFRWFpRUJJQUJCQkdvaEFDQUNRUUpxSVFJZ0VFRUJhaUVRREFFTEN5QVVRWUFEYXlFQlFRQWhFQ0FXSVFBRFFDQURJQkJCQW5ScUtBSUFJQVJxSWdJZ0FTQUFLQUljSWhSQkRYUWlEQ0FBS0FJTUlnVWdBQ2dDQkNJTmFrRzMxUUJzSWdnZ0RVSHd0MzlzYWlBQUtBSVVJZ1lnRFdvaUVVSFN6QUJzSWc1cWFpSVNJQUFvQWhnaUJ5QUFLQUlJSWd0cVFlTEdBR3dpRHlBTFFiMFJiR29pRlNBQUtBSUFRUTEwUVlDQWlNQUFhaUlKSUFBb0FoQWlDa0hHMFFCc2FpSVhhaUlUYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQVNBVElCSnJRUkoyUWY4SGNXb3RBQUE2QUEwZ0FpQUJJQVVnQm1wQjczVnNJQXhySWhJZ0NDQUZRZTVrYkdwcUlnZ2dEeUFIUWZ5UmYyeHFJZzhnQ1NBS1FaSVViR29pRTJvaUdHcEJFblpCL3dkeGFpMEFBRG9BQVNBQ0lBRWdHQ0FJYTBFU2RrSC9CM0ZxTFFBQU9nQU1JQUlnQVNBT0lBWkJpZWgrYkdvZ0Vtb2lDQ0FIUWVHbmYyd2dDMEdqSjJ4cUlnY2dDa0hKUjJ3Z0NXb2lDMm9pRG1wQkVuWkIvd2R4YWkwQUFEb0FBaUFDSUFFZ0RpQUlhMEVTZGtIL0IzRnFMUUFBT2dBTElBSWdBU0FVSUEwZ0JXc2lDQ0FHYTJwQkRYUWlGQ0FLUWI2bGYyd2dDV29pQ1dwQkVuWkIvd2R4YWkwQUFEb0FBeUFDSUFFZ0NTQVVhMEVTZGtIL0IzRnFMUUFBT2dBS0lBSWdBU0FSUVpRd2JDSUpJQVlnQld0QitOa0FiQ0lLSUF3Z0JrSG1rMzlzYW1wcUlnWWdDeUFIYXlJSGFrRVNka0gvQjNGcUxRQUFPZ0FFSUFJZ0FTQUhJQVpyUVJKMlFmOEhjV290QUFBNkFBa2dBaUFCSUFoQjhoMXNJQXhySWdZZ0NpQUZRWmtyYkdwcUlnVWdFeUFQYXlJTWFrRVNka0gvQjNGcUxRQUFPZ0FGSUFJZ0FTQU1JQVZyUVJKMlFmOEhjV290QUFBNkFBZ2dBaUFCSUFrZ0RVR0x2SDlzYWlBR2FpSUZJQmNnRldzaUJtcEJFblpCL3dkeGFpMEFBRG9BQmlBQ0lBRWdCaUFGYTBFU2RrSC9CM0ZxTFFBQU9nQUhJQUJCSUdvaEFDQVFRUUZxSWhCQkRrY05BQXNnRmtIQUEyb2tBQXVKQ3dFV2Z5TUFRYUFEYXlJV0pBQWdBQ2dDMEFJaENpQUJLQUpVSVFBZ0ZpRUJRUUVoRWdOQUlBQW9BdUFCSVFzZ0FpNEJjQ0VRSUFBb0FtQWhCU0FDTGdFd0lRWWdBQ2dDb0FFaEVTQUNMZ0ZRSVJNZ0FDZ0NJQ0VJSUFJdUFSQWhEQ0FCSUFJdUFRQWdBQ2dDQUd4QkRYUkJnQWh5SWcwZ0FDZ0NnQUVnQWk0QlFHd2lEaUFBS0FMQUFTQUNMZ0ZnYkNJUGF5SUpJQUFvQWtBZ0FpNEJJR3dpQjJ0Qndkb0FiR3BCQzNVMkFzQUJJQUVnQ1VHWkJtd2dEV29pRnlBT0lBOXFJZzVCK2NrQWJDSVBJQWRCOGRjQWJHcHFJaFFnQlNBR2JDSUZJQWdnREd3aUNHcEIwTlFBYkNJTUlBaEIyLzUrYkdvZ0VTQVRiQ0lHSUFocVFiN0tBR3dpRVdvZ0N5QVFiQ0lMSUFocUloQkJnanhzSWhOcUloVnJRUXQxTmdLQUF5QUJJQlFnRldwQkMzVTJBZ0FnQVNBSlFaVWZiQ0FOYWlJVUlBZEI0TU1BYkNBT1FhQVViQ0lWYTJvaUdDQUZJQXRxUWNLMWYyd2lHU0FGSUFacVFhdHFiQ0lhSUF3Z0JVSExOV3hxYW1vaURHdEJDM1UyQXVBQ0lBRWdEQ0FZYWtFTGRUWUNJQ0FCSUFkQmpDQnNJQTlySUJkcUlnd2dCaUFMYWtINFZXd2lEeUFhSUFaQnNadC9iR29nRVdwcUloRnJRUXQxTmdMQUFpQUJJQXdnRVdwQkMzVTJBa0FnQVNBSlFZSkViQ0FOYWlJTklBZEJqSFZzSUE1QjhodHNJZ2xyYWlJT0lCa2dDMEdValFGc2FpQVRhaUFQYWlJUmEwRUxkVFlDb0FJZ0FTQU9JQkZxUVF0MU5nSmdJQUVnQ1NBSFFjdE1iR29nRFdvaURTQVFRZFVWYkNBR0lBVnJRWUk4YkdvaUNTQUlRYk1VYkdvZ0JVR1dZbXhxSWdWclFRdDFOZ0tBQWlBQklBVWdEV3BCQzNVMkFvQUJJQUVnRlNBSFFlNnZmMnhxSUJScUlnY2dDU0FHUWM0WWJHb2dDMEcva0g5c2FpSUZhMEVMZFRZQzRBRWdBU0FGSUFkcVFRdDFOZ0tnQVNBU1FRaEdSUVJBSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lCSkJBV29oRWd3QkN3c2dDa0dBQTJzaEFVRUFJUklnRmlFQUEwQWdBeUFTUVFKMGFpZ0NBQ0FFYWlJQ0lBRWdBQ2dDRENJRklBQW9BZ1FpQ0dwQjBOUUFiQ0lLSUFoQjIvNStiR29nQUNnQ0ZDSUdJQWhxUWI3S0FHd2lFR29nQUNnQ0hDSUxJQWhxSWhGQmdqeHNJaE5xSWd3Z0FDZ0NHQ0lKSUFBb0FoQWlEMm9pRGtINXlRQnNJaGNnQUNnQ0NDSUhRZkhYQUd4cUlBQW9BZ0JCRFhSQmdJQ0l3QUJxSWcwZ0R5QUpheUlKUVprR2JHb2lEMm9pRkdwQkVuWkIvd2R4YWkwQUFEb0FBQ0FDSUFFZ0ZDQU1hMEVTZGtIL0IzRnFMUUFBT2dBTUlBSWdBU0FGSUF0cVFjSzFmMndpRENBRklBWnFRYXRxYkNJVUlBb2dCVUhMTld4cWFtb2lDaUFKUVpVZmJDQU5haUlWSUFkQjRNTUFiQ0FPUWFBVWJDSVlhMm9pR1dwQkVuWkIvd2R4YWkwQUFEb0FBU0FDSUFFZ0dTQUthMEVTZGtIL0IzRnFMUUFBT2dBTElBSWdBU0FHSUF0cVFmaFZiQ0lLSUJRZ0JrR3htMzlzYWlBUWFtb2lFQ0FIUVl3Z2JDQVhheUFQYWlJUGFrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FTQVBJQkJyUVJKMlFmOEhjV290QUFBNkFBb2dBaUFCSUF3Z0MwR1VqUUZzYWlBVGFpQUthaUlLSUFsQmdrUnNJQTFxSWhBZ0IwR01kV3dnRGtIeUcyd2lEbXRxSWhOcVFSSjJRZjhIY1dvdEFBQTZBQU1nQWlBQklCTWdDbXRCRW5aQi93ZHhhaTBBQURvQUNTQUNJQUVnRVVIVkZXd2dCaUFGYTBHQ1BHeHFJZ29nQ0VHekZHeHFJQVZCbG1Kc2FpSUZJQTRnQjBITFRHeHFJQkJxSWdocVFSSjJRZjhIY1dvdEFBQTZBQVFnQWlBQklBZ2dCV3RCRW5aQi93ZHhhaTBBQURvQUNDQUNJQUVnQ2lBR1FjNFliR29nQzBHL2tIOXNhaUlGSUJnZ0IwSHVyMzlzYWlBVmFpSUdha0VTZGtIL0IzRnFMUUFBT2dBRklBSWdBU0FHSUFWclFSSjJRZjhIY1dvdEFBQTZBQWNnQWlBQklBa2dCMnRCd2RvQWJDQU5ha0VTZGtIL0IzRnFMUUFBT2dBR0lBQkJJR29oQUNBU1FRRnFJaEpCRFVjTkFBc2dGa0dnQTJva0FBdWlDUUVVZnlNQVFZQURheUlWSkFBZ0FDZ0MwQUloRmlBQktBSlVJUUFnRlNFQlFRRWhEd05BSUFBb0FvQUJJUWtnQWk0QlFDRU5JQUVnQUNnQ1FDQUNMZ0VnYkNJT0lBQW9Bc0FCSUFJdUFXQnNJZ3ByUVExMElnc2dBaTRCQUNBQUtBSUFiRUVOZEVHQUNISWlCbW9pRENBQUtBSWdJQUl1QVJCc0lnVWdBQ2dDNEFFZ0FpNEJjR3dpQjJzaUVDQUFLQUpnSUFJdUFUQnNJaEVnQUNnQ29BRWdBaTRCVUd3aUNHc2lFbXBCMFNKc0loTWdFRUgrTUd4cUloQnJRUXQxTmdMQUFpQUJJQXdnRUdwQkMzVTJBaUFnQVNBR0lBdHJJZ3NnRXlBU1FkK0pmMnhxSWd4clFRdDFOZ0xnQVNBQklBc2dER3BCQzNVMkFvQUJJQUVnQ1NBTmJFR3h6Z0JzSWcwZ0Jtb2lDeUFLUVExMElnb2dEa0cyMXdCc2FpSU1heUlRSUFjZ0JTQUlhaUlTYWtHTk4yd2lDU0FSUWE5ZGJDSVRJQVZCM0ZSc2FpQUhRWXlCZjJ4cWFpSVVhMEVMZFRZQ3dBRWdBU0FRSUJScVFRdDFOZ0tnQVNBQklBc2dER29pQ3lBSklCSkIyeEJzYWlJTUlCRkJ6OU1BYkNJUklBVkI5eEZzYW1vaUJXdEJDM1UyQXVBQ0lBRWdCU0FMYWtFTGRUWUNBQ0FCSUE1QnRoZHNJQXBySWdVZ0JpQU5heUlHYWlJT0lBY2dDR3BCaTcxL2JDSU5JQWhCc0tGL2JDQVRhbW9nREdvaUNHdEJDM1UyQXFBQ0lBRWdDQ0FPYWtFTGRUWUNRQ0FCSUFZZ0JXc2lCaUFIUWNibEFHd2dFV3NnQ1dvZ0RXb2lCMnRCQzNVMkFvQUNJQUVnQmlBSGFrRUxkVFlDWUNBUFFRaEdSUVJBSUFGQkJHb2hBU0FBUVFScUlRQWdBa0VDYWlFQ0lBOUJBV29oRHd3QkN3c2dGa0dBQTJzaEFVRUFJUThnRlNFQUEwQWdBeUFQUVFKMGFpZ0NBQ0FFYWlJQ0lBRWdBQ2dDRENJT1FjL1RBR3dpRmlBQUtBSUVJZ1pCOXhGc2FpQUFLQUlVSWdVZ0Jtb2lDQ0FBS0FJY0lnZHFRWTAzYkNJUklBaEIyeEJzYWlJTmFpSUtJQUFvQWhnaUMwRU5kQ0lNSUFBb0FnZ2lDVUcyMXdCc2FpSVFJQUFvQWdCQkRYUkJnSUNJd0FCcUlnZ2dBQ2dDRUVHeHpnQnNJaEpxSWhOcUloUnFRUkoyUWY4SGNXb3RBQUE2QUFBZ0FpQUJJQlFnQ210QkVuWkIvd2R4YWkwQUFEb0FDeUFDSUFFZ0JpQUhheUlLSUE0Z0JXc2lGR3BCMFNKc0loY2dDa0grTUd4cUlnb2dDU0FMYTBFTmRDSUxJQWhxSWhocVFSSjJRZjhIY1dvdEFBQTZBQUVnQWlBQklCZ2dDbXRCRW5aQi93ZHhhaTBBQURvQUNpQUNJQUVnRFNBRklBZHFRWXU5ZjJ3aURTQU9RYTlkYkNJT0lBVkJzS0YvYkdwcWFpSUZJQWxCdGhkc0lBeHJJZ2tnQ0NBU2F5SUthaUlNYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUlnQVNBTUlBVnJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FpQUJJQWRCeHVVQWJDQVdheUFSYWlBTmFpSUZJQW9nQ1dzaUNXcEJFblpCL3dkeGFpMEFBRG9BQXlBQ0lBRWdDU0FGYTBFU2RrSC9CM0ZxTFFBQU9nQUlJQUlnQVNBWElCUkIzNGwvYkdvaUJTQUlJQXRySWdocVFSSjJRZjhIY1dvdEFBQTZBQVFnQWlBQklBZ2dCV3RCRW5aQi93ZHhhaTBBQURvQUJ5QUNJQUVnRGlBR1FkeFViR29nQjBHTWdYOXNhaUFSYWlJSElCTWdFR3NpQm1wQkVuWkIvd2R4YWkwQUFEb0FCU0FDSUFFZ0JpQUhhMEVTZGtIL0IzRnFMUUFBT2dBR0lBQkJJR29oQUNBUFFRRnFJZzlCREVjTkFBc2dGVUdBQTJva0FBdnZDUUVVZnlNQVFlQUNheUlXSkFBZ0FDZ0MwQUloRWlBQktBSlVJUUFnRmlFQlFRRWhFQU5BSUFBb0F1QUJJUVlnQWk0QmNDRU1JQUFvQW1BaEJ5QUNMZ0V3SVFnZ0FDZ0NvQUVoRFNBQ0xnRlFJUTRnQUNnQ0lDRUtJQUl1QVJBaEVTQUJJQUl1QVFBZ0FDZ0NBR3hCRFhSQmdBaHlJZ3NnQUNnQ3dBRWdBaTRCWUd3aUJTQUFLQUpBSUFJdUFTQnNJZzlxSWhjZ0FDZ0NnQUVnQWk0QlFHd2lDV3NpRTBHL3BYOXNha0VMZFRZQ29BRWdBU0FUUWV6V0FHd2dDMm9pQ3lBSklBVnJRZjZpQVd4cUloTWdCVUcxaHdGc2FpSVVJQWNnQ0d3aUJ5QUtJQkZzSWdwcUloRkI2amhzSWhVZ0NrSDJSR3hxSUEwZ0Rtd2lDQ0FLYWtIMEttd2lEV29nQmlBTWJDSUdJQWdnRVdwcVFjQVpiQ0lNSUFZZ0NtcEJ1QmRzYWlJS2FpSU9hMEVMZFRZQ3dBSWdBU0FPSUJScVFRdDFOZ0lBSUFFZ0N5QVhRWVcyZjJ4cUlnNGdCVUhEVFd4cUlnVWdEQ0FISUFocVFjbTFmMnhxSWhFZ0RTQUlRZHF6ZjJ4cWFpSU5hMEVMZFRZQ2dBSWdBU0FGSUExcVFRdDFOZ0pBSUFFZ0N5QUpJQTlyUWNrYmJDSUZhaUFQUVpHZmYyeHFJZ3NnQ2lBR0lBZHFRZldNZjJ3aUNpQUdRY2VHQVd4cWFpSU5hMEVMZFRZQzRBRWdBU0FMSUExcVFRdDFOZ0pnSUFFZ0NVRzUvQUJzSUE5Qi9hWi9iR29nRG1vaUR5QUlRWXZBQUd3Z0IwR05vbjlzYWlBR1FaYVVmMnhxSUF4cUlnaHJRUXQxTmdMQUFTQUJJQWdnRDJwQkMzVTJBb0FCSUFFZ0V5QUpRYlNMZjJ4cUlBVnFJZ2tnRlNBSFFkaUVBV3hxSUFwcUlCRnFJZ2RyUVF0MU5nS2dBaUFCSUFjZ0NXcEJDM1UyQWlBZ0VFRUlSa1VFUUNBQlFRUnFJUUVnQUVFRWFpRUFJQUpCQW1vaEFpQVFRUUZxSVJBTUFRc0xJQkpCZ0FOcklRRkJBQ0VRSUJZaEFBTkFJQU1nRUVFQ2RHb29BZ0FnQkdvaUFpQUJJQUFvQWd3aUNTQUFLQUlFSWdacUlnVkI2amhzSWd3Z0JrSDJSR3hxSUFBb0FoUWlCeUFHYWtIMEttd2lFbW9nQUNnQ0hDSUlJQVVnQjJwcVFjQVpiQ0lLSUFZZ0NHcEJ1QmRzYWlJTmFpSU9JQUFvQWdCQkRYUkJnSUNJd0FCcUloRWdBQ2dDR0NJRklBQW9BZ2dpRDJvaUZ5QUFLQUlRSWdackloTkI3TllBYkdvaUN5QUdJQVZyUWY2aUFXeHFJaFFnQlVHMWh3RnNhaUlWYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUlnQVNBVklBNXJRUkoyUWY4SGNXb3RBQUE2QUFvZ0FpQUJJQW9nQnlBSmFrSEp0WDlzYWlJT0lBZ2dDV3BCOVl4L2JDSVZJQXdnQ1VIWWhBRnNhbXBxSWd3Z0JpQVBhMEhKRzJ3aUdDQVVJQVpCdEl0L2JHcHFJaFJxUVJKMlFmOEhjV290QUFBNkFBRWdBaUFCSUJRZ0RHdEJFblpCL3dkeGFpMEFBRG9BQ1NBQ0lBRWdFaUFIUWRxemYyeHFJQTVxSWd3Z0N5QVhRWVcyZjJ4cUloSWdCVUhEVFd4cUlnVnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FpQUJJQVVnREd0QkVuWkIvd2R4YWkwQUFEb0FDQ0FDSUFFZ0ZTQUlRY2VHQVd4cUlBMXFJZ1VnQ3lBWWFpQVBRWkdmZjJ4cUlndHFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FpQUJJQXNnQld0QkVuWkIvd2R4YWkwQUFEb0FCeUFDSUFFZ0IwR0x3QUJzSUFsQmphSi9iR29nQ0VHV2xIOXNhaUFLYWlJSklBWkJ1ZndBYkNBUFFmMm1mMnhxSUJKcUlnZHFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FpQUJJQWNnQ1d0QkVuWkIvd2R4YWkwQUFEb0FCaUFDSUFFZ0UwRy9wWDlzSUJGcVFSSjJRZjhIY1dvdEFBQTZBQVVnQUVFZ2FpRUFJQkJCQVdvaUVFRUxSdzBBQ3lBV1FlQUNhaVFBQzVFSUFSSi9Jd0JCd0FKckloUWtBQ0FBS0FMUUFpRVJJQUVvQWxRaEFDQVVJUUZCQVNFS0EwQWdBQ2dDd0FFaEN5QUNMZ0ZnSVFjZ0FDZ0NRQ0VNSUFJdUFTQWhDU0FCSUFJdUFRQWdBQ2dDQUd4QkRYUkJnQWh5SWdVZ0FDZ0NnQUVnQWk0QlFHd2lCa0crcFg5c2FrRUxkU0lTSUFBb0FpQWdBaTRCRUd3aUNDQUFLQUtnQVNBQ0xnRlFiQ0lOSUFBb0FtQWdBaTRCTUd3aURpQUFLQUxnQVNBQ0xnRndiQ0lQYXlJUWFtdEJBblFpRTJzMkF1QUJJQUVnRWlBVGFqWUNRQ0FCSUFjZ0Myd2lDeUFKSUF4c0lnZHFRWm8xYkNJTUlBZEI4U0JzYWlJSElBWkJuY2tBYkNBRmFpSUphaUlTSUJCQjR4TnNJaE1nRFVFTmRDSU5haUlWSUE0Z0Qyb2lEa0h2UEd3aUR5QUlRYlBaQUd4cWFpSVdhMEVMZFRZQ29BSWdBU0FTSUJacVFRdDFOZ0lBSUFFZ0NTQUhheUlISUFoQmxBNXNJQTlySUJWcUlnbHJRUXQxTmdLZ0FTQUJJQWNnQ1dwQkMzVTJBb0FCSUFFZ0JrR0VaR3dnQldvaUJTQU1JQXRCM1BSK2JHb2lCbXNpQ3lBTklCTnJJQkJCREhSckloQWdDRUdNS1d3Z0RrSFBKV3dpQjJ0cUlneHJRUXQxTmdMQUFTQUJJQXNnREdwQkMzVTJBbUFnQVNBRklBWnFJZ1VnQ0VIVDBBQnNJQWNnRUdwcklnaHJRUXQxTmdLQUFpQUJJQVVnQ0dwQkMzVTJBaUFnQ2tFSVJrVUVRQ0FCUVFScUlRRWdBRUVFYWlFQUlBSkJBbW9oQWlBS1FRRnFJUW9NQVFzTElCRkJnQU5ySVFCQkFDRUtJQlFoQWdOQUlBTWdDa0VDZEdvb0FnQWdCR29pQVNBQUlBSW9BaHdpQlNBQ0tBSU1JZ1pxSWhGQjd6eHNJZ3NnQWlnQ0JDSUlRYlBaQUd4cUlBWWdCV3NpQlVIakUyd2lCeUFDS0FJVUlneEJEWFFpQ1dvaUVtb2lEU0FDS0FJWUlnNGdBaWdDQ0NJR2FrR2FOV3dpRHlBR1FmRWdiR29pRXlBQ0tBSUFRUTEwUVlDQWlNQUFhaUlHSUFJb0FoQWlFRUdkeVFCc2FpSVZhaUlXYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQUVnQUNBV0lBMXJRUkoyUWY4SGNXb3RBQUE2QUFrZ0FTQUFJQWhCMDlBQWJDQVJRYzhsYkNJUklBa2dCMnNnQlVFTWRHc2lCMnBySWdrZ0R5QU9RZHowZm14cUlnMGdFRUdFWkd3Z0Jtb2lEbW9pRDJwQkVuWkIvd2R4YWkwQUFEb0FBU0FCSUFBZ0R5QUphMEVTZGtIL0IzRnFMUUFBT2dBSUlBRWdBQ0FJSUFVZ0RHcHJRUTEwSWdVZ0VFRytwWDlzSUFacUlnWnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FTQUFJQVlnQld0QkVuWkIvd2R4YWkwQUFEb0FCeUFCSUFBZ0J5QUlRWXdwYkNBUmEyb2lCU0FPSUExcklnWnFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FTQUFJQVlnQld0QkVuWkIvd2R4YWkwQUFEb0FCaUFCSUFBZ0NFR1VEbXdnQzJzZ0Vtb2lDQ0FWSUJOcklnVnFRUkoyUWY4SGNXb3RBQUE2QUFRZ0FTQUFJQVVnQ0d0QkVuWkIvd2R4YWkwQUFEb0FCU0FDUVNCcUlRSWdDa0VCYWlJS1FRcEhEUUFMSUJSQndBSnFKQUFMdndjQkUzOGpBRUdnQW1zaUVpUUFJQUFvQXRBQ0lRMGdBU2dDVkNFQUlCSWhBVUVCSVFvRFFDQUFLQUpnSVFzZ0FpNEJNQ0VJSUFBb0FxQUJJUVlnQWk0QlVDRU9JQUFvQXVBQklROGdBaTRCY0NFSklBQW9BaUFoRUNBQ0xnRVFJUk1nQVNBQ0xnRUFJQUFvQWdCc1FRMTBRWUFJY2lJTUlBQW9Bc0FCSUFJdUFXQnNJaEZCdnFWL2JHb2lGQ0FBS0FKQUlBSXVBU0JzSWdjZ0FDZ0NnQUVnQWk0QlFHd2lCV3NpRlVHK3BYOXNha0VMZFRZQ2dBRWdBU0FSUWFFdGJDQU1haUlNSUFVZ0IycEJoOVVBYkNJUklBVkIzQTlzSWhacmFpSVhJQVlnRG13aUJTQVFJQk5zSWdacVFaYzZiQ0lPSUFnZ0MyeEJ6N0YvYkNJTGF5QUpJQTlzSWdnZ0JtcEIraDVzSWc5cUlnbHJRUXQxTmdLQUFpQUJJQWtnRjJwQkMzVTJBZ0FnQVNBVUlCVkJvUzFzYWlJSklBWWdCU0FJYW10QnNjNEFiQ0lHYTBFTGRUWUM0QUVnQVNBR0lBbHFRUXQxTmdJZ0lBRWdCMEdyeFFCc0lnY2dEQ0FSYTJvaUJpQUxJQVVnQ0d0Qmtka0FiQ0lGYXlBT2FpSUlhMEVMZFRZQ3dBRWdBU0FHSUFocVFRdDFOZ0pBSUFFZ0RDQUhheUFXYWlJSElBVWdDMm9nRDJvaUJXdEJDM1UyQXFBQklBRWdCU0FIYWtFTGRUWUNZQ0FLUVFoR1JRUkFJQUZCQkdvaEFTQUFRUVJxSVFBZ0FrRUNhaUVDSUFwQkFXb2hDZ3dCQ3dzZ0RVR0FBMnNoQUVFQUlRb2dFaUVCQTBBZ0F5QUtRUUowYWlnQ0FDQUVhaUlDSUFBZ0FTZ0NGQ0lISUFFb0FnUWlCV3BCbHpwc0lnNGdBU2dDREVIUHNYOXNJZ3hySUFFb0Fod2lCaUFGYWtINkhtd2lEMm9pQ1NBQktBSUFRUTEwUVlDQWlNQUFhaUlRSUFFb0FoZ2lFMEdoTFd4cUlnc2dBU2dDRUNJSUlBRW9BZ2dpRFdwQmg5VUFiQ0lSSUFoQjNBOXNJaFJyYWlJVmFrRVNka0gvQjNGcUxRQUFPZ0FBSUFJZ0FDQVZJQWxyUVJKMlFmOEhjV290QUFBNkFBZ2dBaUFBSUFVZ0JpQUhhbXRCc2M0QWJDSUZJQk5CdnFWL2JDQVFhaUlKSUEwZ0NHc2lDRUdoTFd4cUloQnFRUkoyUWY4SGNXb3RBQUE2QUFFZ0FpQUFJQkFnQld0QkVuWkIvd2R4YWkwQUFEb0FCeUFDSUFBZ0RDQUhJQVpyUVpIWkFHd2lCMnNnRG1vaUJTQU5RYXZGQUd3aUJpQUxJQkZyYWlJTmFrRVNka0gvQjNGcUxRQUFPZ0FDSUFJZ0FDQU5JQVZyUVJKMlFmOEhjV290QUFBNkFBWWdBaUFBSUFjZ0RHb2dEMm9pQnlBTElBWnJJQlJxSWdWcVFSSjJRZjhIY1dvdEFBQTZBQU1nQWlBQUlBVWdCMnRCRW5aQi93ZHhhaTBBQURvQUJTQUNJQUFnQ1NBSVFiNmxmMnhxUVJKMlFmOEhjV290QUFBNkFBUWdBVUVnYWlFQklBcEJBV29pQ2tFSlJ3MEFDeUFTUWFBQ2FpUUFDelFBSUFNb0FnQWdCR29nQUNnQzBBSWdBU2dDVkNnQ0FDQUNMd0VBYkVHRUlHcEJBM1pCL3dkeGFrR0FBMnN0QUFBNkFBQUx3d0VCQlg4Z0F5Z0NBQ0FFYWlJRklBQW9BdEFDUVlBRGF5SUFJQUVvQWxRaUFTZ0NKQ0FDTHdFU2JDSUdJQUVvQWdRZ0FpOEJBbXdpQjJvaUNDQUJLQUlnSUFJdkFSQnNJZ2tnQVNnQ0FDQUNMd0VBYkVHRUlHb2lBV29pQW1wQkEzWkIvd2R4YWkwQUFEb0FBQ0FGSUFBZ0FpQUlhMEVEZGtIL0IzRnFMUUFBT2dBQklBTW9BZ1FnQkdvaUFpQUFJQWNnQm1zaUF5QUJJQWxySWdGcVFRTjJRZjhIY1dvdEFBQTZBQUFnQWlBQUlBRWdBMnRCQTNaQi93ZHhhaTBBQURvQUFRdk5CQUVQZnlBREtBSUFJQVJxSWdVZ0FDZ0MwQUpCZ0FOcklnQWdBaTRCRUNBQktBSlVJZ0VvQWlCc1FiSE9BR3dpQ0NBQ0xnRUFJQUVvQWdCc1FRMTBRWUFJY2lJR0lBRW9Ba0FnQWk0QklHd2lCMEdoTFd4cUlnbHFRUUowUVlDQWlNQUFha0dBUUhFaUNpQUNMZ0VVSUFFb0FpaHNRYkhPQUd3aUN5QUNMZ0VFSUFFb0FnaHNRUTEwUVlBSWNpSU1JQUVvQWtnZ0FpNEJKR3dpRFVHaExXeHFJZzVxUVF0MUlnOUJvUzFzYWlJUUlBSXVBUklnQVNnQ0pHeEJzYzRBYkNJUklBSXVBUUlnQVNnQ0JHeEJEWFJCZ0FoeUloSWdBU2dDUkNBQ0xnRWliQ0lDUWFFdGJHb2lFMnBCQzNWQnNjNEFiQ0lCYWtFU2RrSC9CM0ZxTFFBQU9nQUFJQVVnQUNBUUlBRnJRUkoyUWY4SGNXb3RBQUE2QUFJZ0JTQUFJQTlCdnFWL2JDQUtha0VTZGtIL0IzRnFMUUFBT2dBQklBTW9BZ1FnQkdvaUFTQUFJQWRCdnFWL2JDQUdha0VDZEVHQWdJakFBR3BCZ0VCeElnVWdEVUcrcFg5c0lBeHFRUXQxSWdaQm9TMXNhaUlISUFKQnZxVi9iQ0FTYWtFTGRVR3h6Z0JzSWdKcVFSSjJRZjhIY1dvdEFBQTZBQUFnQVNBQUlBY2dBbXRCRW5aQi93ZHhhaTBBQURvQUFpQUJJQUFnQmtHK3BYOXNJQVZxUVJKMlFmOEhjV290QUFBNkFBRWdBeWdDQ0NBRWFpSUJJQUFnQ1NBSWEwRUNkRUdBZ0lqQUFHcEJnRUJ4SWdJZ0RpQUxhMEVMZFNJRFFhRXRiR29pQkNBVElCRnJRUXQxUWJIT0FHd2lCV3BCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnQkNBRmEwRVNka0gvQjNGcUxRQUFPZ0FDSUFFZ0FDQURRYjZsZjJ3Z0FtcEJFblpCL3dkeGFpMEFBRG9BQVF1VEJnRUhmeUFBS0FMUUFpRUxJd0JCUUdvaUFDQUJLQUpVSWdFb0FrQWdBaTRCSUd3aUJpQUJLQUlBSUFJdUFRQnNJZ1ZxUVFKMElnZ2dBU2dDWUNBQ0xnRXdiQ0lKSUFFb0FpQWdBaTRCRUd3aUIycEIwU0pzUVlBSWFpSUtJQWRCL2pCc2FrRUxkU0lIYXpZQ01DQUFJQWNnQ0dvMkFnQWdBQ0FGSUFaclFRSjBJZ1lnQ2lBSlFkK0pmMnhxUVF0MUlnVnJOZ0lnSUFBZ0JTQUdhallDRUNBQUlBRW9Ba1FnQWk0Qkltd2lCaUFCS0FJRUlBSXVBUUpzSWdWcVFRSjBJZ2dnQVNnQ1pDQUNMZ0V5YkNJSklBRW9BaVFnQWk0QkVtd2lCMnBCMFNKc1FZQUlhaUlLSUFkQi9qQnNha0VMZFNJSGF6WUNOQ0FBSUFjZ0NHbzJBZ1FnQUNBRklBWnJRUUowSWdZZ0NpQUpRZCtKZjJ4cVFRdDFJZ1ZyTmdJa0lBQWdCU0FHYWpZQ0ZDQUFJQUVvQWtnZ0FpNEJKR3dpQmlBQktBSUlJQUl1QVFSc0lnVnFRUUowSWdnZ0FTZ0NhQ0FDTGdFMGJDSUpJQUVvQWlnZ0FpNEJGR3dpQjJwQjBTSnNRWUFJYWlJS0lBZEIvakJzYWtFTGRTSUhhellDT0NBQUlBY2dDR28yQWdnZ0FDQUZJQVpyUVFKMElnWWdDaUFKUWQrSmYyeHFRUXQxSWdWck5nSW9JQUFnQlNBR2FqWUNHQ0FBSUFFb0Frd2dBaTRCSm13aUJpQUJLQUlNSUFJdUFRWnNJZ1ZxUVFKMElnZ2dBU2dDYkNBQ0xnRTJiQ0lKSUFFb0Fpd2dBaTRCRm13aUFXcEIwU0pzUVlBSWFpSUNJQUZCL2pCc2FrRUxkU0lCYXpZQ1BDQUFJQUVnQ0dvMkFnd2dBQ0FGSUFaclFRSjBJZ0VnQWlBSlFkK0pmMnhxUVF0MUlnSnJOZ0lzSUFBZ0FTQUNhallDSENBTFFZQURheUVCUVFBaEN5QUFJUUlEUUNBRElBdEJBblJxS0FJQUlBUnFJZ0FnQVNBQ0tBSU1JZ1lnQWlnQ0JDSUZha0hSSW13aUNDQUZRZjR3YkdvaUJTQUNLQUlBUVpDQUFXb2lDU0FDS0FJSUlnZHFRUTEwSWdwcVFSSjJRZjhIY1dvdEFBQTZBQUFnQUNBQklBb2dCV3RCRW5aQi93ZHhhaTBBQURvQUF5QUFJQUVnQ0NBR1FkK0pmMnhxSWdZZ0NTQUhhMEVOZENJRmFrRVNka0gvQjNGcUxRQUFPZ0FCSUFBZ0FTQUZJQVpyUVJKMlFmOEhjV290QUFBNkFBSWdBa0VRYWlFQ0lBdEJBV29pQzBFRVJ3MEFDd3VwQkFFTGZ5QUFLQUxRQWlFR0lBRW9BbFFoQVNNQVFmQUFheUlLSVFCQkFTRUhBMEFnQVNnQ1lDRUlJQUl1QVRBaEJTQUJLQUlnSVFrZ0FpNEJFQ0VMSUFBZ0FpNEJBQ0FCS0FJQWJFRU5kRUdBQ0hJaURDQUJLQUpBSUFJdUFTQnNJZzBnQVNnQ2dBRWdBaTRCUUd3aURtc2lEMEhBcFg5c2FrRUxkVFlDS0NBQUlBOUIwQlpzSUF4cUlnd2dEU0FPYWtITU1td2lEV29pRGlBRklBaHNJZ2dnQ1NBTGJDSUZha0dhTld3aUNTQUZRZkVnYkdvaUJXdEJDM1UyQWxBZ0FDQUZJQTVxUVF0MU5nSUFJQUFnRENBTmF5SUZJQWtnQ0VIYzlINXNhaUlJYTBFTGRUWUNQQ0FBSUFVZ0NHcEJDM1UyQWhRZ0IwRUZSa1VFUUNBQVFRUnFJUUFnQVVFRWFpRUJJQUpCQW1vaEFpQUhRUUZxSVFjTUFRc0xJQVpCZ0FOcklRQkJBQ0VISUFvaEFnTkFJQU1nQjBFQ2RHb29BZ0FnQkdvaUFTQUFJQUlvQWd3aUNpQUNLQUlFSWdacVFabzFiQ0lJSUFaQjhTQnNhaUlHSUFJb0FnQkJEWFJCZ0lDSXdBQnFJZ1VnQWlnQ0NDSUpJQUlvQWhBaUMyc2lERUhRRm14cUlnMGdDU0FMYWtITU1td2lDV29pQzJwQkVuWkIvd2R4YWkwQUFEb0FBQ0FCSUFBZ0N5QUdhMEVTZGtIL0IzRnFMUUFBT2dBRUlBRWdBQ0FJSUFwQjNQUitiR29pQ2lBTklBbHJJZ1pxUVJKMlFmOEhjV290QUFBNkFBRWdBU0FBSUFZZ0NtdEJFblpCL3dkeGFpMEFBRG9BQXlBQklBQWdERUhBcFg5c0lBVnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FrRVVhaUVDSUFkQkFXb2lCMEVGUncwQUN3dnpCQUVNZnlNQVFaQUJheUlOSkFBZ0FDZ0MwQUloRGlBQktBSlVJUUVnRFNFQVFRRWhCd05BSUFFb0FrQWhDQ0FDTGdFZ0lRa2dBQ0FDTGdFQUlBRW9BZ0JzUVExMFFZQUljaUlLSUFFb0FvQUJJQUl1QVVCc0lndEJ2cVYvYkdwQkMzVWlEeUFCS0FJZ0lBSXVBUkJzSWdVZ0FTZ0NZQ0FDTGdFd2JDSUdJQUVvQXFBQklBSXVBVkJzSWd4cWEwRUNkQ0lRYXpZQ1lDQUFJQThnRUdvMkFoZ2dBQ0FJSUFsc1FiSE9BR3dpQ0NBTFFhRXRiQ0FLYWlJSmFpSUtJQVVnREdwQnRoZHNJZ3NnQlNBR2FrRU5kR29pQld0QkMzVTJBbmdnQUNBRklBcHFRUXQxTmdJQUlBQWdDU0FJYXlJRklBc2dEQ0FHYTBFTmRHb2lCbXRCQzNVMkFrZ2dBQ0FGSUFacVFRdDFOZ0l3SUFkQkJrWkZCRUFnQUVFRWFpRUFJQUZCQkdvaEFTQUNRUUpxSVFJZ0IwRUJhaUVIREFFTEN5QU9RWUFEYXlFQVFRQWhCeUFOSVFJRFFDQURJQWRCQW5ScUtBSUFJQVJxSWdFZ0FDQUNLQUlVSWdVZ0FpZ0NCQ0lHYWtHMkYyd2lEaUFDS0FJTUlnd2dCbXBCRFhScUlnZ2dBaWdDQUVFTmRFR0FnSWpBQUdvaUNTQUNLQUlRSWdwQm9TMXNhaUlMSUFJb0FnaEJzYzRBYkNJUGFpSVFha0VTZGtIL0IzRnFMUUFBT2dBQUlBRWdBQ0FRSUFoclFSSjJRZjhIY1dvdEFBQTZBQVVnQVNBQUlBWWdCU0FNYW10QkRYUWlCaUFLUWI2bGYyd2dDV29pQ0dwQkVuWkIvd2R4YWkwQUFEb0FBU0FCSUFBZ0NDQUdhMEVTZGtIL0IzRnFMUUFBT2dBRUlBRWdBQ0FPSUFVZ0RHdEJEWFJxSWdVZ0N5QVBheUlHYWtFU2RrSC9CM0ZxTFFBQU9nQUNJQUVnQUNBR0lBVnJRUkoyUWY4SGNXb3RBQUE2QUFNZ0FrRVlhaUVDSUFkQkFXb2lCMEVHUncwQUN5QU5RWkFCYWlRQUM4MEdBUkIvSXdCQjBBRnJJaEVrQUNBQUtBTFFBaUVPSUFFb0FsUWhBU0FSSVFCQkFTRU1BMEFnQVNnQ29BRWhDQ0FDTGdGUUlRa2dBU2dDSUNFTklBSXVBUkFoRHlBQktBSmdJUW9nQWk0Qk1DRVNJQUFnQWk0QkFDQUJLQUlBYkVFTmRFR0FDSElpQnlBQktBS0FBU0FDTGdGQWJDSUZJQUVvQXNBQklBSXVBV0JzSWdZZ0FTZ0NRQ0FDTGdFZ2JDSUxhaUlRYTBIQjJnQnNha0VMZFRZQ1ZDQUFJQkJCeHRFQWJDQUhhaUlRSUFVZ0JtdEJ0emhzSWhNZ0JrR0RlMnhxYWlJVUlBZ2dDV3dpQmlBTklBOXNJZ2hxUWFNbmJDSU5JQW9nRW13aUNTQUlha0h2TzJ3aUR5QUlJQWxyUWZNS2JDSUlhMm9pQ210QkMzVTJBcWdCSUFBZ0NpQVVha0VMZFRZQ0FDQUFJQXNnQld0QmtoUnNJZ29nQzBIeDRYNXNhaUFRYWlJTElBWWdDV3BCNGFkL2JDSUpJQTBnQmtIZTl3QnNhbW9pQm10QkMzVTJBbkFnQUNBR0lBdHFRUXQxTmdJNElBQWdCVUdWaW45c0lBZHFJQXBxSUJOcUlnVWdDQ0FQYWlBSmFpSUhhMEVMZFRZQ2pBRWdBQ0FGSUFkcVFRdDFOZ0ljSUF4QkIwWkZCRUFnQUVFRWFpRUFJQUZCQkdvaEFTQUNRUUpxSVFJZ0RFRUJhaUVNREFFTEN5QU9RWUFEYXlFQVFRQWhEQ0FSSVFJRFFDQURJQXhCQW5ScUtBSUFJQVJxSWdFZ0FDQUNLQUlNSWdjZ0FpZ0NCQ0lGYWtIdk8yd2lEaUFGSUFkclFmTUtiQ0lOYXlBQ0tBSVVJZ1lnQldwQm95ZHNJZzlxSWdvZ0FpZ0NFQ0lGSUFJb0FoZ2lDMnRCdHpoc0loSWdDMEdEZTJ4cUlBSW9BZ0JCRFhSQmdJQ0l3QUJxSWdnZ0N5QUNLQUlJSWdscUlndEJ4dEVBYkdvaUVHb2lFMnBCRW5aQi93ZHhhaTBBQURvQUFDQUJJQUFnRXlBS2EwRVNka0gvQjNGcUxRQUFPZ0FHSUFFZ0FDQUdJQWRxUWVHbmYyd2lCeUFOSUE1cWFpSU9JQWtnQld0QmtoUnNJZzBnQlVHVmluOXNJQWhxYWlBU2FpSUtha0VTZGtIL0IzRnFMUUFBT2dBQklBRWdBQ0FLSUE1clFSSjJRZjhIY1dvdEFBQTZBQVVnQVNBQUlBOGdCa0hlOXdCc2FpQUhhaUlISUEwZ0NVSHg0WDVzYWlBUWFpSUdha0VTZGtIL0IzRnFMUUFBT2dBQ0lBRWdBQ0FHSUFkclFSSjJRZjhIY1dvdEFBQTZBQVFnQVNBQUlBVWdDMnRCd2RvQWJDQUlha0VTZGtIL0IzRnFMUUFBT2dBRElBSkJIR29oQWlBTVFRRnFJZ3hCQjBjTkFBc2dFVUhRQVdva0FBdURDUUVTZnlNQVFZQUNheUlTSkFBZ0FDZ0MwQUloRVNBQktBSlVJUUJCQ0NFR0lCSWhBUU5BQW44Q1FDQUNMZ0VRSWdnZ0FpNEJJQ0lGY2tILy93TnhSUVJBQWtBZ0FpOEJNQTBBSUFJdkFVQU5BQ0FDTHdGUURRQWdBaThCWUEwQUlBSXZBWEJGRFFJTFFRQWhCUXNnQVNBQUtBTEFBU0FDTGdGZ2JDSUpJQUFvQWtBZ0JXd2lCV3BCMFNKc0lnMGdCVUgrTUd4cUlnNGdBaTRCUUNBQUtBS0FBV3hCRFhRaUNpQUNMZ0VBSUFBb0FnQnNRUTEwUVlBSWNpSUxhaUlQYWlJTUlBQW9BaUFnQ0d3aUJTQUFLQUxnQVNBQ0xnRndiQ0lJYWtHelJtd2lFeUFGUVl2Z0FHeHFJQVVnQUNnQ29BRWdBaTRCVUd3aUIyb2lFQ0FBS0FKZ0lBSXVBVEJzSWdVZ0NHb2lGR3BCb2NzQWJDSVZJQkJCaEdkc2FpSVFhaUlXYTBFTGRUWUM0QUVnQVNBTUlCWnFRUXQxTmdJQUlBRWdEU0FKUWQrSmYyeHFJZ2tnQ3lBS2F5SU5haUlLSUJVZ0ZFRzdnbjlzYWlJTElBVWdCMnBCL2R0K2JDSU1JQVZCMU1RQmJHcHFJZ1ZyUVF0MU5nTEFBU0FCSUFVZ0NtcEJDM1UyQWlBZ0FTQU5JQWxySWdVZ0RDQUhRYk9EQVd4cUlCQnFJZ2RyUVF0MU5nS2dBU0FCSUFVZ0IycEJDM1UyQWtBZ0FTQVRJQWhCamhOc2FpQUxhaUlGSUE4Z0Rtc2lDR3BCQzNVMkFtQWdDQ0FGYTBFTGRTRUZJQUZCZ0FGcURBRUxJQUVnQWk0QkFDQUFLQUlBYkVFQ2RDSUZOZ0xBQVNBQklBVTJBcUFCSUFFZ0JUWUNnQUVnQVNBRk5nSmdJQUVnQlRZQ1FDQUJJQVUyQWlBZ0FTQUZOZ0lBSUFGQjRBRnFDeUFGTmdJQUlBSkJBbW9oQWlBQVFRUnFJUUFnQVVFRWFpRUJJQVpCQVVzaEJTQUdRUUZySVFZZ0JRMEFDeUFSUVlBRGF5RUFRUUFoQ0NBU0lRSURRQ0FDS0FJQVFaQ0FBV29oQmlBRElBaEJBblJxS0FJQUlBUnFJUUVDUUFKQUlBSW9BZ1FpQnlBQ0tBSUlJZ1Z5RFFCQkFDRUZJQUlvQWd3TkFDQUNLQUlRRFFBZ0FpZ0NGQTBBSUFJb0FoZ05BQ0FDS0FJY0RRQWdBU0FBSUFaQkJYWkIvd2R4YWpFQUFFS0Jnb1NJa0tEQWdBRitOd0FBREFFTElBRWdBQ0FDS0FJY0loRWdCMnBCczBac0lnMGdCMEdMNEFCc2FpQUNLQUlNSWdrZ0VXb2lEaUFISUFJb0FoUWlCMm9pQ21wQm9jc0FiQ0lMSUFwQmhHZHNhaUlLYWlJUElBSW9BaGdpRENBRmFrSFJJbXdpRXlBRlFmNHdiR29pQlNBQ0tBSVFJaEFnQm1wQkRYUWlGR29pRldwQkVuWkIvd2R4YWkwQUFEb0FBQ0FCSUFBZ0ZTQVBhMEVTZGtIL0IzRnFMUUFBT2dBSElBRWdBQ0FMSUE1QnU0Si9iR29pRGlBSElBbHFRZjNiZm13aUN5QUpRZFRFQVd4cWFpSUpJQk1nREVIZmlYOXNhaUlQSUFZZ0VHdEJEWFFpQm1vaURHcEJFblpCL3dkeGFpMEFBRG9BQVNBQklBQWdEQ0FKYTBFU2RrSC9CM0ZxTFFBQU9nQUdJQUVnQUNBTElBZEJzNE1CYkdvZ0Ntb2lCeUFHSUE5cklnWnFRUkoyUWY4SGNXb3RBQUE2QUFJZ0FTQUFJQVlnQjJ0QkVuWkIvd2R4YWkwQUFEb0FCU0FCSUFBZ0RTQVJRWTRUYkdvZ0Rtb2lCaUFVSUFWcklnVnFRUkoyUWY4SGNXb3RBQUE2QUFNZ0FTQUFJQVVnQm10QkVuWkIvd2R4YWkwQUFEb0FCQXNnQWtFZ2FpRUNJQWhCQVdvaUNFRUlSdzBBQ3lBU1FZQUNhaVFBQ3hrQUlBQWdBQ2dDQUNnQ0NCRUJBQ0FBRUpZRlFRRVFBUUFMV3dFQmZ5QUFLQUlBSVFJZ0FVRi9UQVJBQWtBZ0FpZ0NiQ0lCQkVBZ0FpZ0NhRUVEU0EwQkN5QUFJQUlvQWdnUkFRQWdBaWdDYkNFQkN5QUNJQUZCQVdvMkFtd1BDeUFCSUFJb0FtaE1CRUFnQUNBQ0tBSUlFUUVBQ3d0ZEFRSi9Jd0JCNEFGcklnRWtBQ0FBSUFGQkVHb2dBQ2dDQUNnQ0RCRUNBQ0FCSUFGQkVHbzJBZ0JCaklBREtBSUFJUUlqQUVFUWF5SUFKQUFnQUNBQk5nSU1JQUpCZ0s4Q0lBRVEvd1FnQUVFUWFpUUFJQUZCNEFGcUpBQUxrd0lDQkg4RGZpTUFRVEJySWdNa0FBSkFBa0FDZndKQUlBQW9BZ0FpQWlnQ0ZDSUFRUUZJRFFBZ0FDQUNLQUowU2cwQUlBSW9BbkFnQUVFQ2RHb01BUXNnQWlnQ2VDSUVSUTBCSUFBZ0FpZ0NmQ0lGU0EwQklBQWdBaWdDZ0FGS0RRRWdCQ0FBSUFWclFRSjBhZ3NvQWdBaUJBMEJDeUFDSUFBMkFoZ2dBaWdDY0NnQ0FDRUVDeUFFSVFBQ1FBSkFBMEFnQUMwQUFDSUZSUTBCSUFCQkFXb2hBQ0FGUVNWSERRQUxJQUF0QUFCQjh3QkhEUUFnQXlBQ1FSaHFOZ0lnSUFFZ0JDQURRU0JxRUtRQ0RBRUxJQUlwQWlBaEJpQUNLUUlvSVFjZ0Fpa0NHQ0VJSUFNZ0Fpa0NNRGNER0NBRElBYzNBeEFnQXlBR053TUlJQU1nQ0RjREFDQUJJQVFnQXhDa0Fnc2dBMEV3YWlRQUN4VUFJQUFvQWdBaUFFRUFOZ0lVSUFCQkFEWUNiQXZZQVFBQ1FDQUFLQUxJQXlJQktBSVlJZ0lFUUNBQktBSU1JUU1NQVFzZ0FTQUFJQUVvQWdnZ0FTZ0NGQ0FCS0FJUVFRQWdBQ2dDQkNnQ0hCRUtBQ0lETmdJTUlBRW9BaGdoQWdzZ0FDQURJQUpCQW5ScUlBUWdCU2dDQUNJRFFRSjBhaUFBS0FKMElBRW9BaFJySWdRZ0JpQURheUlESUFFb0FoQWdBbXNpQWlBQ0lBTkxHeUlDSUFJZ0JFc2JJZ0lnQUNnQzVBTW9BZ1FSQndBZ0JTQUZLQUlBSUFKcU5nSUFJQUVnQVNnQ0dDQUNhaUlBTmdJWUlBQWdBU2dDRUNJQVR3UkFJQUZCQURZQ0dDQUJJQUVvQWhRZ0FHbzJBaFFMQzlNQkFRSi9JQUFvQXNnRElnUkJHR29oQ0FKQUlBUW9BaGdpQmdSQUlBUW9BZ3doQnd3QkN5QUVJQUFnQkNnQ0NDQUVLQUlVSUFRb0FoQkJBU0FBS0FJRUtBSWNFUW9BSWdjMkFnd2dCQ2dDR0NFR0N5QUFJQUVnQWlBRElBY2dDQ0FFS0FJUUlBQW9BdHdES0FJRUVRd0FJQVlnQkNnQ0dDSUJTUVIvSUFBZ0JDZ0NEQ0FHUVFKMGFrRUFJQUVnQm1zaUFTQUFLQUxrQXlnQ0JCRUhBQ0FGSUFVb0FnQWdBV28yQWdBZ0JDZ0NHQVVnQVFzZ0JDZ0NFQ0lBVHdSQUlBUkJBRFlDR0NBRUlBUW9BaFFnQUdvMkFoUUxDNDhCQVFSL0l3QkJFR3NpQnlRQUlBQW9Bc2dESWdnb0FoQWhDU0FGS0FJQUlRb2dCMEVBTmdJTUlBQWdBU0FDSUFNZ0NDZ0NEQ0FIUVF4cUlBa2dCaUFLYXlJQklBRWdDVXNiSUFBb0F0d0RLQUlFRVF3QUlBQWdDQ2dDRENBRUlBVW9BZ0JCQW5ScUlBY29BZ3dnQUNnQzVBTW9BZ1FSQndBZ0JTQUZLQUlBSUFjb0FneHFOZ0lBSUFkQkVHb2tBQXZjQVFFQmZ5QUFLQUxJQXlFQ0FrQUNRQUpBQWtBQ1FDQUJEZ1FBQXdJQkF3c2dBQ2dDVkFSQUlBSkJwQUUyQWdRZ0FpZ0NEQTBFSUFJZ0FDQUNLQUlJUVFBZ0FpZ0NFRUVCSUFBb0FnUW9BaHdSQ2dBMkFnd01CQXNnQWlBQUtBTGNBeWdDQkRZQ0JBd0RDeUFDS0FJSVJRUkFJQUFvQWdBaUFVRUROZ0lVSUFBZ0FTZ0NBQkVCQUFzZ0FrR2xBVFlDQkF3Q0N5QUNLQUlJUlFSQUlBQW9BZ0FpQVVFRE5nSVVJQUFnQVNnQ0FCRUJBQXNnQWtHbUFUWUNCQXdCQ3lBQUtBSUFJZ0ZCQXpZQ0ZDQUFJQUVvQWdBUkFRQUxJQUpDQURjQ0ZBdWZBUUVFZnlBRFFRRk9CRUFnQUNnQ2NDRUNJQUFvQXVRREtBSVlJUWNEUUNBQ0JFQWdBU0FGUVFKMGFpZ0NBQ0VBSUFJaEJnTkFJQWNnQUMwQUFFRUJka0g4QUhGcUtBSUFJQUF0QUFGQkJIUkJ3Qjl4YWlBQUxRQUNRUUoyUVQ1eGFpSUVJQVF2QVFBaUJDQUVRUUZxSWdRZ0JDQUVRZi8vQTNGSEd6c0JBQ0FBUVFOcUlRQWdCa0VCYXlJR0RRQUxDeUFGUVFGcUlnVWdBMGNOQUFzTEMvNEtBUnAvSUFBZ0FDZ0M1QU1pRXlnQ0VEWUNpQUVnQUVFQklCTW9BaFFpQjBFRmRDQUFLQUlFS0FJQUVRUUFJZ3BDZ0lDQWdQQUROd0lRSUFwQ2dJQ0FnUEFITndJSUlBcENnSUNBZ1BBRE53SUFJQUFnQ2hEZkEwRUJJUXdDUUFKQUlBZEJBa2dOQUFOQUlBRkJBV29oRFFKQUFrQUNRQUpBQWtBZ0J5QU1RUUYwVGdSQUlBMUJBWEVoQkNBQkRRRkJBQ0VDUVFBaEF5QUtJUUVNQkFzZ0RVRURjU0VJSUFGQkEwOE5BVUVBSVFKQkFDRURJQW9oQVF3Q0N5QU5RWDV4SVFoQkFDRUNRUUFoQXlBS0lRRURRQ0FESUFFb0Fod2lCVWdFUUNBQklBSWdBU2dDR0VFQVNpSUdHeUVDSUFVZ0F5QUdHeUVEQ3lBRElBRW9BandpQlVnRVFDQUJRU0JxSUFJZ0FTZ0NPRUVBU2lJR0d5RUNJQVVnQXlBR0d5RURDeUFCUVVCcklRRWdDRUVDYXlJSURRQUxEQUlMSUExQmZIRWhCRUVBSVFKQkFDRURJQW9oQVFOQUlBRkI0QUJxSUFGQlFHc2dBVUVnYWlBQklBSWdBU2dDR0NJQ0lBTktJZ1ViSUFFb0FqZ2lCaUFDSUFNZ0JSc2lBa29pQXhzZ0FTZ0NXQ0lGSUFZZ0FpQURHeUlDU2lJREd5QUJLQUo0SWdZZ0JTQUNJQU1iSWdOS0lnVWJJUUlnQmlBRElBVWJJUU1nQVVHQUFXb2hBU0FFUVFScklnUU5BQXNMSUFoRkRRRURRQ0FCSUFJZ0FTZ0NHQ0lFSUFOS0lnVWJJUUlnQkNBRElBVWJJUU1nQVVFZ2FpRUJJQWhCQVdzaUNBMEFDd3dCQ3lBRVJRMEFJQUVvQWh3Z0Ewd05BQ0FCSUFJZ0FTZ0NHRUVBU2hzaEFnc2dBa1VOQVNBS0lBeEJCWFJxSWdFZ0FpZ0NCRFlDQkNBQklBSW9BZ3cyQWd3Z0FTQUNLQUlVTmdJVUlBRWdBaWdDQURZQ0FDQUJJQUlvQWdnMkFnZ2dBU0FDS0FJUU5nSVFBa0FDZndKQUFrQUNRRUVDSUFJb0FnUWlCQ0FDS0FJQUlnVnJRUVIwSWdnZ0FpZ0NEQ0lHSUFJb0FnZ2lDV3RCREd3aUEwd2dBaWdDRkNJT0lBSW9BaEFpRDJ0QkEzUWdDQ0FESUFNZ0NFZ2JTaHNPQXdBQkFnUUxJQUlnQkNBRmFrRUNiU0lETmdJRUlBRU1BZ3NnQWlBR0lBbHFRUUp0SWdNMkFnd2dBVUVJYWd3QkN5QUNJQTRnRDJwQkFtMGlBellDRkNBQlFSQnFDeUFEUVFGcU5nSUFDeUFBSUFJUTN3TWdBQ0FCRU44RElBMGhBU0FNUVFGcUlnd2dCMGNOQUFzZ0J5RU1JQWRCQVVnTkFRdEJBQ0VPQTBCQkFDRUVRUUFoQlVFQUlRWkJBQ0VKSUFvZ0RrRUZkR29pQVNnQ0FDSVBJQUVvQWdRaUZrd0VRQ0FCS0FJTUlSUWdBU2dDQ0NFTklBQW9BdVFES0FJWUlSY2dBU2dDRUNJSFFRRnFJUU1nQjBFRGRFRUVjaUVZSUFFb0FoUWlFQ0FIYTBFQmFrRUJjU0VaQTBBZ0RTQVVUQVJBSUE5QkEzUkJCSEloRVNBWElBOUJBblJxS0FJQUlSb2dEU0VCQTBBZ0FTRUlBa0FnQnlBUVNnMEFJQWhCQW5SQkFuSWhFaUFhSUFoQkJuUnFJQWRCQVhScUlRSUNmeUFaUlFSQUlBSWhBU0FIREFFTElBSkJBbW9oQVNBQ0x3RUFJZ0lFUUNBQ0lCaHNJQWxxSVFrZ0FpQVNiQ0FHYWlFR0lBSWdFV3dnQldvaEJTQUNJQVJxSVFRTElBTUxJUUlnQnlBUVJnMEFBMEFnQVM4QkFDSUxCRUFnQ3lBU2JDQUdhaUVHSUFzZ0VXd2dCV29oQlNBQ1FRTjBRUVJ5SUF0c0lBbHFJUWtnQkNBTGFpRUVDeUFDUVFGcUlSVWdBUzhCQWlJTEJFQWdDeUFTYkNBR2FpRUdJQXNnRVd3Z0JXb2hCU0FWUVFOMFFRUnlJQXRzSUFscUlRa2dCQ0FMYWlFRUN5QUJRUVJxSVFFZ0FrRUNhaUVDSUJBZ0ZVY05BQXNMSUFoQkFXb2hBU0FJSUJSSERRQUxDeUFQSUJaSElRRWdEMEVCYWlFUElBRU5BQXNMSUFBb0FvZ0JLQUlBSUE1cUlBVWdCRUVCZFNJQmFpQUViVG9BQUNBQUtBS0lBU2dDQkNBT2FpQUJJQVpxSUFSdE9nQUFJQUFvQW9nQktBSUlJQTVxSUFFZ0NXb2dCRzA2QUFBZ0RrRUJhaUlPSUF4SERRQUxJQXdoQndzZ0FDQUhOZ0tFQVNBQUtBSUFJZ0VnQnpZQ0dDQUJRZUlBTmdJVUlBQkJBU0FBS0FJQUtBSUVFUUlBSUJOQkFUWUNIQXUzQlFFamZ5QURRUUZPQkVBZ0FDZ0NjQ0lTUVFGcklSc2dFa0VEYkNJSlFRTnJJUndnQUNnQzBBSWhFeUFBS0FLSUFTSUVLQUlJSVIwZ0JDZ0NCQ0VlSUFRb0FnQWhIeUFBS0FMa0F5SUxLQUlvSVJRZ0N5Z0NHQ0VnSUFsQkEycEJBWFFoSVFOQUlBSWdGVUVDZENJSmFpZ0NBQ0VNSUFFZ0NXb29BZ0FoQmdKL0lBc29BaVFFUUNBTUlCdHFJUXdnQmlBY2FpRUdRWDBoRFVGL0lSWkJBQ0VISUFzb0FpQWdJV29NQVF0QkF5RU5RUUVoQjBFQklSWWdDeWdDSUFzaEJDQUxJQWMyQWlRQ1FDQVNSUVJBUVFBaERrRUFJUTlCQUNFUURBRUxJQTFCQW1vaElpQU5RUUZxSVNOQkFDRVhRUWdoQjBFSUlSRkJDQ0VLUVFBaEdFRUFJUmxCQUNFT1FRQWhEMEVBSVJBZ0VpRWFBMzhnRENBZ0lCTWdGQ0FLSUFRZ0RVRUJkR29pQ1M0QkFHcEJCSFZCQW5ScUtBSUFJQVl0QUFCcWFpMEFBQ0lrUVFOMklpVkJBblJxS0FJQUlCTWdGQ0FSSUFRZ0kwRUJkR291QVFCcVFRUjFRUUowYWlnQ0FDQUdMUUFCYW1vdEFBQWlKa0VDZGlJS1FRWjBhaUFUSUJRZ0J5QUVJQ0pCQVhScUxnRUFha0VFZFVFQ2RHb29BZ0FnQmkwQUFtcHFMUUFBSWhGQkEzWWlCVUVCZEdvaUNDOEJBQ0lIQkg4Z0J3VWdBQ0FsSUFvZ0JSQ2ZCU0FJTHdFQUMwRUJheUlGT2dBQUlBVWdIMm90QUFBaENpQUZJQjVxTFFBQUlRZ2dCQ0FSSUFVZ0hXb3RBQUJySWdWQkEyd2dFR283QVFRZ0JDQW1JQWhySWdoQkEyd2dEMm83QVFJZ0JDQWtJQXBySWdSQkEyd2dEbW83QVFBZ0JVRUZiQ0FaYWlFUUlBaEJCV3dnR0dvaER5QUVRUVZzSUJkcUlRNGdHa0VCYXlJYUJIOGdEQ0FXYWlFTUlBWWdEV29oQmlBRlFRZHNRUWhxSVFjZ0NFRUhiRUVJYWlFUklBUkJCMnhCQ0dvaENpQUVJUmNnQ0NFWUlBVWhHU0FKSVFRTUFRVWdDUXNMSVFRTElBUWdFRHNCQkNBRUlBODdBUUlnQkNBT093RUFJQlZCQVdvaUZTQURSdzBBQ3dzTHZ3RUJDMzhnQTBFQlRnUkFJQUFvQW5BaENTQUFLQUxrQXlnQ0dDRUtBMEFnQ1FSQUlBRWdCa0VDZENJRmFpZ0NBQ0VFSUFJZ0JXb29BZ0FoQnlBSklRVURRQ0FLSUFRdEFBQkJBM1lpQzBFQ2RHb29BZ0FnQkMwQUFVRUNkaUlNUVFaMGFpQUVMUUFDUVFOMklnMUJBWFJxSWc0dkFRQWlDRVVFUUNBQUlBc2dEQ0FORUo4RklBNHRBQUFoQ0FzZ0JFRURhaUVFSUFjZ0NFRUJhem9BQUNBSFFRRnFJUWNnQlVFQmF5SUZEUUFMQ3lBR1FRRnFJZ1lnQTBjTkFBc0xDN1FGQVFSL0lBQW9BdVFESWdNb0FoZ2hBZ0pBQWtBQ2Z5QUFLQUpZUlFSQUlBRU5Ba0dlQVF3QkN5QUFRUUkyQWxnZ0FRMEJRWjhCQ3lFQklBTkJvQUUyQWdnZ0F5QUJOZ0lFUVFFaEFRSkFJQUFvQW9RQklnUkJBVWdFZjBFNkJTQUVRWUVDU0EwQlFZQUNJUUZCT3dzaEJDQUFLQUlBSWdVZ0FUWUNHQ0FGSUFRMkFoUWdBQ0FBS0FJQUtBSUFFUUVBQ3lBQUtBSllRUUpIRFFFZ0FDZ0NjRUVHYkVFTWFpRUJJQU1vQWlBaUJFVUVRQ0FESUFCQkFTQUJJQUFvQWdRb0FnUVJCQUFpQkRZQ0lBc2dCRUVBSUFFUU94b2dBeWdDS0VVRVFDQUFFS0FGQ3lBRFFRQTJBaVFNQVFzZ0EwRUJOZ0ljSUFOQm9RRTJBZ2dnQTBHaUFUWUNCQXNnQXlnQ0hBUkFJQUlvQWdCQkFFR0FJQkE3R2lBQ0tBSUVRUUJCZ0NBUU94b2dBaWdDQ0VFQVFZQWdFRHNhSUFJb0FneEJBRUdBSUJBN0dpQUNLQUlRUVFCQmdDQVFPeG9nQWlnQ0ZFRUFRWUFnRURzYUlBSW9BaGhCQUVHQUlCQTdHaUFDS0FJY1FRQkJnQ0FRT3hvZ0FpZ0NJRUVBUVlBZ0VEc2FJQUlvQWlSQkFFR0FJQkE3R2lBQ0tBSW9RUUJCZ0NBUU94b2dBaWdDTEVFQVFZQWdFRHNhSUFJb0FqQkJBRUdBSUJBN0dpQUNLQUkwUVFCQmdDQVFPeG9nQWlnQ09FRUFRWUFnRURzYUlBSW9BanhCQUVHQUlCQTdHaUFDS0FKQVFRQkJnQ0FRT3hvZ0FpZ0NSRUVBUVlBZ0VEc2FJQUlvQWtoQkFFR0FJQkE3R2lBQ0tBSk1RUUJCZ0NBUU94b2dBaWdDVUVFQVFZQWdFRHNhSUFJb0FsUkJBRUdBSUJBN0dpQUNLQUpZUVFCQmdDQVFPeG9nQWlnQ1hFRUFRWUFnRURzYUlBSW9BbUJCQUVHQUlCQTdHaUFDS0FKa1FRQkJnQ0FRT3hvZ0FpZ0NhRUVBUVlBZ0VEc2FJQUlvQW14QkFFR0FJQkE3R2lBQ0tBSndRUUJCZ0NBUU94b2dBaWdDZEVFQVFZQWdFRHNhSUFJb0FuaEJBRUdBSUJBN0dpQUNLQUo4UVFCQmdDQVFPeG9nQTBFQU5nSWNDd3NOQUNBQUtBTGtBMEVCTmdJY0N4d0FJQUJCQUVFQVFRQWdBU0FDSUFNZ0FDZ0N5QU1vQWdRUkRBQUxZUUVDZndKQUlBQW9Bc0FESWdRb0FqQWdCQ2dDTkNJRlR3UkFJQUFnQkVFSWFpQUFLQUxFQXlnQ0RCRURBRVVOQVNBRVFRQTJBakFnQkNnQ05DRUZDeUFBSUFSQkNHb2dCRUV3YWlBRklBRWdBaUFESUFBb0FzZ0RLQUlFRVF3QUN3dTRCd0VOZndKQUlBQW9Bc0FESWdRb0FqaEZCRUFnQUNBRUlBUW9Ba1JCQW5ScUtBSThJQUFvQXNRREtBSU1FUU1BUlEwQklBUkJBVFlDT0NBRUlBUW9Ba3hCQVdvMkFrd0xBa0FDUUFKQUlBUW9Ba2dPQXdFQ0FBTUxJQUFnQkNBRUtBSkVRUUowYWlnQ1BDQUVRVEJxSUFRb0FqUWdBU0FDSUFNZ0FDZ0N5QU1vQWdRUkRBQWdCQ2dDTUNBRUtBSTBTUTBDSUFSQkFEWUNTQ0FDS0FJQUlBTlBEUUlMSUFSQkFEWUNNQ0FFSUFBb0FzZ0NJZ3hCQVdzMkFqUUNRQ0FFS0FKTUlBQW9Bc3dDUncwQUlBQW9BaVFpRFVFQlNBMEFJQUFvQXNBRElnOGdEeWdDUkVFQ2RHb2hFQ0FBS0FMWUFTRUlBMEFnQ0NnQ01DQUlLQUlvSUFnb0FneHNJZ1Z3SWdZZ0JTQUdHeUlHUVFGcklRY2dCU0FNYlNFRklBcEZCRUFnRHlBSElBVnRRUUZxTmdJMEN3SkFJQVZCQVVnTkFDQVFLQUk4SUFwQkFuUnFLQUlBSWdrZ0IwRUNkR29oQnlBRlFRRjBJZ1ZCQVNBRlFRRktHeUlMUVFOeElRNUJBQ0VGSUF0QkFXdEJBMDhFUUNBTFFmei8vLzhIY1NFTEEwQWdDU0FGSUFacVFRSjBhaUFIS0FJQU5nSUFJQWtnQlVFQmNpQUdha0VDZEdvZ0J5Z0NBRFlDQUNBSklBVkJBbklnQm1wQkFuUnFJQWNvQWdBMkFnQWdDU0FGUVFOeUlBWnFRUUowYWlBSEtBSUFOZ0lBSUFWQkJHb2hCU0FMUVFScklnc05BQXNMSUE1RkRRQURRQ0FKSUFVZ0JtcEJBblJxSUFjb0FnQTJBZ0FnQlVFQmFpRUZJQTVCQVdzaURnMEFDd3NnQ0VIWUFHb2hDQ0FLUVFGcUlnb2dEVWNOQUFzTElBUkJBVFlDU0FzZ0FDQUVJQVFvQWtSQkFuUnFLQUk4SUFSQk1Hb2dCQ2dDTkNBQklBSWdBeUFBS0FMSUF5Z0NCQkVNQUNBRUtBSXdJQVFvQWpSSkRRQUNRQ0FFS0FKTVFRRkhCRUFnQUNnQ3lBSWlBRUVDYWlFRElBQkJBV29oQVF3QkN5QUFLQUxJQWlJSFFRSnFJUU1nQjBFQmFpRUJJQUFvQWlRaURrRUJTQTBBSUFBb0FzQURJUW9nQUNnQzJBRWhBRUVBSVFrRFFDQUFLQUlvSUFBb0FneHNJQWR0SWdKQkFVNEVRQ0FDSUFOc0lROGdBU0FDYkNFTElBbEJBblFpQlNBS0tBSkFhaWdDQUNFSUlBb29BandnQldvb0FnQWhCa0VBSVFVRFFDQUdJQVVnQW10QkFuUWlER29nQmlBRklBdHFRUUowSWcxcUtBSUFOZ0lBSUFnZ0RHb2dDQ0FOYWlnQ0FEWUNBQ0FHSUFVZ0QycEJBblFpREdvZ0JpQUZRUUowSWcxcUtBSUFOZ0lBSUFnZ0RHb2dDQ0FOYWlnQ0FEWUNBQ0FGUVFGcUlnVWdBa2NOQUFzTElBQkIyQUJxSVFBZ0NVRUJhaUlKSUE1SERRQUxDeUFFUVFBMkFqZ2dCRUVDTmdKSUlBUWdBellDTkNBRUlBRTJBakFnQkNBRUtBSkVRUUZ6TmdKRUN3dU9Cd0VRZnlBQUtBTEFBeUVIQWtBQ1FBSkFJQUVPQXdBQ0FRSUxJQUFvQXR3REtBSUlCRUFnQjBHWkFUWUNCQ0FBS0FJa0lnOUJBVTRFUUNBQUtBTElBaUlNUVFKcklSQWdERUVDYWlFUklBQW9BdGdCSVFzRFFDQU5RUUowSWdBZ0J5Z0NRR29vQWdBaEFTQUhLQUk4SUFCcUtBSUFJUVFnQUNBSGFpZ0NDQ0VGQWtBZ0N5Z0NLQ0FMS0FJTWJDQU1iU0lHSUJGc0lnSkJBVWdOQUNBQ1FRTnhJUWhCQUNFQUlBSkJBV3RCQTA4RVFDQUNRWHh4SVFrRFFDQUJJQUJCQW5RaUFtb2dBaUFGYWlnQ0FDSUROZ0lBSUFJZ0JHb2dBellDQUNBQklBSkJCSElpQTJvZ0F5QUZhaWdDQUNJS05nSUFJQU1nQkdvZ0NqWUNBQ0FCSUFKQkNISWlBMm9nQXlBRmFpZ0NBQ0lLTmdJQUlBTWdCR29nQ2pZQ0FDQUJJQUpCREhJaUFtb2dBaUFGYWlnQ0FDSUROZ0lBSUFJZ0JHb2dBellDQUNBQVFRUnFJUUFnQ1VFRWF5SUpEUUFMQ3lBSVJRMEFBMEFnQVNBQVFRSjBJZ0pxSUFJZ0JXb29BZ0FpQ1RZQ0FDQUNJQVJxSUFrMkFnQWdBRUVCYWlFQUlBaEJBV3NpQ0EwQUN3c0NRQ0FHUVFGSURRQWdCaUFRYkNFQ0lBWWdER3doQ1NBR1FRRjBJZ2hCQVNBSVFRRktHeUlEUVFGeElRcEJBQ0VBSUFoQkFrNEVRQ0FEUWY3Ly8vOEhjU0VJQTBBZ0FTQUFJQUpxUVFKMElnTnFJQVVnQUNBSmFrRUNkQ0lPYWlnQ0FEWUNBQ0FCSUE1cUlBTWdCV29vQWdBMkFnQWdBU0FBUVFGeUlnTWdBbXBCQW5RaURtb2dCU0FESUFscVFRSjBJZ05xS0FJQU5nSUFJQUVnQTJvZ0JTQU9haWdDQURZQ0FDQUFRUUpxSVFBZ0NFRUNheUlJRFFBTEN5QUtCRUFnQVNBQUlBSnFRUUowSWdocUlBVWdBQ0FKYWtFQ2RDSUFhaWdDQURZQ0FDQUFJQUZxSUFVZ0NHb29BZ0EyQWdBTElBWkJBM0VoQlVFQUlRRWdCa0VCYTBFRFR3UkFJQVpCZkhFaEFBTkFJQVFnQVNBR2EwRUNkR29nQkNnQ0FEWUNBQ0FFSUFGQkFYSWdCbXRCQW5ScUlBUW9BZ0EyQWdBZ0JDQUJRUUp5SUFaclFRSjBhaUFFS0FJQU5nSUFJQVFnQVVFRGNpQUdhMEVDZEdvZ0JDZ0NBRFlDQUNBQlFRUnFJUUVnQUVFRWF5SUFEUUFMQ3lBRlJRMEFBMEFnQkNBQklBWnJRUUowYWlBRUtBSUFOZ0lBSUFGQkFXb2hBU0FGUVFGcklnVU5BQXNMSUF0QjJBQnFJUXNnRFVFQmFpSU5JQTlIRFFBTEN5QUhRUUEyQWt3Z0IwSUFOd0pFSUFkQkFEWUNPQThMSUFkQm1nRTJBZ1FnQnlBSEtBSTBOZ0l3RHdzZ0IwR2JBVFlDQkE4TElBQW9BZ0FpQVVFRE5nSVVJQUFnQVNnQ0FCRUJBQXVGQXdFRGZ3SkFJQUFDZnlBQUtBSzhBeUlCS0FJSUJFQWdBVUVBTmdJSUlBQkJBQ0FBS0FMa0F5Z0NBQkVDQUNBQVFRSWdBQ2dDeUFNb0FnQVJBZ0JCQWd3QkN3SkFJQUFvQWxSRkRRQWdBQ2dDaUFFTkFBSkFJQUFvQWx4RkRRQWdBQ2dDYkVVTkFDQUFJQUVvQWhnMkF1UURJQUZCQVRZQ0NBd0JDeUFBS0FKa0JFQWdBQ0FCS0FJVU5nTGtBd3dCQ3lBQUtBSUFJZ0pCTHpZQ0ZDQUFJQUlvQWdBUkFRQUxJQUFnQUNnQzJBTW9BZ0FSQVFBZ0FDQUFLQUxFQXlnQ0NCRUJBQ0FBS0FKRURRRWdBU2dDRUVVRVFDQUFJQUFvQXVBREtBSUFFUUVBQ3lBQUlBQW9BdHdES0FJQUVRRUFJQUFvQWxRRVFDQUFJQUVvQWdnZ0FDZ0M1QU1vQWdBUkFnQUxJQUJCQTBFQUlBRW9BZ2diSUFBb0FzZ0RLQUlBRVFJQVFRQUxJQUFvQXNBREtBSUFFUUlBQ3dKQUlBQW9BZ2dpQWtVTkFDQUNJQUVvQWd3aUF6WUNEQ0FDSUFOQkFrRUJJQUVvQWdnYmFpSUJOZ0lRSUFBb0FrQkZEUUFnQUNnQ3pBTW9BaFFOQUNBQ1FRSkJBU0FBS0FKc0d5QUJhallDRUFzTEx3RUJmeUFBS0FLOEF5RUJJQUFvQWxRRVFDQUFJQUFvQXVRREtBSUlFUUVBQ3lBQklBRW9BZ3hCQVdvMkFnd0xqQXNCTFg4akFFR0FBV3NpQnlRQUlBQW9Bc3dDUVFGcklTa2dBQ2dDeEFNaEZBSi9Ba0FEUUNBQUtBS1FBU0lESUFBb0FwZ0JJZ1ZLRFFFZ0FDZ0N6QU1pQ3lnQ0ZBMEJJQU1nQlVZRVFDQUFLQUtVQVNBQUtBS2NBU0FBS0FLY0EwVnFTdzBDQ3lBQUlBc29BZ0FSQUFBTkFBdEJBQXdCQ3lBQUtBSWtRUUZPQkVBZ0FDZ0MyQUVoQ0FOQUFrQWdDQ2dDTkVVTkFBSi9JQUFvQXB3QkloVWdLVThpS2tVRVFDQUlLQUlNSWdOQkFYUWhEQ0FEREFFTElBZ29BaUFnQ0NnQ0RDSURjQ0lGSUFNZ0JSc2lEQXNoRmdKL0lCVUVRQ0FBSUJRZ0QwRUNkR29vQWtnZ0F5QVZRUUZyYkNBRElBeHFRUUFnQUNnQ0JDZ0NJQkVLQUNBSUtBSU1RUUowYWd3QkN5QUFJQlFnRDBFQ2RHb29Ba2hCQUNBTVFRQWdBQ2dDQkNnQ0lCRUtBQXNoS3lBV1FRRklEUUFnRmtFQmF5RXNJQlFvQW5BZ0QwRVliR29oRUNBSUtBSlFJZ012QVFRaUJVRUlkQ0VjSUFWQkIzUWhIU0FETHdFU0lnVkJDSFFoSGlBRlFRZDBJUjhnQXk4QkFDSUZRUVZzSVMwZ0F5OEJJQ0lMUVFoMElTQWdDMEVIZENFaElBVkJDV3doSWlBREx3RVFJZ3RCQ0hRaEl5QUxRUWQwSVNRZ0F5OEJBaUlEUVFoMElTVWdBMEVIZENFbUlBVkJKR3doSnlBUFFRSjBJZ01nQUNnQzJBTnFLQUlFSVM0Z0FTQURhaWdDQUNFWFFRQWhFUU5BSUNzZ0VVRUNkR29pQXlnQ0FDSU1JUTRnRVNBVmNnUkFJQU5CQkdzb0FnQWhEZ3NnRENFU0lBZ29BaHhCQVdzaEtFRUFJUmdnS2lBUklDeEdjVVVFUUNBREtBSUVJUklMSUJJdUFRQWlHU0VESUF3dUFRQWlFeUVGSUE0dUFRQWlHaUVMUVFBaEd3TkFJQXNoQmlBYUlRc2dCU0VKSUJNaEJTQURJUTBnR1NFRElBY2dERUdBQVJCQUdpQVlJQ2hKQkVBZ0VpNEJnQUVoR1NBT0xnR0FBU0VhSUF3dUFZQUJJUk1MQWtBZ0VDZ0NCQ0lFUlEwQUlBY3ZBUUlOQUNBSEFuOGdKeUFKSUJOcmJDSUNRUUJPQkVBZ0FpQW1haUFsYlNJQ0lBSkJBU0FFZENJS1FRRnJJQUlnQ2tnYklBUkJBVWdiREFFTFFRQWdKaUFDYXlBbGJTSUNJQUpCQVNBRWRDSUtRUUZySUFJZ0NrZ2JJQVJCQVVnYmF3czdBUUlMQWtBZ0VDZ0NDQ0lFUlEwQUlBY3ZBUkFOQUNBSEFuOGdKeUFMSUFOcmJDSUNRUUJPQkVBZ0FpQWthaUFqYlNJQ0lBSkJBU0FFZENJS1FRRnJJQUlnQ2tnYklBUkJBVWdiREFFTFFRQWdKQ0FDYXlBamJTSUNJQUpCQVNBRWRDSUtRUUZySUFJZ0NrZ2JJQVJCQVVnYmF3czdBUkFMQWtBZ0VDZ0NEQ0lFUlEwQUlBY3ZBU0FOQUNBSEFuOGdJaUFMSUFWQkFYUnJJQU5xYkNJQ1FRQk9CRUFnQWlBaGFpQWdiU0lDSUFKQkFTQUVkQ0lLUVFGcklBSWdDa2diSUFSQkFVZ2JEQUVMUVFBZ0lTQUNheUFnYlNJQ0lBSkJBU0FFZENJS1FRRnJJQUlnQ2tnYklBUkJBVWdiYXdzN0FTQUxBa0FnRUNnQ0VDSUVSUTBBSUFjdkFSSU5BQ0FIQW44Z0xTQUdJQTBnR21wcklCbHFiQ0lHUVFCT0JFQWdCaUFmYWlBZWJTSUdJQVpCQVNBRWRDSU5RUUZySUFZZ0RVZ2JJQVJCQVVnYkRBRUxRUUFnSHlBR2F5QWViU0lHSUFaQkFTQUVkQ0lOUVFGcklBWWdEVWdiSUFSQkFVZ2Jhd3M3QVJJTEFrQWdFQ2dDRkNJR1JRMEFJQWN2QVFRTkFDQUhBbjhnSWlBSklBVkJBWFJySUJOcWJDSUpRUUJPQkVBZ0NTQWRhaUFjYlNJSklBbEJBU0FHZENJTlFRRnJJQWtnRFVnYklBWkJBVWdiREFFTFFRQWdIU0FKYXlBY2JTSUpJQWxCQVNBR2RDSU5RUUZySUFrZ0RVZ2JJQVpCQVVnYmF3czdBUVFMSUFBZ0NDQUhJQmNnR3lBdUVRVUFJQkpCZ0FGcUlSSWdEa0dBQVdvaERpQU1RWUFCYWlFTUlBZ29BaVFnRzJvaEd5QVlRUUZxSWhnZ0tFME5BQXNnRnlBSUtBSW9RUUowYWlFWElCRkJBV29pRVNBV1J3MEFDd3NnQ0VIWUFHb2hDQ0FQUVFGcUlnOGdBQ2dDSkVnTkFBc0xJQUFnQUNnQ25BRkJBV29pQVRZQ25BRkJBMEVFSUFFZ0FDZ0N6QUpKR3dzaEFDQUhRWUFCYWlRQUlBQUwrd1VCRkg4Z0FDZ0N6QUloQkFKQUlBQW9Bc1FESWdVb0FoZ2lDU0FGS0FJY0lnSklCRUFnQlVFZ2FpRUxJQVJCQVdzaEVpQUFLQUxvQWtFQmF5RU1JQVVvQWhRaEJnTkFJQVlnREUwRVFBTkFJQUFvQXJRREJFQWdDeWdDQUVFQUlBQW9BdkFDUVFkMEVEc2FDeUFBSUFzZ0FDZ0MxQU1vQWdRUkF3QkZEUVJCQUNFSFFRQWhEU0FBS0FMVUFpSUNRUUJLQkVBRFFBSkFJQUFnRFVFQ2RHb29BdGdDSWdNb0FqUkZCRUFnQXlnQ1FDQUhhaUVIREFFTElBTW9BandpQkVFQlNBMEFJQU1vQWtRZ0Jtd2hFeUFES0FJRVFRSjBJZ0lnQUNnQzJBTnFLQUlFSVE0Z0FTQUNhaWdDQUNBREtBSW9JZ0lnQ1d4QkFuUnFJUW9nQTBFNFFjZ0FJQVlnREVrYmFpZ0NBQ0lQUVFGSUlSRWdEMEVCSUE5QkFVb2JJZ2hCL3YvLy93ZHhJUlFnQ0VFQmNTRVZRUUFoRUFOQUFrQUNRQ0FTSUFBb0FwUUJUUVJBSUFNb0Frd2dDU0FRYWt3Z0VYSkZEUUVNQWdzZ0VRMEJDMEVBSVFRZ0V5RUNJQlFoQ0NBUFFRSk9CRUFEUUNBQUlBTWdDeUFFSUFkcVFRSjBhaWdDQUNBS0lBSWdEaEVGQUNBQUlBTWdDeUFFUVFGeUlBZHFRUUowYWlnQ0FDQUtJQU1vQWlRZ0Ftb2lBaUFPRVFVQUlBUkJBbW9oQkNBREtBSWtJQUpxSVFJZ0NFRUNheUlJRFFBTEN5QVZCRUFnQUNBRElBVWdCQ0FIYWtFQ2RHb29BaUFnQ2lBQ0lBNFJCUUFMSUFNb0Fqd2hCQ0FES0FJb0lRSUxJQW9nQWtFQ2RHb2hDaUFES0FJNElBZHFJUWNnRUVFQmFpSVFJQVJJRFFBTElBQW9BdFFDSVFJTElBMUJBV29pRFNBQ1NBMEFDd3NnQmtFQmFpSUdJQXhORFFBTElBVW9BaHdoQWd0QkFDRUdJQVZCQURZQ0ZDQUpRUUZxSWdrZ0FrZ05BQXNnQUNnQ3pBSWhCQXRCQVNFQ0lBQWdBQ2dDbkFGQkFXbzJBcHdCSUFBZ0FDZ0NsQUZCQVdvaUFUWUNsQUVnQVNBRVNRUkFJQUFvQXNRRElRZ2dBQ2dDMUFKQkFVd0VRQ0FBS0FMWUFrRU1RY3dBSUFFZ0JFRUJhMGtiYWlnQ0FDRUNDeUFJUWdBM0FoUWdDQ0FDTmdJY1FRTVBDeUFBSUFBb0Fzd0RLQUlNRVFFQVFRUVBDeUFGSUFZMkFoUWdCU0FKTmdJWVFRQUxxZ1VCRTM4akFFRVFheUlKSkFBZ0FDZ0N4QU1oQkNBQUtBTFVBa0VCVGdSQUEwQWdDU0FCUVFKMElnTnFJQUFnQkNBQUlBTnFLQUxZQWlJREtBSUVRUUowYWlnQ1NDQURLQUlNSWdNZ0FDZ0NsQUZzSUFOQkFTQUFLQUlFS0FJZ0VRb0FOZ0lBSUFGQkFXb2lBU0FBS0FMVUFrZ05BQXNMQW44Z0JDZ0NHQ0lISUFRb0Fod2lBa2dFUUNBRVFTQnFJUTRnQUNnQzZBSWhBU0FFS0FJVUlRWURRQ0FCSUFaTEJFQURRRUVBSVFwQkFDRUNJQUFvQXRRQ0lnOUJBVTRFUUFOQUlBQWdDa0VDZENJRmFpZ0MyQUlpQXlnQ1BDSVFRUUZPQkVBZ0F5Z0NPQ0lJSUFac0lSRWdDRUY4Y1NFTElBaEJBM0VoQXlBSVFRRnJJUklnQlNBSmFpZ0NBQ0VUUVFBaERBTkFBa0FnQ0VFQlNBMEFJQk1nQnlBTWFrRUNkR29vQWdBZ0VVRUhkR29oQVNBTElRVWdFa0VEVHdSQUEwQWdCQ0FDUVFKMGFpSU5JQUZCZ0FGcU5nSWtJQTBnQVRZQ0lDQU5JQUZCZ0FKcU5nSW9JQTBnQVVHQUEybzJBaXdnQWtFRWFpRUNJQUZCZ0FScUlRRWdCVUVFYXlJRkRRQUxDeUFESVFVZ0EwVU5BQU5BSUFRZ0FrRUNkR29nQVRZQ0lDQUNRUUZxSVFJZ0FVR0FBV29oQVNBRlFRRnJJZ1VOQUFzTElBeEJBV29pRENBUVJ3MEFDd3NnQ2tFQmFpSUtJQTlIRFFBTEN5QUFJQTRnQUNnQzFBTW9BZ1FSQXdCRkJFQWdCQ0FHTmdJVUlBUWdCellDR0VFQURBVUxJQVpCQVdvaUJpQUFLQUxvQWlJQlNRMEFDeUFFS0FJY0lRSUxRUUFoQmlBRVFRQTJBaFFnQjBFQmFpSUhJQUpJRFFBTEMwRUJJUUlnQUNBQUtBS1VBVUVCYWlJRE5nS1VBU0FBS0FMTUFpSUxJQU5MQkVBZ0FDZ0N4QU1oQlNBQUtBTFVBa0VCVEFSQUlBQW9BdGdDUVF4QnpBQWdBeUFMUVFGclNSdHFLQUlBSVFJTElBVkNBRGNDRkNBRklBSTJBaHhCQXd3QkN5QUFJQUFvQXN3REtBSU1FUUVBUVFRTElRRWdDVUVRYWlRQUlBRUxyZ01CRFg4Z0FDZ0N6QUpCQVdzaEN5QUFLQUxFQXlFTUFrQURRQ0FBS0FLUUFTSURJQUFvQXBnQklnUk9CRUFnQXlBRVJ3MENJQUFvQXBRQklBQW9BcHdCU3cwQ0N5QUFJQUFvQXN3REtBSUFFUUFBRFFBTFFRQVBDeUFBS0FJa1FRRk9CRUFnQUNnQzJBRWhBZ05BQWtBZ0FpZ0NORVVOQUNBQUlBd2dCVUVDZENJRGFpZ0NTQ0FDS0FJTUlnUWdBQ2dDbkFGc0lBUkJBQ0FBS0FJRUtBSWdFUW9BSVEwQ2Z5QUxJQUFvQXB3QlN3UkFJQUlvQWd3TUFRc2dBaWdDSUNBQ0tBSU1JZ1J3SWdZZ0JDQUdHd3NpQmtFQlNBMEFJQUFvQXRnRElBTnFLQUlFSVE0Z0FTQURhaWdDQUNFSElBSW9BaHdoQTBFQUlRZ0RRRUVBSVFRQ1FDQURSUTBBSUEwZ0NFRUNkR29vQWdBaEEwRUFJUWxCQVNFS0EwQWdBQ0FDSUFNZ0J5QUpJQTRSQlFBZ0NpQUNLQUljSWdSUERRRWdBMEdBQVdvaEF5QUNLQUlrSUFscUlRa2dDa0VCYWlFS0RBQUxBQXNnQnlBQ0tBSW9RUUowYWlFSElBUWhBeUFJUVFGcUlnZ2dCa2NOQUFzTElBSkIyQUJxSVFJZ0JVRUJhaUlGSUFBb0FpUklEUUFMQ3lBQUlBQW9BcHdCUVFGcUlnRTJBcHdCUVFOQkJDQUJJQUFvQXN3Q1NSc0xUUUVDZnlBQVFRQTJBcFFCUVFFaEFTQUFLQUxFQXlFQ0lBQW9BdFFDUVFGTUJFQWdBQ2dDMkFKQnpBQkJEQ0FBS0FMTUFrRUJSaHRxS0FJQUlRRUxJQUpDQURjQ0ZDQUNJQUUyQWh3TDNBSUJDWDhnQUNnQ3hBTWlBU2dDRUFSQUlBRUNmd0pBSUFBb0FsQkZEUUFnQUNnQzRBRkZEUUFnQUNnQ29BRkZEUUFnQVNnQ2NDSUNSUVJBSUFFZ0FFRUJJQUFvQWlSQkdHd2dBQ2dDQkNnQ0FCRUVBQ0lDTmdKd0N5QUFLQUlrUVFGSURRQWdBQ2dDMkFFaEF3TkFJQU1vQWxBaUFVVU5BU0FCTHdFQVJRMEJJQUV2QVFKRkRRRWdBUzhCRUVVTkFTQUJMd0VnUlEwQklBRXZBUkpGRFFFZ0FTOEJCRVVOQVNBQUtBS2dBU0FGUVFoMGFpSUJLQUlBUVFCSURRRWdBaUFCS0FJRU5nSUVJQUVvQWdRaEJpQUNJQUVvQWdnMkFnZ2dBU2dDQ0NFSElBSWdBU2dDRERZQ0RDQUJLQUlNSVFnZ0FpQUJLQUlRTmdJUUlBRW9BaEFoQ1NBQ0lBRW9BaFEyQWhSQkFTQUVJQWtnQVNnQ0ZISWdDQ0FHSUFkeWNuSWJJUVFnQTBIWUFHb2hBeUFDUVJocUlRSWdCVUVCYWlJRklBQW9BaVJJRFFBTFFaVUJJQVFOQVJvTFFaRUJDellDREFzZ0FFRUFOZ0tjQVF2QkFRRUhmeUFBS0FMQUFrRUJUZ1JBSUFBb0F0d0RJQUVvQWdScUlnRXRBSllCSWdoQkFXc2hDU0FCTFFDTUFTRUZJQU1vQWdBaEJnTkFJQUFvQW5BaUFVRUJUZ1JBSUFFZ0JpQUVRUUowYWlnQ0FDSUJhaUVLSUFJZ0IwRUNkR29vQWdBaEF3TkFJQVVFUUNBQklBTXRBQUFnQlJBN0lBVnFJUUVMSUFOQkFXb2hBeUFCSUFwSkRRQUxDeUFJUVFKUEJFQWdCaUFFSUFZZ0JFRUJhaUFKSUFBb0FuQVFod01MSUFkQkFXb2hCeUFFSUFocUlnUWdBQ2dDd0FKSURRQUxDd3VlQVFFRmZ5QUFLQUxBQWtFQlRnUkFJQU1vQWdBaEJRTkFJQVVnQkNBRklBUkJBWEpCQVNBQUtBSndJZ0ZCQVU0RWZ5QUZJQVJCQW5ScUtBSUFJZ01nQVdvaEJ5QUNJQVpCQW5ScUtBSUFJUUVEUUNBRElBRXRBQUFpQ0RvQUFTQURJQWc2QUFBZ0FVRUJhaUVCSUFOQkFtb2lBeUFIU1EwQUN5QUFLQUp3QlNBQkN4Q0hBeUFHUVFGcUlRWWdCRUVDYWlJRUlBQW9Bc0FDU0EwQUN3c0xoQUVCQkg4Z0FDZ0N3QUlpQVVFQlRnUkFJQU1vQWdBaEJRTkFJQUFvQW5BaUEwRUJUZ1JBSUFNZ0JTQUVRUUowSWdOcUtBSUFJZ0ZxSVFZZ0FpQURhaWdDQUNFREEwQWdBU0FETFFBQUlnYzZBQUVnQVNBSE9nQUFJQU5CQVdvaEF5QUJRUUpxSWdFZ0Jra05BQXNnQUNnQ3dBSWhBUXNnQkVFQmFpSUVJQUZJRFFBTEN3c0pBQ0FESUFJMkFnQUxDUUFnQTBFQU5nSUFDeDhCQVg4Z0FDZ0MzQU1pQVNBQUtBTEFBallDWENBQklBQW9BblEyQW1BTG5BSUJBMzhnQUNnQzNBTWlBeWdDWENJSElBQW9Bc0FDSWdoT0JFQWdBQ2dDSkVFQlRnUkFJQUFvQXRnQklRaEJBQ0VIQTBBZ0FDQUlJQUVnQjBFQ2RDSUphaWdDQUNBRElBbHFJZ2tvQW1RZ0FpZ0NBR3hCQW5ScUlBbEJER29nQ1NnQ05CRUhBQ0FJUWRnQWFpRUlJQWRCQVdvaUJ5QUFLQUlrU0EwQUN5QUFLQUxBQWlFSUN5QURRUUEyQWx4QkFDRUhDeUFBSUFOQkRHb2dCeUFFSUFVb0FnQWlBVUVDZEdvZ0JpQUJheUlCSUFNb0FtQWlCQ0FJSUFkcklnWWdCQ0FHU1JzaUJDQUJJQVJKR3lJQklBQW9BdUFES0FJRUVRVUFJQVVnQlNnQ0FDQUJhallDQUNBRElBTW9BbUFnQVdzMkFtQWdBeUFES0FKY0lBRnFJZ0UyQWx3Z0FDZ0N3QUlnQVV3RVFDQUNJQUlvQWdCQkFXbzJBZ0FMQzU4Q0FRbC9JQVJCQVU0RVFDQUFLQUp3SWdsQmZIRWhDaUFKUVFOeElRc2dBQ2dDSkNJR1FRRklJUXdnQ1VFQmEwRURTU0VOQTBCQkFDRUlJQXhGQkVBRFFBSkFJQWxGRFFBZ0FTQUlRUUowYWlnQ0FDQUNRUUowYWlnQ0FDRUFJQU1vQWdBZ0NHb2hCU0FLSVFjZ0RVVUVRQU5BSUFVZ0FDMEFBRG9BQUNBRklBWnFJZ1VnQUMwQUFUb0FBQ0FGSUFacUlnVWdBQzBBQWpvQUFDQUZJQVpxSWdVZ0FDMEFBem9BQUNBQVFRUnFJUUFnQlNBR2FpRUZJQWRCQkdzaUJ3MEFDd3NnQ3lJSFJRMEFBMEFnQlNBQUxRQUFPZ0FBSUFVZ0Jtb2hCU0FBUVFGcUlRQWdCMEVCYXlJSERRQUxDeUFJUVFGcUlnZ2dCa2NOQUFzTElBTkJCR29oQXlBQ1FRRnFJUUlnQkVFQlNpRUFJQVJCQVdzaEJDQUFEUUFMQ3d2QUFnRU9meUFFUVFCS0JFQWdBQ2dDMEFJaEJTQUFLQUp3SVFjZ0FDZ0M0QU1pQUNnQ0ZDRUtJQUFvQWhBaEN5QUFLQUlNSVF3Z0FDZ0NDQ0VOQTBBZ0JDRUlJQWNFUUNBQ1FRSjBJZ0FnQVNnQ0RHb29BZ0FoRGlBQktBSUlJQUJxS0FJQUlROGdBU2dDQkNBQWFpZ0NBQ0VRSUFFb0FnQWdBR29vQWdBaEVTQURLQUlBSVFSQkFDRUFBMEFnQUNBUWFpMEFBQ0VHSUFRZ0JTQUFJQkZxTFFBQVFmOEJjeUlKSUEwZ0FDQVBhaTBBQUVFQ2RDSVNhaWdDQUd0cUxRQUFPZ0FBSUFRZ0JTQUpJQXNnRW1vb0FnQWdDaUFHUVFKMElnWnFLQUlBYWtFUWRXdHFMUUFBT2dBQklBUWdCU0FKSUFZZ0RHb29BZ0JyYWkwQUFEb0FBaUFFSUFBZ0Rtb3RBQUE2QUFNZ0JFRUVhaUVFSUFCQkFXb2lBQ0FIUncwQUN3c2dBMEVFYWlFRElBSkJBV29oQWlBSVFRRnJJUVFnQ0VFQ1RnMEFDd3NMN2dJQkMzOGdCRUVCVGdSQUlBQW9BbkFpQ0VGK2NTRU9JQWhCQVhFaER3TkFJQVFoRFFKQUlBaEZEUUFnQWtFQ2RDSUFJQUVvQWdocUtBSUFJUVlnQVNnQ0JDQUFhaWdDQUNFSklBRW9BZ0FnQUdvb0FnQWhDaUFES0FJQUlRUkJBQ0VBSUE0aEJ5QUlRUUZIQkVBRFFDQUFJQXBxTFFBQUlRc2dBQ0FHYWkwQUFDRU1JQVFnQUNBSmFpMEFBQ0lGT2dBQklBUWdCU0FNYWtHQUFYTTZBQUlnQkNBRklBdHFRWUFCY3pvQUFDQUtJQUJCQVhJaUJXb3RBQUFoQ3lBRklBWnFMUUFBSVF3Z0JDQUZJQWxxTFFBQUlnVTZBQVFnQkNBRklBeHFRWUFCY3pvQUJTQUVJQVVnQzJwQmdBRnpPZ0FESUFCQkFtb2hBQ0FFUVFacUlRUWdCMEVDYXlJSERRQUxDeUFQUlEwQUlBQWdDbW90QUFBaEJ5QUFJQVpxTFFBQUlRWWdCQ0FBSUFscUxRQUFJZ0E2QUFFZ0JDQUFJQVpxUVlBQmN6b0FBaUFFSUFBZ0IycEJnQUZ6T2dBQUN5QURRUVJxSVFNZ0FrRUJhaUVDSUExQkFXc2hCQ0FOUVFKT0RRQUxDd3VtQWdFSmZ5QUVRUUZPQkVBZ0FDZ0NjQ0lGUVg1eElRd2dCVUVCY1NFTkEwQWdCQ0VKQWtBZ0JVVU5BQ0FDUVFKMElnQWdBU2dDQ0dvb0FnQWhCaUFCS0FJRUlBQnFLQUlBSVFjZ0FTZ0NBQ0FBYWlnQ0FDRUlJQU1vQWdBaEJFRUFJUUFnRENFS0lBVkJBVWNFUUFOQUlBUWdBQ0FJYWkwQUFEb0FBQ0FFSUFBZ0Iyb3RBQUE2QUFFZ0JDQUFJQVpxTFFBQU9nQUNJQVFnQ0NBQVFRRnlJZ3RxTFFBQU9nQURJQVFnQnlBTGFpMEFBRG9BQkNBRUlBWWdDMm90QUFBNkFBVWdBRUVDYWlFQUlBUkJCbW9oQkNBS1FRSnJJZ29OQUFzTElBMUZEUUFnQkNBQUlBaHFMUUFBT2dBQUlBUWdBQ0FIYWkwQUFEb0FBU0FFSUFBZ0Jtb3RBQUE2QUFJTElBTkJCR29oQXlBQ1FRRnFJUUlnQ1VFQmF5RUVJQWxCQWs0TkFBc0xDNklDQVExL0lBUkJBRW9FUUNBQUtBTFFBaUVGSUFBb0FuQWhCeUFBS0FMZ0F5SUFLQUlVSVFvZ0FDZ0NFQ0VMSUFBb0Fnd2hEQ0FBS0FJSUlRMERRQ0FFSVFnZ0J3UkFJQUpCQW5RaUFDQUJLQUlJYWlnQ0FDRU9JQUVvQWdRZ0FHb29BZ0FoRHlBQktBSUFJQUJxS0FJQUlSQWdBeWdDQUNFRVFRQWhBQU5BSUFBZ0Qyb3RBQUFoQmlBRUlBVWdBQ0FRYWkwQUFDSUpJQTBnQUNBT2FpMEFBRUVDZENJUmFpZ0NBR3BxTFFBQU9nQUFJQVFnQlNBSklBc2dFV29vQWdBZ0NpQUdRUUowSWdacUtBSUFha0VRZFdwcUxRQUFPZ0FCSUFRZ0JTQUpJQVlnREdvb0FnQnFhaTBBQURvQUFpQUVRUU5xSVFRZ0FFRUJhaUlBSUFkSERRQUxDeUFEUVFScUlRTWdBa0VCYWlFQ0lBaEJBV3NoQkNBSVFRSk9EUUFMQ3d2T0FnRUlmeUFFUVFGT0JFQWdBQ2dDY0NJSVFYeHhJUW9nQ0VFRGNTRUxJQWhCQVd0QkEwa2hEQU5BSUFRaENRSkFJQWhGRFFBZ0FTZ0NBQ0FDUVFKMGFpZ0NBQ0VHSUFNb0FnQWhCRUVBSVFBZ0NpRUhJQXhGQkVBRFFDQUVJQUFnQm1vdEFBQWlCVG9BQVNBRUlBVTZBQUlnQkNBRk9nQUFJQVFnQmlBQVFRRnlhaTBBQUNJRk9nQUVJQVFnQlRvQUJTQUVJQVU2QUFNZ0JDQUdJQUJCQW5KcUxRQUFJZ1U2QUFjZ0JDQUZPZ0FJSUFRZ0JUb0FCaUFFSUFZZ0FFRURjbW90QUFBaUJUb0FDaUFFSUFVNkFBc2dCQ0FGT2dBSklBQkJCR29oQUNBRVFReHFJUVFnQjBFRWF5SUhEUUFMQ3lBTElnZEZEUUFEUUNBRUlBQWdCbW90QUFBaUJUb0FBU0FFSUFVNkFBSWdCQ0FGT2dBQUlBQkJBV29oQUNBRVFRTnFJUVFnQjBFQmF5SUhEUUFMQ3lBRFFRUnFJUU1nQWtFQmFpRUNJQWxCQVdzaEJDQUpRUUpPRFFBTEN3dnFBUUVIZnlBRVFRQktCRUFnQUNnQ2NDRUhJQUFvQXVBREtBSVlJUVVEUUNBRUlRQWdCd1JBSUFKQkFuUWlCQ0FCS0FJSWFpZ0NBQ0VJSUFFb0FnUWdCR29vQWdBaENTQUJLQUlBSUFScUtBSUFJUW9nQXlnQ0FDRUxRUUFoQkFOQUlBUWdDMm9nQlNBRUlBbHFMUUFBSWdaQkFuUkJnQWh5YWlnQ0FDQUZJQVpCZ0FGcUlnWWdCQ0FLYWkwQUFHcEIvd0Z4UVFKMGFpZ0NBR29nQlNBR0lBUWdDR290QUFCcVFmOEJjVUVDZEVHQUVISnFLQUlBYWtFUWRqb0FBQ0FFUVFGcUlnUWdCMGNOQUFzTElBTkJCR29oQXlBQ1FRRnFJUUlnQUVFQmF5RUVJQUJCQWs0TkFBc0xDOVFCQVFaL0lBUkJBRW9FUUNBQUtBSndJUVlnQUNnQzRBTW9BaGdoQlFOQUlBUWhBQ0FHQkVBZ0FrRUNkQ0lFSUFFb0FnaHFLQUlBSVFjZ0FTZ0NCQ0FFYWlnQ0FDRUlJQUVvQWdBZ0JHb29BZ0FoQ1NBREtBSUFJUXBCQUNFRUEwQWdCQ0FLYWlBRklBUWdCMm90QUFCQkFuUkJnQkJ5YWlnQ0FDQUZJQVFnQ0dvdEFBQkJBblJCZ0FoeWFpZ0NBQ0FGSUFRZ0NXb3RBQUJCQW5ScUtBSUFhbXBCRUhZNkFBQWdCRUVCYWlJRUlBWkhEUUFMQ3lBRFFRUnFJUU1nQWtFQmFpRUNJQUJCQVdzaEJDQUFRUUpPRFFBTEN3c1hBQ0FCS0FJQUlBSWdBMEVBSUFRZ0FDZ0NjQkNIQXd1bEFnRUlmMEh3ayt2Y0F5QUNiaUVFSUFBb0FnUWhCaUFDUWZHVDY5d0RUd1JBSUFBb0FnQWlCVUhJQURZQ0ZDQUFJQVVvQWdBUkFRQUxJQVlnQkNBRElBTWdCRW9iSWdRMkFsQWdBQ0FCSUFOQkFuUVFoZ0loQ1NBREJFQkJBQ0VGQTBBZ0FDQUJJQVFnQXlBRmF5SUdJQVFnQmtrYklnUWdBbXdRNEFNaEJ3SkFJQVJGRFFBZ0JDRUdJQVJCQTNFaUNBUkFBMEFnQ1NBRlFRSjBhaUFITmdJQUlBWkJBV3NoQmlBQ0lBZHFJUWNnQlVFQmFpRUZJQWhCQVdzaUNBMEFDd3NnQkVFQmEwRURTUTBBQTBBZ0NTQUZRUUowYWlJSUlBYzJBZ0FnQ0NBQ0lBZHFJZ2NnQW1vaUNpQUNhaUlMTmdJTUlBZ2dDallDQ0NBSUlBYzJBZ1FnQlVFRWFpRUZJQUlnQzJvaEJ5QUdRUVJySWdZTkFBc0xJQU1nQlVzTkFBc0xJQWtMc1FJQkNIOUI4SlByM0FNZ0FrRUhkQ0lLYmlFRUlBQW9BZ1FoQmlBS1FmR1Q2OXdEVHdSQUlBQW9BZ0FpQlVISUFEWUNGQ0FBSUFVb0FnQVJBUUFMSUFZZ0JDQURJQU1nQkVvYklnUTJBbEFnQUNBQklBTkJBblFRaGdJaENTQURCRUJCQUNFRklBSkJCM1FoQ0FOQUlBQWdBU0FLSUFRZ0F5QUZheUlDSUFJZ0JFc2JJZ1JzRU9BRElRSUNRQ0FFUlEwQUlBUWhCaUFFUVFOeElnY0VRQU5BSUFrZ0JVRUNkR29nQWpZQ0FDQUdRUUZySVFZZ0JVRUJhaUVGSUFJZ0NHb2hBaUFIUVFGcklnY05BQXNMSUFSQkFXdEJBMGtOQUFOQUlBa2dCVUVDZEdvaUJ5QUNOZ0lBSUFjZ0FpQUlhaUlDSUFocUlnczJBZ2dnQnlBQ05nSUVJQWNnQ0NBTGFpSUNOZ0lNSUFJZ0NHb2hBaUFGUVFScUlRVWdCa0VFYXlJR0RRQUxDeUFESUFWTERRQUxDeUFKQzNvQkFuOGdBQ2dDQkNFR0lBRkJBVWNFUUNBQUtBSUFJZ2NnQVRZQ0dDQUhRUTgyQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFBSUFGQmdBRVFoZ0lpQUVFQU5nSW9JQUFnQWpZQ0lDQUFJQVUyQWd3Z0FDQUROZ0lJSUFBZ0JEWUNCQ0FBUVFBMkFnQWdBQ0FHS0FKRU5nSXNJQVlnQURZQ1JDQUFDM29CQW44Z0FDZ0NCQ0VHSUFGQkFVY0VRQ0FBS0FJQUlnY2dBVFlDR0NBSFFRODJBaFFnQUNBQUtBSUFLQUlBRVFFQUN5QUFJQUZCZ0FFUWhnSWlBRUVBTmdJb0lBQWdBallDSUNBQUlBVTJBZ3dnQUNBRE5nSUlJQUFnQkRZQ0JDQUFRUUEyQWdBZ0FDQUdLQUpJTmdJc0lBWWdBRFlDU0NBQUM5RUtBUTEvSUFBb0FnUWlDeWdDUkNJREJFQURRQ0FES0FJQVJRUkFJQU1vQWdnaUJDQURLQUlFYkNBQmFpRUJJQVFnQXlnQ0RHd2dBbW9oQWdzZ0F5Z0NMQ0lERFFBTEN5QUxLQUpJSWdNRVFBTkFJQU1vQWdCRkJFQWdBeWdDQ0NJRUlBTW9BZ1JzUVFkMElBRnFJUUVnQXlnQ0RDQUViRUVIZENBQ2FpRUNDeUFES0FJc0lnTU5BQXNMQWtBZ0FrRUJTQTBBUVlDVTY5d0RJUXdDZnlBTEtBSk1HaUFCSUFFaUJFb0xCRUFnQkNBQ2JTSUJRUUVnQVVFQlNoc2hEQXNnQ3lnQ1JDSUVCRUFEUUNBRUtBSUFSUVJBQWtBZ0RDQUVLQUlFSWdWQkFXc2dCQ2dDRENJQmJrRUJhazRFUUNBRUlBVTJBaEFNQVFzZ0JDQUJJQXhzTmdJUUlBQWdCQ2dDQ0NBRmJCQ21CU0FFUVFFMkFpZ2dCQ2dDRUNFRkMwSHdrK3ZjQXlBRUtBSUlJZ2h1SVFFZ0FDZ0NCQ0VISUFoQjhaUHIzQU5QQkVBZ0FDZ0NBQ0lEUWNnQU5nSVVJQUFnQXlnQ0FCRUJBQXNnQnlBQklBVWdBU0FGU0JzaUJ6WUNVRUVBSVFNZ0FFRUJJQVZCQW5RUWhnSWhDaUFGQkVBRFFDQUFLQUlFSVFJZ0J5QUZJQU5ySWdFZ0FTQUhTeHNpQnlBSWJDSUJRZkdUNjl3RFR3UkFJQUFvQWdCQ3VJQ0FnREEzQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFCUVFnZ0FVRUhjU0lHYTBFQUlBWWJhaUlHUVJCcUlna1FPaUlCUlFSQUlBQW9BZ0JDdUlDQWdNQUFOd0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBaUFDS0FKTUlBbHFOZ0pNSUFKQlFHc2lBaWdDQUNFSklBRkJBRFlDQ0NBQklBWTJBZ1FnQVNBSk5nSUFJQUlnQVRZQ0FBSkFJQWRGRFFBZ0FVRVFhaUVDSUFjaUFVRURjU0lHQkVBRFFDQUtJQU5CQW5ScUlBSTJBZ0FnQVVFQmF5RUJJQUlnQ0dvaEFpQURRUUZxSVFNZ0JrRUJheUlHRFFBTEN5QUhRUUZyUVFOSkRRQURRQ0FLSUFOQkFuUnFJZ1lnQWpZQ0FDQUdJQUlnQ0dvaUFpQUlhaUlKSUFocUlnMDJBZ3dnQmlBSk5nSUlJQVlnQWpZQ0JDQURRUVJxSVFNZ0NDQU5haUVDSUFGQkJHc2lBUTBBQ3dzZ0F5QUZTUTBBQ3dzZ0JDQUtOZ0lBSUFzb0FsQWhBU0FFUVFBMkFpUWdCRUlBTndJWUlBUWdBVFlDRkFzZ0JDZ0NMQ0lFRFFBTEN5QUxLQUpJSWdWRkRRQURRQ0FGS0FJQVJRUkFBa0FnRENBRktBSUVJZ2RCQVdzZ0JTZ0NEQ0lCYmtFQmFrNEVRQ0FGSUFjMkFoQU1BUXNnQlNBQklBeHNOZ0lRSUFBZ0J5QUZLQUlJYkVFSGRCQ21CU0FGUVFFMkFpZ2dCU2dDRUNFSEMwSHdrK3ZjQXlBRktBSUlRUWQwSWdodUlRRWdBQ2dDQkNFRUlBaEI4WlByM0FOUEJFQWdBQ2dDQUNJRFFjZ0FOZ0lVSUFBZ0F5Z0NBQkVCQUFzZ0JDQUJJQWNnQVNBSFNCc2lCRFlDVUVFQUlRTWdBRUVCSUFkQkFuUVFoZ0loQ2lBSEJFQURRQ0FBS0FJRUlRSWdCQ0FISUFOcklnRWdBU0FFU3hzaUJDQUliQ0lHUWZHVDY5d0RUd1JBSUFBb0FnQkN1SUNBZ0RBM0FoUWdBQ0FBS0FJQUtBSUFFUUVBQ3lBR1FSQnlJZ2tRT2lJQlJRUkFJQUFvQWdCQ3VJQ0FnTUFBTndJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNnQWlBQ0tBSk1JQWxxTmdKTUlBSkJRR3NpQWlnQ0FDRUpJQUZCQURZQ0NDQUJJQVkyQWdRZ0FTQUpOZ0lBSUFJZ0FUWUNBQUpBSUFSRkRRQWdBVUVRYWlFQ0lBUWlBVUVEY1NJR0JFQURRQ0FLSUFOQkFuUnFJQUkyQWdBZ0FVRUJheUVCSUFOQkFXb2hBeUFDSUFocUlRSWdCa0VCYXlJR0RRQUxDeUFFUVFGclFRTkpEUUFEUUNBS0lBTkJBblJxSWdZZ0FqWUNBQ0FHSUFJZ0NHb2lBaUFJYWlJSk5nSUlJQVlnQWpZQ0JDQUdJQWdnQ1dvaUFqWUNEQ0FDSUFocUlRSWdBMEVFYWlFRElBRkJCR3NpQVEwQUN3c2dBeUFIU1EwQUN3c2dCU0FLTmdJQUlBc29BbEFoQVNBRlFRQTJBaVFnQlVJQU53SVlJQVVnQVRZQ0ZBc2dCU2dDTENJRkRRQUxDd3ZPQndFSGZ3SkFBa0FnQWlBRGFpSUlJQUVvQWdSTERRQWdBU2dDRENBRFNRMEFJQUVvQWdBTkFRc2dBQ2dDQUNJRFFSYzJBaFFnQUNBREtBSUFFUUVBQ3dKQUlBSWdBU2dDR0NJRFR3UkFJQWdnQVNnQ0VDQURhazBOQVFzZ0FTZ0NLRVVFUUNBQUtBSUFJZ05CeHdBMkFoUWdBQ0FES0FJQUVRRUFDeUFCS0FJa0JFQUNRQ0FCS0FJUUlnTkJBVWdOQUNBQktBSVVJZ1VnQXlBRElBVktHeUlGSUFFb0Fod2dBU2dDR0NJRGF5SUdJQVVnQmtnYklnVWdBU2dDQkNBRGF5SUdJQVVnQmtnYklnVkJBVWdOQUNBQlFUQnFJUW9nQXlBQktBSUlJZ3RzSVFaQkFDRURBMEFnQUNBS0lBRW9BZ0FnQTBFQ2RHb29BZ0FnQmlBRklBdHNJZ2NnQVNnQ05CRUZBQ0FCS0FJUUlna2dBU2dDRkNJRklBTnFJZ05NRFFFZ0JpQUhhaUVHSUFVZ0NTQURheUlISUFVZ0IwZ2JJZ1VnQVNnQ0hDQUJLQUlZSUFOcUlnZHJJZ2tnQlNBSlNCc2lCU0FCS0FJRUlBZHJJZ2NnQlNBSFNCc2lCVUVBU2cwQUN3c2dBVUVBTmdJa0N5QUJJQUlnQ0NBQktBSVFJZ05ySWdWQkFDQUZRUUJLR3lBQktBSVlJQUpKR3lJR05nSVlJQU5CQVVnTkFDQUJLQUlVSWdVZ0F5QURJQVZLR3lJRElBRW9BaHdnQm1zaUJTQURJQVZJR3lJRElBRW9BZ1FnQm1zaUJTQURJQVZJR3lJRlFRRklEUUFnQVVFd2FpRUtJQUVvQWdnaUN5QUdiQ0VHUVFBaEF3TkFJQUFnQ2lBQktBSUFJQU5CQW5ScUtBSUFJQVlnQlNBTGJDSUhJQUVvQWpBUkJRQWdBU2dDRUNJSklBRW9BaFFpQlNBRGFpSURUQTBCSUFZZ0Iyb2hCaUFGSUFrZ0Eyc2lCeUFGSUFkSUd5SUZJQUVvQWh3Z0FTZ0NHQ0FEYWlJSGF5SUpJQVVnQ1VnYklnVWdBU2dDQkNBSGF5SUhJQVVnQjBnYklnVkJBRW9OQUFzTEFrQUNRQUpBSUFFb0Fod2lCU0FJVHcwQUFrQUNRQUpBSUFJZ0JVc0VRQ0FDSVFVZ0JFVU5BU0FBS0FJQUlnTkJGellDRkNBQUlBTW9BZ0FSQVFBTUFnc2dCQTBCQ3lBQktBSWdEUUVnQUNnQ0FDSURRUmMyQWhRZ0FDQURLQUlBRVFFQURBUUxJQUVnQ0RZQ0hDQUJLQUlnUlEwQ0N5QUZJQUVvQWhnaUFHc2lBeUFJSUFCcklnWlBEUUFnQVNnQ0NDRUFJQWdnQlVGL2Myb2hDaUFJSUFWclFRTnhJZ1VFUUFOQUlBRW9BZ0FnQTBFQ2RHb29BZ0JCQUNBQUVEc2FJQU5CQVdvaEF5QUZRUUZySWdVTkFBc0xJQXBCQTBrTkFBTkFJQU5CQW5RaUJTQUJLQUlBYWlnQ0FFRUFJQUFRT3hvZ0JTQUJLQUlBYWlnQ0JFRUFJQUFRT3hvZ0JTQUJLQUlBYWlnQ0NFRUFJQUFRT3hvZ0JTQUJLQUlBYWlnQ0RFRUFJQUFRT3hvZ0EwRUVhaUlESUFaSERRQUxDeUFFUlEwQkN5QUJRUUUyQWlRTElBRW9BZ0FnQWlBQktBSVlhMEVDZEdvTDF3Y0JCMzhDUUFKQUlBSWdBMm9pQ0NBQktBSUVTdzBBSUFFb0Fnd2dBMGtOQUNBQktBSUFEUUVMSUFBb0FnQWlBMEVYTmdJVUlBQWdBeWdDQUJFQkFBc0NRQ0FDSUFFb0FoZ2lBMDhFUUNBSUlBRW9BaEFnQTJwTkRRRUxJQUVvQWloRkJFQWdBQ2dDQUNJRFFjY0FOZ0lVSUFBZ0F5Z0NBQkVCQUFzZ0FTZ0NKQVJBQWtBZ0FTZ0NFQ0lEUVFGSURRQWdBU2dDRkNJRklBTWdBeUFGU2hzaUJTQUJLQUljSUFFb0FoZ2lBMnNpQmlBRklBWklHeUlGSUFFb0FnUWdBMnNpQmlBRklBWklHeUlGUVFGSURRQWdBVUV3YWlFS0lBTWdBU2dDQ0VFSGRDSUxiQ0VHUVFBaEF3TkFJQUFnQ2lBQktBSUFJQU5CQW5ScUtBSUFJQVlnQlNBTGJDSUhJQUVvQWpRUkJRQWdBU2dDRUNJSklBRW9BaFFpQlNBRGFpSURUQTBCSUFZZ0Iyb2hCaUFGSUFrZ0Eyc2lCeUFGSUFkSUd5SUZJQUVvQWh3Z0FTZ0NHQ0FEYWlJSGF5SUpJQVVnQ1VnYklnVWdBU2dDQkNBSGF5SUhJQVVnQjBnYklnVkJBRW9OQUFzTElBRkJBRFlDSkFzZ0FTQUNJQWdnQVNnQ0VDSURheUlGUVFBZ0JVRUFTaHNnQVNnQ0dDQUNTUnNpQmpZQ0dDQURRUUZJRFFBZ0FTZ0NGQ0lGSUFNZ0F5QUZTaHNpQXlBQktBSWNJQVpySWdVZ0F5QUZTQnNpQXlBQktBSUVJQVpySWdVZ0F5QUZTQnNpQlVFQlNBMEFJQUZCTUdvaENpQUJLQUlJUVFkMElnc2dCbXdoQmtFQUlRTURRQ0FBSUFvZ0FTZ0NBQ0FEUVFKMGFpZ0NBQ0FHSUFVZ0Myd2lCeUFCS0FJd0VRVUFJQUVvQWhBaUNTQUJLQUlVSWdVZ0Eyb2lBMHdOQVNBR0lBZHFJUVlnQlNBSklBTnJJZ2NnQlNBSFNCc2lCU0FCS0FJY0lBRW9BaGdnQTJvaUIyc2lDU0FGSUFsSUd5SUZJQUVvQWdRZ0Iyc2lCeUFGSUFkSUd5SUZRUUJLRFFBTEN3SkFBa0FDUUNBQktBSWNJZ1VnQ0U4TkFBSkFBa0FDUUNBQ0lBVkxCRUFnQWlFRklBUkZEUUVnQUNnQ0FDSURRUmMyQWhRZ0FDQURLQUlBRVFFQURBSUxJQVFOQVFzZ0FTZ0NJQTBCSUFBb0FnQWlBMEVYTmdJVUlBQWdBeWdDQUJFQkFBd0VDeUFCSUFnMkFod2dBU2dDSUVVTkFnc2dCU0FCS0FJWUlnQnJJZ01nQ0NBQWF5SUdUdzBBSUFFb0FnaEJCM1FoQUNBSUlBVkJmM05xSVFvZ0NDQUZhMEVEY1NJRkJFQURRQ0FCS0FJQUlBTkJBblJxS0FJQVFRQWdBQkE3R2lBRFFRRnFJUU1nQlVFQmF5SUZEUUFMQ3lBS1FRTkpEUUFEUUNBRFFRSjBJZ1VnQVNnQ0FHb29BZ0JCQUNBQUVEc2FJQVVnQVNnQ0FHb29BZ1JCQUNBQUVEc2FJQVVnQVNnQ0FHb29BZ2hCQUNBQUVEc2FJQVVnQVNnQ0FHb29BZ3hCQUNBQUVEc2FJQU5CQkdvaUF5QUdSdzBBQ3dzZ0JFVU5BUXNnQVVFQk5nSWtDeUFCS0FJQUlBSWdBU2dDR0d0QkFuUnFDeDRBSUFCQkFSRGhBeUFBUVFBUTRRTWdBQ2dDQkJBeklBQkJBRFlDQkF2TkFRRUVmeU1BUVJCcklnUWtBQ0FBS0FJVUlnTkJ6UUZIQkVBZ0FDZ0NBQ0lGSUFNMkFoZ2dCVUVWTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXNDUUNBQUtBS01BU0lGSUFBb0FuUWlCazhFUUNBQUtBSUFJZ0ZCL2dBMkFoUWdBRUYvSUFFb0FnUVJBZ0JCQUNFQkRBRUxJQUFvQWdnaUF3UkFJQU1nQmpZQ0NDQURJQVUyQWdRZ0FDQURLQUlBRVFFQUN5QUVRUUEyQWd3Z0FDQUJJQVJCREdvZ0FpQUFLQUxBQXlnQ0JCRUhBQ0FBSUFRb0Fnd2lBU0FBS0FLTUFXbzJBb3dCQ3lBRVFSQnFKQUFnQVF1MVFBRVRmd0pBQWtBQ1FBSkFBa0FnQUNnQ0ZDSUJRY29CYXc0REFBRURBZ3NnQUNBQVFRRkJIQ0FBS0FJRUtBSUFFUVFBSWcwMkFyd0RJQTFCQURZQ0NDQU5RWllCTmdJRUlBMUJsd0UyQWdBZ0FDZ0MxQUVpQVVFSVJ3UkFJQUFvQWdBaUFpQUJOZ0lZSUFKQkVEWUNGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBQW9BaFFpQVVIS0FVY0VRQ0FBS0FJQUlnSWdBVFlDR0NBQ1FSVTJBaFFnQUNBQUtBSUFLQUlBRVFFQUN3Si9JQUFvQXF3RElnSWdBQ2dDTUd3aUF5QUFLQUkwSWdSTkJFQWdBQ0FBS0FJY0lBSVFhallDY0VFQklRRWdBQ2dDSUF3QkN5QUVRUUYwSUFOUEJFQWdBQ0FBS0FJY1FRRjBJQUlRYWpZQ2NFRUNJUUVnQUNnQ0lFRUJkQXdCQzBFRElRRWdCRUVEYkNBRFR3UkFJQUFnQUNnQ0hFRURiQ0FDRUdvMkFuQWdBQ2dDSUVFRGJBd0JDeUFFUVFKMElBTlBCRUFnQUNBQUtBSWNRUUowSUFJUWFqWUNjRUVFSVFFZ0FDZ0NJRUVDZEF3QkMwRUZJUUVnQkVFRmJDQURUd1JBSUFBZ0FDZ0NIRUVGYkNBQ0VHbzJBbkFnQUNnQ0lFRUZiQXdCQzBFR0lRRWdCRUVHYkNBRFR3UkFJQUFnQUNnQ0hFRUdiQ0FDRUdvMkFuQWdBQ2dDSUVFR2JBd0JDMEVISVFFZ0JFRUhiQ0FEVHdSQUlBQWdBQ2dDSEVFSGJDQUNFR28yQW5BZ0FDZ0NJRUVIYkF3QkN5QUVRUU4wSUFOUEJFQWdBQ0FBS0FJY1FRTjBJQUlRYWpZQ2NFRUlJUUVnQUNnQ0lFRURkQXdCQzBFSklRRWdCRUVKYkNBRFR3UkFJQUFnQUNnQ0hFRUpiQ0FDRUdvMkFuQWdBQ2dDSUVFSmJBd0JDMEVLSVFFZ0JFRUtiQ0FEVHdSQUlBQWdBQ2dDSEVFS2JDQUNFR28yQW5BZ0FDZ0NJRUVLYkF3QkMwRUxJUUVnQkVFTGJDQURUd1JBSUFBZ0FDZ0NIRUVMYkNBQ0VHbzJBbkFnQUNnQ0lFRUxiQXdCQzBFTUlRRWdCRUVNYkNBRFR3UkFJQUFnQUNnQ0hFRU1iQ0FDRUdvMkFuQWdBQ2dDSUVFTWJBd0JDMEVOSVFFZ0JFRU5iQ0FEVHdSQUlBQWdBQ2dDSEVFTmJDQUNFR28yQW5BZ0FDZ0NJRUVOYkF3QkMwRU9JUUVnQkVFT2JDQURUd1JBSUFBZ0FDZ0NIRUVPYkNBQ0VHbzJBbkFnQUNnQ0lFRU9iQXdCQzBFUElRRWdBQ2dDSENFR0lBUkJEMndnQTA4RVFDQUFJQVpCRDJ3Z0FoQnFOZ0p3SUFBb0FpQkJEMndNQVFzZ0FDQUdRUVIwSUFJUWFqWUNjRUVRSVFFZ0FDZ0NJRUVFZEFzZ0FDZ0NyQU1RYWlFQ0lBQWdBVFlDeUFJZ0FDQUJOZ0xFQWlBQUlBSTJBblFDUUNBQUtBSWtJZ05CQVVnTkFDQURRUWR4SVFRZ0FDZ0MyQUVoQWlBRFFRRnJRUWRQQkVBZ0EwRjRjU0VEQTBBZ0FpQUJOZ0lvSUFJZ0FUWUNKQ0FDSUFFMkFwQUZJQUlnQVRZQ2pBVWdBaUFCTmdLNEJDQUNJQUUyQXJRRUlBSWdBVFlDNEFNZ0FpQUJOZ0xjQXlBQ0lBRTJBb2dESUFJZ0FUWUNoQU1nQWlBQk5nS3dBaUFDSUFFMkFxd0NJQUlnQVRZQzJBRWdBaUFCTmdMVUFTQUNJQUUyQW9BQklBSWdBVFlDZkNBQ1FjQUZhaUVDSUFOQkNHc2lBdzBBQ3dzZ0JFVU5BQU5BSUFJZ0FUWUNLQ0FDSUFFMkFpUWdBa0hZQUdvaEFpQUVRUUZySWdRTkFBc0xBa0FnQUNnQ0pDSUpRUUZJRFFCQkNFRUVJQUFvQWt3YklRb2dBQ2dDeUFJaEF5QUFLQUxFQWlFRUlBQW9BdGdCSWdjaENBTkFBa0FnQ2lBRUlnRklEUUFnQUNnQ3ZBSWlBaUFJS0FJSUlneEJBWFJ2RFFCQkFpRUdBMEFnQkNBR2JDSUJJQXBLRFFFZ0FpQUdRUUYwSWdZZ0RHeHZSUTBBQ3dzZ0NDQUJOZ0lrQWtBZ0NpQURJZ0pJRFFBZ0FDZ0N3QUlpRENBSUtBSU1JZzVCQVhSdkRRQkJBaUVHQTBBZ0F5QUdiQ0lDSUFwS0RRRWdEQ0FHUVFGMElnWWdEbXh2UlEwQUN3c2dDQ0FDTmdJb0FrQWdBa0VCZENJR0lBRklCRUFnQ0NBR05nSWtEQUVMSUFJZ0FVRUJkQ0lCVEEwQUlBZ2dBVFlDS0FzZ0NFSFlBR29oQ0NBTFFRRnFJZ3NnQ1VjTkFBc2dDVUVCU0EwQVFRRWhCZ05BSUFjZ0J5Z0NKQ0FIS0FJSUlBQW9BaHhzYkNBQUtBS3NBeUFBS0FLOEFtd1FhallDTENBSElBY29BaWdnQnlnQ0RDQUFLQUlnYkd3Z0FDZ0NyQU1nQUNnQ3dBSnNFR28yQWpBZ0JpQUFLQUlrSWdsT0RRRWdCMEhZQUdvaEJ5QUdRUUZxSVFZTUFBc0FDeUFBS0FJc1FRRnJJZ0ZCQmswRVFDQUJRUUowUVlpR0Ftb29BZ0FoQ1FzZ0FDQUpOZ0o0SUFCQkFTQUpJQUFvQWxRYk5nSjhJQUFnQUJDaUJRUi9JQUFvQXNBQ0JVRUJDellDZ0FFZ0FDQUFRUUZCZ0FvZ0FDZ0NCQ2dDQUJFRUFFRUFRWUFFRURzaUFrR0FCR29pQVRZQzBBSURRQ0FCSUFWcUlBVTZBQUFnQVNBRlFRRnlJZ05xSUFNNkFBQWdBU0FGUVFKeUlnTnFJQU02QUFBZ0FTQUZRUU55SWdOcUlBTTZBQUFnQVNBRlFRUnlJZ05xSUFNNkFBQWdBU0FGUVFWeUlnTnFJQU02QUFBZ0FTQUZRUVp5SWdOcUlBTTZBQUFnQVNBRlFRZHlJZ05xSUFNNkFBQWdCVUVJYWlJRlFZQUNSdzBBQ3lBQ1FZQUdha0gvQVVHQUJCQTdHZ0pBQWtBZ0FDZ0NkRVVOQUNBQUtBSndSUTBBSUFBb0FuaEJBRW9OQVFzZ0FDZ0NBQ0lCUVNFMkFoUWdBQ0FCS0FJQUVRRUFDeUFOUVFBMkFnd2dBQkNpQlNFQklBMUNBRGNDRkNBTklBRTJBaEFDUUNBQUtBSlVSUVJBSUFCQkFEWUNiQ0FBUWdBM0FtUU1BUXNnQUNnQ1FFVUVRQ0FBUVFBMkFtd2dBRUlBTndKa0N5QUFLQUpFQkVBZ0FDZ0NBQ0lCUVRBMkFoUWdBQ0FCS0FJQUVRRUFDd0pBSUFBb0FuaEJBMGNFUUNBQVFRQTJBb2dCSUFCQkFEWUNiQ0FBUWdFM0FtUU1BUXNnQUNnQ2lBRUVRQ0FBUVFFMkFtZ01BUXNnQUNnQ1hBUkFJQUJCQVRZQ2JBd0JDeUFBUVFFMkFtUUxJQUFvQW1RRVFFRUFJUTRnQUNBQVFRRkIyQUFnQUNnQ0JDZ0NBQkVFQUNJQk5nTGtBeUFCUVFBMkFrUWdBVUhhQVRZQ0RDQUJRZHNCTmdJSUlBRkIzQUUyQWdBZ0FVRUFOZ0kwSUFBb0FuaEJCVTRFUUNBQUtBSUFRcm1BZ0lEQUFEY0NGQ0FBSUFBb0FnQW9BZ0FSQVFBTElBQW9BbUFpQlVHQkFrNEVRQ0FBS0FJQVFydUFnSUNBSURjQ0ZDQUFJQUFvQWdBb0FnQVJBUUFnQUNnQ1lDRUZDeUFBS0FKNElnaEJBV3NpQ2tGNGNTRURJQXBCQjNFaEJ5QUFLQUxrQXlFSklBaEJBa2doQ3lBSVFRSnJRUWRKSVF4QkFTRUNBMEFnQWlJRVFRRnFJZ0loQmdKQUlBc05BQ0FDSVFZZ0F5RUJJQXhGQkVBRFFDQUNJQVpzSUFKc0lBSnNJQUpzSUFKc0lBSnNJQUpzSUFKc0lRWWdBVUVJYXlJQkRRQUxDeUFISWdGRkRRQURRQ0FDSUFac0lRWWdBVUVCYXlJQkRRQUxDeUFGSUFaT0RRQUxRUUVoQXlBRVFRRk5CRUFnQUNnQ0FDSUJJQVkyQWhnZ0FVRTZOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc0NRQ0FJUVFGSURRQWdDRUVEY1NFR0FrQWdDa0VEU1FSQVFRQWhBZ3dCQ3lBSVFYeHhJUXBCQUNFQ0lBbEJJR29oQVNBRUlRTURRQ0FCSUFKQkFuUWlCMm9nQkRZQ0FDQUJJQWRCQkhKcUlBUTJBZ0FnQVNBSFFRaHlhaUFFTmdJQUlBRWdCMEVNY21vZ0JEWUNBQ0FDUVFScUlRSWdBeUFFYkNBRWJDQUViQ0VESUFwQkJHc2lDa1VOQVNBRElBUnNJUU1NQUFzQUN5QUdCRUFEUUNBSklBSkJBblJxSUFRMkFpQWdBa0VCYWlFQ0lBTWdCR3doQXlBR1FRRnJJZ1lOQUFzTElBaEJBVWdOQUVFQUlRSWdBQ2dDTEVFQ1J5RUdRUUVoQVFOQUlBVWdBeUFKSUFZRWZ5QUNCU0FDUVFKMFFiQzJBbW9vQWdBTFFRSjBhaUlIS0FJZ0lnUnRJQVJCQVdvaUNtd2lCRTRFUUNBSElBbzJBaUJCQUNFQklBUWhBeUFDUVFGcUlnSWdDRWNOQVFzZ0FVRUJjU0VFUVFFaEFVRUFJUUlnQkVVTkFBc0xJQUFvQW5naEFpQUFLQUlBSWdFZ0F6WUNHQUovSUFKQkEwWUVRQ0FCSUFrb0FpQTJBaHdnQVNBSktBSWtOZ0lnSUFFZ0NTZ0NLRFlDSkVIZ0FDRUdJQUVNQVF0QjRRQWhCaUFBS0FJQUN5RUNJQUVnQmpZQ0ZDQUFRUUVnQWlnQ0JCRUNBQ0FBUVFFZ0F5QUFLQUo0SUFBb0FnUW9BZ2dSQ1FBaEVDQUFLQUo0SWdKQkFVNEVRQ0FESVFFRFFDQUJJQWtnRGtFQ2RDSUZhaWdDSUNJUGJTRUVJQTlCQVdzaUVVRUNiU0VTSUE5QkFVNEVRQ0FGSUJCcUlRb2dCRUY4Y1NFSElBUkJBM0VoQ0NBRVFRRnJJUk5CQUNFTUEwQWdERUgvQVd3Z0Vtb2dFVzBoQ3lBRElBUWdER3dpQmtvRVFBTkFBa0FnQkVFQlNBMEFRUUFoQWlBSElRVWdFMEVEVHdSQUEwQWdDaWdDQUNBQ0lBWnFhaUFMT2dBQUlBb29BZ0FnQWtFQmNpQUdhbW9nQ3pvQUFDQUtLQUlBSUFKQkFuSWdCbXBxSUFzNkFBQWdDaWdDQUNBQ1FRTnlJQVpxYWlBTE9nQUFJQUpCQkdvaEFpQUZRUVJySWdVTkFBc0xJQWdpQlVVTkFBTkFJQW9vQWdBZ0FpQUdhbW9nQ3pvQUFDQUNRUUZxSVFJZ0JVRUJheUlGRFFBTEN5QUJJQVpxSWdZZ0EwZ05BQXNMSUF4QkFXb2lEQ0FQUncwQUN5QUFLQUo0SVFJTElBUWhBU0FPUVFGcUlnNGdBa2dOQUFzTElBa2dBellDRkNBSklCQTJBaEFnQUJDWUJRSkFJQUFvQWxoQkFrY05BQ0FBS0FKNFFRRklEUUFnQUNnQ2NFRUJkRUVFYWlFQklBQW9BdVFESVFOQkFDRUNBMEFnQXlBQ1FRSjBhaUFBUVFFZ0FTQUFLQUlFS0FJRUVRUUFOZ0pFSUFKQkFXb2lBaUFBS0FKNFNBMEFDd3NnRFNBQUtBTGtBellDRkFzZ0FDZ0NiRVVFUUNBQUtBSm9SUTBCQzBFQUlRSWdBQ0FBUVFGQkxDQUFLQUlFS0FJQUVRUUFJZ0UyQXVRRElBRkJBRFlDS0NBQlFRQTJBaUFnQVVHY0FUWUNEQ0FCUVowQk5nSUFJQUFvQW5oQkEwY0VRQ0FBS0FJQUlnTkJNRFlDRkNBQUlBTW9BZ0FSQVFBTElBRWdBRUVCUVlBQklBQW9BZ1FvQWdBUkJBQTJBaGdEUUNBQVFRRkJnQ0FnQUNnQ0JDZ0NCQkVFQUNFRElBSkJBblFpQkNBQktBSVlhaUFETmdJQUlBQkJBVUdBSUNBQUtBSUVLQUlFRVFRQUlRTWdBU2dDR0NBRVFRUnlhaUFETmdJQUlBSkJBbW9pQWtFZ1J3MEFDeUFCUVFFMkFod0NRQ0FBS0FKc0JFQkJDQ0VEUVRvaEJBSkFJQUFvQW1BaUFrRUlUZ1JBSUFKQmdRSklEUUZCT3lFRVFZQUNJUU1MSUFBb0FnQWlCU0FETmdJWUlBVWdCRFlDRkNBQUlBQW9BZ0FvQWdBUkFRQUxJQUJCQVNBQ1FRTWdBQ2dDQkNnQ0NCRUpBQ0VESUFFZ0FqWUNGQ0FCSUFNMkFoQU1BUXNnQVVFQU5nSVFDeUFBS0FKWUJFQWdBRUVDTmdKWUlBRWdBRUVCSUFBb0FuQkJCbXhCREdvZ0FDZ0NCQ2dDQkJFRUFEWUNJQ0FBRUtBRkN5QU5JQUFvQXVRRE5nSVlDeUFBS0FKRVJRUkFBa0FnRFNnQ0VBUkFRUUFoQWlBQUlBQkJBVUV3SUFBb0FnUW9BZ0FSQkFBaUFUWUMzQU1nQVVFQU5nSUlJQUZCNGdFMkFnQWdBU0FBS0FKNElBQW9BbkJzSWdNMkFpZ0NRQ0FBS0FMQUFrRUNSZ1JBSUFGQjR3RTJBZ3dnQVVIa0FUWUNCQ0FBUVFFZ0F5QUFLQUlFS0FJRUVRUUFJUUlNQVFzZ0FVSGxBVFlDRENBQlFlWUJOZ0lFQ3lBQklBSTJBaUFnQUNnQ0tDRURJQUFvQXR3RElnRWdBRUVCUVlBSUlBQW9BZ1FvQWdBUkJBQTJBaEFnQVNBQVFRRkJnQWdnQUNnQ0JDZ0NBQkVFQURZQ0ZDQUJJQUJCQVVHQUNDQUFLQUlFS0FJQUVRUUFOZ0lZSUFFZ0FFRUJRWUFJSUFBb0FnUW9BZ0FSQkFBaUJEWUNIQ0FCS0FJWUlRVWdBU2dDRkNFR0lBRW9BaEFoQjBFQUlRSkJnSDhoQVFKQUlBTkJCMFlFUUFOQUlBY2dBa0VDZENJRGFpQUJRZE9iQzJ4QmdJQUNha0VRZFRZQ0FDQURJQVpxSUFGQnhKWU9iRUdBZ0FKcVFSQjFOZ0lBSUFNZ0JXb2dBVUhkcEhwc05nSUFJQU1nQkdvZ0FVSE5uMzFzUVlDQUFtbzJBZ0FnQVVFQmFpRUJJQUpCQVdvaUFrR0FBa2NOQUF3Q0N3QUxBMEFnQnlBQ1FRSjBJZ05xSUFGQjZjMEZiRUdBZ0FKcVFSQjFOZ0lBSUFNZ0Jtb2dBVUdpaXdkc1FZQ0FBbXBCRUhVMkFnQWdBeUFGYWlBQlFhNlNmV3cyQWdBZ0F5QUVhaUFCUWVmUGZteEJnSUFDYWpZQ0FDQUJRUUZxSVFFZ0FrRUJhaUlDUVlBQ1J3MEFDd3NNQVFzZ0FDSUJJQUJCQVVFY0lBQW9BZ1FvQWdBUkJBQWlBallDNEFNZ0FrSCtBRFlDQUFKQUFrQUNRQ0FBS0FJb0lnTkJCMHNOQUFKQVFRRWdBM1JCekFGeFJRUkFRUUVnQTNSQk1IRU5BU0FEUVFGSERRSWdBU2dDSkVFQlJ3MEREQVFMSUFFb0FpUkJBMGNOQWd3REN5QUJLQUlrUVFSSERRRU1BZ3NnQVNnQ0pFRUFTZzBCQ3lBQktBSUFJZ05CQ3pZQ0ZDQUJJQU1vQWdBUkFRQUxBa0FnQVNnQ3NBSkZEUUFDUUNBQktBSW9RUUpyRGdVQkFBQUFBUUFMSUFFb0FnQWlBMEVjTmdJVUlBRWdBeWdDQUJFQkFBc0NRQUpBQWtBQ1FBSkFBa0FnQVNnQ0xDSURRUUZyRGdZQUFRUURCQUlFQ3lBQlFRRTJBbmdDUUFKQUFrQWdBU2dDS0VFQmF3NEhBQUVBQWdJQ0FBSUxJQUpCL3dBMkFnUWdBU2dDSkNJRVFRSklEUVlnQkVFQmF5SUdRUWR4SVFNZ0FTZ0MyQUVoQlVFQklRSWdCRUVDYTBFSFR3UkFJQVpCZUhFaEJnTkFJQVVnQWtIWUFHeHFJZ1JCQURZQ05DQUVRUUEyQW93QklBUkJBRFlDNUFFZ0JFRUFOZ0s4QWlBRVFRQTJBcFFESUFSQkFEWUM3QU1nQkVFQU5nTEVCQ0FFUVFBMkFwd0ZJQUpCQ0dvaEFpQUdRUWhySWdZTkFBc0xJQU5GRFFZRFFDQUZJQUpCMkFCc2FrRUFOZ0kwSUFKQkFXb2hBaUFEUVFGcklnTU5BQXNNQmdzQ1FBSkFBa0FDUUNBQktBS3dBZzRDQUFFQ0N5QUNRWUFCTmdJRURBSUxJQUpCZ1FFMkFnUU1BUXNnQVNnQ0FDSUNRUncyQWhRZ0FTQUNLQUlBRVFFQUN5QUJLQUxnQXlBQlFRRkJnQmdnQVNnQ0JDZ0NBQkVFQUNJRk5nSVlRUUFoQWdOQUlBVWdBa0VDZEdvaUF5QUNRWXVaQVd3MkFnQWdBMEdBRUdvZ0FrR3ZPbXhCZ0lBQ2FqWUNBQ0FEUVlBSWFpQUNRY2FzQW13MkFnQWdCU0FDUVFGeUlnUkJBblJxSUFSQmk1a0JiRFlDQUNBRFFZUVFhaUFFUWE4NmJFR0FnQUpxTmdJQUlBTkJoQWhxSUFSQnhxd0NiRFlDQUNBQ1FRSnFJZ0pCZ0FKSERRQUxEQVVMSUFFb0FnQWlBa0VjTmdJVUlBRWdBaWdDQUJFQkFBd0VDeUFCUVFNMkFuZ0NRQUpBQWtBQ1FBSkFJQUVvQWloQkFXc09Cd0FEQVFRRUJBSUVDeUFDUVlJQk5nSUVEQWNMSUFKQmd3RTJBZ1FnQVJDakJRd0dDeUFDUVlNQk5nSUVJQUVvQXVBRElnSWdBVUVCUVlBSUlBRW9BZ1FvQWdBUkJBQTJBZ2dnQWlBQlFRRkJnQWdnQVNnQ0JDZ0NBQkVFQURZQ0RDQUNJQUZCQVVHQUNDQUJLQUlFS0FJQUVRUUFOZ0lRSUFJZ0FVRUJRWUFJSUFFb0FnUW9BZ0FSQkFBaUJUWUNGQ0FDS0FJUUlRWWdBaWdDRENFSElBSW9BZ2doQ0VFQUlRTkJnSDhoQWdOQUlBZ2dBMEVDZENJRWFpQUNRZE9iQzJ4QmdJQUNha0VRZFRZQ0FDQUVJQWRxSUFKQnhKWU9iRUdBZ0FKcVFSQjFOZ0lBSUFRZ0Jtb2dBa0hkcEhwc05nSUFJQVFnQldvZ0FrSE5uMzFzUVlDQUFtbzJBZ0FnQWtFQmFpRUNJQU5CQVdvaUEwR0FBa2NOQUFzTUJRc0NRQUpBQWtBZ0FTZ0NzQUlPQWdBQkFnc2dBa0dFQVRZQ0JBd0dDeUFDUVlVQk5nSUVEQVVMSUFFb0FnQWlBa0VjTmdJVUlBRWdBaWdDQUJFQkFBd0VDeUFCS0FJQUlnSkJIRFlDRkNBQklBSW9BZ0FSQVFBTUF3c2dBVUVETmdKNElBRW9BaWhCQmtZRVFBSkFBa0FDUUNBQktBS3dBZzRDQUFFQ0N5QUNRWVFCTmdJRURBVUxJQUpCaFFFMkFnUU1CQXNnQVNnQ0FDSUNRUncyQWhRZ0FTQUNLQUlBRVFFQURBTUxJQUVvQWdBaUFrRWNOZ0lVSUFFZ0FpZ0NBQkVCQUF3Q0N5QUJRUVEyQW5nQ1FBSkFBa0FnQVNnQ0tFRUVhdzRDQVFBQ0N5QUNRWVlCTmdJRUlBRVFvd1VNQXdzZ0FrR0hBVFlDQkF3Q0N5QUJLQUlBSWdKQkhEWUNGQ0FCSUFJb0FnQVJBUUFNQVFzZ0FTZ0NLQ0FEUmdSQUlBRWdBU2dDSkRZQ2VDQUNRWWNCTmdJRURBRUxJQUVvQWdBaUFrRWNOZ0lVSUFFZ0FpZ0NBQkVCQUFzZ0FTQUJLQUpVQkg5QkFRVWdBU2dDZUFzMkFueEJBQ0VESUFFZ0FFRUJRYUFCSUFBb0FnUW9BZ0FSQkFBaUFUWUMzQU1nQVVFQU5nSUlJQUZCaUFFMkFnUWdBVUdKQVRZQ0FDQUFLQUswQWdSQUlBQW9BZ0FpQWtFYU5nSVVJQUFnQWlnQ0FCRUJBQXNnQUNnQ0pFRUJUZ1JBSUFGQkRHb2hDU0FCUVpZQmFpRUtJQUZCakFGcUlRc2dBVUUwYWlFRUlBRkI1QUJxSVF3Z0FDZ0MyQUVoQVFOQUlBQW9Bc0FDSVFVZ0FDZ0N2QUloQnlBQUtBTEVBaUVJSUFFb0FpUWhEaUFCS0FJSUlROGdEQ0FEUVFKMElnSnFJQUVvQWlnZ0FTZ0NER3dnQUNnQ3lBSnRJZ1kyQWdBZ0RpQVBiQ0FJYlNFSUFrQWdBU2dDTkVVRVFDQUNJQVJxUVlvQk5nSUFEQUVMSUFjZ0NFY2dCU0FHUjNKRkJFQWdBaUFFYWtHTEFUWUNBQXdCQ3dKQUlBaEJBWFFnQjBjaURpQUZJQVpIY2tVRVFDQUNJQVJxUVl3Qk5nSUFEQUVMSUE0Z0JrRUJkQ0FGUjNKRkJFQWdBaUFFYWtHTkFUWUNBQXdCQ3dKQUlBY2dCeUFJYlNJSElBaHNhdzBBSUFVZ0JTQUdiU0lGSUFac2F3MEFJQUlnQkdwQmpnRTJBZ0FnQXlBTGFpQUhPZ0FBSUFNZ0Ntb2dCVG9BQUF3QkN5QUFLQUlBSWdWQkp6WUNGQ0FBSUFVb0FnQVJBUUFMSUFBb0FnUW9BZ2doQlNBQ0lBbHFJQUJCQVNBQUtBSndJQUFvQXJ3Q0VJZ0RJQUFvQXNBQ0lBVVJDUUEyQWdBTElBRkIyQUJxSVFFZ0EwRUJhaUlESUFBb0FpUklEUUFMQ3dzZ0FDZ0NiQ0VFSUFBZ0FFRUJRUndnQUNnQ0JDZ0NBQkVFQUNJQk5nTElBeUFCUWdBM0FnZ2dBVUdqQVRZQ0FDQUFLQUpVQkVBQ1FDQUJJQUFvQXNBQ0lnSTJBaEFnQUNnQ0JDRURJQVFFUUNBREtBSVFJUU1nQVNBQVFRRkJBQ0FBS0FKNElBQW9BbkJzSUFBb0FuUWdBaENJQXlBQktBSVFJQU1SQ0FBMkFnZ01BUXNnQVNBQVFRRWdBQ2dDZUNBQUtBSndiQ0FDSUFNb0FnZ1JDUUEyQWd3TEN3dEJBQ0VDSUFBaUFTQUFRUUZCMUFBZ0FDZ0NCQ2dDQUJFRUFDSUROZ0xZQXlBRFFhd0JOZ0lBSUFBb0FpUkJBVTRFUUNBRFFTeHFJUVFnQVNnQzJBRWhBd05BSUFNZ0FVRUJRWUFDSUFFb0FnUW9BZ0FSQkFBaUJUWUNWQ0FGUVFCQmdBSVFPeG9nQkNBQ1FRSjBha0YvTmdJQUlBTkIyQUJxSVFNZ0FrRUJhaUlDSUFFb0FpUklEUUFMQ3dKQUlBRW9BdVFCQkVBZ0FTQUFRUUZCd0FFZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0xVQXlBQlFjOEJOZ0lJSUFGQjBBRTJBZ0FnQVVFOGFrRUFRWUFCRURzYUlBRkI4UUE2QUx3QkFrQWdBQ2dDNEFGRkRRQWdBQ0FBUVFFZ0FDZ0NKRUVJZENBQUtBSUVLQUlBRVFRQUlnSTJBcUFCSUFBb0FpUkJBVWdOQUVFQklRRURRQ0FDUWY4QlFZQUNFRHNoQWlBQklBQW9BaVJPRFFFZ0FrR0FBbW9oQWlBQlFRRnFJUUVNQUFzQUN3d0JDeUFCSUFCQkFVSGNBU0FBS0FJRUtBSUFFUVFBSWdFMkF0UURJQUZCNXdFMkFnZ2dBVUhvQVRZQ0FBSkFJQUFvQXVBQlJRUkFJQUZDQURjQ1JDQUJRZ0EzQWx3Z0FVSUFOd0pVSUFGQ0FEY0NUQXdCQ3lBQUlBQkJBU0FBS0FJa1FRaDBJQUFvQWdRb0FnQVJCQUFpQXpZQ29BRUNRQ0FBS0FJa1FRRklEUUJCQVNFQ0EwQWdBMEgvQVVHQUFoQTdJUU1nQWlBQUtBSWtUZzBCSUFOQmdBSnFJUU1nQWtFQmFpRUNEQUFMQUFzZ0FVSUFOd0l3SUFGQ0FEY0NPQXNMSUFBb0Fzd0RLQUlRQkg5QkFRVWdBQ2dDUUVFQVJ3c2hBa0VBSVFNZ0FDQUFRUUZCOUFBZ0FDZ0NCQ2dDQUJFRUFDSUJOZ0xFQXlBQlFRQTJBbkFnQVVHUEFUWUNDQ0FCUVpBQk5nSUFBa0FnQWdSQUlBRkJ5QUJxSVFRZ0FDZ0NKRUVCVGdSQUlBQW9BdGdCSVFJRFFDQUNLQUlNSVFVZ0FDZ0M0QUVoQmlBQUtBSUVLQUlVSVFjZ0JDQURRUUowYWlBQVFRRkJBU0FDS0FJY0lBSW9BZ2dRaUFNZ0FpZ0NJQ0FDS0FJTUVJZ0RJQVZCQTJ3Z0JTQUdHeUFIRVFnQU5nSUFJQUpCMkFCcUlRSWdBMEVCYWlJRElBQW9BaVJJRFFBTEN5QUJJQVEyQWhBZ0FVR1JBVFlDRENBQlFaSUJOZ0lFREFFTElBRWdBRUVCUVlBS0lBQW9BZ1FvQWdRUkJBQWlBallDSUNBQklBSkJnQWxxTmdKRUlBRWdBa0dBQ0dvMkFrQWdBU0FDUVlBSGFqWUNQQ0FCSUFKQmdBWnFOZ0k0SUFFZ0FrR0FCV28yQWpRZ0FTQUNRWUFFYWpZQ01DQUJJQUpCZ0FOcU5nSXNJQUVnQWtHQUFtbzJBaWdnQVNBQ1FZQUJhallDSkNBQUtBSzBBMFVFUUNBQ1FRQkJnQW9RT3hvTElBRkJBRFlDRUNBQlFaTUJOZ0lNSUFGQmxBRTJBZ1FMSUFBb0FrUkZCRUJCQUNFRElBQWdBRUVCUWRBQUlBQW9BZ1FvQWdBUkJBQWlCVFlDd0FNZ0JVR1lBVFlDQUNBQUtBTElBaUVDQW44Z0FDZ0MzQU1vQWdnRVFDQUNRUUZNQkVBZ0FDZ0NBQ0lCUVRBMkFoUWdBQ0FCS0FJQUVRRUFJQUFvQXNnQ0lRSUxJQUFvQXNBRElnWWdBRUVCSUFBb0FpUkJBM1FnQUNnQ0JDZ0NBQkVFQUNJQk5nSThJQVpCUUdzZ0FTQUFLQUlrSWdSQkFuUnFOZ0lBSUFSQkFVNEVRQ0FDUVFScUlRSWdBQ2dDMkFFaEFRTkFJQUJCQVNBQktBSW9JQUVvQWd4c0lBQW9Bc2dDYlNJRUlBSnNJZ2RCQTNRZ0FDZ0NCQ2dDQUJFRUFDRUlJQU5CQW5RaUNTQUdLQUk4YWlBSUlBUkJBblJxSWdRMkFnQWdCaWdDUUNBSmFpQUVJQWRCQW5ScU5nSUFJQUZCMkFCcUlRRWdBMEVCYWlJRElBQW9BaVFpQkVnTkFBc0xJQUFvQXNnQ0lnSkJBbW9NQVFzZ0JTQUNOZ0kwSUFBb0FpUWhCQ0FDQ3lFR0FrQWdCRUVCU0EwQUlBVkJDR29oQkNBQUtBTFlBU0VCUVFBaEF3TkFJQVFnQTBFQ2RHb2dBRUVCSUFFb0FpUWdBU2dDSEd3Z0FTZ0NLQ0FCS0FJTWJDQUNiU0FHYkNBQUtBSUVLQUlJRVFrQU5nSUFJQU5CQVdvaUF5QUFLQUlrVGcwQklBRkIyQUJxSVFFZ0FDZ0N5QUloQWd3QUN3QUxDeUFBSUFBb0FnUW9BaGdSQVFBZ0FDQUFLQUxNQXlnQ0NCRUJBQUpBSUFBb0FnZ2lBVVVOQUNBQUtBSkFEUUFnQUNnQ3pBTW9BaEJGRFFBZ0FDZ0M0QUVoQXlBQUtBSWtJUUlnQVVFQU5nSUVJQUFvQXN3Q0lRUWdBVUVBTmdJTUlBRWdCQ0FDUVFOc1FRSnFJQUlnQXh0c05nSUlJQUZCQTBFQ0lBQW9BbXdiTmdJUUlBMGdEU2dDREVFQmFqWUNEQXNnQUNnQ1FBUkFJQUJCendFMkFoUkJBUThMSUFCQnl3RTJBaFFMQWtBZ0FDZ0N6QU1vQWhCRkRRQWdBQ2dDQ0NFRkEwQWdCUVJBSUFBZ0JTZ0NBQkVCQUFzQ1FDQUFJQUFvQXN3REtBSUFFUUFBSWdFT0F3VUFBZ0FMSUFBb0FnZ2lCVVVnQVVGOWNVRUJSM0lOQUNBRklBVW9BZ1JCQVdvaUFUWUNCQ0FCSUFVb0FnZ2lBa2dOQUNBRklBQW9Bc3dDSUFKcU5nSUlEQUFMQUFzZ0FDQUFLQUtRQVRZQ21BRU1BUXNnQUNnQ0FDSUNJQUUyQWhnZ0FrRVZOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ2dDRkVITUFVY0VRQ0FBSUFBb0Fyd0RLQUlBRVFFQUlBQkJ6QUUyQWhRZ0FFRUFOZ0tNQVFzQ1FDQUFLQUs4QXlnQ0NBUkFJQUJCakFGcUlnSW9BZ0FoQlFOQUlBQW9BblFpQXlBRlN3UkFJQUFvQWdnaUFRUkFJQUVnQXpZQ0NDQUJJQVUyQWdRZ0FDQUJLQUlBRVFFQUlBQW9Bb3dCSVFVTFFRQWhBU0FBUVFBZ0FrRUFJQUFvQXNBREtBSUVFUWNBSUFVZ0FDZ0NqQUVpQlVjTkFRd0RDeUFBSUFBb0Fyd0RLQUlFRVFFQUlBQWdBQ2dDdkFNb0FnQVJBUUJCQUNFRklBQkJBRFlDakFFZ0FDZ0N2QU1vQWdnTkFBc0xJQUJCemdGQnpRRWdBQ2dDUkJzMkFoUkJBU0VCQ3dzZ0FRdlNBUUVDZndKQUFrQWdBQ2dDRkNJQlFjMEJhMEVCU3cwQUlBQW9Ba0FOQUNBQUtBS01BU0FBS0FKMFNRUkFJQUFvQWdBaUFVSEZBRFlDRkNBQUlBRW9BZ0FSQVFBTElBQWdBQ2dDdkFNb0FnUVJBUUFnQUVIU0FUWUNGQXdCQ3dKQUFrQWdBVUhQQVdzT0JBQUJBUUlCQ3lBQVFkSUJOZ0lVREFFTElBQW9BZ0FpQWlBQk5nSVlJQUpCRlRZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMQWtBRFFDQUFLQUxNQXlJQktBSVVEUUVnQUNBQktBSUFFUUFBRFFBTFFRQVBDeUFBSUFBb0FoZ29BaGdSQVFBZ0FCQ1hCVUVCQzV3R0FRVi9JQUFvQWhRaUEwRitjVUhJQVVjRVFDQUFLQUlBSWdJZ0F6WUNHQ0FDUVJVMkFoUWdBQ0FBS0FJQUtBSUFFUUVBQ3dKL1FRRWhBZ0pBQWtBQ1FBSkFBa0FnQUNnQ0ZDSURRY2dCYXc0TEFBRUVBZ0lDQWdJQ0F3SURDeUFBSUFBb0Fzd0RLQUlFRVFFQUlBQWdBQ2dDR0NnQ0NCRUJBQ0FBUWNrQk5nSVVDeUFBSUFBb0Fzd0RLQUlBRVFBQUlnSkJBVWNOQWlBQUtBSWtJZ0loQlFKQUFrQUNRQUpBSUFKQkFXc09CQU1DQUFFQ0N5QUFLQUxZQVNJREtBS3dBU0VFUVFJaEJTQURLQUlBSWdaQkFVY2lBaUFES0FKWUlnTkJBa2R5SUFSQkEwZHlSUVJBUVFNaEFnd0RDeUFDSUFOQklrZHlSUVJBUVFjaEFpQUVRU05HRFFNTElBWkIwZ0JISUFOQnh3QkhjaUFFUWNJQVIzSkZCRUJCQWlFQ0RBTUxJQVpCOGdCSElBTkI1d0JIY2tVRVFFRUdJUUlnQkVIaUFFWU5Bd3NnQUNnQ25BSUVRRUVESVFJTUF3c2dBQ2dDcUFJRVFFRUNJUUlDUUFKQUlBQXRBS3dDSWdNT0FnVUFBUXRCQXlFQ0RBUUxJQUFvQWdBaUFpQUROZ0lZSUFKQjlBQTJBaFFnQUVGL0lBQW9BZ0FvQWdRUkFnQkJBeUVDREFNTElBQW9BZ0FpQWlBR05nSVlJQUpCOFFBMkFoUWdBaUFFTmdJZ0lBSWdBellDSENBQVFRRWdBaWdDQkJFQ0FFRURJUUlNQWd0QkJDRUZJQUFvQXFnQ1JRUkFRUVFoQWd3Q0MwRUVJUUlDUUFKQUlBQXRBS3dDSWdNT0F3TUJBQUVMUVFVaEFnd0NDeUFBS0FJQUlnSWdBellDR0NBQ1FmUUFOZ0lVSUFCQmZ5QUFLQUlBS0FJRUVRSUFRUVVoQWd3QkMwRUFJUUpCQUNFRkN5QUFJQVUyQWl3Z0FDQUNOZ0lvSUFCQkFEWUNpQUVnQUVHQUFqWUNZQ0FBUW9LQWdJQVFOd05ZSUFCQ0FUY0RVQ0FBUW9DQWdJQVFOd05JSUFCQ0FEY0RRQ0FBUW9DQWdJQ0FnSUQ0UHpjRE9DQUFRUUEyQW13Z0FFSUFOd0prSUFCQnlnRTJBaFFnQUNBQUtBS3NBeUlDTmdJMElBQWdBallDTUVFQkRBTUxJQUFnQUNnQ3pBTW9BZ0FSQUFBTUFnc2dBQ2dDQUNJQ0lBTTJBaGdnQWtFVk5nSVVJQUFnQUNnQ0FDZ0NBQkVCQUVFQUlRSUxJQUlMSWdKQkFrWUVRQ0FCQkVBZ0FDZ0NBQ0lCUVRVMkFoUWdBQ0FCS0FJQUVRRUFDeUFBRUpjRkN5QUNDd2NBSUFBUWxnVUxwZ2NCQVg4Z0FFRUFOZ0lFSUFGQjJnQkhCRUFnQUNnQ0FFS05nSUNBb0FzM0FoUWdBQ2dDQUNBQk5nSWNJQUFnQUNnQ0FDZ0NBQkVCQUFzZ0FrSG9BMGNFUUNBQUtBSUFRcGFBZ0lDQVBUY0NGQ0FBS0FJQUlBSTJBaHdnQUNBQUtBSUFLQUlBRVFFQUN5QUFLQUlBSVFFZ0FDZ0NEQ0VDSUFCQkJHcEJBRUhrQXhBN0dpQUFRUUUyQWhBZ0FDQUNOZ0lNSUFBZ0FUWUNBQ01BUVJCcklnSWtBQ0FBUVFBMkFnUWdBa0VBTmdJTVFkUUFFRG9pQVVVRVFDQUFLQUlBUWpnM0FoUWdBQ0FBS0FJQUtBSUFFUUVBQ3lBQlFZQ1U2OXdETmdJd0lBRkI4d0EyQWlnZ0FVSDBBRFlDSkNBQlFmVUFOZ0lnSUFGQjlnQTJBaHdnQVVIM0FEWUNHQ0FCUWZnQU5nSVVJQUZCK1FBMkFoQWdBVUg2QURZQ0RDQUJRZnNBTmdJSUlBRkIvQUEyQWdRZ0FVSDlBRFlDQUNBQlFnQTNBalFnQVVFQU5nSXNJQUZCMUFBMkFrd2dBVUlBTndJOElBRkNBRGNDUkNBQUlBRTJBZ1FDUUVIcGhRSVEvZ0lpQTBVTkFDQUNRZmdBT2dBTElBSWdBa0VNYWpZQ0FDQUNJQUpCQzJvMkFnUWdBMEh4aFFJZ0FoRHFBVUVCU0EwQUFrQWdBaTBBQzBFZ2NrSHRBRWNFUUNBQ0tBSU1JUU1NQVFzZ0FpQUNLQUlNUWVnSGJDSUROZ0lNQ3lBQklBTkI2QWRzTmdJc0N5QUNRUkJxSkFBZ0FFRUFOZ0s0QWlBQVFRQTJBaGdnQUVFQU5nSUlJQUJDQURjQ3BBRWdBRUlBTndLc0FTQUFRZ0EzQXJRQklBQkNBRGNDdkFFZ0FFSUFOd0xFQVNBQVFnQTNBc3dCSUFBZ0FFRUFRYXdCSUFBb0FnUW9BZ0FSQkFBaUFUWUMwQU1nQVVJQU53SmdJQUZCNlFBMkFod2dBVUhxQURZQ0NDQUJRZXNBTmdJRUlBRkI3QUEyQWdBZ0FVRUFOZ0pvSUFGQjZRQTJBaVFnQVVIcEFEWUNLQ0FCUWdBM0Ftd2dBVUhwQURZQ0xDQUJRZWtBTmdJd0lBRkNBRGNDZENBQlFla0FOZ0kwSUFGQjZRQTJBamdnQVVJQU53SjhJQUZCNlFBMkFqd2dBVUVBTmdLRUFTQUJRZWtBTmdKQUlBRkNBRGNDaUFFZ0FVSHBBRFlDUkNBQlFla0FOZ0pJSUFGQjZRQTJBa3dnQVVIcEFEWUNVQ0FCUWdBM0FwQUJJQUZCNlFBMkFsUWdBVUlBTndLWUFTQUJRUUEyQXFBQklBRkI2UUEyQWx3Z0FVSHRBRFlDSUNBQlFlMEFOZ0pZSUFCQkFEWUN1QU1nQUVFQU5nS1FBU0FBUVFBMkF0Z0JJQUFvQXRBRElnRkJBRFlDcEFFZ0FVRUFOZ0lZSUFGQ0FEY0NEQ0FBSUFCQkFFRWNJQUFvQWdRb0FnQVJCQUFpQVRZQ3pBTWdBVUVCTmdJWUlBRkNBRGNDRUNBQlFkWUJOZ0lNSUFGQjF3RTJBZ2dnQVVIWUFUWUNCQ0FCUWRrQk5nSUFJQUJCeUFFMkFoUUxEQUFnQUNnQ0dFRUJOZ0lrQzRzQkFRSi9JQUFvQWhnaUFTZ0NJRUVCUVlBZ0lBRW9BaHdRWGlJQ1JRUkFJQUVvQWlRRVFDQUFLQUlBSWdKQkt6WUNGQ0FBSUFJb0FnQVJBUUFMSUFBb0FnQWlBa0g3QURZQ0ZDQUFRWDhnQWlnQ0JCRUNBQ0FCS0FJZ1FmOEJPZ0FBSUFFb0FpQkIyUUU2QUFGQkFpRUNDeUFCUVFBMkFpUWdBU0FDTmdJRUlBRWdBU2dDSURZQ0FFRUJDMVFCQW44Z0FVRUJUZ1JBSUFFZ0FDZ0NHQ0lDS0FJRUlnTktCRUFEUUNBQUlBSW9BZ3dSQUFBYUlBRWdBMnNpQVNBQ0tBSUVJZ05LRFFBTEN5QUNJQU1nQVdzMkFnUWdBaUFDS0FJQUlBRnFOZ0lBQ3d0N0FRRi9JQUFvQWhnaUFrVUVRQ0FBSUFCQkFFRW9JQUFvQWdRb0FnQVJCQUFpQWpZQ0dDQUNJQUJCQUVHQUlDQUFLQUlFS0FJQUVRUUFOZ0lnSUFBb0FoZ2hBZ3NnQWlBQk5nSWNJQUpCN2dBMkFoZ2dBa0h2QURZQ0ZDQUNRZkFBTmdJUUlBSkI4UUEyQWd3Z0FrSHlBRFlDQ0NBQ1FnQTNBZ0FMdUFvQkRYOGpBRUVRYXlJQ0pBQUNRQ0FBS0FJWUlnWW9BZ1FpQkVVRVFDQUFJQVlvQWd3UkFBQkZCRUJCQUNFRURBSUxJQVlvQWdRaEJBc2dCaWdDQUNJQkxRQUFJUVVnQkVFQmF5SUVCSDhnQVVFQmFnVWdBQ0FHS0FJTUVRQUFSUVJBUVFBaEJBd0NDeUFHS0FJRUlRUWdCaWdDQUFzaUFVRUJhaUVJSUFSQkFXc2hCRUVPUVFBZ0FTMEFBQ0FGUVFoMGNpSUJRUUpySWdVZ0FTQUZTUnNnQVVFUFN4c2lBUVJBQTBBZ0JFVUVRQ0FBSUFZb0Fnd1JBQUJGQkVCQkFDRUVEQVFMSUFZb0FnQWhDQ0FHS0FJRUlRUUxJQUpCQW1vZ0Eyb2dDQzBBQURvQUFDQUlRUUZxSVFnZ0JFRUJheUVFSUFOQkFXb2lBeUFCUncwQUN3c2dCU0FCYXlFTUFrQUNRQUpBSUFBb0FyZ0RJZ05CNEFGcklnY0VRQ0FIUVE1R0JFQU1BZ1VNQXdzQUN5QUJJQXhxSVFVQ1FBSkFBa0FDUUNBQlFRNVBCRUFnQWkwQUFrSEtBRWNOQWlBQ0xRQURRY1lBUncwQklBSXRBQVJCeVFCSERRRWdBaTBBQlVIR0FFY05BU0FDTFFBR0RRRWdBRUVCTmdLY0FpQUFJQUl0QUFjaUFUb0FvQUlnQUNBQ0xRQUlJZ2M2QUtFQ0lBQWdBaTBBQ1NJSk9nQ2lBaUFBSUFJdkFBb2lBMEVJZENBRFFRaDJjaUlLT3dHa0FpQUFJQUl2QUF3aUEwRUlkQ0FEUVFoMmNpSUxPd0dtQWlBQlFRRnJRZjhCY1VFQ1R3UkFJQUFvQWdBaUF5QUJOZ0lZSUFOQitnQTJBaFFnQUNnQ0FDQUFMUUNoQWpZQ0hDQUFRWDhnQUNnQ0FDZ0NCQkVDQUNBQUxRQ2lBaUVKSUFBdkFhWUNJUXNnQUM4QnBBSWhDaUFBTFFDaEFpRUhJQUF0QUtBQ0lRRUxJQUFvQWdBaUF5QUJOZ0lZSUFOQjJRQTJBaFFnQXlBSk5nSW9JQU1nQzBILy93TnhOZ0lrSUFNZ0NrSC8vd054TmdJZ0lBTWdCellDSENBQVFRRWdBeWdDQkJFQ0FDQUNMUUFQSWdNZ0FpMEFEaUlCY2dSQUlBQW9BZ0FpQVVIY0FEWUNGQ0FCSUFJdEFBNDJBaGdnQUNnQ0FDQUNMUUFQTmdJY0lBQkJBU0FBS0FJQUtBSUVFUUlBSUFJdEFBOGhBeUFDTFFBT0lRRUxJQVZCRG1zaUJTQUJJQU5zUVFOc1JnMEVJQUFvQWdBaUFTQUZOZ0lZSUFGQjJnQTJBaFFNQXdzZ0FVRUdTUTBCSUFJdEFBSkJ5Z0JIRFFFTElBSXRBQU5CeGdCSERRQWdBaTBBQkVIWUFFY05BQ0FDTFFBRlFkZ0FSdzBBSUFJdEFBWU5BQUpBQWtBQ1FBSkFJQUl0QUFkQkVHc09CQUFCQXdJREN5QUFLQUlBSWdFZ0JUWUNHQ0FCUWU0QU5nSVVEQVFMSUFBb0FnQWlBU0FGTmdJWUlBRkI3d0EyQWhRTUF3c2dBQ2dDQUNJQklBVTJBaGdnQVVId0FEWUNGQXdDQ3lBQUtBSUFJZ0ZCMndBMkFoUWdBU0FDTFFBSE5nSVlJQUFvQWdBZ0JUWUNIQXdCQ3lBQUtBSUFJZ0VnQlRZQ0dDQUJRYzhBTmdJVUlBQkJBU0FBS0FJQUtBSUVFUUlBREFFTElBQkJBU0FBS0FJQUtBSUVFUUlBQ3d3Q0N3SkFJQUZCREVrTkFDQUNMUUFDUWNFQVJ3MEFJQUl0QUFOQjVBQkhEUUFnQWkwQUJFSHZBRWNOQUNBQ0xRQUZRZUlBUncwQUlBSXRBQVpCNVFCSERRQWdBaTBBQ0NFRElBSXRBQWNoQnlBQ0xRQUtJUWtnQWkwQUNTRUtJQUl0QUF3aEN5QUNMUUFMSVEwZ0FpMEFEU0VGSUFBb0FnQWlBVUhPQURZQ0ZDQUJJQVUyQWlRZ0FTQUxJQTFCQ0hSeU5nSWdJQUVnQ1NBS1FRaDBjallDSENBQklBTWdCMEVJZEhJMkFoZ2dBRUVCSUFFb0FnUVJBZ0FnQUNBRk9nQ3NBaUFBUVFFMkFxZ0NEQUlMSUFBb0FnQWlBU0FGTmdJWUlBRkIwQUEyQWhRZ0FFRUJJQUFvQWdBb0FnUVJBZ0FNQVFzZ0FDZ0NBQ0lCSUFNMkFoZ2dBVUhHQURZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFZZ0JEWUNCQ0FHSUFnMkFnQkJBU0VFSUF4QkFVZ05BQ0FBSUF3Z0FDZ0NHQ2dDRUJFQ0FBc2dBa0VRYWlRQUlBUUxOZ0FnQUVFQU5nTFlBU0FBUVFBMkFyZ0RJQUJCQURZQ2tBRWdBQ2dDMEFNaUFFRUFOZ0trQVNBQVFRQTJBaGdnQUVJQU53SU1DNzg2QVE1L0l3QkJvQUpySWdra0FDQUFLQUs0QXlFQkEwQUNRQUpBQWtBZ0FRMEFJQUFvQXRBREtBSU1SUVJBSUFBb0FoZ2lBaWdDQkNJQlJRUkFJQUFnQWlnQ0RCRUFBRVVFUUVFQUlRRU1CQXNnQWlnQ0JDRUJDeUFDS0FJQUlnTXRBQUFoQlNBQlFRRnJJZ1FFZnlBRFFRRnFCU0FBSUFJb0Fnd1JBQUJGQkVCQkFDRUJEQVFMSUFJb0FnUWhCQ0FDS0FJQUN5SUJRUUZxSVFNZ0JVSC9BVVpCQUNBQkxRQUFJZ0ZCMkFGR0cwVUVRQ0FBS0FJQUlnWWdCVFlDR0NBR1FUYzJBaFFnQUNnQ0FDQUJOZ0ljSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ0FCTmdLNEF5QUNJQVJCQVdzMkFnUWdBaUFETmdJQURBRUxJQUFRNGdORkJFQkJBQ0VCREFJTElBQW9BcmdESVFFTEFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FCUVFGckR2NEJEeEVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVSRVJFUkVTQVFJRkNRVUZCUVVEQkFVSUJRVUZEdzhQRHc4UER3OEFCd1lLRUFzUkVRME5EUTBORFEwTkRRME5EUTBORFEwUkVSRVJFUkVSRVF3UkVSRVJFUTRSQ3lBQUtBSUFJZ0pCNkFBMkFoUWdBRUVCSUFJb0FnUVJBZ0FnQUNnQzBBTWlBU2dDREFSQUlBQW9BZ0FpQWtIQUFEWUNGQ0FBSUFJb0FnQVJBUUFnQUNnQzBBTWhBUXNnQUVJQU53RG9BU0FBUWdBM0FQQUJJQUJDZ1lLRWlKQ2d3SUFCTndDQUFpQUFRb0dDaElpUW9NQ0FBVGNBK0FFZ0FFS0ZpcFNvMEtEQmdnVTNBSkFDSUFCQ2hZcVVxTkNnd1lJRk53Q0lBaUFBUWdBM0E3QUNJQUJCQURZQ0tDQUFRZ0EzQTVnQ0lBQkJBRG9BckFJZ0FFS0JnQVEzQXFRQ0lBQkJBRG9Bb2dJZ0FFR0JBanNCb0FJZ0FVRUJOZ0lNREJRTFFRQWhBU0FBUVFCQkFFRUFFTXNDRFJNTUVndEJBQ0VCSUFCQkFFRUJRUUFReXdJTkVnd1JDMEVBSVFFZ0FFRUFRUUJCQVJETEFnMFJEQkFMUVFBaEFTQUFRUUJCQVVFQkVNc0NEUkFNRHdzZ0FDZ0NBQ0lDSUFFMkFoZ2dBa0UvTmdJVUlBQWdBQ2dDQUNnQ0FCRUJBQXdQQ3lBQUtBSVlJZ1lvQWdRaEFTQUdLQUlBSVFNZ0FDZ0MwQU1vQWhCRkJFQWdBQ2dDQUNJQ1FUdzJBaFFnQWtFWWFrSEhoQUpCMEFBUVFCb2dBQ0FBS0FJQUtBSUFFUUVBQ3lBQlJRUkFJQUFnQmlnQ0RCRUFBRVVFUUVFQUlRRU1Ed3NnQmlnQ0FDRURJQVlvQWdRaEFRc2dBeTBBQUNFRUlBRkJBV3NpQWdSL0lBTkJBV29GSUFBZ0JpZ0NEQkVBQUVVRVFFRUFJUUVNRHdzZ0JpZ0NCQ0VDSUFZb0FnQUxJZ0V0QUFBaEJTQUNRUUZySWdNRWZ5QUJRUUZxQlNBQUlBWW9BZ3dSQUFCRkJFQkJBQ0VCREE4TElBWW9BZ1FoQXlBR0tBSUFDeUVDSUFBb0FnQWlBU0FDTFFBQUlnbzJBaGdnQVVIcEFEWUNGQ0FBUVFFZ0FDZ0NBQ2dDQkJFQ0FBSkFJQXBCQVhSQkJtb2dCRUVJZENBRmNrY2dDa0VFUzNKRkJFQWdDZzBCSUFBb0F1QUJEUUVMSUFBb0FnQWlCRUVNTmdJVUlBQWdCQ2dDQUJFQkFBc2dBQ0FLTmdMVUFpQUNRUUZxSVFzZ0EwRUJheUVDSUFvRVFFRUFJUVFEUUNBQ1JRUkFJQUFnQmlnQ0RCRUFBRVVFUUVFQUlRRU1FUXNnQmlnQ0FDRUxJQVlvQWdRaEFnc2dDeTBBQUNFREFrQWdCRVVOQUNBRVFRSnJJUWdnQkVFQmF5RUZRUUFoQVFOQUlBTWdBQ0FCUVFKMGFpZ0MyQUlvQWdCSEJFQWdCQ0FCUVFGcUlnRkhEUUVNQWdzTElBQW9BdGdDS0FJQUlRRUNRQ0FFUVFKSkRRQWdCVUVEY1NFSFFRRWhBeUFJUVFOUEJFQWdCVUY4Y1NFSUEwQWdBQ0FEUVFKMGFpSUZLQUxrQWlnQ0FDSU1JQVVvQXVBQ0tBSUFJZzBnQlNnQzNBSW9BZ0FpRGlBRktBTFlBaWdDQUNJRklBRWdBU0FGU0JzaUFTQUJJQTVJR3lJQklBRWdEVWdiSWdFZ0FTQU1TQnNoQVNBRFFRUnFJUU1nQ0VFRWF5SUlEUUFMQ3lBSFJRMEFBMEFnQUNBRFFRSjBhaWdDMkFJb0FnQWlCU0FCSUFFZ0JVZ2JJUUVnQTBFQmFpRURJQWRCQVdzaUJ3MEFDd3NnQVVFQmFpRURDeUFDUVFGcklRZ2dBQ2dDMkFFaEFRSkFJQUFvQWlRaUIwRUJUZ1JBSUFFZ0IwSFlBR3hxSVFWQkFDRUNBMEFnQXlBQktBSUFSZzBDSUFGQjJBQnFJUUVnQWtFQmFpSUNJQWRIRFFBTElBVWhBUXNnQUNnQ0FDSUNJQU0yQWhnZ0FrRUVOZ0lVSUFBZ0FDZ0NBQ2dDQUJFQkFBc2dBQ0FFUVFKMGFpQUJOZ0xZQWlBSUJIOGdDMEVCYWdVZ0FDQUdLQUlNRVFBQVJRUkFRUUFoQVF3UkN5QUdLQUlFSVFnZ0JpZ0NBQXNoQlNBQklBVXRBQUFpQWtFUGNUWUNHQ0FCSUFKQkJIWTJBaFFnQUNnQ0FDSUNJQUVvQWdBMkFoZ2dBaUFCS0FJVU5nSWNJQUVvQWhnaEFTQUNRZW9BTmdJVUlBSWdBVFlDSUNBQVFRRWdBaWdDQkJFQ0FDQUZRUUZxSVFzZ0NFRUJheUVDSUFSQkFXb2lCQ0FLUncwQUN3c2dBa1VFUUNBQUlBWW9BZ3dSQUFCRkJFQkJBQ0VCREE4TElBWW9BZ0FoQ3lBR0tBSUVJUUlMSUFBZ0N5MEFBRFlDbkFNZ0FDQUNRUUZySWdNRWZ5QUxRUUZxQlNBQUlBWW9BZ3dSQUFCRkJFQkJBQ0VCREE4TElBWW9BZ1FoQXlBR0tBSUFDeUlDTFFBQU5nS2dBeUFBSUFOQkFXc2lCQVIvSUFKQkFXb0ZJQUFnQmlnQ0RCRUFBRVVFUUVFQUlRRU1Ed3NnQmlnQ0JDRUVJQVlvQWdBTElnVXRBQUFpQWtFUGNUWUNxQU1nQUNBQ1FRUjJOZ0trQXlBQUtBSUFJZ0lnQUNnQ25BTTJBaGdnQWlBQUtBS2dBellDSENBQ0lBQW9BcVFETmdJZ0lBSWdBQ2dDcUFNMkFpUWdBa0hyQURZQ0ZFRUJJUUVnQUVFQklBSW9BZ1FSQWdBZ0FDZ0MwQU5CQURZQ0ZDQUtCRUFnQUNBQUtBS1FBVUVCYWpZQ2tBRUxJQVlnQkVFQmF6WUNCQ0FHSUFWQkFXbzJBZ0FnQUVFQU5nSzRBd3dOQ3lBQUtBSUFJZ0pCMXdBMkFoUWdBRUVCSUFJb0FnUVJBZ0FnQUVFQU5nSzRBMEVDSVFFTURBc2dBQ2dDR0NJRktBSUVJZ0ZGQkVBZ0FDQUZLQUlNRVFBQVJRUkFRUUFoQVF3TkN5QUZLQUlFSVFFTElBVW9BZ0FpQWkwQUFDRUVJQUZCQVdzaUF3Ui9JQUpCQVdvRklBQWdCU2dDREJFQUFFVUVRRUVBSVFFTURRc2dCU2dDQkNFRElBVW9BZ0FMSWdGQkFXb2hBaUFEUVFGcklRTWdBUzBBQUNBRVFRaDBjaUlFUVFKcklRRWdCRUVEVHdSQUEwQWdBU0VFSUFORkJFQWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd1BDeUFGS0FJRUlRTWdCU2dDQUNFQ0N5QUNMUUFBSVFFZ0EwRUJheUlJQkg4Z0FrRUJhZ1VnQUNBRktBSU1FUUFBUlFSQVFRQWhBUXdQQ3lBRktBSUVJUWdnQlNnQ0FBc2lBeTBBQUNFQ0lBQW9BZ0FpQmlBQk5nSVlJQVpCMFFBMkFoUWdBQ2dDQUNBQ05nSWNJQUJCQVNBQUtBSUFLQUlFRVFJQUFrQUNRQUpBSUFGQklFOEVRQ0FBS0FJQUlnWWdBVFlDR0NBR1FSMDJBaFFnQUNBQUtBSUFLQUlBRVFFQURBRUxJQUZCRUVrTkFRc2dBQ0FCYWlBQ09nRDRBUXdCQ3lBQUlBRnFJZ0VnQWtFRWRpSUdPZ0Q0QVNBQklBSkJEM0VpQVRvQTZBRWdBU0FHVFEwQUlBQW9BZ0FpQVNBQ05nSVlJQUZCSGpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFOQkFXb2hBaUFJUVFGcklRTWdCRUVDYXlFQklBUkJBa29OQUFzTElBRUVRQ0FBS0FJQUlnUkJERFlDRkNBQUlBUW9BZ0FSQVFBTElBVWdBellDQkNBRklBSTJBZ0FNREFzZ0FDZ0NHQ0lGS0FJRUlnRkZCRUFnQUNBRktBSU1FUUFBUlEwS0lBVW9BZ1FoQVFzZ0JTZ0NBQ0lDTFFBQUlRUWdBVUVCYXlJQkJIOGdBa0VCYWdVZ0FDQUZLQUlNRVFBQVJRMEtJQVVvQWdRaEFTQUZLQUlBQ3lJQ1FRRnFJUU1nQVVFQmF5RUJJQUl0QUFBZ0JFRUlkSElpQWtFQ2F5RUlJQUpCRTA4RVFBTkFJQUZGQkVBZ0FDQUZLQUlNRVFBQVJRME1JQVVvQWdBaEF5QUZLQUlFSVFFTElBQW9BZ0FpQWlBRExRQUFJZ2MyQWhnZ0FrSFNBRFlDRkVFQklRSWdBRUVCSUFBb0FnQW9BZ1FSQWdCQkFDRUVJQWxCQURvQWdBSWdBMEVCYWlFRElBRkJBV3NoQVFOQUlBRkZCRUFnQUNBRktBSU1FUUFBUlEwTklBVW9BZ0FoQXlBRktBSUVJUUVMSUFsQmdBSnFJQUpxSUFNdEFBQWlCam9BQUNBRFFRRnFJUU1nQVVFQmF5RUJJQVFnQm1vaEJDQUNRUUZxSWdKQkVVY05BQXNnQUNnQ0FDSUNJQWt0QUlFQ05nSVlJQUlnQ1MwQWdnSTJBaHdnQWlBSkxRQ0RBallDSUNBQ0lBa3RBSVFDTmdJa0lBSWdDUzBBaFFJMkFpZ2dBaUFKTFFDR0FqWUNMQ0FDSUFrdEFJY0NOZ0l3SUFrdEFJZ0NJUVlnQWtIWUFEWUNGQ0FDSUFZMkFqUWdBRUVDSUFJb0FnUVJBZ0FnQUNnQ0FDSUNJQWt0QUlrQ05nSVlJQUlnQ1MwQWlnSTJBaHdnQWlBSkxRQ0xBallDSUNBQ0lBa3RBSXdDTmdJa0lBSWdDUzBBalFJMkFpZ2dBaUFKTFFDT0FqWUNMQ0FDSUFrdEFJOENOZ0l3SUFrdEFKQUNJUVlnQWtIWUFEWUNGQ0FDSUFZMkFqUWdBRUVDSUFJb0FnUVJBZ0FnQkVHQUFrMUJBQ0FJUVJGcklnZ2dCRTRiUlFSQUlBQW9BZ0FpQWtFSk5nSVVJQUFnQWlnQ0FCRUJBQXRCQUNFQ0lBbEJBRUdBQWhBN0lRWWdCQVJBQTBBZ0FVVUVRQ0FBSUFVb0Fnd1JBQUJGRFE0Z0JTZ0NBQ0VESUFVb0FnUWhBUXNnQWlBR2FpQURMUUFBT2dBQUlBTkJBV29oQXlBQlFRRnJJUUVnQWtFQmFpSUNJQVJIRFFBTEN5QUFJQWRCRUdzaUFrRUNkR3BCeEFGcUlBQWdCMEVDZEdwQnRBRnFJQWRCRUhFaUN4c2hDaUFDSUFjZ0N4c2lBa0VFVHdSQUlBQW9BZ0FpQnlBQ05nSVlJQWRCSHpZQ0ZDQUFJQUFvQWdBb0FnQVJBUUFMSUFnZ0JHc2hDQ0FLS0FJQUlnSkZCRUFnQUVFQVFaZ0NJQUFvQWdRb0FnQVJCQUFpQWtFQU5nS1VBaUFLSUFJMkFnQUxJQUlnQmlrRGdBSTNBZ0FnQWlBR0tRT0lBamNDQ0NBQ0lBWXRBSkFDT2dBUUlBb29BZ0JCRVdvZ0JrR0FBaEJBR2lBSVFSQktEUUFMQ3lBSUJFQWdBQ2dDQUNJQ1FRdzJBaFFnQUNBQ0tBSUFFUUVBQ3lBRklBRTJBZ1FnQlNBRE5nSUFEQXNMSUFBb0FoZ2lCU2dDQkNJQlJRUkFJQUFnQlNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQlNnQ0JDRUJDeUFGS0FJQUlnSXRBQUFoQmlBQlFRRnJJZ01FZnlBQ1FRRnFCU0FBSUFVb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFVb0FnUWhBeUFGS0FJQUN5SUJRUUZxSVFJZ0EwRUJheUVFSUFFdEFBQWdCa0VJZEhJaUFVRUNheUVESUFGQkEwOEVRQU5BSUFSRkJFQWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd05DeUFGS0FJRUlRUWdCU2dDQUNFQ0N5QUNMUUFBSVFZZ0FDZ0NBQ0lCUWRNQU5nSVVJQUVnQmtFUGNTSUJOZ0lZSUFBb0FnQWdCa0VFZGlJS05nSWNJQUJCQVNBQUtBSUFLQUlFRVFJQUlBRkJCRThFUUNBQUtBSUFJZ1lnQVRZQ0dDQUdRU0EyQWhRZ0FDQUFLQUlBS0FJQUVRRUFDeUFBSUFGQkFuUnFJZ1lvQXFRQklnRkZCRUFnQUVFQVFZUUJJQUFvQWdRb0FnQVJCQUFpQVVFQU5nS0FBU0FHSUFFMkFxUUJDeUFEUVFGcklRc0NRQUpBQWtBQ1FBSi9JQW9FUUVFQUlRY2dBMEdBQVVvTkFnTkFJQUVnQjBFQmRDSURha0VCT3dFQUlBRWdBMEVDY21wQkFUc0JBQ0FCSUFOQkJISnFRUUU3QVFBZ0FTQURRUVp5YWtFQk93RUFJQUVnQTBFSWNtcEJBVHNCQUNBQklBTkJDbkpxUVFFN0FRQWdBU0FEUVF4eWFrRUJPd0VBSUFFZ0EwRU9jbXBCQVRzQkFDQUhRUWhxSWdkQndBQkhEUUFMSUF0QkFYVU1BUXRCQUNFSElBTkJ3QUJLRFFFRFFDQUJJQWRCQVhRaUEycEJBVHNCQUNBQklBTkJBbkpxUVFFN0FRQWdBU0FEUVFSeWFrRUJPd0VBSUFFZ0EwRUdjbXBCQVRzQkFDQUJJQU5CQ0hKcVFRRTdBUUFnQVNBRFFRcHlha0VCT3dFQUlBRWdBMEVNY21wQkFUc0JBQ0FCSUFOQkRuSnFRUUU3QVFBZ0IwRUlhaUlIUWNBQVJ3MEFDeUFMQ3lFSVFaREhBaUVHQWtBQ1FBSkFBa0FDUUFKQUlBaEJCR3NPTGdVSEJ3Y0hBQWNIQndjSEJ3RUhCd2NIQndjSEJ3SUhCd2NIQndjSEJ3Y0hBd2NIQndjSEJ3Y0hCd2NIQndRSEMwR2d4Z0loQmd3RUMwR2d4UUloQmd3REMwSHd3d0loQmd3Q0MwR2d3Z0loQmd3QkMwR1F3QUloQmdzZ0FrRUJhaUVDSUFSQkFXc2hCQXdDQ3lBQ1FRRnFJUUlnQkVFQmF5RUVRY0FBSVFoQjBMMENJUVlNQVFzZ0FrRUJhaUVDSUFSQkFXc2hCRUhRdlFJaEJpQUlRUUZJRFFFTFFRQWhBd05BQW44Z0NnUkFJQVJGQkVBZ0FDQUZLQUlNRVFBQVJRUkFRUUFoQVF3UkN5QUZLQUlFSVFRZ0JTZ0NBQ0VDQ3lBQ0xRQUFJUWNnQkVFQmF5SUVCSDhnQWtFQmFnVWdBQ0FGS0FJTUVRQUFSUVJBUVFBaEFRd1JDeUFGS0FJRUlRUWdCU2dDQUFzaUFpMEFBQ0FIUVFoMGNnd0JDeUFFUlFSQUlBQWdCU2dDREJFQUFFVUVRRUVBSVFFTUVBc2dCU2dDQkNFRUlBVW9BZ0FoQWdzZ0FpMEFBQXNoQnlBQklBWWdBMEVDZEdvb0FnQkJBWFJxSUFjN0FRQWdBa0VCYWlFQ0lBUkJBV3NoQkNBRFFRRnFJZ01nQ0VjTkFBc0xRUUFoQmdKQUlBQW9BZ0FpQXlnQ2FFRUNTQTBBQTBBZ0F5QUJJQVpCQVhRaUIyb3ZBUUEyQWhnZ0F5QUJJQWRCQW5KcUx3RUFOZ0ljSUFNZ0FTQUhRUVJ5YWk4QkFEWUNJQ0FESUFFZ0IwRUdjbW92QVFBMkFpUWdBeUFCSUFkQkNISnFMd0VBTmdJb0lBTWdBU0FIUVFweWFpOEJBRFlDTENBRElBRWdCMEVNY21vdkFRQTJBakFnQVNBSFFRNXlhaThCQUNFSElBTkIzd0EyQWhRZ0F5QUhOZ0kwSUFCQkFpQURLQUlFRVFJQUlBWkJOMHNOQVNBR1FRaHFJUVlnQUNnQ0FDRUREQUFMQUFzZ0N5QUlJQWhCQUNBS0cycHJJZ05CQUVvTkFBc0xJQU1FUUNBQUtBSUFJZ0ZCRERZQ0ZDQUFJQUVvQWdBUkFRQUxJQVVnQkRZQ0JDQUZJQUkyQWdBTUNnc2dBQ2dDR0NJQ0tBSUVJZ05GQkVBZ0FDQUNLQUlNRVFBQVJRUkFRUUFoQVF3S0N5QUNLQUlFSVFNTElBSW9BZ0FpQkMwQUFDRUJJQU5CQVdzaUF3Ui9JQVJCQVdvRklBQWdBaWdDREJFQUFFVUVRRUVBSVFFTUNnc2dBaWdDQkNFRElBSW9BZ0FMSVFRZ0EwRUJheUVESUFRdEFBQWdBVUVJZEhKQkJFY0VRQ0FBS0FJQUlnRkJERFlDRkNBQUlBRW9BZ0FSQVFBTElBTUVmeUFFUVFGcUJTQUFJQUlvQWd3UkFBQkZCRUJCQUNFQkRBb0xJQUlvQWdRaEF5QUNLQUlBQ3lJQkxRQUFJUVVnQTBFQmF5SUVCSDhnQVVFQmFnVWdBQ0FDS0FJTUVRQUFSUVJBUVFBaEFRd0tDeUFDS0FJRUlRUWdBaWdDQUFzaUFTMEFBQ0VESUFBb0FnQWlCa0hVQURZQ0ZDQUdJQU1nQlVFSWRISWlCVFlDR0NBQVFRRWdBQ2dDQUNnQ0JCRUNBQ0FBSUFVMkFwZ0NJQUlnQkVFQmF6WUNCQ0FDSUFGQkFXbzJBZ0FNQ1FzZ0FDZ0NHQ0lCS0FJRUlRTWdBU2dDQUNFQ0lBQW9BdEFES0FJUVJRUkFJQUFvQWdBaUJFRThOZ0lVSUFSQkdHcEJtSVVDUWRBQUVFQWFJQUFnQUNnQ0FDZ0NBQkVCQUFzQ1FBSkFJQUFvQWlSQkEwZ05BQ0FEUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FpMEFBQ0VFSUFOQkFXc2lBd1IvSUFKQkFXb0ZJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBTElRSWdBMEVCYXlFRElBSXRBQUFnQkVFSWRISkJHRWNFUUNBQUtBSUFJZ1JCRERZQ0ZDQUFJQVFvQWdBUkFRQUxJQU1FZnlBQ1FRRnFCU0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUN5RUNJQU5CQVdzaEF5QUNMUUFBUVExSEJFQWdBQ2dDQUNJRVFjWUFOZ0lVSUFRZ0FDZ0N1QU0yQWhnZ0FDQUFLQUlBS0FJQUVRRUFDeUFEQkg4Z0FrRUJhZ1VnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FBc2lBaTBBQUNFRUlBTkJBV3NpQXdSL0lBSkJBV29GSUFBZ0FTZ0NEQkVBQUVVRVFFRUFJUUVNQ3dzZ0FTZ0NCQ0VESUFFb0FnQUxJZ1ZCQVdvaEFpQURRUUZySVFNZ0JTMEFBQ0FFUVFoMGNrSC9BVWNOQUNBRFJRUkFJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQVNnQ0JDRURJQUVvQWdBaEFnc2dBa0VCYWlFRUlBTkJBV3NoQXlBQ0xRQUFRUU5IQkVBZ0JDRUNEQUVMSUFORkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUNFRUN5QUVRUUZxSVFJZ0EwRUJheUVESUFBb0F0Z0JJZ2NvQWxnZ0JDMEFBRWNOQUNBRFJRUkFJQUFnQVNnQ0RCRUFBRVVFUUVFQUlRRU1Dd3NnQUNnQzJBRWhCeUFCS0FJRUlRTWdBU2dDQUNFQ0N5QUNRUUZxSVFRZ0EwRUJheUVESUFjb0FnQWdBaTBBQUVjRVFDQUVJUUlNQVFzZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFBb0F0Z0JJUWNnQVNnQ0JDRURJQUVvQWdBaEJBc2dCRUVCYWlFQ0lBTkJBV3NoQXlBSEtBS3dBU0FFTFFBQVJ3MEFJQU5GQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQ0VDQ3lBQ1FRRnFJUVFnQTBFQmF5RURJQUl0QUFCQmdBRkhCRUFnQkNFQ0RBRUxJQU5GQkVBZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQ0VFQ3lBRUxRQUFJUVVnQTBFQmF5SURCSDhnQkVFQmFnVWdBQ0FCS0FJTUVRQUFSUVJBUVFBaEFRd0xDeUFCS0FJRUlRTWdBU2dDQUFzaUJFRUJhaUVDSUFOQkFXc2hBeUFFTFFBQUlBVkJDSFJ5RFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUl0QUFBaEJDQURRUUZySWdNRWZ5QUNRUUZxQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISU5BQ0FEUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FrRUJhaUVFSUFOQkFXc2hBeUFDTFFBQUJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUVDeUFFTFFBQUlRVWdBMEVCYXlJREJIOGdCRUVCYWdVZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQXNpQkVFQmFpRUNJQU5CQVdzaEF5QUVMUUFBSUFWQkNIUnlRUUZIRFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUl0QUFBaEJDQURRUUZySWdNRWZ5QUNRUUZxQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISU5BQ0FEUlFSQUlBQWdBU2dDREJFQUFFVUVRRUVBSVFFTUN3c2dBU2dDQkNFRElBRW9BZ0FoQWdzZ0FrRUJhaUVFSUFOQkFXc2hBeUFDTFFBQUJFQWdCQ0VDREFFTElBTkZCRUFnQUNBQktBSU1FUUFBUlFSQVFRQWhBUXdMQ3lBQktBSUVJUU1nQVNnQ0FDRUVDeUFFTFFBQUlRVWdBMEVCYXlJREJIOGdCRUVCYWdVZ0FDQUJLQUlNRVFBQVJRUkFRUUFoQVF3TEN5QUJLQUlFSVFNZ0FTZ0NBQXNpQkVFQmFpRUNJQU5CQVdzaEF5QUVMUUFBSUFWQkNIUnlRUUZIRFFBZ0EwVUVRQ0FBSUFFb0Fnd1JBQUJGQkVCQkFDRUJEQXNMSUFFb0FnUWhBeUFCS0FJQUlRSUxJQUl0QUFBaEJDQURRUUZySWdNRWZ5QUNRUUZxQlNBQUlBRW9BZ3dSQUFCRkJFQkJBQ0VCREFzTElBRW9BZ1FoQXlBQktBSUFDeUlGUVFGcUlRSWdBMEVCYXlFRElBVXRBQUFnQkVFSWRISkZEUUVMSUFBb0FnQWlCRUVjTmdJVUlBQWdCQ2dDQUJFQkFBc2dBRUVCTmdLd0FpQUJJQU0yQWdRZ0FTQUNOZ0lBREFnTElBQWdBQ2dDMEFNZ0FVRUNkR3BCNEFacktBSUFFUUFBRFFkQkFDRUJEQVlMSUFBZ0FDZ0MwQU1vQWh3UkFBQU5Ca0VBSVFFTUJRc2dBQ2dDQUNJQ0lBRTJBaGdnQWtIZUFEWUNGQ0FBUVFFZ0FDZ0NBQ2dDQkJFQ0FBd0ZDeUFBS0FJWUlnUW9BZ1FpQTBVRVFDQUFJQVFvQWd3UkFBQkZCRUJCQUNFQkRBVUxJQVFvQWdRaEF3c2dCQ2dDQUNJQkxRQUFJUVVnQTBFQmF5SUNCSDhnQVVFQmFnVWdBQ0FFS0FJTUVRQUFSUVJBUVFBaEFRd0ZDeUFFS0FJRUlRSWdCQ2dDQUFzaUFTMEFBQ0VESUFBb0FnQWlCa0hkQURZQ0ZDQUdJQUFvQXJnRE5nSVlJQUFvQWdBZ0F5QUZRUWgwY2lJRlFRSnJJZ00yQWh3Z0FFRUJJQUFvQWdBb0FnUVJBZ0FnQkNBQ1FRRnJOZ0lFSUFRZ0FVRUJhallDQUNBRlFRTkpEUVFnQUNBRElBQW9BaGdvQWhBUkFnQU1CQXNnQUNnQ0FDSUNJQUUyQWhnZ0FrSEdBRFlDRkNBQUlBQW9BZ0FvQWdBUkFRQU1Bd3RCQUNFQklBQkJBVUVBUVFBUXl3SU5BZ3dCQzBFQUlRRUxJQWxCb0FKcUpBQWdBUThMUVFBaEFTQUFRUUEyQXJnRERBQUxBQXVTQVFFQ2Z3SkFBa0FnQUNnQ3VBTWlBUVIvSUFFRklBQVE0Z05GRFFFZ0FDZ0N1QU1MSUFBb0F0QURLQUlVSWdGQjBBRnFSZ1JBSUFBb0FnQWlBaUFCTmdJWUlBSkI1QUEyQWhRZ0FFRURJQUFvQWdBb0FnUVJBZ0FnQUVFQU5nSzRBd3dDQ3lBQUlBRWdBQ2dDR0NnQ0ZCRURBQTBCQzBFQUR3c2dBQ2dDMEFNaUFDQUFLQUlVUVFGcVFRZHhOZ0lVUVFFTDF3RUJCbjhnQUNnQ0dDSUJLQUlFSWdKRkJFQWdBQ0FCS0FJTUVRQUFSUVJBUVFBUEN5QUJLQUlFSVFJTElBRW9BZ0FpQXkwQUFDRUVJQUpCQVdzaUJRUi9JQU5CQVdvRklBQWdBU2dDREJFQUFFVUVRRUVBRHdzZ0FTZ0NCQ0VGSUFFb0FnQUxJZ0l0QUFBaEF5QUFLQUlBSWdaQjNRQTJBaFFnQmlBQUtBSzRBellDR0NBQUtBSUFJQU1nQkVFSWRISWlBMEVDYXlJRU5nSWNJQUJCQVNBQUtBSUFLQUlFRVFJQUlBRWdCVUVCYXpZQ0JDQUJJQUpCQVdvMkFnQWdBMEVEVHdSQUlBQWdCQ0FBS0FJWUtBSVFFUUlBQzBFQkM1b0NBUWgvSUFBb0FnQWlCQ0FBS0FLNEF5SUNOZ0lZSUFSQi9BQTJBaFFnQUNnQ0FDQUJOZ0ljSUFCQmZ5QUFLQUlBS0FJRUVRSUFJQUZCQm1wQkIzRkIwQUZ5SVFRZ0FVRUJhMEVIY1VIUUFYSWhCU0FCUVFKcVFRZHhRZEFCY2lFR0lBRkJBV3BCQjNGQjBBRnlJUUVDUUFOQUlBRWdBa1lnQWtGNGNVSFFBVWR5SUFJZ0JrWnlJUWRCQWtFQklBSWdCRVliSVFnQ1FBTkFBa0FnQUNnQ0FDSURJQUkyQWhnZ0EwSGpBRFlDRkNBQUtBSUFRUUpCQXlBQ1FjQUJTQ0lER3lJSklBbEJBaUFJSUFJZ0JVWWJJQWNiSUFNYklnTTJBaHdnQUVFRUlBQW9BZ0FvQWdRUkFnQWdBMEVCYXc0REFnQUVBUXNMSUFBUTRnTkZCRUJCQUE4TElBQW9BcmdESVFJTUFRc0xJQUJCQURZQ3VBTUxRUUVMSWdFQmZVRi9JQUFxQWdBZ0FTb0NBSk1pQWtNQUFBQUFYaUFDUXdBQUFBQmRHd3MwQVFGL0l3QkJFR3NpQkNRQUlBQW9BZ0FoQUNBRUlBTTJBZ3dnQVNBQ0lBUkJER29nQUJFRUFDRUFJQVJCRUdva0FDQUFDMVFCQW44akFFRVFheUlFSkFBZ0FDZ0NCQ0lGUVFGMUlBRnFJUUVnQUNnQ0FDRUFJQVZCQVhFRVFDQUJLQUlBSUFCcUtBSUFJUUFMSUFRZ0F6WUNEQ0FCSUFJZ0JFRU1haUFBRVFZQUlBUkJFR29rQUF0U0FRSi9Jd0JCRUdzaUF5UUFJQUFvQWdRaUJFRUJkU0FCYWlFQklBQW9BZ0FoQUNBRVFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QURJQUkyQWd3Z0FTQURRUXhxSUFBUkFnQWdBMEVRYWlRQUN6WUJBWDhqQUVFUWF5SUVKQUFnQUNnQ0FDRUFJQVFnQXhDTEF5QUJJQUlnQkNBQUVRUUFJUUFnQkJBNUdpQUVRUkJxSkFBZ0FBdFdBUUovSXdCQkVHc2lCQ1FBSUFBb0FnUWlCVUVCZFNBQmFpRUJJQUFvQWdBaEFDQUZRUUZ4QkVBZ0FTZ0NBQ0FBYWlnQ0FDRUFDeUFFSUFNUWl3TWdBU0FDSUFRZ0FCRUdBQ0FFRURrYUlBUkJFR29rQUF0VUFRSi9Jd0JCRUdzaUF5UUFJQUFvQWdRaUJFRUJkU0FCYWlFQklBQW9BZ0FoQUNBRVFRRnhCRUFnQVNnQ0FDQUFhaWdDQUNFQUN5QURJQUlRaXdNZ0FTQURJQUFSQWdBZ0F4QTVHaUFEUVJCcUpBQUxDd0FnQVNBQ0lBQVJBZ0FMS3dJQmZ3RjhJd0JCRUdzaUFpUUFJQUlnQVNBQUVSOEFPUU1JSUFJckF3Z2hBeUFDUVJCcUpBQWdBd3NMQUNBQklBSWdBQkVVQUFzbkFRRi9Jd0JCRUdzaUFTUUFJQUVnQUJFT0FEWUNEQ0FCS0FJTUlRQWdBVUVRYWlRQUlBQUxDUUFnQVNBQUVRRUFDdzhBSUFFZ0FDZ0NBR29nQWpZQ0FBc05BQ0FCSUFBb0FnQnFLQUlBQ3hnQkFYOUJFQkJMSWdCQ0FEY0RBQ0FBUWdBM0F3Z2dBQXMzQVFGL0l3QkJFR3NpQWlRQUlBSWdBU0FBRVFJQVFSQVFTeUlBSUFJcEFnQTNBZ0FnQUNBQ0tRSUlOd0lJSUFKQkVHb2tBQ0FBQ3lzQkFYOGpBRUVRYXlJREpBQWdBeUFCSUFJZ0FCRURBRFlDRENBREtBSU1JUUFnQTBFUWFpUUFJQUFMTlFFQmZ5TUFRUkJySWdJa0FDQUNJQUVRaXdNZ0FpQUNJQUFSQUFBMkFnd2dBaWdDRENFQUlBSVFPUm9nQWtFUWFpUUFJQUFMTUFFQmZ5TUFRUkJySWdNa0FDQURJQUVnQWlBQUVRWUFRUXdRU3lBREVJa0VJUUFnQXhCeklBTkJFR29rQUNBQUN5a0JBWDhqQUVFUWF5SUNKQUFnQWlBQklBQVJBQUEyQWd3Z0FpZ0NEQ0VBSUFKQkVHb2tBQ0FBQ3kwQkFYOGpBRUVRYXlJRUpBQWdCQ0FCSUFJZ0F5QUFFUVFBTmdJTUlBUW9BZ3doQUNBRVFSQnFKQUFnQUFzV0FDQUNLQUlBSVFJZ0FDQUJFRHdnQWpZQ0FFRUJDMklCQW44Z0FSQkRJQUpMQkVBZ0FTQUNFRHdoQXlNQVFSQnJJZ0lrQUNNQVFSQnJJZ0VrQUNBQklBSkJDR29pQkRZQ0RDQUJRUXhxSUFNb0FnQVFxUVVnQVVFUWFpUUFJQUJCNU9nRElBUVFGRFlDQUNBQ1FSQnFKQUFQQ3lBQUVMTUZDdzhBSUFBRVFDQUFFSE1MSUFBUU13c0dBRUdBZ1FJTEpBQWdBaUFBSUFFUWx3RWlBRWNFZnlBQUlBSVFQaUFDRURjUTZ3WUZJQUFMR2tFQkM0Z0JBUUovSUFFUVZ5QUNTd1JBSUFFZ0FoQ1hBU0VCSXdCQkVHc2lBaVFBSUFCQmdQOEJBbjhqQUVFUWF5SUFKQUFnQUNBQ1FRaHFJZ1EyQWd3Z0FFRU1hZ0ovSUFFUU4wRUVhaEE2SWdNZ0FSQTNOZ0lBSUFOQkJHb2dBUkErSUFFUU54QkFHaUFEQ3hDcEJTQUFRUkJxSkFBZ0JBc1FGRFlDQUNBQ1FSQnFKQUFQQ3lBQUVMTUZDOEVDQVFWL0lBRWdBQkJYSWdOTEJFQWpBRUVnYXlJRkpBQUNRQ0FCSUFOcklnRWdBQkEwS0FJQUlBQW9BZ1JyUVF4dFRRUkFJd0JCRUdzaUF5UUFJQU1nQUNBQkVPUUNJZ0VvQWdRaEJBTkFJQUVvQWdnZ0JFY0VRQ0FBRURRZ0FTZ0NCQ0FDRUl3RElBRWdBU2dDQkVFTWFpSUVOZ0lFREFFTEN5QUJFSFFnQTBFUWFpUUFEQUVMSUFBUU5DRURJQVZCQ0dvZ0FDQUFFRmNnQVdvUXV3SWdBQkJYSUFNUXNnVWlBeUVFSXdCQkVHc2lCaVFBSUFZZ0JFRUlhaUFCRUs0R0lnRW9BZ0FoQndOQUlBRW9BZ1FnQjBjRVFDQUVLQUlRSUFFb0FnQWdBaENNQXlBQklBRW9BZ0JCREdvaUJ6WUNBQXdCQ3dzZ0FSQ3dBU0FHUVJCcUpBQWdBQ0FERUxFRklBTVFzQVVMSUFWQklHb2tBQThMSUFFZ0Ewa0VRQ0FBS0FJQUlBRkJER3hxSVFFZ0FCQlhJUUlnQUNBQkVLNEZJQUFnQWhEYkFnc0xvZ0VCQW44Z0FDZ0NCQ0FBRURRb0FnQkhCRUFqQUVFUWF5SURKQUFnQXlBQVFRRVE1QUloQWlBQUVEUWdBaWdDQkNBQkVJd0RJQUlnQWlnQ0JFRU1hallDQkNBQ0VIUWdBMEVRYWlRQUR3c2pBRUVnYXlJREpBQWdBQkEwSWdJZ0EwRUlhaUFBSUFBUVYwRUJhaEM3QWlBQUVGY2dBaEN5QlNJQ0tBSUlJQUVRakFNZ0FpQUNLQUlJUVF4cU5nSUlJQUFnQWhDeEJTQUNFTEFGSUFOQklHb2tBQXM2QVFGL0lBQUVRQ0FBRVA4QklBQW9BZ0FFUUNBQUlBQW9BZ0FRcmdVZ0FCQTBHaUFBS0FJQUlRRWdBQkM5QVJvZ0FSQXpDd3NnQUJBekN3WUFRWkQ4QVF2ZUlBSUtmQTEvSXdCQk1Hc2lFaVFBUWFqK0EwR28vZ01vQWdBaURVRUJhallDQUNBU0lBMDJBaXdnRWtFc2FoQjlJUk1nRWlnQ0xDRU5JQk1nQVRZQzFBRWdFeUFBTmdMUUFTQVRJQTAyQWdBZ0V5QUFJQUZzSWdCQkFuUWlBVFlDeUFFZ0V5QUJFRG8yQXNRQklCTWdBQkE2TmdMTUFTTUFRU0JySWhBa0FDQVFJQUkyQWhnZ0VDQU5OZ0ljSUJCQi9QMERJQkJCSEdvUWNqWUNFQ0FRRUdrMkFnZ0NRQ0FRUVJCcUlCQkJDR29RZHcwQUlCQkJIR29RZlNFUklCQkJrUDRESUJCQkdHb1FjallDRUNBUUVHazJBZ2dnRUVFUWFpQVFRUWhxRUhjTkFDQVJRUWhxSUJCQkdHb1F3Z1ZCdUFFUVFDRUFJQkVvQWd3aEFRSkFJQkVvQWdnaUFpQVJLQUxRQVVZRVFDQUJJQkVvQXRRQlJnMEJDeUFRSUFFMkFnUWdFQ0FDTmdJQVFRQkJBa0g3NkFFZ0VCQTRJQkVvQXRBQklRRWdBQ2dDQUNFQ0lBQW9BZ1FoRFNBQUlCRW9BdFFCSWc0MkFnUWdBQ0FCTmdJQUlBNjNJQTIzb3lFRElBRzNJQUszb3lFRVFRQWhBUU5BSUFGQkJFY0VRQ0FBSUFGQkEzUWlEV29pQWlBRUlBQWdEV29pRFNzRENLSTVBd2dnQWlBRElBMHJBeWlpT1FNb0lBSWdEU3NEU0RrRFNDQUJRUUZxSVFFTUFRc0xBa0FDUUFKQUFrQUNRQUpBSUFBb0FyQUJJZ0ZCQVdzT0JBTUNBUUFGQ3lBQUlBQXJBMmc1QTJnZ0FDQUFLd053T1FOd0lBQWdBQ3NEZURrRGVDQUFJQUFyQTRBQk9RT0FBU0FBSUFRZ0FDc0RpQUdpT1FPSUFTQUFJQU1nQUNzRGtBR2lPUU9RQVNBQUlBUWdBQ3NEbUFHaU9RT1lBU0FBSUFNZ0FDc0RvQUdpT1FPZ0FTQUFJQUFyQTZnQk9RT29BUXdEQ3lBQUlBUWdBQ3NEYUtJNUEyZ2dBQ0FESUFBckEzQ2lPUU53SUFBZ0FDc0RlRGtEZUNBQUlBQXJBNEFCT1FPQUFTQUFJQUFyQTRnQklBUWdBNktqT1FPSUFTQUFJQUFyQTVBQklBTWdCQ0FFb2lBRG9xS2pPUU9RQVF3Q0N5QUFJQVFnQUNzRGFLSTVBMmdnQUNBRElBQXJBM0NpT1FOd0lBQWdBQ3NEZURrRGVDQUFJQUFyQTRBQklBUWdBNktqT1FPQUFTQUFJQUFyQTRnQklBTWdCQ0FFb2lBRG9xS2pPUU9JQVF3QkN5QUFJQVFnQUNzRGFLSTVBMmdnQUNBRElBQXJBM0NpT1FOd0lBQWdBQ3NEZURrRGVDQUFJQUFyQTRBQklBUWdBNktqT1FPQUFRc2dBQ0FCTmdLd0FRc0xJQkVReFFVZ0VRSi9Jd0JCSUdzaURTUUFRZEFCRURvaUFRUkFBa0FnQVNBQVFiZ0JFRUFpRGlBQUtBSUFRUjVxSWdFMkFzQUJJQUFvQWdRaEFpQU9RUTgyQXN3QklBNUJEellDeUFFZ0RpQUNRUjVxSWhRMkFzUUJJQTRnQVNBVWJFRURkQ0lQRURvaUFqWUN1QUVnQWtVTkFDQU9JQThRT2lJUE5nSzhBU0FQUlEwQUlCUkJBQ0FVUVFCS0d5RVlJQUZCQUNBQlFRQktHeUVXSUFCQjZBQnFJUUVnQUNnQ3NBRWhGd05BSUJVZ0dFY0VRQ0FWUVE5cnNyc2hCa0VBSVJRRFFDQVVJQlpIQkVBZ0ZFRVBhN0s3SWdraEF3SkFJQTBDZkFKQUFrQUNRQUpBSUJkQkFXc09CQU1DQVFBRkN5QU5JQUVyQXpBaUJDQUJLd01nSWdVZ0FTc0RHQ0lISUFNZ0JLRWdBU3NEUUNJRW9pQUZveUlESUFPaUlBWWdBU3NET0NJS29TQUVvaUFCS3dNb0lndWpJZ1FnQktLZ0lnVWdBeUFESUFPZ29xQ2lJQVFnQVNzREVDSUlJQWlnSUFPaW9pQURJQUVyQXdBZ0JhSkVBQUFBQUFBQThEK2dJQVVnQlNBQkt3TUlvcUtnSWd5aW9LQ2lvRGtEQ0NBS0lBc2dCQ0FISUFlZ0lBT2lvaUFJSUFVZ0JDQUVJQVNnb3FDaUlBUWdES0tnb0tLZ0RBTUxJQUVyQXhBaUJ5QUdJQUVyQXdpaG9pRUVJQU1nQVNzREFDSUZvU0FIb2lJRFJBQUFBQUFBQUFBQVlpQUVSQUFBQUFBQUFBQUFZbkpGQkVBZ0RTQUZPUU1JSUFFckF3Z01Bd3NnRFNBRklBRXJBeGdnQTBRQUFBQUFBQUR3UHlBRElBT2lJQVFnQktLZ0lnTWdBU3NESUVRQUFBQUFoTmVYUWFPaW9TQURJQU1nQVNzREtFUUFBQUFBaE5lWFFhTkVBQUFBQUFCcStNQ2pvcUtnSWdPaW9xQTVBd2dnQVNzRENDQUVJQU9pb0F3Q0N5QUJLd01RSWdjZ0JpQUJLd01Jb2FJaEJDQURJQUVyQXdBaUJhRWdCNklpQTBRQUFBQUFBQUFBQUdJZ0JFUUFBQUFBQUFBQUFHSnlSUVJBSUEwZ0JUa0RDQ0FCS3dNSURBSUxJQTBnQlNBRFJBQUFBQUFBQVBBL0lBTWdBNklnQkNBRW9xQWlBeUFCS3dNWVJBQUFBQUNFMTVkQm82S2hJQU1nQXlBQkt3TWdSQUFBQUFDRTE1ZEJvMFFBQUFBQUFHcjR3S09pb3FBaUE2S2dPUU1JSUFFckF3Z2dCQ0FEb3FBTUFRc2dBU3NERUNJSElBWWdBU3NEQ0tHaUlRUWdBeUFCS3dNQUlnV2hJQWVpSWdORUFBQUFBQUFBQUFCaUlBUkVBQUFBQUFBQUFBQmlja1VFUUNBTklBVTVBd2dnQVNzRENBd0JDeUFOSUFVZ0F5QURJQU9pSUFRZ0JLS2dJQUVyQXhoRUFBQUFBSVRYbDhHam9rUUFBQUFBQUFEd1A2QWlBNktnT1FNSUlBRXJBd2dnQkNBRG9xQUxPUU1BQ3lBQ0lBMHJBd2kyT0FJQUlBSWdEU3NEQUxZNEFnUWdBU0FKSUFZZ0RVRVlhaUFOUVJCcUlCY1FwQVlnRHlBTkt3TVl0amdDQUNBUElBMHJBeEMyT0FJRUlCUkJBV29oRkNBUFFRaHFJUThnQWtFSWFpRUNEQUVMQ3lBVlFRRnFJUlVNQVFzTElBMUJJR29rQUNBT0RBSUxDMEVBUVFOQmdRMUJBQkE0UVFFUUFRQUxJZ0kyQXNBQklBSkZCRUJCQUVFRFFhcnBBVUVBRURnTUFRc2dFUUovUWFDSHJ3TVFPaUlCQkVBQ1FDQUJRUUEyQW9pSHJ3TWdBVUtBZ0lDQWNEY0RBQ0FCUVFNMkFwaUhyd01nQVVLQWdJQ0FnSUNBOEQ4M0E1Q0hyd01nQVVLQWdJQ0FJRGNER0NBQlF1UUFOd01RSUFGQ2dJQ0FnQkEzQXdnZ0FTQUNOZ0lnSUFGQjVJYW5BbXBCQURZQ0FDQUJJQUlvQWdBaURUWUNKQ0FDS0FJRUlRSWdBVUhvaHFjQ2FrRUFOZ0lBSUFGQkFEWUNzSGdnQVVFQU5nSXNJQUVnQWpZQ0tDQUJRUUEyQXZpS3BnSWdBU0FDSUExc1FRRjBFRG9pQWpZQzRJYW5BaUFDUlEwQUlBRkJBRFlDOElhdkF5QUJRUUFRcVFjZ0FVRi9OZ0wwaHE4RElBRkJBQkRKQmhvZ0FRUkFJQUZCQURZQy9JYXZBeUFCUVFjMkF2aUdyd01MSUFFTUFnc0xRUUJCQTBHUkMwRUFFRGhCQVJBQkFBc2lBVFlDMkFFZ0FVVUVRRUVBUVFOQjBPa0JRUUFRT0F3QkN5QVJLQUx3QXlFQ0l3QkJFR3NpRFNRQUFrQWdBVVVOQUNBQktBSUVJQUpHRFFBZ0FrRU9UUVJBQWtBQ1FFRUJJQUowUWQ4ZmNRUkFJQUVnQWpZQ0JDQUJJQUlRemdZMkFnZ2dBU2dDR0VFQmF3NEVBUVFFQWdRTElBRWdBallDQkNBQklBSVF6Z1kyQWdnQ1FBSkFJQUVvQWhnT0JBQUZCUUVGQ3lBQlFRRTJBaGdNQkFzZ0FVRUVOZ0lZREFNTElBRkJCRFlDR0F3Q0N5QUJRUU0yQWhnTUFRc2dEU0FDTmdJQVFRQkJBMEdod2dBZ0RSQTRDeUFOUVJCcUpBQWdFUUovSUFCQkNHb2hBVUVFRURvaUFBUkFJQUFnQVJEc0F5SUJOZ0lBSUFFRWZ5QUFCU0FBRUROQkFBc01BUXRCQUVFRFFZQUxRUUFRT0VFQkVBRUFDeUlBTmdMY0FTQUFSUVJBUVFCQkEwSDE2UUZCQUJBNERBRUxJQkVvQXNBQklRRWdFU3NEMkFJaEJDQVJLd1BnQWlFRElCRkI4QUpxSVJWQkFDRU9RUUFoQWlNQVFaQURheUlBSkFBZ0FTZ0NCQ0VYSUFFb0FnQWhHQUpBQW44Z0FFR3dBbW9oRFNNQVFlQUFheUlQSkFBQ1FDQUJRUWhxSWhRckExaEVBQUFBQUFBQUFBQm1SUVJBQTBCQkFDRUJJQTVCQTBZTkFnTkFJQUZCQkVjRVFDQUJRUU4wSWhZZ0R5QU9RUVYwSWhscWFpQVVJQmxxSUJacUt3TUFtamtEQUNBQlFRRnFJUUVNQVFzTElBNUJBV29oRGd3QUN3QUxBMEJCQUNFQklBNUJBMFlOQVFOQUlBRkJCRWNFUUNBQlFRTjBJaFlnRHlBT1FRVjBJaGxxYWlBVUlCbHFJQlpxS3dNQU9RTUFJQUZCQVdvaEFRd0JDd3NnRGtFQmFpRU9EQUFMQUF0QkFDRU9BMzlCQUNFQklBNUJBMFlFZnlBTklBOHJBMEFpQmlBUEt3TklJZ1VnRHlzRFVDSUhFSWNFSWdnNUExQWdBQ0FHSUFpaklnWTVBNUFDSUFBZ0JTQU5Ld05Rb3lJRk9RT1lBaUFBSUFjZ0RTc0RVS01pQnprRG9BSWdBQ0FQS3dOWUlBMHJBMUNqT1FPb0FpQU5JQVlnQlNBSElBOHJBeUFpQlNBUEt3TW9JZ2NnRHlzRE1DSUlFSVVFSWdZNUF6QWdEU0FGSUFZZ0FDc0RrQUtpb1NJRklBY2dCaUFBS3dPWUFxS2hJZ2NnQ0NBR0lBQXJBNkFDb3FFaUJoQ0hCQ0lJT1FNb0lBQWdCU0FJb3prRDhBRWdBQ0FISUEwckF5aWpPUVA0QVNBQUlBWWdEU3NES0tNNUE0QUNJQTBnQUNzRGtBSWdBQ3NEbUFJZ0FDc0RvQUlnRHlzREFDSUhJQThyQXdnaUNDQVBLd01RSWdrUWhRUWlCamtERUNBTklBQXJBL0FCSUFBckEvZ0JJQUFyQTRBQ0lBY2dDQ0FKRUlVRUlnVTVBd2dnRFNBSElBVWdBQ3NEOEFHaW9TQUdJQUFyQTVBQ29xRWlCeUFJSUFVZ0FDc0QrQUdpb1NBR0lBQXJBNWdDb3FFaUNDQUpJQVVnQUNzRGdBS2lvU0FHSUFBckE2QUNvcUVpQmhDSEJDSUZPUU1BSUFBZ0J5QUZvemtEMEFFZ0FDQUlJQTByQXdDak9RUFlBU0FBSUFZZ0RTc0RBS001QStBQklBQWdEeXNET0NBTkt3TXdJQUFyQTZnQ0lnYWlvU0FOS3dNb295SUZPUU9JQWlBQUlBOHJBeGdnQlNBTkt3TUlvcUVnQmlBTkt3TVFvcUVnRFNzREFLTTVBK2dCUVFBaERnTi9RUUFoQVNBT1FRTkdCSDhnRDBIZ0FHb2tBRUVBQlFOQUlBRkJBMGNFUUNBTklBNUJCWFJxSUFGQkEzUnFJaFFnRkNzREFDQU5Ld05Rb3prREFDQUJRUUZxSVFFTUFRc0xJQTVCQVdvaERnd0JDd3NGQTBBZ0FVRUVSd1JBSUEwZ0RrRUZkR29nQVVFRGRHcENBRGNEQUNBQlFRRnFJUUVNQVFzTElBNUJBV29oRGd3QkN3dEJBRTRMQkVBZ0YwRUJhN2NoQmdOQUlBSkJCRVlFUUNBQUt3T0FBeUVGUVFBaEFRTkFRUUFoQWlBQlFRTkhCRUFEUUNBQ1FRTkhCRUFnQWtFRGRDSU5JQUJCZ0FGcUlBRkJHR3hxYWlBQVFiQUNhaUFCUVFWMGFpQU5haXNEQUNBRm96a0RBQ0FDUVFGcUlRSU1BUXNMSUFGQkFXb2hBUXdCQ3dzZ0FFSUFOd01nSUFCQ0FEY0RPQ0FBUVVCclFnQTNBd0FnQUVJQU53TklJQUJDQURjRGFDQUFJQVFnQTZBZ0JDQURvU0lGb3prRFVDQUFJQU1nQTZBZ0JLSWdCYU01QTFnZ0FDQUFLd09nQVVRQUFBQUFBQUFBd0tJZ0JxTTVBeWdnQUNBQUt3T29BU0lESUFPZ0lBYWpSQUFBQUFBQUFQQy9vSm81QXpBZ0FFSUFOd01ZSUFCQ0FEY0RZQ0FBSUFBckE0QUJJZ01nQTZBZ0dFRUJhN2NpQTZNNUF3QWdBQ0FBS3dPSUFTSUVJQVNnSUFPak9RTUlJQUFnQUNzRGtBRWlCQ0FFb0NBRG8wUUFBQUFBQUFEd3Y2Q2FPUU1RSUFCQ0FEY0RlQ0FBUW9DQWdJQ0FnSUQ0djM4M0EzQWdBQ3NEcUFJaEJTQUFLd09JQWlFSFFRQWhBU0FBS3dQb0FTRUlBMEFnQVVFRVJnMEVJQUFnQVVFRmRHb2lEU3NERUNFRElBMHJBd2doQkNBTkt3TUFJUVpCQUNFQ0EwQWdBa0VEUndSQUlCVWdBa0VDZENBQmFrRURkR29nQmlBQVFkQUJhaUFDUVFOMGFpSU9Ld01Bb2lBRUlBNHJBeUNpb0NBRElBNUJRR3NyQXdDaW9Ea0RBQ0FDUVFGcUlRSU1BUXNMSUFGQkEzUWdGV29nRFNzREdDQUdJQWlpSUFRZ0I2S2dJQU1nQmFLZ29Ea0RZQ0FCUVFGcUlRRU1BQXNBQlNBQVFiQUNhaUFDUVFOMGFpSUJJZzBnQVVGQWF5c0RBQ0FHb2lBTkt3TWdvVGtESUNBQ1FRRnFJUUlNQVFzQUN3QUxRUUJCQTBHN0RFRUFFRGdMSUFCQmtBTnFKQUFnRVNBUktBTEFBUkNsQlRZQzRBRUxJQkJCSUdva0FDQVNJQk1vQXNnQk5nSWdRUUJCQVVHZzdnRWdFa0VnYWhBNElCTW9BZ0FoQUNBVEtBTEVBU0VCSUJNb0FzZ0JJUUlnRWlBVEtBTE1BVFlDRkNBU1FiRCtBellDRUNBU0lCTkI4QUpxTmdJTUlCSWdBallDQ0NBU0lBRTJBZ1FnRWlBQU5nSUFRYXY3QTBHOTdnRWdFaEFPR2lBVEtBSUFJUUFnRWtFd2FpUUFJQUFML2gwREQzOERmQWQ5SXdCQk1Hc2lDeVFBSUFzZ0FEWUNMQ0FMUWZ6OUF5QUxRU3hxRUhJMkFnQWdDeEJwTmdJb0FuOGdDeUFMUVNocUVIY0VRRUhFNndNb0FnQU1BUXNnQzBFc2FoQjlJUUFnQzBFQVFTZ1FPeUVGSUFBb0FzUUJJUUlnQlVFQk5nSVFJQVVnQWpZQ0FDQUZJQUFvQXN3Qk5nSU1JQUFvQXRnQklRRWpBRUhRQUdzaUJ5UUFBa0FDUUNBQlJTQUZSWElOQUNBQlFRQTJBaXdnQVVFc2FpRU1Ba0FDUUFKQUlBRW9BdlNHcndNaUFFRUVSZ1JBSUFFb0F2eUdyd01pQUVFQlRnUkFJQUVnQUVFQmF6WUMvSWF2QXd3Q0N5QUhJQUVvQWhBaUJDQUJLQUtBaDY4RGFpSUFRZjhCSUFCQi93RklHeUlHTmdKRUlBRW9Bb1NIcndNaEFpQUhJQVEyQWt4QkFDRUFJQWNnQkNBQ2F5SUNRUUFnQWtFQVNoc2lDRFlDU0NBQlFUQnFJUW9nQVVHdytBQnFJUTBnQVVHNCtBQnFJUUlnQVVIZ2hxY0NhaUVKQWtBRFFDQUFRUU5IQkVBZ0JTZ0NEQ0FCS0FJa0lBRW9BaWdnQVNnQ0FDQUJLQUlNSUFCQkFuUWlEaUFIUWNRQWFtb29BZ0FnQVNnQ0ZDQUpRUUFReHdOQkFFZ05BaUFCS0FJa0lBRW9BaWdnQ1NBQktBSVVJQUlnRFJEcUJVRUFTQTBDSUFVb0FnQWdBU2dDSkNBQktBSW9JQUVvQWdRZ0FpQUJLQUt3ZUNBQktBTHdocThESUFFb0FoUWdBU2dDR0NBQktBSWdRYmdCYWlBQkt3T1FoNjhESUFvZ0RDQUJLQUtZaDY4REVLUUZRUUJJRFFJZ0IwRTRhaUFPYWlBTUtBSUFOZ0lBSUFCQkFXb2hBQXdCQ3dzQ1FDQUJLQUlBUVFGSEJFQWdCeWdDUUNFRElBY29BamdoQWd3QkN5QUhJQVkyQWpBZ0J5QUhLQUk0SWdJMkFqUWdCeUFJTmdJZ0lBY2dCeWdDUERZQ0pDQUhJQVEyQWlnZ0J5QUhLQUpBSWdNMkFpeEJBRUVEUWJUTkFDQUhRU0JxRURnTEFuOGdBeUFIS0FJOElnbElJQUlnQTBweVJRUkFBa0FnQVFKL0lBRW9Bb0NIcndNaUF5QUJLQUtFaDY4RElnSklCRUFnQTBFQmFnd0JDeUFDSUFOSUJFQWdBU0FDUVFGcU5nS0VoNjhEREFJTElBRWdBa0VCYWpZQ2hJZXZBeUFEUVFGcUN5SUROZ0tBaDY4REMwRUJJQU1nQkdwQi9nRk1CSDhnQXlBRVNBVWdBVUVCTmdLQWg2OERJQVJCQVVvTERRRWFJQUZCQVRZQ2hJZXZBMEVCREFFTElBRWdDQ0FHSUFJZ0NVZ2JJZ0kyQWhCQkFTRURBa0FnQWlBRWF5SUVRUUZPQkVBZ0FTQUVOZ0tBaDY4RERBRUxJQUZCQVRZQ2dJZXZBMEVBSUFScklRTUxJQUVnQXpZQ2hJZXZBMEVBSUFFb0FnQkJBVWNOQUJvZ0J5QUNOZ0lRUVFCQkEwSFAwZ0FnQjBFUWFoQTRRUUFMSVFNZ0FTQUJLQUw0aHE4RE5nTDhocThEQ3lBQVFRTkhEUVFnQXcwRElBRW9BdlNHcndNaEFBc0NRQUpBSUFCQkFXc09Bd0VCQUFJTFFRQWhDRUYvSVFRQ1FDQUJLQUtJaDY4RElnSWdCU2dDRENJT0VOUURRUUJJRFFBZ0FpZ0NBRVVFUUNBQ0lBSW9BZ2dnQWlnQ0JHd1FPaUlBTmdJQUlBQkZEUUVMQTBBQ1FFRUFJUVFnQ0NBQ0tBSUlJZ1pPRFFBRFFBSkFRUUFoQ1VFQUlRQkJmQ0VHSUFRZ0FpZ0NCQ0lLVGcwQUEwQWdCa0VGUndSQUFrQWdCaUFJYWlJRFFRQklEUUFnQXlBQ0tBSUlUZzBBSUFNZ0Ntd2hEMEY4SVFNRFFDQURRUVZHRFFFZ0F5QUVhaUlOUVFCSUlBb2dEVXh5UlFSQUlBa2dEaUFOSUE5cWFpMEFBR29oQ1NBQVFRRnFJUUFMSUFOQkFXb2hBd3dBQ3dBTElBWkJBV29oQmd3QkN3c2dBaWdDQUNBSUlBcHNJQVJxYWlBSklBQnRPZ0FBSUFSQkFXb2hCQXdCQ3dzZ0NFRUJhaUVJREFFTEMwRUFJUU1EUUNBRElBWWdBaWdDQkd4T0RRRWdBaWdDQUNBRGFpSUFJQUF0QUFCQkIyczZBQUFnQTBFQmFpRURJQUlvQWdnaEJnd0FDd0FMSUFRaUFrRUFTQTBGSUFVb0Fnd2dBU2dDaUlldkF5SUFLQUlFSUFBb0FnZ2dBU2dDQUNBQktBSU1RUUJCQUNBQlFlQ0dwd0pxSUFBb0FnQVF4d01pQWtFQVRnMENEQVVMSUFFb0F2eUdyd01pQWtFQlRnUkFJQUVnQWtFQmF6WUMvSWF2QXd3QkN5QUZLQUlNSVFZZ0FTZ0NpSWV2QXlFRUFuOGdBRUVCUmdSQVFRQWhBRUVBSVFOQkFDRUNJQVFnQmhEVUEwRUFTQVIvUVg4RlFRRWhCZ04vSUFRZ0EwRUNkR29pQ0VHTUNHb2dDQ2dDRENBQWFpSUFOZ0lBSUFaQi93RnhCSDhnQTBFQmFpRURJQVpCQVdvaEJnd0JCVUVBQ3dzTElnQkJBRTRFZndKL0lBUW9BZ2dnQkNnQ0JHeXlRd0FBQUQrVUloTkRBQUNBVDEwZ0UwTUFBQUFBWUhFRVFDQVRxUXdCQzBFQUN5RURBMEFnQWlJQVFRRnFJUUlnQkNBQVFmOEJjU0lJUVFKMGFrR01DR29vQWdBaUJpQURTUTBBQ3dOQUlBTWdCa1lFUUNBRUlBQkJBV29pQUVIL0FYRkJBblJxUVl3SWFpZ0NBQ0VHREFFTEN5QUhJQUJCL3dGeElBaHFRUUYyT2dCRVFRQUZJQUFMREFFTEFuOUJBQ0VEUVg4Z0JDQUdFTlFEUVFCSURRQWFRUUVoQUVFQ0lRSURRQ0FWSUFRZ0FFRUNkR29vQWd3Z0FHeXpraUVWSUFKQi93RnhCRUFnQUVFQmFpRUFJQUpCQVdvaEFnd0JDd3NnQkNnQ0NDQUVLQUlFYkxJaEdFRUFJUUJCQUNFQ0EwQUNRQ0FUSUFRZ0FFRUNkR29vQWd3aUJyT1NJaE5EQUFBQUFGd0VRQ0FZSUJPVEloUkRBQUFBQUZzTkFTQVdJQUFnQm15emtpSVdJQk9WSUJVZ0ZwTWdGSldUSWhrZ0dTQVRJQlNVbEpRaUZDQVhJQlFnRjE0aUJoc2hGeUFBSUFNZ0Joc2hBd3NnQUVFQmFpRUFJQUpCL3dGeFFRRnFJZ0pCL3dGeElBSkdEUUVMQ3lBSElBTTZBRVJCQUFzTElnSkJmMHdOQkFKQUlBRW9BZ0JCQVVjTkFDQUhMUUJFSWdBZ0FTZ0NFRVlOQUNBQktBTDBocThESVFJZ0J5QUFOZ0lFSUFkQjdOd0FRZm5nQUNBQ1FRRkdHellDQUVFQVFRTkJwdGdBSUFjUU9Bc2dBU0FITFFCRU5nSVFJQUVnQVNnQytJYXZBellDL0lhdkF3c2dCU2dDRENBQktBSWtJQUVvQWlnZ0FTZ0NBQ0FCS0FJTUlBRW9BaEFnQVNnQ0ZDQUJRZUNHcHdKcVFRQVF4d05CQUVnTkFnc2dBU2dDSkNBQktBSW9JQUZCNElhbkFtb2dBU2dDRkNBQlFiajRBR29pQUNBQlFiRDRBR29RNmdWQkFFZ05BVUYvSVFJZ0JTZ0NBQ0FCS0FJa0lBRW9BaWdnQVNnQ0JDQUFJQUVvQXJCNElBRW9BdkNHcndNZ0FTZ0NGQ0FCS0FJWUlBRW9BaUJCdUFGcUlBRXJBNUNIcndNZ0FVRXdhaUFNSUFFb0FwaUhyd01RcEFWQkFFZ05BZ3NnQVNnQ0hFRUJSd1JBSUFFb0F2aUtwZ0lpQUVFQUlBQkJBRW9iSVF4QkFDRUdBMEFnQmlBTVJ3UkFRUUFoQlNBQktBSXNJZ0JCQUNBQVFRQktHeUVFSUFFZ0JrR0lBbXhxSWdOQndJdW1BbW9oQ0NBRFFiaUxwZ0pxSVFrZ0EwR0FpNllDYWlFS1FYOGhBRVFBQUFBQUFBRGdQeUVSQTBBZ0JDQUZSd1JBQWtBZ0NpZ0NBTGNnQVNBRlFRaDBhaUlDS0FJd3R5SVFveUlTUkdabVptWm1adVkvWXlBU1JPRjZGSzVINGZZL1pISU5BQ0FDS3dOb0lBa3JBd0NoSWhJZ0VxSWdBaXNEY0NBSUt3TUFvU0lTSUJLaW9DQVFveUlRSUJGalJRMEFJQkFoRVNBRklRQUxJQVZCQVdvaEJRd0JDd3NDUUNBQVFRQklEUUJCZnlFQ0FrQUNRQ0FCS0FJWUlna09CUUFBQUFFQkJ3c2dBMEdnaTZZQ2Fpc0RBQ0lTSUFFZ0FFRUlkR29pQUNJQ0t3TlFaRVVOQVNBQ0lCSTVBMUFnQUNBRFFZU0xwZ0pxS0FJQUlnZzJBalFnQTBHUWk2WUNhaUVLUVFBaEFrRi9JUVJFQUFBQUFJVFhsMEVoRVFOQVJBQUFBQUFBQUFBQUlSQkJBQ0VGSUFKQkJFY0VRQU5BSUFWQkJFY0VRQ0FRSUFNZ0JVRUVkR29pRFVHb2pLWUNhaXNEQUNBQUlBSWdCV3BCQTNGQkJIUnFJZzRyQTlnQm9TSVFJQkNpSUExQnNJeW1BbW9yQXdBZ0Rpc0Q0QUdoSWhBZ0VLS2dvQ0VRSUFWQkFXb2hCUXdCQ3dzZ0VDQVJZd1JBSUFvb0FnQWdBbXRCQkdwQkJHOGhCQ0FRSVJFTElBSkJBV29oQWd3QkN3c2dBRUZBYXlBRU5nSUFJQWxCQVUwRVFDQUFJQkk1QTFnZ0FDQUlOZ0k0SUFBZ0JEWUNSQXdDQ3lBQUlCSTVBMkFnQUNBSU5nSThJQUFnQkRZQ1NBd0JDd0pBSUFOQnFJdW1BbW9yQXdBaUVDQUJJQUJCQ0hScUlnQWlBaXNEV0dRRVFDQURRYkNMcGdKcUt3TUFJUkVNQVFzZ0EwR3dpNllDYWlzREFDSVJJQUFyQTJCa1JRMEJDeUFDSUJBNUExZ2dBMEdJaTZZQ2FpZ0NBQ0VDSUFBZ0VUa0RZQ0FBSUFJMkFqZ2dBQ0FEUVl5THBnSnFLQUlBTmdJOFFRQWhBa0YvSVFSRUFBQUFBSVRYbDBFaEVRTkFSQUFBQUFBQUFBQUFJUkJCQUNFRklBSkJCRWNFUUFOQUlBVkJCRWNFUUNBUUlBTWdCVUVFZEdvaUNFR29qS1lDYWlzREFDQUFJQUlnQldwQkEzRkJCSFJxSWdrckE5Z0JvU0lRSUJDaUlBaEJzSXltQW1vckF3QWdDU3NENEFHaEloQWdFS0tnb0NFUUlBVkJBV29oQlF3QkN3c2dBaUFFSUJBZ0VXTWlCUnNoQkNBUUlCRWdCUnNoRVNBQ1FRRnFJUUlNQVFzTElBQkJCQ0FFYXlJQ0lBTkJsSXVtQW1vb0FnQnFRUVJ2TmdKRUlBQWdBaUFEUVppTHBnSnFLQUlBYWtFRWJ6WUNTQXNnQmtFQmFpRUdEQUVMQ3lBQkVKd0dRUUFoQlVFQUlRUURRQ0FCS0FMNGlxWUNJQVZLQkVBZ0FTQUZRWWdDYkdvaUFFR0FqYVlDYWlJQ0lBSW9BZ0FpQWtFQmFqWUNBQ0FDUVFKTUJFQWdCQ0FGUndSQUlBRWdCRUdJQW14cVFZQ0xwZ0pxSUFCQmdJdW1BbXBCaUFJUVFCb0xJQVJCQVdvaEJBc2dCVUVCYWlFRkRBRUxDeUFCSUFRMkF2aUtwZ0lnQVNnQ0xDSUFRUUFnQUVFQVNoc2hBa0VBSVFNRFFBSkFBa0FnQWlBRFJnMEFJQUVnQTBFSWRHb2lBQ2dDTkNJR1FRQklEUUVnQUVFd2FpRUlRUUFoQlNBRVFRQWdCRUVBU2hzaEFBTkFBa0FDZnlBQUlBVkhCRUFnQVNBRlFZZ0NiR3BCaEl1bUFtb29BZ0FnQmtjTkFpQUZJUUFMSUFBZ0JFWUxCRUFnQkVFOFJnMERJQUVnQkVFQmFpSUVOZ0w0aXFZQ0N5QUJJQUJCaUFKc2FpSUFRWUNMcGdKcUlBaEJnQUlRUUJvZ0FFR0FqYVlDYWtFQk5nSUFEQU1MSUFWQkFXb2hCUXdBQ3dBTFFRQWhBaUFCS0FJY1FRSkdEUVJCQUNFQUEwQWdBQ0FFVGcwRlFRQWhCU0FCS0FJc0lnTkJBQ0FEUVFCS0d5RUdJQUVnQUVHSUFteHFJZ2hCd0l1bUFtb2hDU0FJUWJpTHBnSnFJUW9nQ0VHQWk2WUNhaUVJQTBBQ1FDQUZJQVpIQkg4Z0NDZ0NBTGNnQVNBRlFRaDBhaUlNS0FJd3R5SVJveUlRUkdabVptWm1adVkvWXlBUVJPRjZGSzVINGZZL1pISU5BU0FNS3dOb0lBb3JBd0NoSWhBZ0VLSWdEQ3NEY0NBSkt3TUFvU0lRSUJDaW9DQVJvMFFBQUFBQUFBRGdQMk5GRFFFZ0JRVWdCZ3NnQTBZRVFDQUJJQU5CQ0hScVFUQnFJQWhCZ0FJUVFCb2dBU0FCS0FJc1FRRnFOZ0lzSUFFb0F2aUtwZ0loQkFzZ0FFRUJhaUVBREFJTElBVkJBV29oQlF3QUN3QUxBQXNnQTBFQmFpRUREQUFMQUFzZ0FSQ2NCa0VBSVFJTUFRdEJmeUVDQ3lBSFFkQUFhaVFBSUFJTElRQWdDMEV3YWlRQUlBQUxjZ0VCZnlNQVFSQnJJZ0VrQUNBQklBQTJBZ3dnQVVIOC9RTWdBVUVNYWhCeU5nSUlJQUVRYVRZQ0FFRi9JUUFnQVVFSWFpQUJFSGRGQkVBZ0FVRU1haEI5S0FMWUFTSUFCSDhnQVNBQUtBSVVOZ0lJUVFBRlFYOExJUUJCZnlBQktBSUlJQUFiSVFBTElBRkJFR29rQUNBQUMzc0JBWDhqQUVFZ2F5SUNKQUFnQWlBQU5nSWNJQUpCL1AwRElBSkJIR29RY2pZQ0dDQUNFR2syQWhBQ1FDQUNRUmhxSUFKQkVHb1FkdzBBSUFKQkhHb1FmU2dDMkFFaUFFVWdBVUVCUzNJRWYwRi9CU0FBSUFFMkFoUkJBQXNOQUNBQ0lBRTJBZ0JCQUVFQlFZUHVBU0FDRURnTElBSkJJR29rQUF0MkFRSi9Jd0JCRUdzaUFTUUFJQUVnQURZQ0RDQUJRZno5QXlBQlFReHFFSEkyQWdnZ0FSQnBOZ0lBUVFBaEFDQUJRUWhxSUFFUWQwVUVRQ0FCUVF4cUVIMG9BdGdCSWdCRklBRkJDR29pQWtWeUJIOUJmd1VnQWlBQUtBSUFOZ0lBUVFBTEdpQUJLQUlJSVFBTElBRkJFR29rQUNBQUMxc0JBWDhqQUVFUWF5SUJKQUFnQVNBQU5nSU1JQUZCL1AwRElBRkJER29RY2pZQ0NDQUJFR2syQWdCQkFDRUFJQUZCQ0dvZ0FSQjNSUVJBSUFGQkRHb1FmU2dDMkFGQjVJYW5BbW9vQWdBaEFBc2dBVUVRYWlRQUlBQUxld0VCZnlNQVFTQnJJZ0lrQUNBQ0lBQTJBaHdnQWtIOC9RTWdBa0VjYWhCeU5nSVlJQUlRYVRZQ0VFRUFJUUFnQWtFWWFpQUNRUkJxRUhkRkJFQWdBa0VjYWhCOUtBTFlBU0FCUVFCSEVLa0hJQUpCK3UwQlFmN3RBU0FCR3pZQ0FFRUFRUUZCNU8wQklBSVFPQ0FCSVFBTElBSkJJR29rQUNBQUMzOEJBbjhqQUVFUWF5SUJKQUFnQVNBQU5nSU1JQUZCL1AwRElBRkJER29RY2pZQ0NDQUJFR2syQWdCQmZ5RUFJQUZCQ0dvZ0FSQjNSUVJBSUFGQkRHb1FmU2dDMkFFaUFFVWdBVUVJYWlJQ1JYSUVmMEYvQlNBQ0lBQW9BdlNHcndNMkFnQkJBQXNoQUVGL0lBRW9BZ2dnQUJzaEFBc2dBVUVRYWlRQUlBQUxhQUVCZnlNQVFTQnJJZ0lrQUNBQ0lBQTJBaHdnQWtIOC9RTWdBa0VjYWhCeU5nSVlJQUlRYVRZQ0VBSkFJQUpCR0dvZ0FrRVFhaEIzRFFBZ0FrRWNhaEI5S0FMWUFTQUJFTWtHRFFBZ0FpQUJOZ0lBUVFCQkFVSEs3UUVnQWhBNEN5QUNRU0JxSkFBTGZBRUNmeU1BUVJCcklnRWtBQ0FCSUFBMkFnd2dBVUg4L1FNZ0FVRU1haEJ5TmdJSUlBRVFhVFlDQUVGL0lRQWdBVUVJYWlBQkVIZEZCRUFnQVVFTWFoQjlLQUxZQVNJQVJTQUJRUWhxSWdKRmNnUi9RWDhGSUFJZ0FDZ0NFRFlDQUVFQUN5RUFRWDhnQVNnQ0NDQUFHeUVBQ3lBQlFSQnFKQUFnQUF1SUFRRUJmeU1BUVNCcklnSWtBQ0FDSUFBMkFod2dBa0g4L1FNZ0FrRWNhaEJ5TmdJWUlBSVFhVFlDRUFKQUlBSkJHR29nQWtFUWFoQjNEUUFnQWtFY2FoQjlJUUFnQVVIL0FVc05BQ0FBS0FMWUFTSUFSU0FCUWY4QlMzSUVmMEYvQlNBQUlBRTJBaEJCQUFzTkFDQUNJQUUyQWdCQkFFRUJRYlh0QVNBQ0VEZ0xJQUpCSUdva0FBdGJBZ0YvQVh3akFFRVFheUlCSkFBZ0FTQUFOZ0lNSUFGQi9QMERJQUZCREdvUWNqWUNDQ0FCRUdrMkFnQkVBQUFBQUFBQThMOGhBaUFCUVFocUlBRVFkMFVFUUNBQlFReHFFSDByQStBQ0lRSUxJQUZCRUdva0FDQUNDMHdCQVg4akFFRVFheUlDSkFBZ0FpQUFOZ0lNSUFKQi9QMERJQUpCREdvUWNqWUNDQ0FDRUdrMkFnQWdBa0VJYWlBQ0VIZEZCRUFnQWtFTWFoQjlJQUU1QStBQ0N5QUNRUkJxSkFBTFd3SUJmd0Y4SXdCQkVHc2lBU1FBSUFFZ0FEWUNEQ0FCUWZ6OUF5QUJRUXhxRUhJMkFnZ2dBUkJwTmdJQVJBQUFBQUFBQVBDL0lRSWdBVUVJYWlBQkVIZEZCRUFnQVVFTWFoQjlLd1BZQWlFQ0N5QUJRUkJxSkFBZ0FndE1BUUYvSXdCQkVHc2lBaVFBSUFJZ0FEWUNEQ0FDUWZ6OUF5QUNRUXhxRUhJMkFnZ2dBaEJwTmdJQUlBSkJDR29nQWhCM1JRUkFJQUpCREdvUWZTQUJPUVBZQWdzZ0FrRVFhaVFBQzVKb0FpRi9BbjBqQUVIQUFXc2lEaVFBSUE0Z0FUWUN2QUVnRGtIOC9RTWdEa0c4QVdvUWNqWUNxQUVnRGhCcE5nSzRBUUpBQWtBQ1FBSkFJQTVCcUFGcUlBNUJ1QUZxRUhjRVFDQUFFRTRhREFFTElBNUJ2QUZxRUgwaUlpZ0M0QUVoRmlBT1FRQTJBcmdCSUFJUVYwRUtUdzBCSUE1QnFBRnFFRTRoSXdKQUEwQUNRQ0FPSUE4MkFxUUJJQUlRVnlBUFRRMEFJQTRnQWlBT0tBS2tBUkNYQVJBK05nS1FBVUVBUVFGQnQrb0JJQTVCa0FGcUVEZ2dBaUFPS0FLa0FSQ1hBUkErSVJVZ0RpZ0NwQUVoQ3lBaklBNUJwQUZxRUt3Q0lBNGdGVFlDZ0FGQkFFRUJRYzdxQVNBT1FZQUJhaEE0QWtBQ1FBSi9Jd0JCRUdzaUJDUUFJQVJCaUxJQkxRQUFPZ0FPSUFSQmhySUJMd0FBT3dFTUFrQUNmd0pBSUJWQkFDQU9RYUFCYWh0RkJFQkJBRUVEUWJuaEFFRUFFRGdNQVFzQ2Z5QUVRUXhxSVFFakFFRVFheUlGSkFBQ1FBSkFJQlZGQkVCQkFDRUdEQUVMSUJVUW5BRkI0T29CRUp3QmFrRUNhaEE2SWdORkRRRWdCVUhnNmdFMkFnUWdCU0FWTmdJQUlBTkJ4QmdnQlJDa0FpQURJQUVReHdJaEJpQURFRE1MSUFWQkVHb2tBQ0FHREFFTFFRQkJBMEd3RUVFQUVEZ01EUXNpQlVVRVFDQUVJQlUyQWdBZ0JFSGc2Z0UyQWdnZ0JFSEYxQUEyQWdSQkFFRURRYjN5QUNBRUVEZ01BUXNDUUVFQlFSQVFzQU1pQ2dSQUlBcEJCR3BCQkVFQklBVVFYa0VCUncwQklBb29BZ1FpRkVFQlNBMEJJQW9nRkVHRUFXd1FPaUlCTmdJQUlBRkZEUVJCQUNFR0EwQWdCaUFVU0FSQUlBWkJoQUZzSWdFZ0NpZ0NBR3BCQ0VFQklBVVFYa0VCUncwRElBb29BZ0FnQVdwQkNHcEJDRUVCSUFVUVhrRUJSdzBESUFvb0FnQWdBV3BCRUdwQjdBQkJBU0FGRUY1QkFVY05BeUFLS0FJQUlBRnFRZndBYWtFRVFRRWdCUkJlUVFGSERRTWdDaWdDQUNBQmFrR0FBV3BCQkVFQklBVVFYa0VCUncwRElBWkJBV29oQmlBS0tBSUVJUlFNQVFzTElBcEJER3BCQkVFQklBVVFYa0VCUncwQlFRQWhGQ0FLS0FJTUlnWkJBRXdFUUNBS1FRQTJBZ2dNQWdzZ0NpQUdRUXhzRURvaUFUWUNDQ0FCUlEwRUEwQWdCaUFVU2dSQUlCUkJER3dpQVNBS0tBSUlha0VJYWtFRVFRRWdCUkJlUVFGSERRTWdDaWdDQ0NBQmFrRUVha0VFUVFFZ0JSQmVRUUZIRFFNZ0NpZ0NDQ0FCYWlJQklBRW9BZ1FpQTBFTWJCQTZJZ0UyQWdBZ0FVVU5CaUFCUVF3Z0F5QUZFRjRnQTBjTkF5QVVRUUZxSVJRZ0NpZ0NEQ0VHREFFTEN5QU9JQW8yQXFBQklBVVFyZ0ZCQUF3REN3d0RDMEVBUVFOQmlQWUFRUUFRT0NBS0tBSUlFRE1nQ2lnQ0FCQXpJQW9RTXlBRkVLNEJDMEYvQ3lFQklBUkJFR29rQUNBQkRBRUxEQWdMUVg5TUJFQWdEaUFWTmdJQVFRQkJBMEhtNmdFZ0RoQTREQUVMSUE0Z0N6WUNjRUVBUVFGQmpPc0JJQTVCOEFCcUVEZ0Nmd0pBSUE0b0FxQUJJZ1FFUUNBRUtBSUVJZ0ZCQUNBQlFRQktHeUVGUVFBaER3TkFJQVVnRDBZRVFFRUFJUXdnQkNnQ0RDSUJRUUFnQVVFQVNoc2hCVUVBSVE4RFFDQUZJQTlHRFFRZ0JDZ0NDQ0FQUVF4c2FpSURLQUlJSWdGQmYwZEJBQ0FCUVFCSUcwVUVRQ0FESUFzMkFnZ0xJQTlCQVdvaER3d0FDd0FGSUFRb0FnQWdEMEdFQVd4cUlnTW9BbndpQVVGL1IwRUFJQUZCQUVnYlJRUkFJQU1nQ3pZQ2ZBc2dEMEVCYWlFUERBRUxBQXNBQzBFQVFRTkJ0L2tBUVFBUU9FRi9JUXdMSUF4QmYwd0xCRUJCQUVFRFFhWHJBVUVBRURnTUFRc0NmMEVBSVFFZ0RrRzRBV3BCQUNBT1FhQUJhaUljRzBVRVFFRUFRUU5CMEQ1QkFCQTRRWDhNQVFzQ1FDQU9LQUs0QVNJUFJRUkFJQTVCRUJBNklnODJBcmdCSUE5RkRRRWdEMElBTndNQUlBOUNBRGNEQ0FzQ1FDQWNLQUlBSWdaRkRRQWdCaWdDQkNJRUlBOG9BZ1FpRkdvaUMwR0VBV3dRT2lJS0JFQWdGRUVBSUJSQkFFb2JJUVVEUUNBQklBVkdCRUJCQUNFQklBUkJBQ0FFUVFCS0d5RURBMEFnQVNBRFJ3UkFJQW9nQVNBVWFrR0VBV3hxSUFZb0FnQWdBVUdFQVd4cVFZUUJFRUFhSUFGQkFXb2hBUXdCQ3dzZ0R5Z0NBQkF6SUE0b0FyZ0JJQW8yQWdBZ0RpZ0N1QUVpQkNBTE5nSUVRUUFoRHlBRUtBSU1JaEZCQUNBUlFRQktHeUVJSUJ3b0FnQWlCU2dDRENJTFFRQWdDMEVBU2hzaERVRUFJUjBEUUVFQUlRRWdEU0FkUndSQUFrQURRQ0FCSUFoR0RRRWdBVUVNYkNFRElBRkJBV29oQVNBRktBSUlJQjFCREd4cUtBSUlJQU1nQkNnQ0NHb29BZ2hIRFFBTElBOUJBV29oRHdzZ0hVRUJhaUVkREFFTEN5QUxJQkZxSUE5cklnWkJER3dRT2lJSEJFQkJBQ0ViQTBBZ0NDQWJSZ1JBUVFBaERFRUFJUThDUUFOQUlBd2dEVWNFUUNBTVFReHNJZ1FnSENnQ0FDZ0NDR29pQlNnQ0NDRUxRUUFoQVFKQUFrQURRQ0FCSUFoR0RRRWdBVUVNYkNFRElBRkJBV29oQVNBTElBTWdEaWdDdUFFb0FnaHFLQUlJUncwQUN5QVBRUUZxSVE4TUFRc2dCeUFNSUJGcUlBOXJRUXhzYWlJVUlBczJBZ2dnRkNBRktBSUVJZ3BCREd3UU9pSUJOZ0lBSUFGRkRRTkJBQ0VCSUFwQkFDQUtRUUJLR3lFTEEwQWdBU0FMUndSQUlBRkJER3dpQXlBVUtBSUFhaUlGSUJ3b0FnQW9BZ2dnQkdvb0FnQWdBMm9pQXlrQ0FEY0NBQ0FGSUFNb0FnZzJBZ2dnQVVFQmFpRUJEQUVMQ3lBVUlBbzJBZ1FMSUF4QkFXb2hEQXdCQ3dzZ0RpZ0N1QUVpRHlnQ0NBUi9RUUFoQVFOQUlBOG9BZ3dnQVVvRVFDQVBLQUlJSUFGQkRHeHFLQUlBRURNZ0FVRUJhaUVCSUE0b0FyZ0JJUThNQVFzTElBOG9BZ2dRTXlBT0tBSzRBUVVnRHdzZ0J6WUNDQ0FPS0FLNEFTQUdOZ0lNSUJ3UW1nVU1Cd3NNQndzZ0J5QWJRUXhzSWdwcUloUWdEaWdDdUFFb0FnZ2dDbW9pQlNnQ0NEWUNDRUVBSVFFZ0JTZ0NCQ0lFSVF3RFFDQUJJQTFIQkVBZ0hDZ0NBQ2dDQ0NBQlFReHNhaUlES0FJSUlBVW9BZ2hHQkVBZ0F5Z0NCQ0FNYWlFTUN5QUJRUUZxSVFFTUFRc0xJQlFnREVFTWJCQTZJZ0UyQWdBZ0FRUkFRUUFoRHlBRVFRQWdCRUVBU2hzaEMwRUFJUUVEUUNBQklBdEhCRUFnQVVFTWJDSURJQlFvQWdCcUlnVWdEaWdDdUFFb0FnZ2dDbW9vQWdBZ0Eyb2lBeWtDQURjQ0FDQUZJQU1vQWdnMkFnZ2dBVUVCYWlFQkRBRUxDd0pBQTBBZ0RTQVBSZzBCSUJ3b0FnQW9BZ2dpSFNBUFFReHNJZ3RxS0FJSUlBNG9BcmdCS0FJSUlBcHFLQUlJUndSQUlBOUJBV29oRHd3QkN3dEJBQ0VCQTBBZ0FTQUxJQjFxSWdNb0FnUk9EUUVnRkNnQ0FDQUJJQVJxUVF4c2FpSUZJQU1vQWdBZ0FVRU1iR29pQXlrQ0FEY0NBQ0FGSUFNb0FnZzJBZ2dnQVVFQmFpRUJJQndvQWdBb0FnZ2hIUXdBQ3dBTElCUWdERFlDQkNBYlFRRnFJUnNNQVFzTERBVUxEQVFGSUFvZ0FVR0VBV3dpQTJvZ0R5Z0NBQ0FEYWtHRUFSQkFHaUFCUVFGcUlRRU1BUXNBQ3dBTERBRUxRUUFNQVFzTUNBdEJmMHdFUUVFQVFRTkJ5ZXNCUVFBUU9Bd0JDMEVBUVFGQjVPc0JRUUFRT0NBT0lCVTJBbUJCQUVFQlFldnJBU0FPUWVBQWFoQTRBbjlCQUNFRFFRQWhFa0VBSVJrakFFSFFCMnNpQ1NRQUFrQUNRQUpBQWtBQ2Z3SkFRZnpyQVMwQUFBUkFRZnpyQVVIaERoQ0ZBZzBCQ3lBSlFkQUZhaUFWUWY4QkVOd0RJQWxCQURvQXp3ZEJBUXdCQ3lBSklCVTJBckFCSUFsQi9Pc0JOZ0swQVNBSlFjQUJha0htRnlBSlFiQUJhaENrQWlBSlFjQUJha0dpSkJESEFpSVNSUVJBSUFrZ0ZUWUNvQUZCQUVFRFFja3BJQWxCb0FGcUVEZ2dDVUdVL3dNb0FnQVFoZ00yQXBRQklBbEJwRE0yQXBBQlFRQkJBMEhwTENBSlFaQUJhaEE0REFJTFFRQUxJUjBDUUFKQVFmUUlFRG9pR1FSQVFRRWhEd0pBSUIwTkFDQUpRY0FCYWlBU0VNOENSUTBDSUFrZ0NVSE1CV28yQW9BQklBbEJ3QUZxUWMwK0lBbEJnQUZxRU9vQlFRRkhEUUlnQ1NnQ3pBVWlEMEVBU2cwQURBSUxJQmxCQURZQ21BRWdHU0FQTmdJRUlCa2dEMEh3QUd3UU9pSVROZ0lBSUJNRVFBSkFBMEFnQ1NBRE5nTE1CU0FESUE5T0RRRWdDU0FEUVFGcU5nSndRUUJCQVVHTXhBQWdDVUh3QUdvUU9DQWRSUVJBSUFsQndBRnFJQklRendKRkRRSWdDU0FKUWRBRmFqWUNZQ0FKUWNBQmFrR2Z5Z0FnQ1VIZ0FHb1E2Z0ZCQVVjTkFpQUpRZEFGYWlFTFFRQWhBVUYvSVFNRFFBSkFBa0FnQVNBTGFpMEFBQ0lGUVM1SEJFQWdCUTBCSUFOQmYwY0VRQ0FESUF0cVFRQTZBQUFMREFJTElBRWhBd3NnQVVFQmFpRUJEQUVMQ3d0QkFFRUJRZVhQQUVFQUVEZ0NmeU1BUWVBQWF5SWFKQUFnR2tHRXNnRXZBQUE3QVZnZ0drR0FzZ0VvQUFBMkFsUUNRQUovQWtBZ0NVSFFCV29pQ0JDY0FTQWFRZFFBYWhDY0FXcEJBV29RT2lJQkJFQWdHaUFJTmdKQUlCb2dHa0hVQUdvMkFrUWdBVUhURnlBYVFVQnJFS1FDSUFGQnh5TVF4d0loRUNBQkVETWdFRVVFUUNBYUlBZzJBZ0FnR2lBYVFkUUFhallDQkVFQVFRTkIxQ2dnR2hBNFFRQU1Bd3RCQ0JBNkloNUZEUU1DUUFKQUlCNUJCR3BCQkVFQklCQVFYa0VCUmdSQUlCNG9BZ1FpSEVFQVNnMEJDMEVBUVFOQnF5eEJBQkE0REFFTElCb2dIRFlDTUVFQVFRRkJzVElnR2tFd2FoQTRJQjRnSEVFQ2RCQTZJaGMyQWdBZ0YwVU5CQ0FYUVJBUU9pSUJOZ0lBSUFGRkRRUUNmMEVVRURvaUd3UkFJQnNDZnlBYlFRaHFJUlFnRzBFTWFpRUtJQnRCQkdvaEJDQWJRUkJxSVJFakFFR2dCbXNpRENRQVFTZ1FPaUlZUVFBMkFnQWdERUc0QW1wQkFFSG9BeEE3R2tIVWlBUkJBRFlDQUNBTVFSaHFFSjBGSVFWQjFJZ0VLQUlBSVFOQjFJZ0VRUUEyQWdCQmZ5RUJRUVFoRFFKQUFrQWdBMFVOQUVIWWlBUW9BZ0FpQmtVTkFDQURLQUlBSUJoQkJCQzVBU0lCUlEwQklBWVFBZ3NRQXlFRElBRkJBVWNFUUNBTVFRTTJBaGdnRENBRk5nSzRBaUFNUVp3QmFrRUJJQmhCQkJEeUJDRVlFQU1oRFVFQUlRTUxBa0FEUUFKQUFrQUNRQUpBQWtBQ1FDQURCRUJCMUlnRVFRQTJBZ0JCQkNBTVFiZ0NhaEFMUWRTSUJDZ0NBQ0VEUWRTSUJFRUFOZ0lBUVg4aEFTQURSUTBDUWRpSUJDZ0NBQ0lHUlEwQ0lBTW9BZ0FnR0NBTkVMa0JJZ0VOQVF3SkMwSFVpQVJCQURZQ0FFRUZJQXhCdUFKcVFkb0FRZWdERUIxQjFJZ0VLQUlBSVFOQjFJZ0VRUUEyQWdCQmZ5RUJJQU5GRFFOQjJJZ0VLQUlBSWdaRkRRTWdBeWdDQUNBWUlBMFF1UUVpQVEwQ0RBZ0xJQVlRQWdzUUF5RURJQUZCQVVjTkFnd0VDeUFHRUFJTEVBTWhBeUFCUVFGR0RRSkIxSWdFUVFBMkFnQkJCaUFNUWJnQ2FpQVFFQnhCMUlnRUtBSUFJUU5CMUlnRVFRQTJBZ0JCZnlFQkFrQWdBMFVOQUVIWWlBUW9BZ0FpQmtVTkFDQURLQUlBSUJnZ0RSQzVBU0lCUlEwRklBWVFBZ3NRQXlFRElBRkJBVVlOQWtIVWlBUkJBRFlDQUVFSElBeEJ1QUpxUVFFUUd5RUZRZFNJQkNnQ0FDRURRZFNJQkVFQU5nSUFRWDhoQVFKQUlBTkZEUUJCMklnRUtBSUFJZ1pGRFFBZ0F5Z0NBQ0FZSUEwUXVRRWlBVVVOQlNBR0VBSUxFQU1oQXlBQlFRRkdEUUlDUUFKQUFrQUNRQUpBSUFWQkFVY0VRRUhVaUFSQkFEWUNBRUVJUVFCQkEwR0xQa0VBRUF4QjFJZ0VLQUlBSVFOQjFJZ0VRUUEyQWdCQmZ5RUJJQU5GRFFKQjJJZ0VLQUlBSWdaRkRRSWdBeWdDQUNBWUlBMFF1UUVpQVEwQkRBb0xRZFNJQkVFQU5nSUFRUWtnREVHNEFtb1FHaHBCMUlnRUtBSUFJUU5CMUlnRVFRQTJBZ0JCZnlFQklBTkZEUU5CMklnRUtBSUFJZ1pGRFFNZ0F5Z0NBQ0FZSUEwUXVRRWlBUTBDREFrTElBWVFBZ3NRQXlFRElBRkJBVWNOQWd3RkN5QUdFQUlMRUFNaEF5QUJRUUZHRFFNZ0RDZ0MxQUlnRENnQzNBSnNJZ3NnRENnQzJBSnNFRG9pQmdSQVFRQWhBUUpBQTBBQ1FFRUFJUU1nRENnQ3hBTWdEQ2dDckFOUEJFQkIxSWdFUVFBMkFnQkJDaUFNUWJnQ2FoQWFHa0hVaUFRb0FnQWhCVUhVaUFSQkFEWUNBRUYvSVFFZ0JVVU5BMEhZaUFRb0FnQWlBMFVOQXlBRktBSUFJQmdnRFJDNUFTSUJEUUVnQlNBREVBb0FDd05BSUFOQkJVY0VRQ0FNSUFOQkFuUnFJQVlnQVNBRGFpQUxiR28yQWdBZ0EwRUJhaUVEREFFTEMwSFVpQVJCQURZQ0FFRUxJQXhCdUFKcUlBeEJCUkF4SVFWQjFJZ0VLQUlBSVFkQjFJZ0VRUUEyQWdCQmZ5RWdBa0FnQjBVTkFFSFlpQVFvQWdBaUEwVU5BQ0FIS0FJQUlCZ2dEUkM1QVNJZ1JRUkFJQWNnQXhBS0FBc2dBeEFDQ3hBRElRTWdJRUVCUmcwSElBRWdCV29oQVF3QkN3c2dBeEFDQ3hBRElRTWdBVUVCUmcwRVFkU0lCRUVBTmdJQVFRUWdERUc0QW1vUUMwSFVpQVFvQWdBaEJVSFVpQVJCQURZQ0FFRi9JUUVDUUNBRlJRMEFRZGlJQkNnQ0FDSURSUTBBSUFVb0FnQWdHQ0FORUxrQklnRkZCRUFnQlNBREVBb0FDeUFERUFJTEVBTWhBeUFCUVFGR0RRUWdGQVJBSUJRZ0RDZ0MxQUkyQWdBTElBb0VRQ0FLSUF3b0F0Z0NOZ0lBQ3lBRUJFQWdCQ0FNS0FMY0FqWUNBQXNnRVVVTkJRSkFBa0FDUUFKQUlBd3RBTm9FSWdGQkFXc09BZ0FCQWdzZ0RDOEIzQVFpQVNBTUx3SGVCRWNOQWlBUklBR3pPQUlBREFnTElBd3ZBZHdFSWdFZ0RDOEIzZ1JIRFFFZ0VTQUJzME5janlKQWxEZ0NBQXdIQ3lBQlFRTkpEUUFnREM4QjNBUU5BQ0FNTHdIZUJBMEFJQkVnQWJNNEFnQU1CZ3NnRVVFQU5nSUFEQVVMUWRTSUJFRUFOZ0lBUVFoQkFFRURRYjRPUVFBUURFSFVpQVFvQWdBaEEwSFVpQVJCQURZQ0FFRi9JUUVDUUNBRFJRMEFRZGlJQkNnQ0FDSUdSUTBBSUFNb0FnQWdHQ0FORUxrQklnRkZEUVlnQmhBQ0N4QURJUU1nQVVFQlJnMERRZFNJQkVFQU5nSUFRUVFnREVHNEFtb1FDd3dDQzBIVWlBUkJBRFlDQUVFRUlBeEJ1QUpxRUFzTUFRdEIxSWdFUVFBMkFnQkJDRUVBUVFOQm96aEJBQkFNQzBIVWlBUW9BZ0FoQTBIVWlBUkJBRFlDQUVGL0lRRUNRQ0FEUlEwQVFkaUlCQ2dDQUNJR1JRMEFJQU1vQWdBZ0dDQU5FTGtCSWdGRkRRTWdCaEFDQ3hBRElRTWdBVUVCUmcwQUMwRUFJUVlMSUJnUU15QU1RYUFHYWlRQUlBWU1BUXNnQXlBR0VBb0FDeUlCTmdJQUlBRUVmeUFiQlNBYkVETkJBQXNNQVF0QkFFRURRYjRPUVFBUU9Bd1FDeUlEUlEwQ0lBTW9BZ1JCQVVjRVFDQWFJQWcyQWlBZ0dpQWFRZFFBYWpZQ0pFRUFRUUpCNlRjZ0drRWdhaEE0SUJjb0FnQVFNeUFYRURNZ0hoQXpJQU1RTXlBUUVLNEJRUUFNQkFzZ0Z5Z0NBQ0lCSUFNb0FnZzJBZ1FnQVNBREtBSU1OZ0lJSUFFZ0F5b0NFRGdDRENBQklBTW9BZ0EyQWdBZ0F4QXpJQkJCQkNBY1FRSjBhMEVDRUljRlFRRWhJUUpBQTBBZ0hDQWhSd1JBSUJwQjNBQnFRUVJCQVNBUUVGNUJBVWNFUUVFQUlRRURRQ0FCSUNGR0RRUWdGeUFCUVFKMGFpSURLQUlBS0FJQUVETWdBeWdDQUJBeklBRkJBV29oQVF3QUN3QUxJQmNnSVVFQ2RHb0NmeUFhS2dKY0lTVWdGeWdDQUNJZktBSUVJUU1nSHlvQ0RDRWtJQjhvQWdnaEFVRVFFRG9oRENBQnNpQWxsQ0FrbFJDbEFpRUZJQU95SUNXVUlDU1ZFS1VDSVFNZ0RBUkFBa0FnRENBbE9BSU1JQXdnQlRZQ0NDQU1JQU0yQWdRZ0RDQURJQVZzRURvaUdEWUNBQ0FZUlEwQVFRQWhBU0FGUVFBZ0JVRUFTaHNoQ0NBRFFRQWdBMEVBU2hzaEJ3TkFJQUVnQ0VjRVFDQWZLQUlJSVFzZ0h5b0NEQ0lrSUFGQkFXb2lCYktVSUNXVkVLVUNJUU1nSkNBQnNwUWdKWlVRcFFJaUJDQUxJQU1nQXlBTFNoc2lBU0FCSUFSSUd5RVVRUUFoQVFOQUlBRWdCMFlFUUNBRklRRU1Bd1VnSHlnQ0JDRU5JQjhxQWd3aUpDQUJRUUZxSWdPeWxDQWxsUkNsQWlFTElDUWdBYktVSUNXVkVLVUNJaHNnRFNBTElBc2dEVW9iSWdFZ0FTQWJTQnNnRzJzaENrRUFJUUVnQkNFR1FRQWhJQU5BSUFZZ0ZFY0VRQ0FCSUFwcUlRc2dIeWdDQUNBR0lBMXNJQnRxYWlFUkEwQWdBU0FMUndSQUlBRkJBV29oQVNBZ0lCRXRBQUJxSVNBZ0VVRUJhaUVSREFFTEN5QUdRUUZxSVFZZ0N5RUJEQUVMQ3lBWUlDQWdBVzA2QUFBZ0dFRUJhaUVZSUFNaEFRd0JDd0FMQUFzTElBd01BZ3NMREFnTElnRTJBZ0FnQVFSQUlDRkJBV29oSVF3Q0JVRUFJUUVEUUNBQklDRkdEUVFnRnlBQlFRSjBhaUlES0FJQUtBSUFFRE1nQXlnQ0FCQXpJQUZCQVdvaEFRd0FDd0FMQUFzTElCQVFyZ0VnSGd3RUN5QVhFRE1MSUI0UU15QVFFSzRCUVFBTUFnc01BZ3NnR2lBSU5nSVFJQm9nR2tIVUFHbzJBaFJCQUVFQ1FlazNJQnBCRUdvUU9DQVhLQUlBRURNZ0Z4QXpJQjRRTXlBUUVJWUZBbjlCQUNFQkFrQUNRQUpBUVFnUU9pSUdCRUFDUUNBR1FRUnFRUVJCQVNBUUVGNUJBVVlFUUNBR0tBSUVJZ3RCQUVvTkFRdEJBRUVEUWFzc1FRQVFPQXdDQ3lBR0lBdEJBblFRT2lJRU5nSUFJQVFFUUFOQUlBRWdDMFlFUUVFQUlRRUNRQU5BSUFFZ0MwWU5CeUFFSUFGQkFuUnFJZ1VvQWdCQkJHcEJCRUVCSUJBUVhrRUJSd1JBUVFBaEF3TkFJQUVnQTBZRVFFRUFJUUVEUUNBQklBdEdEUVVnQkNBQlFRSjBhaWdDQUJBeklBRkJBV29oQVF3QUN3QUZJQVFnQTBFQ2RHb29BZ0FvQWdBUU15QURRUUZxSVFNTUFRc0FDd0FMSUFVb0FnQkJDR3BCQkVFQklCQVFYa0VCUndSQVFRQWhBd05BSUFFZ0EwWUVRRUVBSVFFRFFDQUJJQXRHRFFVZ0JDQUJRUUowYWlnQ0FCQXpJQUZCQVdvaEFRd0FDd0FGSUFRZ0EwRUNkR29vQWdBb0FnQVFNeUFEUVFGcUlRTU1BUXNBQ3dBTElBVW9BZ0JCREdwQkJFRUJJQkFRWGtFQlJ3UkFRUUFoQXdOQUlBRWdBMFlFUUVFQUlRRURRQ0FCSUF0R0RRVWdCQ0FCUVFKMGFpZ0NBQkF6SUFGQkFXb2hBUXdBQ3dBRklBUWdBMEVDZEdvb0FnQW9BZ0FRTXlBRFFRRnFJUU1NQVFzQUN3QUxJQVVvQWdBaUF5QURLQUlJSUFNb0FnUnNFRG9pQXpZQ0FDQURSUTBJSUFGQkFXb2hBU0FGS0FJQUlnTW9BZ0JCQVNBREtBSUlJQU1vQWdSc0lCQVFYaUFGS0FJQUlnTW9BZ2dnQXlnQ0JHeEdEUUFMUVFBaEF3TkFJQUVnQTBZRVFFRUFJUUVEUUNBQklBdEdEUU1nQkNBQlFRSjBhaWdDQUJBeklBRkJBV29oQVF3QUN3QUZJQVFnQTBFQ2RHb29BZ0FvQWdBUU15QURRUUZxSVFNTUFRc0FDd0FMSUFRUU13d0VDeUFFSUFGQkFuUnFRUkFRT2lJRE5nSUFJQUZCQVdvaEFTQUREUUFMREFRTERBTUxEQUlMSUFZUU0wRUFJUVlMSUJBUXJnRWdCZ3dCQ3d3Q0N3c2hBU0FhUWVBQWFpUUFJQUVNQVF0QkFFRURRYTBPUVFBUU9Bd0tDeUVCSUJNZ0NTZ0N6QVZCOEFCc2FpQUJOZ0lBSUFGRkJFQWdDU0FKUWRBRmFqWUNBRUVBUVFOQnB0UUFJQWtRT0NBVEVETWdHUkF6SUJKRkRRWWdFaEN1QVF3R0MwRUFRUUZCbE5vQVFRQVFPRUVBUVFGQjV0MEFRUUFRT0FKL1FRQWhHRUVBSVFZakFFR2dCR3NpQ3lRQUlBc2dDVUhRQldvaUFUWUNFQ0FMUWVFT05nSVVJQXRCSUdwQjJ3NGdDMEVRYWhDa0FnSkFBa0FnQzBFZ2FrSGpGeERIQWlJS1JRUkFJQXNnQVRZQ0FFRUFRUU5CalNRZ0N4QTREQUVMUVFnUU9pSVlSUTBCQWtBQ1FDQVlRUVJxUVFSQkFTQUtFRjVCQVVjRVFFRUFRUU5CMnl4QkFCQTREQUVMSUJnZ0dDZ0NCQ0lCUVJSc0VEb2lCVFlDQUNBRlJRMERJQUZCQUNBQlFRQktHeUVEQTBBZ0F5QUdSZzBDQWtBZ0JTQUdRUlJzYWlJRVFRaHFRUVJCQVNBS0VGNUJBVWNOQUNBRVFReHFRUVJCQVNBS0VGNUJBVWNOQUNBRVFSQnFRUVJCQVNBS0VGNUJBVWNOQUNBRVFRUnFRUVJCQVNBS0VGNUJBVWNOQUNBRUlBUW9BZ1FpRkVFVWJCQTZJZ0UyQWdCQkFDRUhJQUZGRFFVRFFDQUhJQlJJQkVBZ0IwRVViQ0lCSUFRb0FnQnFRUVJCQVNBS0VGNUJBVWNOQWlBRUtBSUFJQUZxUVFScVFRUkJBU0FLRUY1QkFVY05BaUFFS0FJQUlBRnFRUWhxUVFSQkFTQUtFRjVCQVVjTkFpQUVLQUlBSUFGcVFReHFRUVJCQVNBS0VGNUJBVWNOQWlBRUtBSUFJQUZxUVJCcVFRUkJBU0FLRUY1QkFVY05BaUFIUVFGcUlRY2dCQ2dDQkNFVURBRUxDeUFHUVFGcUlRWU1BUXNMUVFBaEEwRUFRUU5CMnl4QkFCQTRBMEFnQXlBR1J3UkFJQVVnQTBFVWJHb29BZ0FRTXlBRFFRRnFJUU1NQVFzTElBVVFNd3NnR0JBelFRQWhHQXNnQ2hDdUFRc2dDMEdnQkdva0FDQVlEQUVMUVFCQkEwRzRLVUVBRURnTUNnc2hBU0FUSUFrb0Fzd0ZRZkFBYkdvZ0FUWUNCQ0FCUlFSQUlBa2dDVUhRQldvMkFoQkJBRUVEUVpyaEFDQUpRUkJxRURoQkFDRURBa0FnRXlBSktBTE1CVUh3QUd4cUlnVkZEUUFnQlNnQ0FDSUhSUTBBQTBBZ0J5Z0NCQ0FEU2dSQUlBTkJBblFpQVNBSEtBSUFhaWdDQUNnQ0FCQXpJQVVvQWdBb0FnQWdBV29vQWdBUU15QURRUUZxSVFNZ0JTZ0NBQ0VIREFFTEN5QUhLQUlBRURNZ0JTZ0NBQkF6SUFWQkFEWUNBQXNnRXhBeklCa1FNeUFTUlEwR0lCSVFyZ0VNQmd0QkFFRUJRWlRhQUVFQUVEZ2dFeUFKS0FMTUJVSHdBR3hxUVFBMkFnZ0NRQUpBSUIwRVFFRUFJUUVnQ1NnQ3pBVWhCd05BUVFBaEF5QUJRUU5HRFFJRFFDQURRUVJIQkVBZ0V5QUhRZkFBYkdvZ0FVRUVkR29nQTBFQ2RHcERBQUNBUDBNQUFBQUFJQUVnQTBZYk9BSU1JQU5CQVdvaEF3d0JDd3NnQVVFQmFpRUJEQUFMQUFzZ0NVSEFBV29nRWhEUEFrVU5BeUFKSUJNZ0NTZ0N6QVZCOEFCc2FpSUJRUXhxTmdKQUlBa2dBVUVRYWpZQ1JDQUpJQUZCRkdvMkFrZ2dDU0FCUVJocU5nSk1JQWxCd0FGcVFlWDhBQ0FKUVVCckVPb0JRUVJIRFFrZ0NVSEFBV29nRWhEUEFrVU5BeUFKSUJNZ0NTZ0N6QVZCOEFCc2FpSUJRUnhxTmdJd0lBa2dBVUVnYWpZQ05DQUpJQUZCSkdvMkFqZ2dDU0FCUVNocU5nSThJQWxCd0FGcVFlWDhBQ0FKUVRCcUVPb0JRUVJIRFFrZ0NVSEFBV29nRWhEUEFrVU5BeUFKSUJNZ0NTZ0N6QVZCOEFCc2FpSUJRU3hxTmdJZ0lBa2dBVUV3YWpZQ0pDQUpJQUZCTkdvMkFpZ2dDU0FCUVRocU5nSXNJQWxCd0FGcVFlWDhBQ0FKUVNCcUVPb0JRUVJIRFFFZ0NTZ0N6QVVoQndzZ0V5QUhRZkFBYkdvaUFVRU1haUVMSUFGQlBHb2hCRUVBSVFGQkJFRUVFTHdCSWdZb0FnQWhDZ05BSUFGQkEwY0VRQ0FCUVFKMElRVkJBQ0VEQTBBZ0EwRUVSd1JBSUFvZ0F5QUZha0VEZEdvZ0N5QUJRUVIwYWlBRFFRSjBhaW9DQUxzNUF3QWdBMEVCYWlFRERBRUxDeUFCUVFGcUlRRU1BUXNMSUFwQ0FEY0RZQ0FLUW9DQWdJQ0FnSUQ0UHpjRGVDQUtRZ0EzQTNBZ0NrSUFOd05vSUFZUW9BTWFJQVlvQWdBaEMwRUFJUUVEUUNBQlFRTkhCRUFnQVVFQ2RDRUZRUUFoQXdOQUlBTkJCRWNFUUNBRUlBRkJCSFJxSUFOQkFuUnFJQXNnQXlBRmFrRURkR29yQXdDMk9BSUFJQU5CQVdvaEF3d0JDd3NnQVVFQmFpRUJEQUVMQ3lBR0VFVWdDVUhRQldvaEJFRUFJUUZCQUNFREFrQUNRQU5BQWtBQ1FDQUJJQVJxSWdzdEFBQWlCVUV1UndSQUlBVU5BVUdkZ3dFUW5BRWhCU0FERFFJZ0FTQUZha0VDYWtHQUFrb05CU0FMUVM0NkFBQWdBU0VEREFRTElBRWhBd3NnQVVFQmFpRUJEQUVMQ3lBRElBVnFRUUpxUVlBQ1NnMEJDeUFESUFScVFRQTZBQUZCbllNQklRRUNRQUpBSUFRUW5BRWdCR29pQjBHZGd3RnpRUU54RFFBRFFDQUhJQUV0QUFBaUF6b0FBQ0FEUlEwQ0lBZEJBV29oQnlBQlFRRnFJZ0ZCQTNFTkFBc2dBU2dDQUNJRFFYOXpJQU5CZ1lLRUNHdHhRWUNCZ29SNGNRMEFBMEFnQnlBRE5nSUFJQUVvQWdRaEF5QUhRUVJxSVFjZ0FVRUVhaUVCSUFOQmdZS0VDR3NnQTBGL2MzRkJnSUdDaEhoeFJRMEFDd3NnQnlBQkxRQUFJZ002QUFBZ0EwVU5BQU5BSUFjZ0FTMEFBU0lET2dBQklBZEJBV29oQnlBQlFRRnFJUUVnQXcwQUN3c0xRWUFDRURvaEF5QVRJQWtvQXN3RklnRkI4QUJzYWlBRE5nSnNJQU5GRFFrZ0F5QUpRZEFGYWtHQUFoRGNBeUFCUVFGcUlRTU1BUXNMREFZTElCSUVRQ0FTRUs0QkN5QVBJQWtvQXN3RlRBMEVRUUFRQVFBTERBVUxEQVFMSUJJUXJnRWdHUkF6QzBFQUlSa0xJQWxCMEFkcUpBQWdHUXdEQzBFQVFRTkJvSUFCUVFBUU9DQVNFSzRCUVFBUUFRQUxRUUJCQTBHWk9VRUFFRGdMREFrTElRRWdJaUFPS0FLa0FVRUNkR29nQVRZQ2lBSWdBUTBCSUE0Z0ZUWUNFRUVBUVFOQmdld0JJQTVCRUdvUU9Bc2dBQkJPR2d3REN5QWlJQ0lvQW9RQ1FRSjBhaWdDaUFJb0FnQW9BZ0FpQXlnQ0JDRUJJQ0lnQXlnQ0FDZ0NBQ0lES0FJRU5nTElBaUFpSUFNb0FnZzJBc3dDSUNJQ2Z5QURLZ0lNSWlTTFF3QUFBRTlkQkVBZ0pLZ01BUXRCZ0lDQWdIZ0xOZ0xRQWlBT0lBRTJBbEJCQUVFQlFhTHNBU0FPUWRBQWFoQTRJQTRnSWlnQ3lBSTJBa0JCQUVFQlFienNBU0FPUVVCckVEZ2dEaUFpS0FMTUFqWUNNRUVBUVFGQjB1d0JJQTVCTUdvUU9DQU9JQ0lvQXRBQ05nSWdRUUJCQVVIcDdBRWdEa0VnYWhBNFFRQkJBVUhrNndGQkFCQTRJQTRvQXFRQlFRRnFJUThNQVFzTEFuOGdEaWdDdUFFaEMwRUFJUVJCQUNFTlFRQWhERUVBSVJ0QkFDRVVJd0JCMEFCcklpQWtBQUpBQWtBQ1FFRUFRUU1nRmtVZ0MwVnlCSDlCME1RQUJTQUxLQUlFRFFGQjBzb0FDMEVBRURoQmZ5RVVEQUVMSUJZb0Fod1FNd0pBSUFzb0FnUWlFQVJBSUJZZ0VFR0VBV3dRT2lJQk5nSWNJQUZGRFFNRFFDQU5JQkJPRFFJZ0RVR0VBV3dpQVNBV0tBSWNhaUFMS0FJQUlBRnFRWVFCRUVBYUlBMUJBV29oRFNBTEtBSUVJUkFNQUFzQUMwRUFJUkFnRmtFQU5nSWNDeUFXSUJBMkFpQWdGaWdDSkFSQVFRQWhEUU5BSUJZb0FpZ2dEVW9FUUNBV0tBSWtJQTFCREd4cUtBSUFFRE1nRFVFQmFpRU5EQUVMQ3lBV0tBSWtFRE1MQWtBZ0N5Z0NEQ0lOQkVBZ0ZpQU5RUXhzRURvaUFUWUNKQ0FCUlEwREEwQWdCQ0FOVGcwQ0lBUkJER3dpQlNBV0tBSWthaUlCSUFzb0FnZ2lFQ0FGYWlJREtBSUlOZ0lJSUFFZ0F5Z0NCRFlDQkFKQUFrQWdBeWdDQkNJQ0JFQWdBU0FDUVF4c0VEb2lBVFlDQUVFQUlRMGdBVVVOQndOQUlBSWdEVXdOQWlBTlFReHNJZ0VnRmlnQ0pDQUZhaWdDQUdvaUFpQUZJQkJxS0FJQUlBRnFJZ0VwQWdBM0FnQWdBaUFCS0FJSU5nSUlJQTFCQVdvaERTQUxLQUlJSWhBZ0JXb29BZ1FoQWd3QUN3QUxJQU5CQURZQ0FBd0JDeUFMS0FJTUlRMExJQVJCQVdvaEJBd0FDd0FMUVFBaERTQVdRUUEyQWlRTElCWWdEVFlDS0NBV0tBSTBJZ0VFUUNBQkVETWdGa0lBTndJMEN3SkFBa0FnQ3lnQ0RDSUNRUUZJRFFBZ0ZpQUNOZ0k0SUJZZ0FrSEVBR3dRT2lJQk5nSTBJQUZGRFFGQkFDRU5BMEFnQWlBTlJnMEJJQUVnRFVIRUFHeHFRUUEyQWtBZ0RVRUJhaUVOREFBTEFBc2dGaWdDSUNJQlJRMEJJQUZCQUNBQlFRQktHeUVMQTBCQkFDRWNJQnNnRmlnQ0tFNE5BZ05BSUJ0QkRHd2lDaUFXS0FJa2FpZ0NCQ0FjVEFSQUlCdEJBV29oR3d3Q0N5QWdRVUJyRUU0aEZ5QWdRVEJxRUU0aEVrRUFJUkFnSUVFZ2FoQk9JUmtEUUNBTElCQkdCRUFnSUNBWEVJSUJOZ0lBUVFCQkFVSEgxQUFnSUJBNElCWWdERUVDZEdvZ0ZpZ0NKQ0FLYWlJQktBSUlOZ0k4SUJZb0FnQWhDaUFCS0FJQUlCeEJER3hxSWdFb0FnQWhBaUFCS0FJRUlRRWpBRUVnYXlJZEpBQWdIU0FNTmdJY0lCMUJFR3BCbEFFUVN4Q1lCaENYQmlJZUtBSUFJQUlRbndFZ0hpZ0NBQ0FCRUo0QklCNG9BZ0FRTkVIZ0FCQ2ZBU0FlS0FJQUVEUVFXaUFYRUlJQkVKVUdJQmNnSGlnQ0FCQTBFRm9pQ0VjRVFDQVhLQUlBSVFZZ0Z5Z0NCQ0VDSXdCQkVHc2lCeVFBQWtBZ0NCRGRBU0FDSUFaclFSUnRJZ1JQQkVBZ0J5QUNOZ0lNSUFnUWdnRWdCRThpQXdSL0lBSUZJQWNnQmpZQ0RDQUlFSUlCSVFFZ0J5QUhLQUlNSUFGQkZHeHFOZ0lNSUFjb0Fnd0xJUUVnQ0NnQ0FDRUZJQUVnQm1zaUFRUkFJQVVnQmlBQkVPVUNDeUFEUlFSQUlBZ2dCeWdDRENBQ0lBUWdDQkNDQVdzUWh3WU1BZ3NnQ0NBRklBRkJGRzFCRkd4cUVKSUdEQUVMSUFnb0FnQUVRQ0FJRUlJQklRRWdDQkNWQlNBSUlBRVFqUVlnQ0JBMEdpQUlLQUlBSVFFZ0NCRGRBUm9nQVJBeklBZ1FORUVBTmdJQUlBaENBRGNDQUFzZ0NDQUlJQVFRb0FRUWhnWWdDQ0FHSUFJZ0JCQ0hCZ3NnQjBFUWFpUUFDeUFlS0FJQUVEUVFTU0VHSUJrUWtRRWhBZ0pBSUFJZ0JoQ1JBU0lCU3dSQUl3QkJJR3NpQlNRQUFrQWdBaUFCYXlJRUlBWVFOQ2dDQUNBR0tBSUVhMDBFUUNNQVFSQnJJZ0VrQUNBQklBWWdCQkNyQXlJQ0tBSUVJUkFEUUNBQ0tBSUlJQkJIQkVBZ0JoQTBHaUFDS0FJRUVQVUZJQUlnQWlnQ0JFRUJhaUlRTmdJRURBRUxDeUFDRUhRZ0FVRVFhaVFBREFFTElBWVFOQ0VCSUFWQkNHb2dCaUFHRUpFQklBUnFFS2tESUFZUWtRRWdBUkNlQkNJRElRSWpBRUVRYXlJQkpBQWdBU0FDUVFocUlBUVE5Z1VpQkNnQ0FDRWhBMEFnQkNnQ0JDQWhSd1JBSUFJb0FoQWFJQVFvQWdBUTlRVWdCQ0FFS0FJQVFRRnFJaUUyQWdBTUFRc0xJQVFRc0FFZ0FVRVFhaVFBSUFZZ0F4Q2RCQ0FERUp3RUN5QUZRU0JxSkFBTUFRc2dBU0FDU3dSQUlBWWdCaWdDQUNBQ2FoQ0FCQXNMSUJrZ0hpZ0NBQkEwRUVraUIwY0VRQ0FaS0FJQUlRVWdHU2dDQkNFRUl3QkJFR3NpQmlRQUFrQWdCU0FFRUtjRUlnTWdCeERjQVUwRVFDQUdJQVEyQWd3Z0JTQUhFSkVCSUFOUElnSUVmeUFFQlNBR0lBVTJBZ3dnQmlBSEVKRUJJQVlvQWd4cU5nSU1JQVlvQWd3TElBY29BZ0FRaWdZaEFTQUNSUVJBSUFjZ0JpZ0NEQ0FFSUFNZ0J4Q1JBV3NRaXdZTUFnc2dCeUFCRUlBRURBRUxJQWNvQWdBRVFDQUhFSkVCSVFFZ0J4Q0NCU0FISUFFUWlBWWdCeEEwR2lBSEtBSUFJUUVnQnhEY0FSb2dBUkF6SUFjUU5FRUFOZ0lBSUFkQ0FEY0NBQXNnQnlBREVLa0RJUUlnQnhEUUJpQUNTUVJBRUk4QkFBc2dCeEEwR2lBSElBSVFTeUlCTmdJQUlBY2dBVFlDQkNBSEVEUWdBU0FDYWpZQ0FDQUhRUUFRendZZ0J5QUZJQVFnQXhDTEJnc2dCa0VRYWlRQUN5QWVLQUlBSWdGQkpHb2lCMEVNYWtHQUFSRDlCU0FIUVF4cUVQNEZJQWRCQ0RZQ2FDQUhRUkEyQW13Z0FVRUlhaUlCRUVsQkFCQ2hCU0VGSUFFUWhBRWhCa0VBSVFRakFFRVFheUlJSkFBZ0NCQ25BaUFHQkVBZ0NCQ0tCQ0FHU1FSQUVJOEJBQXNnQ0JBMEdpQUlJQVlROWdNaUFUWUNBQ0FJSUFFMkFnUWdDQkEwSUFFZ0JrRUNkR28yQWdBZ0NFRUFFS0lESUFnZ0JoQ2tBd3NEUUNBSUVFTWdCRTBFUUNBSVFRQVFQQ0VESUFnUVF5RUNJQWRCQ0dvQ2YwR0FBUkJMSVFRZ0J4RHpCU0VCSUFSQkFUb0FaQ0FFSUFFMkFnQWdCRUhvQUdvUVRob2dCRUgwQUdvUVRob2dCRUVFYWtIZ0FCRHhCU0FFQ3hENEJTQUhLQUlJUVFBUWxnTWdCeUFIS0FJSUlBVWdCaUFESUFJUThnVWdDQkJ6SUFoQkVHb2tBQVVnQ0NBRUVEd2dCRFlDQUNBRVFRRnFJUVFNQVFzTElBb29BZ0FvQWdBaEFTQWRRUWhxSUI0UWdRUWlCU0VESXdCQklHc2lIeVFBSUI4Z0REWUNIQ0FmSUFGQnlBQnFJaFVnSDBFY2FoQnlOZ0lZSUI4UWFUWUNDQ0FmUVJocUlCOUJDR29RZndSQVFSQVFDU0lBSUI5QkNHcEIrQjBRbXdFUTJBSWdBRUdjM2dGQkRoQUlBQXNDZnlNQVFTQnJJZzBrQUNBTklCOUJIR29pQVJEWEFqWUNFQ0FOUVJocUlRSkJBQ0VoSXdCQklHc2lFeVFBSUJVUVBSb2dBU2dDQUNFUklCVVFpUUVoRUNBVFFRQTZBQjhDUUFKQUlCQkZEUUFnRlNBUklCQVFXU0loRUR3b0FnQWlCa1VOQUFOQUlBWW9BZ0FpQmtVTkFTQVJJQVlvQWdSSEJFQWdCaWdDQkNBUUVGa2dJVWNOQWdzZ0ZSQmFJQVpCQ0dvZ0FSRE9BVVVOQUFzTUFRc2pBRUVRYXlJR0pBQWdGUkEwSVFFZ0UwRVFha0VVRUVzZ0JrRUlhaUFCUVFBUXNRSVFzQUlpQ0NnQ0FFRUlhaUVFSUEwb0FoQWhBU01BUVJCcklnY2tBQ0FISUFFMkFnZ2dCQ0FIS0FJSUtBSUFOZ0lBSUFSQkJHb1F0UUlhSUFkQkVHb2tBQ0FJRUVsQkFUb0FCQ0FJS0FJQUlCRTJBZ1FnQ0NnQ0FFRUFOZ0lBSUFaQkVHb2tBQUpBSUJVQ2Z5QVZFRDBvQWdCQkFXcXpJQlVRV2lvQ0FDQVFzNVJlUVFFZ0VCc0VRQ0FUSUJBUTRRRkJBWE1nRUVFQmRISTJBZ3dnRXdKL0lCVVFQU2dDQUVFQmFyTWdGUkJhS2dJQWxZMGlKRU1BQUlCUFhTQWtRd0FBQUFCZ2NRUkFJQ1NwREFFTFFRQUxOZ0lJSUJVZ0UwRU1haUFUUVFocUVJQUJLQUlBRVBrRElCRWdGUkNKQVNJUUVGa2hJUXNnSVFzUVBDZ0NBQ0lCUlFSQUlCTW9BaEFnRlVFSWFpSUJLQUlBTmdJQUlCVWdFeWdDRURZQ0NDQVZJQ0VRUENBQk5nSUFJQk1vQWhBb0FnQkZEUUVnRXlnQ0VDRUJJQlVnRXlnQ0VDZ0NBQ2dDQkNBUUVGa1FQQ0FCTmdJQURBRUxJQk1vQWhBZ0FTZ0NBRFlDQUNBQklCTW9BaEEyQWdBTElCTkJFR29RdXdFaEJpQVZFRDBpQVNBQktBSUFRUUZxTmdJQUlCTkJBVG9BSHlBVFFSQnFJZ0VvQWdBaEJDQUJRUUEyQWdBZ0JBUkFJQUVRU1NJQkxRQUVCRUFnQVNnQ0FCb2dCRUVJYWhDUUJnc2dCQVJBSUFFb0FnQWFJQVFRTXdzTEN5QUNJQk5CRUdvZ0JoQjRJQk5CSDJvUXNnSWdFMEVnYWlRQUlBMUJHR29RYkNFQklBMUJJR29rQUNBQlFRUnFDeUFERUpFR0lCOUJJR29rQUNBRkVNOEJJQklnQ2lnQ0FFRUVhaUFkUVJ4cUVKUUdJZ2hIQkVBZ0VpZ0NBQ0VLSUJJb0FnUWhBaU1BUVJCcklnY2tBQUpBSUFvZ0FoRHVBeUlHSUFnUXZRRk5CRUFnQnlBQ05nSU1JQWdRVnlBR1R5SURCSDhnQWdVZ0J5QUtOZ0lNSUFnUVZ5RUJJQWNnQnlnQ0RDQUJRUXhzYWpZQ0RDQUhLQUlNQ3lFQklBZ29BZ0FoQkNBQklBcHJJZ1VFUUNBRUlBb2dCUkRsQWdzZ0EwVUVRQ0FJSUFjb0Fnd2dBaUFHSUFnUVYyc1E1Z1VNQWdzZ0NCQlhJUUVnQ0NBRUlBVkJERzFCREd4cUVOc0dJQWdnQVJEYkFnd0JDeUFJS0FJQUJFQWdDQkJYSVFFZ0NCRGVCaUFJSUFFUTJ3SWdDQkEwR2lBSUtBSUFJUUVnQ0JDOUFSb2dBUkF6SUFnUU5FRUFOZ0lBSUFoQ0FEY0NBQXNnQ0NBR0VMc0NJUU1nQ0JEVEJpQURTUVJBRUk4QkFBc2dDQ0FJRURRZ0F4RFNCaUlCTmdJQUlBZ2dBVFlDQkNBSUVEUWdBU0FEUVF4c2FqWUNBQ0FJUVFBUXJRTWdDQ0FLSUFJZ0JoRG1CUXNnQjBFUWFpUUFDeUFlRU04QklCMUJJR29rQUNBWkVKNEZJQklRN2dRZ0Z4RGVBeUFjUVFGcUlSd2dERUVCYWlFTURBSUxBa0FnRUVHRUFXd2lCaUFXS0FJY2FpSUNLQUtBQVNBV0tBSWtJQXBxSWdFb0FnQWdIRUVNYkdvb0FnaEhEUUFnQWlnQ2ZDQUJLQUlJUncwQVFRQWhEU0FnUVFocUlBSXFBZ0FnQWlvQ0JDQUNLZ0p3SUFJcUFuUWdBaWdDZUVFQVJ4RHFCQ0VEQWtBZ0Z5Z0NCQ0FYRURRb0FnQkpCRUFqQUVFUWF5SUJKQUFnQVNBWFFRRVFvUVFoQWlBWEVEUWdBaWdDQkNBREVLOERJQUlnQWlnQ0JFRVVhallDQkNBQ0VIUWdBVUVRYWlRQURBRUxJd0JCSUdzaUFpUUFJQmNRTkNJQklBSkJDR29nRnlBWEVJSUJRUUZxRUtBRUlCY1FnZ0VnQVJEYUJpSUJLQUlJSUFNUXJ3TWdBU0FCS0FJSVFSUnFOZ0lJSUJjZ0FSRFpCaUFCRU5nR0lBSkJJR29rQUFzZ0ZpZ0NIQ0FHYWlJQktnSUlJU1VnQVNvQ0RDRWtJQ0JCQ0dvaUNFTUFBQUFBT0FJSUlBZ2dKRGdDQkNBSUlDVTRBZ0FDUUNBU0tBSUVJQklRTkNnQ0FFa0VRQ01BUVJCcklnRWtBQ0FCSUJKQkFSRGtBaUVDSUJJUU5DQUNLQUlFSUFnUTFBWWdBaUFDS0FJRVFReHFOZ0lFSUFJUWRDQUJRUkJxSkFBTUFRdEJBQ0VISXdCQklHc2lCQ1FBSUJJUU5DSUNBbjhnRWlBU0VGZEJBV29RdXdJaEJTQVNFRmNoQVNNQVFSQnJJZ01rQUNBRFFRQTJBZ3dnQkVFSWFpSVJRUXhxSUFOQkRHb2dBaEN4QVNBRkJFQWdFU2dDRUNBRkVOSUdJUWNMSUJFZ0J6WUNBQ0FSSUFjZ0FVRU1iR29pQVRZQ0NDQVJJQUUyQWdRZ0VSQTlJQWNnQlVFTWJHbzJBZ0FnQTBFUWFpUUFJQkVvQWdnTElBZ1ExQVlnRVNBUktBSUlRUXhxTmdJSUlCSVEvd0VnRWhBMEdpQVJRUVJxSWdNaUFTQUJLQUlBSUJJb0FnUWdFaWdDQUNJQ2F5SUZRWFJ0UVF4c2FpSUJOZ0lBSUFWQkFVNEVRQ0FCSUFJZ0JSQkFHZ3NnRWlBREVFb2dFa0VFYWlBUlFRaHFFRW9nRWhBMElCRVFQUkJLSUJFZ0VTZ0NCRFlDQUNBU0lCSVFWeEN0QXlBUktBSUVJUUVEUUNBQklCRW9BZ2hIQkVBZ0VTZ0NFQm9nRVNBUktBSUlRUXhyTmdJSURBRUxDeUFSS0FJQUJFQWdFU2dDRUJvZ0VTZ0NBQ0VCSUJFUXJBTWFJQUVRTXdzZ0JFRWdhaVFBQ3dOQUlBMUI0QUJHRFFFZ0ZpZ0NIQ0FHYWlBTmFrRVFhaUVEQWtBZ0dTZ0NCQ0FaRURRb0FnQkhCRUFqQUVFUWF5SUJKQUFnQVNBWlFRRVFxd01oQWlBWkVEUWdBaWdDQkNBREVLb0RJQUlnQWlnQ0JFRUJhallDQkNBQ0VIUWdBVUVRYWlRQURBRUxJd0JCSUdzaUFpUUFJQmtRTkNJQklBSkJDR29nR1NBWkVKRUJRUUZxRUtrRElCa1FrUUVnQVJDZUJDSUJLQUlJSUFNUXFnTWdBU0FCS0FJSVFRRnFOZ0lJSUJrZ0FSQ2RCQ0FCRUp3RUlBSkJJR29rQUFzZ0RVRUJhaUVOREFBTEFBc2dFRUVCYWlFUURBQUxBQXNBQ3dBTERBRUxJQ0JCMEFCcUpBQWdGQXdCQzBFQVFRTkJ1ZEFBUVFBUU9Bd0ZDMEYvVEFSQVFRQkJBMEg5N0FGQkFCQTRJQUFRVGhvTUFRc2dEa0c0QVdvUW1nVkJBRUVCUVpidEFVRUFFRGdnSWlBakVFTWdJaWdDaEFKcU5nS0VBaUFBSUNNUWlRUWFDeUFqRUhNTElBNUJ3QUZxSkFBUEMwRUFRUU5CbStvQlFRQVFPRUYvRUFFQUMwRUFRUU5Cc3lSQkFCQTRDMEVCRUFFQUM0WUdBZ2wvQVh3akFFSEFBV3NpQkNRQVFYOGhDUUpBQW44Z0FCQStJUU1qQUVHZ0Ftc2lBU1FBUVg4aEJRSkFJQVJCQ0dvaUJrVWdBMFZ5RFFBZ0EwSE1LeERIQWlJQ1JRUkFRWlQvQXlnQ0FDRUNJQUVnQXpZQ0ZDQUJJQUkyQWhCQkFFRURRZWN3SUFGQkVHb1FPQ0FCUVpUL0F5Z0NBQkNHQXpZQ0JDQUJRY1FuTmdJQVFRQkJBMEhzSWlBQkVEZ01BUXRCQUNFRklBSkJBRUVDRUljRkFuOENRQUovSUFJb0FreEJmMHdFUUNBQ0tBSUFEQUVMSUFJb0FnQUxRUVYyUVFGeEJFQWdBVUdVL3dNb0FnQTJBbEJCQUVFRFFlNDJJQUZCMEFCcUVEZ2dBVUdVL3dNb0FnQVFoZ00yQWtRZ0FVSEVKellDUUVFQVFRTkI3Q0lnQVVGQWF4QTREQUVMSUFJUTRBY2hCeUFDRUlZRkFrQURRQ0FGSWdOQkJFWU5BU0FEUVFGcUlRVWdCeUFEUVFOMFFkU3hBV29vQWdCdkRRQUxJQUZCNEFCcUlBTkJBM1JCMUxFQmFpZ0NBRUVCSUFJUVhrRUJSd1JBSUFGQmxQOERLQUlBTmdJd1FRQkJBMEdXd3dBZ0FVRXdhaEE0SUFGQmxQOERLQUlBRUlZRE5nSWtJQUZCeENjMkFpQkJBRUVEUWV3aUlBRkJJR29RT0F3Q0N5QUJJQVUyQXBBQ0lBRkI0QUJxRUtBR0lBTkZCRUFnQVNzRDRBRWhDaUFCSUFFckE5Z0JPUVBnQVNBQklBbzVBOWdCQ3lBR0lBRkI0QUJxUWJnQkVFQWhCeUFCUVFBMkFwd0NRUUVoQmdOQVFRQWdCa0VCUmcwREdpQUJJQUVvQXB3Q0lnaEJCR28yQXB3Q0lBZ29BZ0FpQ0NBSEtBS3dBVFlDc0FFZ0FVSGdBR29nQnlnQ3NBRkJBM1JCekxFQmFpZ0NBRUVCSUFJUVhrRUJSdzBDSUFFZ0JUWUNrQUlnQVVIZ0FHb1FvQVlnQTBVRVFDQUJLd1BnQVNFS0lBRWdBU3NEMkFFNUErQUJJQUVnQ2prRDJBRUxJQWdnQVVIZ0FHcEJ1QUVRUUJvZ0JrRUJhaUVHREFBTEFBdEJBRUVEUVpVOVFRQVFPQXRCZndzaEJTQUNFSzRCQ3lBQlFhQUNhaVFBSUFWQmYwd0xCRUFnQkNBQUVENDJBZ0JCQUVFRFFjRG9BU0FFRURnTUFRdEJwUDREUWFUK0F5Z0NBQ0lBUVFGcU5nSUFJQVFnQURZQ0JDQUVRUVJxRU1JRklBUkJDR3BCdUFFUVFCb2dCQ2dDQkNFSkN5QUVRY0FCYWlRQUlBa0wyQU1CQzM4akFFRVFheUlCSkFBZ0FTQUFOZ0lNSUFGQi9QMERJQUZCREdvUWNqWUNDQ0FCRUdrMkFnQkJmeUVBSUFGQkNHb2dBUkIzUlFSQUlBRkJER29RZlNJSUtBTEVBU0lBQkVBZ0FCQXpJQWhDQURjQ3hBRUxJQWdReFFVakFFRWdheUlFSkFBZ0JFSDgvUU1nQVVFTWFoQ0NCallDR0NBRUVQd0ROZ0lRSUFSQkdHb2dCRUVRYWhESkFVVUVRQ0FFUVFocUlBUkJHR29RalFJb0FnQWhBaU1BUVNCcklnVWtBQ0FGUVJocUlBSVFlQ0lLRU9jRklBVkJDR29oQ3lNQVFSQnJJZ2trQUVIOC9RTVFpUUVoQmtIOC9RTWdBaWdDQkNBR0VGa2lCeEE4S0FJQUlRTURRQ0FESWdBb0FnQWlBeUFDUncwQUN3SkFJQUJCaFA0RFJ3UkFJQUFvQWdRZ0JoQlpJQWRHRFFFTElBSW9BZ0FpQXdSQUlBTW9BZ1FnQmhCWklBZEdEUUVMUWZ6OUF5QUhFRHhCQURZQ0FBc0NRQ0FDS0FJQUlnTkZEUUFnQXlnQ0JDQUdFRmtpQXlBSFJnMEFRZno5QXlBREVEd2dBRFlDQUFzZ0FDQUNLQUlBTmdJQUlBSkJBRFlDQUVIOC9RTVFQU0lBSUFBb0FnQkJBV3MyQWdBZ0N5QUNJQWxCQ0dwQi9QMERFRFJCQVJDeEFoQ3dBaG9nQ1VFUWFpUUFJQVZCQ0dvUXRRVWdDaWdDQUJvZ0JVRWdhaVFBQ3lBRVFTQnFKQUFnQ0JERUJSQXpRUUFoQUFzZ0FVRVFhaVFBSUFBTENRQkJ3T3NES0FJQUN3c0FRY0RyQXlBQU5nSUFDM0lCQVg4akFFRVFheUlDSkFBZ0FpQUJOZ0lNSUFKQi9QMERJQUpCREdvUWNqWUNDQ0FDRUdrMkFnQWdBa0VJYWlBQ0VIZEZCRUFnQUNBQ1FReHFFSDBpQVNnQ2hBSTJBZ0FnQUNBQktBTElBallDQkNBQUlBRW9Bc3dDTmdJSUlBQWdBU2dDMEFJMkFnd0xJQUpCRUdva0FBdmxCQUVJZnlNQVFSQnJJZ01rQUNBRElBQTJBZ3dnQTBIOC9RTWdBMEVNYWhCeU5nSUlJQU1RYVRZQ0FFRi9JUUFnQTBFSWFpQURFSGRGQkVBZ0EwRU1haEI5SWdFQ2Z3Si9JQUVvQXZBRElRVWdBU2dDd0FFaUJpZ0NBQ0VBSUFZb0FnUWhCRUdrNndBUU9pSUNCRUFDUUNBQ1FRRTJBdUJuSUFKQ21yUG0rSU9BZ0lEQUFEY0RLQ0FDUW91QWdJQ2dBVGNESUNBQ1FwbUFnSUN3QVRjREdDQUNJQVEyQWdnZ0FpQUFOZ0lFSUFJZ0JUWUNGQ0FBSUFSc0lRZ2dBa0g0NXdCcUtBSUFJUUFnQWtIMDV3QnFLQUlBSVFWQkFTRUhBa0FEUUNBQUlRUWdCMFVOQVVFQUlRQkJBQ0VISUFnUU9pSUZEUUFMSUFJZ0JEWUMrR2NnQWlBRk5nTDBad3dCQ3lBQ0lBUTJBdmhuSUFJZ0JUWUM5R2NnQWd3Q0N3dEJBRUVEUWZTREFrRUFFRGhCQVJBQkFBc2lBQ0FHTmdJTUlBQkJBVFlDQUNBQUlBWkJDR29RN0FNaUJEWUNFQ0FFUkFBQUFBQUFBQUFBRU5JQ0lBQUxOZ0xrQVFKL0lBQkZCRUJCQUVFRFFhZm9BVUVBRURnZ0FTZ0M0QUVpQUFSQUlBQW9BZ0FpQUFSQUlBQkJBQkNhQmdzZ0FCQXpJQUVvQXVBQktBSWNFRE1nQVNnQzRBRW9BaVFRTXlBQktBTGdBU2dDTkJBeklBRW9BdUFCS0FJc0VETWdBU2dDNEFFUU15QUJRUUEyQXVBQkN5QUJLQUxrQVNFQUN5QUFDd1JBSUFCREFBQ2dRRGdDTEFzZ0FTZ0M1QUVpQUFSQUlBQkRBQUFBUHpnQ0tBc2dBU2dDNUFFaUFBUkFJQUJCRURZQ0pBc2dBU2dDNUFFaUFBUkFJQUJCQmpZQ0dBc2dBU2dDNUFFaUFBUkFJQUJCQmpZQ0hBc2dBU2dDNUFFaUFBUkFJQUJCQmpZQ0lBc2dBU0FCS0FMQUFSQ2xCVFlDNEFGQkFDRUFDeUFEUVJCcUpBQWdBQXVnOXdFRU1YOE9mUjU4QTM0akFFRkFhaUlkSkFBZ0hTQUFOZ0k4SUIxQi9QMERJQjFCUEdvUWNqWUNBQ0FkRUdrMkFqaEJmeUVBQWtBZ0hTQWRRVGhxRUhjTkFDQWRRVHhxRUgwaEpDQWRRUUEyQWpnZ0hVRi9OZ0kwSUNRb0FvQUNRWDVIRFFBZ0pDZ0M0QUVoRXlBa0tBTE1BU0VXSXdCQklHc2lIaVFBQWtBQ1FBSkFBa0FDUUNBVFFRQWdGaHRGQkVCQkFFRURRZXpoQUVFQUVEZ01BUXNnRXlnQ0VDRUpJQk1vQWd3aEN3SkFJQk1vQWhRaUowRUJSZzBBQW44Q1FBSkFBa0FDUUFKQUlDZEJBV3NPQlFBQ0JBTUJCQXNnSGlBTE5nSWNJQjRnQ1RZQ0dDQUpJQXRzSWdBUU9pSUJSUTBJSUFFZ0ZpQUFFRUFNQkFzQ2Z5QVdJUUFnSGlBTFFRTnRJZ0pCQVhRaUJEWUNIQ0FlSUFsQkEyMGlGa0VCZENJQk5nSVlJQUVnQkd3UU9pSUJCRUFnRmtFQUlCWkJBRW9iSVFnZ0FrRUFJQUpCQUVvYklSb2dBU0lXSVFJRFFDQUdJQWhIQkVBZ0JDQVdhaUVXSUFBZ0JrRURiQ0lESUF0c2FpRUhJQUFnQTBFQ2FpQUxiR29oQ2lBQUlBTkJBV29nQzJ4cUlRVkJBQ0VEQTBBZ0F5QWFSd1JBSUFJZ0J5MEFBQ0FITFFBQlFRRjJhaUFGTFFBQVFRRjJhaUFGTFFBQlFRSjJha0VDZEVFSmJqb0FBQ0FXSUFvdEFBQWdCUzBBQVVFQ2RpQUZMUUFBUVFGMmFtb2dDaTBBQVVFQmRtcEJBblJCQ1c0NkFBQWdBaUFITFFBQ0lBY3RBQUZCQVhacUlBVXRBQUZCQW5acUlBVXRBQUpCQVhacVFRSjBRUWx1T2dBQklCWWdDaTBBQWlBRkxRQUNRUUYySUFVdEFBRkJBblpxSUFvdEFBRkJBWFpxYWtFQ2RFRUpiam9BQVNBRFFRRnFJUU1nQ2tFRGFpRUtJQVZCQTJvaEJTQUhRUU5xSVFjZ0ZrRUNhaUVXSUFKQkFtb2hBZ3dCQ3dzZ0JrRUJhaUVHSUFJZ0JHb2hBZ3dCQ3dzZ0FRd0JDd3dJQ3d3REN3Si9JQlloQUNBZUlBdEJBbTBpRmpZQ0hDQWVJQWxCQW0waUF6WUNHQ0FESUJac0VEb2lBUVJBSUFOQkFDQURRUUJLR3lFRElCWkJBQ0FXUVFCS0d5RUVJQUVoRmdOQUlBSWdBMGNFUUNBQUlBSkJBWFFpQ2lBTGJHb2hCU0FBSUFwQkFYSWdDMnhxSVFkQkFDRUtBMEFnQkNBS1J3UkFJQllnQnkwQUFTQUhMUUFBSUFVdEFBRWdCUzBBQUdwcWFrRUNkam9BQUNBS1FRRnFJUW9nQjBFQ2FpRUhJQVZCQW1vaEJTQVdRUUZxSVJZTUFRc0xJQUpCQVdvaEFnd0JDd3NnQVF3QkN3d0hDd3dDQ3dKL0lCNGdDMEVEYlNJQU5nSWNJQjRnQ1VFRGJTSUNOZ0lZSUFBZ0Ftd1FPaUlCQkVBZ0FrRUFJQUpCQUVvYklRUWdBRUVBSUFCQkFFb2JJUWdnQVNFQUEwQWdCQ0FLUndSQUlCWWdDa0VEYkNJRElBdHNhaUVGSUJZZ0EwRUNhaUFMYkdvaEFpQVdJQU5CQVdvZ0MyeHFJUWRCQUNFR0EwQWdCaUFJUndSQUlBQWdBaTBBQWlBQ0xRQUJJQUl0QUFBZ0J5MEFBaUFITFFBQklBY3RBQUFnQlMwQUFpQUZMUUFCSUFVdEFBQnFhbXBxYW1wcWFrRUpiam9BQUNBR1FRRnFJUVlnQWtFRGFpRUNJQWRCQTJvaEJ5QUZRUU5xSVFVZ0FFRUJhaUVBREFFTEN5QUtRUUZxSVFvTUFRc0xJQUVNQVFzTUJnc01BUXNDZnlBZUlBdEJCRzBpQURZQ0hDQWVJQWxCQkcwaUFqWUNHQ0FBSUFKc0VEb2lBUVJBSUFKQkFDQUNRUUJLR3lFSUlBQkJBQ0FBUVFCS0d5RWFJQUVoQUFOQUlBWWdDRWNFUUNBV0lBWkJBblFpQXlBTGJHb2hCU0FXSUFOQkEzSWdDMnhxSVFJZ0ZpQURRUUp5SUF0c2FpRUhJQllnQTBFQmNpQUxiR29oQ2tFQUlRUURRQ0FFSUJwSEJFQWdBQ0FDTFFBRElBSXRBQUlnQWkwQUFTQUNMUUFBSUFjdEFBTWdCeTBBQWlBSExRQUJJQWN0QUFBZ0NpMEFBeUFLTFFBQ0lBb3RBQUVnQ2kwQUFDQUZMUUFESUFVdEFBSWdCUzBBQVNBRkxRQUFhbXBxYW1wcWFtcHFhbXBxYW1wcVFRUjJPZ0FBSUFSQkFXb2hCQ0FDUVFScUlRSWdCMEVFYWlFSElBcEJCR29oQ2lBRlFRUnFJUVVnQUVFQmFpRUFEQUVMQ3lBR1FRRnFJUVlNQVFzTElBRU1BUXNNQlFzTEloWU5BQXdCQ3lBVEtBSUFJUUFqQUVFZ2F5SXJKQUFnS3lBV1FRRWdDeUFKSUFzUXh3VWhIeUFBS0FJQUtBSUFJUnBCQUNFR0l3QkJJR3NpTENRQUFrQUNRQ0FhUWR3QWFpSUhFRWtRcUFGRkRRQWdCeEJKUVFBUVRDZ0NCQ0FmS0FJRVJ3MEFJQWNRU1VFQUVFd29BZ2dnSHlnQ0NFWU5BUXNnSHlnQ0JDRURJQjhvQWdnaEJTQWZLQUlFSVFvZ0h5Z0NDQ0VDQTBBZ0NrRUlTQ0FDUVFoSWNrVUVRQ0FHUVFGcUlRWWdBa0VCZFNFQ0lBcEJBWFVoQ2d3QkN3dEJBQ0VLSUFkQkF6WUNGQ0FISUFZMkFoQWdCME1BQUFCQVF3QUFBRDhReFFZaU1qZ0NHQ0FIUXdBQWdEOGdNaENtQXBVNEFod2dCMEVFYWlJQUlBY29BaFFnQm13UW13UWdCa0VBSUFaQkFFb2JJUUlEUUNBQ0lBcEhCRUFnQlNBS2RpRUVJQU1nQ25ZaEMwRUFJUUVEUUNBSEtBSVVJZ1lnQVUwRVFDQUtRUUZxSVFvTUF3VWdBQ0FHSUFwc0lBRnFFRXhCQWlBTElBUkJBUkRtQXlBQlFRRnFJUUVNQVFzQUN3QUxDd0pBSUFkQklHb2lBQkNSQWlJQ0lBTWdCV3dpQkNJQlNRUkFJd0JCSUdzaUN5UUFBa0FnQVNBQ2F5SUZJQUFRTkNnQ0FDQUFLQUlFYTBFQmRVMEVRQ01BUVJCcklnRWtBQ0FCSUFBMkFnQWdBU0FBS0FJRUlnSTJBZ1FnQVNBQ0lBVkJBWFJxTmdJSUlBRW9BZ1FoQ2dOQUlBRW9BZ2dnQ2tjRVFDQUFFRFFnQVNnQ0JCQ2RCaUFCSUFFb0FnUkJBbW9pQ2pZQ0JBd0JDd3NnQVJCMElBRkJFR29rQUF3QkN5QUFFRFFoQ1NBTFFRaHFJUUVDZnlBQUVKRUNJQVZxSVFvakFFRVFheUlDSkFBZ0FpQUtOZ0lNQW44akFFRVFheUlESkFBZ0FCQTBHaUFEUWYvLy8vOEhOZ0lNSUFOQi8vLy8vd2MyQWdnZ0EwRU1haUFEUVFocUVNb0JLQUlBSVFZZ0EwRVFhaVFBSUFZZ0NrOExCRUFnQUJDUUFpSURJQVpCQVhaSkJFQWdBaUFEUVFGME5nSUlJQUpCQ0dvZ0FrRU1haENBQVNnQ0FDRUdDeUFDUVJCcUpBQWdCZ3dCQ3hDUEFRQUxJUUlnQUJDUkFpRUdRUUFoQ2lNQVFSQnJJZ01rQUNBRFFRQTJBZ3dnQVVFTWFpQURRUXhxSUFrUXNRRWdBZ1JBSUFFb0FoQWFJQUpCLy8vLy93ZExCRUJCOUlBQkVKUUJBQXNnQWtFQmRCQkxJUW9MSUFFZ0NqWUNBQ0FCSUFvZ0JrRUJkR29pQmpZQ0NDQUJJQVkyQWdRZ0FSQTlJQW9nQWtFQmRHbzJBZ0FnQTBFUWFpUUFJd0JCRUdzaUFpUUFJQUlnQVNnQ0NEWUNBQ0FCS0FJSUlRTWdBaUFCUVFocU5nSUlJQUlnQXlBRlFRRjBhallDQkNBQ0tBSUFJUW9EUUNBQ0tBSUVJQXBIQkVBZ0FTZ0NFQ0FDS0FJQUVKMEdJQUlnQWlnQ0FFRUNhaUlLTmdJQURBRUxDeUFDRUxBQklBSkJFR29rQUNBQUVLTUdJQUFRTkNBQUtBSUFJQUFvQWdRZ0FVRUVhaUlDRUxvQ0lBQWdBaEJLSUFCQkJHb2dBVUVJYWhCS0lBQVFOQ0FCRUQwUVNpQUJJQUVvQWdRMkFnQWdBQkNSQWhvZ0FDZ0NBQm9nQUNnQ0FDQUFFSkFDUVFGMGFob2dBQ2dDQUNBQUVKQUNRUUYwYWhvZ0FDZ0NBQm9nQVNnQ0JDRUFBMEFnQUNBQktBSUlSd1JBSUFFb0FoQWFJQUVnQVNnQ0NFRUNhellDQ0F3QkN3c2dBU2dDQUFSQUlBRW9BaEFhSUFFb0FnQWhBQ0FCRUQwb0FnQWdBU2dDQUdzYUlBQVFNd3NMSUF0QklHb2tBQXdCQ3lBQklBSkpCRUFnQUNnQ0FDQUJRUUYwYWlFQklBQVFrUUlhSUFBZ0FSQ2VCaUFBS0FJQUdpQUFLQUlBSUFBUWtBSkJBWFJxR2lBQUtBSUFHaUFBS0FJQUlBQVFrUUpCQVhScUdnc0xJQWRCTEdvZ0JCQ1VBaUFIUVRocUlBUVFsQUlMQW44Z0xFR1ZKUkNTQVNFRFFRRUxCRUFDUUFKQUFrQUNRQUpBSUI4b0FnQkJBVVlFUUNBZktBSVFRUUZIRFFFZ0IwRUVhaUlBRUtnQklBY29BaFFnQnlnQ0VHeEhEUUlnSHlnQ0JDQUFRUUFRVENnQ0JFY05BeUFmS0FJSUlBQkJBQkJNS0FJSVJ3MEVJQWNnQUVFQUVFd2dIeERaQWlBSElBQkJBUkJNSUFCQkFCQk1FTmtDSUFjZ0FFRUNFRXdnQUVFQkVFd1FvZ1pCQVNFQ0EwQWdBaUFIS0FJUVR3MEdJQUFnQnlnQ0ZDQUNiQkJNS0FJWUlRa2dBQ0FIS0FJVUlBSnNRUUZyRUV3b0FoZ2hCVUVBSVFvZ0FDQUhLQUlVSUFKc1FRRnJFRXdvQWdRaUFVRUJkQ0VMSUFBZ0J5Z0NGQ0FDYkVFQmF4Qk1LQUlJUVFGMklSQWdBVUVCZGlFTUEwQWdDaUFRUndSQUlBVWdDaUFMYkVFQ2RHb2lDQ0FCUVFKMGFpRUdRUUFoQkFOQUlBUWdERVlFUUNBS1FRRnFJUW9NQXdVZ0NTQUlLZ0lBSUFncUFnU1NJQVlxQWdDU0lBWXFBZ1NTUXdBQWdENlVPQUlBSUFaQkNHb2hCaUFJUVFocUlRZ2dCRUVCYWlFRUlBbEJCR29oQ1F3QkN3QUxBQXNMSUFjZ0FDQUhLQUlVSUFKc1FRRnFFRXdnQUNBSEtBSVVJQUpzRUV3UTJRSWdCeUFBSUFjb0FoUWdBbXhCQW1vUVRDQUFJQWNvQWhRZ0FteEJBV29RVEJDaUJpQUNRUUZxSVFJTUFBc0FDMEhBa3dSQm1Ub1FNa0hkR1JBeVFma2tFREpCeWdJUU5VSDlLUkF5UWRnL0VESVFOZ3dKQzBIQWt3UkJwTVVBRURKQjNSa1FNa0g1SkJBeVFjc0NFRFZCL1NrUU1rRzd5d0FRTWhBMkRBZ0xRY0NUQkVIdDBBQVFNa0hkR1JBeVFma2tFREpCelFJUU5VSDlLUkF5UWYvVUFCQXlFRFlNQnd0QndKTUVRZXZhQUJBeVFkMFpFREpCK1NRUU1rSE9BaEExUWYwcEVESkIrZDRBRURJUU5nd0dDMEhBa3dSQngrSUFFREpCM1JrUU1rSDVKQkF5UWM4Q0VEVkIvU2tRTWtINTNnQVFNaEEyREFVTEN5QURFSDRqQUVFd2F5SWdKQUFDUUNBYVFhQUJhaUlMS0FJQUlBY1FTVUVBRUV3b0FnUkdCRUFnQ3lnQ0JDQUhFRWxCQUJCTUtBSUlSZzBCQzBFQUlRcEJBQ0VJUVFBaEJpQUxRU0JxSVFBQ1FDQUhRUVJxRUtnQkJFQWdCMEVBUVFBUTh3RW9BZ0FoQVNBSFFRQkJBQkR6QVNnQ0JDRUNJQWRCQUVFQUVQTUJLQUlJSVFNZ0FDQUhLQUlRTmdJTUlBQWdCeWdDRkVFQmF5SUZOZ0lRSUFBZ0FDZ0NEQ0FGYkJDYkJBTkFJQW9nQUNnQ0RFOE5BaUFESUFwMklRVWdBaUFLZGlFRVFRQWhDUU5BSUFBb0FoQWlFQ0FKVFFSQUlBcEJBV29oQ2d3Q0JTQUFJQW9nRUd3Z0NXb1FUQ0FCSUFRZ0JVRUJFT1lESUFsQkFXb2hDUXdCQ3dBTEFBc0FDMEhBa3dSQndSQVFNa0hLR0JBeVFmSWtFREpCTlJBMVFmb3BFREpCelMwUU1oQTJEQVVMSUFjUVNVRUFFRXdvQWdRaENpQUhFRWxCQUJCTUtBSUlJUVVnQnlnQ0VDRURJQWNvQWhRaEFTQUxRZHdBYWlJQVE4M01URDg0QWhnZ0FFRUZOZ0lVSUFCREFBREFQemdDRUNBQVF3QUFRRUE0QWd3Z0FFRWtOZ0lJSUFBZ0FUWUNCQ0FBSUFNMkFnQWdBRUVjYWtFa0VKUUNJQUJCS0dvaUJDQUFLQUlFSUFBb0FnQnNFSnNFQTBBZ0F5QUlSd1JBSUFVZ0NIWWhBQ0FLSUFoMklRa2dBU0FJYkNFUVFRQWhBZ05BSUFFZ0FrWUVRQ0FJUVFGcUlRZ01Bd1VnQkNBQ0lCQnFFRXhCQWlBSklBQkJBaERtQXlBQ1FRRnFJUUlNQVFzQUN3QUxDeUFMSUFjUVNVRUFFRXdvQWdRMkFnQWdDeUFIRUVsQkFCQk1LQUlJTmdJRUlBc29BZ2doQVFKQUlBRWdDMEVRYWlJRElnQVFWeUlDU3dSQUl3QkJJR3NpQ2lRQUFrQWdBU0FDYXlJQ0lBQVFOQ2dDQUNBQUtBSUVhMEVNYlUwRVFDQUFJQUlRc2dZTUFRc2dBQkEwSVFFZ0NrRUlhaUFBSUFBUVZ5QUNhaEM3QWlBQUVGY2dBUkN4QmlJQklBSVFzQVlnQUNBQkVLOEdJQUVvQWdRaEFBTkFJQUFnQVNnQ0NFY0VRQ0FCS0FJUUdpQUJJQUVvQWdoQkRHc2lBallDQ0NBQ0VMd0dEQUVMQ3lBQktBSUFCRUFnQVNnQ0VCb2dBU2dDQUNFQUlBRVFyQU1hSUFBUU13c0xJQXBCSUdva0FBd0JDeUFCSUFKSkJFQWdBQ2dDQUNBQlFReHNhaUVCSUFBUVZ5RUNJQUFnQVJDOUJpQUFJQUlRMndJTEN3TkFJQU1RVnlBR1N3UkFJQU1nQmhDWEFTRUFJQXNvQWd3aEFRSkFJQUVnQUJCWElnSkxCRUFqQUVFZ2F5SUtKQUFDUUNBQklBSnJJZ0lnQUJBMEtBSUFJQUFvQWdSclFReHRUUVJBSUFBZ0FoQ3lCZ3dCQ3lBQUVEUWhBU0FLUVFocUlBQWdBQkJYSUFKcUVMc0NJQUFRVnlBQkVMRUdJZ0VnQWhDd0JpQUFJQUVRcndZZ0FTZ0NCQ0VBQTBBZ0FDQUJLQUlJUndSQUlBRW9BaEFhSUFFZ0FTZ0NDRUVNYXlJQ05nSUlJQUlRNUFFTUFRc0xJQUVvQWdBRVFDQUJLQUlRR2lBQktBSUFJUUFnQVJDc0F4b2dBQkF6Q3dzZ0NrRWdhaVFBREFFTElBRWdBa2tFUUNBQUtBSUFJQUZCREd4cUlRRWdBQkJYSVFJZ0FDQUJFTHNHSUFBZ0FoRGJBZ3NMSUFaQkFXb2hCZ3dCQ3dzTFFaUUJFRXNRbUFZaEFTTUFRUkJySWdBa0FDQUFRUWhxSUFFUWx3WWlBU0FhUVVCcklpVVErZ01nQVJEUEFTQUFRUkJxSkFBZ0pTZ0NBQ0FIRUVsQkFCQk1LQUlFRUo4QklDVW9BZ0FnQnhCSlFRQVFUQ2dDQ0JDZUFRSi9JQ0JCRUdwQmlTb1FrZ0VoTFVFQkN3UkFBa0FnSlNnQ0FDRXVJQnBCdkFKcUlSQkJBQ0VLSXdCQk1Hc2lJU1FBQWtBQ1FBSkFBa0FDUUFKQUlBY0VRQ0FMUlEwQklBY1FTUkNvQVVVTkFpQUhFRWxCQUJCTUtBSUVJQXNvQWdCSERRTWdCeEJKUVFBUVRDZ0NDQ0FMS0FJRVJ3MEVRUUFoQlNNQVFTQnJJaHdrQUFKQUFrQWdCeWdDRUVFQVNnUkFBbjhnSEVHZ2tBRVFrZ0VoREVFQkN3UkFBa0FDUUFKQUlBdEJJR29pQmhDb0FRUkFJQWNvQWhCQkFFd05BU0FIUWJDeUFVSEkzZ0VRc2dGRkRRSURRRUVBSVFBZ0JTQUdLQUlNVHcwRUEwQWdCaWdDRUNBQVRRUkFJQVZCQVdvaEJRd0NCU0FHSUFZb0FoQWdCV3dnQUdvUVRDRUJJQWNnQlNBQUVQTUJJUUlnQnlBRklBQkJBV29pQUJEekFTRURRUUFoQkFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRW9BZ0JCQWtZRVFDQUNLQUlBUVFKSERRRWdBeWdDQUVFQ1J3MENJQUVvQWhCQkFVY05BeUFDS0FJUVFRRkhEUVFnQXlnQ0VFRUJSdzBGSUFFb0FnUWdBeWdDQkVjTkJpQUJLQUlJSUFNb0FnaEhEUWNnQWlnQ0JDQURLQUlFUncwSUlBSW9BZ2dnQXlnQ0NFY05DUU5BSUFRZ0FpZ0NDRThORFVFQUlRa2dCQ0FCS0FJSVR3UkFRY0NUQkVHWjFBRVFNa0c3MVFFUU1rSHlKQkF5UWZjQUVEVkIraWtRTWtISTFnRVFNaEEyREJZTElBRW9BaGdnQVNnQ0RDQUViR29oRFNBQ0lBUVFUU0VPSUFNZ0JCQk5JUlFEUUNBSklBSW9BZ1JQQkVBZ0JFRUJhaUVFREFJRklBMGdDVUVDZENJSWFpQUlJQTVxS2dJQUlBZ2dGR29xQWdDVE9BSUFJQWxCQVdvaENRd0JDd0FMQUFzQUMwSEFrd1JCMHRRQUVESkJ5aGdRTWtIeUpCQXlRZFlBRURWQitpa1FNa0hSMmdBUU1oQTJEQWtMUWNDVEJFSEszZ0FRTWtIS0dCQXlRZklrRURKQjF3QVFOVUg2S1JBeVFkSGFBQkF5RURZTUNBdEJ3Sk1FUVpqaUFCQXlRY29ZRURKQjhpUVFNa0hZQUJBMVFmb3BFREpCMGRvQUVESVFOZ3dIQzBIQWt3UkJxUE1BRURKQnloZ1FNa0h5SkJBeVFka0FFRFZCK2lrUU1rSGs5Z0FRTWhBMkRBWUxRY0NUQkVHcytnQVFNa0hLR0JBeVFmSWtFREpCMmdBUU5VSDZLUkF5UWVUMkFCQXlFRFlNQlF0QndKTUVRZkg4QUJBeVFjb1lFREpCOGlRUU1rSGJBQkExUWZvcEVESkI1UFlBRURJUU5nd0VDMEhBa3dSQnhJQUJFREpCeWhnUU1rSHlKQkF5UWR3QUVEVkIraWtRTWtHaGd3RVFNaEEyREFNTFFjQ1RCRUdKaGdFUU1rSEtHQkF5UWZJa0VESkIzUUFRTlVINktSQXlRZGVJQVJBeUVEWU1BZ3RCd0pNRVFhT0xBUkF5UWNvWUVESkI4aVFRTWtIZUFCQTFRZm9wRURKQm9ZTUJFRElRTmd3QkMwSEFrd1JCMll3QkVESkJ5aGdRTWtIeUpCQXlRZDhBRURWQitpa1FNa0hYaUFFUU1oQTJDd3dKQ3dBTEFBc0FDMEhBa3dSQnhUTVFNa0hLR0JBeVFmSWtFREpCeUFBUU5VSDZLUkF5UWZBNUVESVFOZ3dGQzBIQWt3UkJwejhRTWtIS0dCQXlRZklrRURKQnlRQVFOVUg2S1JBeVFZREZBQkF5RURZTUJBdEJ3Sk1FUWZQS0FCQXlRY29ZRURKQjhpUVFNa0hLQUJBMVFmb3BFREpCeXRBQUVESVFOZ3dEQ3dzZ0RCQitBbjhnSEVIY2tRRVFrZ0VoTDBFQkN3UkFBa0FnQzBFZ2FpRU9Jd0JCTUdzaUNTUUFJQXRCUEdvaUtCQ1VCQ0FMUVNCcUlUQWdDVUVJYWtFRWNpRXBJQXNxQWpRUWJTRTRRUUVoQVFOQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBd0VLZ0JRUUZySUFGTEJFQWdEaUFCUVFGckVKTUVJUVVnRGlBQkVKTUVJUVlnRGlBQlFRRnFJZ0lRa3dRaEJBSi9JQTRRcUFFZ0FVc0VRQ0FPUVFBUVRDZ0NCQ0FPSUFFUVRDZ0NCRzZ6RU1jR0VNWUdJaktMUXdBQUFFOWRCRUFnTXFnTUFndEJnSUNBZ0hnTUFRdEJ3Sk1FUWZXNUFSQXlRZXU2QVJBeVFmSWtFREpCM2dBUU5VSDZLUkF5UVlhOUFSQXlFRFlNRGdzaERTQUJJQTRvQWhCdklSUUNRQ0FGS0FJRUlBWW9BZ1JIRFFBZ0JTZ0NCQ0FFS0FJRVJ3MEFJQVVvQWdnZ0JpZ0NDRWNOQWlBRktBSUlJQVFvQWdoSERRTkJBU0VBSUFZb0FnUkJBV3NpQVVFQklBRkJBVXNiSVNZZ0JpZ0NDRUVCYXlJQlFRRWdBVUVCU3hzaE1TQVVzaUV6QTBBZ0FDQXhSZzBKUVFFaEFTQUFzeUUwSUFVZ0FFRUJheUlJRUUwaElpQUZJQUFRVFNFUElBVWdBRUVCYWlJREVFMGhHQ0FHSUFnUVRTRVNJQVlnQUJCTklTTWdCaUFERUUwaEZTQUVJQWdRVFNFWklBUWdBQkJOSVJzZ0JDQURFRTBoRndOQUlBRWdKa1lFUUNBRElRQU1BZ1VDUUNBaklBRkJBblFpQUdvaUNDb0NBQkJ0SURoZERRQUNRQUpBSUFncUFnQWlNaUFpSUFGQkFXdEJBblFpQ0dvcUFnQWlOVjVGRFFBZ01pQUFJQ0pxS2dJQVhrVU5BQ0F5SUNJZ0FVRUJha0VDZENJTWFpb0NBRjVGRFFBZ01pQUlJQTlxS2dJQVhrVU5BQ0F5SUFBZ0Qyb3FBZ0JlUlEwQUlESWdEQ0FQYWlvQ0FGNUZEUUFnTWlBSUlCaHFLZ0lBWGtVTkFDQXlJQUFnR0dvcUFnQmVSUTBBSURJZ0RDQVlhaW9DQUY1RkRRQWdNaUFJSUJKcUtnSUFYa1VOQUNBeUlBQWdFbW9xQWdCZVJRMEFJRElnRENBU2Fpb0NBRjVGRFFBZ01pQUlJQ05xS2dJQVhrVU5BQ0F5SUF3Z0kyb3FBZ0JlUlEwQUlESWdDQ0FWYWlvQ0FGNUZEUUFnTWlBQUlCVnFLZ0lBWGtVTkFDQXlJQXdnRldvcUFnQmVSUTBBSURJZ0NDQVphaW9DQUY1RkRRQWdNaUFBSUJscUtnSUFYa1VOQUNBeUlBd2dHV29xQWdCZVJRMEFJRElnQ0NBYmFpb0NBRjVGRFFBZ01pQUFJQnRxS2dJQVhrVU5BQ0F5SUF3Z0cyb3FBZ0JlUlEwQUlESWdDQ0FYYWlvQ0FGNUZEUUFnTWlBQUlCZHFLZ0lBWGtVTkFDQXlJQXdnRjJvcUFnQmVEUUVMSURJZ05WMUZEUUVnTWlBQUlDSnFLZ0lBWFVVTkFTQXlJQ0lnQVVFQmFrRUNkQ0lNYWlvQ0FGMUZEUUVnTWlBSUlBOXFLZ0lBWFVVTkFTQXlJQUFnRDJvcUFnQmRSUTBCSURJZ0RDQVBhaW9DQUYxRkRRRWdNaUFJSUJocUtnSUFYVVVOQVNBeUlBQWdHR29xQWdCZFJRMEJJRElnRENBWWFpb0NBRjFGRFFFZ01pQUlJQkpxS2dJQVhVVU5BU0F5SUFBZ0Vtb3FBZ0JkUlEwQklESWdEQ0FTYWlvQ0FGMUZEUUVnTWlBSUlDTnFLZ0lBWFVVTkFTQXlJQXdnSTJvcUFnQmRSUTBCSURJZ0NDQVZhaW9DQUYxRkRRRWdNaUFBSUJWcUtnSUFYVVVOQVNBeUlBd2dGV29xQWdCZFJRMEJJRElnQ0NBWmFpb0NBRjFGRFFFZ01pQUFJQmxxS2dJQVhVVU5BU0F5SUF3Z0dXb3FBZ0JkUlEwQklESWdDQ0FiYWlvQ0FGMUZEUUVnTWlBQUlCdHFLZ0lBWFVVTkFTQXlJQXdnRzJvcUFnQmRSUTBCSURJZ0NDQVhhaW9DQUYxRkRRRWdNaUFBSUJkcUtnSUFYVVVOQVNBeUlBd2dGMm9xQWdCZFJRMEJDeUFKSURJNEFpQWdDU0FVTmdJWUlBa2dEVFlDRkNBSklBY2dEU0F6RUtnRE9BSWtJQWxCQ0dvZ0tTQUJzeUEwSUEwUTR3SWdLQ0FKUVFocUVPSUNDeUFCUVFGcUlRRU1BUXNBQ3dBTEFBc0NRQ0FGS0FJRUlBWW9BZ1JIRFFBZ0JDZ0NCQ0FHS0FJRVFRRjJSdzBBSUFVb0FnZ2dCaWdDQ0VjTkJDQUVLQUlJSUFZb0FnaEJBWFpIRFFWQkFpRUFBbjhnQkNnQ0JFRUJhN05EQUFBQXY1SWlNaUF5a2tNQUFBQS9rbzRpTWtNQUFJQlBYU0F5UXdBQUFBQmdjUVJBSURLcERBRUxRUUFMSWdGQkFrc2hBeUFCUVFJZ0F4c2hJZ0ovSUFRb0FnaEJBV3V6UXdBQUFMK1NJaklnTXBKREFBQUFQNUtPSWpKREFBQ0FUMTBnTWtNQUFBQUFZSEVFUUNBeXFRd0JDMEVBQ3lJQlFRSWdBVUVDU3hzaEl5QVVzaUU1QTBBZ0FDQWpSZzBKSUFDeklqcERBQUFBUDVSREFBQ0F2cElpTkVNQUFBQS9raUUxSURSREFBQUF2NUloTjBFQ0lRRWdCU0FBUVFGcklnZ1FUU0VaSUFVZ0FCQk5JUThnQlNBQVFRRnFJZ01RVFNFWUlBWWdDQkJOSVJJZ0JpQUFFRTBoR3lBR0lBTVFUU0VWQTBBZ0FTQWlSZ1JBSUFNaEFBd0NCUUpBSUJzZ0FVRUNkQ0lJYWlJQUtnSUFFRzBnT0YwTkFDQUJzeUk3UXdBQUFEK1VRd0FBZ0w2U0lUTUNRQUpBSUFBcUFnQWlNaUFaSUFGQkFXdEJBblFpREdvaUppb0NBRjVGRFFBZ01pQUlJQmxxS2dJQVhrVU5BQ0F5SUJrZ0FVRUJha0VDZENJWGFpb0NBRjVGRFFBZ01pQU1JQTlxS2dJQVhrVU5BQ0F5SUFnZ0Qyb3FBZ0JlUlEwQUlESWdEeUFYYWlvQ0FGNUZEUUFnTWlBTUlCaHFLZ0lBWGtVTkFDQXlJQWdnR0dvcUFnQmVSUTBBSURJZ0Z5QVlhaW9DQUY1RkRRQWdNaUFNSUJKcUtnSUFYa1VOQUNBeUlBZ2dFbW9xQWdCZVJRMEFJRElnRWlBWGFpb0NBRjVGRFFBZ01pQU1JQnRxS2dJQVhrVU5BQ0F5SUJjZ0cyb3FBZ0JlUlEwQUlESWdEQ0FWYWlvQ0FGNUZEUUFnTWlBSUlCVnFLZ0lBWGtVTkFDQXlJQlVnRjJvcUFnQmVSUTBBSUFRZ00wTUFBQUMva2lJMklEY1FTQ0F5WFVVTkFDQUFLZ0lBSUFRZ015QTNFRWhlUlEwQUlBQXFBZ0FnQkNBelF3QUFBRCtTSWpJZ054QklYa1VOQUNBQUtnSUFJQVFnTmlBMEVFaGVSUTBBSUFBcUFnQWdCQ0F6SURRUVNGNUZEUUFnQUNvQ0FDQUVJRElnTkJCSVhrVU5BQ0FBS2dJQUlBUWdOaUExRUVoZVJRMEFJQUFxQWdBZ0JDQXpJRFVRU0Y1RkRRQWdBQ29DQUNBRUlESWdOUkJJWGcwQkN5QUFLZ0lBSWpJZ0ppb0NBRjFGRFFFZ01pQUlJQmxxS2dJQVhVVU5BU0F5SUJrZ0FVRUJha0VDZENJWGFpb0NBRjFGRFFFZ01pQU1JQTlxS2dJQVhVVU5BU0F5SUFnZ0Qyb3FBZ0JkUlEwQklESWdEeUFYYWlvQ0FGMUZEUUVnTWlBTUlCaHFLZ0lBWFVVTkFTQXlJQWdnR0dvcUFnQmRSUTBCSURJZ0Z5QVlhaW9DQUYxRkRRRWdNaUFNSUJKcUtnSUFYVVVOQVNBeUlBZ2dFbW9xQWdCZFJRMEJJRElnRWlBWGFpb0NBRjFGRFFFZ01pQU1JQnRxS2dJQVhVVU5BU0F5SUJjZ0cyb3FBZ0JkUlEwQklESWdEQ0FWYWlvQ0FGMUZEUUVnTWlBSUlCVnFLZ0lBWFVVTkFTQXlJQlVnRjJvcUFnQmRSUTBCSUFRZ00wTUFBQUMva2lJMklEY1FTQ0F5WGtVTkFTQUFLZ0lBSUFRZ015QTNFRWhkUlEwQklBQXFBZ0FnQkNBelF3QUFBRCtTSWpJZ054QklYVVVOQVNBQUtnSUFJQVFnTmlBMEVFaGRSUTBCSUFBcUFnQWdCQ0F6SURRUVNGMUZEUUVnQUNvQ0FDQUVJRElnTkJCSVhVVU5BU0FBS2dJQUlBUWdOaUExRUVoZFJRMEJJQUFxQWdBZ0JDQXpJRFVRU0YxRkRRRWdBQ29DQUNBRUlESWdOUkJJWFVVTkFRc2dDU0FVTmdJWUlBa2dEVFlDRkNBSklBQXFBZ0E0QWlBZ0NTQUhJQTBnT1JDb0F6Z0NKQ0FKUVFocUlDa2dPeUE2SUEwUTR3SWdLQ0FKUVFocUVPSUNDeUFCUVFGcUlRRU1BUXNBQ3dBTEFBc2dBaUVCSUFZb0FnUWdCU2dDQkVFQmRrY05DU0FFS0FJRUlBVW9BZ1JCQVhaSERRa2dCaWdDQ0NBRktBSUlRUUYyUncwRklBUW9BZ2dnQlNnQ0NFRUJka2NOQmtFQklRQWdCaWdDQkVFQmF5SUJRUUVnQVVFQlN4c2hJaUFHS0FJSVFRRnJJZ0ZCQVNBQlFRRkxHeUVqSUJTeUlUa0RRQ0FBSUNOR0RRaEJBU0VCSUFCQkFYU3pRd0FBQUQrU0lqUkRBQUFBUUpJaE5TQTBRd0FBQU1DU0lUY2dBTE1oT2lBR0lBQkJBV3NpQ0JCTklSa2dCaUFBRUUwaEd5QUdJQUJCQVdvaUF4Qk5JUThnQkNBSUVFMGhHQ0FFSUFBUVRTRVNJQVFnQXhCTklSVURRQ0FCSUNKR0JFQWdBeUVBREFJRkFrQWdHeUFCUVFKMElnaHFJZ0FxQWdBUWJTQTRYUTBBSUFGQkFYU3pRd0FBQUQrU0lUTUNRQUpBSUFBcUFnQWlNaUFaSUFGQkFXdEJBblFpREdvaUppb0NBRjVGRFFBZ01pQUlJQmxxS2dJQVhrVU5BQ0F5SUJrZ0FVRUJha0VDZENJWGFpb0NBRjVGRFFBZ01pQU1JQnRxS2dJQVhrVU5BQ0F5SUJjZ0cyb3FBZ0JlUlEwQUlESWdEQ0FQYWlvQ0FGNUZEUUFnTWlBSUlBOXFLZ0lBWGtVTkFDQXlJQThnRjJvcUFnQmVSUTBBSURJZ0RDQVlhaW9DQUY1RkRRQWdNaUFJSUJocUtnSUFYa1VOQUNBeUlCY2dHR29xQWdCZVJRMEFJRElnRENBU2Fpb0NBRjVGRFFBZ01pQUlJQkpxS2dJQVhrVU5BQ0F5SUJJZ0Yyb3FBZ0JlUlEwQUlESWdEQ0FWYWlvQ0FGNUZEUUFnTWlBSUlCVnFLZ0lBWGtVTkFDQXlJQlVnRjJvcUFnQmVSUTBBSUFVZ00wTUFBQURBa2lJMklEY1FTQ0F5WFVVTkFDQUFLZ0lBSUFVZ015QTNFRWhlUlEwQUlBQXFBZ0FnQlNBelF3QUFBRUNTSWpJZ054QklYa1VOQUNBQUtnSUFJQVVnTmlBMEVFaGVSUTBBSUFBcUFnQWdCU0F6SURRUVNGNUZEUUFnQUNvQ0FDQUZJRElnTkJCSVhrVU5BQ0FBS2dJQUlBVWdOaUExRUVoZVJRMEFJQUFxQWdBZ0JTQXpJRFVRU0Y1RkRRQWdBQ29DQUNBRklESWdOUkJJWGcwQkN5QUFLZ0lBSWpJZ0ppb0NBRjFGRFFFZ01pQUlJQmxxS2dJQVhVVU5BU0F5SUJrZ0FVRUJha0VDZENJWGFpb0NBRjFGRFFFZ01pQU1JQnRxS2dJQVhVVU5BU0F5SUJjZ0cyb3FBZ0JkUlEwQklESWdEQ0FQYWlvQ0FGMUZEUUVnTWlBSUlBOXFLZ0lBWFVVTkFTQXlJQThnRjJvcUFnQmRSUTBCSURJZ0RDQVlhaW9DQUYxRkRRRWdNaUFJSUJocUtnSUFYVVVOQVNBeUlCY2dHR29xQWdCZFJRMEJJRElnRENBU2Fpb0NBRjFGRFFFZ01pQUlJQkpxS2dJQVhVVU5BU0F5SUJJZ0Yyb3FBZ0JkUlEwQklESWdEQ0FWYWlvQ0FGMUZEUUVnTWlBSUlCVnFLZ0lBWFVVTkFTQXlJQlVnRjJvcUFnQmRSUTBCSUFVZ00wTUFBQURBa2lJMklEY1FTQ0F5WGtVTkFTQUFLZ0lBSUFVZ015QTNFRWhkUlEwQklBQXFBZ0FnQlNBelF3QUFBRUNTSWpJZ054QklYVVVOQVNBQUtnSUFJQVVnTmlBMEVFaGRSUTBCSUFBcUFnQWdCU0F6SURRUVNGMUZEUUVnQUNvQ0FDQUZJRElnTkJCSVhVVU5BU0FBS2dJQUlBVWdOaUExRUVoZFJRMEJJQUFxQWdBZ0JTQXpJRFVRU0YxRkRRRWdBQ29DQUNBRklESWdOUkJJWFVVTkFRc2dDU0FVTmdJWUlBa2dEVFlDRkNBSklBQXFBZ0E0QWlBZ0NTQUhJQTBnT1JDb0F6Z0NKQ0FKUVFocUlDa2dBYk1nT2lBTkVPTUNJQ2dnQ1VFSWFoRGlBZ3NnQVVFQmFpRUJEQUVMQUFzQUN3QUxJQWxCTUdva0FBd0pDMEhBa3dSQnNwa0JFREpCeWhnUU1rSHlKQkF5UWNBQkVEVkIraWtRTWtHTm5BRVFNaEEyREFZTFFjQ1RCRUd3bmdFUU1rSEtHQkF5UWZJa0VESkJ3UUVRTlVINktSQXlRWTJjQVJBeUVEWU1CUXRCd0pNRVFiS1pBUkF5UWNvWUVESkI4aVFRTWtHVkFoQTFRZm9wRURKQmpad0JFRElRTmd3RUMwSEFrd1JCc0tBQkVESkJ5aGdRTWtIeUpCQXlRWllDRURWQitpa1FNa0dObkFFUU1oQTJEQU1MUWNDVEJFR1Zvd0VRTWtIS0dCQXlRZklrRURKQjZnSVFOVUg2S1JBeVFZMmNBUkF5RURZTUFndEJ3Sk1FUWFLbEFSQXlRY29ZRURKQjhpUVFNa0hyQWhBMVFmb3BFREpCalp3QkVESVFOZ3dCQ3lBQ0lRRU1BUXNMREFNTEN5QXZFSDRDZnlBY1FjT1RBUkNTQVNFWVFRRUxCRUFDUUVFQUlRMUJBQ0VPSXdCQjBBQnJJZ0FrQUNBTFFTQnFJUXdnQzBFOGFpRUpJQXNxQWpRUWJTRTFJQXNxQWpoREFBQ0FQNUlRYlNBTEtnSTRsU0UzQWtBQ1FBTkFJQWtRaFFFZ0RVc0VRQ0FKSUEwUXB3RWlCaWdDRUNBTUtBSVFUZzBDSUFZb0Fnd2hBU0FNS0FJUUlRSWdCaWdDRUNFRElBQkJCR29nQUNBR0tnSUFJQVlxQWdRZ0JpZ0NEQkNTQkFKL0lBQXFBZ0JEQUFBQVA1SWlNb3REQUFBQVQxMEVRQ0F5cUF3QkMwR0FnSUNBZUFzaEJBSi9JQUFxQWdSREFBQUFQNUlpTW90REFBQUFUMTBFUUNBeXFBd0JDMEdBZ0lDQWVBc2hDQUpBQW44Z0RDQUJJQUpzSUFOcUlnTkJBV3NRVENFQklBd2dBeEJNSWhRaEFnSkFBa0FDUUFKQUFrQUNRQ0FNSUFOQkFXb1FUQ0lGS0FJRUlBRW9BZ1FnQWlnQ0JFWkdCRUFnQlNnQ0NDQUJLQUlJSUFJb0FnaEdSdzBDSXdCQklHc2lBeVFBQWtBQ1FBSkFBa0FDUUFKQUFrQWdDRUVCU0EwQUlBSW9BZ1FnQ0VFQmFrME5BQ0FFUVFGSURRRWdCRUVCYWlJUElBSW9BZ2hQRFFFZ0FTZ0NCQ0FDS0FJRVJ3MENJQUVvQWdRZ0JTZ0NCRWNOQXlBQktBSUlJQUlvQWdoSERRUWdBU2dDQ0NBRktBSUlSdzBGSUFFZ0JFRUJheUlTRUUwaEZTQUJJQVFRVFNFWklBRWdEeEJOSVJzZ0FpQUVFRTBoRnlBRklCSVFUU0VTSUFVZ0JCQk5JU0lnQlNBUEVFMGhCU0FEUVJ4cUlBTkJHR29nQTBFVWFpQURRUkJxSUFOQkRHb2dBaUFJSUFRUWpBUWdHeUFJUVFKMElnRnFLZ0lBSVRnZ0FTQVZhaW9DQUNFMklBRWdCV29xQWdBaE9TQUJJQkpxS2dJQUlUb2dBU0FpYWlJQ0tnSUFJVElnQVNBWmFpSUZLZ0lBSVRNZ0FTQVhhaW9DQUNFMElBVXFBZ1FoT3lBRlFRUnJLZ0lBSVR3Z0Fpb0NCQ0U5SUFKQkJHc3FBZ0FoUGlBQUlBTXFBaFE0QWlBZ0FDQURLZ0lNSWo4NEFpd2dBQ0EvT0FJa0lBQWdQQ0E3a3lBOUlENlRra01BQUlBK2xDSTdPQUlvSUFNcUFoQWhQQ0FBSURJZ015QTBJRFNTazVJNEFrQWdBQ0EySURpVElEa2dPcE9TUXdBQWdENlVJalE0QWp3Z0FDQTdPQUk0SUFBZ05EZ0NOQ0FBSUR3NEFqQWdBQ0FES2dJY2pEZ0NGQ0FES2dJWUlUUWdBQ0F5SURPVFF3QUFBTCtVT0FJY0lBQWdOSXc0QWhnZ0EwRWdhaVFBREFZTFFjQ1RCRUdrd3dFUU1rSHJ1Z0VRTWtIeUpCQXlRYlVDRURWQitpa1FNa0hweEFFUU1oQTJEQXdMUWNDVEJFR0x4UUVRTWtIcnVnRVFNa0h5SkJBeVFiWUNFRFZCK2lrUU1rSHV4UUVRTWhBMkRBc0xRY0NUQkVHZnhnRVFNa0hydWdFUU1rSHlKQkF5UWJjQ0VEVkIraWtRTWtIbHhnRVFNaEEyREFvTFFjQ1RCRUdyeHdFUU1rSHJ1Z0VRTWtIeUpCQXlRYmdDRURWQitpa1FNa0hseGdFUU1oQTJEQWtMUWNDVEJFR0V5QUVRTWtIcnVnRVFNa0h5SkJBeVFia0NFRFZCK2lrUU1rSGx4Z0VRTWhBMkRBZ0xRY0NUQkVIUXlBRVFNa0hydWdFUU1rSHlKQkF5UWJvQ0VEVkIraWtRTWtIbHhnRVFNaEEyREFjTERBRUxBa0FnQVNnQ0JDQUNLQUlFUncwQUlBVW9BZ1FnQWlnQ0JFRUJka2NOQUNBQktBSUlJQUlvQWdoSERRTWdCU2dDQ0NBQ0tBSUlRUUYyUncwREl3QkJJR3NpQXlRQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FJUVFGSURRQWdBaWdDQkNBSVFRRnFUUTBBSUFSQkFVZ05BU0FFUVFGcUlnOGdBaWdDQ0U4TkFTQUJLQUlFSUFJb0FnUkhEUUlnQlNnQ0JDQUJLQUlFUVFGMlJ3MERJQUVvQWdnZ0FpZ0NDRWNOQkNBRktBSUlJQUVvQWdoQkFYWkhEUVVnQVNBRVFRRnJFRTBoRWlBQklBUVFUU0VWSUFFZ0R4Qk5JUThnQWlBRUVFMGhHU0FEUVJ4cUlBTkJHR29nQ0xJZ0JMSkJBUkNTQkNBREtnSWNJakpEQUFBQXY1SkRBQUFBQUdCRkRRWWdBeW9DR0VNQUFBQy9ra01BQUFBQVlFVU5CeUFGS0FJRXN5QXlRd0FBQUQrU1hrVU5DQ0FGS0FJSXN5QURLZ0lZUXdBQUFEK1NYa1VOQ1NBRFFSUnFJQU5CRUdvZ0EwRU1haUFEUVFocUlBTkJCR29nQWlBSUlBUVFqQVFnQlNBREtnSWNJQU1xQWhnUVNDRXlJQmtnQ0VFQ2RDSUJhaW9DQUNFeklCVWdDRUVDZEdvaUFrRUVheW9DQUNFNElBSXFBZ0FoTkNBRklBTXFBaHhEQUFBQVA1SWdBeW9DR0JCSUlUWWdBaW9DQkNFNUlBVWdBeW9DSEVNQUFBQy9raUFES2dJWUVFZ2hPaUFCSUJKcUtnSUFJVHNnQlNBREtnSWNJQU1xQWhoREFBQUFQNUlRU0NFOElBRWdEMm9xQWdBaFBTQUZJQU1xQWh3Z0F5b0NHRU1BQUFDL2toQklJVDRnQUNBREtnSU1PQUlnSUFBZ0F5b0NCQ0kvT0FJc0lBQWdPQ0Eya2lBNUlEcVNrME1BQUlBK2xDSTRPQUlvSUFBZ1B6Z0NKQ0FES2dJSUlUWWdBQ0F5SURRZ015QXprcE9TT0FKQUlBQWdPeUE4a2lBOUlENlNrME1BQUlBK2xDSXpPQUk4SUFBZ09EZ0NPQ0FBSURNNEFqUWdBQ0EyT0FJd0lBQWdBeW9DRkl3NEFoUWdBeW9DRUNFeklBQWdNaUEwazBNQUFBQy9sRGdDSENBQUlET01PQUlZSUFOQklHb2tBQXdLQzBIQWt3UkJwTU1CRURKQjY3b0JFREpCOGlRUU1rR2RBeEExUWZvcEVESkI2Y1FCRURJUU5nd1FDMEhBa3dSQmk4VUJFREpCNjdvQkVESkI4aVFRTWtHZUF4QTFRZm9wRURKQjdzVUJFRElRTmd3UEMwSEFrd1JCbjhZQkVESkI2N29CRURKQjhpUVFNa0dmQXhBMVFmb3BFREpCNWNZQkVESVFOZ3dPQzBIQWt3UkI0c29CRURKQjY3b0JFREpCOGlRUU1rR2dBeEExUWZvcEVESkI1Y1lCRURJUU5nd05DMEhBa3dSQmhNZ0JFREpCNjdvQkVESkI4aVFRTWtHaEF4QTFRZm9wRURKQjVjWUJFRElRTmd3TUMwSEFrd1JCeThzQkVESkI2N29CRURKQjhpUVFNa0dpQXhBMVFmb3BFREpCNWNZQkVESVFOZ3dMQzBIQWt3UkJyOHdCRURKQjY3b0JFREpCOGlRUU1rR3NBeEExUWZvcEVESkIrc3dCRURJUU5nd0tDMEhBa3dSQjZzMEJFREpCNjdvQkVESkI4aVFRTWtHdEF4QTFRZm9wRURKQnBjOEJFRElRTmd3SkMwSEFrd1JCamRBQkVESkI2N29CRURKQjhpUVFNa0d1QXhBMVFmb3BFREpCK3N3QkVESVFOZ3dJQzBIQWt3UkI4dEFCRURKQjY3b0JFREpCOGlRUU1rR3ZBeEExUWZvcEVESkJwYzhCRURJUU5nd0hDd3dCQ3lBQ0tBSUVJQUVvQWdSQkFYWkhEUVFnQWlnQ0JDQUZLQUlFUncwRUlBSW9BZ1FnQVNnQ0JFRUJka2NOQXlBQ0tBSUVJQVVvQWdSSERRTWpBRUVnYXlJREpBQUNRQUpBQWtBQ1FBSkFBa0FDUUNBSVFRRklEUUFnQWlnQ0JDQUlRUUZxVFEwQUlBUkJBVWdOQVNBRVFRRnFJZzhnQWlnQ0NFOE5BU0FDS0FJRUlBRW9BZ1JCQVhaSERRSWdCU2dDQkNBQktBSUVRUUYyUncwRElBSW9BZ2dnQVNnQ0NFRUJka2NOQkNBRktBSUlJQUVvQWdoQkFYWkhEUVVnQWlBRUVFMGhFaUFGSUFSQkFXc1FUU0VWSUFVZ0JCQk5JUmtnQlNBUEVFMGhEeUFEUVJ4cUlBTkJHR29nQ0xJZ0JMSkJBUkRqQWlBRFFSUnFJQU5CRUdvZ0EwRU1haUFEUVFocUlBTkJCR29nQWlBSUlBUVFqQVFnQVNBREtnSWNJQU1xQWhnUVNDRXlJQmtnQ0VFQ2RDSUNhaUlGS2dJQUlUTWdBaUFTYWlvQ0FDRTBJQUVnQXlvQ0hFTUFBQURBa2lBREtnSVlFRWdoT0NBRktnSUVJVFlnQVNBREtnSWNRd0FBQUVDU0lBTXFBaGdRU0NFNUlBVkJCR3NxQWdBaE9pQUJJQU1xQWh3Z0F5b0NHRU1BQUFEQWtoQklJVHNnQWlBUGFpb0NBQ0U4SUFFZ0F5b0NIQ0FES2dJWVF3QUFBRUNTRUVnaFBTQUNJQlZxS2dJQUlUNGdBQ0FES2dJTU9BSWdJQUFnQXlvQ0JDSS9PQUlzSUFBZ09DQTJraUE1SURxU2swTUFBSUErbENJNE9BSW9JQUFnUHpnQ0pDQURLZ0lJSVRZZ0FDQXpJRElnTkNBMGtwT1NPQUpBSUFBZ095QThraUE5SUQ2U2swTUFBSUErbENJME9BSThJQUFnT0RnQ09DQUFJRFE0QWpRZ0FDQTJPQUl3SUFBZ0F5b0NGSXc0QWhRZ0F5b0NFQ0UwSUFBZ015QXlrME1BQUFDL2xEZ0NIQ0FBSURTTU9BSVlJQU5CSUdva0FBd0dDMEhBa3dSQnBNTUJFREpCNjdvQkVESkI4aVFRTWtIbkFoQTFRZm9wRURKQjZjUUJFRElRTmd3TEMwSEFrd1JCaThVQkVESkI2N29CRURKQjhpUVFNa0hvQWhBMVFmb3BFREpCN3NVQkVESVFOZ3dLQzBIQWt3UkIwTkVCRURKQjY3b0JFREpCOGlRUU1rSHBBaEExUWZvcEVESkI1Y1lCRURJUU5nd0pDMEhBa3dSQjRzb0JFREpCNjdvQkVESkI4aVFRTWtIcUFoQTFRZm9wRURKQjVjWUJFRElRTmd3SUMwSEFrd1JCeDlJQkVESkI2N29CRURKQjhpUVFNa0hyQWhBMVFmb3BFREpCNWNZQkVESVFOZ3dIQzBIQWt3UkJ5OHNCRURKQjY3b0JFREpCOGlRUU1rSHNBaEExUWZvcEVESkI1Y1lCRURJUU5nd0dDd3RCQVF3RkMwSEFrd1JCbTc4QkVESkI2N29CRURKQjhpUVFNa0hTQXhBMVFmb3BFREpCOXI4QkVESVFOZ3dEQzBIQWt3UkJ1TUFCRURKQjY3b0JFREpCOGlRUU1rSFZBeEExUWZvcEVESkI5cjhCRURJUU5nd0NDMEhBa3dSQnI4RUJFREpCNjdvQkVESkI4aVFRTWtIWUF4QTFRZm9wRURKQjlyOEJFRElRTmd3QkMwSEFrd1JCdXNJQkVESkI2N29CRURKQjhpUVFNa0hiQXhBMVFmb3BFREpCNXNJQkVESVFOZ3NNQ1F0RkRRQWpBRUV3YXlJQkpBQUNmd0ovSUFBcUFrQWhNaUFBS2dJa0VHMGhNeUFBS2dJa0lqUWdOSklnQUNvQ0tDSTBsQ0FBS2dJMGxDQXlJRE9Va3lBQUtnSXdJRFFRYlpTVElBQXFBaUFnQUNvQ05CQnRsSk1nQUNvQ0lDQUFLZ0l3bENBQUtnSkFsSklpTW90REFBQUFORjhpQWtVTEJFQWdBVU1BQUlBL0lES1ZJaklnQUNvQ01DQUFLZ0kwSUFBcUFrQVFpQVNVT0FJQUlBRWdNaUFBS2dJb0lBQXFBaVFnQUNvQ1FDQUFLZ0k4RUtZQmxEZ0NCQ0FCSURJZ0FDb0NKQ0FBS2dJb0lBQXFBakFnQUNvQ05CQ21BWlE0QWdnZ0FTQXlJQUFxQWlBZ0FDb0NLQ0FBS2dKQUVJZ0VsRGdDRUNBQklESWdBQ29DS0NBQUtnSWdJQUFxQWpRZ0FDb0NMQkNtQVpRNEFoUWdBU0F5SUFBcUFpQWdBQ29DSkNBQUtnSXdFSWdFbERnQ0lDQUJJQUVxQWdRNEFnd2dBU0FCS2dJSU9BSVlJQUVnQVNvQ0ZEZ0NIQXNnQWtVaUFnc0VRQ0FBSUFFcUFnQWdBQ29DRkpRZ0FTb0NCQ0FBS2dJWWxKSWdBU29DQ0NBQUtnSWNsSkk0QWdnZ0FDQUJLZ0lNSUFBcUFoU1VJQUVxQWhBZ0FDb0NHSlNTSUFFcUFoUWdBQ29DSEpTU09BSU1JQUFnQVNvQ0dDQUFLZ0lVbENBQktnSWNJQUFxQWhpVWtpQUJLZ0lnSUFBcUFoeVVramdDRUFzZ0FVRXdhaVFBSUFKRkRRQWdBQ29DQ0JCdElBQXFBZ3dRYlpJZ0N5b0NXRjROQUNBQUtnSWdJQUFxQWpDVUlBQXFBaVFRYlpNaU1rTUFBQUFBWEFSQUlBWWdBQ29DSUNBQUtnSXdraEJ0SURLVk9BSWdDeUF5UXdBQUFBQmJEUUFnQmlvQ0dDQVVJQVFRVFNBSVFRSjBJZ0ZxS2dJQVhBMEVJQVlnRkNBRUVFMGdBV29xQWdBZ0FDb0NGQ0FBS2dJSUlqS1VJQUFxQWhnZ0FDb0NEQ0l6bEpJZ0FDb0NIQ0FBS2dJUWxKS1RPQUlZSUFZZ0JrRUVhaUF5SUFBcUFnU1NJRE1nQUNvQ0FKSWdCaWdDREJEakFpQUdJQUFxQWhBZ0JpZ0NFTEtTSWpJNEFoUWdCaUF5SUF3b0FoQ3lFT0VDT0FJVUlEY2dCaW9DSUl0ZVJRMEFJQVlxQWhnUWJTQTFZRVVOQUNBR0tnSUFJakpEQUFBQUFHQkZEUUFnTWlBTVFRQVFUQ2dDQkxOZFJRMEFJQVlxQWdRaU1rTUFBQUFBWUVVTkFDQXlJQXhCQUJCTUtBSUlzMTFGRFFBZ0JpQUhJQVlvQWd3Z0Jpb0NGQkNvQXpnQ0hDQUpJQTRRcHdFZ0JrRWtFRUFhSUE1QkFXb2hEZ3NnRFVFQmFpRU5EQUVMQ3dKQUlBNGdDUkNGQVNJQlN3UkFJd0JCSUdzaUJDUUFBa0FnRGlBQmF5SURJQWtRTkNnQ0FDQUpLQUlFYTBFa2JVMEVRQ01BUVJCcklnSWtBQ0FDSUFrZ0F4Q3RCaUlCS0FJRUlRVURRQ0FCS0FJSUlBVkhCRUFnQ1JBMEdpQUJLQUlFRUtvR0lBRWdBU2dDQkVFa2FpSUZOZ0lFREFFTEN5QUJFSFFnQWtFUWFpUUFEQUVMSUFrUU5DRUJJQVJCQ0dvZ0NTQUpFSVVCSUFOcUVLc0dJQWtRaFFFZ0FSQ1JCQ0lHSVFJakFFRVFheUlCSkFBZ0FTQUNLQUlJTmdJQUlBSW9BZ2doQlNBQklBSkJDR28yQWdnZ0FTQUZJQU5CSkd4cU5nSUVJQUVvQWdBaEJRTkFJQUVvQWdRZ0JVY0VRQ0FDS0FJUUdpQUJLQUlBRUtvR0lBRWdBU2dDQUVFa2FpSUZOZ0lBREFFTEN5QUJFTEFCSUFGQkVHb2tBQ0FKSUFZUWtBUWdCaENQQkFzZ0JFRWdhaVFBREFFTElBRWdEa3NFUUNBSktBSUFJQTVCSkd4cUlRRWdDUkNGQVNFQ0lBa2dBUkM2QmlBSklBSVF5QVlMQ3lBQVFkQUFhaVFBREFJTFFjQ1RCRUdnc3dFUU1rSEtHQkF5UWZJa0VESkI2UU1RTlVINktSQXlRYkcwQVJBeUVEWU1CQXRCd0pNRVFmcTBBUkF5UWNvWUVESkI4aVFRTWtHT0JCQTFRZm9wRURKQnhMVUJFRElRTmd3REN3c2dHQkIrQW44Z0hFR2NsUUVRa2dFaEdFRUJDd1JBQWtBakFFRVFheUlPSkFBQ1FBSkFBa0FnQzBFOGFpSUdFSVVCSUFzb0FsUkxCRUFnQzBFUWFpSUZFRmNnQ3lnQ0NFY05BU0FGUVFBUWx3RVFWeUFMS0FJTVJ3MENJQTRRVGlJVUlRMGdDeWdDQ0NFQUlBc29BZ3doQVNBTEtBSUFJUU1nQ3lnQ0JDRUVJQXNvQWxRaERDTUFRU0JySWdJa0FDQURzaUFBc3BXTklUSWdCTElnQWJLVmpTRXpJQTBRbEFRZ0RTQU1FSm9FSUFBZ0FXd2hFa0VBSVFnRFFBSkFRUUFoQUNBRkVGY2dDRTBFUUFKL0lET0xRd0FBQUU5ZEJFQWdNNmdNQVF0QmdJQ0FnSGdMc2lFekFuOGdNb3REQUFBQVQxMEVRQ0F5cUF3QkMwR0FnSUNBZUF1eUlUSURRQ0FDSUFBMkFod2dCaENGQVNBQVRRUkFJQXdnRW0waEVrRUFJUWtEUUVFQUlRZ2dCUkJYSUFsTkJFQWdBa0VnYWlRQURBVUxBMEFnQlNBSkVKY0JFRmNnQ0UwRVFDQUpRUUZxSVFrTUFnc2dBaUFGSUFrUWx3RWdDQkNYQVNJRUVFUTJBaEFnQWlBU05nSWNBa0FnQWtFUWFpQUNRUnhxRU1vQktBSUFJZ3hGRFFBZ0JCQzVBaUVCSUFJZ0JCQzVBallDRUNBQ1FSQnFJQXdROGdFaEF5QUVFTjhDSVE4akFFRVFheUlWSkFBakFFRkFhaUlBSkFBZ0FDQUROZ0l3SUFBZ0FUWUNPQ0FBSUE4MkFpZ0RRQUpBSUFCQk1Hb2dBRUVvYWhESkFRMEFBa0FDUUFKQUlBQkJLR29nQUVFNGFoQ2FBeUlCRGdRREF3QUJBZ3NnQUVFb2FoRFFBU2dDQUNBQUtBSTRFSk1CUlEwQ0lBQW9BamdnQUNnQ0tCRElBUXdDQ3lBQUlBQW9BamdpQVRZQ0lDQUJJQUJCSUdvUXBRRW9BZ0FnQUVFb2FoRFFBU2dDQUJDbkJob01BUXNnQVVFSFRBUkFJQUFvQWpnaEFTQUFLQUlvSVE4akFFRWdheUlESkFBZ0F5QUJOZ0lZSUFNZ0R6WUNFQ0FEUVJCcUVOQUJHZ05BSUFOQkdHb2dBMEVRYWhCL0JFQWdBeWdDR0NFWkl3QkJJR3NpQVNRQUlBRWdEellDRUNBQklCazJBaGdDUUNBQlFSaHFJQUZCRUdvUWYwVU5BQ0FCSUFFb0FoZzJBZ2dEUUNBQlFRaHFFS1VCSUFGQkVHb1FmMFVOQVNBQktBSUlJQUVvQWhnUWt3RkZEUUFnQVNBQktBSUlOZ0lZREFBTEFBc2dBU2dDR0NFWklBRkJJR29rQUNBRElCazJBZ2dnQTBFSWFpQURRUmhxRUg4RVFDQURLQUlZSUFNb0FnZ1F5QUVMSUFOQkdHb1FwUUVhREFFTEN5QURRU0JxSkFBTUFRc2dBQ0FBUVRocUlBRkJBWFlROGdFaUFUWUNJQ0FBSUFBb0FpZzJBaGdnQUNnQ09DQUJJQUJCR0dvUTBBRW9BZ0FRcHdZaEFTQUFJQUFvQWpnMkFoQWdBQ0FBS0FJWU5nSUlBa0FnQUNnQ0VDQUFLQUlnRUpNQlJRUkFBMEFnQUVFUWFpQUFRUWhxRU5BQkVNa0JCRUFnQUVFUWFoQ2xBUm9nQUNBQUtBSW9OZ0lJSUFBb0FqZ2dBRUVJYWhEUUFTZ0NBQkNUQVEwREEwQWdBRUVRYWlBQVFRaHFFTWtCRFFVZ0FDZ0NPQ0FBS0FJUUVKTUJCRUFnQUNnQ0VDQUFLQUlJRU1nQklBQkJFR29RcFFFYURBVUZJQUJCRUdvUXBRRWFEQUVMQUFzQUN5QUFLQUlJSUFBb0FpQVFrd0ZGRFFBTElBQW9BaEFnQUNnQ0NCRElBU0FCUVFGcUlRRUxJQUJCRUdvUXBRRWFBa0FnQUVFUWFpQUFRUWhxRVBRQlJRMEFBMEFnQUNnQ0VDQUFLQUlnRUpNQkJFQWdBRUVRYWhDbEFSb01BUXNEUUNBQVFRaHFFTkFCS0FJQUlBQW9BaUFRa3dGRkRRQUxJQUJCRUdvZ0FFRUlhaENtQmcwQklBQW9BaEFnQUNnQ0NCRElBU0FBUVNCcUlBQkJFR29ReVFFRVFDQUFJQUFvQWdnMkFpQUxJQUZCQVdvaEFTQUFRUkJxRUtVQkdnd0FDd0FMQWtBZ0FFRVFhaUFBUVNCcUVIOUZEUUFnQUNnQ0lDQUFLQUlRRUpNQlJRMEFJQUFvQWhBZ0FDZ0NJQkRJQVNBQlFRRnFJUUVMSUFCQk1Hb2dBRUVRYWhESkFRMEJBa0FnQVEwQUlBQkJNR29nQUVFUWFoRDBBUVJBSUFBZ0FDZ0NPQ0lCTmdJZ0lBQWdBVFlDQ0FOQUlBQkJDR29RcFFFZ0FFRVFhaEIvUlEwRUlBQW9BZ2dnQUNnQ0lCQ1RBUTBDSUFBZ0FDZ0NDRFlDSUF3QUN3QUxJQUFnQUNnQ0VDSUJOZ0lnSUFBZ0FUWUNDQU5BSUFCQkNHb1FwUUVnQUVFb2FoQi9SUTBESUFBb0FnZ2dBQ2dDSUJDVEFRMEJJQUFnQUNnQ0NEWUNJQXdBQ3dBTElBQkJNR29nQUVFUWFoRDBBUVJBSUFBZ0FDZ0NFRFlDS0F3REN5QUFJQUJCRUdvUXBRRW9BZ0EyQWpnTUFnc2dBRUVRYWlBQVFRaHFFTWtCRFFBRFFBSkFJQUFvQWpnZ0FDZ0NFQkNUQVFSQUEwQWdBQ2dDT0NBQVFRaHFFTkFCS0FJQUVKTUJEUUFMSUFCQkVHb2dBRUVJYWhDbUJnMEJJQUFvQWhBZ0FDZ0NDQkRJQVFzZ0FFRVFhaENsQVJvTUFRc0xJQUJCTUdvZ0FFRVFhaEQwQVEwQUlBQWdBQ2dDRURZQ09Bd0JDd3NnQUVGQWF5UUFJQlZCRUdva0FBSkFJQVFRUkNBTVR3MEFJQVJCQUJCUUtnSUFJQVFnREJCUUtnSUFZQTBBUWNDVEJFR0d0Z0VRTWtIS0dCQXlRZklrRURKQmxRVVFOVUg2S1JBeVFkaTJBUkF5RURZTUVBdEJBQ0VBQTBBZ0FDQU1SZzBCSUEwZ0JpQUVJQUFRVUNnQ0JCQ25BUkRpQWlBQVFRRnFJUUFNQUFzQUN5QUlRUUZxSVFnTUFBc0FDd0FGQW44Z0JpQUNLQUljRUtjQklnQXFBZ1FnTTVVaU5JdERBQUFBVDEwRVFDQTBxQXdCQzBHQWdJQ0FlQXNoQVNBRkFuOGdBQ29DQUNBeWxTSTBpME1BQUFCUFhRUkFJRFNvREFFTFFZQ0FnSUI0Q3hDWEFTQUJFSmNCSVFNZ0FpQUFLZ0lZaXpnQ0RDQUNJQUlxQWd3NEFoQWdBaUFDS0FJY05nSVVJQUpCRUdvaENBSkFJQU1vQWdRZ0F4QTBLQUlBU1FSQUlBTWdDQkNtQXd3QkMwRUFJUUFqQUVFZ2F5SVBKQUFnQXhBMEloVUNmeUFESUFNUVJFRUJhaENlQXlFRUlBTVFSQ0VaSXdCQkVHc2lDU1FBSUFsQkFEWUNEQ0FQUVFocUlnRkJER29nQ1VFTWFpQVZFTEVCSUFRRVFDQUJLQUlRR2lBRVFmLy8vLzhCU3dSQVFialRBUkNVQVFBTElBUkJBM1FRU3lFQUN5QUJJQUEyQWdBZ0FTQUFJQmxCQTNScUloVTJBZ2dnQVNBVk5nSUVJQUVRUFNBQUlBUkJBM1JxTmdJQUlBbEJFR29rQUNBQktBSUlDeUFJRU5vQ0lBRWdBU2dDQ0VFSWFqWUNDQ0FESUFFUW5RTWdBUkNjQXlBUFFTQnFKQUFMSUFJb0FoeEJBV29oQUF3QkN3QUxBQVVEUUNBRklBZ1Fsd0VRVnlBQVN3UkFJQVVnQ0JDWEFTQUFFSmNCRUpNQ0lBQkJBV29oQUF3QkN3c2dDRUVCYWlFSURBSUxBQXNMSUFZZ0ZCQ25BeUFHRUlVQklBc29BbFJMRFFNZ0ZCQ1lCQXNnRGtFUWFpUUFEQU1MUWNDVEJFR3Jwd0VRTWtIS0dCQXlRZklrRURKQnhnTVFOVUg2S1JBeVFiS3FBUkF5RURZTUJRdEJ3Sk1FUWZtc0FSQXlRY29ZRURKQjhpUVFNa0hIQXhBMVFmb3BFREpCc3FvQkVESVFOZ3dFQzBIQWt3UkI0SzRCRURKQnloZ1FNa0h5SkJBeVFkVURFRFZCK2lrUU1rRzRzZ0VRTWhBMkRBTUxDeUFZRUg0Q2Z5QWNRZDZXQVJDU0FTRVpRUUVMQkVCQkFDRUlJd0JCUUdvaURDUUFBa0FnQ3kwQUhFVUVRQ0FMUVR4cUlRQkJBQ0VFQTBBZ0FCQ0ZBU0FFVFEwQ0lBQWdCQkNuQVVFQU5nSUlJQVJCQVdvaEJBd0FDd0FMSUF0QnlBQnFJaGdRbEFRZ0dDQUxRVHhxSWhRUWhRRkJKR3dRbWdRZ0MwSGNBR29pRFVFb2FpRWJRUUFoQWdKQUFrQURRQ0FIRUVrUXFBRWdBa3NFUUNBSEVFa2dBaEJNSWdBb0FnUWdBQ2dDREVFQ2RrY05BaUFiSUFJUVRDZ0NHQ0VCSUFBb0FnZ2hEaUFCSUFBb0FoZ2lCaUFBS0FJRUlnOUJBblJxSWdVcUFnQWdCaW9DQUNJemt5SXlJQVlxQWdRZ001TWlNeERqQWJ0RUdDMUVWUHNoQ1VDZ3RqZ0NBQ0FCSURNZ001UWdNaUF5bEpLUk9BSUVJQTlCQVdzaUFFRUJJQUJCQVVzYklSSWdCa0VFYWlFSklBVWhBMEVCSVFRRFFBSkFJQU5CQkdvaEF5QUJRUWhxSVFBZ0JDQVNSZ1JBSUFFZ0F5b0NBQ0FKS2dJQUlqT1RJaklnTXlBSlFRUnJLZ0lBa3lJekVPTUJ1MFFZTFVSVSt5RUpRS0MyT0FJSUlBRWdNeUF6bENBeUlES1VrcEU0QWd3Z0RrRUJheUlWUVFFZ0ZVRUJTeHNoRnlBRklBOUJBblJxSVFNZ0JpRUVRUUVoRGdOQUlBNGdGMFlFUUNBQVFRaHFJUWtnQUNBR0lBOGdGV3hCQW5ScUlnTXFBZ0FpTXlBRElBOUJBblJySWdFcUFnQ1RJaklnQXlvQ0JDQXpreUl6RU9NQnUwUVlMVVJVK3lFSlFLQzJPQUlJSUFBZ015QXpsQ0F5SURLVWtwRTRBZ3dnQTBFRWFpRUFRUUVoQXdOQUlBRkJCR29oQVNBRElCSkdEUVFnQ1NBQUtnSUFJQUVxQWdDVElqSWdBQ29DQkNBQVFRUnJLZ0lBa3lJekVPTUJ1MFFZTFVSVSt5RUpRS0MyT0FJSUlBa2dNeUF6bENBeUlES1VrcEU0QWd3Z0EwRUJhaUVESUFCQkJHb2hBQ0FKUVFocUlRa01BQXNBQ3lBQUlBTXFBZ0FnQkNvQ0FKTWlNaUFGS2dJRUlBVXFBZ0NUSWpNUTR3RzdSQmd0UkZUN0lRbEFvTFk0QWdnZ0FDQXpJRE9VSURJZ01wU1NrVGdDRENBQVFSQnFJUUFnQlVFRWFpRUpRUUVoQVFOQUlBRWdFa1lFUUNBQUlBTXFBZ1FnQkNvQ0JKTWlNaUFKS2dJQUlBbEJCR3NxQWdDVElqTVE0d0c3UkJndFJGVDdJUWxBb0xZNEFnQWdBQ0F6SURPVUlESWdNcFNTa1RnQ0JDQU9RUUZxSVE0Z0EwRUlhaUVESUFSQkNHb2hCQ0FKUVFScUlRVU1BZ1VnQUNBRFFRUnFJZ01xQWdBZ0JFRUVhaUlFS2dJQWt5SXlJQWtxQWdRZ0NVRUVheW9DQUpNaU14RGpBYnRFR0MxRVZQc2hDVUNndGpnQ0FDQUFJRE1nTTVRZ01pQXlsSktST0FJRUlBRkJBV29oQVNBQVFRaHFJUUFnQ1VFRWFpRUpEQUVMQUFzQUN3QUZJQUVnQXlvQ0FDQUpLZ0lBa3lJeUlBa3FBZ1FnQ1VFRWF5b0NBSk1pTXhEakFidEVHQzFFVlBzaENVQ2d0amdDQ0NBQklETWdNNVFnTWlBeWxKS1JPQUlNSUFSQkFXb2hCQ0FKUVFScUlRa2dBQ0VCREFJTEFBc0xJQWtnQUNvQ0FDSXpJQUVxQWdDVElqSWdNeUFBUVFScktnSUFreUl6RU9NQnUwUVlMVVJVK3lFSlFLQzJPQUlJSUFrZ015QXpsQ0F5SURLVWtwRTRBZ3dnQWtFQmFpRUNEQUVMQ3d3QkMwSEFrd1JCc0JFUU1rSHRHeEF5UVljbEVESkI0QUFRTlVHREtoQXlRWTh1RURJUU5nd0VDeUFMUVpBQmFpRVBBMEFnRkJDRkFTQUlUUVJBSUJRZ0dCQ25Bd3dDQ3lBVUlBZ1Fwd0VxQWdBaE15QVVJQWdRcHdFcUFnUWhOQ0FVSUFnUXB3RXFBaHdoTlNBTVF3QUFnRDlCQVNBVUlBZ1Fwd0VvQWd4MHNwVWlNaUF6bENBeVF3QUFBRCtVUXdBQUFMK1NJak9TT0FJNElBd2dNaUEwbENBemtqZ0NOQ0FNSURJZ05aUTRBakJCQUNFRUlBd2dEQ29DT0NBSElCUWdDQkNuQVNnQ0RFRUFFUE1CS0FJRVFRRnJzeERoQWpnQ09DQU1JQXdxQWpRZ0J5QVVJQWdRcHdFb0FneEJBQkR6QVNnQ0NFRUJhN01RNFFJNEFqUWdEMEVBRUR3aEd5QVVJQWdRcHdFb0Fnd2hBQ0FVSUFnUXB3RW9BaEFoQVNBTUtnSTRJVE1nRENvQ05DRTBJQXdxQWpBaE1pTUFRVEJySWdZa0FBSkFJRE5EQUFBQUFHQUVRQ0F6SUExQktHb2lBaUFOS0FJRUlBQnNJQUZxRUV3b0FnU3pYUVJBSURSREFBQUFBR0FFUUNBMElBSWdEU2dDQkNBQWJDQUJhaEJNS0FJSXMxMEVRQ0FDSUEwb0FnUWdBR3dnQVdvUVRDSUNLQUlRUVFKR0JFQWdERUVBTmdJOEFuOGdNME1BQUFBL2tpSTFpME1BQUFCUFhRUkFJRFdvREFFTFFZQ0FnSUI0Q3lJRFFRQklJUUFDZnlBMFF3QUFBRCtTSWpXTFF3QUFBRTlkQkVBZ05hZ01BUXRCZ0lDQWdIZ0xJUUVnQUEwRklBRkJBRWdnQXlBQ0tBSUVUM0lOQlNBQklBSW9BZ2hQRFFVZ0RVRWNhaUVKUXdBQWdEOGdEU29DRENBeWxDSXlJREpEQUFDQVAxMGJJalVRYlNFeUFuOGdOU0FOS2dJUWxDSTFRd0FBQUQrU0lqZUxRd0FBQUU5ZEJFQWdONmdNQVF0QmdJQ0FnSGdMSVFVZ05SQnRqU0UzUVFBZ0F5QUZheEMyQWlFQUlBTWdCV29nQWlnQ0JFRUJheENaQXlFWFFRQWdBU0FGYXhDMkFpRURJQUVnQldvZ0FpZ0NDRUVCYXhDWkF5RWlJQWxCQUJBOFFRQWdDUkJEUVFKMEVEc2FRd0FBZ0w4Z01pQXlrcFVoT0FOQUlBTWdJa29FUUVFQUlRRkJBQ0VGQTBBZ0RTZ0NGQ0FGVEFSQVF3QUFBQUFoTWdOQUlBMG9BZ2dpQlNBQlRBUkFJREpEQUFBQUFGc05Dd1VnTWlBSklBRVFQQ29DQUYwRVFDQUpJQUVRUENvQ0FDRXlDeUFCUVFGcUlRRU1BUXNMSURKREFBQUFBRjRFUUVFQUlRSURRQ0FDSWdBZ0JVNE5DeUFHSUFDeUlqTTRBaUFnQmlBSklBQVFQQ29DQURnQ0pDQUdJQUJCQVdzaUFiSTRBaGdnQmlBSklBRWdEU2dDQ0NJQ2FpQUNieEE4S2dJQU9BSWNJQVlnQUVFQmFpSUNzamdDRUNBR0lBa2dEU2dDQ0NJQklBSnFJQUZ2RUR3cUFnQTRBaFFDUUNBSklBQVFQQ29DQUNBeUlBMHFBaGlVWGtVTkFDQUdLZ0lrSWpRZ0Jpb0NIRjVGRFFBZ05DQUdLZ0lVWGtVTkFDQUdJRE00QWdBQ2YwTUFBQUFBSVRVQ1FDQUdLZ0lRSWpRZ0Jpb0NJQ0l6a3lBMElBWXFBaGdpTkpNaU9KUWlOa01BQUFBQVd5QTBJRE9USWpjZ09KUWlPRU1BQUFBQVczSWdOME1BQUFBQVczSWlBQVJBSUFaQkFEWUNEQ0FHUVFBMkFnZ01BUXNnQmlBR0tnSVVJQVlxQWlRaU5aTWdOcFVnQmlvQ0hDQTFreUE0bFpNaU5UZ0NEQ0FHSUFZcUFod2dCaW9DSkpNZ015QXpsQ0EwSURTVUlqT1RJRFdVa2lBM2xTSTBPQUlJSUFZcUFod2dNeUFHS2dJTWxKTWdOQ0FHS2dJWWxKTWhOUXNnQmlBMU9BSUVJQUJGQ3dSQUlBWXFBZ2doTkNBR0tnSUVHaUFHS2dJTUlqTkRBQUFBQUZ3RVFDQUdJRFNNSURNZ001S1ZPQUlBQ3dzZ0d5QU1LQUk4SWdCQkFuUnFBbndnQmlvQ0FFTUFBQUEva2lBTktBSUlzaUl6a2lBemxidEVHQzFFVlBzaEdVQ2lJa0M5SW1CQ05JaW5RZjhQY1NJQlFmOFBSZ1JBSUVCRUdDMUVWUHNoR1VDaUlrQWdRS01NQVFzQ2ZnSkFJR0JDQVlZaVhrS3d0S0hFNnY2UW1ZQi9WZ1JBSUFGRkJFQWdZRUlNaGlKZVFnQlRCRUJCQUNFQkRBTUxRWDhoQVFOQUlGNUNBWVlpWGtJQVV3MERJQUZCQVdzaEFRd0FDd0FMSUdCQy8vLy8vLy8vL3dlRFFvQ0FnSUNBZ0lBSWhBd0NDeUJBUkFBQUFBQUFBQUFBb2lCQUlGNUNzTFNoeE9yK2tKbUFmMUViREFJTElHQkJBU0FCYTYyR0N5RmVJQUZCZ1FoS0JFQURRQUpBSUY1Q21OcVFvclcveUF4OUlsOUNBRk1OQUNCZklsNUNBRklOQUNCQVJBQUFBQUFBQUFBQW9nd0RDeUJlUWdHR0lWNGdBVUVCYXlJQlFZRUlTZzBBQzBHQkNDRUJDd0pBSUY1Q21OcVFvclcveUF4OUlsOUNBRk1OQUNCZklsNUNBRklOQUNCQVJBQUFBQUFBQUFBQW9nd0JDd0pBSUY1Qy8vLy8vLy8vL3dkV0JFQWdYaUZmREFFTEEwQWdBVUVCYXlFQklGNUNnSUNBZ0lDQWdBUlVJUU1nWGtJQmhpSmZJVjRnQXcwQUN3c2dZRUtBZ0lDQWdJQ0FnSUIvZ3lCZlFvQ0FnSUNBZ0lBSWZTQUJyVUkwaG9RZ1gwRUJJQUZycllnZ0FVRUJUaHVFdnd1Mk9BSUFJQXdnQUVFQmFqWUNQQXNnRFNnQ0NDRUZEQUFMQUF0QndKTUVRYVQwQUJBeVFlMGJFREpCaHlVUU1rSGFBUkExUVlNcUVESkIwUGNBRURJUU5nd09CU0FHUWZEZUFTZ0NBRFlDS0NBR1FlamVBU2tDQURjRElDQUpRUUFRUENFQ0lBbEJBQkE4SVFBZ0FDQU5LQUlJUVFGcklnNUJBblJxSWhJcUFnQWhNaUFBS2dJQUlUTkJBQ0VEQTBBZ0F5QU9SZ1JBSUFJZ0RrRUNkR29nTWlBR0tnSWdsQ0FHS2dJa0lCSXFBZ0NVa2lBeklBWXFBaWlVa2pnQ0FBVWdBaUFEUVFKMEloVnFJRElnQmlvQ0lKUWdBQ0FWYWlvQ0FDSXlJQVlxQWlTVWtpQUdLZ0lvSUFBZ0EwRUJhaUlEUVFKMGFpb0NBSlNTT0FJQURBRUxDeUFGUVFGcUlRVU1BUXNBQ3dBTElBT3lJRFNURUcwaE5pQUNJQU1RVFNFaklBQWhBUU5BSUFFZ0Ywb0VRQ0FEUVFGcUlRTU1BZ3NnTmlBQnNpQXpreEJ0a2lJeUlEZGVSUVJBSUNNZ0FVRURkR29pQlNvQ0FDRTFJQTBvQWdnaEVpQUpRUUFRUENFT0lEVWdFcktVdTBSM3lNbHRNRi9FUDZLMklUVWdPQ0F5bENJeVF3QUF3RUNTSURLVVF3QUE4RUdTSURLVVF3QUE4RUtTSURLVVF3QUF0RU9TSURLVVF3QUFORVNTSURLVVF3QUFORVNTdTBRNWJGTCthOEZXUDZLMklBVXFBZ1NVSVRJZ0RTZ0NDQ0VGQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FPQkVBZ05VTUFBQUEva2tNQUFBQUFYa1VOQVNBMVF3QUFBTCtTSWprZ0JiSmRSUTBCSURKREFBQUFBR0JGRFFJZ0JVRi9UQTBEQW44Z09ZNGlPWXREQUFBQVQxMEVRQ0E1cUF3QkMwR0FnSUNBZUFzaUVrRUJhaUFGYnlFVklBVWdFbW9nQlc4aEJVTUFBSUEvSURVZ0VyS1RRd0FBQUwrU0lqV1RJamxEQUFBQUFHQkZEUVFnTlVNQUFBQUFZRVVOQlNBRlFYOU1EUVlnRlVGL1RBMEhJQTRnQlVFQ2RHb2lCU0E1SURLVUlBVXFBZ0NTT0FJQUlBNGdGVUVDZEdvaUJTQTFJREtVSUFVcUFnQ1NPQUlBREFnTFFjQ1RCRUdRK3dBUU1rSFkvUUFRTWtHSEpSQXlRWXNCRURWQmd5b1FNa0hkZ1FFUU1oQTJEQlVMUWNDVEJFSGxnd0VRTWtIWS9RQVFNa0dISlJBeVFZd0JFRFZCZ3lvUU1rRy9oZ0VRTWhBMkRCUUxRY0NUQkVHY2lRRVFNa0hZL1FBUU1rR0hKUkF5UVkwQkVEVkJneW9RTWtIVml3RVFNaEEyREJNTFFjQ1RCRUdQamdFUU1rSFkvUUFRTWtHSEpSQXlRWTRCRURWQmd5b1FNa0c1a0FFUU1oQTJEQklMUWNDVEJFSHdrUUVRTWtIWS9RQVFNa0dISlJBeVFaWUJFRFZCZ3lvUU1rSE1rd0VRTWhBMkRCRUxRY0NUQkVHcWxRRVFNa0hZL1FBUU1rR0hKUkF5UVpjQkVEVkJneW9RTWtHWmx3RVFNaEEyREJBTFFjQ1RCRUdPbWdFUU1rSFkvUUFRTWtHSEpSQXlRWmdCRURWQmd5b1FNa0hObkFFUU1oQTJEQThMUWNDVEJFR09ud0VRTWtIWS9RQVFNa0dISlJBeVFaa0JFRFZCZ3lvUU1rR3RvUUVRTWhBMkRBNExDeUFCUVFGcUlRRU1BQXNBQ3dBTFFjQ1RCRUcrM3dBUU1rSHRHeEF5UVljbEVESkIvZ0FRTlVHREtoQXlRYXJqQUJBeUVEWU1DUXRCd0pNRVFjalZBQkF5UWUwYkVESkJoeVVRTWtINkFCQTFRWU1xRURKQnVOc0FFRElRTmd3SUMwSEFrd1JCajh3QUVESkI3UnNRTWtHSEpSQXlRZmtBRURWQmd5b1FNa0hLMFFBUU1oQTJEQWNMUWNDVEJFR2V3QUFRTWtIdEd4QXlRWWNsRURKQitBQVFOVUdES2hBeVFmbkZBQkF5RURZTUJndEJ3Sk1FUWJVMEVESkI3UnNRTWtHSEpSQXlRZmNBRURWQmd5b1FNa0hpT2hBeUVEWU1CUXNnQmtFd2FpUUFBMEFnRENnQ1BDQUVUQVJBSUFoQkFXb2hDQXdDQlNBTVFRaHFJQlFnQ0JDbkFVRWtFRUFhSUF3Z0R5QUVFRHdxQWdBNEFoQWdHQ0FNUVFocUVPSUNJQVJCQVdvaEJBd0JDd0FMQUFzQUN5QU1RVUJySkFBTElCa1FmaUFjUVNCcUpBQU1BZ3RCd0pNRVFhYy9FREpCeWhnUU1rSHlKQkF5UVpNQkVEVkIraWtRTWtHQXhRQVFNaEEyQ3hBQUFBc2dDeEQ3QXhDRkFTRUFJQ0ZCSUdvaUJoQ25BaUFBQkVBZ0JpQUFFSVlHSUFZZ0FCQ09CZ3NEUUNBTEVQc0RFSVVCSUFwTkRRWWdJVUVJYWlBTEVQc0RJQW9RcHdFaUFDb0NBQ0FBS2dJRUlBQXFBZ2dnQUNvQ0hDQUFLZ0lZUXdBQUFBQmVFT29FR2lBR0lBb1FheUlBSUNFdEFCZzZBQkFnQUNBaEtRTVFOd0lJSUFBZ0lTa0RDRGNDQUNBS1FRRnFJUW9NQUFzQUMwSEFrd1JCanNFQUVESkJyTVlBRURKQjBzd0FFREpCMUFFUU5VSDAwUUFRTWtHLzFnQVFNaEEyREFVTFFjQ1RCRUgxMndBUU1rR3N4Z0FRTWtIU3pBQVFNa0hWQVJBMVFmVFJBQkF5UVl2Z0FCQXlFRFlNQkF0QndKTUVRZC9qQUJBeVFhekdBQkF5UWRMTUFCQXlRZFlCRURWQjlORUFFREpCNy9RQUVESVFOZ3dEQzBIQWt3UkJrL2dBRURKQnJNWUFFREpCMHN3QUVESkIxd0VRTlVIMDBRQVFNa0hlK3dBUU1oQTJEQUlMUWNDVEJFSDgvZ0FRTWtHc3hnQVFNa0hTekFBUU1rSFlBUkExUWZUUkFCQXlRZDc3QUJBeUVEWU1BUXNnTGhBMEloUkI0QUFRbndFZ0ZDQUdFSUlCRU1vRklCQkJNR29oQ3lBUVFlQUFhaUVKSUJCQmtBRnFJUWdnRUVIQUFXb2hEQ0FRUWZBQmFpRU5JQkFxQXFBQ0lUUWdFQ29DcEFJaE5TQVFLZ0tvQWlFM0lCQXFBcXdDSVRnZ0VDb0NzQUloTmlBUUtnSzBBaUU1SUJBcUFyZ0NJVG9nRUNvQ3ZBSWhPMEVBSVFGQkFDRUtBa0FDUUNBSEJFQWdGQkNFQVNBR0VJSUJSdzBCQTBBZ0JoQ0NBU0FLVFFSQUlBWVFnZ0VnQVVjRVFFSEFrd1JCME1jQUVESkJxaVVRTWtHZEtoQXlRZWtFRURWQmhDOFFNa0g4ekFBUU1oQTJEQVlMQlFKL0lCUWdBUkNMQWlFY0lBWWdDaEJySVFJakFFR2dBV3NpQkNRQUFuOGpBRUhnQW1zaUFDUUFJQUlxQWdBaFBDQUNLZ0lFSVQwZ0Fpb0NEQ0E3bEVNQUFJQS9seUl5SVRNZ0Fpb0NDQ0krRU00RklUOGdQaEROQlNFK0lBQkJnSUNBL0FNMkF0QUNJQUJDQURjQ3lBSWdBQ0E5T0FMRUFpQUFJRDhnTTVRaVBUZ0N3QUlnQUNBOE9BSzRBaUFBSUQwNEFyQUNJQUFnUGlBemxDSXpPQUs4QWlBQUlET01PQUswQWlBQUtnTEVBaUV6SUFBcUFyZ0NJVHdnQUVHQUFtb2dBRUd3QW1vZ0VCQllJQUJCZ0FKcVFRaHlJQUJCc0FKcUlCQkJDR29RV0NBQVFaQUNhaUFBUWJBQ2FpQVFRUkJxRUZnZ0FFR1lBbW9nQUVHd0Ftb2dFRUVZYWhCWUlBQkJvQUpxSUFCQnNBSnFJQkJCSUdvUVdDQUFRYWdDYWlBQVFiQUNhaUFRUVNocUVGZ2dBRUhRQVdvZ0FFR3dBbW9nQ3hCWUlBQkIwQUZxUVFoeUlBQkJzQUpxSUF0QkNHb1FXQ0FBUWVBQmFpQUFRYkFDYWlBTFFSQnFFRmdnQUVIb0FXb2dBRUd3QW1vZ0MwRVlhaEJZSUFCQjhBRnFJQUJCc0FKcUlBdEJJR29RV0NBQVFmZ0JhaUFBUWJBQ2FpQUxRU2hxRUZnZ0FFR2dBV29nQUVHd0Ftb2dDUkJZSUFCQm9BRnFRUWh5SUFCQnNBSnFJQWxCQ0dvUVdDQUFRYkFCYWlBQVFiQUNhaUFKUVJCcUVGZ2dBRUc0QVdvZ0FFR3dBbW9nQ1VFWWFoQllJQUJCd0FGcUlBQkJzQUpxSUFsQklHb1FXQ0FBUWNnQmFpQUFRYkFDYWlBSlFTaHFFRmdnQUVId0FHb2dBRUd3QW1vZ0NCQllJQUJCOEFCcVFRaHlJQUJCc0FKcUlBaEJDR29RV0NBQVFZQUJhaUFBUWJBQ2FpQUlRUkJxRUZnZ0FFR0lBV29nQUVHd0Ftb2dDRUVZYWhCWUlBQkJrQUZxSUFCQnNBSnFJQWhCSUdvUVdDQUFRWmdCYWlBQVFiQUNhaUFJUVNocUVGZ2dBRUZBYXlBQVFiQUNhaUFNRUZnZ0FFRkFhMEVJY2lBQVFiQUNhaUFNUVFocUVGZ2dBRUhRQUdvZ0FFR3dBbW9nREVFUWFoQllJQUJCMkFCcUlBQkJzQUpxSUF4QkdHb1FXQ0FBUWVBQWFpQUFRYkFDYWlBTVFTQnFFRmdnQUVIb0FHb2dBRUd3QW1vZ0RFRW9haEJZSUFCQkVHb2dBRUd3QW1vZ0RSQllJQUJCRUdwQkNISWdBRUd3QW1vZ0RVRUlhaEJZSUFCQklHb2dBRUd3QW1vZ0RVRVFhaEJZSUFCQktHb2dBRUd3QW1vZ0RVRVlhaEJZSUFCQk1Hb2dBRUd3QW1vZ0RVRWdhaEJZSUFCQk9Hb2dBRUd3QW1vZ0RVRW9haEJZSUFjZ0FFRU1haUFBUVFocUlESWdPcFFRaHdJZ0JDQUhJQUFxQWhBZ0FDb0NGQ0FBS0FJTUlBQW9BZ2dRVlRnQ0FDQUVJQWNnQUNvQ0dDQUFLZ0ljSUFBb0Fnd2dBQ2dDQ0JCVk9BSUVJQVFnQnlBQUtnSWdJQUFxQWlRZ0FDZ0NEQ0FBS0FJSUVGVTRBZ2dnQkNBSElBQXFBaWdnQUNvQ0xDQUFLQUlNSUFBb0FnZ1FWVGdDRENBRUlBY2dBQ29DTUNBQUtnSTBJQUFvQWd3Z0FDZ0NDQkJWT0FJUUlBUWdCeUFBS2dJNElBQXFBandnQUNnQ0RDQUFLQUlJRUZVNEFoUWdCeUFBUVF4cUlBQkJDR29nTWlBNWxCQ0hBaUFFSUFjZ0FDb0NRQ0FBS2dKRUlBQW9BZ3dnQUNnQ0NCQlZPQUlZSUFRZ0J5QUFLZ0pJSUFBcUFrd2dBQ2dDRENBQUtBSUlFRlU0QWh3Z0JDQUhJQUFxQWxBZ0FDb0NWQ0FBS0FJTUlBQW9BZ2dRVlRnQ0lDQUVJQWNnQUNvQ1dDQUFLZ0pjSUFBb0Fnd2dBQ2dDQ0JCVk9BSWtJQVFnQnlBQUtnSmdJQUFxQW1RZ0FDZ0NEQ0FBS0FJSUVGVTRBaWdnQkNBSElBQXFBbWdnQUNvQ2JDQUFLQUlNSUFBb0FnZ1FWVGdDTENBSElBQkJER29nQUVFSWFpQXlJRGFVRUljQ0lBUWdCeUFBS2dKd0lBQXFBblFnQUNnQ0RDQUFLQUlJRUZVNEFqQWdCQ0FISUFBcUFuZ2dBQ29DZkNBQUtBSU1JQUFvQWdnUVZUZ0NOQ0FFSUFjZ0FDb0NnQUVnQUNvQ2hBRWdBQ2dDRENBQUtBSUlFRlU0QWpnZ0JDQUhJQUFxQW9nQklBQXFBb3dCSUFBb0Fnd2dBQ2dDQ0JCVk9BSThJQVFnQnlBQUtnS1FBU0FBS2dLVUFTQUFLQUlNSUFBb0FnZ1FWVGdDUUNBRUlBY2dBQ29DbUFFZ0FDb0NuQUVnQUNnQ0RDQUFLQUlJRUZVNEFrUWdCeUFBUVF4cUlBQkJDR29nTWlBNGxCQ0hBaUFFSUFjZ0FDb0NvQUVnQUNvQ3BBRWdBQ2dDRENBQUtBSUlFRlU0QWtnZ0JDQUhJQUFxQXFnQklBQXFBcXdCSUFBb0Fnd2dBQ2dDQ0JCVk9BSk1JQVFnQnlBQUtnS3dBU0FBS2dLMEFTQUFLQUlNSUFBb0FnZ1FWVGdDVUNBRUlBY2dBQ29DdUFFZ0FDb0N2QUVnQUNnQ0RDQUFLQUlJRUZVNEFsUWdCQ0FISUFBcUFzQUJJQUFxQXNRQklBQW9BZ3dnQUNnQ0NCQlZPQUpZSUFRZ0J5QUFLZ0xJQVNBQUtnTE1BU0FBS0FJTUlBQW9BZ2dRVlRnQ1hDQUhJQUJCREdvZ0FFRUlhaUF5SURlVUVJY0NJQVFnQnlBQUtnTFFBU0FBS2dMVUFTQUFLQUlNSUFBb0FnZ1FWVGdDWUNBRUlBY2dBQ29DMkFFZ0FDb0MzQUVnQUNnQ0RDQUFLQUlJRUZVNEFtUWdCQ0FISUFBcUF1QUJJQUFxQXVRQklBQW9BZ3dnQUNnQ0NCQlZPQUpvSUFRZ0J5QUFLZ0xvQVNBQUtnTHNBU0FBS0FJTUlBQW9BZ2dRVlRnQ2JDQUVJQWNnQUNvQzhBRWdBQ29DOUFFZ0FDZ0NEQ0FBS0FJSUVGVTRBbkFnQkNBSElBQXFBdmdCSUFBcUF2d0JJQUFvQWd3Z0FDZ0NDQkJWT0FKMElBY2dBRUVNYWlBQVFRaHFJRElnTlpRUWh3SWdCQ0FISUFBcUFvQUNJQUFxQW9RQ0lBQW9BZ3dnQUNnQ0NCQlZPQUo0SUFRZ0J5QUFLZ0tJQWlBQUtnS01BaUFBS0FJTUlBQW9BZ2dRVlRnQ2ZDQUVJQWNnQUNvQ2tBSWdBQ29DbEFJZ0FDZ0NEQ0FBS0FJSUVGVTRBb0FCSUFRZ0J5QUFLZ0tZQWlBQUtnS2NBaUFBS0FJTUlBQW9BZ2dRVlRnQ2hBRWdCQ0FISUFBcUFxQUNJQUFxQXFRQ0lBQW9BZ3dnQUNnQ0NCQlZPQUtJQVNBRUlBY2dBQ29DcUFJZ0FDb0NyQUlnQUNnQ0RDQUFLQUlJRUZVNEFvd0JJQWNnQUVFTWFpQUFRUWhxSURJZ05KUVFod0lnQkNBSElEd2dNeUFBS0FJTUlBQW9BZ2dRVlRnQ2tBRWdBRUhnQW1va0FFRUJDd1JBQWtCQkFDRURRUUFoQWlBY1FkUUFFUEVGUVNRaERnTkFJQU5CSlVZRVFDQUNRWm9GUmcwQ1FjQ1RCRUh3c0FFUU1rR3FKUkF5UVowcUVESkJtZ01RTlVHRUx4QXlRWU96QVJBeUVEWVFBQUFGSUFJZ0Rtb2hBQ0FFSUFOQkFuUnFJUThnQTBFQmFpSUZJUU1EUUNBQUlBSkhCRUFnSENBQ1FRaHRhaUlZSUJndEFBQWdEeW9DQUNBRUlBTkJBblJxS2dJQVhTQUNRUWR4ZEhJNkFBQWdBMEVCYWlFRElBSkJBV29oQWd3QkN3c2dEa0VCYXlFT0lBQWhBaUFGSVFNTUFRc0FDd0FMQ3lBRVFhQUJhaVFBUVFFTEJFQWdCaUFLRUdzaEFDQVVJQUVRaWdJaUFpQUFMUUFRT2dBUUlBSWdBQ2tDQ0RjQ0NDQUNJQUFwQWdBM0FnQWdBVUVCYWlFQkN5QUtRUUZxSVFvTUFRc0xJQlFnQVJES0JRd0NDMEhBa3dSQmx4OFFNa0dxSlJBeVFaMHFFREpCbVFRUU5VR0VMeEF5UVp3MUVESVFOZ3dDQzBIQWt3UkJ0enNRTWtHcUpSQXlRWjBxRURKQm1nUVFOVUdFTHhBeVFiekJBQkF5RURZTUFRc2dCaERlQXlBaFFUQnFKQUFNQVFzTUJRc0xJQzBRZmhDQkJpRUFJQ0JCRUdvUXlRVWdJRUVRYWhBK0lRRWdJQ0FsS0FJQUVEUVFoQUUyQWd3Z0lFRzg0QUUyQWdnZ0lDQUJOZ0lFSUNCQjh6UTJBZ0FnQUVIb3N3RWdJQkRHQlNBZ1FSQnFFRGthSUNVb0FnQWhEQ01BUWZBQWF5SUxKQUFnR2tFTWFpSVBFSk1DSUJwQmZ6WUNHQ0FhUVJ4cUlSa2dHa0dVQm1vaEdDQWFRWXdGYWlFaElCcEIvQVJxSVFRZ0RCQTBFRm9oRFNBTFFlZ0FhaUFhUWNnQWFoRHlBeEMwQWlFUUFrQURRQUpBQWtBQ1FDQVFJQXRCTUdvUWFSQzBBaEIvQkVBZ0MwRXdha0hXdEFFUWtnRWhGQ0FhTFFBSUlRSWdEQkEwSVFBZ0VCQnNLQUlFRURRaEFRSkFJQUlFUUFKL0lBRWhBeUFRRUd3b0FnUkJKR29oQlVFQUlRbEJBQ0VHSXdCQkVHc2lEaVFBSUFRUWt3SUNRQUpBSUFBaUFoQ0VBVVVOQUNBREVJUUJSUTBBSUFRZ0FoQ0VBUkNUQXdOQUFrQWdBaENFQVNBR1RRUkFJQVFRUkNBQ0VJUUJUUTBCUWNDVEJFSFF2UUVRTWtIOHV3RVFNa0hTekFBUU1rR3ZBUkExUWZUUkFCQXlRYU8rQVJBeUVEWU1Dd3RCZnlFQVFYOGhBVUgvLy8vL0J5RUlJQUlnQmhDTEFpSWNJUWNDUUNBRktBSUlCRUFnQlVFQU5nSmtJQVZCeUFCcUlna2lDaEJESVJJZ0NoQzVCaUFLSUJJUXRnWWdCVUhVQUdvaENnTkFJQW9RMndWRkJFQWdDaERkQlF3QkN3c2dCU0FLSUFVb0FnZ2dCeERvQXlBSkVFTWFEQUVMUWNDVEJFSDR2Z0VRTWtITGhBRVFNa0hTekFBUU1rR1ZBeEExUWZUUkFCQXlRZUsvQVJBeUVEWU1FUXRCQUNFSklBSWdCaENLQWlFU0lBVkJ5QUJxSVFjQ1FBTkFJQWNRUXlBSlRRUkFBa0FnQUVGL1JnMERJQWhCZjBZTkJ5QUJRWDlIRFFBZ0JDQU9RUWhxSUFZZ0NCRHVBUkNyQWd3REN3VUNRQ0FTTFFBUUlBTWdCeUFKRUR3b0FnQVFpZ0l0QUJCSERRQWdBQ0FjSUFNZ0J5QUpFRHdvQWdBUWl3SVFsUU1pQ2tzRVFDQUhJQWtRUENnQ0FDRUlJQUFoQVNBS0lRQU1BUXNnQ2lBQklBRWdDa3NiSVFFTElBbEJBV29oQ1F3QkN3c2dCQ29DRENBQXN5QUJzNVZlUlEwQUlBUWdEa0VJYWlBR0lBZ1E3Z0VRcXdJTElBWkJBV29oQmd3QkN3c2dCQkJFSVFrTElBNUJFR29rQUNBSkRBRUxRY0NUQkVHanVnRVFNa0g4dXdFUU1rSFN6QUFRTWtHZ0FSQTFRZlRSQUJBeVFaeTlBUkF5RURZTUJnc2dHaWdDQUVrTkFRd0RDeUFCSVFWQkFDRUJRUUFoQ0NNQVFSQnJJZ1lrQUNBRUVKTUNBa0FnQUNJREVJUUJSUTBBSUFVUWhBRkZEUUFnQkNBREVJUUJFSk1EQTBBZ0F4Q0VBU0FJVFFSQUlBUVFSQ0FERUlRQlN3UkFRY0NUQkVIUXZRRVFNa0g4dXdFUU1rSFN6QUFRTWtId0FCQTFRZlRSQUJBeVFhTytBUkF5RURZTUNBc0ZRUUFoQVVGL0lRQkJmeUVLUWYvLy8vOEhJUUlnQXlBSUVJc0NJUWtnQXlBSUVJb0NJUTRDUUFOQUlBVVFoQUVnQVUwRVFBSkFJQUJCZjBZTkF5QUtRWDlIRFFBZ0JDQUdRUWhxSUFnZ0FoRHVBUkNyQWd3REN3VUNRQ0FPTFFBUUlBVWdBUkNLQWkwQUVFY05BQ0FBSUFrZ0JTQUJFSXNDRUpVRElnZExCRUFnQUNFS0lBRWhBaUFISVFBTUFRc2dCeUFLSUFjZ0Nra2JJUW9MSUFGQkFXb2hBUXdCQ3dzZ0JDb0NEQ0FBc3lBS3M1VmVSUTBBSUFRZ0JrRUlhaUFJSUFJUTdnRVFxd0lMSUFoQkFXb2hDQXdCQ3dzZ0JCQkVJUUVMSUFaQkVHb2tBQ0FhS0FJQUlBRk5EUUlMSUJRUWZnd0NDeUFhS0FJWUdpQUxRZkFBYWlRQURBUUxJQlFRZmlBUUVHd29BZ1FRTkJCYUlRNUJmeUVJQW44Q2Z5QUxRVEJxUWJPMUFSQ1NBU0VBUVFFTEJFQkJBQ0FoSUEwZ0RpQUVJQXdvQWdBZ0RDZ0NCQ0FRRUd3b0FnUW9BZ0FnRUJCc0tBSUVLQUlFRU9VRklnaEJBRWdOQVJvTFFRRUxJUUVnQUJCK0lBRkZEUUFnQzBIWUFHb1FUaUVKQW44Z0MwRXdha0h2dFFFUWtnRWhBRUVCQ3dSQUlBa2dJU0FFSUFnUTVBVUxJQUFRZmlBTFFSQnFRY0MyQVJDU0FTRUFBa0FnQzBFd2FpQU5JQTRnQ1NBWUlCQVFiQ2dDQkNnQ0FDQVFFR3dvQWdRb0FnUVE0d1ZGQkVBZ0FCQitEQUVMSUFBUWZpQUxFRTRoQnlBTFFSQnFRZXUyQVJDU0FTRUFJQWNnQzBFd2FpQU5JQTRnQ1NBYUtnSUVFT0lGQWtBZ0J4QkVJQm9vQWdCSkJFQWdBQkIrREFFTElBQVFmaUFMUVJCcVFhaTNBUkNTQVNFU0FuOGdEQkEwSVJRZ0VCQnNLQUlFRURRaEhDQUxRVEJxSVFCQkFDRUJRUUFoQmlNQVFVQnFJZ1VrQUNBRUVKTUNBa0FDUUFKQUlCUVFoQUZGRFFBZ0hCQ0VBVVVOQUVNQUFDQkJFRzBoTWlBRlFSQnFJQUJEQUFBQUFCRGVCVVVOQVNBRUlCUVFoQUVRa3dNRFFBSkFJQlFRaEFFZ0JrMEVRQ0FFRUVRZ0ZCQ0VBVTBOQVVIQWt3UkIwTDBCRURKQi9Mc0JFREpCMHN3QUVESkJnQUlRTlVIMDBRQVFNa0dqdmdFUU1oQTJEQW9MUVg4aEFFRi9JUXBCLy8vLy93Y2hBaUFVSUFZUWl3SWhHeUFGUVF4cUlBVkJDR29nQlVFUWFpQVVJQVlRaWdJaUZTb0NBQ0FWS2dJRUVPb0RRUUFoQVFKQUEwQWdIQkNFQVNBQlRRUkFBa0FnQUVGL1JnMERJQUpCZjBZTkNDQUtRWDlIRFFBZ0JDQUZJQVlnQWhEdUFSQ3JBZ3dEQ3dVZ0hDQUJFSW9DSVFNQ1FDQVZMUUFRSUFNdEFCQkhEUUFnQlNvQ0RDQURLZ0lBa3hCdElBVXFBZ2dnQXlvQ0JKTVFiWklnTWw0TkFDQUFJQnNnSENBQkVJc0NFT3dGSWdOTEJFQWdBU0VDSUFBaENpQURJUUFNQVFzZ0F5QUtJQU1nQ2trYklRb0xJQUZCQVdvaEFRd0JDd3NnQkNvQ0RDQUFzeUFLczVWZVJRMEFJQVFnQlNBR0lBSVE3Z0VRcXdJTElBWkJBV29oQmd3QkN3c2dCQkJFSVFFTElBVkJRR3NrQUNBQkRBSUxRY0NUQkVHKzJBRVFNa0g4dXdFUU1rSFN6QUFRTWtIRUFSQTFRZlRSQUJBeVFmWFlBUkF5RURZTUJRdEJ3Sk1FUWFPNkFSQXlRZnk3QVJBeVFkTE1BQkF5UWZFQkVEVkI5TkVBRURKQm5MMEJFRElRTmd3RUN5QWFLQUlBU1FSQUlCSVFmZ3dCQ3lBU0VINENmd0ovSUF0QkVHcEJ5cmdCRUpJQklRQkJBUXNFUUVFQUlDRWdEU0FPSUFRZ0RDZ0NBQ0FNS0FJRUlCQVFiQ2dDQkNnQ0FDQVFFR3dvQWdRb0FnUVE1UVVpQ0VFQVNBMEJHZ3RCQVFzaEFTQUFFSDRnQVVVTkFBSi9JQXRCRUdwQjc3Z0JFSklCSVFCQkFRc0VRQ0FKSUNFZ0JDQUlFT1FGQ3lBQUVINGdDMEVRYWtHNXVRRVFrZ0VoQUNBTFFUQnFJQTBnRGlBSklCZ2dFQkJzS0FJRUtBSUFJQkFRYkNnQ0JDZ0NCQkRqQlVVRVFDQUFFSDRNQVFzZ0FCQitJQWNRa3dJQ2Z5QUxRUkJxUWVTNUFSQ1NBU0VBUVFFTEJFQWdCeUFMUVRCcUlBMGdEaUFKSUJvcUFnUVE0Z1VMSUFBUWZpQUhFRVFnR2lnQ0FFa05BQ0FIRUVRZ0R4QkVUUTBBSUJrZ0MwRXdhaER0QXlBUElBY1Fwd01nR2lBUUVHd29BZ0EyQWhnTElBY1E1QUVMSUFrUTVBRUxJQkFROFFNTUFRc0xEQVFMSUNCQk1Hb2tBQ0FzUVNCcUpBQWdIeENPQXlBclFTQnFKQUFnRXlBVEtBSUFFUDhERUlJQklnQTJBakFDUUNBQVJRUkFJQk1vQWpnaUFFRUFJQUJCQUVvYklRQURRQ0FBSUJGR0RRSWdFeWdDTkNBUlFjUUFiR3BCZnpZQ1BDQVJRUUZxSVJFTUFBc0FDeUFUS0FJc0VETWdFeUFUS0FJd1FRTjBFRG9pQURZQ0xDQUFSUTBDSUJNb0FnQVEvd01oQUFKQUlDZEJBVVlFUUFOQUlCRWdFeWdDTUU0TkFpQUFJQkVRYXlvQ0FDRXlJQUFnRVJCcktnSUVJVE1DUUNBVEtBSUVJZ0VFUUNBQlFiZ0JhaUF5SURNZ0V5Z0NMQ0FSUVFOMGFpSUJJQUZCQkdvUTRnRWFEQUVMSUJNb0Fpd2dFVUVEZEdvaUFTQXpPQUlFSUFFZ01qZ0NBQXNnRVVFQmFpRVJEQUFMQUFzQ1FBSkFBa0FDUUNBblFRSnJEZ1FCQXdJQUF3c0RRQ0FSSUJNb0FqQk9EUVFnQUNBUkVHc3FBZ0FoTWlBQUlCRVFheW9DQkNFekFrQWdFeWdDQkNJQkJFQWdBVUc0QVdvZ01rTUFBTUEvbENBelF3QUF3RCtVSUJNb0Fpd2dFVUVEZEdvaUFTQUJRUVJxRU9JQkdnd0JDeUFUS0FJc0lCRkJBM1JxSWdFZ00wTUFBTUEvbERnQ0JDQUJJREpEQUFEQVA1UTRBZ0FMSUJGQkFXb2hFUXdBQ3dBTEEwQWdFU0FUS0FJd1RnMERJQUFnRVJCcktnSUFJVElnQUNBUkVHc3FBZ1FoTXdKQUlCTW9BZ1FpQVFSQUlBRkJ1QUZxSURJZ01wSWdNeUF6a2lBVEtBSXNJQkZCQTNScUlnRWdBVUVFYWhEaUFSb01BUXNnRXlnQ0xDQVJRUU4wYWlJQklETWdNNUk0QWdRZ0FTQXlJREtTT0FJQUN5QVJRUUZxSVJFTUFBc0FDd05BSUJFZ0V5Z0NNRTROQWlBQUlCRVFheW9DQUNFeUlBQWdFUkJyS2dJRUlUTUNRQ0FUS0FJRUlnRUVRQ0FCUWJnQmFpQXlRd0FBUUVDVUlETkRBQUJBUUpRZ0V5Z0NMQ0FSUVFOMGFpSUJJQUZCQkdvUTRnRWFEQUVMSUJNb0Fpd2dFVUVEZEdvaUFTQXpRd0FBUUVDVU9BSUVJQUVnTWtNQUFFQkFsRGdDQUFzZ0VVRUJhaUVSREFBTEFBc0RRQ0FSSUJNb0FqQk9EUUVnQUNBUkVHc3FBZ0FoTWlBQUlCRVFheW9DQkNFekFrQWdFeWdDQkNJQkJFQWdBVUc0QVdvZ01rTUFBSUJBbENBelF3QUFnRUNVSUJNb0Fpd2dFVUVEZEdvaUFTQUJRUVJxRU9JQkdnd0JDeUFUS0FJc0lCRkJBM1JxSWdFZ00wTUFBSUJBbERnQ0JDQUJJREpEQUFDQVFKUTRBZ0FMSUJGQkFXb2hFUXdBQ3dBTFFRQWhFUU5BSUJNb0FqZ2lBQ0FSU2dSQUlCTW9BaVFnRVVFTWJHb29BZ2doQVNBUlFjUUFiQ0lOSUJNb0FqUnFJZ0JCZnpZQ1BDQUFJQUUyQWpBQ1FDQUFLQUpBRFFBZ0V5Z0NBQ2dDQUNnQ0FCQTlJUVFnRXlnQ0FDZ0NBQ2dDQUNnQ0dDSWZRUUJJRFFBQ2Z5QVRLQUlFSVFVZ0V5Z0NBQ0VCSXdCQkVHc2lBQ1FBSUFBZ0h6WUNEQ0FCS0FJQVFRUnFJQUJCREdvUWxBWWhBaUFBUVJCcUpBQWdFeWdDQUJEL0F5RUFJQk1vQWpRZ0RXb2lJU0VjSXdCQjRBRnJJZ0VrQUVGL0lRb0NRQUpBSUFRUVJFRUVTUTBBSUFRUVJFRUVkQkE2SWhwRkRRRWdCQkJFUVJoc0VEb2lDVVVOQVVFQUlRb0RRQ0FFRUVRZ0Nrc0VRQ0FhSUFwQkJIUnFJZ01nQUNBRUlBb1FVQ2dDQUJCcktnSUF1emtEQUNBRElBQWdCQ0FLRUZBb0FnQVFheW9DQkxzNUF3Z2dDU0FLUVJoc2FpSURJQUlnQkNBS0VGQW9BZ1FRbHdFcUFnQzdPUU1BSUFJZ0JDQUtFRkFvQWdRUWx3RXFBZ1FoTWlBRFFnQTNBeEFnQXlBeXV6a0RDQ0FLUVFGcUlRb01BUXNMSUFFZ0NUWUMxQUVnQVNBYU5nTFFBU0FCSUFvMkF0Z0JRWDhoQ2dKL0lBVkJDR29pRHlFRElBUVFSQ0VPUVFBaEFrRUFJUWdqQUVIUUFHc2lBQ1FBUVg4aEJRSkFJQTVCQkVnTkFBTkFJQUlnRGtjRVFDQUNRUmhzSVFjZ0FrRUJhaUVDSUFjZ0NXb3JBeEJFQUFBQUFBQUFBQUJoRFFFTUFnc0xJQU1yQXdCRUFBQUFBQUFBQUFCaERRQWdBeXNESUVRQUFBQUFBQUFBQUdJTkFDQURLd01vUkFBQUFBQUFBQUFBWVEwQUlBTXJBMEJFQUFBQUFBQUFBQUJpRFFBZ0F5c0RTRVFBQUFBQUFBQUFBR0lOQUNBREt3TlFSQUFBQUFBQUFQQS9ZZzBBSUFNckF4aEVBQUFBQUFBQUFBQmlEUUFnQXlzRE9FUUFBQUFBQUFBQUFHSU5BQ0FES3dOWVJBQUFBQUFBQUFBQVlnMEFJQTVCQVhRaUFrRUlFTHdCSWd0RkJFQkJBRUVEUWZZTlFRQVFPQXdCQ3lBQ1FRRVF2QUVpQmdSQUlBWW9BZ0FoRkNBTEtBSUFJUUlEUUNBSUlBNUhCRUFnQWlBSVFRZDBJZ2RxSUFrZ0NFRVliR29pRUNzREFEa0RBQ0FDSUFkQkNISnFJQkFyQXdnNUF3QWdBaUFIUVJCeWFrS0FnSUNBZ0lDQStEODNBd0FnQWlBSFFSaHlha0lBTndNQUlBSWdCMEVnY21wQ0FEY0RBQ0FDSUFkQktISnFRZ0EzQXdBZ0FpQUhRVEJ5YWlBYUlBaEJCSFFpSUdvaURDc0RBQ0FRS3dNQW1xSTVBd0FnQWlBSFFUaHlhaUFNS3dNQUlCQXJBd2lhb2prREFDQUNJQ0JCQ0hJaUdFRURkR3BDQURjREFDQUNJQWRCeUFCeWFrSUFOd01BSUFJZ0IwSFFBSEpxUWdBM0F3QWdBaUFIUWRnQWNtb2dFQ3NEQURrREFDQUNJQWRCNEFCeWFpQVFLd01JT1FNQUlBSWdCMEhvQUhKcVFvQ0FnSUNBZ0lENFB6Y0RBQ0FDSUFkQjhBQnlhaUFNS3dNSUlCQXJBd0Nhb2prREFDQUNJQWRCK0FCeWFpQU1Ld01JSUJBckF3aWFvamtEQUNBVUlDQnFJQXdyQXdBNUF3QWdGQ0FZYWlBTUt3TUlPUU1BSUFoQkFXb2hDQXdCQ3dzZ0N4Qy9CaUlDUlFSQUlBc1FSU0FHRUVWQkFFRURRYUlqUVFBUU9Bd0NDeUFDSUFzUTRBSWlCMFVFUUNBTEVFVWdCaEJGSUFJUVJVRUFRUU5CbWloQkFCQTREQUlMSUFJZ0JoRGdBaUlJUlFSQUlBc1FSU0FHRUVVZ0FoQkZJQWNRUlVFQVFRTkI5aXRCQUJBNERBSUxJQWNRb0FOQmYwd0VRQ0FMRUVVZ0JoQkZJQUlRUlNBSEVFVWdDQkJGUVFCQkEwSG1NVUVBRURnTUFnc2dCeUFJRU9BQ0loQkZCRUFnQ3hCRklBWVFSU0FDRUVVZ0J4QkZJQWdRUlVFQVFRTkJyRGRCQUJBNERBSUxJQU1yQXpBaFVpQVFLQUlBSWdVckF5Z2hXeUFGS3dNUUlWd2dCU3NER0NGRUlBVXJBd0FoUXlBRkt3TXdJVUFnQXlzREFDRlRJQU1yQXdnaFZDQURLd01vSVZVZ0JTc0RJQ0ZCSUFVckF3Z2hSeUFES3dNUUlWWWdCU3NET0NGQ0lBc1FSU0FHRUVVZ0FoQkZJQWNRUlNBSUVFVWdFQkJGSUFBZ1FpQkNJRUtpSUVFZ1VpQkNvcUVnVmFNaVFTQkJvaUJISUZZZ1FxS2hJRlFnUWFLaElGT2pJa0lnUXFLZ29KOGlWNk01QXlnZ0FDQkJJRmVqT1FNZ0lBQWdRaUJYb3prREdDQUFJRUFnUUNCQW9pQkVJRUFnVXFLaElGV2pJa0lnUXFJZ1F5QkFJRmFpb1NCQ0lGU2lvU0JUb3lKQUlFQ2lvS0NmSWxpak9RTVFJQUFnUWlCWW96a0RDQ0FBSUVBZ1dLTTVBd0JCQUNFQ1FRQWhCd0pBSUFBckF3QWlRU0FBS3dNZ0lrMmlJQUFyQXdnaVF5QUFLd01ZSWtxaW9TSkNJRUtpSUVNZ0FDc0RLQ0pQb2lBQUt3TVFJa3NnVGFLaElrUWdSS0lnU3lCS29pQkJJRStpb1NKSElFZWlvS0NmSWtCRUFBQUFBQUFBQUFCaERRQWdRaUJBb3lGQ0Fud2dRU0JISUVDaklrbWlJa3dnUXlCRUlFQ2pJa2FpSWxDaElrUkVBQUFBQUFBQUFBQmlCRUFnUXlGSElFRWhTQ0JKSVVVZ1JpRkFJRXNNQVFzZ1FTQkxJRUVnUXFJZ1N5QkdvcUVpVGtRQUFBQUFBQUFBQUdJaUFoc2lTQ0JDSUVrZ0Foc2lSYUlpVENCTElFTWdBaHNpUnlCR0lFSWdBaHNpUUtJaVVLRWhSQ0JKSUVZZ0Foc2hRaUJPUkFBQUFBQUFBQUFBWVNFSElFTWdRU0FDR3dzaFJpQkVSQUFBQUFBQUFBQUFZUTBBSUVjZ1FxSWdSaUJGb3FFZ1JLTWlSeUJCSUVxaUlFTWdUYUtnSUVzZ1Q2S2dJa0dhSUVFZ1FVUUFBQUFBQUFBQUFHTWJJa0ZFQUFBQUFBQUE4RCtnbjBRQUFBQUFBQUR3UHlCQm9aK2dSQUFBQUFBQUFPQS9vaUpaSUVXaUlFU2pJa0dpSUVnZ1FxSWdSaUJBb3FFZ1VDQk1vU0pEb3lKRUlGa2dRS0lnUTZNaVE2S2dJa2tnU2FJZ1J5QkhvaUJFSUVTaW9FUUFBQUFBQUFEd1A2QWlTeUJCSUVHaUlFTWdRNktnUkFBQUFBQUFBUEMvb0tLaElrWkVBQUFBQUFBQUFBQmpEUUFnUXlCRUlFbWFJRWFmSWs2aElFdWpJa2lpb0NGTUlFRWdSeUJJb3FBaFJpQkRJRVFnVGlCSm9TQkxveUpFb3FBaFF5QkJJRWNnUktLZ0lVa0NmQ0FDQkVBZ1JTRkJJRUloUlNCQUlVSWdTU0ZMSUVRaFRpQkRJVWtnUmlGSElFd2hSaUJJREFFTElBZEZCRUFnUWlGQklFQWhRaUJKSVVzZ1F5Rk9JRVFoU1NCR0lVY2dTQ0ZHSUV3TUFRc2dRQ0ZCSUVRaFN5QkRJVTRnU0NGSElFd0xJVkZCQUNFQ0FuOGdTaUJGb2lKRUlFMGdRcUlpV3FFaVEwUUFBQUFBQUFBQUFHSUVRQ0JOSVZBZ1NpRklJRVVoUUNCQ0lVeEJBQXdCQ3lCS0lFOGdTaUJCb2lCUElFS2lvU0pkUkFBQUFBQUFBQUFBWWlJQ0d5SklJRUVnUlNBQ0d5SkFvaUpFSUU4Z1RTQUNHeUpRSUVJZ1FTQUNHeUpNb2lKYW9TRkRJRVVnUWlBQ0d5RkJJRTBnU2lBQ0d5RlBJRjFFQUFBQUFBQUFBQUJoQ3lFRElFTkVBQUFBQUFBQUFBQmhEUUFnVUNCQm9pQlBJRUNpb1NCRG95SkNJRmtnUUtJZ1E2TWlRNklnU0NCQm9pQlBJRXlpb1NCYUlFU2hJa0NqSWtFZ1dTQk1vaUJBb3lKRW9xQWlSU0JGb2lCQ0lFS2lJRUVnUWFLZ1JBQUFBQUFBQVBBL29DSk5JRU1nUTZJZ1JDQkVvcUJFQUFBQUFBQUE4TCtnb3FFaVFFUUFBQUFBQUFBQUFHTU5BQ0JFSUVFZ1Jab2dRSjhpVEtFZ1RhTWlTS0tnSVVvZ1F5QkNJRWlpb0NGQUlFUWdRU0JNSUVXaElFMmpJa1Npb0NGRklFTWdRaUJFb3FBaFFRSjhJQUlFUUNCQklVTWdSQ0ZDSUVVaFFTQkFJVVFnU2lGQUlFZ01BUXNnQTBVRVFDQkJJVU1nUlNGQ0lFUWhRU0JBSVVRZ1NDRkFJRW9NQVFzZ1JDRkRJRVVoUWlCSUlVUWdTZ3NoUlNCSElFU2lJRkVnUmFLZ0lFWWdRS0tnSWtpYUlFZ2dTRVFBQUFBQUFBQUFBR01iSVVnZ1J5QkRvaUJSSUVLaW9DQkdJRUdpb0NKS21pQktJRXBFQUFBQUFBQUFBQUJqR3lGS0FrQUNRQUpBSUVzZ1E2SWdUaUJDb3FBZ1NTQkJvcUFpVFpvZ1RTQk5SQUFBQUFBQUFBQUFZeHNpVFNCTElFU2lJRTRnUmFLZ0lFa2dRS0tnSWt5YUlFd2dURVFBQUFBQUFBQUFBR01iSWt4akJFQWdTaUJOWkFSQUlFZ2dUV1JGRFFJZ0FDQkpPUU1RSUFBZ1Rqa0RDQ0FBSUVzNUF3QU1CQXNnQUNCR09RTVFJQUFnVVRrRENDQUFJRWM1QXdBZ1FTQkFJRWdnU21RaUFoc2hRU0JDSUVVZ0Foc2hRaUJESUVRZ0Foc2hRd3dEQ3lCS0lFeGtCRUFnU0NCTVpFVU5BU0FBSUVrNUF4QWdBQ0JPT1FNSUlBQWdTemtEQUF3Q0N5QUFJRVk1QXhBZ0FDQlJPUU1JSUFBZ1J6a0RBQ0JCSUVBZ1NDQktaQ0lDR3lGQklFSWdSU0FDR3lGQ0lFTWdSQ0FDR3lGRERBSUxJQUFnUmprREVDQUFJRkU1QXdnZ0FDQkhPUU1BQ3lCRUlVTWdSU0ZDSUVBaFFRc2dBQ0JCT1FNb0lBQWdRamtESUNBQUlFTTVBeGdMSUFCQlFHc2dBQ3NESUNKQUlBQXJBd0FpUXFJZ0FDc0RDQ0pCSUFBckF4Z2lSS0toSWtNZ1F5QkRvaUJCSUFBckF5Z2lRNklnQUNzREVDSkhJRUNpb1NKRklFV2lJRWNnUktJZ1F5QkNvcUVpUmlCR29xQ2dueUpKb3lKTE9RTUFJQUFnUmlCSm95SkdPUU00SUFBZ1JTQkpveUpKT1FNd0lBRWdYQ0JXb1NCVUlGc2dVcUVnVmFNaVRxS2hJRk9qSUZnZ1Y2QkVBQUFBQUFBQTREK2lJa1dqT1FPSUFTQUJJRTRnUmFNNUE2Z0JJQUZFQUFBQUFBQUE4RDhnUmFNNUE4Z0JJQUVnU1RrRGdBRWdBU0JHT1FPZ0FTQUJJRXM1QThBQklBRWdSRGtEZUNBQklFQTVBNWdCSUFFZ1F6a0R1QUVnQVNCQk9RT1FBU0FCSUVjNUE3QUJJQUVnUWprRGNFRUFJUVVNQVFzZ0N4QkZRUUJCQTBHYkYwRUFFRGdMSUFCQjBBQnFKQUFnQlVGL1RBc0VRQ0FhRURNZ0NSQXpEQUVMSUFFZ0R4RHNBeUlBTmdMY0FTQUFSUVJBSUJvUU15QUpFRE1NQVFzZ0FDQUJRZEFCYWlBQlFmQUFhaUFCSUFGQjZBQnFFTlFGUVg5S0JFQkJBQ0VHQTBCQkFDRUtJQVpCQTBZRVFDQUJRZHdCYWhEcEF5QWFFRE1nQ1JBeklDRWdBU3NEYUxZaU1qZ0NORUYvUVFBZ01rTUFBQ0JCWGhzaENnd0RCUU5BSUFwQkJFY0VRQ0FjSUFaQkJIUnFJQXBCQW5ScUlBRWdCa0VGZEdvZ0NrRURkR29yQXdDMk9BSUFJQXBCQVdvaENnd0JDd3NnQmtFQmFpRUdEQUVMQUFzQUN5QWFFRE1nQ1JBeklBRkIzQUZxRU9rREN5QUJRZUFCYWlRQUlBb01BUXNNQmdzTkFDQVRLQUkwSUExcVFRQTJBandnQkJCRUlRQWdFeWdDTkNBTmFpSUJJQUEyQWpnZ0FTQVRJQjlCQW5ScUtBSThOZ0l3SUFRUVJDRUFJQVFRUkNFQklCNGdFeWdDTkNBTmFpb0NOTHM1QXhBZ0hpQUJOZ0lJSUI0Z0FEWUNCQ0FlSUJFMkFnQkJBRUVCUVlEekFDQWVFRGdMSUJGQkFXb2hFUXdCQ3dzZ0FFRUFJQUJCQUVvYklRQUxRUUFoRVFOQUlBQWdFVWNFUUNBVEtBSTBJQkZCeEFCc2FrRUFOZ0pBSUJGQkFXb2hFUXdCQ3dzZ0owRUJSZzBBSUJZUU13c2dIa0VnYWlRQURBTUxRUUJCQTBHNTBBQkJBQkE0UVFFUUFRQUxRUUJCQTBHZkVFRUFFRGhCQVJBQkFBc1FBQUFMSUNRb0F1QUJJZ0FFUUNBZElBQW9BalEyQWpnZ0hTQUFLQUk0TmdJMEN5QWtLd1A0QVNGQUlDUXJBL0FCSVVJQ1FFSEFBQkE2SWdBRVFDQUFRZ0EzQXdnZ0FFSUFOd01vSUFCQ0FEY0RHQ0FBUWdBM0F4QWdBRUtBZ0lDQWdJQ0ErRDgzQXlBZ0FFSUFOd013SUFCQ0FEY0RPQ0FBQkg4Z1FFUUFBQUFBQUFBQUFHRWdRa1FBQUFBQUFBQUFBR0Z5Qkg5QmZnVWdBRVFBQUFBQUFBRHdQeUJBb3lKQUlFQkVBQUFBQUFBQThEOGdRcU9nb3prREFFRUFDd1ZCZnd0QmYwb05BU0FBRURNTFFRQWhBQXNnSkNBQU5nTG9BUU5BSUNvZ0hTZ0NOQ0lBVGcwQklCMG9BamdnS2tIRUFHeHFJZ0lvQWp4RkJFQWdKQ0FDS0FJd0loWTJBb0FDUVFBaEFRTkFRUUFoQUNBQlFRTkdCRUFnSkNBV1FRSjBhaWdDaUFJaUFnUkFJQUpCQVRZQ21BRURRRUVBSVFFZ0FFRURSd1JBQTBBZ0FVRUVSd1JBSUFGQkFuUWlGaUFDSUFCQkJIUWlBMnBxSUFNZ0hXb2dGbW9xQWdBNEFnZ2dBVUVCYWlFQkRBRUxDeUFBUVFGcUlRQU1BUXNMSUFKQmZ6WUNxQUVMQlFOQUlBQkJCRWNFUUNBQVFRSjBJZ01nSFNBQlFRUjBJZ3BxYWlBQ0lBcHFJQU5xS2dJQU9BSUFJQUJCQVdvaEFBd0JDd3NnQVVFQmFpRUJEQUVMQ3dzZ0trRUJhaUVxREFBTEFBc2dIVUZBYXlRQUlBQUw5RXdFUEg4R2ZRMThBWDRqQUVHd0Eyc2lCQ1FBSUFRZ0FEWUNyQU1nQkVIOC9RTWdCRUdzQTJvUWNqWUNrQUlnQkJCcE5nS3dBUUovSUFSQmtBSnFJQVJCc0FGcUVIY0VRRUhFNndNb0FnQU1BUXNnQVNBRVFhd0RhaEI5SWg0b0FvUUNUZ1JBUWNqckF5Z0NBQXdCQ3lBRVFiQUJha0VBUWVBQUVEc2FJQVJCZ0lDQS9IczJBcXdCQWtBZ0hpZ0NnQUlpQUNBQlJ3MEFJQjRvQXVRQklRY2dIaUFCUVFKMGFpZ0NpQUloRGlBZUtBTEVBU0V6UVFBaEFDTUFRVEJySWlJa0FFRi9JUXNDUUNBSFJTQU9SWElnTTBVZ0JFSHdBbW9pRkVWeWNpQUVRZFIrUm5JTkFDQU9LQUtZQVVFQlNBUkFRWDRoQ3d3QkN5QUVRUUEyQXF3QklBNUI2QUJxSVFnZ0RrRTRhaUVTSUE1QkNHb2hMd05BSUE0b0FnUWdBRW9FUUNBdklBQkI4QUJzSWdJZ0RpZ0NBR3BCREdvZ0J5QUFRVEJzYWlJRlFUQnFFSjhFQWtBZ0RpZ0NtQUZCQWtnTkFDQVNJQTRvQWdBZ0FtcEJER29nQlVHUUJHb1Fud1FnRGlnQ21BRkJBMGdOQUNBSUlBNG9BZ0FnQW1wQkRHb2dCVUh3QjJvUW53UUxJQUJCQVdvaEFBd0JDd3NDUUNBSEtBSUFRUUZHQkVBZ0J5Z0NEQ0VGSUFkQk1Hb2hEQ0FIUWZBVWFpRUlJQWRCeURwcUlSSkJBQ0VDSXdCQjBBQnJJZ0FrQUNBRktBSUVzaUZDSUFVb0FnQ3lJVU1DZndOQUFrQkJBQ0VKSUJNZ0RpZ0NCRTROQUFOQVFRQWhDeUFKUVFOR0JFQWdFMEh3QUd3aUVDQU9LQUlBYWlnQ0JDRURRUUFoQ1FOQUlBTW9BZ1FnQ1VvRVFFRUFJUXNEUUNBSlFSUnNJZ29nQXlnQ0FHb2lIeWdDQkNBTFNnUkFBa0FnQlNBQVFTQnFJQXRCRkd3aUF5QWZLQUlBYWlJZktnSUlJQjhxQWd3Z0FFRWNhaUFBUVJocUVLb0ZRUUJJRFFBZ0FDb0NIQ0krUXdBQUFBQmRJRDRnUTJCeURRQWdBQ29DR0NJK1F3QUFBQUJkSUQ0Z1FtQnlEUUFnQUNvQ1NDQUFLZ0pNSUE0b0FnQWdFR29vQWdRb0FnQWdDbW9vQWdBZ0Eyb2lBeW9DQ0NJK0lBQXFBa0NVSUFNcUFnd2lQeUFBS2dKRWxKS1NJa0FnQUNvQ0xDQUFLZ0lnSUQ2VUlBQXFBaVFnUDVTU2tpSkJJRUdVSUFBcUFqd2dQaUFBS2dJd2xDQS9JQUFxQWpTVWtwSWlQeUEvbEpJZ1FDQkFsSktSSWtDVmxDQUFLZ0lvSUVFZ1FKV1VJQUFxQWpnZ1B5QkFsWlNTa2tQTnpNeTlYZzBBSUFBZ1BqZ0NFQ0FBSUFNcUFndzRBaFFnQlNBQVFTQnFJQUJCRUdvZ0FFRUlhaEREQlFKQUlBQXFBZ3dpUGlBT0tBSUFJQkJxS0FJRUtBSUFJQXBxSWdNcUFnd2lQMTlGRFFBZ1BpQURLZ0lRWUVVTkFDQUdRY2dCUmdSQVFRQkJBMEdGaEFKQkFCQTRJQWhCekNWcURBc0xJQWdnQmtFWWJHb2lBeUFMTmdJSUlBTWdDVFlDQkNBRElCTTJBZ0FnQXlBQUtnSWNPQUlRSUFBcUFoZ2hQaUFEUVFBMkFnd2dBeUErT0FJVUlBWkJBV29oQmd3QkN5QStJRDhnUDVKZlJRMEFJRDRnQXlvQ0VFTUFBQUEvbEdCRkRRQWdBa0hJQVVZRVFDQVNRWDgyQXN3bFFjZ0JJUUlNQVFzZ0VpQUNRUmhzYWlJRElBczJBZ2dnQXlBSk5nSUVJQU1nRXpZQ0FDQURJQUFxQWh3NEFoQWdBQ29DR0NFK0lBTkJBRFlDRENBRElENDRBaFFnQWtFQmFpRUNDeUFMUVFGcUlRc2dEaWdDQUNBUWFpZ0NCQ0VEREFFTEN5QUpRUUZxSVFrTUFRc0xJQk5CQVdvaEV3d0RCUU5BSUF0QkJFY0VRQ0FMUVFKMElnTWdDVUVFZENJUUlBQkJJR3BxYWlBTUlCTkJNR3hxSUJCcUlBTnFLZ0lBT0FJQUlBdEJBV29oQ3d3QkN3c2dDVUVCYWlFSkRBRUxBQXNBQ3dzZ0NDQUdRUmhzYWtGL05nSU1JQklnQWtFWWJHcEJER29MUVg4MkFnQU1BUXNnQnlnQ0JDRUdJQWNvQWdnaEJTQUhRVEJxSVFvZ0IwSHdGR29oQ0NBSFFjZzZhaUVTUVFBaEFpTUFRZEFBYXlJQUpBQWdCYkloUUNBR3NpRkJBbjhEUUFKQVFRQWhDeUFUSUE0b0FnUk9EUUFEUUVFQUlRa2dDMEVEUmdSQUlCTkI4QUJzSWhBZ0RpZ0NBR29vQWdRaEMwRUFJUVlEUUNBTEtBSUVJQVpLQkVCQkFDRUpBMEFnQmtFVWJDSUZJQXNvQWdCcUlnd29BZ1FnQ1VvRVFBSkFRUUFnQUVFZ2FpQUpRUlJzSWg4Z0RDZ0NBR29pRENvQ0NDQU1LZ0lNSUFCQkhHb2dBRUVZYWhDcUJVRUFTQTBBSUFBcUFod2lQa01BQUFBQVhTQStJRUZnY2cwQUlBQXFBaGdpUGtNQUFBQUFYU0ErSUVCZ2NnMEFJQUFnRGlnQ0FDQVFhaWdDQkNnQ0FDQUZhaWdDQUNBZmFpSU1LZ0lJT0FJUUlBQWdEQ29DRERnQ0ZFRUFJQUJCSUdvZ0FFRVFhaUFBUVFocUVNTUZBa0FnQUNvQ0RDSStJQTRvQWdBZ0VHb29BZ1FvQWdBZ0JXb2lCU29DRENJL1gwVU5BQ0ErSUFVcUFoQmdSUTBBSUFOQnlBRkdCRUJCQUVFRFFZV0VBa0VBRURnZ0NFSE1KV29NQ3dzZ0NDQURRUmhzYWlJRklBazJBZ2dnQlNBR05nSUVJQVVnRXpZQ0FDQUZJQUFxQWh3NEFoQWdBQ29DR0NFK0lBVkJBRFlDRENBRklENDRBaFFnQTBFQmFpRUREQUVMSUQ0Z1B5QS9rbDlGRFFBZ1BpQUZLZ0lRUXdBQUFEK1VZRVVOQUNBQ1FjZ0JSZ1JBSUJKQmZ6WUN6Q1ZCeUFFaEFnd0JDeUFTSUFKQkdHeHFJZ1VnQ1RZQ0NDQUZJQVkyQWdRZ0JTQVROZ0lBSUFVZ0FDb0NIRGdDRUNBQUtnSVlJVDRnQlVFQU5nSU1JQVVnUGpnQ0ZDQUNRUUZxSVFJTElBbEJBV29oQ1NBT0tBSUFJQkJxS0FJRUlRc01BUXNMSUFaQkFXb2hCZ3dCQ3dzZ0UwRUJhaUVUREFNRkEwQWdDVUVFUndSQUlBbEJBblFpQmlBTFFRUjBJZ1VnQUVFZ2FtcHFJQW9nRTBFd2JHb2dCV29nQm1vcUFnQTRBZ0FnQ1VFQmFpRUpEQUVMQ3lBTFFRRnFJUXNNQVFzQUN3QUxDeUFJSUFOQkdHeHFRWDgyQWd3Z0VpQUNRUmhzYWtFTWFndEJmellDQUFzZ0FFSFFBR29rQUNBSFFkQUxhaUUwSUE1Qm5BRnFJVFVnQjBISU9tb2hOaUFIUWZBVWFpSTNJUk5CQUNFSkEwQUNRQ0FKSVFCQkFDRWNJREFnQnlnQ0pFNE5BQU5BQWtBQ1FDQWNJQWNvQXVCblRnMEFJREFnQnlnQ0pFWU5BQ0FUSURVZ0FDQTBJQWNvQWdRZ0J5Z0NDQkMvQlNJTFFYOUtEUUVnRXlBM1J3MEFJRFlpRXlBMUlBQWdOQ0FIS0FJRUlBY29BZ2dRdndVaUMwRUFUZzBCQzBFQUlRc2dIRVVOQWdOQUlBc2dIRVlOQkNBSElBdEJOR3hxSWhwQmxPZ0FhZ0ovSUJwQjVPY0FhaWdDQUNFR0lCcEI2T2NBYWlnQ0FDRWtJQnBCN09jQWFpZ0NBQ0VDSUJwQjhPY0FhaWdDQUNFZklCcEI5T2NBYWlnQ0FDRVNJQnBCL09jQWFpSTRJUUJCQUNFUVFRQWhDa0VBSVE4akFFRXdheUlkSkFBZ0FpZ0NDQ0VsSUFJb0FnUWhLQ0FDS0FJQUlTRWdHa0g0NXdCcUloRW9BZ0FpQTBVRVFDQVJBbjhnQmlnQ0hDRURJQVlvQWlBaEJVRW9FRG9pQWdSQUFrQWdBaUFGTmdJVUlBSWdBellDQ0NBQ0lBTTJBaEFnQWlBRk5nSU1JQUlnQXlBRmFrRUJhaUlETmdJRUlBSWdBellDQUNBQ0lBTWdBMnhCQVhRUU9pSUROZ0lZSUFORkRRQWdBZ3dDQ3d0QkFFRURRY1lQUVFBUU9FRUJFQUVBQ3lJRE5nSUFDMEYvSVMwZ0JpZ0NEQ0VJSUFZZ0lVRXdiR3BCTUdvaUZTRWJJQ1FvQWdBZ0lVSHdBR3hxSWdJb0FnQWhJeUFDS0FJRUtBSUFJQ2hCRkd4cUlSWWpBRUhRQUdzaUFpUUFBa0FDUUFKQUlBZ0VRQ0FJUVFocUlCc2dBa0VRYWhDdUF5QUNJQllvQWdBZ0pVRVViR29pQlNvQ0NDSStPQUpNSUFJZ0JTb0NEQ0kvT0FKSVFYOGhCVUVBSUFKQkVHb2dQaUEvSUFKQnpBQnFJQUpCeUFCcUVNd0NRUUJJRFFNZ0NFRzRBV29pRnlBQ0tnSk1JQUlxQWtnZ0FrSEVBR29nQWtGQWF4QnhRUUJJRFFNZ0F5Z0NFQ0VGQW44Z0Fpb0NRRU1BQUFBL2tpSStpME1BQUFCUFhRUkFJRDZvREFFTFFZQ0FnSUI0Q3lFSUlBVkJBWFFoREFKL0lBSXFBa1JEQUFBQVA1SWlQb3REQUFBQVQxMEVRQ0ErcUF3QkMwR0FnSUNBZUFzaEdDQUlJQXhySVF4QkFDQUZheUVaSUFNb0FoZ2hDQU5BSUJrZ0F5Z0NGRW9OQWtFQUlBTW9BZ2dpQldzaERTQVlJQVZCQVhScklRVWdETEloUGdOQUFrQUNRQ0FES0FJTUlBMU9CRUFnRnlBRnNpQStJQUpCeEFCcUlBSkJRR3NRNGdGQmYwd05BU0FDUVJCcUlDTW9BZ0FnRmlnQ0NFRUNkR29vQWdBZ0Fpb0NSQ0FDS2dKQUlBSkJEMm9RcHdWQmYwd05BU0FJSUFJdEFBOGlHenNCQUNBS1FRRnFJUW9nRUNBYmFpRVFJQnNnRzJ3Z0Qyb2hEd3dDQ3lBTVFRSnFJUXdnR1VFQmFpRVpEQU1MSUFoQmdDQTdBUUFMSUFWQkFtb2hCU0FOUVFGcUlRMGdDRUVDYWlFSURBQUxBQXNBQ3lBQ0lCWW9BZ0FnSlVFVWJHb2lCU29DQ0NJK09BSk1JQUlnQlNvQ0RDSS9PQUpJUVFBZ0d5QStJRDhnQWtIRUFHb2dBa0ZBYXhETUFrRUFTQTBCSUFNb0FoQWhCUUovSUFJcUFrQkRBQUFBUDVJaVBvdERBQUFBVDEwRVFDQStxQXdCQzBHQWdJQ0FlQXNoQ0NBRlFRRjBJUXdDZnlBQ0tnSkVRd0FBQUQrU0lqNkxRd0FBQUU5ZEJFQWdQcWdNQVF0QmdJQ0FnSGdMSVJnZ0NDQU1heUVNUVFBZ0JXc2hHU0FES0FJWUlRZ0RRQ0FaSUFNb0FoUktEUUZCQUNBREtBSUlJZ1ZySVEwZ0dDQUZRUUYwYXlFRklBeXlJVDREUUNBREtBSU1JQTFPQkVBQ1FDQWJJQ01vQWdBZ0ZpZ0NDRUVDZEdvb0FnQWdCYklnUGlBQ1FROXFFS2NGUVg5TUJFQWdDRUdBSURzQkFBd0JDeUFJSUFJdEFBOGlGenNCQUNBS1FRRnFJUW9nRUNBWGFpRVFJQmNnRjJ3Z0Qyb2hEd3NnQlVFQ2FpRUZJQTFCQVdvaERTQUlRUUpxSVFnTUFRc0xJQXhCQW1vaERDQVpRUUZxSVJrTUFBc0FDeUFLUlEwQUlBTWdDallDSkNBRElCQTJBaUFnQXdKL0lBOGdFQ0FRYkNBS2JXdXlrU0kraTBNQUFBQlBYUVJBSUQ2b0RBRUxRWUNBZ0lCNEN6WUNIRUVBSVFVTUFRdEJmeUVGQ3lBQ1FkQUFhaVFBQWtBZ0JVRUFTQTBBSUJFb0FnQWlBaWdDRUNBQ0tBSVVha0VCYWlBQ0tBSUlJQUlvQWd4cVFRRnFiTEpEQUFDZ1FKUkRBQUNnUUpRZ0FpZ0NIQ0lDSUFKc3NsNE5BQUpBQWtBQ1FBSkFJQ1FvQXBnQlFRRnJEZ0lBQVFJTElBWW9BZ3dnRlVFQVFRQWdKQ2dDQUNBaFFmQUFiR29vQWdRb0FnQWdLRUVVYkdvb0FnQWdKVUVVYkdvZ0hVRVFhaERqQXd3Q0N5QUdLQUlNSUJVZ0JpQWhRVEJzYWtHUUJHcEJBQ0FrS0FJQUlDRkI4QUJzYWlnQ0JDZ0NBQ0FvUVJSc2FpZ0NBQ0FsUVJSc2FpQWRRUkJxRU9NRERBRUxJQVlvQWd3Z0ZTQUdJQ0ZCTUd4cUlnSkJrQVJxSUFKQjhBZHFJQ1FvQWdBZ0lVSHdBR3hxS0FJRUtBSUFJQ2hCRkd4cUtBSUFJQ1ZCRkd4cUlCMUJFR29RNHdNTFFRQWhMUUovSUFZb0FnUWhGaUFHS0FJSUlSc2dCaWdDRkNFaklCRW9BZ0FoRFNBR0tBSVlJZ2doRnlBZFFSQnFJU2tnQUNFWlFRQWhEQ01BUVVCcUlnOGtBQ0FiUVFGcklRVWdGa0VCYXlFUUlBMG9BaFFoQ2lBTktBSVFJUkVEUUFKQUlBeEJBMFlOQUNBcElBeEJBM1JxSWdBb0FnQWlBa0VBU0EwQUlBSkJmSEZCQW5JaUFpQVhhaUlESUJBZ0F5QVdTQnNoRlNBQ0lCZHJJZ0pCQUNBQ1FRQktHeUVHSUFBb0FnUkJCRzFCQW5SQkFuSWlBQ0FJYWlJQ0lBVWdBaUFiU0JzaEdDQUFJQWhySWdCQkFDQUFRUUJLR3lFQUEwQWdBQ0FZVEFSQUlCSWdBQ0FXYkNBR2Ftb2hBeUFHSVFJRFFDQUNJQlZNQkVBZ0EwRUFPZ0FBSUFKQkFXb2hBaUFEUVFGcUlRTU1BUXNMSUFCQkFXb2hBQXdCQ3dzZ0RFRUJhaUVNREFFTEN5QVBRUUEyQWp3Z0NrRUJkQ0VnUVFBZ0VVRUJkR3NoSmtFQUlRTkJBU0VHQTBBQ1FBSkFBa0FnQTBFRFJ3UkFJQ2tnQTBFRGRHb2lBQ2dDQUNJQ1FYOUtEUUpCZnlFWUlBWU5BUXNnRFNnQ0FFRURkRUVnYWlBTktBSUVRUUYwUVFocWJDSUFFRG9pRWdSQUlBQVFPaUlRQkVCQmZ5RVlJQ05CRGtzaE1VRUFJUmRCQUNFQUEwQUNRQ0FQS0FJOElCZEtCRUFDUUFKQVFRRWdJM1JCb09BQmNVVWdEU2dDSkNBTktBSUVJZ1VnRFNnQ0FDSUdiRWNnTVhKeURRQWdGMEVDZENJQ0lBOUJKR3BxSWpJb0FnQWlBeUFOS0FJUVFRRjBhMEVEYXlJcFFRQklEUUFnQXlBTktBSVVRUUYwYWtFRGFpQWJUZzBBSUE5Qk1Hb2dBbW9pT1NnQ0FDSUNJQTBvQWdoQkFYUnJRUU5ySWlwQkFFZ05BQ0FDSUEwb0FneEJBWFJxUVFOcUlCWklEUUVMSUJkQkFuUWlBaUFQUVNScWFpZ0NBQ0lEUVFOcUlRVWdBMEVEYXlFRElBOUJNR29nQW1vaENBTkFJQU1nQlVvTkF3SkFJQU1nRFNnQ0VFRUJkR3RCQUVnTkFDQU5LQUlVUVFGMElBTnFJQnRPRFFRZ0NDZ0NBQ0lDUVFOcUlRb2dBa0VEYXlFQ0EwQWdBaUFLU2cwQkFrQWdBaUFOS0FJSVFRRjBhMEVBU0EwQUlBMG9BZ3hCQVhRZ0Ftb2dGazROQWlBZklCWWdJeUFOSUFJZ0F5QVBRUlJxRUxnRklBOG9BaFFpQmlBQVRBMEFJQjBnQWpZQ0RDQWRJQU0yQWdnZ0dTQUdza01BUUJ4R2xUZ0NBRUVBSVJnZ0JpRUFDeUFDUVFGcUlRSU1BQXNBQ3lBRFFRRnFJUU1NQUFzQUMwRUFJUW9nQmtFQ2RFRVFhaUlDUVFBZ0FrRUFTaHNoQ0NBU0lRSWdFQ0VEQTBBZ0NDQUtSd1JBSUFKQkFEWUNBQ0FEUVFBMkFnQWdDa0VCYWlFS0lBTkJCR29oQXlBQ1FRUnFJUUlNQVFzTFFRQWhGU0FGUVFGMFFRWnFJZ1ZCQUNBRlFRQktHeUVtSUFaQkFYUkJCbW9pQmtFQUlBWkJBRW9iSVNjZ0h5QXFJQllnS1d4cWFpRU1RUUFoRVNBU0lRVWdFQ0VJQTBCQkFDRUtJQkVnSmtjRVFBTkFJQXBCQWtjRVFDQUNRUUEyQWdBZ0EwRUFOZ0lBSUFwQkFuUWlCaUFQUVFScWFrRUFOZ0lBSUE5QkRHb2dCbXBCQURZQ0FDQUtRUUZxSVFvZ0EwRUVhaUVESUFKQkJHb2hBZ3dCQ3dzZ0NFRUlhaUVJSUFWQkNHb2hCVUVBSVFvZ0RDRUdBMEFnQ2lBblJ3UkFJQXBCQW5SQkJIRWlLeUFQUVF4cWFpSXNJQVl0QUFBaUlDQXNLQUlBYWlJc05nSUFJQTlCQkdvZ0syb2lLeUFyS0FJQUlDQWdJR3hxSWlBMkFnQWdBaUFGS0FJQUlDeHFOZ0lBSUFNZ0NDZ0NBQ0FnYWpZQ0FDQUtRUUZxSVFvZ0EwRUVhaUVESUFoQkJHb2hDQ0FDUVFScUlRSWdCVUVFYWlFRklBWkJBV29oQmd3QkN3c2dFVUVCYWlFUklBd2dGbW9oREF3QkN3c0RRQ0FWUVFkR0RRSWdGVUVEYXlFcklCVkJBbW9oTENBVklDbHFJVHBCQUNFQ0EwQWdBa0VIUndSQUlBSkJBbW9oTzBFQUlRWWdEU2dDQUNJZ1FRQWdJRUVBU2hzaEppQU5LQUlFSWlkQkFDQW5RUUJLR3lFOElCWkJBWFFoUFNBZklBSWdLbW9nRmlBNmJHcHFJUVVnRFNnQ0dDRUlRUUFoRVFOQUlCRWdQRWNFUUNBRklRTWdDQ0VLUVFBaERBTkFJQXdnSmtjRVFDQU1RUUZxSVF3Z0NpOEJBQ0FETFFBQWJDQUdhaUVHSUFOQkFtb2hBeUFLUVFKcUlRb01BUXNMSUJGQkFXb2hFU0FGSUQxcUlRVWdDQ0FtUVFGMGFpRUlEQUVMQ3lBUElCQWdJRUVCZENJRlFRaHFJZ2dnTEVFQ2F5SUtiQ0lNSUR0QkFtc2lBMnBCQW5RaUVXb29BZ0FnRUNBSUlBb2dKMEVCZEdwc0lnZ2dBeUFGYWlJRmFrRUNkQ0lLYWlnQ0FHb2dFQ0FESUFocVFRSjBJZ05xS0FJQUlCQWdCU0FNYWtFQ2RDSUZhaWdDQUdvZ0VTQVNhaWdDQUNBS0lCSnFLQUlBYWlBRElCSnFLQUlBSUFVZ0Vtb29BZ0JxYXlJRElBTnNJQTBvQWlRaUJXMXFheUlJQkg4Z0JpQU5LQUlnSUFOc0lBVnRhMEhrQUd3Z0RTZ0NIRzFCNUFCc0FuOGdDTEtSSWo2TFF3QUFBRTlkQkVBZ1BxZ01BUXRCZ0lDQWdIZ0xiUVZCQUFzMkFoUWdBQ0FQS0FJVUlnTklCRUFnSFNBQ0lEa29BZ0JxUVFOck5nSU1JQjBnS3lBeUtBSUFhallDQ0NBWklBT3lRd0JBSEVhVk9BSUFRUUFoR0NBRElRQUxJQUpCQVdvaEFnd0JDd3NnRlVFQmFpRVZEQUFMQUFzZ0VoQXpJQkFRTXd3RUN5QVhRUUZxSVJjTUFBc0FDd3dEQ3d3Q0N5QVBRVUJySkFBZ0dBd0RDeUFDUVh4eFFRSnlJZ0lnRjJvaEp5QUNJQmRySVJBZ0FDZ0NCRUVFYlVFQ2RFRUNjaUlBSUFocUlURWdBQ0FJYXlFS0EwQUNRQ0FLSURGS0RRQUNRQ0FLSUNacVFRQklEUUFnQ2lBZ2FpQWJUZzBCSUFvZ0Ztd2hNaUFRSVFJRFFDQUNJQ2RLRFFFQ1FDQUNJQTBvQWdoQkFYUnJRUUJJRFFBZ0RTZ0NERUVCZENBQ2FpQVdUZzBDSUJJZ0FpQXlhbW9pQUMwQUFBMEFJQUJCQVRvQUFDQWZJQllnSXlBTklBSWdDaUFQUVJScUVMZ0ZJQThvQWhRaEdDQVBRVEJxSVJFZ0QwRWthaUVWSUE5QkdHb2hERUVBSVFBQ1FDQVBLQUk4SWdVRVFDQUZRUUFnQlVFQVNoc2hCZ05BQWtBQ2Z5QUFJQVpIQkVBZ0RDQUFRUUowYWlnQ0FDQVlUZzBDSUFBaEJnc2dCU0FHUmdzRVFDQUZRUUpMRFFRZ0VTQUZRUUowSWdCcUlBSTJBZ0FnQUNBVmFpQUtOZ0lBSUFBZ0RHb2dHRFlDQUNBUElBOG9BanhCQVdvMkFqd01CQXRCQWlFQUlBVkJBMGNFUUNBUElBVkJBV28yQWp3Z0JTRUFDd05BSUFBZ0Jrb0VRQ0FSSUFCQkFuUWlCV29nRVNBQVFRRnJJZ0JCQW5RaUttb29BZ0EyQWdBZ0JTQVZhaUFWSUNwcUtBSUFOZ0lBSUFVZ0RHb2dEQ0FxYWlnQ0FEWUNBQXdCQ3dzZ0VTQUFRUUowSWdCcUlBSTJBZ0FnQUNBVmFpQUtOZ0lBSUFBZ0RHb2dHRFlDQUF3REN5QUFRUUZxSVFBTUFBc0FDeUFSSUFJMkFnQWdGU0FLTmdJQUlBd2dHRFlDQUNBUFFRRTJBandMUVFBaEJnc2dBa0VFYWlFQ0RBQUxBQXNnQ2tFRWFpRUtEQUVMQ3lBRFFRRnFJUU1NQVFzTFFRQkJBMEcxRDBFQUVEaEJBUkFCQUF0QkFFZ0VRRUYvSVMwTUFRc2dHU0FkS0FJTXNqZ0NCQ0FaSUIwb0FnaXlPQUlJSUJrZ0pDZ0NBQ0FoUWZBQWJHb2lBQ29DR0NBQUtnSU1JQUFvQWdRb0FnQWdLRUVVYkdvb0FnQWdKVUVVYkdvaUFpb0NDSlFnQUNvQ0VDQUNLZ0lNbEpLU09BSU1JQmtnQUNvQ0tDQUFLZ0ljSUFJcUFnaVVJQUFxQWlBZ0Fpb0NESlNTa2pnQ0VDQVpJQUFxQWpnZ0FDb0NMQ0FDS2dJSWxDQUFLZ0l3SUFJcUFneVVrcEk0QWhRTElCMUJNR29rQUNBdEN6WUNBQUpBSUMwTkFDQTRLZ0lBSUFjcUFpaGVSUTBBSUFjZ0NVRURkR29pQWtIVURtb0NmU0FIS0FJQVFRRkdCRUFnQnlnQ0RDSUFRZWdBYWlBYVFZRG9BR29xQWdDN0lCcEJoT2dBYWlvQ0FMc2dJa0VJYWlBaUlBQW9BckFCRUtRR0lBY2dDVUVEZEdwQjBBNXFJQ0lyQXdpMk9BSUFJQ0lyQXdDMkRBRUxJQWNnQ1VFRGRHcEIwQTVxSUJwQmdPZ0FhaW9DQURnQ0FDQWFRWVRvQUdvcUFnQUxPQUlBSUFjZ0NVRU1iR29pQUVHUUVXb2dHa0dJNkFCcUtnSUFPQUlBSUFCQmxCRnFJQnBCak9nQWFpb0NBRGdDQUNBQVFaZ1JhaUFhUVpEb0FHb3FBZ0E0QWdBZ0FrSFFDMm9nSWtFUWFpQUxRUUowYWlnQ0FDSUFLZ0lRT0FJQUlBSkIxQXRxSUFBcUFoUTRBZ0FnQnlBSlFSaHNhaUlDUWFEZ0FHb2dBQ2dDQURZQ0FDQUNRYVRnQUdvZ0FDZ0NCRFlDQUNBQUtBSUlJUUFnQWtHczRBQnFRUUEyQWdBZ0FrR280QUJxSUFBMkFnQWdDVUVCYWlFSkN5QUxRUUZxSVFzTUFBc0FDeUFpUVJCcUlCeEJBblJxSUJNZ0MwRVliR29pQWpZQ0FDQUhJQUJCQTNScUlnTkIwQXRxSUFJcUFoQTRBZ0FnQTBIVUMyb2dBaW9DRkRnQ0FDQUhJQnhCTkd4cUlnTkI4T2NBYWlBek5nSUFJQU5CN09jQWFpQUNOZ0lBSUFOQjZPY0FhaUFPTmdJQUlBTkI1T2NBYWlBSE5nSUFJQWtnQUVFQmFpSUFJQUJCQlVZYklRQWdIRUVCYWlFY0lEQkJBV29oTUF3QUN3QUxDMEVBSVFBZ0NVRUFJQWxCQUVvYklRWURRQ0FBSUFaSEJFQWdEaUFBUVJoc0lnTnFJZ0lnQXlBSGFpSURRYkRnQUdvcEFnQTNBcXdCSUFJZ0EwR280QUJxS1FJQU53S2tBU0FDSUFOQm9PQUFhaWtDQURjQ25BRWdBRUVCYWlFQURBRUxDeUFPSUFsQkdHeHFRWDgyQXFnQkFrQUNRQ0FIS0FJQVFRRkdCRUJCZlNFTElBbEJBMGdOQWlBRUlBY29BaEFnTHlBSFFkQU9haUlBSUFkQmtCRnFJZ0lnQ1NBVVFRQVF6Z0lpUGpnQ3JBRWdQaUFIS2dJc1hrVU5BU0FIS0FJUVJBQUFBS0NabWVrL0VOSUNJQVFnQnlnQ0VDQVVJQUFnQWlBSklCUkJBUkRPQWlJK09BS3NBU0ErSUFjcUFpeGVSUTBCSUFjb0FoQkVBQUFBUURNejR6OFEwZ0lnQkNBSEtBSVFJQlFnQUNBQ0lBa2dGRUVCRU00Q0lqNDRBcXdCSUQ0Z0J5b0NMRjVGRFFFZ0J5Z0NFRVFBQUFDZ21ablpQeERTQWlBRUlBY29BaEFnRkNBQUlBSWdDU0FVUVFFUXpnSWlQamdDckFFZ1BpQUhLZ0lzWGtVTkFTQUhLQUlRUkFBQUFBQUFBQUFBRU5JQ0lBUWdCeWdDRUNBVUlBQWdBaUFKSUJSQkFSRE9BaUkrT0FLc0FVRjhJUXNnUGlBSEtnSXNYa1VOQVF3Q0MwRjlJUXNnQ1VFRFNBMEJJQVFnTHlBSFFkQU9haUlBSUFkQmtCRnFJZ0lnQ1NBVVFRQkRBQUNBUHhETkFpSStPQUtzQVNBK0lBY3FBaXhlUlEwQUlBUWdGQ0FBSUFJZ0NTQVVRUUZEemN4TVB4RE5BaUkrT0FLc0FTQStJQWNxQWl4ZVJRMEFJQVFnRkNBQUlBSWdDU0FVUVFGRG1wa1pQeEROQWlJK09BS3NBU0ErSUFjcUFpeGVSUTBBSUFRZ0ZDQUFJQUlnQ1NBVVFRRkR6Y3pNUGhETkFpSStPQUtzQVNBK0lBY3FBaXhlUlEwQUlBUWdGQ0FBSUFJZ0NTQVVRUUZEQUFBQUFCRE5BaUkrT0FLc0FVRjhJUXNnUGlBSEtnSXNYZzBCQ3lBT0lBNG9BcGdCUVFGcU5nS1lBVUVBSVF0QkFDRWNBMEJCQUNFQUlCeEJBMFlFUUFOQVFRQWhBQ0FMUVFOR0JFQURRRUVBSVFzZ0FFRURSZzBHQTBBZ0MwRUVSd1JBSUF0QkFuUWlBaUFPSUFCQkJIUWlBMnBxSUFNZ0ZHb2dBbW9xQWdBNEFnZ2dDMEVCYWlFTERBRUxDeUFBUVFGcUlRQU1BQXNBQlFOQUlBQkJCRWNFUUNBT0lBdEJCSFJxSUFCQkFuUnFJZ0lnQWlvQ0NEZ0NPQ0FBUVFGcUlRQU1BUXNMSUF0QkFXb2hDd3dCQ3dBTEFBVURRQ0FBUVFSSEJFQWdEaUFjUVFSMGFpQUFRUUowYWlJQ0lBSXFBamc0QW1nZ0FFRUJhaUVBREFFTEN5QWNRUUZxSVJ3TUFRc0FDd0FMSUE1QkFEWUNtQUVMSUNKQk1Hb2tBQU5BQWtCQkFDRUFJQzVCQTBZRVFBSi9JQjRvQXVnQklRTWdDMEVmZGlFR0l3QkJRR29pQWlRQUlBTUVmeUFDQW53Z0JDc0RrQUlpUkNBRUt3TzRBaUpGb0NBRUt3UGdBaUpHb0VRQUFBQUFBQUR3UDZBaVIwUXRReHpyNGpZYVAyUUVRQ0FDSUFRckE4QUNJQVFyQTlnQ29TQkhueUpFSUVTZ0lrU2pPUU1nSUFJZ0JDc0QwQUlnQkNzRG9BS2hJRVNqT1FNb0lBSWdCQ3NEbUFJZ0JDc0RzQUtoSUVTak9RTXdJRVJFQUFBQUFBQUEwRCtpREFFTElFUWdSV1JGSUVRZ1JtUkZja1VFUUNBQ0lFUkVBQUFBQUFBQThEK2dJRVdoSUVhaG55SkVJRVNnSWtSRUFBQUFBQUFBMEQraU9RTWdJQUlnQkNzRG1BSWdCQ3NEc0FLZ0lFU2pPUU1vSUFJZ0JDc0QwQUlnQkNzRG9BS2dJRVNqT1FNd0lBUXJBOEFDSUFRckE5Z0NvU0JFb3d3QkN5QkZJRVprQkVBZ0JDc0RzQUloUnlBRUt3T1lBaUZJSUFJZ1JVUUFBQUFBQUFEd1A2QWdSS0VnUnFHZklrUWdSS0FpUkVRQUFBQUFBQURRUDZJNUF5Z2dBaUJJSUVlZ0lFU2pPUU1nSUFJZ0JDc0R3QUlnQkNzRDJBS2dJRVNqT1FNd0lBUXJBOUFDSUFRckE2QUNvU0JFb3d3QkN5QUNJQVFyQTlBQ0lBUXJBNkFDb0NCR1JBQUFBQUFBQVBBL29DQkVvU0JGb1o4aVJDQkVvQ0pFb3prRElDQUVLd1BZQWlGRklBUXJBOEFDSVVZZ0FpQkVSQUFBQUFBQUFOQS9vamtETUNBQ0lFWWdSYUFnUktNNUF5Z2dCQ3NEbUFJZ0JDc0RzQUtoSUVTakN6a0RPQ0FDSUFRckE2Z0NPUU1BSUFJZ0JDc0R5QUk1QXdnZ0FpQUVLd1BvQWprREVDQUNRU0JxRU5FR0FrQWdCZ1JBSUFNZ0Fpc0RJRGtEQ0NBRElBSXJBeWc1QXhBZ0F5QUNLd013T1FNWUlBTWdBaXNET0RrRElDQURJQUlyQXdBNUF5Z2dBeUFDS3dNSU9RTXdJQU1nQWlzREVEa0RPQXdCQzBRQUFBQUFBQUR3UHlBREt3TUFJa1NoSWtnaFJ5QkVJVVVDZnlBQ0t3TWdJa3NnQXlzRENDSk5vaUFDS3dNb0lra2dBeXNERUNKT29xQWdBaXNETUNKS0lBTXJBeGdpVDZLZ0lBSXJBemdpVENBREt3TWdJbENpb0NKR1JBQUFBQUFBQUFBQVl3UkFJQUlnVEpvaVREa0RPQ0FDSUVxYUlrbzVBekFnQWlCSm1pSkpPUU1vSUFJZ1M1b2lTemtESUNCR21pRkdDeUJHUkpaRGkyem4rKzgvWkVVTEJFQWdSQUo4SUVhOUlsRkNJSWluUWYvLy8vOEhjU0lHUVlDQXdQOERUd1JBUkFBQUFBQUFBQUFBUkJndFJGVDdJUWxBSUZGQ2YxVWJJRkduSUFaQmdJREEvd05yY2tVTkFScEVBQUFBQUFBQUFBQWdSaUJHb2FNTUFRc0NmQ0FHUWYvLy8vNERUUVJBUkJndFJGVDdJZmsvSUFaQmdZQ0E0d05KRFFFYVJBZGNGRE1tcHBFOElFWWdScUlRMndNZ1JxS2hJRWFoUkJndFJGVDdJZmsvb0F3Q0N5QlJRbjlYQkVCRUdDMUVWUHNoK1Q4Z1JrUUFBQUFBQUFEd1A2QkVBQUFBQUFBQTREK2lJa1dmSWtZZ1JpQkZFTnNEb2tRSFhCUXpKcWFSdktDZ29TSkZJRVdnREFJTFJBQUFBQUFBQVBBL0lFYWhSQUFBQUFBQUFPQS9vaUpGbnlKR0lFVVEyd09pSUVVZ1JyMUNnSUNBZ0hDRHZ5SkZJRVdpb1NCR0lFV2dvNkFnUmFBaVJTQkZvQXNMSWthaUVJVURJRVlRaFFNaVI2TWhSU0JJSUVhaUVJVURJRWVqSVVjTElBTWdVQ0JIb2lCRklFeWlvRGtESUNBRElFOGdSNklnUlNCS29xQTVBeGdnQXlCT0lFZWlJRVVnU2FLZ09RTVFJQU1nVFNCSG9pQkZJRXVpb0RrRENDQURRUWhxRU5FR0lBTWdSQ0FDS3dNQW9pQklJQU1yQXlpaW9Ea0RLQ0FESUVRZ0Fpc0RDS0lnU0NBREt3TXdvcUE1QXpBZ0F5QkVJQUlyQXhDaUlFZ2dBeXNET0tLZ09RTTRDeUFFSUFNckF3Z2lSQ0FES3dNUUlrVWdSYUFpUjZJaVNTQURLd01nSWtnZ0F5c0RHQ0pMSUV1Z0lrYWlJa3FoT1FPd0FpQUVJRVFnUnFJaVRDQkhJRWlpSWsyZ09RUFFBaUFFSUVrZ1NxQTVBNWdDSUFRZ1JTQkdvaUpKSUVnZ1JDQkVvQ0pJb2lKS29Ua0QyQUlnQkNCTUlFMmhPUU9nQWlBRUlFa2dTcUE1QThBQ0lBUkVBQUFBQUFBQThEOGdSQ0JJb2lKRUlFVWdSNklpUmFDaE9RUGdBaUFFUkFBQUFBQUFBUEEvSUVRZ1N5QkdvaUpFb0tFNUE3Z0NJQVJFQUFBQUFBQUE4RDhnUlNCRW9LRTVBNUFDSUFRZ0F5c0RLRGtEcUFJZ0JDQURLd013T1FQSUFpQUVJQU1yQXpnNUErZ0NRUUFGUVg4TElRTWdBa0ZBYXlRQUlBTkJBRWdMQkVBZ0JDQUJOZ0tnQVVFQVFRTkJ3T2NCSUFSQm9BRnFFRGdMSUFSQmtBSnFJUUlnQkVHd0FXb2hBd05BQWtCQkFDRUpJQUJCQTBZTkFBTkFJQWxCQkVZRVFDQUFRUUZxSVFBTUF3VWdDVUVEZENJR0lBTWdBRUVGZENJRmFtb2lDQ0FJS3dNQUlrUWdBaUFGYWlBR2Fpc0RBQ0JFb1VRQUFBQmdabWJ1UDZPZ09RTUFJQWxCQVdvaENRd0JDd0FMQUFzTElBdEJmMG9OQVNBRUlBczJBb0FCUVFCQkFVSG81d0VnQkVHQUFXb1FPRUYrSVFBZ0hrRitOZ0tBQWd3REJRTkFJQUJCQkVjRVFDQUVRWkFDYWlBdVFRVjBhaUFBUVFOMGFpQUVRZkFDYWlBdVFRUjBhaUFBUVFKMGFpb0NBTHM1QXdBZ0FFRUJhaUVBREFFTEN5QXVRUUZxSVM0TUFnc0FDd3NnSGlBZUtBS0FBa0VDZEdvb0FvZ0NJUUFnQkNBZUtBS0VBa0VCYXpZQ2xBRWdCQ0FBTmdLUUFVRUFRUUZCKytjQklBUkJrQUZxRURnZ0hpZ0NnQUloQUFzQ1FDQUFJQUZHQkVBZ0JDQUVLd093QVRrREVDQUVJQVFyQTdnQk9RTVlJQVFnQkNzRHdBRTVBeUFnQkNBRUt3UElBVGtES0NBRUlBUXJBOUFCT1FNd0lBUWdCQ3NEOEFFNUExQWdCQ0FFS3dQWUFUa0RPQ0FFUVVCcklBUXJBK0FCT1FNQUlBUWdCQ3NENkFFNUEwZ2dCQ0FFS3dQNEFUa0RXQ0FFSUFRckE0QUNPUU5nSUFRZ0JDc0RpQUk1QTJnZ0JDQUJOZ0lBSUFRZ0JDb0NyQUc3T1FNSVFmVHdBMEdXNkFFZ0JCQU9HZ3dCQ3lBRUlBRTJBbkJCdHZZRFFhWG9BU0FFUWZBQWFoQU9HZ3RCQUFzaEFDQUVRYkFEYWlRQUlBQUxOQUVCZjBHWS9nTW9BZ0FoQUVHUS9nTVFOQm9EUUNBQUJFQWdBQ2dDQUNFQklBQVFNeUFCSVFBTUFRc0xRWkQrQXhDekFncy9BUUovUVlUK0F5Z0NBQ0VBUWZ6OUF4QTBJUUVEUUNBQUJFQWdBQ2dDQUNFQ0lBRWdBRUVJYWhDM0JTQUFFRE1nQWlFQURBRUxDMEg4L1FNUXN3SUxGQUFnQUVFTWFrRUFJQUVvQWdSQmdPY0JSaHNMREFBZ0FFRU1haWdDQUJBekN4UUFJQUJCREdwQkFDQUJLQUlFUWZUbEFVWWJDd3NBSUFCQkRHb29BZ0FhQ3hBQUlBQW9BZ0JCaEFGcVFRRVFDZ0FMS2dFQmZFRi9JQUFyQXdBZ0FTc0RBS0VpQWtRQUFBQUFBQUFBQUdRZ0FrUUFBQUFBQUFBQUFHTWJDeFFBSUFCQkRHcEJBQ0FCS0FJRVFZamdBVVliQ3hFQUlBQkJER29pQUNBQUtBSUFFUG9GQzJvQkFYOUI3UDBERU40Q1FlejlBeWdDQUFSQVFlejlBeWdDQUNFQlFmRDlBeWdDQUNFQUEwQWdBQ0FCUndSQVFlejlBeEEwR2lBQVFRaHJJZ0FRendFTUFRc0xRZkQ5QXlBQk5nSUFRZXo5QXhBMEdrSHMvUU1vQWdBaEFFSHMvUU1RMFFFYUlBQVFNd3NMQ1FBZ0FFRUVhaEErQ3drQUlBQVFvUVlRTXdzSkFDQUFFSU1FRURNTENRQWdBQkNFQkJBekMzTUJCSDhnQUNBQUtBSUFRUXhyS0FJQWFrRUtFUG9HSVFJakFFRVFheUlCSkFBQ1FDQUJRUWhxSUFBUTh3SWlBeTBBQUVVTkFDQUJJQUFRc3dRaUJDQUNFTUlESUFRUTZ3SkZEUUFnQUNBQUtBSUFRUXhyS0FJQWFrRUJFTDRDQ3lBREVNUUNJQUZCRUdva0FDQUFFUFFDSUFBTEJ3QWdBQ2dDQ0FzSEFDQUFLQUlFQ3lVQUlBRWdBaUFESUFRZ0JTQUdyU0FIclVJZ2hvUWdDSzBnQ2ExQ0lJYUVJQUFSSFFBTEl3QWdBU0FDSUFNZ0JDQUZyU0FHclVJZ2hvUWdCNjBnQ0sxQ0lJYUVJQUFSSGdBTEdRQWdBU0FDSUFNZ0JDQUZyU0FHclVJZ2hvUWdBQkVWQUFzWkFDQUJJQUlnQTYwZ0JLMUNJSWFFSUFVZ0JpQUFFU0VBQ3lJQkFYNGdBU0FDclNBRHJVSWdob1FnQkNBQUVSTUFJZ1ZDSUlpbkVBSWdCYWNMQmdBZ0FDUUFDd1FBSXdBTEhBQWdBQ0FCS0FJSUlBVVFnUUVFUUNBQklBSWdBeUFFRUtVRUN3czVBQ0FBSUFFb0FnZ2dCUkNCQVFSQUlBRWdBaUFESUFRUXBRUVBDeUFBS0FJSUlnQWdBU0FDSUFNZ0JDQUZJQUFvQWdBb0FoUVJDd0FMbHdJQkJuOGdBQ0FCS0FJSUlBVVFnUUVFUUNBQklBSWdBeUFFRUtVRUR3c2dBUzBBTlNFSElBQW9BZ3doQmlBQlFRQTZBRFVnQVMwQU5DRUlJQUZCQURvQU5DQUFRUkJxSWdrZ0FTQUNJQU1nQkNBRkVLTUVJQWNnQVMwQU5TSUtjaUVISUFnZ0FTMEFOQ0lMY2lFSUFrQWdCa0VDU0EwQUlBa2dCa0VEZEdvaENTQUFRUmhxSVFZRFFDQUJMUUEyRFFFQ1FDQUxCRUFnQVNnQ0dFRUJSZzBESUFBdEFBaEJBbkVOQVF3REN5QUtSUTBBSUFBdEFBaEJBWEZGRFFJTElBRkJBRHNCTkNBR0lBRWdBaUFESUFRZ0JSQ2pCQ0FCTFFBMUlnb2dCM0loQnlBQkxRQTBJZ3NnQ0hJaENDQUdRUWhxSWdZZ0NVa05BQXNMSUFFZ0IwSC9BWEZCQUVjNkFEVWdBU0FJUWY4QmNVRUFSem9BTkF1VUFRQWdBQ0FCS0FJSUlBUVFnUUVFUUNBQklBSWdBeENrQkE4TEFrQWdBQ0FCS0FJQUlBUVFnUUZGRFFBQ1FDQUNJQUVvQWhCSEJFQWdBU2dDRkNBQ1J3MEJDeUFEUVFGSERRRWdBVUVCTmdJZ0R3c2dBU0FDTmdJVUlBRWdBellDSUNBQklBRW9BaWhCQVdvMkFpZ0NRQ0FCS0FJa1FRRkhEUUFnQVNnQ0dFRUNSdzBBSUFGQkFUb0FOZ3NnQVVFRU5nSXNDd3YxQVFBZ0FDQUJLQUlJSUFRUWdRRUVRQ0FCSUFJZ0F4Q2tCQThMQWtBZ0FDQUJLQUlBSUFRUWdRRUVRQUpBSUFJZ0FTZ0NFRWNFUUNBQktBSVVJQUpIRFFFTElBTkJBVWNOQWlBQlFRRTJBaUFQQ3lBQklBTTJBaUFDUUNBQktBSXNRUVJHRFFBZ0FVRUFPd0UwSUFBb0FnZ2lBQ0FCSUFJZ0FrRUJJQVFnQUNnQ0FDZ0NGQkVMQUNBQkxRQTFCRUFnQVVFRE5nSXNJQUV0QURSRkRRRU1Bd3NnQVVFRU5nSXNDeUFCSUFJMkFoUWdBU0FCS0FJb1FRRnFOZ0lvSUFFb0FpUkJBVWNOQVNBQktBSVlRUUpIRFFFZ0FVRUJPZ0EyRHdzZ0FDZ0NDQ0lBSUFFZ0FpQURJQVFnQUNnQ0FDZ0NHQkVGQUFzTHB3UUJCSDhnQUNBQktBSUlJQVFRZ1FFRVFDQUJJQUlnQXhDa0JBOExBa0FnQUNBQktBSUFJQVFRZ1FFRVFBSkFJQUlnQVNnQ0VFY0VRQ0FCS0FJVUlBSkhEUUVMSUFOQkFVY05BaUFCUVFFMkFpQVBDeUFCSUFNMkFpQWdBU2dDTEVFRVJ3UkFJQUJCRUdvaUJTQUFLQUlNUVFOMGFpRUlJQUVDZndKQUEwQUNRQ0FGSUFoUERRQWdBVUVBT3dFMElBVWdBU0FDSUFKQkFTQUVFS01FSUFFdEFEWU5BQUpBSUFFdEFEVkZEUUFnQVMwQU5BUkFRUUVoQXlBQktBSVlRUUZHRFFSQkFTRUhRUUVoQmlBQUxRQUlRUUp4RFFFTUJBdEJBU0VISUFZaEF5QUFMUUFJUVFGeFJRMERDeUFGUVFocUlRVU1BUXNMSUFZaEEwRUVJQWRGRFFFYUMwRURDellDTENBRFFRRnhEUUlMSUFFZ0FqWUNGQ0FCSUFFb0FpaEJBV28yQWlnZ0FTZ0NKRUVCUncwQklBRW9BaGhCQWtjTkFTQUJRUUU2QURZUEN5QUFLQUlNSVFZZ0FFRVFhaUlGSUFFZ0FpQURJQVFRc1FNZ0JrRUNTQTBBSUFVZ0JrRURkR29oQmlBQVFSaHFJUVVDUUNBQUtBSUlJZ0JCQW5GRkJFQWdBU2dDSkVFQlJ3MEJDd05BSUFFdEFEWU5BaUFGSUFFZ0FpQURJQVFRc1FNZ0JVRUlhaUlGSUFaSkRRQUxEQUVMSUFCQkFYRkZCRUFEUUNBQkxRQTJEUUlnQVNnQ0pFRUJSZzBDSUFVZ0FTQUNJQU1nQkJDeEF5QUZRUWhxSWdVZ0Jra05BQXdDQ3dBTEEwQWdBUzBBTmcwQklBRW9BaVJCQVVZRVFDQUJLQUlZUVFGR0RRSUxJQVVnQVNBQ0lBTWdCQkN4QXlBRlFRaHFJZ1VnQmtrTkFBc0xDK1FGQVFSL0l3QkJRR29pQkNRQUFrQWdBVUdRNkFOQkFCQ0JBUVJBSUFKQkFEWUNBRUVCSVFNTUFRc0Nmd0pBSUFBZ0FTQUFMUUFJUVJoeEJIOUJBUVVnQVVVTkFTQUJRYVRsQTBHRTVnTVFzZ0VpQmtVTkFTQUdMUUFJUVJoeFFRQkhDeENCQVNFRkN5QUZDd1JBUVFFaEF5QUNLQUlBSWdCRkRRRWdBaUFBS0FJQU5nSUFEQUVMQWtBZ0FVVU5BQ0FCUWFUbEEwRzA1Z01Rc2dFaUJVVU5BU0FDS0FJQUlnRUVRQ0FDSUFFb0FnQTJBZ0FMSUFVb0FnZ2lBU0FBS0FJSUlnWkJmM054UVFkeElBRkJmM01nQm5GQjRBQnhjZzBCUVFFaEF5QUFLQUlNSUFVb0FneEJBQkNCQVEwQklBQW9BZ3hCaE9nRFFRQVFnUUVFUUNBRktBSU1JZ0JGRFFJZ0FFR2s1UU5CNk9ZREVMSUJSU0VEREFJTElBQW9BZ3dpQVVVTkFFRUFJUU1nQVVHazVRTkJ0T1lERUxJQklnRUVRQ0FBTFFBSVFRRnhSUTBDQW44Z0FTRUFJQVVvQWd3aEFnSkFBMEJCQUNBQ1JRMENHaUFDUWFUbEEwRzA1Z01Rc2dFaUFrVU5BU0FDS0FJSUlBQW9BZ2hCZjNOeERRRkJBU0FBS0FJTUlBSW9BZ3hCQUJDQkFRMENHaUFBTFFBSVFRRnhSUTBCSUFBb0Fnd2lBVVVOQVNBQlFhVGxBMEcwNWdNUXNnRWlBUVJBSUFJb0Fnd2hBaUFCSVFBTUFRc0xJQUFvQWd3aUFFVU5BQ0FBUWFUbEEwR2s1d01Rc2dFaUFFVU5BQ0FBSUFJb0Fnd1E0Z1loQXdzZ0F3c2hBd3dDQ3lBQUtBSU1JZ0ZGRFFFZ0FVR2s1UU5CcE9jREVMSUJJZ0VFUUNBQUxRQUlRUUZ4UlEwQ0lBRWdCU2dDREJEaUJpRUREQUlMSUFBb0Fnd2lBRVVOQVNBQVFhVGxBMEhVNVFNUXNnRWlBVVVOQVNBRktBSU1JZ0JGRFFFZ0FFR2s1UU5CMU9VREVMSUJJZ0JGRFFFZ0JFRUlha0VFY2tFQVFUUVFPeG9nQkVFQk5nSTRJQVJCZnpZQ0ZDQUVJQUUyQWhBZ0JDQUFOZ0lJSUFBZ0JFRUlhaUFDS0FJQVFRRWdBQ2dDQUNnQ0hCRUhBQUpBSUFRb0FpQWlBRUVCUncwQUlBSW9BZ0JGRFFBZ0FpQUVLQUlZTmdJQUN5QUFRUUZHSVFNTUFRdEJBQ0VEQ3lBRVFVQnJKQUFnQXd0d0FRSi9JQUFnQVNnQ0NFRUFFSUVCQkVBZ0FTQUNJQU1RcGdRUEN5QUFLQUlNSVFRZ0FFRVFhaUlGSUFFZ0FpQURFT01HQWtBZ0JFRUNTQTBBSUFVZ0JFRURkR29oQkNBQVFSaHFJUUFEUUNBQUlBRWdBaUFERU9NR0lBRXRBRFlOQVNBQVFRaHFJZ0FnQkVrTkFBc0xDek1BSUFBZ0FTZ0NDRUVBRUlFQkJFQWdBU0FDSUFNUXBnUVBDeUFBS0FJSUlnQWdBU0FDSUFNZ0FDZ0NBQ2dDSEJFSEFBc2FBQ0FBSUFFb0FnaEJBQkNCQVFSQUlBRWdBaUFERUtZRUN3dW1BUUVCZnlNQVFVQnFJZ01rQUFKL1FRRWdBQ0FCUVFBUWdRRU5BQnBCQUNBQlJRMEFHa0VBSUFGQnBPVURRZFRsQXhDeUFTSUJSUTBBR2lBRFFRaHFRUVJ5UVFCQk5CQTdHaUFEUVFFMkFqZ2dBMEYvTmdJVUlBTWdBRFlDRUNBRElBRTJBZ2dnQVNBRFFRaHFJQUlvQWdCQkFTQUJLQUlBS0FJY0VRY0FJQU1vQWlBaUFFRUJSZ1JBSUFJZ0F5Z0NHRFlDQUFzZ0FFRUJSZ3NoQUNBRFFVQnJKQUFnQUFzTEFDQUFJQUZCQUJDQkFRc01BQ0FBRUtnRUdpQUFFRE1MQ1FBZ0FCQ29CQkF6Q3dZQVFjbmpBd3NEQUFBTENRQkJzSndFRURrYUN5OEFBa0JCdkp3RUxRQUFRUUZ4RFFCQnZKd0VFRzlGRFFCQnNKd0VRY1M0QXhDOEFrRzhuQVFRYmd0QnNKd0VDd2tBUWFDY0JCQTVHZ3N3QUFKQVFheWNCQzBBQUVFQmNRMEFRYXljQkJCdlJRMEFRYUNjQkVHNHVBTVFtd0VhUWF5Y0JCQnVDMEdnbkFRTENRQkJrSndFRURrYUN5OEFBa0JCbkp3RUxRQUFRUUZ4RFFCQm5Kd0VFRzlGRFFCQmtKd0VRZVMzQXhDOEFrR2NuQVFRYmd0QmtKd0VDd2tBUVlDY0JCQTVHZ3N3QUFKQVFZeWNCQzBBQUVFQmNRMEFRWXljQkJCdlJRMEFRWUNjQkVITXR3TVFtd0VhUVl5Y0JCQnVDMEdBbkFRTENRQkI4SnNFRURrYUN5OEFBa0JCL0pzRUxRQUFRUUZ4RFFCQi9Kc0VFRzlGRFFCQjhKc0VRYWkzQXhDOEFrSDhtd1FRYmd0QjhKc0VDd2tBUWVDYkJCQTVHZ3N3QUFKQVFleWJCQzBBQUVFQmNRMEFRZXliQkJCdlJRMEFRZUNiQkVHY3R3TVFtd0VhUWV5YkJCQnVDMEhnbXdRTENRQkIwSnNFRURrYUN5OEFBa0JCM0pzRUxRQUFRUUZ4RFFCQjNKc0VFRzlGRFFCQjBKc0VRZmkyQXhDOEFrSGNtd1FRYmd0QjBKc0VDd2tBUWNDYkJCQTVHZ3N3QUFKQVFjeWJCQzBBQUVFQmNRMEFRY3liQkJCdlJRMEFRY0NiQkVIc3RnTVFtd0VhUWN5YkJCQnVDMEhBbXdRTEd3QkJ1S1FFSVFBRFFDQUFRUXhyRURraUFFR2dwQVJIRFFBTEMzMEFBa0JCdkpzRUxRQUFRUUZ4RFFCQnZKc0VFRzlGRFFBQ1FFRzRwQVF0QUFCQkFYRU5BRUc0cEFRUWIwVU5BRUdncEFRaEFBTkFJQUFRUmtFTWFpSUFRYmlrQkVjTkFBdEJ1S1FFRUc0TFFhQ2tCRUc0NEFNUVVrR3NwQVJCeE9BREVGSkJ1SnNFUWFDa0JEWUNBRUc4bXdRUWJndEJ1SnNFS0FJQUN4c0FRWmlrQkNFQUEwQWdBRUVNYXhBNUlnQkJnS1FFUncwQUN3dDlBQUpBUWJTYkJDMEFBRUVCY1EwQVFiU2JCQkJ2UlEwQUFrQkJtS1FFTFFBQVFRRnhEUUJCbUtRRUVHOUZEUUJCZ0tRRUlRQURRQ0FBRUVaQkRHb2lBRUdZcEFSSERRQUxRWmlrQkJCdUMwR0FwQVJCc09BREVGTkJqS1FFUWJQZ0F4QlRRYkNiQkVHQXBBUTJBZ0JCdEpzRUVHNExRYkNiQkNnQ0FBc2JBRUh3b3dRaEFBTkFJQUJCREdzUU9TSUFRZENoQkVjTkFBc0wyUUlBQWtCQnJKc0VMUUFBUVFGeERRQkJySnNFRUc5RkRRQUNRRUh3b3dRdEFBQkJBWEVOQUVId293UVFiMFVOQUVIUW9RUWhBQU5BSUFBUVJrRU1haUlBUWZDakJFY05BQXRCOEtNRUVHNExRZENoQkVHbzNBTVFVa0hjb1FSQnlOd0RFRkpCNktFRVFlemNBeEJTUWZTaEJFR0UzUU1RVWtHQW9nUkJuTjBERUZKQmpLSUVRYXpkQXhCU1FaaWlCRUhBM1FNUVVrR2tvZ1JCMU4wREVGSkJzS0lFUWZEZEF4QlNRYnlpQkVHWTNnTVFVa0hJb2dSQnVONERFRkpCMUtJRVFkemVBeEJTUWVDaUJFR0Ezd01RVWtIc29nUkJrTjhERUZKQitLSUVRYURmQXhCU1FZU2pCRUd3M3dNUVVrR1Fvd1JCbk4wREVGSkJuS01FUWNEZkF4QlNRYWlqQkVIUTN3TVFVa0cwb3dSQjROOERFRkpCd0tNRVFmRGZBeEJTUWN5akJFR0E0QU1RVWtIWW93UkJrT0FERUZKQjVLTUVRYURnQXhCU1FhaWJCRUhRb1FRMkFnQkJySnNFRUc0TFFhaWJCQ2dDQUFzYkFFSEFvUVFoQUFOQUlBQkJER3NRT1NJQVFhQ2ZCRWNOQUFzTDJRSUFBa0JCcEpzRUxRQUFRUUZ4RFFCQnBKc0VFRzlGRFFBQ1FFSEFvUVF0QUFCQkFYRU5BRUhBb1FRUWIwVU5BRUdnbndRaEFBTkFJQUFRUmtFTWFpSUFRY0NoQkVjTkFBdEJ3S0VFRUc0TFFhQ2ZCRUdrMndNUVUwR3Nud1JCck5zREVGTkJ1SjhFUWJYYkF4QlRRY1NmQkVHNzJ3TVFVMEhRbndSQndkc0RFRk5CM0o4RVFjWGJBeEJUUWVpZkJFSEsyd01RVTBIMG53UkJ6OXNERUZOQmdLQUVRZGJiQXhCVFFZeWdCRUhnMndNUVUwR1lvQVJCNk5zREVGTkJwS0FFUWZIYkF4QlRRYkNnQkVINjJ3TVFVMEc4b0FSQi90c0RFRk5CeUtBRVFZTGNBeEJUUWRTZ0JFR0czQU1RVTBIZ29BUkJ3ZHNERUZOQjdLQUVRWXJjQXhCVFFmaWdCRUdPM0FNUVUwR0VvUVJCa3R3REVGTkJrS0VFUVpiY0F4QlRRWnloQkVHYTNBTVFVMEdvb1FSQm50d0RFRk5CdEtFRVFhTGNBeEJUUWFDYkJFR2dud1EyQWdCQnBKc0VFRzRMUWFDYkJDZ0NBQXNiQUVHWW53UWhBQU5BSUFCQkRHc1FPU0lBUWZDZEJFY05BQXNMOVFFQUFrQkJuSnNFTFFBQVFRRnhEUUJCbkpzRUVHOUZEUUFDUUVHWW53UXRBQUJCQVhFTkFFR1lud1FRYjBVTkFFSHduUVFoQUFOQUlBQVFSa0VNYWlJQVFaaWZCRWNOQUF0Qm1KOEVFRzRMUWZDZEJFSFEyQU1RVWtIOG5RUkI3TmdERUZKQmlKNEVRWWpaQXhCU1FaU2VCRUdvMlFNUVVrR2duZ1JCME5rREVGSkJySjRFUWZUWkF4QlNRYmllQkVHUTJnTVFVa0hFbmdSQnROb0RFRkpCMEo0RVFjVGFBeEJTUWR5ZUJFSFUyZ01RVWtIb25nUkI1Tm9ERUZKQjlKNEVRZlRhQXhCU1FZQ2ZCRUdFMndNUVVrR01ud1JCbE5zREVGSkJtSnNFUWZDZEJEWUNBRUdjbXdRUWJndEJtSnNFS0FJQUN4c0FRZWlkQkNFQUEwQWdBRUVNYXhBNUlnQkJ3SndFUncwQUN3djFBUUFDUUVHVW13UXRBQUJCQVhFTkFFR1Vtd1FRYjBVTkFBSkFRZWlkQkMwQUFFRUJjUTBBUWVpZEJCQnZSUTBBUWNDY0JDRUFBMEFnQUJCR1FReHFJZ0JCNkowRVJ3MEFDMEhvblFRUWJndEJ3SndFUWZqWEF4QlRRY3ljQkVILzF3TVFVMEhZbkFSQmh0Z0RFRk5CNUp3RVFZN1lBeEJUUWZDY0JFR1kyQU1RVTBIOG5BUkJvZGdERUZOQmlKMEVRYWpZQXhCVFFaU2RCRUd4MkFNUVUwR2duUVJCdGRnREVGTkJySjBFUWJuWUF4QlRRYmlkQkVHOTJBTVFVMEhFblFSQndkZ0RFRk5CMEowRVFjWFlBeEJUUWR5ZEJFSEoyQU1RVTBHUW13UkJ3SndFTmdJQVFaU2JCQkJ1QzBHUW13UW9BZ0FMQ3dBZ0FFSFV0Z01RdkFJTERBQWdBRUhNdGdNUW13RWFDd3NBSUFCQnVMWURFTHdDQ3d3QUlBQkJzTFlERUpzQkdnc01BQ0FBSUFGQkVHb1E1d0lMREFBZ0FDQUJRUXhxRU9jQ0N3Y0FJQUFzQUFrTEJ3QWdBQ3dBQ0FzSkFDQUFFUFVHRURNTENRQWdBQkQyQmhBekMrSURBUVIvSUFJaEFBTkFBa0FnQkNBSFRTQUFJQU5QY2cwQUlBQXNBQUFpQlVIL0FYRWhBUUovSUFWQkFFNEVRQ0FCUWYvL3d3QkxEUUlnQUVFQmFnd0JDeUFCUWNJQlNRMEJJQUZCM3dGTkJFQWdBeUFBYTBFQ1NBMENJQUF0QUFFaUJVSEFBWEZCZ0FGSElBVkJQM0VnQVVFR2RFSEFEM0Z5UWYvL3d3QkxjZzBDSUFCQkFtb01BUXNDUUFKQUlBRkI3d0ZOQkVBZ0F5QUFhMEVEU0EwRUlBQXRBQUloQmlBQUxRQUJJUVVnQVVIdEFVWU5BU0FCUWVBQlJnUkFJQVZCNEFGeFFhQUJSZzBEREFVTElBVkJ3QUZ4UVlBQlJ3MEVEQUlMSUFNZ0FHdEJCRWdnQVVIMEFVdHlEUU1nQUMwQUF5RUdJQUF0QUFJaENDQUFMUUFCSVFVQ1FBSkFBa0FDUUNBQlFmQUJhdzRGQUFJQ0FnRUNDeUFGUWZBQWFrSC9BWEZCTUVrTkFnd0dDeUFGUWZBQmNVR0FBVVlOQVF3RkN5QUZRY0FCY1VHQUFVY05CQXNnQ0VIQUFYRkJnQUZISUFaQndBRnhRWUFCUjNJZ0JrRS9jU0FJUVFaMFFjQWZjU0FCUVJKMFFZQ0E4QUJ4SUFWQlAzRkJESFJ5Y25KQi8vL0RBRXR5RFFNZ0FFRUVhZ3dDQ3lBRlFlQUJjVUdBQVVjTkFnc2dCa0hBQVhGQmdBRkhJQVpCUDNFZ0FVRU1kRUdBNEFOeElBVkJQM0ZCQm5SeWNrSC8vOE1BUzNJTkFTQUFRUU5xQ3lFQUlBZEJBV29oQnd3QkN3c2dBQ0FDYXd2ZUJBRUVmeU1BUVJCcklnQWtBQ0FBSUFJMkFnd2dBQ0FGTmdJSUFuOGdBQ0FDTmdJTUlBQWdCVFlDQ0FKQUFrQURRQ0FBS0FJTUlnRWdBMDhnQlNBR1QzSkZCRUFnQVN3QUFDSUlRZjhCY1NFQ0FuOGdDRUVBVGdSQVFRSWdBa0gvLzhNQVN3MEdHaUFCUVFGcURBRUxRUUloQ2lBQ1FjSUJTUTBESUFKQjN3Rk5CRUFnQXlBQmEwRUNTQTBGSUFFdEFBRWlDRUhBQVhGQmdBRkhEUVFnQ0VFL2NTQUNRUVowUWNBUGNYSWlBa0gvLzhNQVN3MEVJQUZCQW1vTUFRc2dBa0h2QVUwRVFDQURJQUZyUVFOSURRVWdBUzBBQWlFSklBRXRBQUVoQ0FKQUFrQWdBa0h0QVVjRVFDQUNRZUFCUncwQklBaEI0QUZ4UWFBQlJnMENEQWNMSUFoQjRBRnhRWUFCUmcwQkRBWUxJQWhCd0FGeFFZQUJSdzBGQ3lBSlFjQUJjVUdBQVVjTkJDQUpRVDl4SUFKQkRIUkJnT0FEY1NBSVFUOXhRUVowY25JaUFrSC8vOE1BU3cwRUlBRkJBMm9NQVFzZ0FrSDBBVXNOQXlBRElBRnJRUVJJRFFRZ0FTMEFBeUVKSUFFdEFBSWhDeUFCTFFBQklRZ0NRQUpBQWtBQ1FDQUNRZkFCYXc0RkFBSUNBZ0VDQ3lBSVFmQUFha0gvQVhGQk1Fa05BZ3dHQ3lBSVFmQUJjVUdBQVVZTkFRd0ZDeUFJUWNBQmNVR0FBVWNOQkFzZ0MwSEFBWEZCZ0FGSElBbEJ3QUZ4UVlBQlIzSU5BeUFKUVQ5eElBdEJCblJCd0I5eElBSkJFblJCZ0lEd0FIRWdDRUUvY1VFTWRISnljaUlDUWYvL3d3QkxEUU1nQVVFRWFnc2hBU0FGSUFJMkFnQWdBQ0FCTmdJTUlBQWdBQ2dDQ0VFRWFpSUZOZ0lJREFFTEN5QUJJQU5KSVFvTElBb01BUXRCQVFzaEFTQUVJQUFvQWd3MkFnQWdCeUFBS0FJSU5nSUFJQUJCRUdva0FDQUJDNDRFQUNNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dnQUNBRk5nSUlBbjhnQUNBQ05nSU1JQUFnQlRZQ0NDQUFLQUlNSVFFQ1FBTkFJQUVnQTA4RVFFRUFJUUlNQWd0QkFpRUNJQUVvQWdBaUFVR0FjSEZCZ0xBRFJpQUJRZi8vd3dCTGNnMEJBa0FDUUNBQlFmOEFUUVJBUVFFaEFpQUdJQUFvQWdnaUJXdEJBVWdOQkNBQUlBVkJBV28yQWdnZ0JTQUJPZ0FBREFFTElBRkIvdzlOQkVBZ0JpQUFLQUlJSWdKclFRSklEUUlnQUNBQ1FRRnFOZ0lJSUFJZ0FVRUdka0hBQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUJRVDl4UVlBQmNqb0FBQXdCQ3lBR0lBQW9BZ2dpQW1zaEJTQUJRZi8vQTAwRVFDQUZRUU5JRFFJZ0FDQUNRUUZxTmdJSUlBSWdBVUVNZGtIZ0FYSTZBQUFnQUNBQUtBSUlJZ0pCQVdvMkFnZ2dBaUFCUVFaMlFUOXhRWUFCY2pvQUFDQUFJQUFvQWdnaUFrRUJhallDQ0NBQ0lBRkJQM0ZCZ0FGeU9nQUFEQUVMSUFWQkJFZ05BU0FBSUFKQkFXbzJBZ2dnQWlBQlFSSjJRZkFCY2pvQUFDQUFJQUFvQWdnaUFrRUJhallDQ0NBQ0lBRkJESFpCUDNGQmdBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFR2RrRS9jVUdBQVhJNkFBQWdBQ0FBS0FJSUlnSkJBV28yQWdnZ0FpQUJRVDl4UVlBQmNqb0FBQXNnQUNBQUtBSU1RUVJxSWdFMkFnd01BUXNMUVFFTUFRc2dBZ3NoQVNBRUlBQW9BZ3cyQWdBZ0J5QUFLQUlJTmdJQUlBQkJFR29rQUNBQkMrNERBUVIvSUFJaEFBTkFBa0FnQkNBR1RTQUFJQU5QY2cwQUlBQXRBQUFpQVVILy84TUFTdzBBQW44Z0FFRUJhaUFCUVJoMFFSaDFRUUJPRFFBYUlBRkJ3Z0ZKRFFFZ0FVSGZBVTBFUUNBRElBQnJRUUpJRFFJZ0FDMEFBU0lGUWNBQmNVR0FBVWNnQlVFL2NTQUJRUVowUWNBUGNYSkIvLy9EQUV0eURRSWdBRUVDYWd3QkN3SkFBa0FnQVVIdkFVMEVRQ0FESUFCclFRTklEUVFnQUMwQUFpRUhJQUF0QUFFaEJTQUJRZTBCUmcwQklBRkI0QUZHQkVBZ0JVSGdBWEZCb0FGR0RRTU1CUXNnQlVIQUFYRkJnQUZIRFFRTUFnc2dBeUFBYTBFRVNDQUJRZlFCUzNJZ0JDQUdhMEVDU1hJTkF5QUFMUUFESVFjZ0FDMEFBaUVJSUFBdEFBRWhCUUpBQWtBQ1FBSkFJQUZCOEFGckRnVUFBZ0lDQVFJTElBVkI4QUJxUWY4QmNVRXdTUTBDREFZTElBVkI4QUZ4UVlBQlJnMEJEQVVMSUFWQndBRnhRWUFCUncwRUN5QUlRY0FCY1VHQUFVY2dCMEhBQVhGQmdBRkhjaUFIUVQ5eElBaEJCblJCd0I5eElBRkJFblJCZ0lEd0FIRWdCVUUvY1VFTWRISnlja0gvLzhNQVMzSU5BeUFHUVFGcUlRWWdBRUVFYWd3Q0N5QUZRZUFCY1VHQUFVY05BZ3NnQjBIQUFYRkJnQUZISUFkQlAzRWdBVUVNZEVHQTRBTnhJQVZCUDNGQkJuUnlja0gvLzhNQVMzSU5BU0FBUVFOcUN5RUFJQVpCQVdvaEJnd0JDd3NnQUNBQ2F3dk9CUUVFZnlNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dnQUNBRk5nSUlBbjhnQUNBQ05nSU1JQUFnQlRZQ0NBSkFBa0FDUUFOQUlBQW9BZ3dpQVNBRFR5QUZJQVpQY2tVRVFFRUNJUW9nQVMwQUFDSUNRZi8vd3dCTERRUWdBQUovSUFKQkdIUkJHSFZCQUU0RVFDQUZJQUk3QVFBZ0FVRUJhZ3dCQ3lBQ1FjSUJTUTBGSUFKQjN3Rk5CRUFnQXlBQmEwRUNTQTBGSUFFdEFBRWlDRUhBQVhGQmdBRkhEUVFnQ0VFL2NTQUNRUVowUWNBUGNYSWlBa0gvLzhNQVN3MEVJQVVnQWpzQkFDQUJRUUpxREFFTElBSkI3d0ZOQkVBZ0F5QUJhMEVEU0EwRklBRXRBQUloQ1NBQkxRQUJJUWdDUUFKQUlBSkI3UUZIQkVBZ0FrSGdBVWNOQVNBSVFlQUJjVUdnQVVZTkFnd0hDeUFJUWVBQmNVR0FBVVlOQVF3R0N5QUlRY0FCY1VHQUFVY05CUXNnQ1VIQUFYRkJnQUZIRFFRZ0NVRS9jU0FJUVQ5eFFRWjBJQUpCREhSeWNpSUNRZi8vQTNGQi8vL0RBRXNOQkNBRklBSTdBUUFnQVVFRGFnd0JDeUFDUWZRQlN3MEZRUUVoQ2lBRElBRnJRUVJJRFFNZ0FTMEFBeUVKSUFFdEFBSWhDQ0FCTFFBQklRRUNRQUpBQWtBQ1FDQUNRZkFCYXc0RkFBSUNBZ0VDQ3lBQlFmQUFha0gvQVhGQk1FOE5DQXdDQ3lBQlFmQUJjVUdBQVVjTkJ3d0JDeUFCUWNBQmNVR0FBVWNOQmdzZ0NFSEFBWEZCZ0FGSElBbEJ3QUZ4UVlBQlIzSU5CU0FHSUFWclFRUklEUU5CQWlFS0lBbEJQM0VpQ1NBSVFRWjBJZ3RCd0I5eElBRkJESFJCZ09BUGNTQUNRUWR4SWdKQkVuUnljbkpCLy8vREFFc05BeUFGSUFoQkJIWkJBM0VnQVVFQ2RDSUJRY0FCY1NBQ1FRaDBjaUFCUVR4eGNuSkJ3UDhBYWtHQXNBTnlPd0VBSUFBZ0JVRUNhallDQ0NBRklBdEJ3QWR4SUFseVFZQzRBM0k3QVFJZ0FDZ0NERUVFYWdzMkFnd2dBQ0FBS0FJSVFRSnFJZ1UyQWdnTUFRc0xJQUVnQTBraENnc2dDZ3dDQzBFQkRBRUxRUUlMSVFFZ0JDQUFLQUlNTmdJQUlBY2dBQ2dDQ0RZQ0FDQUFRUkJxSkFBZ0FRdjZCUUVCZnlNQVFSQnJJZ0FrQUNBQUlBSTJBZ3dnQUNBRk5nSUlBbjhnQUNBQ05nSU1JQUFnQlRZQ0NDQUFLQUlNSVFJQ1FBSkFBMEFnQWlBRFR3UkFRUUFoQlF3REMwRUNJUVVnQWk4QkFDSUJRZi8vd3dCTERRSUNRQUpBSUFGQi93Qk5CRUJCQVNFRklBWWdBQ2dDQ0NJQ2EwRUJTQTBGSUFBZ0FrRUJhallDQ0NBQ0lBRTZBQUFNQVFzZ0FVSC9EMDBFUUNBR0lBQW9BZ2dpQW10QkFrZ05CQ0FBSUFKQkFXbzJBZ2dnQWlBQlFRWjJRY0FCY2pvQUFDQUFJQUFvQWdnaUFrRUJhallDQ0NBQ0lBRkJQM0ZCZ0FGeU9nQUFEQUVMSUFGQi82OERUUVJBSUFZZ0FDZ0NDQ0lDYTBFRFNBMEVJQUFnQWtFQmFqWUNDQ0FDSUFGQkRIWkI0QUZ5T2dBQUlBQWdBQ2dDQ0NJQ1FRRnFOZ0lJSUFJZ0FVRUdka0UvY1VHQUFYSTZBQUFnQUNBQUtBSUlJZ0pCQVdvMkFnZ2dBaUFCUVQ5eFFZQUJjam9BQUF3QkN5QUJRZiszQTAwRVFFRUJJUVVnQXlBQ2EwRUVTQTBGSUFJdkFRSWlDRUdBK0FOeFFZQzRBMGNOQWlBR0lBQW9BZ2hyUVFSSURRVWdDRUgvQjNFZ0FVRUtkRUdBK0FOeElBRkJ3QWR4SWdWQkNuUnlja0dBZ0FScVFmLy93d0JMRFFJZ0FDQUNRUUpxTmdJTUlBQWdBQ2dDQ0NJQ1FRRnFOZ0lJSUFJZ0JVRUdka0VCYWlJQ1FRSjJRZkFCY2pvQUFDQUFJQUFvQWdnaUJVRUJhallDQ0NBRklBSkJCSFJCTUhFZ0FVRUNka0VQY1hKQmdBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQ0VFR2RrRVBjU0FCUVFSMFFUQnhja0dBQVhJNkFBQWdBQ0FBS0FJSUlnRkJBV28yQWdnZ0FTQUlRVDl4UVlBQmNqb0FBQXdCQ3lBQlFZREFBMGtOQkNBR0lBQW9BZ2dpQW10QkEwZ05BeUFBSUFKQkFXbzJBZ2dnQWlBQlFReDJRZUFCY2pvQUFDQUFJQUFvQWdnaUFrRUJhallDQ0NBQ0lBRkJCblpCUDNGQmdBRnlPZ0FBSUFBZ0FDZ0NDQ0lDUVFGcU5nSUlJQUlnQVVFL2NVR0FBWEk2QUFBTElBQWdBQ2dDREVFQ2FpSUNOZ0lNREFFTEMwRUNEQUlMUVFFTUFRc2dCUXNoQVNBRUlBQW9BZ3cyQWdBZ0J5QUFLQUlJTmdJQUlBQkJFR29rQUNBQkN4VUFJQUFvQWdnaUFFVUVRRUVCRHdzZ0FCRDNCZ3VTQVFFR2Z3TkFBa0FnQWlBRFJpQUVJQWhOY2cwQVFRRWhCeUFBS0FJSUlRVWpBRUVRYXlJR0pBQWdCaUFGTmdJTUlBWkJDR29nQmtFTWFoREJBU0VLUVFBZ0FpQURJQUpySUFGQmlKa0VJQUViRUlJRElRVWdDaERBQVNBR1FSQnFKQUFDUUFKQUlBVkJBbW9PQXdJQ0FRQUxJQVVoQndzZ0NFRUJhaUVJSUFjZ0NXb2hDU0FDSUFkcUlRSU1BUXNMSUFrTGFBRURmd0pBQW44Z0FDZ0NDQ0VDSXdCQkVHc2lBU1FBSUFFZ0FqWUNEQ0FCUVFocUlBRkJER29Rd1FFaEFpTUFRUkJySWdNa0FDQURRUkJxSkFBZ0FoREFBU0FCUVJCcUpBQkJBQXNFZjBGL0JTQUFLQUlJSWdBTkFVRUJDdzhMSUFBUTl3WkJBVVlMa2dFQkFYOGpBRUVRYXlJRkpBQWdCQ0FDTmdJQUFuOUJBaUFGUVF4cVFRQWdBQ2dDQ0JDdkJDSUFRUUZxUVFKSkRRQWFRUUVnQUVFQmF5SUJJQU1nQkNnQ0FHdExEUUFhSUFWQkRHb2hBZ04vSUFFRWZ5QUNMUUFBSVFBZ0JDQUVLQUlBSWdOQkFXbzJBZ0FnQXlBQU9nQUFJQUZCQVdzaEFTQUNRUUZxSVFJTUFRVkJBQXNMQ3lFQ0lBVkJFR29rQUNBQ0MrOEdBUXgvSXdCQkVHc2lFU1FBSUFJaENRTkFBa0FnQXlBSlJnUkFJQU1oQ1F3QkN5QUpMUUFBUlEwQUlBbEJBV29oQ1F3QkN3c2dCeUFGTmdJQUlBUWdBallDQUFOQUFrQUNmd0pBSUFJZ0EwWWdCU0FHUm5JTkFDQVJJQUVwQWdBM0F3Z0NRQUpBQWtBQ1FBSi9JQUFvQWdnaENDTUFRUkJySWhBa0FDQVFJQWcyQWd3Z0VFRUlhaUFRUVF4cUVNRUJJUk1nQ1NBQ2F5RU1Jd0JCa0FocklnMGtBQ0FOSUFRb0FnQWlEallDRENBRklBMUJFR29nQlJzaEQwRUFJUWdDUUFKQUFrQWdEa1VnQmlBRmEwRUNkVUdBQWlBRkd5SUxSWElOQUNBTVFRSjJJZ29nQzA4aEVpQU1RWU1CVFVFQUlBb2dDMGtiRFFFRFFDQU1JQXNnQ2lBU0d5SUtheUVNSUE4Z0RVRU1haUFLSUFFUXhnUWlDa0YvUmdSQVFRQWhDeUFOS0FJTUlRNUJmeUVJREFJTElBdEJBQ0FLSUE4Z0RVRVFha1lpRGh0cklRc2dEeUFQSUFwQkFuUnFJQTRiSVE4Z0NDQUthaUVJSUEwb0Fnd2lEa1VnQzBWeURRRWdERUVDZGlJS0lBdFBJUklnREVHREFVc2dDaUFMVDNJTkFBc01BUXNnRGtVTkFRc2dDMFVnREVWeURRQWdDQ0VLQTBBQ1FBSkFJQThnRGlBTUlBRVFnZ01pQ0VFQ2FrRUNUUVJBQWtBQ1FDQUlRUUZxRGdJR0FBRUxJQTFCQURZQ0RBd0NDeUFCUVFBMkFnQU1BUXNnRFNBTktBSU1JQWhxSWc0MkFnd2dDa0VCYWlFS0lBdEJBV3NpQ3cwQkN5QUtJUWdNQWdzZ0QwRUVhaUVQSUF3Z0NHc2hEQ0FLSVFnZ0RBMEFDd3NnQlFSQUlBUWdEU2dDRERZQ0FBc2dEVUdRQ0dva0FDQVRFTUFCSUJCQkVHb2tBQ0FJUVg5R0N3UkFBMEFDUUNBSElBVTJBZ0FnQWlBRUtBSUFSZzBBQW44Q1FBSkFBa0FnQlNBQ0lBa2dBbXNnRVVFSWFpQUFLQUlJRVBnR0lnRkJBbW9PQXdrQkFBSUxJQUpCQVdvTUFnc2dCQ0FDTmdJQURBVUxJQUVnQW1vTElRSWdCeWdDQUVFRWFpRUZEQUVMQ3lBRUlBSTJBZ0FNQlFzZ0J5QUhLQUlBSUFoQkFuUnFJZ1UyQWdBZ0JTQUdSZzBESUFRb0FnQWhBaUFESUFsR0JFQWdBeUVKREFnTElBVWdBa0VCSUFFZ0FDZ0NDQkQ0QmtVTkFRdEJBZ3dFQ3lBSElBY29BZ0JCQkdvMkFnQWdCQ0FFS0FJQVFRRnFJZ0kyQWdBZ0FpRUpBMEFnQXlBSlJnUkFJQU1oQ1F3R0N5QUpMUUFBUlEwRklBbEJBV29oQ1F3QUN3QUxJQVFnQWpZQ0FFRUJEQUlMSUFRb0FnQWhBZ3NnQWlBRFJ3c2hBQ0FSUVJCcUpBQWdBQThMSUFjb0FnQWhCUXdBQ3dBTGhRb0JFWDhqQUVFUWF5SVVKQUFnQWlFS0EwQUNRQ0FESUFwR0JFQWdBeUVLREFFTElBb29BZ0JGRFFBZ0NrRUVhaUVLREFFTEN5QUhJQVUyQWdBZ0JDQUNOZ0lBQTBBQ1FBSkFJQUlnQTBZZ0JTQUdSbklFZnlBQ0JTQVVJQUVwQWdBM0F3aEJBU0VXSUFBb0FnZ2hEU01BUVJCckloVWtBQ0FWSUEwMkFnd2dGVUVJYWlBVlFReHFFTUVCSVJnZ0NpQUNhMEVDZFNFUVFRQWhEU01BUVpBQ2F5SUxKQUFnQ3lBRUtBSUFJZ2cyQWd3Z0JTQUxRUkJxSUFVYklSTUNRQUpBQWtBZ0NFVWdCaUFGYTBHQUFpQUZHeUlSUlhJTkFDQVFJQkZQSWd3Z0VFRWdTM0pGRFFFRFFDQVFJQkVnRUNBTUd5SU1heUVRQW45QkFDRVNJd0JCRUdzaUZ5UUFBa0FDUUFKQUFrQWdFeUlJQkVBZ0RFRUVUdzBCSUF3aENRd0NDMEVBSVFnZ0N5Z0NEQ0lPS0FJQUlnbEZEUU1EUUNBSlFmOEFUUVIvSUFoQkFXb0ZRWDhoRWlBWFFReHFJQWtRZ2dJaURFRi9SZzBGSUFnZ0RHb0xJUWdnRGlnQ0JDRUpJQTVCQkdvaERpQUlJUklnQ1EwQUN3d0RDeUFMS0FJTUlRNGdEQ0VKQTBBQ2Z5QU9LQUlBSWc5QkFXdEIvd0JQQkVBZ0QwVUVRQ0FJUVFBNkFBQWdDMEVBTmdJTURBVUxRWDhoRWlBSUlBOFFnZ0lpRDBGL1JnMEZJQWtnRDJzaENTQUlJQTlxREFFTElBZ2dEem9BQUNBSlFRRnJJUWtnQ3lnQ0RDRU9JQWhCQVdvTElRZ2dDeUFPUVFScUlnNDJBZ3dnQ1VFRFN3MEFDd3NnQ1FSQUlBc29BZ3doRGdOQUFuOGdEaWdDQUNJUFFRRnJRZjhBVHdSQUlBOUZCRUFnQ0VFQU9nQUFJQXRCQURZQ0RBd0ZDMEYvSVJJZ0YwRU1haUFQRUlJQ0lnOUJmMFlOQlNBSklBOUpEUVFnQ0NBT0tBSUFFSUlDR2lBSklBOXJJUWtnQ0NBUGFnd0JDeUFJSUE4NkFBQWdDVUVCYXlFSklBc29BZ3doRGlBSVFRRnFDeUVJSUFzZ0RrRUVhaUlPTmdJTUlBa05BQXNMSUF3aEVnd0JDeUFNSUFscklSSUxJQmRCRUdva0FDQVNRWDlHQ3dSQVFRQWhFU0FMS0FJTUlRaEJmeUVOREFJTElCRkJBQ0FTSUJNZ0MwRVFha1lpREJ0cklSRWdFeUFTSUJOcUlBd2JJUk1nRFNBU2FpRU5JQXNvQWd3aUNFVWdFVVZ5RFFFZ0VDQVJUeUlNSUJCQklVOXlEUUFMREFFTElBaEZEUUVMSUJGRklCQkZjZzBBSUEwaERBTkFBa0FDUUNBVElBZ29BZ0FRZ2dJaUNVRUJha0VCVFFSQVFYOGhEU0FKRFFRZ0MwRUFOZ0lNREFFTElBc2dDeWdDREVFRWFpSUlOZ0lNSUFrZ0RHb2hEQ0FSSUFsckloRU5BUXNnRENFTkRBSUxJQWtnRTJvaEV5QU1JUTBnRUVFQmF5SVFEUUFMQ3lBRkJFQWdCQ0FMS0FJTU5nSUFDeUFMUVpBQ2FpUUFJQmdRd0FFZ0ZVRVFhaVFBQWtBQ1FBSkFBa0FDUUNBTlFRRnFEZ0lBQmdFTElBY2dCVFlDQUFOQUFrQWdBaUFFS0FJQVJnMEFJQVVnQWlnQ0FDQUFLQUlJRUs4RUlnRkJmMFlOQUNBSElBY29BZ0FnQVdvaUJUWUNBQ0FDUVFScUlRSU1BUXNMSUFRZ0FqWUNBQXdCQ3lBSElBY29BZ0FnRFdvaUJUWUNBQ0FGSUFaR0RRSWdBeUFLUmdSQUlBUW9BZ0FoQWlBRElRb01Cd3NnRkVFRWFrRUFJQUFvQWdnUXJ3UWlDa0YvUncwQkMwRUNJUllNQXdzZ0ZFRUVhaUVDSUFZZ0J5Z0NBR3NnQ2trTkFnTkFJQW9FUUNBQ0xRQUFJUVVnQnlBSEtBSUFJZzFCQVdvMkFnQWdEU0FGT2dBQUlBcEJBV3NoQ2lBQ1FRRnFJUUlNQVFzTElBUWdCQ2dDQUVFRWFpSUNOZ0lBSUFJaENnTkFJQU1nQ2tZRVFDQURJUW9NQlFzZ0NpZ0NBRVVOQkNBS1FRUnFJUW9NQUFzQUN5QUVLQUlBQ3lBRFJ5RVdDeUFVUVJCcUpBQWdGZzhMSUFjb0FnQWhCUXdBQ3dBTENRQWdBQkNEQnhBekN6Y0FJd0JCRUdzaUFDUUFJQUFnQkRZQ0RDQUFJQU1nQW1zMkFnZ2dBRUVNYWlBQVFRaHFFTW9CS0FJQUlRRWdBRUVRYWlRQUlBRUxOQUFEUUNBQklBSkdSUVJBSUFRZ0FTd0FBQ0lBSUFNZ0FFRi9TaHM2QUFBZ0JFRUJhaUVFSUFGQkFXb2hBUXdCQ3dzZ0Fnc01BQ0FCSUFJZ0FVRi9TaHNMS2dBRFFDQUJJQUpHUlFSQUlBTWdBUzBBQURvQUFDQURRUUZxSVFNZ0FVRUJhaUVCREFFTEN5QUNDMEFBQTBBZ0FTQUNSd1JBSUFFZ0FTd0FBQ0lBUVFCT0JIOUJ3S1lES0FJQUlBRXNBQUJCQW5ScUtBSUFCU0FBQ3pvQUFDQUJRUUZxSVFFTUFRc0xJQUlMSndBZ0FVRUFUZ1IvUWNDbUF5Z0NBQ0FCUWY4QmNVRUNkR29vQWdBRklBRUxRUmgwUVJoMUMwQUFBMEFnQVNBQ1J3UkFJQUVnQVN3QUFDSUFRUUJPQkg5QnNKb0RLQUlBSUFFc0FBQkJBblJxS0FJQUJTQUFDem9BQUNBQlFRRnFJUUVNQVFzTElBSUxKd0FnQVVFQVRnUi9RYkNhQXlnQ0FDQUJRZjhCY1VFQ2RHb29BZ0FGSUFFTFFSaDBRUmgxQ3drQUlBQVErd1lRTXdzMUFBTkFJQUVnQWtaRkJFQWdCQ0FCS0FJQUlnQWdBeUFBUVlBQlNSczZBQUFnQkVFQmFpRUVJQUZCQkdvaEFRd0JDd3NnQWdzVEFDQUJJQUlnQVVHQUFVa2JRUmgwUVJoMUN5b0FBMEFnQVNBQ1JrVUVRQ0FESUFFc0FBQTJBZ0FnQTBFRWFpRURJQUZCQVdvaEFRd0JDd3NnQWd0QkFBTkFJQUVnQWtjRVFDQUJJQUVvQWdBaUFFSC9BRTBFZjBIQXBnTW9BZ0FnQVNnQ0FFRUNkR29vQWdBRklBQUxOZ0lBSUFGQkJHb2hBUXdCQ3dzZ0Fnc2VBQ0FCUWY4QVRRUi9RY0NtQXlnQ0FDQUJRUUowYWlnQ0FBVWdBUXNMUVFBRFFDQUJJQUpIQkVBZ0FTQUJLQUlBSWdCQi93Qk5CSDlCc0pvREtBSUFJQUVvQWdCQkFuUnFLQUlBQlNBQUN6WUNBQ0FCUVFScUlRRU1BUXNMSUFJTEhnQWdBVUgvQUUwRWYwR3dtZ01vQWdBZ0FVRUNkR29vQWdBRklBRUxDMFVBQWtBRFFDQUNJQU5HRFFFQ1FDQUNLQUlBUWY4QVN3MEFRYXlVQXlnQ0FDQUNLQUlBUVFGMGFpOEJBQ0FCY1VVTkFDQUNRUVJxSVFJTUFRc0xJQUloQXdzZ0F3dEVBQU5BQWtBZ0FpQURSd1IvSUFJb0FnQkIvd0JMRFFGQnJKUURLQUlBSUFJb0FnQkJBWFJxTHdFQUlBRnhSUTBCSUFJRklBTUxEd3NnQWtFRWFpRUNEQUFMQUF0R0FBTkFJQUVnQWtjRVFDQURJQUVvQWdCQi93Qk5CSDlCckpRREtBSUFJQUVvQWdCQkFYUnFMd0VBQlVFQUN6c0JBQ0FEUVFKcUlRTWdBVUVFYWlFQkRBRUxDeUFDQ3lRQUlBSkIvd0JOQkg5QnJKUURLQUlBSUFKQkFYUnFMd0VBSUFGeFFRQkhCVUVBQ3d0QUFRSi9JQUFvQWdBb0FnQWlBQ2dDQUNBQUtBSUlJZ0pCQVhWcUlRRWdBQ2dDQkNFQUlBRWdBa0VCY1FSL0lBRW9BZ0FnQUdvb0FnQUZJQUFMRVFFQUN3OEFJQUFnQUNnQ0FDZ0NCQkVCQUFzZkFDQUFBbjlCekpvRVFjeWFCQ2dDQUVFQmFpSUFOZ0lBSUFBTE5nSUVDd2tBSUFBUS93WVFNd3REQUNNQVFSQnJJZ0VrQUFKQUlBVVFqQUZGQkVBZ0FDQUZLQUlJTmdJSUlBQWdCU2tDQURjQ0FBd0JDeUFBSUFVb0FnQWdCU2dDQkJEb0Jnc2dBVUVRYWlRQUN3a0FJQUFnQlJEbkFndVVBd0VJZnlNQVFmQURheUlBSkFBZ0FFSG9BMm9nQXhCSElBQkI2QU5xRUpZQklRb2dBZ0ovSUFVUU53UkFJQVZCQUJDN0F5Z0NBQ0FLUVMwUW9nRkdJUXNMSUFzTElBQkI2QU5xSUFCQjRBTnFJQUJCM0FOcUlBQkIyQU5xSUFCQnlBTnFFRVlpRENBQVFiZ0RhaEJHSWdZZ0FFR29BMm9RUmlJSElBQkJwQU5xRUlZSElBQkJ3UUkyQWhBZ0FFRUlha0VBSUFCQkVHb1FZeUVJSUFCQkVHb2hBZ0pBQW44Z0JSQTNJQUFvQXFRRFNnUkFJQVVRTnlFSklBQW9BcVFESVEwZ0J4QTNJQWtnRFd0QkFYUnFJQVlRTjJvZ0FDZ0NwQU5xUVFGcURBRUxJQWNRTnlBR0VEZHFJQUFvQXFRRGFrRUNhZ3NpQ1VIbEFFa05BQ0FJSUFsQkFuUVFPaEI1SUFnb0FnQWlBZzBBRUh3QUN5QUNJQUJCQkdvZ0FDQURLQUlFSUFVUVBpQUZFRDRnQlJBM1FRSjBhaUFLSUFzZ0FFSGdBMm9nQUNnQzNBTWdBQ2dDMkFNZ0RDQUdJQWNnQUNnQ3BBTVFoUWNnQVNBQ0lBQW9BZ1FnQUNnQ0FDQURJQVFRNXdFaEFTQUlFR0lnQnhBNUdpQUdFRGthSUF3UU9Sb2dBRUhvQTJvUVFpQUFRZkFEYWlRQUlBRUwzd1FCQzM4akFFR3dDR3NpQUNRQUlBQWdCVGNERUNBQUlBWTNBeGdnQUNBQVFjQUhhallDdkFjZ0FFSEFCMnBCNUFCQjM3UURJQUJCRUdvUTJBTWhCeUFBUWNFQ05nS2dCQ0FBUVpnRWFrRUFJQUJCb0FScUVHTWhEaUFBUWNFQ05nS2dCQ0FBUVpBRWFrRUFJQUJCb0FScUVHTWhDaUFBUWFBRWFpRUlBa0FnQjBIa0FFOEVRQkJVSVFjZ0FDQUZOd01BSUFBZ0JqY0RDQ0FBUWJ3SGFpQUhRZCswQXlBQUVOa0JJUWNnQUNnQ3ZBY2lDRVVOQVNBT0lBZ1FlU0FLSUFkQkFuUVFPaEI1SUFvUTZ3SU5BU0FLS0FJQUlRZ0xJQUJCaUFScUlBTVFSeUFBUVlnRWFoQ1dBU0lSSUFBb0Fyd0hJZ2tnQnlBSmFpQUlFT2dCSUFJQ2Z5QUhCRUFnQUNnQ3ZBY3RBQUJCTFVZaER3c2dEd3NnQUVHSUJHb2dBRUdBQkdvZ0FFSDhBMm9nQUVINEEyb2dBRUhvQTJvUVJpSVFJQUJCMkFOcUVFWWlDU0FBUWNnRGFoQkdJZ3NnQUVIRUEyb1FoZ2NnQUVIQkFqWUNNQ0FBUVNocVFRQWdBRUV3YWhCaklRd2dBRUV3YWlFQ0FuOGdBQ2dDeEFNaURTQUhTQVJBSUFzUU55QUhJQTFyUVFGMFFRRnlhaUFKRURkcUlBQW9Bc1FEYWd3QkN5QUxFRGNnQ1JBM2FpQUFLQUxFQTJwQkFtb0xJZzFCNVFCUEJFQWdEQ0FOUVFKMEVEb1FlU0FNS0FJQUlnSkZEUUVMSUFJZ0FFRWthaUFBUVNCcUlBTW9BZ1FnQ0NBSUlBZEJBblJxSUJFZ0R5QUFRWUFFYWlBQUtBTDhBeUFBS0FMNEF5QVFJQWtnQ3lBQUtBTEVBeENGQnlBQklBSWdBQ2dDSkNBQUtBSWdJQU1nQkJEbkFTRUJJQXdRWWlBTEVEa2FJQWtRT1JvZ0VCQTVHaUFBUVlnRWFoQkNJQW9RWWlBT0VHSWdBRUd3Q0dva0FDQUJEd3NRZkFBTGpBTUJDSDhqQUVIQUFXc2lBQ1FBSUFCQnVBRnFJQU1RUnlBQVFiZ0JhaENkQVNFS0lBSUNmeUFGRURjRVFDQUZRUUFRUHkwQUFDQUtRUzBRaGdGQi93RnhSaUVMQ3lBTEN5QUFRYmdCYWlBQVFiQUJhaUFBUWE4QmFpQUFRYTRCYWlBQVFhQUJhaEJHSWd3Z0FFR1FBV29RUmlJR0lBQkJnQUZxRUVZaUJ5QUFRZndBYWhDSUJ5QUFRY0VDTmdJUUlBQkJDR3BCQUNBQVFSQnFFR01oQ0NBQVFSQnFJUUlDUUFKL0lBVVFOeUFBS0FKOFNnUkFJQVVRTnlFSklBQW9BbndoRFNBSEVEY2dDU0FOYTBFQmRHb2dCaEEzYWlBQUtBSjhha0VCYWd3QkN5QUhFRGNnQmhBM2FpQUFLQUo4YWtFQ2Fnc2lDVUhsQUVrTkFDQUlJQWtRT2hCNUlBZ29BZ0FpQWcwQUVId0FDeUFDSUFCQkJHb2dBQ0FES0FJRUlBVVFQaUFGRUQ0Z0JSQTNhaUFLSUFzZ0FFR3dBV29nQUN3QXJ3RWdBQ3dBcmdFZ0RDQUdJQWNnQUNnQ2ZCQ0hCeUFCSUFJZ0FDZ0NCQ0FBS0FJQUlBTWdCQkRXQVNFQklBZ1FZaUFIRURrYUlBWVFPUm9nREJBNUdpQUFRYmdCYWhCQ0lBQkJ3QUZxSkFBZ0FRc0hBQ0FBS0FJTUM5WUVBUXQvSXdCQjBBTnJJZ0FrQUNBQUlBVTNBeEFnQUNBR053TVlJQUFnQUVIZ0FtbzJBdHdDSUFCQjRBSnFRZVFBUWQrMEF5QUFRUkJxRU5nRElRY2dBRUhCQWpZQzhBRWdBRUhvQVdwQkFDQUFRZkFCYWhCaklRNGdBRUhCQWpZQzhBRWdBRUhnQVdwQkFDQUFRZkFCYWhCaklRb2dBRUh3QVdvaENBSkFJQWRCNUFCUEJFQVFWQ0VISUFBZ0JUY0RBQ0FBSUFZM0F3Z2dBRUhjQW1vZ0IwSGZ0QU1nQUJEWkFTRUhJQUFvQXR3Q0lnaEZEUUVnRGlBSUVIa2dDaUFIRURvUWVTQUtFT3NDRFFFZ0NpZ0NBQ0VJQ3lBQVFkZ0JhaUFERUVjZ0FFSFlBV29RblFFaUVTQUFLQUxjQWlJSklBY2dDV29nQ0JEcEFTQUNBbjhnQndSQUlBQW9BdHdDTFFBQVFTMUdJUThMSUE4TElBQkIyQUZxSUFCQjBBRnFJQUJCendGcUlBQkJ6Z0ZxSUFCQndBRnFFRVlpRUNBQVFiQUJhaEJHSWdrZ0FFR2dBV29RUmlJTElBQkJuQUZxRUlnSElBQkJ3UUkyQWpBZ0FFRW9ha0VBSUFCQk1Hb1FZeUVNSUFCQk1Hb2hBZ0ovSUFBb0Fwd0JJZzBnQjBnRVFDQUxFRGNnQnlBTmEwRUJkRUVCY21vZ0NSQTNhaUFBS0FLY0FXb01BUXNnQ3hBM0lBa1FOMm9nQUNnQ25BRnFRUUpxQ3lJTlFlVUFUd1JBSUF3Z0RSQTZFSGtnRENnQ0FDSUNSUTBCQ3lBQ0lBQkJKR29nQUVFZ2FpQURLQUlFSUFnZ0J5QUlhaUFSSUE4Z0FFSFFBV29nQUN3QXp3RWdBQ3dBemdFZ0VDQUpJQXNnQUNnQ25BRVFod2NnQVNBQ0lBQW9BaVFnQUNnQ0lDQURJQVFRMWdFaEFTQU1FR0lnQ3hBNUdpQUpFRGthSUJBUU9Sb2dBRUhZQVdvUVFpQUtFR0lnRGhCaUlBQkIwQU5xSkFBZ0FROExFSHdBQzdZRkFRTi9Jd0JCd0FOcklnQWtBQ0FBSUFJMkFyQURJQUFnQVRZQ3VBTWdBRUhDQWpZQ0ZDQUFRUmhxSUFCQklHb2dBRUVVYWhCaklRa2dBRUVRYWlBRUVFY2dBRUVRYWhDV0FTRUhJQUJCQURvQUR5QUFRYmdEYWlBQ0lBTWdBRUVRYWlBRUtBSUVJQVVnQUVFUGFpQUhJQWtnQUVFVWFpQUFRYkFEYWhDTkJ3UkFJd0JCRUdzaUFTUUFBa0FnQmhDTUFRUkFJQVlvQWdBaEFpQUJRUUEyQWd3Z0FpQUJRUXhxRUlNQklBWkJBQkNlQVF3QkN5QUJRUUEyQWdnZ0JpQUJRUWhxRUlNQklBWkJBQkNyQVFzZ0FVRVFhaVFBSUFBdEFBOEVRQ0FHSUFkQkxSQ2lBUkNwQkFzZ0IwRXdFS0lCSVFFZ0NTZ0NBQ0VFSUFBb0FoUWlCMEVFYXlFQ0EwQUNRQ0FDSUFSTkRRQWdCQ2dDQUNBQlJ3MEFJQVJCQkdvaEJBd0JDd3NqQUVFUWF5SUJKQUFnQmhBM0lRSWdCaEN1QkNFREFrQWdCQ0FIRU04RElnaEZEUUFnQkNBR0VENGdCaEErSUFZUU4wRUNkR29RN1FZRVFBSi9Jd0JCRUdzaUFpUUFJQUVnQkNBSEVNSUVJQUpCRUdva0FDQUJDeEErSVFjZ0FSQTNJUUlqQUVFUWF5SUVKQUFDUUNBQ0lBWVFyZ1FpQ0NBR0VEY2lBMnROQkVBZ0FrVU5BU0FHRUQ0aUNDQURRUUowYWlBSElBSVEyZ0VnQmlBQ0lBTnFJZ0lRbUFJZ0JFRUFOZ0lNSUFnZ0FrRUNkR29nQkVFTWFoQ0RBUXdCQ3lBR0lBZ2dBaUFEYWlBSWF5QURJQU5CQUNBQ0lBY1E1d1lMSUFSQkVHb2tBQ0FCRURrYURBRUxJQWdnQXlBQ2Ewc0VRQ0FHSUFNZ0FpQUlhaUFEYXlBQ0lBSVE1Z1lMSUFZUVBpQUNRUUowYWlFREEwQWdCQ0FIUndSQUlBTWdCQkNEQVNBRVFRUnFJUVFnQTBFRWFpRUREQUVMQ3lBQlFRQTJBZ0FnQXlBQkVJTUJJQVlnQWlBSWFoQ1lBZ3NnQVVFUWFpUUFDeUFBUWJnRGFpQUFRYkFEYWhCNkJFQWdCU0FGS0FJQVFRSnlOZ0lBQ3lBQUtBSzRBeUVCSUFCQkVHb1FRaUFKRUdJZ0FFSEFBMm9rQUNBQkMrOERBUUYvSXdCQjhBUnJJZ0FrQUNBQUlBSTJBdUFFSUFBZ0FUWUM2QVFnQUVIQ0FqWUNFQ0FBUWNnQmFpQUFRZEFCYWlBQVFSQnFFR01oQVNBQVFjQUJhaUFFRUVjZ0FFSEFBV29RbGdFaEJ5QUFRUUE2QUw4QkFrQWdBRUhvQkdvZ0FpQURJQUJCd0FGcUlBUW9BZ1FnQlNBQVFiOEJhaUFISUFFZ0FFSEVBV29nQUVIZ0JHb1FqUWRGRFFBZ0FFSGJ0QU1vQUFBMkFMY0JJQUJCMUxRREtRQUFOd093QVNBSElBQkJzQUZxSUFCQnVnRnFJQUJCZ0FGcUVPZ0JJQUJCd1FJMkFoQWdBRUVJYWtFQUlBQkJFR29RWXlFRElBQkJFR29oQWdKQUlBQW9Bc1FCSUFFb0FnQnJRWWtEVGdSQUlBTWdBQ2dDeEFFZ0FTZ0NBR3RCQW5WQkFtb1FPaEI1SUFNb0FnQkZEUUVnQXlnQ0FDRUNDeUFBTFFDL0FRUkFJQUpCTFRvQUFDQUNRUUZxSVFJTElBRW9BZ0FoQkFOQUlBQW9Bc1FCSUFSTkJFQUNRQ0FDUVFBNkFBQWdBQ0FHTmdJQUlBQkJFR3BCMExRRElBQVE2Z0ZCQVVjTkFDQURFR0lNQkFzRklBSWdBRUd3QVdvZ0FFR0FBV29nQUVHb0FXb2dCQkMwQkNBQVFZQUJhbXRCQW5WcUxRQUFPZ0FBSUFKQkFXb2hBaUFFUVFScUlRUU1BUXNMRUh3QUN4QjhBQXNnQUVIb0JHb2dBRUhnQkdvUWVnUkFJQVVnQlNnQ0FFRUNjallDQUFzZ0FDZ0M2QVFoQWlBQVFjQUJhaEJDSUFFUVlpQUFRZkFFYWlRQUlBSUx5d1VCQkg4akFFR2dBV3NpQUNRQUlBQWdBallDa0FFZ0FDQUJOZ0tZQVNBQVFjSUNOZ0lVSUFCQkdHb2dBRUVnYWlBQVFSUnFFR01oQ2lBQVFSQnFJQVFRUnlBQVFSQnFFSjBCSVFjZ0FFRUFPZ0FQQWtBZ0FFR1lBV29nQWlBRElBQkJFR29nQkNnQ0JDQUZJQUJCRDJvZ0J5QUtJQUJCRkdvZ0FFR0VBV29RbFFkRkRRQWpBRUVRYXlJQkpBQUNRQ0FHRUl3QkJFQWdCaWdDQUNFQ0lBRkJBRG9BRHlBQ0lBRkJEMm9RbFFFZ0JrRUFFSjRCREFFTElBRkJBRG9BRGlBR0lBRkJEbW9RbFFFZ0JrRUFFS3NCQ3lBQlFSQnFKQUFnQUMwQUR3UkFJQVlnQjBFdEVJWUJFS29FQ3lBSFFUQVFoZ0VoQXlBS0tBSUFJZ1FnQUNnQ0ZDSUhRUUZySWdJZ0FpQUVTUnNoQVNBRFFmOEJjU0VEQTBBQ1FDQUNJQVJMQkVBZ0JDMEFBQ0FEUmcwQklBUWhBUXNqQUVFZ2F5SURKQUFnQmhBM0lRSWdCaEJQSVFRQ1FDQUJJQWNRcHdRaUNFVU5BQ0FCSUFZUVBpQUdFRDRnQmhBM2FoRHRCZ1JBQW44akFFRVFheUlDSkFBZ0EwRVFhaUlFSUFFZ0J4RGtCaUFDUVJCcUpBQWdCQXNRUGlFSUlBUVFOeUVCSXdCQkVHc2lCeVFBQWtBZ0FTQUdFRThpQ1NBR0VEY2lBbXROQkVBZ0FVVU5BU0FHRUQ0aUNTQUNhaUFJSUFFUTJ3RWdCaUFCSUFKcUlnRVFtQUlnQjBFQU9nQVBJQUVnQ1dvZ0IwRVBhaENWQVF3QkN5QUdJQWtnQVNBQ2FpQUpheUFDSUFKQkFDQUJJQWdRNmdZTElBZEJFR29rQUNBRUVEa2FEQUVMSUFnZ0JDQUNhMHNFUUNBR0lBUWdBaUFJYWlBRWF5QUNJQUlRcXdRTElBWVFQaUFDYWlFRUEwQWdBU0FIUndSQUlBUWdBUkNWQVNBQlFRRnFJUUVnQkVFQmFpRUVEQUVMQ3lBRFFRQTZBQThnQkNBRFFROXFFSlVCSUFZZ0FpQUlhaENZQWdzZ0EwRWdhaVFBREFJTElBUkJBV29oQkF3QUN3QUxJQUJCbUFGcUlBQkJrQUZxRUhzRVFDQUZJQVVvQWdCQkFuSTJBZ0FMSUFBb0FwZ0JJUUVnQUVFUWFoQkNJQW9RWWlBQVFhQUJhaVFBSUFFTDRRTUJBWDhqQUVHZ0Ftc2lBQ1FBSUFBZ0FqWUNrQUlnQUNBQk5nS1lBaUFBUWNJQ05nSVFJQUJCbUFGcUlBQkJvQUZxSUFCQkVHb1FZeUVCSUFCQmtBRnFJQVFRUnlBQVFaQUJhaENkQVNFSElBQkJBRG9BandFQ1FDQUFRWmdDYWlBQ0lBTWdBRUdRQVdvZ0JDZ0NCQ0FGSUFCQmp3RnFJQWNnQVNBQVFaUUJhaUFBUVlRQ2FoQ1ZCMFVOQUNBQVFkdTBBeWdBQURZQWh3RWdBRUhVdEFNcEFBQTNBNEFCSUFjZ0FFR0FBV29nQUVHS0FXb2dBRUgyQUdvUTZRRWdBRUhCQWpZQ0VDQUFRUWhxUVFBZ0FFRVFhaEJqSVFNZ0FFRVFhaUVDQWtBZ0FDZ0NsQUVnQVNnQ0FHdEI0d0JPQkVBZ0F5QUFLQUtVQVNBQktBSUFhMEVDYWhBNkVIa2dBeWdDQUVVTkFTQURLQUlBSVFJTElBQXRBSThCQkVBZ0FrRXRPZ0FBSUFKQkFXb2hBZ3NnQVNnQ0FDRUVBMEFnQUNnQ2xBRWdCRTBFUUFKQUlBSkJBRG9BQUNBQUlBWTJBZ0FnQUVFUWFrSFF0QU1nQUJEcUFVRUJSdzBBSUFNUVlnd0VDd1VnQWlBQVFmWUFhaUFBUVlBQmFpQUVFTHdESUFCcklBQnFMUUFLT2dBQUlBSkJBV29oQWlBRVFRRnFJUVFNQVFzTEVId0FDeEI4QUFzZ0FFR1lBbW9nQUVHUUFtb1Fld1JBSUFVZ0JTZ0NBRUVDY2pZQ0FBc2dBQ2dDbUFJaEFpQUFRWkFCYWhCQ0lBRVFZaUFBUWFBQ2FpUUFJQUlMcXdJQkFuOGpBRUdnQTJzaUFpUUFJQUlnQWtHZ0EybzJBZ3dqQUVHUUFXc2lBeVFBSUFNZ0EwR0VBV28yQWh3Z0FFRUlhaUFEUVNCcUlBTkJIR29nQkNBRklBWVFtUWNnQTBJQU53TVFJQU1nQTBFZ2FqWUNEQUovSUFKQkVHb2lCU0VHSUFVZ0FpZ0NEQkR2QkNFSElBQW9BZ2doQUNNQVFSQnJJZ1FrQUNBRUlBQTJBZ3dnQkVFSWFpQUVRUXhxRU1FQklRZ2dCaUFEUVF4cUlBY2dBMEVRYWhER0JDRUFJQWdRd0FFZ0JFRVFhaVFBSUFCQmYwWUxCRUFRZkFBTElBSWdCU0FBUVFKMGFqWUNEQ0FEUVpBQmFpUUFJQUpCRUdvaEF5QUNLQUlNSVFRakFFRVFheUlBSkFBZ0FDQUJOZ0lJQTBBZ0F5QUVSd1JBSUFCQkNHb2dBeWdDQUJET0JDQURRUVJxSVFNTUFRc0xJQUFvQWdnaEFTQUFRUkJxSkFBZ0FrR2dBMm9rQUNBQkM0WUJBQ01BUVlBQmF5SUNKQUFnQWlBQ1FmUUFhallDRENBQVFRaHFJQUpCRUdvZ0FrRU1haUFFSUFVZ0JoQ1pCeUFDUVJCcUlRTWdBaWdDRENFRUl3QkJFR3NpQUNRQUlBQWdBVFlDQ0FOQUlBTWdCRWNFUUNBQVFRaHFJQU1zQUFBUXdnTWdBMEVCYWlFRERBRUxDeUFBS0FJSUlRRWdBRUVRYWlRQUlBSkJnQUZxSkFBZ0FRdjlEQUVCZnlNQVFVQnFJZ2NrQUNBSElBRTJBamdnQkVFQU5nSUFJQWNnQXhCSElBY1FsZ0VoQ0NBSEVFSUNmd0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdCa0hCQUdzT09RQUJGd1FYQlJjR0J4Y1hGd29YRnhjWERnOFFGeGNYRXhVWEZ4Y1hGeGNYQUFFQ0F3TVhGd0VYQ0JjWENRc1hEQmNORndzWEZ4RVNGQllMSUFBZ0JVRVlhaUFIUVRocUlBSWdCQ0FJRUp3SERCZ0xJQUFnQlVFUWFpQUhRVGhxSUFJZ0JDQUlFSnNIREJjTElBQkJDR29nQUNnQ0NDZ0NEQkVBQUNFQklBY2dBQ0FIS0FJNElBSWdBeUFFSUFVZ0FSQStJQUVRUGlBQkVEZEJBblJxRU9VQk5nSTREQllMSUFkQk9Hb2dBaUFFSUFoQkFoRFhBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkJBVWh5SUFCQkgwcHlSUVJBSUFVZ0FEWUNEQXdCQ3lBRUlBRkJCSEkyQWdBTERCVUxJQWRCdUxNREtRTUFOd01ZSUFkQnNMTURLUU1BTndNUUlBZEJxTE1ES1FNQU53TUlJQWRCb0xNREtRTUFOd01BSUFjZ0FDQUJJQUlnQXlBRUlBVWdCeUFIUVNCcUVPVUJOZ0k0REJRTElBZEIyTE1ES1FNQU53TVlJQWRCMExNREtRTUFOd01RSUFkQnlMTURLUU1BTndNSUlBZEJ3TE1ES1FNQU53TUFJQWNnQUNBQklBSWdBeUFFSUFVZ0J5QUhRU0JxRU9VQk5nSTREQk1MSUFkQk9Hb2dBaUFFSUFoQkFoRFhBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkJGMHB5UlFSQUlBVWdBRFlDQ0F3QkN5QUVJQUZCQkhJMkFnQUxEQklMSUFkQk9Hb2dBaUFFSUFoQkFoRFhBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkJBVWh5SUFCQkRFcHlSUVJBSUFVZ0FEWUNDQXdCQ3lBRUlBRkJCSEkyQWdBTERCRUxJQWRCT0dvZ0FpQUVJQWhCQXhEWEFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQjdRSktja1VFUUNBRklBQTJBaHdNQVFzZ0JDQUJRUVJ5TmdJQUN3d1FDeUFIUVRocUlBSWdCQ0FJUVFJUTF3RWhBQUpBSUFRb0FnQWlBVUVFY1NBQVFReEtja1VFUUNBRklBQkJBV3MyQWhBTUFRc2dCQ0FCUVFSeU5nSUFDd3dQQ3lBSFFUaHFJQUlnQkNBSVFRSVExd0VoQUFKQUlBUW9BZ0FpQVVFRWNTQUFRVHRLY2tVRVFDQUZJQUEyQWdRTUFRc2dCQ0FCUVFSeU5nSUFDd3dPQ3lBSFFUaHFJUUFqQUVFUWF5SUJKQUFnQVNBQ05nSUlBMEFDUUNBQUlBRkJDR29RalFGRkRRQWdDRUdBd0FBZ0FCQm1FTFVCUlEwQUlBQVFkUm9NQVFzTElBQWdBVUVJYWhCNkJFQWdCQ0FFS0FJQVFRSnlOZ0lBQ3lBQlFSQnFKQUFNRFFzZ0IwRTRhaUVCQWtBZ0FFRUlhaUFBS0FJSUtBSUlFUUFBSWdBUU4wRUFJQUJCREdvUU4ydEdCRUFnQkNBRUtBSUFRUVJ5TmdJQURBRUxJQUVnQWlBQUlBQkJHR29nQ0NBRVFRQVE3d0lnQUdzaUFTQUZLQUlJSWdCQkRFZHlSUVJBSUFWQkFEWUNDQXdCQ3lBQlFReEhJQUJCQzBweVJRUkFJQVVnQUVFTWFqWUNDQXNMREF3TElBZEI0TE1EUVN3UVFDSUdJQUFnQVNBQ0lBTWdCQ0FGSUFZZ0JrRXNhaERsQVRZQ09Bd0xDeUFIUWFDMEF5Z0NBRFlDRUNBSFFaaTBBeWtEQURjRENDQUhRWkMwQXlrREFEY0RBQ0FISUFBZ0FTQUNJQU1nQkNBRklBY2dCMEVVYWhEbEFUWUNPQXdLQ3lBSFFUaHFJQUlnQkNBSVFRSVExd0VoQUFKQUlBUW9BZ0FpQVVFRWNTQUFRVHhLY2tVRVFDQUZJQUEyQWdBTUFRc2dCQ0FCUVFSeU5nSUFDd3dKQ3lBSFFjaTBBeWtEQURjREdDQUhRY0MwQXlrREFEY0RFQ0FIUWJpMEF5a0RBRGNEQ0NBSFFiQzBBeWtEQURjREFDQUhJQUFnQVNBQ0lBTWdCQ0FGSUFjZ0IwRWdhaERsQVRZQ09Bd0lDeUFIUVRocUlBSWdCQ0FJUVFFUTF3RWhBQUpBSUFRb0FnQWlBVUVFY1NBQVFRWktja1VFUUNBRklBQTJBaGdNQVFzZ0JDQUJRUVJ5TmdJQUN3d0hDeUFBSUFFZ0FpQURJQVFnQlNBQUtBSUFLQUlVRVFnQURBY0xJQUJCQ0dvZ0FDZ0NDQ2dDR0JFQUFDRUJJQWNnQUNBSEtBSTRJQUlnQXlBRUlBVWdBUkErSUFFUVBpQUJFRGRCQW5ScUVPVUJOZ0k0REFVTElBVkJGR29nQjBFNGFpQUNJQVFnQ0JDYUJ3d0VDeUFIUVRocUlBSWdCQ0FJUVFRUTF3RWhBQ0FFTFFBQVFRUnhSUVJBSUFVZ0FFSHNEbXMyQWhRTERBTUxJQVpCSlVZTkFRc2dCQ0FFS0FJQVFRUnlOZ0lBREFFTEl3QkJFR3NpQUNRQUlBQWdBallDQ0VFR0lRRUNRQUpBSUFkQk9Hb2lBaUFBUVFocUVIb05BRUVFSVFFZ0NDQUNFR1lRd0FKQkpVY05BRUVDSVFFZ0FoQjFJQUJCQ0dvUWVrVU5BUXNnQkNBRUtBSUFJQUZ5TmdJQUN5QUFRUkJxSkFBTElBY29BamdMSVFBZ0IwRkFheVFBSUFBTFNBRUJmeU1BUVJCcklnWWtBQ0FHSUFFMkFnZ2dCaUFERUVjZ0JoQ1dBU0VCSUFZUVFpQUZRUlJxSUFaQkNHb2dBaUFFSUFFUW1nY2dCaWdDQ0NFQUlBWkJFR29rQUNBQUMwb0JBWDhqQUVFUWF5SUdKQUFnQmlBQk5nSUlJQVlnQXhCSElBWVFsZ0VoQVNBR0VFSWdBQ0FGUVJCcUlBWkJDR29nQWlBRUlBRVFtd2NnQmlnQ0NDRUFJQVpCRUdva0FDQUFDMG9CQVg4akFFRVFheUlHSkFBZ0JpQUJOZ0lJSUFZZ0F4QkhJQVlRbGdFaEFTQUdFRUlnQUNBRlFSaHFJQVpCQ0dvZ0FpQUVJQUVRbkFjZ0JpZ0NDQ0VBSUFaQkVHb2tBQ0FBQ3pFQUlBQWdBU0FDSUFNZ0JDQUZJQUJCQ0dvZ0FDZ0NDQ2dDRkJFQUFDSUFFRDRnQUJBK0lBQVFOMEVDZEdvUTVRRUxYZ0VCZnlNQVFTQnJJZ1lrQUNBR1FjaTBBeWtEQURjREdDQUdRY0MwQXlrREFEY0RFQ0FHUWJpMEF5a0RBRGNEQ0NBR1FiQzBBeWtEQURjREFDQUFJQUVnQWlBRElBUWdCU0FHSUFaQklHb1E1UUVoQUNBR1FTQnFKQUFnQUF1eERBRUJmeU1BUVNCcklnY2tBQ0FISUFFMkFoZ2dCRUVBTmdJQUlBZEJDR29nQXhCSElBZEJDR29RblFFaENDQUhRUWhxRUVJQ2Z3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0JrSEJBR3NPT1FBQkZ3UVhCUmNHQnhjWEZ3b1hGeGNYRGc4UUZ4Y1hFeFVYRnhjWEZ4Y1hBQUVDQXdNWEZ3RVhDQmNYQ1FzWERCY05Gd3NYRnhFU0ZCWUxJQUFnQlVFWWFpQUhRUmhxSUFJZ0JDQUlFS0FIREJnTElBQWdCVUVRYWlBSFFSaHFJQUlnQkNBSUVKOEhEQmNMSUFCQkNHb2dBQ2dDQ0NnQ0RCRUFBQ0VCSUFjZ0FDQUhLQUlZSUFJZ0F5QUVJQVVnQVJBK0lBRVFQaUFCRURkcUVPWUJOZ0lZREJZTElBZEJHR29nQWlBRUlBaEJBaERZQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCQVVoeUlBQkJIMHB5UlFSQUlBVWdBRFlDREF3QkN5QUVJQUZCQkhJMkFnQUxEQlVMSUFkQ3BkcTlxY0xzeTVMNUFEY0RDQ0FISUFBZ0FTQUNJQU1nQkNBRklBZEJDR29nQjBFUWFoRG1BVFlDR0F3VUN5QUhRcVd5dGFuU3JjdVM1QUEzQXdnZ0J5QUFJQUVnQWlBRElBUWdCU0FIUVFocUlBZEJFR29RNWdFMkFoZ01Fd3NnQjBFWWFpQUNJQVFnQ0VFQ0VOZ0JJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRVhTbkpGQkVBZ0JTQUFOZ0lJREFFTElBUWdBVUVFY2pZQ0FBc01FZ3NnQjBFWWFpQUNJQVFnQ0VFQ0VOZ0JJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRUJTSElnQUVFTVNuSkZCRUFnQlNBQU5nSUlEQUVMSUFRZ0FVRUVjallDQUFzTUVRc2dCMEVZYWlBQ0lBUWdDRUVERU5nQklRQUNRQ0FFS0FJQUlnRkJCSEVnQUVIdEFrcHlSUVJBSUFVZ0FEWUNIQXdCQ3lBRUlBRkJCSEkyQWdBTERCQUxJQWRCR0dvZ0FpQUVJQWhCQWhEWUFTRUFBa0FnQkNnQ0FDSUJRUVJ4SUFCQkRFcHlSUVJBSUFVZ0FFRUJhellDRUF3QkN5QUVJQUZCQkhJMkFnQUxEQThMSUFkQkdHb2dBaUFFSUFoQkFoRFlBU0VBQWtBZ0JDZ0NBQ0lCUVFSeElBQkJPMHB5UlFSQUlBVWdBRFlDQkF3QkN5QUVJQUZCQkhJMkFnQUxEQTRMSUFkQkdHb2hBQ01BUVJCcklnRWtBQ0FCSUFJMkFnZ0RRQUpBSUFBZ0FVRUlhaENPQVVVTkFDQUlRWURBQUNBQUVHY1F0d0ZGRFFBZ0FCQjJHZ3dCQ3dzZ0FDQUJRUWhxRUhzRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFGQkVHb2tBQXdOQ3lBSFFSaHFJUUVDUUNBQVFRaHFJQUFvQWdnb0FnZ1JBQUFpQUJBM1FRQWdBRUVNYWhBM2EwWUVRQ0FFSUFRb0FnQkJCSEkyQWdBTUFRc2dBU0FDSUFBZ0FFRVlhaUFJSUFSQkFCRHhBaUFBYXlJQklBVW9BZ2dpQUVFTVIzSkZCRUFnQlVFQU5nSUlEQUVMSUFGQkRFY2dBRUVMU25KRkJFQWdCU0FBUVF4cU5nSUlDd3NNREFzZ0IwR1Bzd01vQUFBMkFBOGdCMEdJc3dNcEFBQTNBd2dnQnlBQUlBRWdBaUFESUFRZ0JTQUhRUWhxSUFkQkUyb1E1Z0UyQWhnTUN3c2dCMEdYc3dNdEFBQTZBQXdnQjBHVHN3TW9BQUEyQWdnZ0J5QUFJQUVnQWlBRElBUWdCU0FIUVFocUlBZEJEV29RNWdFMkFoZ01DZ3NnQjBFWWFpQUNJQVFnQ0VFQ0VOZ0JJUUFDUUNBRUtBSUFJZ0ZCQkhFZ0FFRThTbkpGQkVBZ0JTQUFOZ0lBREFFTElBUWdBVUVFY2pZQ0FBc01DUXNnQjBLbGtPbXAwc25Pa3RNQU53TUlJQWNnQUNBQklBSWdBeUFFSUFVZ0IwRUlhaUFIUVJCcUVPWUJOZ0lZREFnTElBZEJHR29nQWlBRUlBaEJBUkRZQVNFQUFrQWdCQ2dDQUNJQlFRUnhJQUJCQmtweVJRUkFJQVVnQURZQ0dBd0JDeUFFSUFGQkJISTJBZ0FMREFjTElBQWdBU0FDSUFNZ0JDQUZJQUFvQWdBb0FoUVJDQUFNQndzZ0FFRUlhaUFBS0FJSUtBSVlFUUFBSVFFZ0J5QUFJQWNvQWhnZ0FpQURJQVFnQlNBQkVENGdBUkErSUFFUU4yb1E1Z0UyQWhnTUJRc2dCVUVVYWlBSFFSaHFJQUlnQkNBSUVKNEhEQVFMSUFkQkdHb2dBaUFFSUFoQkJCRFlBU0VBSUFRdEFBQkJCSEZGQkVBZ0JTQUFRZXdPYXpZQ0ZBc01Bd3NnQmtFbFJnMEJDeUFFSUFRb0FnQkJCSEkyQWdBTUFRc2pBRUVRYXlJQUpBQWdBQ0FDTmdJSVFRWWhBUUpBQWtBZ0IwRVlhaUlDSUFCQkNHb1FldzBBUVFRaEFTQUlJQUlRWnhEQkFrRWxSdzBBUVFJaEFTQUNFSFlnQUVFSWFoQjdSUTBCQ3lBRUlBUW9BZ0FnQVhJMkFnQUxJQUJCRUdva0FBc2dCeWdDR0FzaEFDQUhRU0JxSkFBZ0FBdElBUUYvSXdCQkVHc2lCaVFBSUFZZ0FUWUNDQ0FHSUFNUVJ5QUdFSjBCSVFFZ0JoQkNJQVZCRkdvZ0JrRUlhaUFDSUFRZ0FSQ2VCeUFHS0FJSUlRQWdCa0VRYWlRQUlBQUxTZ0VCZnlNQVFSQnJJZ1lrQUNBR0lBRTJBZ2dnQmlBREVFY2dCaENkQVNFQklBWVFRaUFBSUFWQkVHb2dCa0VJYWlBQ0lBUWdBUkNmQnlBR0tBSUlJUUFnQmtFUWFpUUFJQUFMU2dFQmZ5TUFRUkJySWdZa0FDQUdJQUUyQWdnZ0JpQURFRWNnQmhDZEFTRUJJQVlRUWlBQUlBVkJHR29nQmtFSWFpQUNJQVFnQVJDZ0J5QUdLQUlJSVFBZ0JrRVFhaVFBSUFBTExnQWdBQ0FCSUFJZ0F5QUVJQVVnQUVFSWFpQUFLQUlJS0FJVUVRQUFJZ0FRUGlBQUVENGdBQkEzYWhEbUFRdEJBUUYvSXdCQkVHc2lCaVFBSUFaQ3BaRHBxZExKenBMVEFEY0RDQ0FBSUFFZ0FpQURJQVFnQlNBR1FRaHFJQVpCRUdvUTVnRWhBQ0FHUVJCcUpBQWdBQXZLQVFFRGZ5TUFRZEFCYXlJQUpBQWdBRUdHc3dNdkFBQTdBY3dCSUFCQmdyTURLQUFBTmdMSUFSQlVJUVVnQUNBRU5nSUFJQUJCc0FGcUlBQkJzQUZxUVJRZ0JTQUFRY2dCYWlBQUVJc0JJZ1lnQUVHd0FXcHFJZ1FnQWhDc0FTRUZJQUJCRUdvZ0FoQkhJQUJCRUdvUWxnRWhCeUFBUVJCcUVFSWdCeUFBUWJBQmFpQUVJQUJCRUdvUTZBRWdBU0FBUVJCcUlBQkJFR29nQmtFQ2RHb2lBU0FGSUFCclFRSjBJQUJxUWJBRmF5QUVJQVZHR3lBQklBSWdBeERuQVNFQklBQkIwQUZxSkFBZ0FRdUxCQUVHZnlNQVFiQURheUlBSkFBZ0FFSWxOd09vQXlBQVFhZ0Rha0VCY2tINnNnTWdBaWdDQkJDNUF5RUhJQUFnQUVHQUEybzJBdndDRUZRaEJnSi9JQWNFUUNBQ0tBSUlJUWdnQUNBRk53TklJQUJCUUdzZ0JEY0RBQ0FBSUFnMkFqQWdBRUdBQTJwQkhpQUdJQUJCcUFOcUlBQkJNR29RaXdFTUFRc2dBQ0FFTndOUUlBQWdCVGNEV0NBQVFZQURha0VlSUFZZ0FFR29BMm9nQUVIUUFHb1Fpd0VMSVFZZ0FFSEJBallDZ0FFZ0FFSHdBbXBCQUNBQVFZQUJhaEJqSVFnQ1FDQUdRUjVPQkVBUVZDRUdBbjhnQndSQUlBSW9BZ2doQnlBQUlBVTNBeGdnQUNBRU53TVFJQUFnQnpZQ0FDQUFRZndDYWlBR0lBQkJxQU5xSUFBUTJRRU1BUXNnQUNBRU53TWdJQUFnQlRjREtDQUFRZndDYWlBR0lBQkJxQU5xSUFCQklHb1EyUUVMSVFZZ0FDZ0MvQUlpQjBVTkFTQUlJQWNRZVFzZ0FDZ0MvQUlpQnlBR0lBZHFJZ2tnQWhDc0FTRUtJQUJCd1FJMkFvQUJJQUJCK0FCcVFRQWdBRUdBQVdvUVl5RUhBbjhnQUNnQy9BSWdBRUdBQTJwR0JFQWdBRUdBQVdvaEJpQUFRWUFEYWd3QkN5QUdRUU4wRURvaUJrVU5BU0FISUFZUWVTQUFLQUw4QWdzaEN5QUFRZWdBYWlBQ0VFY2dDeUFLSUFrZ0JpQUFRZlFBYWlBQVFmQUFhaUFBUWVnQWFoQ2hCeUFBUWVnQWFoQkNJQUVnQmlBQUtBSjBJQUFvQW5BZ0FpQURFT2NCSVFFZ0J4QmlJQWdRWWlBQVFiQURhaVFBSUFFUEN4QjhBQXZsQXdFR2Z5TUFRWUFEYXlJQUpBQWdBRUlsTndQNEFpQUFRZmdDYWtFQmNrSDVzZ01nQWlnQ0JCQzVBeUVHSUFBZ0FFSFFBbW8yQXN3Q0VGUWhCUUovSUFZRVFDQUNLQUlJSVFjZ0FDQUVPUU1vSUFBZ0J6WUNJQ0FBUWRBQ2FrRWVJQVVnQUVINEFtb2dBRUVnYWhDTEFRd0JDeUFBSUFRNUF6QWdBRUhRQW1wQkhpQUZJQUJCK0FKcUlBQkJNR29RaXdFTElRVWdBRUhCQWpZQ1VDQUFRY0FDYWtFQUlBQkIwQUJxRUdNaEJ3SkFJQVZCSGs0RVFCQlVJUVVDZnlBR0JFQWdBaWdDQ0NFR0lBQWdCRGtEQ0NBQUlBWTJBZ0FnQUVITUFtb2dCU0FBUWZnQ2FpQUFFTmtCREFFTElBQWdCRGtERUNBQVFjd0NhaUFGSUFCQitBSnFJQUJCRUdvUTJRRUxJUVVnQUNnQ3pBSWlCa1VOQVNBSElBWVFlUXNnQUNnQ3pBSWlCaUFGSUFacUlnZ2dBaENzQVNFSklBQkJ3UUkyQWxBZ0FFSElBR3BCQUNBQVFkQUFhaEJqSVFZQ2Z5QUFLQUxNQWlBQVFkQUNha1lFUUNBQVFkQUFhaUVGSUFCQjBBSnFEQUVMSUFWQkEzUVFPaUlGUlEwQklBWWdCUkI1SUFBb0Fzd0NDeUVLSUFCQk9Hb2dBaEJISUFvZ0NTQUlJQVVnQUVIRUFHb2dBRUZBYXlBQVFUaHFFS0VISUFCQk9Hb1FRaUFCSUFVZ0FDZ0NSQ0FBS0FKQUlBSWdBeERuQVNFQklBWVFZaUFIRUdJZ0FFR0FBMm9rQUNBQkR3c1FmQUFMemdFQkJYOGpBRUVnYXlJQUpBQWdBRUlsTndNWUlBQkJHR3BCQVhKQjlySURRUUFnQWlnQ0JCRDhBU0FDS0FJRUlRVWdBRUVnYXlJR0lnZ2tBQkJVSVFjZ0FDQUVOd01BSUFZZ0JpQUZRUWwyUVFGeElnVkJGMm9nQnlBQVFSaHFJQUFRaXdFZ0Jtb2lCeUFDRUt3QklRa2dDQ0FGUVFOMFFic0Jha0h3QVhGcklnVWtBQ0FBUVFocUlBSVFSeUFHSUFrZ0J5QUZJQUJCRkdvZ0FFRVFhaUFBUVFocUVMY0RJQUJCQ0dvUVFpQUJJQVVnQUNnQ0ZDQUFLQUlRSUFJZ0F4RG5BU0VCSUFCQklHb2tBQ0FCQzlNQkFRUi9Jd0JCSUdzaUFDUUFJQUJCZ0xNREx3QUFPd0VjSUFCQi9MSURLQUFBTmdJWUlBQkJHR3BCQVhKQjlMSURRUUFnQWlnQ0JCRDhBU0FDS0FJRUlRWWdBRUVRYXlJRklnZ2tBQkJVSVFjZ0FDQUVOZ0lBSUFVZ0JTQUdRUWwyUVFGeFFReHlJQWNnQUVFWWFpQUFFSXNCSUFWcUlnWWdBaENzQVNFSElBaEI0QUJySWdRa0FDQUFRUWhxSUFJUVJ5QUZJQWNnQmlBRUlBQkJGR29nQUVFUWFpQUFRUWhxRUxjRElBQkJDR29RUWlBQklBUWdBQ2dDRkNBQUtBSVFJQUlnQXhEbkFTRUJJQUJCSUdva0FDQUJDODRCQVFWL0l3QkJJR3NpQUNRQUlBQkNKVGNER0NBQVFSaHFRUUZ5UWZheUEwRUJJQUlvQWdRUS9BRWdBaWdDQkNFRklBQkJJR3NpQmlJSUpBQVFWQ0VISUFBZ0JEY0RBQ0FHSUFZZ0JVRUpka0VCY1NJRlFSZHFJQWNnQUVFWWFpQUFFSXNCSUFacUlnY2dBaENzQVNFSklBZ2dCVUVEZEVHN0FXcEI4QUZ4YXlJRkpBQWdBRUVJYWlBQ0VFY2dCaUFKSUFjZ0JTQUFRUlJxSUFCQkVHb2dBRUVJYWhDM0F5QUFRUWhxRUVJZ0FTQUZJQUFvQWhRZ0FDZ0NFQ0FDSUFNUTV3RWhBU0FBUVNCcUpBQWdBUXZmQVFFRWZ5TUFRU0JySWdBa0FDQUFRWUN6QXk4QUFEc0JIQ0FBUWZ5eUF5Z0FBRFlDR0NBQVFSaHFRUUZ5UWZTeUEwRUJJQUlvQWdRUS9BRWdBaWdDQkNFR0lBQkJFR3NpQlNJSUpBQVFWQ0VISUFBZ0JEWUNBQ0FGSUFVZ0JrRUpka0VCY1NJRVFRMXFJQWNnQUVFWWFpQUFFSXNCSUFWcUlnWWdBaENzQVNFSElBZ2dCRUVEZEVIckFHcEI4QUJ4YXlJRUpBQWdBRUVJYWlBQ0VFY2dCU0FISUFZZ0JDQUFRUlJxSUFCQkVHb2dBRUVJYWhDM0F5QUFRUWhxRUVJZ0FTQUVJQUFvQWhRZ0FDZ0NFQ0FDSUFNUTV3RWhBU0FBUVNCcUpBQWdBUXZUQVFFQmZ5TUFRVEJySWdVa0FDQUZJQUUyQWlnQ1FDQUNLQUlFUVFGeFJRUkFJQUFnQVNBQ0lBTWdCQ0FBS0FJQUtBSVlFUW9BSVFJTUFRc2dCVUVZYWlBQ0VFY2dCVUVZYWhDYkFpRUFJQVZCR0dvUVFnSkFJQVFFUUNBRlFSaHFJQUFRdEFFTUFRc2dCVUVZYWlBQUVMTUJDeUFGSUFWQkdHb1FyUUUyQWhBRFFDQUZJQVZCR0dvUSt3RTJBZ2dnQlVFUWFpQUZRUWhxRUg4RVFDQUZRU2hxSUFVb0FoQW9BZ0FRemdRZ0JVRVFhaENKQWd3QkJTQUZLQUlvSVFJZ0JVRVlhaEE1R2dzTEN5QUZRVEJxSkFBZ0FndTlBUUVEZnlNQVFlQUFheUlBSkFBZ0FFR0dzd012QUFBN0FWd2dBRUdDc3dNb0FBQTJBbGdRVkNFRklBQWdCRFlDQUNBQVFVQnJJQUJCUUd0QkZDQUZJQUJCMkFCcUlBQVFpd0VpQmlBQVFVQnJhaUlFSUFJUXJBRWhCU0FBUVJCcUlBSVFSeUFBUVJCcUVKMEJJUWNnQUVFUWFoQkNJQWNnQUVGQWF5QUVJQUJCRUdvUTZRRWdBU0FBUVJCcUlBWWdBRUVRYW1vaUFTQUZJQUJySUFCcVFUQnJJQVFnQlVZYklBRWdBaUFERU5ZQklRRWdBRUhnQUdva0FDQUJDNHNFQVFaL0l3QkJnQUpySWdBa0FDQUFRaVUzQS9nQklBQkIrQUZxUVFGeVFmcXlBeUFDS0FJRUVMa0RJUWNnQUNBQVFkQUJhallDekFFUVZDRUdBbjhnQndSQUlBSW9BZ2doQ0NBQUlBVTNBMGdnQUVGQWF5QUVOd01BSUFBZ0NEWUNNQ0FBUWRBQmFrRWVJQVlnQUVINEFXb2dBRUV3YWhDTEFRd0JDeUFBSUFRM0ExQWdBQ0FGTndOWUlBQkIwQUZxUVI0Z0JpQUFRZmdCYWlBQVFkQUFhaENMQVFzaEJpQUFRY0VDTmdLQUFTQUFRY0FCYWtFQUlBQkJnQUZxRUdNaENBSkFJQVpCSGs0RVFCQlVJUVlDZnlBSEJFQWdBaWdDQ0NFSElBQWdCVGNER0NBQUlBUTNBeEFnQUNBSE5nSUFJQUJCekFGcUlBWWdBRUg0QVdvZ0FCRFpBUXdCQ3lBQUlBUTNBeUFnQUNBRk53TW9JQUJCekFGcUlBWWdBRUg0QVdvZ0FFRWdhaERaQVFzaEJpQUFLQUxNQVNJSFJRMEJJQWdnQnhCNUN5QUFLQUxNQVNJSElBWWdCMm9pQ1NBQ0VLd0JJUW9nQUVIQkFqWUNnQUVnQUVINEFHcEJBQ0FBUVlBQmFoQmpJUWNDZnlBQUtBTE1BU0FBUWRBQmFrWUVRQ0FBUVlBQmFpRUdJQUJCMEFGcURBRUxJQVpCQVhRUU9pSUdSUTBCSUFjZ0JoQjVJQUFvQXN3QkN5RUxJQUJCNkFCcUlBSVFSeUFMSUFvZ0NTQUdJQUJCOUFCcUlBQkI4QUJxSUFCQjZBQnFFS1FISUFCQjZBQnFFRUlnQVNBR0lBQW9BblFnQUNnQ2NDQUNJQU1RMWdFaEFTQUhFR0lnQ0JCaUlBQkJnQUpxSkFBZ0FROExFSHdBQytVREFRWi9Jd0JCMEFGcklnQWtBQ0FBUWlVM0E4Z0JJQUJCeUFGcVFRRnlRZm15QXlBQ0tBSUVFTGtESVFZZ0FDQUFRYUFCYWpZQ25BRVFWQ0VGQW44Z0JnUkFJQUlvQWdnaEJ5QUFJQVE1QXlnZ0FDQUhOZ0lnSUFCQm9BRnFRUjRnQlNBQVFjZ0JhaUFBUVNCcUVJc0JEQUVMSUFBZ0JEa0RNQ0FBUWFBQmFrRWVJQVVnQUVISUFXb2dBRUV3YWhDTEFRc2hCU0FBUWNFQ05nSlFJQUJCa0FGcVFRQWdBRUhRQUdvUVl5RUhBa0FnQlVFZVRnUkFFRlFoQlFKL0lBWUVRQ0FDS0FJSUlRWWdBQ0FFT1FNSUlBQWdCallDQUNBQVFad0JhaUFGSUFCQnlBRnFJQUFRMlFFTUFRc2dBQ0FFT1FNUUlBQkJuQUZxSUFVZ0FFSElBV29nQUVFUWFoRFpBUXNoQlNBQUtBS2NBU0lHUlEwQklBY2dCaEI1Q3lBQUtBS2NBU0lHSUFVZ0Jtb2lDQ0FDRUt3QklRa2dBRUhCQWpZQ1VDQUFRY2dBYWtFQUlBQkIwQUJxRUdNaEJnSi9JQUFvQXB3QklBQkJvQUZxUmdSQUlBQkIwQUJxSVFVZ0FFR2dBV29NQVFzZ0JVRUJkQkE2SWdWRkRRRWdCaUFGRUhrZ0FDZ0NuQUVMSVFvZ0FFRTRhaUFDRUVjZ0NpQUpJQWdnQlNBQVFjUUFhaUFBUVVCcklBQkJPR29RcEFjZ0FFRTRhaEJDSUFFZ0JTQUFLQUpFSUFBb0FrQWdBaUFERU5ZQklRRWdCaEJpSUFjUVlpQUFRZEFCYWlRQUlBRVBDeEI4QUF2QkFRRUVmeU1BUVNCcklnQWtBQ0FBUWlVM0F4Z2dBRUVZYWtFQmNrSDJzZ05CQUNBQ0tBSUVFUHdCSUFJb0FnUWhCeUFBUVNCcklnVWlCaVFBRUZRaENDQUFJQVEzQXdBZ0JTQUZJQWRCQ1haQkFYRkJGMm9nQ0NBQVFSaHFJQUFRaXdFZ0JXb2lCeUFDRUt3QklRZ2dCa0V3YXlJR0pBQWdBRUVJYWlBQ0VFY2dCU0FJSUFjZ0JpQUFRUlJxSUFCQkVHb2dBRUVJYWhDNkF5QUFRUWhxRUVJZ0FTQUdJQUFvQWhRZ0FDZ0NFQ0FDSUFNUTFnRWhBU0FBUVNCcUpBQWdBUXZTQVFFRWZ5TUFRU0JySWdBa0FDQUFRWUN6QXk4QUFEc0JIQ0FBUWZ5eUF5Z0FBRFlDR0NBQVFSaHFRUUZ5UWZTeUEwRUFJQUlvQWdRUS9BRWdBaWdDQkNFR0lBQkJFR3NpQlNJSUpBQVFWQ0VISUFBZ0JEWUNBQ0FGSUFVZ0JrRUpka0VCY1VFTWNpQUhJQUJCR0dvZ0FCQ0xBU0FGYWlJR0lBSVFyQUVoQnlBSVFTQnJJZ1FrQUNBQVFRaHFJQUlRUnlBRklBY2dCaUFFSUFCQkZHb2dBRUVRYWlBQVFRaHFFTG9ESUFCQkNHb1FRaUFCSUFRZ0FDZ0NGQ0FBS0FJUUlBSWdBeERXQVNFQklBQkJJR29rQUNBQkM4RUJBUVIvSXdCQklHc2lBQ1FBSUFCQ0pUY0RHQ0FBUVJocVFRRnlRZmF5QTBFQklBSW9BZ1FRL0FFZ0FpZ0NCQ0VISUFCQklHc2lCU0lHSkFBUVZDRUlJQUFnQkRjREFDQUZJQVVnQjBFSmRrRUJjVUVYYWlBSUlBQkJHR29nQUJDTEFTQUZhaUlISUFJUXJBRWhDQ0FHUVRCcklnWWtBQ0FBUVFocUlBSVFSeUFGSUFnZ0J5QUdJQUJCRkdvZ0FFRVFhaUFBUVFocUVMb0RJQUJCQ0dvUVFpQUJJQVlnQUNnQ0ZDQUFLQUlRSUFJZ0F4RFdBU0VCSUFCQklHb2tBQ0FCQzlJQkFRUi9Jd0JCSUdzaUFDUUFJQUJCZ0xNREx3QUFPd0VjSUFCQi9MSURLQUFBTmdJWUlBQkJHR3BCQVhKQjlMSURRUUVnQWlnQ0JCRDhBU0FDS0FJRUlRWWdBRUVRYXlJRklnZ2tBQkJVSVFjZ0FDQUVOZ0lBSUFVZ0JTQUdRUWwyUVFGeFFRMXFJQWNnQUVFWWFpQUFFSXNCSUFWcUlnWWdBaENzQVNFSElBaEJJR3NpQkNRQUlBQkJDR29nQWhCSElBVWdCeUFHSUFRZ0FFRVVhaUFBUVJCcUlBQkJDR29RdWdNZ0FFRUlhaEJDSUFFZ0JDQUFLQUlVSUFBb0FoQWdBaUFERU5ZQklRRWdBRUVnYWlRQUlBRUwwd0VCQVg4akFFRXdheUlGSkFBZ0JTQUJOZ0lvQWtBZ0FpZ0NCRUVCY1VVRVFDQUFJQUVnQWlBRElBUWdBQ2dDQUNnQ0dCRUtBQ0VDREFFTElBVkJHR29nQWhCSElBVkJHR29RblFJaEFDQUZRUmhxRUVJQ1FDQUVCRUFnQlVFWWFpQUFFTFFCREFFTElBVkJHR29nQUJDekFRc2dCU0FGUVJocUVLMEJOZ0lRQTBBZ0JTQUZRUmhxRVAwQk5nSUlJQVZCRUdvZ0JVRUlhaEIvQkVBZ0JVRW9haUFGS0FJUUxBQUFFTUlESUFWQkVHb1E3QUlNQVFVZ0JTZ0NLQ0VDSUFWQkdHb1FPUm9MQ3dzZ0JVRXdhaVFBSUFJTC9BSUJBWDhqQUVIZ0Ftc2lBQ1FBSUFBZ0FqWUMwQUlnQUNBQk5nTFlBaUFBUWRBQmFoQkdJUVlnQUVFUWFpQURFRWNnQUVFUWFoQ1dBVUhRc2dOQjZySURJQUJCNEFGcUVPZ0JJQUJCRUdvUVFpQUFRY0FCYWhCR0lnSWdBaEJQRUVFZ0FDQUNRUUFRUHlJQk5nSzhBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlBMEFDUUNBQVFkZ0NhaUFBUWRBQ2FoQ05BVVVOQUNBQUtBSzhBU0FDRURjZ0FXcEdCRUFnQWhBM0lRTWdBaUFDRURkQkFYUVFRU0FDSUFJUVR4QkJJQUFnQXlBQ1FRQVFQeUlCYWpZQ3ZBRUxJQUJCMkFKcUVHWkJFQ0FCSUFCQnZBRnFJQUJCQ0dwQkFDQUdJQUJCRUdvZ0FFRU1haUFBUWVBQmFoRENBZzBBSUFCQjJBSnFFSFVhREFFTEN5QUNJQUFvQXJ3QklBRnJFRUVnQWhBK0lRRVFWQ0VESUFBZ0JUWUNBQ0FCSUFNZ0FCQzRCRUVCUndSQUlBUkJCRFlDQUFzZ0FFSFlBbW9nQUVIUUFtb1FlZ1JBSUFRZ0JDZ0NBRUVDY2pZQ0FBc2dBQ2dDMkFJaEFTQUNFRGthSUFZUU9Sb2dBRUhnQW1va0FDQUJDODREQUNNQVFZQURheUlBSkFBZ0FDQUNOZ0x3QWlBQUlBRTJBdmdDSUFCQjJBRnFJQU1nQUVId0FXb2dBRUhzQVdvZ0FFSG9BV29RdGdRZ0FFSElBV29RUmlJQklBRVFUeEJCSUFBZ0FVRUFFRDhpQWpZQ3hBRWdBQ0FBUVNCcU5nSWNJQUJCQURZQ0dDQUFRUUU2QUJjZ0FFSEZBRG9BRmdOQUFrQWdBRUg0QW1vZ0FFSHdBbW9RalFGRkRRQWdBQ2dDeEFFZ0FSQTNJQUpxUmdSQUlBRVFOeUVESUFFZ0FSQTNRUUYwRUVFZ0FTQUJFRThRUVNBQUlBTWdBVUVBRUQ4aUFtbzJBc1FCQ3lBQVFmZ0NhaEJtSUFCQkYyb2dBRUVXYWlBQ0lBQkJ4QUZxSUFBb0F1d0JJQUFvQXVnQklBQkIyQUZxSUFCQklHb2dBRUVjYWlBQVFSaHFJQUJCOEFGcUVMVUVEUUFnQUVINEFtb1FkUm9NQVFzTEFrQWdBRUhZQVdvUU4wVU5BQ0FBTFFBWFJRMEFJQUFvQWh3aUF5QUFRU0JxYTBHZkFVb05BQ0FBSUFOQkJHbzJBaHdnQXlBQUtBSVlOZ0lBQ3lBQUlBSWdBQ2dDeEFFZ0JCQzVCQ0FGSUFBcEF3QTNBd0FnQlNBQUtRTUlOd01JSUFCQjJBRnFJQUJCSUdvZ0FDZ0NIQ0FFRUlnQklBQkIrQUpxSUFCQjhBSnFFSG9FUUNBRUlBUW9BZ0JCQW5JMkFnQUxJQUFvQXZnQ0lRSWdBUkE1R2lBQVFkZ0JhaEE1R2lBQVFZQURhaVFBSUFJTHZRTUFJd0JCOEFKcklnQWtBQ0FBSUFJMkF1QUNJQUFnQVRZQzZBSWdBRUhJQVdvZ0F5QUFRZUFCYWlBQVFkd0JhaUFBUWRnQmFoQzJCQ0FBUWJnQmFoQkdJZ0VnQVJCUEVFRWdBQ0FCUVFBUVB5SUNOZ0swQVNBQUlBQkJFR28yQWd3Z0FFRUFOZ0lJSUFCQkFUb0FCeUFBUWNVQU9nQUdBMEFDUUNBQVFlZ0NhaUFBUWVBQ2FoQ05BVVVOQUNBQUtBSzBBU0FCRURjZ0FtcEdCRUFnQVJBM0lRTWdBU0FCRURkQkFYUVFRU0FCSUFFUVR4QkJJQUFnQXlBQlFRQVFQeUlDYWpZQ3RBRUxJQUJCNkFKcUVHWWdBRUVIYWlBQVFRWnFJQUlnQUVHMEFXb2dBQ2dDM0FFZ0FDZ0MyQUVnQUVISUFXb2dBRUVRYWlBQVFReHFJQUJCQ0dvZ0FFSGdBV29RdFFRTkFDQUFRZWdDYWhCMUdnd0JDd3NDUUNBQVFjZ0JhaEEzUlEwQUlBQXRBQWRGRFFBZ0FDZ0NEQ0lESUFCQkVHcHJRWjhCU2cwQUlBQWdBMEVFYWpZQ0RDQURJQUFvQWdnMkFnQUxJQVVnQWlBQUtBSzBBU0FFRUxvRU9RTUFJQUJCeUFGcUlBQkJFR29nQUNnQ0RDQUVFSWdCSUFCQjZBSnFJQUJCNEFKcUVIb0VRQ0FFSUFRb0FnQkJBbkkyQWdBTElBQW9BdWdDSVFJZ0FSQTVHaUFBUWNnQmFoQTVHaUFBUWZBQ2FpUUFJQUlMdlFNQUl3QkI4QUpySWdBa0FDQUFJQUkyQXVBQ0lBQWdBVFlDNkFJZ0FFSElBV29nQXlBQVFlQUJhaUFBUWR3QmFpQUFRZGdCYWhDMkJDQUFRYmdCYWhCR0lnRWdBUkJQRUVFZ0FDQUJRUUFRUHlJQ05nSzBBU0FBSUFCQkVHbzJBZ3dnQUVFQU5nSUlJQUJCQVRvQUJ5QUFRY1VBT2dBR0EwQUNRQ0FBUWVnQ2FpQUFRZUFDYWhDTkFVVU5BQ0FBS0FLMEFTQUJFRGNnQW1wR0JFQWdBUkEzSVFNZ0FTQUJFRGRCQVhRUVFTQUJJQUVRVHhCQklBQWdBeUFCUVFBUVB5SUNhallDdEFFTElBQkI2QUpxRUdZZ0FFRUhhaUFBUVFacUlBSWdBRUcwQVdvZ0FDZ0MzQUVnQUNnQzJBRWdBRUhJQVdvZ0FFRVFhaUFBUVF4cUlBQkJDR29nQUVIZ0FXb1F0UVFOQUNBQVFlZ0NhaEIxR2d3QkN3c0NRQ0FBUWNnQmFoQTNSUTBBSUFBdEFBZEZEUUFnQUNnQ0RDSURJQUJCRUdwclFaOEJTZzBBSUFBZ0EwRUVhallDRENBRElBQW9BZ2cyQWdBTElBVWdBaUFBS0FLMEFTQUVFTHNFT0FJQUlBQkJ5QUZxSUFCQkVHb2dBQ2dDRENBRUVJZ0JJQUJCNkFKcUlBQkI0QUpxRUhvRVFDQUVJQVFvQWdCQkFuSTJBZ0FMSUFBb0F1Z0NJUUlnQVJBNUdpQUFRY2dCYWhBNUdpQUFRZkFDYWlRQUlBSUxvQU1CQW44akFFSGdBbXNpQUNRQUlBQWdBallDMEFJZ0FDQUJOZ0xZQWlBREVNc0JJUVlnQXlBQVFlQUJhaER1QWlFSElBQkIwQUZxSUFNZ0FFSE1BbW9RN1FJZ0FFSEFBV29RUmlJQklBRVFUeEJCSUFBZ0FVRUFFRDhpQWpZQ3ZBRWdBQ0FBUVJCcU5nSU1JQUJCQURZQ0NBTkFBa0FnQUVIWUFtb2dBRUhRQW1vUWpRRkZEUUFnQUNnQ3ZBRWdBUkEzSUFKcVJnUkFJQUVRTnlFRElBRWdBUkEzUVFGMEVFRWdBU0FCRUU4UVFTQUFJQU1nQVVFQUVEOGlBbW8yQXJ3QkN5QUFRZGdDYWhCbUlBWWdBaUFBUWJ3QmFpQUFRUWhxSUFBb0Fzd0NJQUJCMEFGcUlBQkJFR29nQUVFTWFpQUhFTUlDRFFBZ0FFSFlBbW9RZFJvTUFRc0xBa0FnQUVIUUFXb1FOMFVOQUNBQUtBSU1JZ01nQUVFUWFtdEJud0ZLRFFBZ0FDQURRUVJxTmdJTUlBTWdBQ2dDQ0RZQ0FBc2dCU0FDSUFBb0Fyd0JJQVFnQmhDOEJEY0RBQ0FBUWRBQmFpQUFRUkJxSUFBb0Fnd2dCQkNJQVNBQVFkZ0NhaUFBUWRBQ2FoQjZCRUFnQkNBRUtBSUFRUUp5TmdJQUN5QUFLQUxZQWlFQ0lBRVFPUm9nQUVIUUFXb1FPUm9nQUVIZ0Ftb2tBQ0FDQzZBREFRSi9Jd0JCNEFKcklnQWtBQ0FBSUFJMkF0QUNJQUFnQVRZQzJBSWdBeERMQVNFR0lBTWdBRUhnQVdvUTdnSWhCeUFBUWRBQmFpQURJQUJCekFKcUVPMENJQUJCd0FGcUVFWWlBU0FCRUU4UVFTQUFJQUZCQUJBL0lnSTJBcndCSUFBZ0FFRVFhallDRENBQVFRQTJBZ2dEUUFKQUlBQkIyQUpxSUFCQjBBSnFFSTBCUlEwQUlBQW9BcndCSUFFUU55QUNha1lFUUNBQkVEY2hBeUFCSUFFUU4wRUJkQkJCSUFFZ0FSQlBFRUVnQUNBRElBRkJBQkEvSWdKcU5nSzhBUXNnQUVIWUFtb1FaaUFHSUFJZ0FFRzhBV29nQUVFSWFpQUFLQUxNQWlBQVFkQUJhaUFBUVJCcUlBQkJER29nQnhEQ0FnMEFJQUJCMkFKcUVIVWFEQUVMQ3dKQUlBQkIwQUZxRURkRkRRQWdBQ2dDRENJRElBQkJFR3ByUVo4QlNnMEFJQUFnQTBFRWFqWUNEQ0FESUFBb0FnZzJBZ0FMSUFVZ0FpQUFLQUs4QVNBRUlBWVF2d1E3QVFBZ0FFSFFBV29nQUVFUWFpQUFLQUlNSUFRUWlBRWdBRUhZQW1vZ0FFSFFBbW9RZWdSQUlBUWdCQ2dDQUVFQ2NqWUNBQXNnQUNnQzJBSWhBaUFCRURrYUlBQkIwQUZxRURrYUlBQkI0QUpxSkFBZ0FndWdBd0VDZnlNQVFlQUNheUlBSkFBZ0FDQUNOZ0xRQWlBQUlBRTJBdGdDSUFNUXl3RWhCaUFESUFCQjRBRnFFTzRDSVFjZ0FFSFFBV29nQXlBQVFjd0NhaER0QWlBQVFjQUJhaEJHSWdFZ0FSQlBFRUVnQUNBQlFRQVFQeUlDTmdLOEFTQUFJQUJCRUdvMkFnd2dBRUVBTmdJSUEwQUNRQ0FBUWRnQ2FpQUFRZEFDYWhDTkFVVU5BQ0FBS0FLOEFTQUJFRGNnQW1wR0JFQWdBUkEzSVFNZ0FTQUJFRGRCQVhRUVFTQUJJQUVRVHhCQklBQWdBeUFCUVFBUVB5SUNhallDdkFFTElBQkIyQUpxRUdZZ0JpQUNJQUJCdkFGcUlBQkJDR29nQUNnQ3pBSWdBRUhRQVdvZ0FFRVFhaUFBUVF4cUlBY1F3Z0lOQUNBQVFkZ0NhaEIxR2d3QkN3c0NRQ0FBUWRBQmFoQTNSUTBBSUFBb0Fnd2lBeUFBUVJCcWEwR2ZBVW9OQUNBQUlBTkJCR28yQWd3Z0F5QUFLQUlJTmdJQUN5QUZJQUlnQUNnQ3ZBRWdCQ0FHRU1BRU53TUFJQUJCMEFGcUlBQkJFR29nQUNnQ0RDQUVFSWdCSUFCQjJBSnFJQUJCMEFKcUVIb0VRQ0FFSUFRb0FnQkJBbkkyQWdBTElBQW9BdGdDSVFJZ0FSQTVHaUFBUWRBQmFoQTVHaUFBUWVBQ2FpUUFJQUlMb0FNQkFuOGpBRUhnQW1zaUFDUUFJQUFnQWpZQzBBSWdBQ0FCTmdMWUFpQURFTXNCSVFZZ0F5QUFRZUFCYWhEdUFpRUhJQUJCMEFGcUlBTWdBRUhNQW1vUTdRSWdBRUhBQVdvUVJpSUJJQUVRVHhCQklBQWdBVUVBRUQ4aUFqWUN2QUVnQUNBQVFSQnFOZ0lNSUFCQkFEWUNDQU5BQWtBZ0FFSFlBbW9nQUVIUUFtb1FqUUZGRFFBZ0FDZ0N2QUVnQVJBM0lBSnFSZ1JBSUFFUU55RURJQUVnQVJBM1FRRjBFRUVnQVNBQkVFOFFRU0FBSUFNZ0FVRUFFRDhpQW1vMkFyd0JDeUFBUWRnQ2FoQm1JQVlnQWlBQVFid0JhaUFBUVFocUlBQW9Bc3dDSUFCQjBBRnFJQUJCRUdvZ0FFRU1haUFIRU1JQ0RRQWdBRUhZQW1vUWRSb01BUXNMQWtBZ0FFSFFBV29RTjBVTkFDQUFLQUlNSWdNZ0FFRVFhbXRCbndGS0RRQWdBQ0FEUVFScU5nSU1JQU1nQUNnQ0NEWUNBQXNnQlNBQ0lBQW9BcndCSUFRZ0JoREJCRFlDQUNBQVFkQUJhaUFBUVJCcUlBQW9BZ3dnQkJDSUFTQUFRZGdDYWlBQVFkQUNhaEI2QkVBZ0JDQUVLQUlBUVFKeU5nSUFDeUFBS0FMWUFpRUNJQUVRT1JvZ0FFSFFBV29RT1JvZ0FFSGdBbW9rQUNBQ0N3dXZ6QU5LQUVHQUNBdjVYRVZ5Y205eU9pQnNZV0psYkdsdVp5QjNiM0pySUc5MlpYSm1iRzkzTGdvQVJYSnliM0k2SUd4aFltVnNhVzVuSUhkdmNtc2diM1psY21ac2IzY3VDZ0JGY25KdmNqb2diR0ZpWld4cGJtY2dkMjl5YXlCdmRtVnlabXh2ZHk0S0FFVnljbTl5T2lCc1lXSmxiR2x1WnlCM2IzSnJJRzkyWlhKbWJHOTNMZ29BUlhKeWIzSTZJR3hoWW1Wc2FXNW5JSGR2Y21zZ2IzWmxjbVpzYjNjdUNnQkZjbkp2Y2pvZ2JHRmlaV3hwYm1jZ2QyOXlheUJ2ZG1WeVpteHZkeTRLQUVWeWNtOXlPaUJzWVdKbGJHbHVaeUIzYjNKcklHOTJaWEptYkc5M0xnb0FSWEp5YjNJNklHeGhZbVZzYVc1bklIZHZjbXNnYjNabGNtWnNiM2N1Q2dCRmNuSnZjam9nYkdGaVpXeHBibWNnZDI5eWF5QnZkbVZ5Wm14dmR5NEtBRVZ5Y205eU9pQnNZV0psYkdsdVp5QjNiM0pySUc5MlpYSm1iRzkzTGdvQVJYSnliM0k2SUd4aFltVnNhVzVuSUhkdmNtc2diM1psY21ac2IzY3VDZ0JGY25KdmNqb2diR0ZpWld4cGJtY2dkMjl5YXlCdmRtVnlabXh2ZHk0S0FFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCTllYSnJaWElnVDBzdUFEOC9QeUF4Q2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JQZFhRZ2IyWWdiV1Z0YjNKNUlTRUtBQ0FKQ2cwQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUNBOVBUMGdiV0YwY21sNElDZ2xaQ3dsWkNrZ1BUMDlDZ0IzWWdCaGNtZHNRMkZ0WlhKaFJuSjFjM1IxYlZKSUtDazZJR0Z5VUdGeVlXMUVaV052YlhCTllYUW9LU0JwYm1ScFkyRjBaV1FnY0dGeVlXMWxkR1Z5SUdWeWNtOXlMZ29BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0FnUFQwOUlIWmxZM1J2Y2lBb0pXUXBJRDA5UFFvQVJHRjBZU0J1ZFcwZ1pYSnliM0loSVFvQVJYSnliM0k2SUcxaGJHeHZZd29BUlhKeWIzSTZJRzFoYkd4dll3b0FSWEp5YjNJNklHMWhiR3h2WXdvQVJYSnliM0k2SUcxaGJHeHZZd29BUlhKeWIzSWdNVG9nYVdOd1IyVjBTVzVwZEZoM01saGpDZ0JrWldKMVp3QWxjeThsY3dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0FsY3k0bGN3QWxjeTRsY3dBbGN5NGxjd0JtYzJWMEFDTWpJeUJHWldGMGRYSmxJR05oYm1ScFpHRjBaWE1nWm05eUlIUnlZV05yYVc1bklHRnlaU0J2ZG1WeVpteHZkeTRLQUZOMFlYSjBJSFJ5WVdOcmFXNW5YM1JvY21WaFpDQWpKV1F1Q2dCUGRYUWdiMllnYldWdGIzSjVJU0VLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JyY0cxRVpXeGxkR1ZTWldaRVlYUmhVMlYwS0NrNklFNVZURXdnY21WbVJHRjBZVk5sZEZCMGNpOXlaV1pKYldGblpTNEtBQ3dBVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JQZFhRZ2IyWWdiV1Z0YjNKNUlTRUtBRUZ6YzJWeWRHbHZiaUJnY0hseVlXMXBaQzArYzJsNlpTZ3BJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGRwWkhSb0lENDlJRFZnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjNhV1IwYUNBK1BTQXhZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FXMHVkMmxrZEdnb0tTQTlQU0JwYlM1emRHVndLQ2t2YzJsNlpXOW1LR1pzYjJGMEtXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoemNtTmZkMmxrZEdnbE1pa2dQVDBnTUdBZ1ptRnBiR1ZrSUdsdUlBQmhiR3h2WTJGMGIzSThWRDQ2T21Gc2JHOWpZWFJsS0hOcGVtVmZkQ0J1S1NBbmJpY2daWGhqWldWa2N5QnRZWGhwYlhWdElITjFjSEJ2Y25SbFpDQnphWHBsQUVGemMyVnlkR2x2YmlCZ2VDQStQU0J0VFdsdVdHQWdabUZwYkdWa0lHbHVJQUJoYkd4dlkyRjBiM0k4VkQ0Nk9tRnNiRzlqWVhSbEtITnBlbVZmZENCdUtTQW5iaWNnWlhoalpXVmtjeUJ0WVhocGJYVnRJSE4xY0hCdmNuUmxaQ0J6YVhwbEFDVnRMU1ZrTFNWWkxTVklMU1ZOTFNWVEFFRnpjMlZ5ZEdsdmJpQmdkMmxrZEdnZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUdGc2JHOWpZWFJ2Y2p4VVBqbzZZV3hzYjJOaGRHVW9jMmw2WlY5MElHNHBJQ2R1SnlCbGVHTmxaV1J6SUcxaGVHbHRkVzBnYzNWd2NHOXlkR1ZrSUhOcGVtVUFRWE56WlhKMGFXOXVJR0J0VTNSaGNuUlVhVzFsSUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBVlc1cmJtOTNiaUJ2Y2lCMWJuTjFjSEJ2Y25SbFpDQnNZV0psYkdsdVp5QjBhSEpsYzJodmJHUWdiVzlrWlNCeVpYRjFaWE4wWldRdUlGTmxkQ0IwYnlCdFlXNTFZV3d1Q2dCUVlYUjBaWEp1SUdWNGRISmhZM1JwYjI0Z1ptRnBiR1ZrTGdBL1B6OGdNZ29BUlhKeWIzSTZJSFZ1YzNWd2NHOXlkR1ZrSUhCcGVHVnNJR1p2Y20xaGRDNEtBRVZ5Y205eU9pQk9WVXhNSUhCaGRIUklZVzVrYkdVdUNnQjNBRUZTWDFCSldFVk1YMFpQVWsxQlZGOVNSMElBVTBsYVJTQTlJQ1ZrTENBbFpBb0FSWEp5YjNJZ0tDVmtLVG9nZFc1aFlteGxJSFJ2SUc5d1pXNGdZMkZ0WlhKaElIQmhjbUZ0WlhSbGNuTWdabWxzWlNBaUpYTWlJR1p2Y2lCM2NtbDBhVzVuTGdvQUpYTXVKWE1BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JGY25KdmNqb2dhV053UjJWMFNsOVZYMWhqQUVWeWNtOXlJREk2SUdsamNFZGxkRWx1YVhSWWR6SllZd29BYVc1bWJ3QnlZZ0JVY21GamEybHVaeUIwYUhKbFlXUWdQU0FsWkFvQUpYTWxjd0FsY3k0bGN3QnlBSGRpQUhKaUFDVnpMaVZ6QUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BUlc1a0lIUnlZV05yYVc1blgzUm9jbVZoWkNBakpXUXVDZ0JyY0cxRVpXeGxkR1ZTWldaRVlYUmhVMlYwS0NrNklEQWdlSE5wZW1VdmVYTnBlbVV2WkhCcExnb0FDZ0FsY3k0bGN3QXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZkMlZpWVhKcmFYUXRiM0puTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJSbGRHVmpkRzl5Y3k5RWIwZGZjMk5oYkdWZmFXNTJZWEpwWVc1MFgyUmxkR1ZqZEc5eUxtTndjQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyUmxkR1ZqZEc5eWN5OW5ZWFZ6YzJsaGJsOXpZMkZzWlY5emNHRmpaVjl3ZVhKaGJXbGtMbU53Y0FBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmQyVmlZWEpyYVhRdGIzSm5MMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTlvWVhKeWFYTXVZM0J3QUM5b2IyMWxMM2RoYkhSbGNpOXJZV3gzWVd4MExXZHBkR2gxWWk5M1pXSmhjbXRwZEMxdmNtY3Zhbk5oY25SdmIyeHJhWFJPUmxRdlpXMXpZM0pwY0hSbGJpOVhaV0pCVWt0cGRFeHBZaTlzYVdJdlUxSkRMMHRRVFM5R2NtVmhhMDFoZEdOb1pYSXZaR1YwWldOMGIzSnpMMjl5YVdWdWRHRjBhVzl1WDJGemMybG5ibTFsYm5RdVkzQndBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwzQjVjbUZ0YVdRdVkzQndBRWxFSUdGc2NtVmhaSGtnWlhocGMzUnpBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmJXRjBZMmhsY25NdmFHOTFaMmhmYzJsdGFXeGhjbWwwZVY5MmIzUnBibWN1WTNCd0FFRnpjMlZ5ZEdsdmJpQmdjSGx5WVcxcFpHQWdabUZwYkdWa0lHbHVJQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyWnlZVzFsZDI5eWF5OXBiV0ZuWlM1amNIQUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5bWNtRnRaWGR2Y21zdmRHbHRaWEp6TG1Od2NBQk5RVTVWUVV3QVIyVnVaWEpwWXlCbGNuSnZjaUJrZFhKcGJtY2diV0YwWTJocGJtY2djR2hoYzJVdUFEOC9QeUF6Q2dCRmNuSnZjam9nWTJGdUozUWdiRzloWkNCd1lYUjBaWEp1SUdaeWIyMGdUbFZNVENCaWRXWm1aWEl1Q2dBbE5HUUFRVkpmVUVsWVJVeGZSazlTVFVGVVgwSkhVZ0FnSlRFd1p3QkVhWE4wYjNKMGFXOXVJR1poWTNSdmNqb2dhekU5SlRFdU1UQm1MQ0JyTWowbE1TNHhNR1lzSUhBeFBTVXhMakV3Wml3Z2NESTlKVEV1TVRCbUNnQWxjeVZ6Q2dCM1lnQWdKVEV3WndCRmNuSnZjaUJwWTNCSFpYUktYMVZmVXdvQVBUMDlQVDA5SUNWeklEMDlQVDA5UFQwOUNnQkZjbkp2Y2lBek9pQnBZM0JIWlhSSmJtbDBXSGN5V0dNS0FIZGhjbTVwYm1jQWQySUFjbUlBZDJJQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCRmNuSnZjaUJ6WVhacGJtY2dabVZoZEhWeVpTQnRZWEE2SUdWeWNtOXlJSGR5YVhScGJtY2daR0YwWVM0S0FFWnBiR1VnYjNCbGJpQmxjbkp2Y2k0Z0pYTUtBSElBUlhKeWIzSTZJRzFoYkd4dll3b0FUM1YwSUc5bUlHMWxiVzl5ZVNFaENnQnJjRzFUWlhSU1pXWkVZWFJoVTJWMEtDazZJRTVWVEV3Z2EzQnRTR0Z1Wkd4bEwyWnBiR1Z1WVcxbExnb0FJR3hwYm1VZ0FDQnNhVzVsSUFBZ2JHbHVaU0FBSUd4cGJtVWdBQ0JzYVc1bElBQkNkV2xzWkNCUWVYSmhiV2xrQUNCc2FXNWxJQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyMWhkR05vWlhKekwyWnlaV0ZyTG1nQUlHeHBibVVnQUNCc2FXNWxJQUJCVlZSUFgwMUZSRWxCVGdCSmJuTjFabVpwWTJsbGJuUWdZMjl1ZEhKaGMzUWdaSFZ5YVc1bklHMWhkR05vYVc1bkxnQkZjbkp2Y2pvZ2IzVjBJRzltSUcxbGJXOXllUzRLQUVGU1gxQkpXRVZNWDBaUFVrMUJWRjlTUjBKQkFDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjRQU1ZtTENCbWVUMGxaaXdnZURBOUpXWXNJSGt3UFNWbUxDQnpQU1ZtQ2dBQVJYSnliM0k2SUZWdVlXSnNaU0IwYnlCdmNHVnVJR1pwYkdVZ0p5VnpKeUJtYjNJZ2QzSnBkR2x1Wnk0S0FFVnljbTl5SUdsamNFZGxkRlZmWm5KdmJWOVlYMko1WDAxaGRGZ3lWUW9BSlRjdU5XWWdBRVZ5Y205eUlEUTZJR2xqY0VkbGRFbHVhWFJZZHpKWVl3b0FaWEp5YjNJQVJYSnliM0lnWVd4c2IyTmhkR2x1WnlCdFpXMXZjbmt1Q2dCRmNuSnZjam9nZFc1aFlteGxJSFJ2SUc5d1pXNGdabWxzWlNBbkpYTWxjeWNnWm05eUlISmxZV1JwYm1jdUNnQkZjbkp2Y2pvZ1ZXNWhZbXhsSUhSdklHOXdaVzRnWm1sc1pTQW5KWE1uSUdadmNpQjNjbWwwYVc1bkxnb0FKV1FBY21JQVQzVjBJRzltSUcxbGJXOXllU0VoQ2dCRmNuSnZjaUJ2Y0dWdWFXNW5JR1pwYkdVZ0p5VnpKem9nQUVaeVpXRnJJR1psWVhSMWNtVnpJQzBnSldRQWNtSUFPaUFBT2lBQU9pQUFPaUFBT2lBQVJYaDBjbUZqZENCR1pXRjBkWEpsY3dBNklBQWdiR2x1WlNBQU9pQUFPaUFBUVZWVVQxOVBWRk5WQUVKaGNtTnZaR1VnYldGMFkyaHBibWNnWTI5MWJHUWdibTkwSUdacGJtUWdZMjl5Y21WamRDQmlZWEpqYjJSbElHeHZZMkYwYjNJZ2NHRjBkR1Z5Ymk0QVVHRjBkR1Z5YmlCRVlYUmhJSEpsWVdRZ1pYSnliM0loSVFvQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWDBKSFVrRUFSR2x6ZEc5eWRHbHZiaUJtWVdOMGIzSWdQU0FsWmlBbFppQWxaaUFsWmlBbFppQWxaZ29BY21JQWNtSUFSWEp5YjNJZ2FXTndSMlYwV0dOZlpuSnZiVjlZZDE5aWVWOU5ZWFJZZHpKWVl3b0FSWEp5YjNJZ05Ub2dhV053UjJWMFNXNXBkRmgzTWxoakNnQmJKWE5kSUFCRmNuSnZjaUJ2Y0dWdWFXNW5JQ2NsY3ljdUNnQkZjbkp2Y2lCeVpXRmthVzVuSUdsdFlXZGxVMlYwTGdvQWNtSUFKWE1BVDNWMElHOW1JRzFsYlc5eWVTRWhDZ0JTWldGa0lHVnljbTl5SVNFS0FDVnpKWE1LQUVWeWNtOXlJSGRvYVd4bElHRmtaR2x1WnlCeVpXWmxjbVZ1WTJVZ1pHRjBZU0J6WlhRNklHdHdiVWRsYmxKbFprUmhkR0ZUWlhRb0tTQm1ZV2xzWldRdUNnQkRZVzRuZENCdmNHVnVJRXBRUlVjZ1ptbHNaU0FuSlhNbkNnQlFlWEpoYldsa0lHbHpJRzV2ZENCaGJHeHZZMkYwWldRQVNXMWhaMlVnYVhNZ2RHOXZJSE50WVd4c0FIZHdJRzExYzNRZ1ltVWdZWFFnYkdWaGMzUWdNUUJUZEdWd0lITnBlbVVnYlhWemRDQmlaU0JsY1hWaGJDQjBieUIzYVdSMGFDQm1iM0lnYm05M0FGTnZkWEpqWlNCM2FXUjBhQ0J0ZFhOMElHSmxJR1YyWlc0QVd5VnpYU0JiSlhOZElGc2xjMTBnT2lCR2IzVnVaQ0FsWkNCbVpXRjBkWEpsY3dCNElHOTFkQ0J2WmlCeVlXNW5aUUE2SUFCWGFXUjBhQ0JqWVc1dWIzUWdZbVVnZW1WeWJ3QkRiRzlqYXlCb1lYTWdibTkwSUdKbFpXNGdjM1JoY25SbFpBQkJWVlJQWDBGRVFWQlVTVlpGQUVKaGNtTnZaR1VnYldGMFkyaHBibWNnWlhKeWIzSWdaR1YwWldOMGFXOXVMMk52Y25KbFkzUnBiMjRnWm05MWJtUWdkVzV5WldOdmRtVnlZV0pzWlNCbGNuSnZjaTRBUlhKeWIzSWdjbVZoWkdsdVp5QndZWFIwWlhKdUlHWnBiR1VnSnlWekp5NEtBRUZTWDFCSldFVk1YMFpQVWsxQlZGOUJRa2RTQUVScGMzUnZjblJwYjI0Z1ptRmpkRzl5SUQwZ0pXWWdKV1lnSldZZ0pXWWdKV1lLQUVWeWNtOXlJQ2dsWkNrNklIVnVZV0pzWlNCMGJ5QnZjR1Z1SUdOaGJXVnlZU0J3WVhKaGJXVjBaWEp6SUdacGJHVWdJaVZ6SWlCbWIzSWdjbVZoWkdsdVp5NEtBRVZ5Y205eU9pQlZibUZpYkdVZ2RHOGdiM0JsYmlCbWFXeGxJQ2NsY3ljZ1ptOXlJSEpsWVdScGJtY3VDZ0JGY25KdmNpQTlJQ1ZtQ2dCRmNuSnZjaUEyT2lCcFkzQkhaWFJKYm1sMFdIY3lXR01LQUVWeWNtOXlJR055WldGMGFXNW5JR1oxYkd3Z1ptbHNaU0J3WVhSb0lHWnliMjBnSnlWekp5QmhibVFnSnlWekp3QkpiV0ZuWlhObGRDQmpiMjUwWVdsdWN5QWxaQ0JwYldGblpYTXVDZ0JGY25KdmNqb2dWVzVoWW14bElIUnZJRzl3Wlc0Z1ptbHNaU0FuSlhNbklHWnZjaUJ5WldGa2FXNW5MZ29BSldZQUlDQWdJQ0FnSUNBZ1NXMWhaMlZUYVhwbElEMGdKVGRrVzNCcGVHVnNYUW9BZDJJQUFEMDlQVDA5UFQwOVBTQWxaQ0E5UFQwOVBUMDlQVDA5UFFvQUpYTWxjd29BUVhOelpYSjBhVzl1SUdCdFNXMWhaMlZ6TG5OcGVtVW9LU0ErSURCZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JvWldsbmFIUWdQajBnTldBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR2hsYVdkb2RDQStQU0F4WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdlQ0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWkhOMElDRTlJREJnSUdaaGFXeGxaQ0JwYmlBQUlFbE9SazhnSUFCQmMzTmxjblJwYjI0Z1lIZ2dQQ0J0VFdGNFdHQWdabUZwYkdWa0lHbHVJQUJRZVhKaGJXbGtJR2x6SUU1VlRFd0FRWE56WlhKMGFXOXVJR0JvWldsbmFIUWdQaUF3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiVk4wYjNCVWFXMWxJRDQ5SURCZ0lHWmhhV3hsWkNCcGJpQUFRVlZVVDE5Q1VrRkRTMFZVU1U1SEFFMWhkR05vYVc1bklHTnZibVpwWkdWdVkyVWdZM1YwYjJabUlIWmhiSFZsSUc1dmRDQnlaV0ZqYUdWa0xnQWxjeVZ6Q2dCQlVsOVFTVmhGVEY5R1QxSk5RVlJmVFU5T1R3QkVhWE4wYjNKMGFXOXVJR1poWTNSdmNpQTlJQ1ZtSUNWbUlDVm1JQ1ZtQ2dCRmNuSnZjaUFvSldRcE9pQjFibUZpYkdVZ2RHOGdaR1YwWlhKdGFXNWxJR1pwYkdVZ2JHVnVaM1JvTGdCRmNuSnZjaUJwWTNBeVIyVjBWRk1LQUVWeWNtOXlJRGM2SUdsamNFZGxkRWx1YVhSWWR6SllZd29BUlhKeWIzSWdhVzRnYjNCbGJtbHVaeUFuSlhNbklHbHVJSHBwY0dacGJHVXVDZ0JHWVd4c2FXNW5JR0poWTJzZ2RHOGdjbVZoWkdsdVp5QW5KWE1sY3ljZ2FXNGdRVkpVYjI5c1MybDBJSFkwTG5nZ1ptOXliV0YwTGdvQVJYSnliM0lnY21WaFpHbHVaeUJLVUVWSElHWnBiR1V1Q2dBbFppQWxaaUFsWmlBbFpnQkZlSFJ5WVdOMFpXUWdabVZoZEhWeVpYTWdQU0FsTjJSYmNHbDRaV3hkQ2dCRmNuSnZjaUJ6WVhacGJtY2dabVZoZEhWeVpTQnpaWFE2SUdWeWNtOXlJSGR5YVhScGJtY2daR0YwWVM0S0FFOTFkQ0J2WmlCdFpXMXZjbmtoSVFvQVJYSnliM0lnZDJocGJHVWdZV1JrYVc1bklISmxabVZ5Wlc1alpTQmtZWFJoSUhObGREb2dhM0J0VFdWeVoyVlNaV1pFWVhSaFUyVjBLQ2tnWm1GcGJHVmtMZ29BQUV4aGNHeGhZMmxoYmlCd2VYSmhiV2xrSUdoaGN5QnViM1FnWW1WbGJpQmhiR3h2WTJGMFpXUUFRWE56WlhKMGFXOXVJR0JwYldGblpTNTBlWEJsS0NrZ1BUMGdTVTFCUjBWZlZVbE9WRGhnSUdaaGFXeGxaQ0JwYmlBQWFIQWdiWFZ6ZENCaVpTQmhkQ0JzWldGemRDQXhBSGdnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJFWlhOMGFXNWhkR2x2YmlCcGN5Qk9WVXhNQUVKMWFXeGtJRWx1WkdWNEFFRnpjMlZ5ZEdsdmJpQmdlU0ErUFNCdFRXbHVXV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lITjBiM0psTG5OcGVtVW9LU0E5UFNCd2IybHVkSE11YzJsNlpTZ3BZQ0JtWVdsc1pXUWdhVzRnQUVobGFXZG9kQ0JqWVc1dWIzUWdZbVVnZW1WeWJ3QkRiRzlqYXlCb1lYTWdibTkwSUdKbFpXNGdjM1J2Y0hCbFpBQUFBQUN2RUFBQU1STUFBQ29WQUFDM0Z3QUE5Qm9BQUV4aFltVnNhVzVuSUhSb2NtVnphRzlzWkNCdGIyUmxJSE5sZENCMGJ5QWxjeTRLQUUxaGVHbHRkVzBnWVd4c2IzZGhZbXhsSUhCdmMyVWdaWEp5YjNJZ1pYaGpaV1ZrWldRdUFBQkJVbDlRU1ZoRlRGOUdUMUpOUVZSZlFWSkhRZ0JGY25KdmNqb2djM1Z3Y0d4cFpXUWdabWxzWlNCa2IyVnpJRzV2ZENCaGNIQmxZWElnZEc4Z1ltVWdZVzRnUVZKVWIyOXNTMmwwSUdOaGJXVnlZU0J3WVhKaGJXVjBaWElnWm1sc1pTNEtBRVZ5Y205eUlHbHVJRzl3Wlc1cGJtY2dKeVZ6SnlCbWIzSWdjbVZoWkdsdVp3b0FkMklBUlhKeWIzSWdjbVZoWkdsdVp5QktVRVZISUdacGJHVWdhR1ZoWkdWeUxnb0FJRVpwYkhSbGNtVmtJR1psWVhSMWNtVnpJRDBnSlRka1czQnBlR1ZzWFFvQUpXUUFhM0J0UkdWc1pYUmxVbVZtUkdGMFlWTmxkQ2dwT2lCT1ZVeE1JSEpsWmtSaGRHRlRaWFJRZEhJeEwzSmxaa1JoZEdGVFpYUlFkSEl5TGdvQVEyRnVKM1FnY21WaFpDQktVRVZISUdacGJHVWdKeVZ6SndvQVFYTnpaWEowYVc5dUlHQndlWEpoYldsa0xUNXVkVzFQWTNSaGRtVnpLQ2tnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRWx0WVdkbElHMTFjM1FnWW1VZ1ozSmhlWE5qWVd4bEFFRnpjMlZ5ZEdsdmJpQmdhU3N4SzJOb2RXNXJYM05wZW1VZ1BDQjNhV1IwYUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGdnUENCdFIzSmhaR2xsYm5SelcyOWpkR0YyWlNwdFRuVnRVMk5oYkdWelVHVnlUMk4wWVhabEszTmpZV3hsWFM1M2FXUjBhQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdjM0pqSUNFOUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCd2VYSmhiV2xrWUNCbVlXbHNaV1FnYVc0Z0FIa2diM1YwSUc5bUlISmhibWRsQUVabFlYUjFjbVVnYzNSdmNtVWdhR0Z6SUc1dmRDQmlaV1Z1SUdGc2JHOWpZWFJsWkFCQmMzTmxjblJwYjI0Z1lITjBaWEFnUGowZ2QybGtkR2hnSUdaaGFXeGxaQ0JwYmlBQVd5VnpYU0JiSlhOZElGc2xjMTBnT2lBbGN6b2dKV1lnYlhNQVJYSnliM0k2SUZWdWMzVndjRzl5ZEdWa0lIQnBlR1ZzSUdadmNtMWhkQ0FvSldRcElISmxjWFZsYzNSbFpDNEtBRTExYkhScExXMWhjbXRsY2lCd2IzTmxJR1Z5Y205eUlIWmhiSFZsSUdWNFkyVmxaR1ZrTGdCQlVsOVFTVmhGVEY5R1QxSk5RVlJmTW5aMWVRQWxOeTQxWmlBQVJYSnliM0lnS0NWa0tUb2dkVzVoWW14bElIUnZJSEpsWVdRZ1puSnZiU0JtYVd4bExnQkZjbkp2Y2lCcGJpQnlaV0ZrYVc1bklDY2xjeWN1Q2dCRmNuSnZjam9nZFc1aFlteGxJSFJ2SUc5d1pXNGdabWxzWlNBbkpYTW5JR1p2Y2lCM2NtbDBhVzVuTGdvQURTVTBaQzhsTkdRdUFBb2pJeU1nVTNWeVptRmpaU0JPYnk0bFpDQWpJeU1LQUd0d2JVUmxiR1YwWlZKbFprUmhkR0ZUWlhRb0tUb2dUbFZNVENCeVpXWkVZWFJoVTJWMFVIUnlMZ29BYTNCdFUyVjBVbVZtUkdGMFlWTmxkQ2dwT2lCT1ZVeE1JR3R3YlVoaGJtUnNaUzl5WldaRVlYUmhVMlYwTGdvQVVIbHlZVzFwWkNCa2IyVnpJRzV2ZENCamIyNTBZV2x1SUdGdWVTQnNaWFpsYkhNQVFYTnpaWEowYVc5dUlHQnBiV0ZuWlM1amFHRnVibVZzY3lncElEMDlJREZnSUdaaGFXeGxaQ0JwYmlBQVJYaDBaVzVrYVc1bklHSmxlVzl1WkNCMGFHVWdkMmxrZEdnZ2IyWWdkR2hsSUdsdFlXZGxBSGdnYlhWemRDQmlaU0JzWlhOeklIUm9ZVzRnZEdobElHbHRZV2RsSUhkcFpIUm9BRk52ZFhKalpTQnBjeUJPVlV4TUFDOW9iMjFsTDNkaGJIUmxjaTlyWVd4M1lXeDBMV2RwZEdoMVlpOTNaV0poY210cGRDMXZjbWN2YW5OaGNuUnZiMnhyYVhST1JsUXZaVzF6WTNKcGNIUmxiaTlYWldKQlVrdHBkRXhwWWk5c2FXSXZVMUpETDB0UVRTOUdjbVZoYTAxaGRHTm9aWEl2YldGMFkyaGxjbk12ZG1semRXRnNYMlJoZEdGaVlYTmxMbWdBUVhOelpYSjBhVzl1SUdCNUlEd2diVTFoZUZsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J1ZFcxZmNHOXBiblJ6SUQwOUlIQnZhVzUwY3k1emFYcGxLQ2xnSUdaaGFXeGxaQ0JwYmlBQVUzUmxjQ0J0ZFhOMElHSmxJR2R5WldGMFpYSWdkR2hoYmlCdmNpQmxjWFZoYkNCMGFHVWdkMmxrZEdnQUlFbE9SazhnSUFCU1pXcGxZM1JsWkNCbWNtVnhkV1Z1ZEd4NUlHMXBjM0psWTI5bmJtbHpaV1FnYldGMGNtbDRJRzFoY210bGNpNEFRVkpmVUVsWVJVeGZSazlTVFVGVVgzbDFkbk1BUlhKeWIzSTZJSE4xY0hCc2FXVmtJR0oxWm1abGNpQmtiMlZ6SUc1dmRDQmhjSEJsWVhJZ2RHOGdZbVVnUVZKVWIyOXNTMmwwSUdOaGJXVnlZU0J3WVhKaGJXVjBaWEp6TGdvQVJYSnliM0lnYVc0Z2QzSnBkR2x1WnlBbkpYTW5JR2x1SUhSb1pTQjZhWEJtYVd4bExnb0FSWEp5YjNJZ2MyRjJhVzVuSUdsdFlXZGxJSE5sZERvZ1pYSnliM0lnZDNKcGRHbHVaeUJrWVhSaExnb0FDZ0FsY3dCcmNHMVRZWFpsVW1WbVJHRjBZVk5sZENncE9pQk9WVXhNSUdacGJHVnVZVzFsTDNKbFprUmhkR0ZUWlhRdUNnQnJjRzFUWlhSU1pXWkVZWFJoVTJWMEtDazZJSEpsWmtSaGRHRlRaWFF1Q2dCQmMzTmxjblJwYjI0Z1lHUjVibUZ0YVdOZlkyRnpkRHhqYjI1emRDQkNhVzV2YldsaGJGQjVjbUZ0YVdRek1tWXFQaWh3ZVhKaGJXbGtLV0FnWm1GcGJHVmtJR2x1SUFCSmJXRm5aU0J0ZFhOMElHaGhkbVVnTVNCamFHRnVibVZzQUVGemMyVnlkR2x2YmlCZ1luVmphMlYwV3pCZExtWnBjbk4wSUQ0OUlHSjFZMnRsZEZ0dVhTNW1hWEp6ZEdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGtnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhOeVkxOTNhV1IwYUNBK0lEQmdJR1poYVd4bFpDQnBiaUFBSUd4cGJtVWdBRUZ6YzJWeWRHbHZiaUJnWVc1bmJHVWdQaUF0VUVsZ0lHWmhhV3hsWkNCcGJpQUFVMmh2ZFd4a0lHSmxJSE5oYldVZ2MybDZaUUJCYzNObGNuUnBiMjRnWUdOb1lXNXVaV3h6SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCZFhSdklIUm9jbVZ6YUc5c1pDQW9ZbkpoWTJ0bGRDa2diV0Z5YTJWeUlHTnZkVzUwY3lBdFd5VXpaRG9nSlROa1hTQmJKVE5rT2lBbE0yUmRJRnNsTTJRNklDVXpaRjByTGdvQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWDFKSFFsODFOalVBUm1sbGJHUXRiMll0ZG1sbGR5QjJaWEowYVdOaGJDQTlJQ1V1TVdZc0lHaHZjbWw2YjI1MFlXd2dQU0FsTGpGbUlHUmxaM0psWlhNc0lHRnpjR1ZqZENCeVlYUnBieUE5SUNVdU0yWUtBRVZ5Y205eUlDZ2xaQ2s2SUhWdVlXSnNaU0IwYnlCdmNHVnVJR1Y0ZEdWeWJtRnNJSEJoY21GdFpYUmxjbk1nWm1sc1pTQWlKWE1pSUdadmNpQjNjbWwwYVc1bkxnb0FSWEp5YjNJZ2FXNGdZMnh2YzJsdVp5QWxjeUJwYmlCMGFHVWdlbWx3Wm1sc1pTNEtBRTFoZUNCbVpXRjBkWEpsSUQwZ0pXUUtBQ0FnVW1WaFpDQkpiV0ZuWlZObGRDNEtBRVZ5Y205eUlITmhkbWx1WnlCTFVFMGdaR0YwWVRvZ2RXNWhZbXhsSUhSdklHOXdaVzRnWm1sc1pTQW5KWE1sY3lWekp5Qm1iM0lnZDNKcGRHbHVaeTRLQUU5MWRDQnZaaUJ0WlcxdmNua2hJUW9BVDI1c2VTQmlhVzV2YldsaGJDQndlWEpoYldsa0lHbHpJSE4xY0hCdmNuUmxaQUJCYzNObGNuUnBiMjRnWUcxUWVYSmhiV2xrTG5OcGVtVW9LU0E5UFNCdFRuVnRUMk4wWVhabGN5cHRUblZ0VTJOaGJHVnpVR1Z5VDJOMFlYWmxZQ0JtWVdsc1pXUWdhVzRnQUc1MGFGOWxiR1Z0Wlc1MElHWmhhV3hsWkFCNUlHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVYybGtkR2dnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUE2SUFCaGJtZHNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQVFYTnpaWEowYVc5dUlHQnZZM1JoZG1VZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCT2RXMWlaWElnYjJZZ1kyaGhibTVsYkhNZ1kyRnVibTkwSUdKbElIcGxjbThBUVhWMGJ5QjBhSEpsYzJodmJHUWdLR0p5WVdOclpYUXBJR0ZrYW5WemRHVmtJSFJvY21WemFHOXNaQ0IwYnlBbFpDNEtBRUZTWDFCSldFVk1YMFpQVWsxQlZGOVNSMEpCWHpVMU5URUFSWEp5YjNJZ0tDVmtLVG9nZFc1aFlteGxJSFJ2SUc5d1pXNGdaWGgwWlhKdVlXd2djR0Z5WVcxbGRHVnljeUJtYVd4bElDSWxjeUlnWm05eUlISmxZV1JwYm1jdUNnQkZjbkp2Y2lCcGJpQmpiRzl6YVc1bklDY2xjeWN1Q2dBbE0yUTZJQ2dsTTJRc0pUTmtLU0E2SUNWbUlHMXBiajBsWmlCdFlYZzlKV1lzSUhOa1BTVm1DZ0JGY25KdmNpQnZjR1Z1YVc1bklHWnBiR1VnSnlWekxtbHpaWFFuTGdvQUxnQndiMmx1ZEhNdEpXUUtBRUZ6YzJWeWRHbHZiaUJnWkM1MGVYQmxLQ2tnUFQwZ1NVMUJSMFZmUmpNeVlDQm1ZV2xzWldRZ2FXNGdBRkI1Y21GdGFXUWdhR0Z6SUc1dmRDQmlaV1Z1SUdGc2JHOWpZWFJsWkNCNVpYUUFRWE56WlhKMGFXOXVJR0J3V3pCZElENGdjRzB4V3kweFhXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhrZ1BDQnRSM0poWkdsbGJuUnpXMjlqZEdGMlpTcHRUblZ0VTJOaGJHVnpVR1Z5VDJOMFlYWmxLM05qWVd4bFhTNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhOeVkxOW9aV2xuYUhRZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUZCNWNtRnRhV1FnYVhNZ1RsVk1UQUJCYzNObGNuUnBiMjRnWUdGdVoyeGxJRHc5SUZCSllDQm1ZV2xzWldRZ2FXNGdBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwyZGhkWE56YVdGdVgzTmpZV3hsWDNOd1lXTmxYM0I1Y21GdGFXUXVhQUJCYzNObGNuUnBiMjRnWUcxRVlYUmhMbWRsZENncFlDQm1ZV2xzWldRZ2FXNGdBRUYxZEc4Z2RHaHlaWE5vYjJ4a0lDZ2xjeWtnWVdScWRYTjBaV1FnZEdoeVpYTm9iMnhrSUhSdklDVmtMZ29BUVZKZlVFbFlSVXhmUms5U1RVRlVYMUpIUWtGZk5EUTBOQUJiSlNBdU0yWWdKU0F1TTJZZ0pTQXVNMlpkSUZzbElEWXVNV1pkQ2dCRmNuSnZjaUFvSldRcE9pQjFibUZpYkdVZ2RHOGdiM0JsYmlCdmNIUnBZMkZzSUhCaGNtRnRaWFJsY25NZ1ptbHNaU0FpSlhNaUlHWnZjaUIzY21sMGFXNW5MZ29BTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0Q2dBZ0lDQWdaVzVrTGdvQUFHdHdiVk5sZEZKbFprUmhkR0ZUWlhSR2FXeGxLQ2s2SUU1VlRFd2dhM0J0U0dGdVpHeGxMMlpwYkdWdVlXMWxMZ29BVDI1c2VTQkdNeklnYVcxaFoyVnpJSE4xY0hCdmNuUmxaQUJCYzNObGNuUnBiMjRnWUdsdFlXZGxMbmRwWkhSb0tDa2dQVDBnYlZCNWNtRnRhV1JiTUYwdWQybGtkR2dvS1dBZ1ptRnBiR1ZrSUdsdUlBQlRhRzkxYkdRZ1ltVWdiV0Y0YVcxaEFIa2diWFZ6ZENCaVpTQnNaWE56SUhSb1lXNGdkR2hsSUdsdFlXZGxJR2hsYVdkb2RBQklaV2xuYUhRZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCQmMzTmxjblJwYjI0Z1lHUmxkR1ZqZEc5eVlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYzJOaGJHVWdQajBnYlUxcGJsTmpZV3hsWUNCbVlXbHNaV1FnYVc0Z0FFOWpkR0YyWlNCdGRYTjBJR0psSUhCdmMybDBhWFpsQUVSaGRHRWdjRzlwYm5SbGNpQnBjeUJPVlV4TUFHMWxaR2xoYmdCQlVsOVFTVmhGVEY5R1QxSk5RVlJmTkRJd2RnQkZjbkp2Y2lBb0pXUXBPaUIxYm1GaWJHVWdkRzhnYjNCbGJpQnZjSFJwWTJGc0lIQmhjbUZ0WlhSbGNuTWdabWxzWlNBaUpYTWlJR1p2Y2lCeVpXRmthVzVuTGdvQUpUTmtMQ0FsTTJRNklHMWhlRjl6YVcwZ1BTQWxaZ29BSUNCU1pXRmtJRVpsWVhSMWNtVlRaWFF1Q2dCRmNuSnZjaUJ6WVhacGJtY2dTMUJOSUdSaGRHRTZJR1Z5Y205eUlIZHlhWFJwYm1jZ1pHRjBZUzRLQUVOaGJtNXZkQ0JtYVc1a0lIUm9aU0J3WVdkbElHWnZjaUJ6YTJsd2NHbHVaeTRLQUVGemMyVnlkR2x2YmlCZ2FXMHhMblI1Y0dVb0tTQTlQU0JKVFVGSFJWOUdNekpnSUdaaGFXeGxaQ0JwYmlBQVNXMWhaMlVnYjJZZ2QzSnZibWNnYzJsNlpTQm1iM0lnY0hseVlXMXBaQUJCYzNObGNuUnBiMjRnWUhCYk1GMGdQaUJ3YlRGYk1GMWdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCbkxtTm9ZVzV1Wld4ektDa2dQVDBnTW1BZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSE55WTE5emRHVndJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkVaWFJsWTNSdmNpQnBjeUJPVlV4TUFITmpZV3hsSUc5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZRzlqZEdGMlpTQThJRzFPZFcxUFkzUmhkbVZ6WUNCbVlXbHNaV1FnYVc0Z0FGVnVZV0pzWlNCMGJ5QmhiR3h2WTJGMFpTQnBiV0ZuWlNCa1lYUmhBRTkwYzNVQVFWSmZVRWxZUlV4ZlJrOVNUVUZVWHpReU1HWUFKVGN1TkdZZ0FFVnljbTl5SUc5d1pXNXBibWNnWm1sc1pTQW5KWE11Wm5ObGRDY3VDZ0JyY0cxTWIyRmtVbVZtUkdGMFlWTmxkQ2dwT2lCT1ZVeE1JR1pwYkdWdVlXMWxMM0psWmtSaGRHRlRaWFJRZEhJdUNnQnJjRzFOWVhSamFHbHVaeWdwT2lCT1ZVeE1JR3R3YlVoaGJtUnNaUzlwYmtsdFlXZGxUSFZ0WVM0S0FFRnpjMlZ5ZEdsdmJpQmdhVzB5TG5SNWNHVW9LU0E5UFNCSlRVRkhSVjlHTXpKZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JwYldGblpTNW9aV2xuYUhRb0tTQTlQU0J0VUhseVlXMXBaRnN3WFM1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSEJiTUYwZ1BpQndiVEZiTVYxZ0lHWmhhV3hsWkNCcGJpQUFUblZ0WW1WeUlHOW1JR05vWVc1dVpXeHpJSE5vYjNWc1pDQmlaU0F5QUZOMFpYQWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQkJjM05sY25ScGIyNGdZSEI1Y21GdGFXUXRQbWx0WVdkbGN5Z3BMbk5wZW1Vb0tTQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnpZMkZzWlNBOElHMU5ZWGhUWTJGc1pXQWdabUZwYkdWa0lHbHVJQUJQWTNSaGRtVWdiWFZ6ZENCaVpTQnNaWE56SUhSb1lXNGdiblZ0WW1WeUlHOW1JRzlqZEdGMlpYTUFTVzUyWVd4cFpDQnBiV0ZuWlNCMGVYQmxBRUdFNVFBTFVRRUFBQUFCQUFBQUFRQUFBQUFBQUFELy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy93QUFBQUFCQUFBQUFRQUFBQUVBQUFBQUFBQUEvLy8vL3dFQUFBQUpBQUFBQlFBQUFBUUFBQUFEQUFBQUFnQkI0K1VBQzQyYUFRRUFBUUVCQUFJRS8vOEZBd0VBQXY4R0IvOERBUUlDQXdJREFnTURBUDhFQmdjRi93RUVCUVFFQlFVRUJRY0dCZ1lIQndjRy93SUVCZ2NGQS84QS8vOEQvd1VHLy84SkN2OE0vLzhQL3hFUy94VC8veGNZLy84Yi94MGUvLzhCQXY4RS8vOEhDUC8vQy84TkR2OFEvLzhUL3hVVy8vOFpHdjhjLy84ZkFRQUFBQUlBQUFBRUFBQUFDQUFBQUFNQUFBQUdBQUFBREFBQUFBc0FBQUFGQUFBQUNnQUFBQWNBQUFBT0FBQUFEd0FBQUEwQUFBQUpBQUFBQUFBQUFQLy8vLzhBQUFBQUFRQUFBQVFBQUFBQ0FBQUFDQUFBQUFVQUFBQUtBQUFBQXdBQUFBNEFBQUFKQUFBQUJ3QUFBQVlBQUFBTkFBQUFDd0FBQUF3QUFBQUJBQUFBQWdBQUFBUUFBQUFJQUFBQUVBQUFBQVVBQUFBS0FBQUFGQUFBQUEwQUFBQWFBQUFBRVFBQUFBY0FBQUFPQUFBQUhBQUFBQjBBQUFBZkFBQUFHd0FBQUJNQUFBQURBQUFBQmdBQUFBd0FBQUFZQUFBQUZRQUFBQThBQUFBZUFBQUFHUUFBQUJjQUFBQUxBQUFBRmdBQUFBa0FBQUFTQUFBQUFBQUFBUC8vLy84QUFBQUFBUUFBQUJJQUFBQUNBQUFBQlFBQUFCTUFBQUFMQUFBQUF3QUFBQjBBQUFBR0FBQUFHd0FBQUJRQUFBQUlBQUFBREFBQUFCY0FBQUFFQUFBQUNnQUFBQjRBQUFBUkFBQUFCd0FBQUJZQUFBQWNBQUFBR2dBQUFCVUFBQUFaQUFBQUNRQUFBQkFBQUFBTkFBQUFEZ0FBQUJnQUFBQVBBQUFBQVFBQUFBSUFBQUFFQUFBQUNBQUFBQkFBQUFBZ0FBQUFRQUFBQUFNQUFBQUdBQUFBREFBQUFCZ0FBQUF3QUFBQVlBQUFBRU1BQUFBRkFBQUFDZ0FBQUJRQUFBQW9BQUFBVUFBQUFDTUFBQUJHQUFBQUR3QUFBQjRBQUFBOEFBQUFlQUFBQUhNQUFBQmxBQUFBU1FBQUFCRUFBQUFpQUFBQVJBQUFBQXNBQUFBV0FBQUFMQUFBQUZnQUFBQXpBQUFBWmdBQUFFOEFBQUFkQUFBQU9nQUFBSFFBQUFCckFBQUFWUUFBQUNrQUFBQlNBQUFBSndBQUFFNEFBQUFmQUFBQVBnQUFBSHdBQUFCN0FBQUFkUUFBQUdrQUFBQlJBQUFBSVFBQUFFSUFBQUFIQUFBQURnQUFBQndBQUFBNEFBQUFjQUFBQUdNQUFBQkZBQUFBQ1FBQUFCSUFBQUFrQUFBQVNBQUFBQk1BQUFBbUFBQUFUQUFBQUJzQUFBQTJBQUFBYkFBQUFGc0FBQUExQUFBQWFnQUFBRmNBQUFBdEFBQUFXZ0FBQURjQUFBQnVBQUFBWHdBQUFEMEFBQUI2QUFBQWR3QUFBRzBBQUFCWkFBQUFNUUFBQUdJQUFBQkhBQUFBRFFBQUFCb0FBQUEwQUFBQWFBQUFBRk1BQUFBbEFBQUFTZ0FBQUJjQUFBQXVBQUFBWEFBQUFEc0FBQUIyQUFBQWJ3QUFBRjBBQUFBNUFBQUFjZ0FBQUdjQUFBQk5BQUFBR1FBQUFESUFBQUJrQUFBQVN3QUFBQlVBQUFBcUFBQUFWQUFBQUNzQUFBQldBQUFBTHdBQUFGNEFBQUEvQUFBQWZnQUFBSDhBQUFCOUFBQUFlUUFBQUhFQUFBQmhBQUFBUVFBQUFBQUFBQUQvLy8vL0FBQUFBQUVBQUFBSEFBQUFBZ0FBQUE0QUFBQUlBQUFBT0FBQUFBTUFBQUEvQUFBQUR3QUFBQjhBQUFBSkFBQUFXZ0FBQURrQUFBQVZBQUFBQkFBQUFCd0FBQUJBQUFBQVF3QUFBQkFBQUFCd0FBQUFJQUFBQUdFQUFBQUtBQUFBYkFBQUFGc0FBQUJHQUFBQU9nQUFBQ1lBQUFBV0FBQUFMd0FBQUFVQUFBQTJBQUFBSFFBQUFCTUFBQUJCQUFBQVh3QUFBRVFBQUFBdEFBQUFFUUFBQUNzQUFBQnhBQUFBY3dBQUFDRUFBQUJOQUFBQVlnQUFBSFVBQUFBTEFBQUFWd0FBQUcwQUFBQWpBQUFBWEFBQUFFb0FBQUJIQUFBQVR3QUFBRHNBQUFCb0FBQUFKd0FBQUdRQUFBQVhBQUFBVWdBQUFEQUFBQUIzQUFBQUJnQUFBSDRBQUFBM0FBQUFEUUFBQUI0QUFBQStBQUFBRkFBQUFGa0FBQUJDQUFBQUd3QUFBR0FBQUFCdkFBQUFSUUFBQUdzQUFBQXVBQUFBSlFBQUFCSUFBQUExQUFBQUxBQUFBRjRBQUFCeUFBQUFLZ0FBQUhRQUFBQk1BQUFBSWdBQUFGWUFBQUJPQUFBQVNRQUFBR01BQUFCbkFBQUFkZ0FBQUZFQUFBQU1BQUFBZlFBQUFGZ0FBQUE5QUFBQWJnQUFBQm9BQUFBa0FBQUFhZ0FBQUYwQUFBQTBBQUFBU3dBQUFDa0FBQUJJQUFBQVZRQUFBRkFBQUFCbUFBQUFQQUFBQUh3QUFBQnBBQUFBR1FBQUFDZ0FBQUF6QUFBQVpRQUFBRlFBQUFBWUFBQUFld0FBQUZNQUFBQXlBQUFBTVFBQUFIb0FBQUI0QUFBQWVRQUFBRUZTWDFCSldFVk1YMFpQVWsxQlZGOU9Wakl4QUNVelpDd2dKVE5rT2lCdFlYaGZjMmx0SUQwZ0pXWXNJQ2h0WVhnc2JXbHVLU0E5SUNWbUxDQWxaaXdnYzJRZ1BTQWxaZ29BSUNCU1pXRmtJRTFoY210bGNsTmxkQzRLQUVWeWNtOXlJR3h2WVdScGJtY2dTMUJOSUdSaGRHRTZJSFZ1WVdKc1pTQjBieUJ2Y0dWdUlHWnBiR1VnSnlWekpYTWxjeWNnWm05eUlISmxZV1JwYm1jdUNnQlFZV2RsV3lWa1hTQWdjSEpsT2lVelpDd2dZV1owT2lVelpDd2daWEp5YjNJZ1BTQWxaZ29BUVhOelpYSjBhVzl1SUdCa0xtTm9ZVzV1Wld4ektDa2dQVDBnTVdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR1J6ZEM1MGVYQmxLQ2tnUFQwZ1NVMUJSMFZmUmpNeVlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnY0Zzd1hTQStJSEJiTFRGZFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYldGNFgyaGxhV2RvZENBK0lEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCa2MzUmZkMmxrZEdnZ1BpQXdZQ0JtWVdsc1pXUWdhVzRnQUZCNWNtRnRhV1FnYVhNZ1pXMXdkSGtBUVhOelpYSjBhVzl1SUdCemFYcGxJRDRnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSE5qWVd4bElENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVlYSlZkR2xzUjJWMFVHbDRaV3hHYjNKdFlYUk9ZVzFsT2lCRmNuSnZjaXdnZFc1eVpXTnZaMjVwYzJWa0lIQnBlR1ZzSUdadmNtMWhkQ0FvSldRcExnb0FiWEpyQUVWeWNtOXlJR3h2WVdScGJtY2dTMUJOSUdSaGRHRTZJR1Z5Y205eUlISmxZV1JwYm1jZ1pHRjBZUzRLQUVwUVJVY2dabWxzWlNCb1lYTWdkVzV6ZFhCd2IzSjBaV1FnSldRdFkyOXRjRzl1Wlc1MElIQnBlR1ZzY3dvQVQyNXNlU0J6YVc1bmJHVWdZMmhoYm01bGJDQnBiV0ZuWlhNZ2MzVndjRzl5ZEdWa0FFUmxjM1JwYm1GMGFXOXVJR2x0WVdkbElITm9iM1ZzWkNCaVpTQmhJR1pzYjJGMEFFRnpjMlZ5ZEdsdmJpQmdjRnN3WFNBK0lIQmJNVjFnSUdaaGFXeGxaQ0JwYmlBQVRXRjRhVzExYlNCaWFXNGdjMmh2ZFd4a0lHSmxJSEJ2YzJsMGFYWmxBRUZ6YzJWeWRHbHZiaUJnWkhOMFgzTjBaWEFnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnY0hseVlXMXBaQzArYVcxaFoyVnpLQ2xiTUYwdWQybGtkR2dvS1NBOVBTQmtaWFJsWTNSdmNpMCtkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUJ6YVhwbElHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVUyTmhiR1VnYlhWemRDQmlaU0J3YjNOcGRHbDJaUUJQZFhRZ2IyWWdiV1Z0YjNKNUxnb0FSWEp5YjNJZ2IzQmxibWx1WnlCbWFXeGxJQ2NsY3k1dGNtc25MZ29BYTNCdFEyaGhibWRsVUdGblpVNXZUMlpTWldaRVlYUmhVMlYwS0NrNklFNVZURXdnY21WbVJHRjBZVk5sZEM0S0FHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBUVhOelpYSjBhVzl1SUdCcGJURXVZMmhoYm01bGJITW9LU0E5UFNBeFlDQm1ZV2xzWldRZ2FXNGdBRlZ1YTI1dmQyNGdhVzFoWjJVZ2RIbHdaUUJCYzNObGNuUnBiMjRnWUhCYk1GMGdQaUJ3Y0RGYkxURmRZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FHbHpkQ0FoUFNCT1ZVeE1ZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ0tITnlZMTkzYVdSMGFDVXlLU0E5UFNBeFlDQm1ZV2xzWldRZ2FXNGdBRkI1Y21GdGFXUWdZVzVrSUdSbGRHVmpkRzl5SUhOcGVtVWdiV2x6YldGMFkyZ0FRWE56WlhKMGFXOXVJR0J0VW1WbVNXMWhaMlZYYVdSMGFDQStJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnpZMkZzWlNBOElHMU9kVzFUWTJGc1pYTlFaWEpQWTNSaGRtVmdJR1poYVd4bFpDQnBiaUFBSlNVbE1ESjRBQ1ZtSUNWbUlDVm1JQ1ZtQUVGemMyVnlkR2x2YmlCZ2FXMHlMbU5vWVc1dVpXeHpLQ2tnUFQwZ01XQWdabUZwYkdWa0lHbHVJQUJWYm5OMWNIQnZjblJsWkNCcGJXRm5aU0IwZVhCbEFFRnpjMlZ5ZEdsdmJpQmdjRnN3WFNBK0lIQndNVnN3WFdBZ1ptRnBiR1ZrSUdsdUlBQXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZkMlZpWVhKcmFYUXRiM0puTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJSbGRHVmpkRzl5Y3k5dmNtbGxiblJoZEdsdmJsOWhjM05wWjI1dFpXNTBMbWdBVTI5MWNtTmxJSGRwWkhSb0lHMTFjM1FnWW1VZ2IyUmtBRUZ6YzJWeWRHbHZiaUJnY0hseVlXMXBaQzArYVcxaFoyVnpLQ2xiTUYwdWFHVnBaMmgwS0NrZ1BUMGdaR1YwWldOMGIzSXRQbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUhkcFpIUm9JRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFVMk5oYkdVZ2JYVnpkQ0JpWlNCc1pYTnpJSFJvWVc0Z2JuVnRZbVZ5SUc5bUlITmpZV3hsSUhCbGNpQnZZM1JoZG1VQUwzQnliMk12YzJWc1ppOWxlR1VBVkhKaGJuTm1iM0p0WVhScGIyNGdiV0YwY21sNElISmxZV1FnWlhKeWIzSWhJUW9BUVhOelpYSjBhVzl1SUdCa0xuZHBaSFJvS0NrZ1BUMGdhVzB5TG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQVlXeHNiMk5oZEc5eVBGUStPanBoYkd4dlkyRjBaU2h6YVhwbFgzUWdiaWtnSjI0bklHVjRZMlZsWkhNZ2JXRjRhVzExYlNCemRYQndiM0owWldRZ2MybDZaUUJCYzNObGNuUnBiMjRnWUhCYk1GMGdQaUJ3Y0RGYk1WMWdJR1poYVd4bFpDQnBiaUFBU0dsemRHOW5jbUZ0SUhCdmFXNTBaWElnYVhNZ1RsVk1UQUJCYzNObGNuUnBiMjRnWUNoamFIVnVhMTl6YVhwbEpUSXBQVDB3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdZWE56YVdkdWJXVnVkQzV6YVhwbEtDa2dQVDBnYm5WdFgybHVaR2xqWlhOZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0J0VW1WbVNXMWhaMlZJWldsbmFIUWdQaUF3WUNCbVlXbHNaV1FnYVc0Z0FFOWpkR0YyWlNCdmRYUWdiMllnY21GdVoyVUFKWE1sY3dvQWFuQm5BRWx0WVdkbGN5QnRkWE4wSUdoaGRtVWdkR2hsSUhOaGJXVWdkMmxrZEdnQVFYTnpaWEowYVc5dUlHQWhhWE5wYm1Zb2RWc3dYU2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9abUpwYmlzd0xqVm1LU0ErSURBZ0ppWWdLR1ppYVc0dE1DNDFaaWtnUENCdWRXMWZZbWx1YzJBZ1ptRnBiR1ZrSUdsdUlBQlZiblJsYzNSbFpDQmlaV2hoZG1sdmNpQm1iM0lnYjJSa0lHTm9kVzVySUhOcGVtVUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5dFlYUmphR1Z5Y3k5aWFXNWhjbmxmYUdsbGNtRnlZMmhwWTJGc1gyTnNkWE4wWlhKcGJtY3VhQUJvWldsbmFIUWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQlRZMkZzWlNCdmRYUWdiMllnY21GdVoyVUFBRUZ6YzJWeWRHbHZiaUJnWkM1b1pXbG5hSFFvS1NBOVBTQnBiVEl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVNVNUdBRVJsWTJsdFlXd2dZbWx1SUhCdmMybDBhVzl1SUdsdVpHVjRJRzkxZENCdlppQnlZVzVuWlFCWGFXUjBhQ0JwY3lCNlpYSnZBRUZ6YzJsbmJtMWxiblFnYzJsNlpTQjNjbTl1WndBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmQyVmlZWEpyYVhRdGIzSm5MMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMjFoZEdOb1pYSnpMMmh2ZFdkb1gzTnBiV2xzWVhKcGRIbGZkbTkwYVc1bkxtZ0FRWE56WlhKMGFXOXVJR0FvYVc1MEtYTjBaRG82Wm14dmIzSW9lQ2tnUFQwZ0tHbHVkQ2w0WUNCbVlXbHNaV1FnYVc0Z0FDOHVMaTl6YUdGeVpTOGxjd0JKYldGblpYTWdiWFZ6ZENCb1lYWmxJSFJvWlNCellXMWxJR2hsYVdkb2RBQkJjM05sY25ScGIyNGdZQ0ZwYzJsdVppaDFXekZkS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZRzFoWjI1cGRIVmtaU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBRWhsYVdkb2RDQnBjeUI2WlhKdkFFRnpjMlZ5ZEdsdmJpQmdZWE56YVdkdWJXVnVkRnRwWFNBaFBTQXRNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHbHVaR1Y0SUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDNkbFltRnlhMmwwTFc5eVp5OXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOWtaWFJsWTNSdmNuTXZhVzUwWlhKd2IyeGhkR1V1YUFCSVQwMUZBRUZ6YzJWeWRHbHZiaUJnYVcweExuZHBaSFJvS0NrZ1BUMGdhVzB5TG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQVRXRm5ibWwwZFdSbElHTmhibTV2ZENCaVpTQnVaV2RoZEdsMlpRQlRkR1Z3SUdseklIcGxjbThBUVhOemFXZHViV1Z1ZENCcGN5QnBiblpoYkdsa0FHbHVaR1Y0SUc5MWRDQnZaaUJ5WVc1blpRQm1iRzl2Y2lncElHRnVaQ0JqWVhOMElHNXZkQ0IwYUdVZ2MyRnRaUUF2Y0hKdll5OXpaV3htTDJOdFpHeHBibVVBUVhOelpYSjBhVzl1SUdCcGJURXVhR1ZwWjJoMEtDa2dQVDBnYVcweUxtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdlpHVjBaV04wYjNKekwyaGhjbkpwY3kxcGJteHBibVV1YUFCQmMzTmxjblJwYjI0Z1lHNTFiVjlpYVc1eklENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9hVDQrTVNrZ1BDQnpkR1E2T21ObGFXd29LSE55WTE5b1pXbG5hSFF0TVNrdk1pNW1LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHRnpjMmxuYm0xbGJuUmJhVjBnUENCdWRXMWZhVzVrYVdObGMyQWdabUZwYkdWa0lHbHVJQUJoYkd4dlkyRjBiM0k4VkQ0Nk9tRnNiRzlqWVhSbEtITnBlbVZmZENCdUtTQW5iaWNnWlhoalpXVmtjeUJ0WVhocGJYVnRJSE4xY0hCdmNuUmxaQ0J6YVhwbEFFRnpjMlZ5ZEdsdmJpQmdLR2x1ZENsemRHUTZPbVpzYjI5eUtIa3BJRDA5SUNocGJuUXBlV0FnWm1GcGJHVmtJR2x1SUFCeVlnQkViMGNnVUhseVlXMXBaQUJQZFhRZ2IyWWdjbUZ1WjJVQVRuVnRZbVZ5SUdKcGJuTWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQkpibVJsZUNCcGN5QnZkWFFnYjJZZ1ltOTFibVJ6QUVGemMybG5ibTFsYm5RZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnWW1sdVdDQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdlWEFnUGowZ01DQW1KaUI1Y0NBOElHaGxhV2RvZEdBZ1ptRnBiR1ZrSUdsdUlBQWxjem9nSlhNS0FFNXZiaTF0WVhnZ2MzVndjSEpsYzNOcGIyNEFRWE56WlhKMGFXOXVJR0IzTVNBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ2FXMWhaMlV1ZEhsd1pTZ3BJRDA5SUVsTlFVZEZYMVZKVGxRNFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnYVc1a2FXTmxjMXRoYzNOcFoyNXRaVzUwVzJsZFhTQThJRzUxYlY5bVpXRjBkWEpsYzJBZ1ptRnBiR1ZrSUdsdUlBQmlhVzVZSUc5MWRDQnZaaUJ5WVc1blpRQjVjQ0J2ZFhRZ2IyWWdZbTkxYm1SekFGVnVZV0pzWlNCMGJ5QmtaWFJsY20xcGJtVWdjSEp2WTJWemN5QnVZVzFsQUZOMVluQnBlR1ZzQUhjeElHMTFjM1FnWW1VZ2NHOXphWFJwZG1VQVQyNXNlU0JuY21GNUlITmpZV3hsSUdsdFlXZGxjeUJoY21VZ2MzVndjRzl5ZEdWa0FFRnpjMlZ5ZEdsdmJpQmdhWFF0UG5ObFkyOXVaQzV6YVhwbEtDa2dJVDBnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR0pwYmxnZ1BDQnRUblZ0V0VKcGJuTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCNWNGOXdiSFZ6WHpFZ1BqMGdNQ0FtSmlCNWNGOXdiSFZ6WHpFZ1BDQm9aV2xuYUhSZ0lHWmhhV3hsWkNCcGJpQUFKWE1sY3dCd2NuVnVaVVpsWVhSMWNtVnpBRUZ6YzJWeWRHbHZiaUJnZHpJZ1BqMGdNR0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHOWpkR0YyWlNBOElHMU9kVzFQWTNSaGRtVnpZQ0JtWVdsc1pXUWdhVzRnQUVOc2RYTjBaWElnYlhWemRDQm9ZWFpsSUdGMGJHVmhjMlYwSURFZ1ptVmhkSFZ5WlFCQmMzTmxjblJwYjI0Z1lHSnBibGtnUGowZ01HQWdabUZwYkdWa0lHbHVJQUI1Y0Y5d2JIVnpYekVnYjNWMElHOW1JR0p2ZFc1a2N3QXZkbUZ5TDJOaFkyaGxBRVpwYm1RZ1QzSnBaVzUwWVhScGIyNXpBRUZ6YzJWeWRHbHZiaUJnWkhOMFcybGRJRDQ5SUMweU5UZ3dOalJnSUdaaGFXeGxaQ0JwYmlBQWR6SWdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQXZhRzl0WlM5M1lXeDBaWEl2YTJGc2QyRnNkQzFuYVhSb2RXSXZkMlZpWVhKcmFYUXRiM0puTDJwellYSjBiMjlzYTJsMFRrWlVMMlZ0YzJOeWFYQjBaVzR2VjJWaVFWSkxhWFJNYVdJdmJHbGlMMU5TUXk5TFVFMHZSbkpsWVd0TllYUmphR1Z5TDJSbGRHVmpkRzl5Y3k5bllYVnpjMmxoYmw5elkyRnNaVjl6Y0dGalpWOXdlWEpoYldsa0xtZ0FRWE56WlhKMGFXOXVJR0J0U3lBOVBTQnRRMlZ1ZEdWeWN5NXphWHBsS0NsZ0lHWmhhV3hsWkNCcGJpQUFZbWx1V1NCdmRYUWdiMllnY21GdVoyVUFRWE56WlhKMGFXOXVJR0I0Y0NBK1BTQXdJQ1ltSUhod0lEd2dkMmxrZEdoZ0lHWmhhV3hsWkNCcGJpQUFMeTVqWVdOb1pRQkJjM05sY25ScGIyNGdZR2x0TUM1b1pXbG5hSFFvS1NBOVBTQnBiVEV1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmtjM1JiYVYwZ1BEMGdNalU0TURZMFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWWpFZ1BqMGdNQ0FtSmlCaU1TQThJRzUxYlY5aWFXNXpZQ0JtWVdsc1pXUWdhVzRnQUU5amRHRjJaU0J2ZFhRZ2IyWWdjbUZ1WjJVQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwzZGxZbUZ5YTJsMExXOXlaeTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTl0WVhSamFHVnljeTlyYldWa2IybGtjeTVvQUVGemMyVnlkR2x2YmlCZ1ltbHVXU0E4SUcxT2RXMVpRbWx1YzJBZ1ptRnBiR1ZrSUdsdUlBQjRjQ0J2ZFhRZ2IyWWdZbTkxYm1SekFDVnpMeVZ6QUVobGFXZG9kQ0JwY3lCcGJtTnZibk5wYzNSbGJuUUFRWE56WlhKMGFXOXVJR0JrYzNSYmFWMGdQRDBnTkRFeU9UQXlOR0FnWm1GcGJHVmtJR2x1SUFCaU1TQmlhVzRnYVc1a1pYZ2diM1YwSUc5bUlISmhibWRsQUVGemMyVnlkR2x2YmlCZ2MyTmhiR1VnUENCdFRuVnRVMk5oYkdWelVHVnlUMk4wWVhabFlDQm1ZV2xzWldRZ2FXNGdBR3NnYzJodmRXeGtJRzFoZEdOb0lIUm9aU0J1ZFcxaVpYSWdiMllnWTJ4MWMzUmxjaUJqWlc1MFpYSnpBRUZ6YzJWeWRHbHZiaUJnWW1sdVFXNW5iR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhod1gzQnNkWE5mTVNBK1BTQXdJQ1ltSUhod1gzQnNkWE5mTVNBOElIZHBaSFJvWUNCbVlXbHNaV1FnYVc0Z0FDOTJZWEl2YkdsaUFFRnpjMlZ5ZEdsdmJpQmdhVzB3TG1obGFXZG9kQ2dwSUQwOUlHbHRNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHUnpkRnRwWFNBK1BTQXROREV5T1RBeU5HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdJeUlENDlJREFnSmlZZ1lqSWdQQ0J1ZFcxZlltbHVjMkFnWm1GcGJHVmtJR2x1SUFCVFkyRnNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQVFYTnpaWEowYVc5dUlHQnVkVzFmWm1WaGRIVnlaWE1nUGlBd1lDQm1ZV2xzWldRZ2FXNGdBR0pwYmtGdVoyeGxJRzkxZENCdlppQnlZVzVuWlFCNGNGOXdiSFZ6WHpFZ2IzVjBJRzltSUdKdmRXNWtjd0F2TG1OdmJtWnBad0JCYzNObGNuUnBiMjRnWUNocGJURXVhR1ZwWjJoMEtDaytQakVwSUQwOUlHbHRNaTVvWldsbmFIUW9LV0FnWm1GcGJHVmtJR2x1SUFCaGJHeHZZMkYwYjNJOFZENDZPbUZzYkc5allYUmxLSE5wZW1WZmRDQnVLU0FuYmljZ1pYaGpaV1ZrY3lCdFlYaHBiWFZ0SUhOMWNIQnZjblJsWkNCemFYcGxBR0l5SUdKcGJpQnBibVJsZUNCdmRYUWdiMllnY21GdVoyVUFZV3hzYjJOaGRHOXlQRlErT2pwaGJHeHZZMkYwWlNoemFYcGxYM1FnYmlrZ0oyNG5JR1Y0WTJWbFpITWdiV0Y0YVcxMWJTQnpkWEJ3YjNKMFpXUWdjMmw2WlFCT2RXMWlaWElnYjJZZ1ptVmhkSFZ5WlhNZ2JYVnpkQ0JpWlNCd2IzTnBkR2wyWlFCQmMzTmxjblJwYjI0Z1lHSnBia0Z1WjJ4bElEd2diVTUxYlVGdVoyeGxRbWx1YzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGN3SUQ0OUlEQWdKaVlnZHpBZ1BEMGdNUzR3TURBeFlDQm1ZV2xzWldRZ2FXNGdBRlJOVUVSSlVnQkJjM05sY25ScGIyNGdZQ2hwYlRBdWFHVnBaMmgwS0NrK1BqRXBJRDA5SUdsdE1TNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdkNGVDQThQU0EwTVRJNU1ESTBZQ0JtWVdsc1pXUWdhVzRnQUdGc2JHOWpZWFJ2Y2p4VVBqbzZZV3hzYjJOaGRHVW9jMmw2WlY5MElHNHBJQ2R1SnlCbGVHTmxaV1J6SUcxaGVHbHRkVzBnYzNWd2NHOXlkR1ZrSUhOcGVtVUFRWE56WlhKMGFXOXVJR0J1ZFcxZmFXNWthV05sY3lBOFBTQnVkVzFmWm1WaGRIVnlaWE5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmlhVzVUWTJGc1pTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFOTFkQ0J2WmlCeVlXNW5aUUF2ZEcxd0FFRnpjMlZ5ZEdsdmJpQmdLR2x0TUM1b1pXbG5hSFFvS1Q0K01Ta2dQVDBnYVcweUxtaGxhV2RvZENncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWjNoNElENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnliM2NnUENCdFNHVnBaMmgwWUNCbVlXbHNaV1FnYVc0Z0FFMXZjbVVnYVc1a2FXTmxjeUIwYUdGdUlHWmxZWFIxY21WekFHSnBibE5qWVd4bElHOTFkQ0J2WmlCeVlXNW5aUUJCYzNObGNuUnBiMjRnWUhjeElENDlJREFnSmlZZ2R6RWdQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUVWeWNtOXlJR3h2YjJ0cGJtY2dabTl5SUhKbGMyOTFjbU5sY3lCa2FYSmxZM1J2Y25rZ2NHRjBhQUJCYzNObGNuUnBiMjRnWUcxQ2RXTnJaWFJ6TG5OcGVtVW9LU0E5UFNCdFRuVnRRblZqYTJWMGMxaGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCbmVYa2dQRDBnTkRFeU9UQXlOR0FnWm1GcGJHVmtJR2x1SUFBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmQyVmlZWEpyYVhRdGIzSm5MMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlp5WVcxbGQyOXlheTlwYldGblpTNW9BRUZ6YzJWeWRHbHZiaUJnYm5WdFgybHVaR2xqWlhNZ1BqMGdiVXRnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmlhVzVUWTJGc1pTQThJRzFPZFcxVFkyRnNaVUpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTWlBK1BTQXdJQ1ltSUhjeUlEdzlJREV1TURBd01XQWdabUZwYkdWa0lHbHVJQUJGY25KdmNpQmpjbVZoZEdsdVp5QnlaWE52ZFhKalpYTWdaR2x5WldOMGIzSjVJSEJoZEdnQVFuVmphMlYwY3lCaGNtVWdibTkwSUdGc2JHOWpZWFJsWkFCQmMzTmxjblJwYjI0Z1lHZDVlU0ErUFNBd1lDQm1ZV2xzWldRZ2FXNGdBSEp2ZHlCdmRYUWdiMllnWW05MWJtUnpBRTV2ZENCbGJtOTFaMmdnWm1WaGRIVnlaWE1BUVhOelpYSjBhVzl1SUdCcGJtUmxlQ0E4UFNBb1ltbHVXQ0FySUdKcGJsa3FiVTUxYlZoQ2FXNXpJQ3NnWW1sdVFXNW5iR1VxYlU1MWJWaENhVzV6S20xT2RXMVpRbWx1Y3lBcklHSnBibE5qWVd4bEttMU9kVzFZUW1sdWN5cHRUblZ0V1VKcGJuTXFiVTUxYlVGdVoyeGxRbWx1Y3lsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0IzTXlBK1BTQXdJQ1ltSUhjeklEdzlJREV1TURBd01XQWdabUZwYkdWa0lHbHVJQUJGY25KdmNqb2dWVzVoWW14bElIUnZJR05vWVc1blpTQjNiM0pyYVc1bklHUnBjbVZqZEc5eWVTQjBieUFuSlhNbkxnb0FRWE56WlhKMGFXOXVJR0J0UW5WamEyVjBjMXN3WFM1emFYcGxLQ2tnUFQwZ2JVNTFiVUoxWTJ0bGRITlpZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ozaDVJRHc5SURReE1qa3dNalJnSUdaaGFXeGxaQ0JwYmlBQVFYTnphV2R1YldWdWRDQnphWHBsSUdseklHbHVZMjl5Y21WamRBQkJjM05sY25ScGIyNGdZRzRnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0hjd0szY3hLM2N5SzNjektTQThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBV3lVZ0xqTm1JQ1VnTGpObUlDVWdMak5tWFNCYkpTQTJMakZtWFFvQVFYTnpaWEowYVc5dUlHQnRSbVZoZEhWeVpWQnZhVzUwY3k1emFYcGxLQ2tnUEQwZ2JVMWhlRTUxYlVabFlYUjFjbVZRYjJsdWRITmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCbmVIa2dQajBnTFRReE1qa3dNalJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQnVkVzFmWTJWdWRHVnljeUErSURCZ0lHWmhhV3hsWkNCcGJpQUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5MWRHbHNjeTl3WVhKMGFXRnNYM052Y25RdWFBQkJjM05sY25ScGIyNGdZSEJ2Y3lBOVBTQTJOalpnSUdaaGFXeGxaQ0JwYmlBQUFBQURBQUFBQXdBQUFBUUFBQUFFQUFBQUJBQUFBQUVBQUFBRUFBQUFBZ0FBQUFJQUFBQUNBQUFBQWdBQUFBSUFBQUFCQUFBQUFRQUFBQUVBQUFBRUFBQUFpQUFBQUFVQUFBQ1FBQUFBQmdBQUFKZ0FBQUFKQUFBQXNBQUFBQkFIQUFDMUN3QUF2QkVBQURRVUFBQXVhWE5sZEFCeVlnQk9OblpwYzJsdmJqSTFSMkYxYzNOcFlXNVRZMkZzWlZOd1lXTmxVSGx5WVcxcFpFVUFBQURJOUFBQUNWa0FBRlJ2YnlCdFlXNTVJR1psWVhSMWNtVWdjRzlwYm5SekFGUm9aWEpsSUcxMWMzUWdZbVVnWVhRZ2JHVmhjM1FnTVNCalpXNTBaWElBYmlCdGRYTjBJR0psSUhCdmMybDBhWFpsQUZCdmMybDBhVzl1SUdseklHNXZkQ0IzYVhSb2FXNGdjbUZ1WjJVQVFYTnpaWEowYVc5dUlHQnJjQzV6WTJGc1pTQThJRzFNWVhCc1lXTnBZVzVRZVhKaGJXbGtMbTUxYlZOallXeGxVR1Z5VDJOMFlYWmxLQ2xnSUdaaGFXeGxaQ0JwYmlBQVd5VnpYU0JiSlhOZElGc2xjMTBnT2lCR2IzVnVaQ0FsWkNCbVpXRjBkWEpsY3lCcGJpQnhkV1Z5ZVFCQmMzTmxjblJwYjI0Z1lHc2dQaUF3WUNCbVlXbHNaV1FnYVc0Z0FFWmxZWFIxY21VZ2NHOXBiblFnYzJOaGJHVWdhWE1nYjNWMElHOW1JR0p2ZFc1a2N3QkdhVzVrSUUxaGRHTm9aWE1nS0RFcEFHc2diWFZ6ZENCaVpTQndiM05wZEdsMlpRQkJjM05sY25ScGIyNGdZR3R3TG5OamIzSmxJRDA5SUd4aGNERXVaMlYwUEdac2IyRjBQaWg1S1Z0NFhXQWdabUZwYkdWa0lHbHVJQUJJYjNWbmFDQldiM1JwYm1jZ0tERXBBRk5qYjNKbElHbHpJRzV2ZENCamIyNXphWE4wWlc1MElIZHBkR2dnZEdobElFUnZSeUJwYldGblpRQkdhVzVrSUVodmRXZG9JRTFoZEdOb1pYTWdLREVwQUVGemMyVnlkR2x2YmlCZ1luVmphMlYwV3pCZExtWnBjbk4wSUQ0OUlHSjFZMnRsZEZ0dVhTNW1hWEp6ZEdBZ1ptRnBiR1ZrSUdsdUlBQkZjM1JwYldGMFpTQkliMjF2WjNKaGNHaDVJQ2d4S1FCdWRHaGZaV3hsYldWdWRDQm1ZV2xzWldRQVJtbHVaQ0JKYm14cFpYSnpJQ2d4S1FCQmMzTmxjblJwYjI0Z1lHOWpkR0YyWlNBOElHMU9kVzFQWTNSaGRtVnpZQ0JtWVdsc1pXUWdhVzRnQUVacGJtUWdUV0YwWTJobGN5QW9NaWtBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDNkbFltRnlhMmwwTFc5eVp5OXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOWtaWFJsWTNSdmNuTXZaMkYxYzNOcFlXNWZjMk5oYkdWZmMzQmhZMlZmY0hseVlXMXBaQzVvQUVodmRXZG9JRlp2ZEdsdVp5QW9NaWtBVDJOMFlYWmxJRzkxZENCdlppQnlZVzVuWlFCR2FXNWtJRWh2ZFdkb0lFMWhkR05vWlhNZ0tESXBBRUZ6YzJWeWRHbHZiaUJnYzJOaGJHVWdQQ0J0VG5WdFUyTmhiR1Z6VUdWeVQyTjBZWFpsWUNCbVlXbHNaV1FnYVc0Z0FFVnpkR2x0WVhSbElFaHZiVzluY21Gd2FIa2dLRElwQUZOallXeGxJRzkxZENCdlppQnlZVzVuWlFCR2FXNWtJRWx1YkdsbGNuTWdLRElwQUVGemMyVnlkR2x2YmlCZ2FXNWtaWGdnUENCdFNXMWhaMlZ6TG5OcGVtVW9LV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lHSmxjM1JmYVc1a1pYZ2dJVDBnYzNSa09qcHVkVzFsY21salgyeHBiV2wwY3p4emFYcGxYM1ErT2pwdFlYZ29LV0FnWm1GcGJHVmtJR2x1SUFBdmFHOXRaUzkzWVd4MFpYSXZhMkZzZDJGc2RDMW5hWFJvZFdJdmQyVmlZWEpyYVhRdGIzSm5MMnB6WVhKMGIyOXNhMmwwVGtaVUwyVnRjMk55YVhCMFpXNHZWMlZpUVZKTGFYUk1hV0l2YkdsaUwxTlNReTlMVUUwdlJuSmxZV3ROWVhSamFHVnlMMlJsZEdWamRHOXljeTlFYjBkZmMyTmhiR1ZmYVc1MllYSnBZVzUwWDJSbGRHVmpkRzl5TG1nQUwyaHZiV1V2ZDJGc2RHVnlMMnRoYkhkaGJIUXRaMmwwYUhWaUwzZGxZbUZ5YTJsMExXOXlaeTlxYzJGeWRHOXZiR3RwZEU1R1ZDOWxiWE5qY21sd2RHVnVMMWRsWWtGU1MybDBUR2xpTDJ4cFlpOVRVa012UzFCTkwwWnlaV0ZyVFdGMFkyaGxjaTl0WVhSamFHVnljeTltWldGMGRYSmxYMjFoZEdOb1pYSXRhVzVzYVc1bExtZ0FTVzVrWlhnZ2FYTWdiM1YwSUc5bUlISmhibWRsQUZOdmJXVjBhR2x1WnlCemRISmhibWRsQUVGemMyVnlkR2x2YmlCZ2MyTmhiR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUcxTllYUmphR1Z6TG5OcGVtVW9LU0E4UFNCbVpXRjBkWEpsY3pFdFBuTnBlbVVvS1dBZ1ptRnBiR1ZrSUdsdUlBQlRZMkZzWlNCdGRYTjBJR0psSUhCdmMybDBhWFpsQUU1MWJXSmxjaUJ2WmlCdFlYUmphR1Z6SUhOb2IzVnNaQ0JpWlNCc2IzZGxjZ0JUWTJGc1pTQnRkWE4wSUdKbElHeGxjM01nZEdoaGJpQnVkVzFpWlhJZ2IyWWdjMk5oYkdVZ2NHVnlJRzlqZEdGMlpRQkJjM05sY25ScGIyNGdZRzFTYjI5MExtZGxkQ2dwWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiR0Z3TUM1b1pXbG5hSFFvS1NBOVBTQnNZWEF4TG1obGFXZG9kQ2dwSUQwOUlHeGhjREl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVVtOXZkQ0JqWVc1dWIzUWdZbVVnVGxWTVRBQlhhV1IwYUM5b1pXbG5hSFFnWVhKbElHNXZkQ0JqYjI1emFYTjBaVzUwQUVGemMyVnlkR2x2YmlCZ2JXbHVhU0FoUFNBdE1XQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUNoc1lYQXdMbWhsYVdkb2RDZ3BJRDA5SUd4aGNERXVhR1ZwWjJoMEtDa3BJQ1ltSUNnb2JHRndNUzVvWldsbmFIUW9LVDQrTVNrZ1BUMGdiR0Z3TWk1b1pXbG5hSFFvS1NsZ0lHWmhhV3hsWkNCcGJpQUFUV2x1YVcxMWJTQnBibVJsZUNCdWIzUWdjMlYwQUVGemMyVnlkR2x2YmlCZ0tDaHNZWEF3TG5kcFpIUm9LQ2srUGpFcElEMDlJR3hoY0RFdWQybGtkR2dvS1NrZ0ppWWdLR3hoY0RFdWQybGtkR2dvS1NBOVBTQnNZWEF5TG5kcFpIUm9LQ2twWUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiaUE4UFNCcGJsOXRZWFJqYUdWekxuTnBlbVVvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZREJnSUdaaGFXeGxaQ0JwYmlBQVUyaHZkV3hrSUdKbElIUm9aU0J6WVcxbEFFbHRZV2RsSUhOcGVtVnpJR0Z5WlNCcGJtTnZibk5wYzNSbGJuUUFRWE56WlhKMGFXOXVJR0JpYVc1WUlENDlJREJnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQW9lQzB4S1NBK1BTQXdJQ1ltSUNoNEt6RXBJRHdnYkdGd01TNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBQzlvYjIxbEwzZGhiSFJsY2k5cllXeDNZV3gwTFdkcGRHaDFZaTkzWldKaGNtdHBkQzF2Y21jdmFuTmhjblJ2YjJ4cmFYUk9SbFF2WlcxelkzSnBjSFJsYmk5WFpXSkJVa3RwZEV4cFlpOXNhV0l2VTFKREwwdFFUUzlHY21WaGEwMWhkR05vWlhJdmJXRjBZMmhsY25NdmFHOTFaMmhmYzJsdGFXeGhjbWwwZVY5MmIzUnBibWN1YUFCNElHOTFkQ0J2WmlCaWIzVnVaSE1BWW1sdVdDQnZkWFFnYjJZZ2NtRnVaMlVBUVhOelpYSjBhVzl1SUdBb2VTMHhLU0ErUFNBd0lDWW1JQ2g1S3pFcElEd2diR0Z3TVM1b1pXbG5hSFFvS1dBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZR0pwYmxnZ1BDQnRUblZ0V0VKcGJuTmdJR1poYVd4bFpDQnBiaUFBZVNCdmRYUWdiMllnWW05MWJtUnpBRUZ6YzJWeWRHbHZiaUJnWW1sdVdTQStQU0F3WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdiR0Z3TUM1M2FXUjBhQ2dwSUQwOUlHeGhjREV1ZDJsa2RHZ29LV0FnWm1GcGJHVmtJR2x1SUFCaWFXNVpJRzkxZENCdlppQnlZVzVuWlFCSmJXRm5aU0JrYVcxbGJuTnBiMjV6SUdsdVkyOXVjMmx6ZEdWdWRBQkJjM05sY25ScGIyNGdZR0pwYmxrZ1BDQnRUblZ0V1VKcGJuTmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCc1lYQXdMbmRwWkhSb0tDa2dQVDBnYkdGd01pNTNhV1IwYUNncFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnWW1sdVFXNW5iR1VnUGowZ01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUd4aGNEQXVhR1ZwWjJoMEtDa2dQVDBnYkdGd01TNW9aV2xuYUhRb0tXQWdabUZwYkdWa0lHbHVJQUJpYVc1QmJtZHNaU0J2ZFhRZ2IyWWdjbUZ1WjJVQVFYTnpaWEowYVc5dUlHQnNZWEF3TG1obGFXZG9kQ2dwSUQwOUlHeGhjREl1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQmlhVzVCYm1kc1pTQThJRzFPZFcxQmJtZHNaVUpwYm5OZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0FvZUMweEtTQStQU0F3SUNZbUlDaDRLekVwSUR3Z2FXMHVkMmxrZEdnb0tXQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUdKcGJsTmpZV3hsSUQ0OUlEQmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdBb2VTMHhLU0ErUFNBd0lDWW1JQ2g1S3pFcElEd2dhVzB1YUdWcFoyaDBLQ2xnSUdaaGFXeGxaQ0JwYmlBQVltbHVVMk5oYkdVZ2IzVjBJRzltSUhKaGJtZGxBRUZ6YzJWeWRHbHZiaUJnS0d4aGNEQXVkMmxrZEdnb0tUNCtNU2tnUFQwZ2JHRndNaTUzYVdSMGFDZ3BZQ0JtWVdsc1pXUWdhVzRnQUVGemMyVnlkR2x2YmlCZ1ltbHVVMk5oYkdVZ1BDQnRUblZ0VTJOaGJHVkNhVzV6WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdLR3hoY0RBdWFHVnBaMmgwS0NrK1BqRXBJRDA5SUd4aGNESXVhR1ZwWjJoMEtDbGdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCa2FYTjBRbWx1UVc1bmJHVWdQajBnTUdBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZSGhmWkdsMlh6SXRNQzQxWmlBK1BTQXdZQ0JtWVdsc1pXUWdhVzRnQUdScGMzUkNhVzVCYm1kc1pTQnRkWE4wSUc1dmRDQmlaU0J1WldkaGRHbDJaUUI0WDJScGRsOHlJRzkxZENCdlppQmliM1Z1WkhNZ2IzVjBJRzltSUdKdmRXNWtjeUJtYjNJZ2FXNTBaWEp3YjJ4aGRHbHZiZ0JCYzNObGNuUnBiMjRnWUdoNWNDNXphWHBsS0NrZ1BqMGdPU3B0WVhoZmJuVnRYMmg1Y0c5MGFHVnpaWE5nSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjVYMlJwZGw4eUxUQXVOV1lnUGowZ01HQWdabUZwYkdWa0lHbHVJQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyaHZiVzluY21Gd2FIbGZaWE4wYVcxaGRHbHZiaTl5YjJKMWMzUmZhRzl0YjJkeVlYQm9lUzVvQUhsZlpHbDJYeklnYjNWMElHOW1JR0p2ZFc1a2N5QnZkWFFnYjJZZ1ltOTFibVJ6SUdadmNpQnBiblJsY25CdmJHRjBhVzl1QUdoNWNDQjJaV04wYjNJZ2MyaHZkV3hrSUdKbElHOW1JSE5wZW1VZ09TcHRZWGhmYm5WdFgyaDVjRzkwYUdWelpYTUFRWE56WlhKMGFXOXVJR0I0WDJScGRsOHlLekF1TldZZ1BDQnNZWEF5TG5kcFpIUm9LQ2xnSUdaaGFXeGxaQ0JwYmlBQVFYTnpaWEowYVc5dUlHQjBiWEJmYVM1emFYcGxLQ2tnUGowZ2JuVnRYM0J2YVc1MGMyQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhsZlpHbDJYeklyTUM0MVppQThJR3hoY0RJdWFHVnBaMmgwS0NsZ0lHWmhhV3hsWkNCcGJpQUFkRzF3WDJrZ2RtVmpkRzl5SUhOb2IzVnNaQ0JpWlNCdlppQnphWHBsSUc1MWJWOXdiMmx1ZEhNQVFYTnpaWEowYVc5dUlHQW9iR0Z3TUM1M2FXUjBhQ2dwUGo0eEtTQTlQU0JzWVhBeExuZHBaSFJvS0NsZ0lHWmhhV3hsWkNCcGJpQUFRWE56WlhKMGFXOXVJR0JvZVhCZlkyOXpkSE11YzJsNlpTZ3BJRDQ5SUcxaGVGOXVkVzFmYUhsd2IzUm9aWE5sYzJBZ1ptRnBiR1ZrSUdsdUlBQkJjM05sY25ScGIyNGdZQ2hzWVhBd0xtaGxhV2RvZENncFBqNHhLU0E5UFNCc1lYQXhMbWhsYVdkb2RDZ3BZQ0JtWVdsc1pXUWdhVzRnQUdoNWNGOWpiM04wY3lCMlpXTjBiM0lnYzJodmRXeGtJR0psSUc5bUlITnBlbVVnYldGNFgyNTFiVjlvZVhCdmRHaGxjMlZ6QUdGc2JHOWpZWFJ2Y2p4VVBqbzZZV3hzYjJOaGRHVW9jMmw2WlY5MElHNHBJQ2R1SnlCbGVHTmxaV1J6SUcxaGVHbHRkVzBnYzNWd2NHOXlkR1ZrSUhOcGVtVUFRWE56WlhKMGFXOXVJR0J1SUQ0Z01HQWdabUZwYkdWa0lHbHVJQUJCYzNObGNuUnBiMjRnWUhKdmR5QThJRzFJWldsbmFIUmdJR1poYVd4bFpDQnBiaUFBTDJodmJXVXZkMkZzZEdWeUwydGhiSGRoYkhRdFoybDBhSFZpTDNkbFltRnlhMmwwTFc5eVp5OXFjMkZ5ZEc5dmJHdHBkRTVHVkM5bGJYTmpjbWx3ZEdWdUwxZGxZa0ZTUzJsMFRHbGlMMnhwWWk5VFVrTXZTMUJOTDBaeVpXRnJUV0YwWTJobGNpOTFkR2xzY3k5d1lYSjBhV0ZzWDNOdmNuUXVhQUF2YUc5dFpTOTNZV3gwWlhJdmEyRnNkMkZzZEMxbmFYUm9kV0l2ZDJWaVlYSnJhWFF0YjNKbkwycHpZWEowYjI5c2EybDBUa1pVTDJWdGMyTnlhWEIwWlc0dlYyVmlRVkpMYVhSTWFXSXZiR2xpTDFOU1F5OUxVRTB2Um5KbFlXdE5ZWFJqYUdWeUwyWnlZVzFsZDI5eWF5OXBiV0ZuWlM1b0FHNGdiWFZ6ZENCaVpTQndiM05wZEdsMlpRQnliM2NnYjNWMElHOW1JR0p2ZFc1a2N3QkJjM05sY25ScGIyNGdZR3NnUGlBd1lDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnS0dsdWRDbHpkR1E2T21ac2IyOXlLSGdwSUQwOUlDaHBiblFwZUdBZ1ptRnBiR1ZrSUdsdUlBQnJJRzExYzNRZ1ltVWdjRzl6YVhScGRtVUFMMmh2YldVdmQyRnNkR1Z5TDJ0aGJIZGhiSFF0WjJsMGFIVmlMM2RsWW1GeWEybDBMVzl5Wnk5cWMyRnlkRzl2Ykd0cGRFNUdWQzlsYlhOamNtbHdkR1Z1TDFkbFlrRlNTMmwwVEdsaUwyeHBZaTlUVWtNdlMxQk5MMFp5WldGclRXRjBZMmhsY2k5a1pYUmxZM1J2Y25NdmFXNTBaWEp3YjJ4aGRHVXVhQUJCYzNObGNuUnBiMjRnWURCZ0lHWmhhV3hsWkNCcGJpQUFabXh2YjNJb0tTQmhibVFnWTJGemRDQnViM1FnZEdobElITmhiV1VBUm1GcGJHVmtJSFJ2SUdOdmJYQjFkR1VnYldGMGNtbDRJR2x1ZG1WeWMyVUFRWE56WlhKMGFXOXVJR0FvYVc1MEtYTjBaRG82Wm14dmIzSW9lU2tnUFQwZ0tHbHVkQ2w1WUNCbVlXbHNaV1FnYVc0Z0FFRnpjMlZ5ZEdsdmJpQmdlWEFnUGowZ01DQW1KaUI1Y0NBOElHaGxhV2RvZEdBZ1ptRnBiR1ZrSUdsdUlBQjVjQ0J2ZFhRZ2IyWWdZbTkxYm1SekFFRnpjMlZ5ZEdsdmJpQmdlWEJmY0d4MWMxOHhJRDQ5SURBZ0ppWWdlWEJmY0d4MWMxOHhJRHdnYUdWcFoyaDBZQ0JtWVdsc1pXUWdhVzRnQUhsd1gzQnNkWE5mTVNCdmRYUWdiMllnWW05MWJtUnpBRUZ6YzJWeWRHbHZiaUJnZUhBZ1BqMGdNQ0FtSmlCNGNDQThJSGRwWkhSb1lDQm1ZV2xzWldRZ2FXNGdBSGh3SUc5MWRDQnZaaUJpYjNWdVpITUFRWE56WlhKMGFXOXVJR0I0Y0Y5d2JIVnpYekVnUGowZ01DQW1KaUI0Y0Y5d2JIVnpYekVnUENCM2FXUjBhR0FnWm1GcGJHVmtJR2x1SUFCNGNGOXdiSFZ6WHpFZ2IzVjBJRzltSUdKdmRXNWtjd0JCYzNObGNuUnBiMjRnWUhjd0lENDlJREFnSmlZZ2R6QWdQRDBnTVM0d01EQXhZQ0JtWVdsc1pXUWdhVzRnQUU5MWRDQnZaaUJ5WVc1blpRQkJjM05sY25ScGIyNGdZSGN4SUQ0OUlEQWdKaVlnZHpFZ1BEMGdNUzR3TURBeFlDQm1ZV2xzWldRZ2FXNGdBRUZ6YzJWeWRHbHZiaUJnZHpJZ1BqMGdNQ0FtSmlCM01pQThQU0F4TGpBd01ERmdJR1poYVd4bFpDQnBiaUFBUVhOelpYSjBhVzl1SUdCM015QStQU0F3SUNZbUlIY3pJRHc5SURFdU1EQXdNV0FnWm1GcGJHVmtJR2x1SUFCQmMzTmxjblJwYjI0Z1lDaDNNQ3QzTVN0M01pdDNNeWtnUEQwZ01TNHdNREF4WUNCbVlXbHNaV1FnYVc0Z0FBQUFBQUFBQURCWkFBQVFBQUFBRVFBQUFBQUFBQUJJYndBQUVnQUFBQk1BQUFCT05uWnBjMmx2YmpsRmVHTmxjSFJwYjI1RkFQRDBBQUFJYndBQS9QRUFBRTQyZG1semFXOXVNVGhDYVc1dmJXbGhiRkI1Y21GdGFXUXpNbVpGQUFBQThQUUFBQ2h2QUFBd1dRQUFBQUFBQUJ4dkFBQU9BQUFBRkFBQUFCVUFBQUM1VW93K2pscm5QcmxTakQ0QUFBQUFBQUFBQVB4dkFBQVdBQUFBRndBQUFCZ0FBQUFaQUFBQUdnQUFBRTVUZEROZlh6SXlNRjlmYzJoaGNtVmtYM0IwY2w5d2IybHVkR1Z5U1ZCT05uWnBjMmx2YmpoTFpYbG1jbUZ0WlVsTWFUazJSVVZGVGxOZk1UUmtaV1poZFd4MFgyUmxiR1YwWlVsVE0xOUZSVTVUWHpsaGJHeHZZMkYwYjNKSlV6TmZSVVZGUlFBQThQUUFBSlJ2QUFCUThRQUFUbE4wTTE5Zk1qRTBaR1ZtWVhWc2RGOWtaV3hsZEdWSlRqWjJhWE5wYjI0NFMyVjVabkpoYldWSlRHazVOa1ZGUlVWRkFHSnZiMndnZG1semFXOXVPanBXYVhOMVlXeEVZWFJoWW1GelpUeDJhWE5wYjI0Nk9rWlNSVUZMUlhoMGNtRmpkRzl5TENCMmFYTnBiMjQ2T2tKcGJtRnllVVpsWVhSMWNtVlRkRzl5WlN3Z2RtbHphVzl1T2pwQ2FXNWhjbmxHWldGMGRYSmxUV0YwWTJobGNqdzVOajQrT2pweGRXVnllU2hqYjI1emRDQjJhWE5wYjI0Nk9rZGhkWE56YVdGdVUyTmhiR1ZUY0dGalpWQjVjbUZ0YVdRZ0tpa2dXMFpGUVZSVlVrVmZSVmhVVWtGRFZFOVNJRDBnZG1semFXOXVPanBHVWtWQlMwVjRkSEpoWTNSdmNpd2dVMVJQVWtVZ1BTQjJhWE5wYjI0Nk9rSnBibUZ5ZVVabFlYUjFjbVZUZEc5eVpTd2dUVUZVUTBoRlVpQTlJSFpwYzJsdmJqbzZRbWx1WVhKNVJtVmhkSFZ5WlUxaGRHTm9aWEk4T1RZK1hRQUFBQUFBQUFBQXNyNjVQaExjb0w2UXZqaytFdHlndnBDK09iNEFBQUNBc3I2NXZoTGNvRDZRdmptK0V0eWdQcEMrT1Q3U2NoaS9BQUFBQU5KeW1MNDZCZ1MvMG5LWVBqb0dCTC9TY2hnL0FBQUFnTkp5bUQ0NkJnUS8wbktZdmpvR0JEOEFBQUNBVnJnOXYyWk5KRDlXdUwyK1prMGtQMWE0dlQ0QUFBQUFWcmc5UDJaTkpMOVd1TDArWmswa3YxYTR2YjRNNlZnL0FBQUFnQXpwMkQ2WjJUcy9ET25ZdnBuWk96OE02VmkvQUFBQUFBenAyTDZaMlR1L0RPbllQcG5aTzc4QUFBQUEvRk51UC9GbFRyOE5WTzQrOFdWT3Z3MVU3cjRBQUFDQS9GTnV2L0ZsVGo4TlZPNis4V1ZPUHcxVTdqNEFBSUMvQUFBQUFBQUFBTC9RczEyL0FBQUFQOUN6WGI4QUFJQS9BQUFBZ0FBQUFEL1FzMTAvQUFBQXY5Q3pYVDhBQUFBQTZISUFBQllBQUFBYkFBQUFIQUFBQUIwQUFBQWVBQUFBVGxOME0xOWZNakl3WDE5emFHRnlaV1JmY0hSeVgzQnZhVzUwWlhKSlVHZ3hOazUxYkd4QmNuSmhlVVJsYkdWMFpYSkphRVZPVTE4NVlXeHNiMk5oZEc5eVNXaEZSVVZGQUFBQUFQRDBBQUNjY2dBQVVQRUFBREUyVG5Wc2JFRnljbUY1UkdWc1pYUmxja2xvUlFBQUFBQUFBQUIwY3dBQUZnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQk9VM1F6WDE4eU1qQmZYM05vWVhKbFpGOXdkSEpmY0c5cGJuUmxja2xRYUU1VFh6RTBaR1ZtWVhWc2RGOWtaV3hsZEdWSmFFVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsb1JVVkZSUUFBOFBRQUFDaHpBQUJROFFBQVRsTjBNMTlmTWpFMFpHVm1ZWFZzZEY5a1pXeGxkR1ZKYUVWRkFIWnBjMmx2YmpvNlUyTnZjR1ZrVkdsdFpYSTZPbjVUWTI5d1pXUlVhVzFsY2lncEFHRnlSbWxzZEdWeVZISmhibk5OWVhRZ1pYSnliM0lnZDJsMGFDQnRZWEpyWlhJZ0pXUXVDZ0JVY21GamEybHVaeUJzYjNOMExpQWxaQW9BVkhKaFkydGxaQ0J3WVdkbElDVmtJQ2h0WVhnZ0pXUXBMZ29BYVdSa1pHUmtaR1JrWkdSa1pHUUFhUUJGY25KdmNqb2dZWEl5UTNKbFlYUmxTR0Z1Wkd4bExnb0FiRzloWkVOaGJXVnlZU2dwT2lCRmNuSnZjaUJzYjJGa2FXNW5JSEJoY21GdFpYUmxjaUJtYVd4bElDVnpJR1p2Y2lCallXMWxjbUV1Q2dBcUtpb2dRMkZ0WlhKaElGQmhjbUZ0WlhSbGNpQnlaWE5wZW1Wa0lHWnliMjBnSldRc0lDVmtMaUFxS2lvS0FITmxkRU5oYldWeVlTZ3BPaUJGY25KdmNqb2dZWEpRWVhKaGJVeFVRM0psWVhSbExnb0FjMlYwUTJGdFpYSmhLQ2s2SUVWeWNtOXlPaUJoY2tOeVpXRjBaVWhoYm1Sc1pTNEtBSE5sZEVOaGJXVnlZU2dwT2lCRmNuSnZjaUJqY21WaGRHbHVaeUF6UkNCb1lXNWtiR1VBUlhKeWIzSWdaWGhqWldWa0lHMWhlR2x0ZFcwZ2NHRm5aWE1LQUdGa1pDQk9SbFFnYldGeWEyVnlMU0FuSlhNbklBb0FVbVZoWkdsdVp5QWxjeTVtYzJWME13b0Fabk5sZERNQVJYSnliM0lnY21WaFpHbHVaeUJMVUUwZ1pHRjBZU0JtY205dElDVnpMbVp6WlhRekNnQWdJRUZ6YzJsbmJtVmtJSEJoWjJVZ2JtOHVJQ1ZrTGdvQVJYSnliM0k2SUd0d2JVTm9ZVzVuWlZCaFoyVk9iMDltVW1WbVJHRjBZVk5sZEFvQVJYSnliM0k2SUd0d2JVMWxjbWRsVW1WbVJHRjBZVk5sZEFvQVJHOXVaUzRLQUZKbFlXUnBibWNnSlhNdVpuTmxkQW9BWm5ObGRBQkZjbkp2Y2lCeVpXRmthVzVuSUdSaGRHRWdabkp2YlNBbGN5NW1jMlYwQ2dCT1JsUWdiblZ0TGlCdlppQkpiV0ZuWlZObGREb2dKV2tLQUU1R1ZDQnRZWEpyWlhJZ2QybGtkR2c2SUNWcENnQk9SbFFnYldGeWEyVnlJR2hsYVdkb2REb2dKV2tLQUU1R1ZDQnRZWEpyWlhJZ1pIQnBPaUFsYVFvQVJYSnliM0k2SUd0d2JWTmxkRkpsWmtSaGRHRlRaWFFLQUV4dllXUnBibWNnYjJZZ1RrWlVJR1JoZEdFZ1kyOXRjR3hsZEdVdUNnQlVhSEpsYzJodmJHUWdjMlYwSUhSdklDVmtDZ0JVYUhKbGMyaHZiR1FnYlc5a1pTQnpaWFFnZEc4Z0pXUUtBRVJsWW5WbklHMXZaR1VnYzJWMElIUnZJQ1Z6Q2dCdmJpNEFiMlptTGdCSmJXRm5aU0J3Y205akxpQnRiMlJsSUhObGRDQjBieUFsWkM0S0FFRnNiRzlqWVhSbFpDQjJhV1JsYjBaeVlXMWxVMmw2WlNBbFpBb0FhV2xwYVdscEFGTjBjbWx1WjB4cGMzUUFTVzUwVEdsemRBQnpaWFIxY0FCMFpXRnlaRzkzYmdCelpYUjFjRUZTTWdCZllXUmtUa1pVVFdGeWEyVnljd0JmYkc5aFpFTmhiV1Z5WVFCa1pYUmxZM1JOWVhKclpYSUFaR1YwWldOMFRrWlVUV0Z5YTJWeUFHZGxkRTVHVkUxaGNtdGxjZ0JuWlhST1JsUkVZWFJoQUc1bWRFMWhjbXRsY2dCcFpBQjNhV1IwYUFCb1pXbG5hSFFBWkhCcEFITmxkRVJsWW5WblRXOWtaUUJuWlhSRVpXSjFaMDF2WkdVQVoyVjBVSEp2WTJWemMybHVaMGx0WVdkbEFITmxkRXh2WjB4bGRtVnNBR2RsZEV4dloweGxkbVZzQUhObGRGQnliMnBsWTNScGIyNU9aV0Z5VUd4aGJtVUFaMlYwVUhKdmFtVmpkR2x2Yms1bFlYSlFiR0Z1WlFCelpYUlFjbTlxWldOMGFXOXVSbUZ5VUd4aGJtVUFaMlYwVUhKdmFtVmpkR2x2YmtaaGNsQnNZVzVsQUhObGRGUm9jbVZ6YUc5c1pFMXZaR1VBWjJWMFZHaHlaWE5vYjJ4a1RXOWtaUUJ6WlhSVWFISmxjMmh2YkdRQVoyVjBWR2h5WlhOb2IyeGtBSE5sZEVsdFlXZGxVSEp2WTAxdlpHVUFaMlYwU1cxaFoyVlFjbTlqVFc5a1pRQkZVbEpQVWw5QlVrTlBUbFJTVDB4TVJWSmZUazlVWDBaUFZVNUVBRVZTVWs5U1gwMVZURlJKVFVGU1MwVlNYMDVQVkY5R1QxVk9SQUJGVWxKUFVsOU5RVkpMUlZKZlNVNUVSVmhmVDFWVVgwOUdYMEpQVlU1RVV3QkJVbDlFUlVKVlIxOUVTVk5CUWt4RkFFRlNYMFJGUWxWSFgwVk9RVUpNUlFCQlVsOUVSVVpCVlV4VVgwUkZRbFZIWDAxUFJFVUFRVkpmUkVWR1FWVk1WRjlNUVVKRlRFbE9SMTlVU0ZKRlUwZ0FRVkpmU1UxQlIwVmZVRkpQUTE5R1VrRk5SVjlKVFVGSFJRQkJVbDlKVFVGSFJWOVFVazlEWDBaSlJVeEVYMGxOUVVkRkFFRlNYMFJGUmtGVlRGUmZTVTFCUjBWZlVGSlBRMTlOVDBSRkFFRlNYMDFCV0Y5TVQwOVFYME5QVlU1VUFFRlNYMHhQVDFCZlFsSkZRVXRmVkVoU1JWTklBRUZTWDB4UFIxOU1SVlpGVEY5RVJVSlZSd0JCVWw5TVQwZGZURVZXUlV4ZlNVNUdUd0JCVWw5TVQwZGZURVZXUlV4ZlYwRlNUZ0JCVWw5TVQwZGZURVZXUlV4ZlJWSlNUMUlBUVZKZlRFOUhYMHhGVmtWTVgxSkZURjlKVGtaUEFFRlNYMHhCUWtWTVNVNUhYMVJJVWtWVFNGOU5UMFJGWDAxQlRsVkJUQUJCVWw5TVFVSkZURWxPUjE5VVNGSkZVMGhmVFU5RVJWOUJWVlJQWDAxRlJFbEJUZ0JCVWw5TVFVSkZURWxPUjE5VVNGSkZVMGhmVFU5RVJWOUJWVlJQWDA5VVUxVUFRVkpmVEVGQ1JVeEpUa2RmVkVoU1JWTklYMDFQUkVWZlFWVlVUMTlCUkVGUVZFbFdSUUJCVWw5TlFWSkxSVkpmU1U1R1QxOURWVlJQUmtaZlVFaEJVMFZmVGs5T1JRQkJVbDlOUVZKTFJWSmZTVTVHVDE5RFZWUlBSa1pmVUVoQlUwVmZVRUZVVkVWU1RsOUZXRlJTUVVOVVNVOU9BRUZTWDAxQlVrdEZVbDlKVGtaUFgwTlZWRTlHUmw5UVNFRlRSVjlOUVZSRFNGOUhSVTVGVWtsREFFRlNYMDFCVWt0RlVsOUpUa1pQWDBOVlZFOUdSbDlRU0VGVFJWOU5RVlJEU0Y5RFQwNVVVa0ZUVkFCQlVsOU5RVkpMUlZKZlNVNUdUMTlEVlZSUFJrWmZVRWhCVTBWZlRVRlVRMGhmUWtGU1EwOUVSVjlPVDFSZlJrOVZUa1FBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDAxQlZFTklYMEpCVWtOUFJFVmZSVVJEWDBaQlNVd0FRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMDFCVkVOSVgwTlBUa1pKUkVWT1EwVUFRVkpmVFVGU1MwVlNYMGxPUms5ZlExVlVUMFpHWDFCSVFWTkZYMUJQVTBWZlJWSlNUMUlBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDFCUFUwVmZSVkpTVDFKZlRWVk1WRWtBUVZKZlRVRlNTMFZTWDBsT1JrOWZRMVZVVDBaR1gxQklRVk5GWDBoRlZWSkpVMVJKUTE5VVVrOVZRa3hGVTA5TlJWOU5RVlJTU1ZoZlEwOUVSVk1BQUdGc2JHOWpZWFJ2Y2p4VVBqbzZZV3hzYjJOaGRHVW9jMmw2WlY5MElHNHBJQ2R1SnlCbGVHTmxaV1J6SUcxaGVHbHRkVzBnYzNWd2NHOXlkR1ZrSUhOcGVtVUFjSFZ6YUY5aVlXTnJBSEpsYzJsNlpRQnphWHBsQUdkbGRBQnpaWFFBVGxOME0xOWZNaloyWldOMGIzSkpUbE5mTVRKaVlYTnBZMTl6ZEhKcGJtZEpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGVGxOZk9XRnNiRzlqWVhSdmNrbGpSVVZGUlU1VE5GOUpVelpmUlVWRlJRQk9VM1F6WDE4eU1UTmZYM1psWTNSdmNsOWlZWE5sU1U1VFh6RXlZbUZ6YVdOZmMzUnlhVzVuU1dOT1UxOHhNV05vWVhKZmRISmhhWFJ6U1dORlJVNVRYemxoYkd4dlkyRjBiM0pKWTBWRlJVVk9VelJmU1ZNMlgwVkZSVVVBVGxOME0xOWZNakl3WDE5MlpXTjBiM0pmWW1GelpWOWpiMjF0YjI1SlRHSXhSVVZGQUFESTlBQUF5bjBBQUV6MUFBQnNmUUFBQUFBQUFBRUFBQUR3ZlFBQUFBQUFBRXoxQUFBV2ZRQUFBQUFBQUFFQUFBRDRmUUFBQUFBQUFGQk9VM1F6WDE4eU5uWmxZM1J2Y2tsT1UxOHhNbUpoYzJsalgzTjBjbWx1WjBsalRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsalJVVk9VMTg1WVd4c2IyTmhkRzl5U1dORlJVVkZUbE0wWDBsVE5sOUZSVVZGQUFDbzlRQUFLSDRBQUFBQUFBQVFmZ0FBVUV0T1UzUXpYMTh5Tm5abFkzUnZja2xPVTE4eE1tSmhjMmxqWDNOMGNtbHVaMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWT1UxODVZV3hzYjJOaGRHOXlTV05GUlVWRlRsTTBYMGxUTmw5RlJVVkZBS2oxQUFDUWZnQUFBUUFBQUJCK0FBQnBhUUIyQUhacEFJQitBQUFFOUFBQWdINEFBSUIvQUFCT1UzUXpYMTh5TVRKaVlYTnBZMTl6ZEhKcGJtZEpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGVGxOZk9XRnNiRzlqWVhSdmNrbGpSVVZGUlFCT1UzUXpYMTh5TWpGZlgySmhjMmxqWDNOMGNtbHVaMTlqYjIxdGIyNUpUR0l4UlVWRkFBQUFBTWowQUFCUGZ3QUFUUFVBQUJCL0FBQUFBQUFBQVFBQUFIaC9BQUFBQUFBQWRtbHBhUUFBQUFBRTlBQUFnSDRBQUlqMEFBQ0Fmd0FBZG1scGFXa0FBQUNJOUFBQTZINEFBR2xwYVFEa2Z3QUFFSDRBQUlqMEFBQk9NVEJsYlhOamNtbHdkR1Z1TTNaaGJFVUFBTWowQUFEUWZ3QUFhV2xwYVFCQmdJQUNDNVlDSFBRQUFCQitBQUNJOUFBQWdIOEFBR2xwYVdscEFFNVRkRE5mWHpJMmRtVmpkRzl5U1dsT1UxODVZV3hzYjJOaGRHOXlTV2xGUlVWRkFFNVRkRE5mWHpJeE0xOWZkbVZqZEc5eVgySmhjMlZKYVU1VFh6bGhiR3h2WTJGMGIzSkphVVZGUlVVQUFBQk05UUFBT29BQUFBQUFBQUFCQUFBQThIMEFBQUFBQUFCTTlRQUFGb0FBQUFBQUFBQUJBQUFBYUlBQUFBQUFBQUJRVGxOME0xOWZNaloyWldOMGIzSkphVTVUWHpsaGJHeHZZMkYwYjNKSmFVVkZSVVVBQUFBQXFQVUFBSmlBQUFBQUFBQUFnSUFBQUZCTFRsTjBNMTlmTWpaMlpXTjBiM0pKYVU1VFh6bGhiR3h2WTJGMGIzSkphVVZGUlVVQUFBQ285UUFBMElBQUFBRUFBQUNBZ0FBQXdJQUFBQVQwQUFEQWdBQUFaUFFBUWFDQ0Fnc2lCUFFBQU1DQUFBQ0k5QUFBWlBRQUFJajBBQUQ0Z0FBQTVIOEFBSUNBQUFDSTlBQkIwSUlDQy9vQkhQUUFBSUNBQUFDSTlBQUFaUFFBQUdUMEFBQms5QUFBWlBRQUFHVDBBQUJrOUFBQVpQUUFBSUNBQUFCazlBQUFFSDRBQUdUMEFBQ0Fmd0FBWlBRQUFHVDBBQUJrOUFBQXJJRUFBR1QwQUFBNWJtWjBUV0Z5YTJWeUFBREk5QUFBb0lFQUFHa0FBQUFFOUFBQVpQUUFBSFpwYVFCazlBQUFCUFFBQUdUMEFBQzQ5QUFBZG1scFpBQUFBQUM0OUFBQVpQUUFBR1JwYVFBRTlBQUFaUFFBQUdUMEFBQlBkWFFnYjJZZ2JXVnRiM0o1SVNFS0FDTWpJeUJHWldGMGRYSmxJR05oYm1ScFpHRjBaWE1nWm05eUlIUnlZV05yYVc1bklHRnlaU0J2ZG1WeVpteHZkeTRLQUVWeWNtOXlPaUJ0WVd4c2IyTUtBRk5QVXdCQm1JVUNDd05NVTBVQVFlbUZBZ3VPSlVwUVJVZE5SVTBBSld4a0pXTUFBRUFHQUFDQVBnQUFBQUFBQUlnVEFBQUJBQUFBQXdBQUFBTUFBQUFFQUFBQUJBQUFBQU1BQUFBREFBQUFRbTluZFhNZ2JXVnpjMkZuWlNCamIyUmxJQ1ZrQUVGTVNVZE9YMVJaVUVVZ2FYTWdkM0p2Ym1jc0lIQnNaV0Z6WlNCbWFYZ0FUVUZZWDBGTVRFOURYME5JVlU1TElHbHpJSGR5YjI1bkxDQndiR1ZoYzJVZ1ptbDRBRUp2WjNWeklHSjFabVpsY2lCamIyNTBjbTlzSUcxdlpHVUFTVzUyWVd4cFpDQmpiMjF3YjI1bGJuUWdTVVFnSldRZ2FXNGdVMDlUQUVsdWRtRnNhV1FnWTNKdmNDQnlaWEYxWlhOMEFFUkRWQ0JqYjJWbVptbGphV1Z1ZENCdmRYUWdiMllnY21GdVoyVUFSRU5VSUhOallXeGxaQ0JpYkc5amF5QnphWHBsSUNWa2VDVmtJRzV2ZENCemRYQndiM0owWldRQVEyOXRjRzl1Wlc1MElHbHVaR1Y0SUNWa09pQnRhWE50WVhSamFHbHVaeUJ6WVcxd2JHbHVaeUJ5WVhScGJ5QWxaRG9sWkN3Z0pXUTZKV1FzSUNWakFFSnZaM1Z6SUVoMVptWnRZVzRnZEdGaWJHVWdaR1ZtYVc1cGRHbHZiZ0JDYjJkMWN5QnBibkIxZENCamIyeHZjbk53WVdObEFFSnZaM1Z6SUVwUVJVY2dZMjlzYjNKemNHRmpaUUJDYjJkMWN5QnRZWEpyWlhJZ2JHVnVaM1JvQUZkeWIyNW5JRXBRUlVjZ2JHbGljbUZ5ZVNCMlpYSnphVzl1T2lCc2FXSnlZWEo1SUdseklDVmtMQ0JqWVd4c1pYSWdaWGh3WldOMGN5QWxaQUJUWVcxd2JHbHVaeUJtWVdOMGIzSnpJSFJ2YnlCc1lYSm5aU0JtYjNJZ2FXNTBaWEpzWldGMlpXUWdjMk5oYmdCSmJuWmhiR2xrSUcxbGJXOXllU0J3YjI5c0lHTnZaR1VnSldRQVZXNXpkWEJ3YjNKMFpXUWdTbEJGUnlCa1lYUmhJSEJ5WldOcGMybHZiaUFsWkFCSmJuWmhiR2xrSUhCeWIyZHlaWE56YVhabElIQmhjbUZ0WlhSbGNuTWdVM005SldRZ1UyVTlKV1FnUVdnOUpXUWdRV3c5SldRQVNXNTJZV3hwWkNCd2NtOW5jbVZ6YzJsMlpTQndZWEpoYldWMFpYSnpJR0YwSUhOallXNGdjMk55YVhCMElHVnVkSEo1SUNWa0FFSnZaM1Z6SUhOaGJYQnNhVzVuSUdaaFkzUnZjbk1BU1c1MllXeHBaQ0J6WTJGdUlITmpjbWx3ZENCaGRDQmxiblJ5ZVNBbFpBQkpiWEJ5YjNCbGNpQmpZV3hzSUhSdklFcFFSVWNnYkdsaWNtRnllU0JwYmlCemRHRjBaU0FsWkFCS1VFVkhJSEJoY21GdFpYUmxjaUJ6ZEhKMVkzUWdiV2x6YldGMFkyZzZJR3hwWW5KaGNua2dkR2hwYm10eklITnBlbVVnYVhNZ0pYVXNJR05oYkd4bGNpQmxlSEJsWTNSeklDVjFBRUp2WjNWeklIWnBjblIxWVd3Z1lYSnlZWGtnWVdOalpYTnpBRUoxWm1abGNpQndZWE56WldRZ2RHOGdTbEJGUnlCc2FXSnlZWEo1SUdseklIUnZieUJ6YldGc2JBQlRkWE53Wlc1emFXOXVJRzV2ZENCaGJHeHZkMlZrSUdobGNtVUFRME5KVWpZd01TQnpZVzF3YkdsdVp5QnViM1FnYVcxd2JHVnRaVzUwWldRZ2VXVjBBRlJ2YnlCdFlXNTVJR052Ykc5eUlHTnZiWEJ2Ym1WdWRITTZJQ1ZrTENCdFlYZ2dKV1FBVlc1emRYQndiM0owWldRZ1kyOXNiM0lnWTI5dWRtVnljMmx2YmlCeVpYRjFaWE4wQUVKdlozVnpJRVJCUXlCcGJtUmxlQ0FsWkFCQ2IyZDFjeUJFUVVNZ2RtRnNkV1VnTUhnbGVBQkNiMmQxY3lCRVNGUWdhVzVrWlhnZ0pXUUFRbTluZFhNZ1JGRlVJR2x1WkdWNElDVmtBRVZ0Y0hSNUlFcFFSVWNnYVcxaFoyVWdLRVJPVENCdWIzUWdjM1Z3Y0c5eWRHVmtLUUJTWldGa0lHWnliMjBnUlUxVElHWmhhV3hsWkFCWGNtbDBaU0IwYnlCRlRWTWdabUZwYkdWa0FFUnBaRzRuZENCbGVIQmxZM1FnYlc5eVpTQjBhR0Z1SUc5dVpTQnpZMkZ1QUVsdWNIVjBJR1pwYkdVZ2NtVmhaQ0JsY25KdmNnQlBkWFJ3ZFhRZ1ptbHNaU0IzY21sMFpTQmxjbkp2Y2lBdExTMGdiM1YwSUc5bUlHUnBjMnNnYzNCaFkyVS9BRVp5WVdOMGFXOXVZV3dnYzJGdGNHeHBibWNnYm05MElHbHRjR3hsYldWdWRHVmtJSGxsZEFCSWRXWm1iV0Z1SUdOdlpHVWdjMmw2WlNCMFlXSnNaU0J2ZG1WeVpteHZkd0JOYVhOemFXNW5JRWgxWm1adFlXNGdZMjlrWlNCMFlXSnNaU0JsYm5SeWVRQk5ZWGhwYlhWdElITjFjSEJ2Y25SbFpDQnBiV0ZuWlNCa2FXMWxibk5wYjI0Z2FYTWdKWFVnY0dsNFpXeHpBRVZ0Y0hSNUlHbHVjSFYwSUdacGJHVUFVSEpsYldGMGRYSmxJR1Z1WkNCdlppQnBibkIxZENCbWFXeGxBRU5oYm01dmRDQjBjbUZ1YzJOdlpHVWdaSFZsSUhSdklHMTFiSFJwY0d4bElIVnpaU0J2WmlCeGRXRnVkR2w2WVhScGIyNGdkR0ZpYkdVZ0pXUUFVMk5oYmlCelkzSnBjSFFnWkc5bGN5QnViM1FnZEhKaGJuTnRhWFFnWVd4c0lHUmhkR0VBU1c1MllXeHBaQ0JqYjJ4dmNpQnhkV0Z1ZEdsNllYUnBiMjRnYlc5a1pTQmphR0Z1WjJVQVRtOTBJR2x0Y0d4bGJXVnVkR1ZrSUhsbGRBQlNaWEYxWlhOMFpXUWdabVZoZEhWeVpTQjNZWE1nYjIxcGRIUmxaQ0JoZENCamIyMXdhV3hsSUhScGJXVUFRWEpwZEdodFpYUnBZeUIwWVdKc1pTQXdlQ1V3TW5nZ2QyRnpJRzV2ZENCa1pXWnBibVZrQUVKaFkydHBibWNnYzNSdmNtVWdibTkwSUhOMWNIQnZjblJsWkFCSWRXWm1iV0Z1SUhSaFlteGxJREI0SlRBeWVDQjNZWE1nYm05MElHUmxabWx1WldRQVNsQkZSeUJrWVhSaGMzUnlaV0Z0SUdOdmJuUmhhVzV6SUc1dklHbHRZV2RsQUZGMVlXNTBhWHBoZEdsdmJpQjBZV0pzWlNBd2VDVXdNbmdnZDJGeklHNXZkQ0JrWldacGJtVmtBRTV2ZENCaElFcFFSVWNnWm1sc1pUb2djM1JoY25SeklIZHBkR2dnTUhnbE1ESjRJREI0SlRBeWVBQkpibk4xWm1acFkybGxiblFnYldWdGIzSjVJQ2hqWVhObElDVmtLUUJEWVc1dWIzUWdjWFZoYm5ScGVtVWdiVzl5WlNCMGFHRnVJQ1ZrSUdOdmJHOXlJR052YlhCdmJtVnVkSE1BUTJGdWJtOTBJSEYxWVc1MGFYcGxJSFJ2SUdabGQyVnlJSFJvWVc0Z0pXUWdZMjlzYjNKekFFTmhibTV2ZENCeGRXRnVkR2w2WlNCMGJ5QnRiM0psSUhSb1lXNGdKV1FnWTI5c2IzSnpBRWx1ZG1Gc2FXUWdTbEJGUnlCbWFXeGxJSE4wY25WamRIVnlaVG9nSlhNZ1ltVm1iM0psSUZOUFJnQkpiblpoYkdsa0lFcFFSVWNnWm1sc1pTQnpkSEoxWTNSMWNtVTZJSFIzYnlCVFQwWWdiV0Z5YTJWeWN3QkpiblpoYkdsa0lFcFFSVWNnWm1sc1pTQnpkSEoxWTNSMWNtVTZJRzFwYzNOcGJtY2dVMDlUSUcxaGNtdGxjZ0JWYm5OMWNIQnZjblJsWkNCS1VFVkhJSEJ5YjJObGMzTTZJRk5QUmlCMGVYQmxJREI0SlRBeWVBQkpiblpoYkdsa0lFcFFSVWNnWm1sc1pTQnpkSEoxWTNSMWNtVTZJSFIzYnlCVFQwa2diV0Z5YTJWeWN3QkdZV2xzWldRZ2RHOGdZM0psWVhSbElIUmxiWEJ2Y21GeWVTQm1hV3hsSUNWekFGSmxZV1FnWm1GcGJHVmtJRzl1SUhSbGJYQnZjbUZ5ZVNCbWFXeGxBRk5sWldzZ1ptRnBiR1ZrSUc5dUlIUmxiWEJ2Y21GeWVTQm1hV3hsQUZkeWFYUmxJR1poYVd4bFpDQnZiaUIwWlcxd2IzSmhjbmtnWm1sc1pTQXRMUzBnYjNWMElHOW1JR1JwYzJzZ2MzQmhZMlUvQUVGd2NHeHBZMkYwYVc5dUlIUnlZVzV6Wm1WeWNtVmtJSFJ2YnlCbVpYY2djMk5oYm14cGJtVnpBRlZ1YzNWd2NHOXlkR1ZrSUcxaGNtdGxjaUIwZVhCbElEQjRKVEF5ZUFCV2FYSjBkV0ZzSUdGeWNtRjVJR052Ym5SeWIyeHNaWElnYldWemMyVmtJSFZ3QUVsdFlXZGxJSFJ2YnlCM2FXUmxJR1p2Y2lCMGFHbHpJR2x0Y0d4bGJXVnVkR0YwYVc5dUFGSmxZV1FnWm5KdmJTQllUVk1nWm1GcGJHVmtBRmR5YVhSbElIUnZJRmhOVXlCbVlXbHNaV1FBUTI5d2VYSnBaMmgwSUNoREtTQXlNREU0TENCVWFHOXRZWE1nUnk0Z1RHRnVaU3dnUjNWcFpHOGdWbTlzYkdKbFpHbHVad0E1WXlBZ01UUXRTbUZ1TFRJd01UZ0FRMkYxZEdsdmJqb2djWFZoYm5ScGVtRjBhVzl1SUhSaFlteGxjeUJoY21VZ2RHOXZJR052WVhKelpTQm1iM0lnWW1GelpXeHBibVVnU2xCRlJ3QkJaRzlpWlNCQlVGQXhOQ0J0WVhKclpYSTZJSFpsY25OcGIyNGdKV1FzSUdac1lXZHpJREI0SlRBMGVDQXdlQ1V3Tkhnc0lIUnlZVzV6Wm05eWJTQWxaQUJWYm10dWIzZHVJRUZRVURBZ2JXRnlhMlZ5SUNodWIzUWdTa1pKUmlrc0lHeGxibWQwYUNBbGRRQlZibXR1YjNkdUlFRlFVREUwSUcxaGNtdGxjaUFvYm05MElFRmtiMkpsS1N3Z2JHVnVaM1JvSUNWMUFFUmxabWx1WlNCQmNtbDBhRzFsZEdsaklGUmhZbXhsSURCNEpUQXllRG9nTUhnbE1ESjRBRVJsWm1sdVpTQklkV1ptYldGdUlGUmhZbXhsSURCNEpUQXllQUJFWldacGJtVWdVWFZoYm5ScGVtRjBhVzl1SUZSaFlteGxJQ1ZrSUNCd2NtVmphWE5wYjI0Z0pXUUFSR1ZtYVc1bElGSmxjM1JoY25RZ1NXNTBaWEoyWVd3Z0pYVUFSbkpsWldRZ1JVMVRJR2hoYm1Sc1pTQWxkUUJQWW5SaGFXNWxaQ0JGVFZNZ2FHRnVaR3hsSUNWMUFFVnVaQ0JQWmlCSmJXRm5aUUFnSUNBZ0lDQWdJQ1V6WkNBbE0yUWdKVE5rSUNVelpDQWxNMlFnSlROa0lDVXpaQ0FsTTJRQVNrWkpSaUJCVUZBd0lHMWhjbXRsY2pvZ2RtVnljMmx2YmlBbFpDNGxNREprTENCa1pXNXphWFI1SUNWa2VDVmtJQ0FsWkFCWFlYSnVhVzVuT2lCMGFIVnRZbTVoYVd3Z2FXMWhaMlVnYzJsNlpTQmtiMlZ6SUc1dmRDQnRZWFJqYUNCa1lYUmhJR3hsYm1kMGFDQWxkUUJLUmtsR0lHVjRkR1Z1YzJsdmJpQnRZWEpyWlhJNklIUjVjR1VnTUhnbE1ESjRMQ0JzWlc1bmRHZ2dKWFVBSUNBZ0lIZHBkR2dnSldRZ2VDQWxaQ0IwYUhWdFltNWhhV3dnYVcxaFoyVUFUV2x6WTJWc2JHRnVaVzkxY3lCdFlYSnJaWElnTUhnbE1ESjRMQ0JzWlc1bmRHZ2dKWFVBVlc1bGVIQmxZM1JsWkNCdFlYSnJaWElnTUhnbE1ESjRBQ0FnSUNBZ0lDQWdKVFIxSUNVMGRTQWxOSFVnSlRSMUlDVTBkU0FsTkhVZ0pUUjFJQ1UwZFFCUmRXRnVkR2w2YVc1bklIUnZJQ1ZrSUQwZ0pXUXFKV1FxSldRZ1kyOXNiM0p6QUZGMVlXNTBhWHBwYm1jZ2RHOGdKV1FnWTI5c2IzSnpBRk5sYkdWamRHVmtJQ1ZrSUdOdmJHOXljeUJtYjNJZ2NYVmhiblJwZW1GMGFXOXVBRUYwSUcxaGNtdGxjaUF3ZUNVd01uZ3NJSEpsWTI5MlpYSjVJR0ZqZEdsdmJpQWxaQUJTVTFRbFpBQlRiVzl2ZEdocGJtY2dibTkwSUhOMWNIQnZjblJsWkNCM2FYUm9JRzV2Ym5OMFlXNWtZWEprSUhOaGJYQnNhVzVuSUhKaGRHbHZjd0JUZEdGeWRDQlBaaUJHY21GdFpTQXdlQ1V3TW5nNklIZHBaSFJvUFNWMUxDQm9aV2xuYUhROUpYVXNJR052YlhCdmJtVnVkSE05SldRQUlDQWdJRU52YlhCdmJtVnVkQ0FsWkRvZ0pXUm9lQ1ZrZGlCeFBTVmtBRk4wWVhKMElHOW1JRWx0WVdkbEFGTjBZWEowSUU5bUlGTmpZVzQ2SUNWa0lHTnZiWEJ2Ym1WdWRITUFJQ0FnSUVOdmJYQnZibVZ1ZENBbFpEb2daR005SldRZ1lXTTlKV1FBSUNCVGN6MGxaQ3dnVTJVOUpXUXNJRUZvUFNWa0xDQkJiRDBsWkFCRGJHOXpaV1FnZEdWdGNHOXlZWEo1SUdacGJHVWdKWE1BVDNCbGJtVmtJSFJsYlhCdmNtRnllU0JtYVd4bElDVnpBRXBHU1VZZ1pYaDBaVzV6YVc5dUlHMWhjbXRsY2pvZ1NsQkZSeTFqYjIxd2NtVnpjMlZrSUhSb2RXMWlibUZwYkNCcGJXRm5aU3dnYkdWdVozUm9JQ1YxQUVwR1NVWWdaWGgwWlc1emFXOXVJRzFoY210bGNqb2djR0ZzWlhSMFpTQjBhSFZ0WW01aGFXd2dhVzFoWjJVc0lHeGxibWQwYUNBbGRRQktSa2xHSUdWNGRHVnVjMmx2YmlCdFlYSnJaWEk2SUZKSFFpQjBhSFZ0WW01aGFXd2dhVzFoWjJVc0lHeGxibWQwYUNBbGRRQlZibkpsWTI5bmJtbDZaV1FnWTI5dGNHOXVaVzUwSUVsRWN5QWxaQ0FsWkNBbFpDd2dZWE56ZFcxcGJtY2dXVU5pUTNJQVJuSmxaV1FnV0UxVElHaGhibVJzWlNBbGRRQlBZblJoYVc1bFpDQllUVk1nYUdGdVpHeGxJQ1YxQUZWdWEyNXZkMjRnUVdSdlltVWdZMjlzYjNJZ2RISmhibk5tYjNKdElHTnZaR1VnSldRQVEyOXljblZ3ZENCS1VFVkhJR1JoZEdFNklHSmhaQ0JoY21sMGFHMWxkR2xqSUdOdlpHVUFTVzVqYjI1emFYTjBaVzUwSUhCeWIyZHlaWE56YVc5dUlITmxjWFZsYm1ObElHWnZjaUJqYjIxd2IyNWxiblFnSldRZ1kyOWxabVpwWTJsbGJuUWdKV1FBUTI5eWNuVndkQ0JLVUVWSElHUmhkR0U2SUNWMUlHVjRkSEpoYm1WdmRYTWdZbmwwWlhNZ1ltVm1iM0psSUcxaGNtdGxjaUF3ZUNVd01uZ0FRMjl5Y25Wd2RDQktVRVZISUdSaGRHRTZJSEJ5WlcxaGRIVnlaU0JsYm1RZ2IyWWdaR0YwWVNCelpXZHRaVzUwQUVOdmNuSjFjSFFnU2xCRlJ5QmtZWFJoT2lCaVlXUWdTSFZtWm0xaGJpQmpiMlJsQUZkaGNtNXBibWM2SUhWdWEyNXZkMjRnU2taSlJpQnlaWFpwYzJsdmJpQnVkVzFpWlhJZ0pXUXVKVEF5WkFCUWNtVnRZWFIxY21VZ1pXNWtJRzltSUVwUVJVY2dabWxzWlFCRGIzSnlkWEIwSUVwUVJVY2daR0YwWVRvZ1ptOTFibVFnYldGeWEyVnlJREI0SlRBeWVDQnBibk4wWldGa0lHOW1JRkpUVkNWa0FFbHVkbUZzYVdRZ1UwOVRJSEJoY21GdFpYUmxjbk1nWm05eUlITmxjWFZsYm5ScFlXd2dTbEJGUndCQmNIQnNhV05oZEdsdmJpQjBjbUZ1YzJabGNuSmxaQ0IwYjI4Z2JXRnVlU0J6WTJGdWJHbHVaWE1BUVlDckFndURCQ1NEQUFBNmd3QUFXb01BQUgrREFBQ1pnd0FBdUlNQUFNMkRBQURxZ3dBQUZJUUFBRlNFQUFCemhBQUFpb1FBQUtDRUFBQzBoQUFBOFlRQUFDR0ZBQUE5aFFBQVlJVUFBSmVGQUFET2hRQUE1WVVBQUFXR0FBQXZoZ0FBZklZQUFKZUdBQURDaGdBQTNvWUFBQU9IQUFBcGh3QUFUb2NBQUdHSEFBQjJod0FBaVljQUFKeUhBQURCaHdBQTFvY0FBT3FIQUFBTGlBQUFJWWdBQUZDSUFBQjRpQUFBbVlnQUFMcUlBQURwaUFBQStvZ0FBQmFKQUFCVWlRQUFlNGtBQUtLSkFBQzJpUUFBNUlrQUFBeUtBQUFvaWdBQVRZb0FBRytLQUFDWmlnQUF4SW9BQU9LS0FBQVFpd0FBT0lzQUFGK0xBQUNLaXdBQXQ0c0FBT2VMQUFBUmpBQUFQb3dBQUdHTUFBQi9qQUFBbll3QUFOT01BQUQ5akFBQUhJMEFBRCtOQUFCbWpRQUFlNDBBQUkrTkFBREVqUUFBMUkwQUFCS09BQUJVamdBQWZvNEFBS3FPQUFEUmpnQUE3WTRBQUJpUEFBQXpqd0FBUjQ4QUFGNlBBQUJyandBQWs0OEFBTWlQQUFBRWtBQUFNcEFBQUZPUUFBQjZrQUFBazVBQUFMdVFBQURla0FBQTlwQUFBQnFSQUFBL2tRQUFSWkVBQUg2UkFBQzRrUUFBMTVFQUFPYVJBQUFEa2dBQUlaSUFBRDZTQUFCWGtnQUFjSklBQUxLU0FBRHNrZ0FBSXBNQUFGYVRBQUJxa3dBQWdaTUFBS2VUQUFET2t3QUFFSlFBQUV5VUFBQjlsQUFBb1pRQUFNK1VBQURxbEFBQUlwVUFBRTJWQUFBQUFBQUFKWE1LQUVHUnJ3SUxsd1ZBeFZpZlUwSkxBRUJKTXFNaXFCSEZXQ0Y3L0hOaWFNVll2MFVMTUg0WW4xUDhjMEZ0VkdLZlU3TkJRUzBTRjBKTFltaFVZbjVZUWtzaE83b293eFFBUU1WWW4xTkNTd0JBU1RLaklxZ1JTVEsvUmJOQklUdEpNb0luTnh2Z0RhTWlDekJCTGJvb295STNHNzhTamdtb0VYNFlFaGZERktnUjRBMk9DZDhFQUFBQUFBQUE4RC92WVVpeFVESDJQOHB2VFpHdTUvUS9xaEZzNzJMUThqOEFBQUFBQUFEd1B6dS9wOEJwSk9rL3V5REhlM3BSNFQ5ZHEzTGVWYWpSUDh3QUFBRE5BQUFBemdBQUFBQUFBQUNCQVIxYURnS0dKUkFERkJFU0JBc0lGQVhZQXhjRzJnRVpCK1VBSEFodkFCNEpOZ0FoQ2hvQUl3c05BQWtNQmdBS0RRTUFEQTBCQUk4UGYxb2tFQ1UvSmhIeUxDY1NmQ0FvRTdrWEtoU0NFU3NWN3d3dEZxRUpMaGN2QnpBWVhBVXhHUVlFTXhvREF6UWJRQUkySExFQk9CMUVBVGtlOVFBN0g3Y0FQQ0NLQUQ0aGFBQS9JazRBSUNNN0FDRUpMQUNsSmVGYVFDWk1TRUVuRFRwREtQRXVSQ2tmSmtVcU14OUdLNmdaU0N3WUZVa3RkeEZLTG5RT1N5LzdDMDB3K0FsT01XRUlUeklHQnpBenpRVXlOTjRFTWpVUEJETTJZd00wTjlRQ05UaGNBalk1K0FFM09xUUJPRHRnQVRrOEpRRTZQZllBT3o3TEFEMC9xd0E5SUk4QXdVRVNXMUJDQkUxUlF5eEJVa1RZTjFORjZDOVVSandwVmtkNUkxZEkzeDVYU2FrYVNFcE9GMGhMSkJSS1RKd1JTazFyRDB0T1VRMU5UN1lMVFRCQUN0QlJNbGhZVWh4TldWT09RMXBVM1R0YlZlNDBYRmF1TGwxWG1pbFdSeFlsMkZsd1ZWOWFxVXhnVzlsRVlWd2lQbU5kSkRoalhyUXlYVllYTHQ5Z3FGWmxZVVpQWm1MbFIyZGp6MEZvWkQwOFkxMWVOMmxtTVZKcVp3OU1hMmc1Um1kalhrSHBhaWRXYkd2blVHMW5oVXR1YlpkVmIydFBVTzV2RUZwd2JTSlY4Ry9yV1hGeEhWb0FRYkcwQWd1SUFzQXc4QXpNUFB3RHd6UHpEODgvLzRCQXNIQ01UTHg4ZzBPemM0OVB2MzhnNEJEUUxPd2MzQ1BqRTlNdjd4L2ZvR0NRVUt4c25GeWpZNU5UcjIrZlh3aklPUGdFeERUMEM4czcrd2ZITi9lSVNMaDRoRVMwZEl0THUzdUhSN2QzS09nWTJDVGtGTlFyNnh2YkorY1gxNmhvbUZpa1pKUlVxMnViVzZkbmwxY0N3akx5RHM0Ky9nSEJNZkVOelQzOWdrS3ljbzVPdm42QlFiRnhqVTI5ZlNMaUV0SXU3aDdlSWVFUjBTM3RIZDJpWXBKU3JtNmVYcUZoa1ZHdGJaMWRDc282K2diR052WUp5VG41QmNVMTlZcEt1bnFHUnJaMmlVbTVlWVZGdFhVcTZocmFKdVlXMWlucEdka2w1UlhWcW1xYVdxWm1sbGFwYVpsWnBXV1ZWUUVBQUFBQUFBQUFBZ0JCeExZQ0N5MEJBQUFBQWdBQUFBTUFBQUFBQUFBQUFRQUFBQVVBQUFBQ0FBQUFCQUFBQUFZQUFBQURBQUFBQndBQUFBZ0FRWVMzQWd1ZEFRRUFBQUFGQUFBQUJnQUFBQUlBQUFBRUFBQUFCd0FBQUF3QUFBQURBQUFBQ0FBQUFBc0FBQUFOQUFBQUNRQUFBQW9BQUFBT0FBQUFEd0FBQUFBQUFBQUJBQUFBQlFBQUFBWUFBQUFPQUFBQUFnQUFBQVFBQUFBSEFBQUFEUUFBQUE4QUFBQURBQUFBQ0FBQUFBd0FBQUFRQUFBQUZRQUFBQWtBQUFBTEFBQUFFUUFBQUJRQUFBQVdBQUFBQ2dBQUFCSUFBQUFUQUFBQUZ3QUFBQmdBUWJTNEFndk5BZ0VBQUFBRkFBQUFCZ0FBQUE0QUFBQVBBQUFBQWdBQUFBUUFBQUFIQUFBQURRQUFBQkFBQUFBWkFBQUFBd0FBQUFnQUFBQU1BQUFBRVFBQUFCZ0FBQUFhQUFBQUNRQUFBQXNBQUFBU0FBQUFGd0FBQUJzQUFBQWdBQUFBQ2dBQUFCTUFBQUFXQUFBQUhBQUFBQjhBQUFBaEFBQUFGQUFBQUJVQUFBQWRBQUFBSGdBQUFDSUFBQUFqQUFBQUFBQUFBQUVBQUFBRkFBQUFCZ0FBQUE0QUFBQVBBQUFBR3dBQUFBSUFBQUFFQUFBQUJ3QUFBQTBBQUFBUUFBQUFHZ0FBQUJ3QUFBQURBQUFBQ0FBQUFBd0FBQUFSQUFBQUdRQUFBQjBBQUFBbUFBQUFDUUFBQUFzQUFBQVNBQUFBR0FBQUFCNEFBQUFsQUFBQUp3QUFBQW9BQUFBVEFBQUFGd0FBQUI4QUFBQWtBQUFBS0FBQUFDMEFBQUFVQUFBQUZnQUFBQ0FBQUFBakFBQUFLUUFBQUN3QUFBQXVBQUFBRlFBQUFDRUFBQUFpQUFBQUtnQUFBQ3NBQUFBdkFBQUFNQUJCbExzQ0MvMEdBUUFBQUFVQUFBQUdBQUFBRGdBQUFBOEFBQUFiQUFBQUhBQUFBQUlBQUFBRUFBQUFCd0FBQUEwQUFBQVFBQUFBR2dBQUFCMEFBQUFxQUFBQUF3QUFBQWdBQUFBTUFBQUFFUUFBQUJrQUFBQWVBQUFBS1FBQUFDc0FBQUFKQUFBQUN3QUFBQklBQUFBWUFBQUFId0FBQUNnQUFBQXNBQUFBTlFBQUFBb0FBQUFUQUFBQUZ3QUFBQ0FBQUFBbkFBQUFMUUFBQURRQUFBQTJBQUFBRkFBQUFCWUFBQUFoQUFBQUpnQUFBQzRBQUFBekFBQUFOd0FBQUR3QUFBQVZBQUFBSWdBQUFDVUFBQUF2QUFBQU1nQUFBRGdBQUFBN0FBQUFQUUFBQUNNQUFBQWtBQUFBTUFBQUFERUFBQUE1QUFBQU9nQUFBRDRBQUFBL0FBQUFBQUFBQUFFQUFBQURBQUFBQndBQUFBOEFBQUFmQUFBQVB3QUFBSDhBQUFEL0FBQUEvd0VBQVA4REFBRC9Cd0FBL3c4QUFQOGZBQUQvUHdBQS8zOEFBQUFBQUFBQkFBQUFDQUFBQUJBQUFBQUpBQUFBQWdBQUFBTUFBQUFLQUFBQUVRQUFBQmdBQUFBZ0FBQUFHUUFBQUJJQUFBQUxBQUFBQkFBQUFBVUFBQUFNQUFBQUV3QUFBQm9BQUFBaEFBQUFLQUFBQURBQUFBQXBBQUFBSWdBQUFCc0FBQUFVQUFBQURRQUFBQVlBQUFBSEFBQUFEZ0FBQUJVQUFBQWNBQUFBSXdBQUFDb0FBQUF4QUFBQU9BQUFBRGtBQUFBeUFBQUFLd0FBQUNRQUFBQWRBQUFBRmdBQUFBOEFBQUFYQUFBQUhnQUFBQ1VBQUFBc0FBQUFNd0FBQURvQUFBQTdBQUFBTkFBQUFDMEFBQUFtQUFBQUh3QUFBQ2NBQUFBdUFBQUFOUUFBQUR3QUFBQTlBQUFBTmdBQUFDOEFBQUEzQUFBQVBnQUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQUFBQUFBQUVBQUFBSUFBQUFFQUFBQUFrQUFBQUNBQUFBQXdBQUFBb0FBQUFSQUFBQUdBQUFBQ0FBQUFBWkFBQUFFZ0FBQUFzQUFBQUVBQUFBQlFBQUFBd0FBQUFUQUFBQUdnQUFBQ0VBQUFBb0FBQUFNQUFBQUNrQUFBQWlBQUFBR3dBQUFCUUFBQUFOQUFBQUJnQUFBQTRBQUFBVkFBQUFIQUFBQUNNQUFBQXFBQUFBTVFBQUFESUFBQUFyQUFBQUpBQUFBQjBBQUFBV0FBQUFIZ0FBQUNVQUFBQXNBQUFBTXdBQUFEUUFBQUF0QUFBQUpnQUFBQzRBQUFBMUFBQUFOZ0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBUWFUQ0FndnRBZ0VBQUFBSUFBQUFFQUFBQUFrQUFBQUNBQUFBQXdBQUFBb0FBQUFSQUFBQUdBQUFBQ0FBQUFBWkFBQUFFZ0FBQUFzQUFBQUVBQUFBQlFBQUFBd0FBQUFUQUFBQUdnQUFBQ0VBQUFBb0FBQUFLUUFBQUNJQUFBQWJBQUFBRkFBQUFBMEFBQUFWQUFBQUhBQUFBQ01BQUFBcUFBQUFLd0FBQUNRQUFBQWRBQUFBSlFBQUFDd0FBQUF0QUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFBQUFBQUFCQUFBQUNBQUFBQkFBQUFBSkFBQUFBZ0FBQUFNQUFBQUtBQUFBRVFBQUFCZ0FBQUFnQUFBQUdRQUFBQklBQUFBTEFBQUFCQUFBQUF3QUFBQVRBQUFBR2dBQUFDRUFBQUFpQUFBQUd3QUFBQlFBQUFBY0FBQUFJd0FBQUNRQUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FFR2t4UUlMM1FFQkFBQUFDQUFBQUJBQUFBQUpBQUFBQWdBQUFBTUFBQUFLQUFBQUVRQUFBQmdBQUFBWkFBQUFFZ0FBQUFzQUFBQVRBQUFBR2dBQUFCc0FBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBQUFBQUFBRUFBQUFJQUFBQUVBQUFBQWtBQUFBQ0FBQUFDZ0FBQUJFQUFBQVNBQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0JCbE1jQ0M1SU5BUUFBQUFnQUFBQUpBQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUQ4QUFBQS9BQUFBUHdBQUFEOEFBQUEvQUFBQVB3QUFBRDhBQUFBL0FBQUFQd0FBQUhadmFXUUFZbTl2YkFCamFHRnlBSE5wWjI1bFpDQmphR0Z5QUhWdWMybG5ibVZrSUdOb1lYSUFjMmh2Y25RQWRXNXphV2R1WldRZ2MyaHZjblFBYVc1MEFIVnVjMmxuYm1Wa0lHbHVkQUJzYjI1bkFIVnVjMmxuYm1Wa0lHeHZibWNBYVc1ME5qUmZkQUIxYVc1ME5qUmZkQUJtYkc5aGRBQmtiM1ZpYkdVQWMzUmtPanB6ZEhKcGJtY0FjM1JrT2pwaVlYTnBZMTl6ZEhKcGJtYzhkVzV6YVdkdVpXUWdZMmhoY2o0QWMzUmtPanAzYzNSeWFXNW5BSE4wWkRvNmRURTJjM1J5YVc1bkFITjBaRG82ZFRNeWMzUnlhVzVuQUdWdGMyTnlhWEIwWlc0Nk9uWmhiQUJsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eGphR0Z5UGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenh6YVdkdVpXUWdZMmhoY2o0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4ZFc1emFXZHVaV1FnWTJoaGNqNEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGMyaHZjblErQUdWdGMyTnlhWEIwWlc0Nk9tMWxiVzl5ZVY5MmFXVjNQSFZ1YzJsbmJtVmtJSE5vYjNKMFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4cGJuUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BIVnVjMmxuYm1Wa0lHbHVkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhiRzl1Wno0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4ZFc1emFXZHVaV1FnYkc5dVp6NEFaVzF6WTNKcGNIUmxiam82YldWdGIzSjVYM1pwWlhjOGFXNTBPRjkwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkengxYVc1ME9GOTBQZ0JsYlhOamNtbHdkR1Z1T2pwdFpXMXZjbmxmZG1sbGR6eHBiblF4Tmw5MFBnQmxiWE5qY21sd2RHVnVPanB0WlcxdmNubGZkbWxsZHp4MWFXNTBNVFpmZEQ0QVpXMXpZM0pwY0hSbGJqbzZiV1Z0YjNKNVgzWnBaWGM4YVc1ME16SmZkRDRBWlcxelkzSnBjSFJsYmpvNmJXVnRiM0o1WDNacFpYYzhkV2x1ZERNeVgzUStBR1Z0YzJOeWFYQjBaVzQ2T20xbGJXOXllVjkyYVdWM1BHWnNiMkYwUGdCbGJYTmpjbWx3ZEdWdU9qcHRaVzF2Y25sZmRtbGxkenhrYjNWaWJHVStBRTVUZEROZlh6SXhNbUpoYzJsalgzTjBjbWx1WjBsb1RsTmZNVEZqYUdGeVgzUnlZV2wwYzBsb1JVVk9VMTg1WVd4c2IyTmhkRzl5U1doRlJVVkZBQUFBVFBVQUFBZW5BQUFBQUFBQUFRQUFBSGgvQUFBQUFBQUFUbE4wTTE5Zk1qRXlZbUZ6YVdOZmMzUnlhVzVuU1hkT1UxOHhNV05vWVhKZmRISmhhWFJ6U1hkRlJVNVRYemxoYkd4dlkyRjBiM0pKZDBWRlJVVUFBRXoxQUFCZ3B3QUFBQUFBQUFFQUFBQjRmd0FBQUFBQUFFNVRkRE5mWHpJeE1tSmhjMmxqWDNOMGNtbHVaMGxFYzA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KUkhORlJVNVRYemxoYkd4dlkyRjBiM0pKUkhORlJVVkZBQUFBVFBVQUFMaW5BQUFBQUFBQUFRQUFBSGgvQUFBQUFBQUFUbE4wTTE5Zk1qRXlZbUZ6YVdOZmMzUnlhVzVuU1VScFRsTmZNVEZqYUdGeVgzUnlZV2wwYzBsRWFVVkZUbE5mT1dGc2JHOWpZWFJ2Y2tsRWFVVkZSVVVBQUFCTTlRQUFGS2dBQUFBQUFBQUJBQUFBZUg4QUFBQUFBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxqUlVVQUFNajBBQUJ3cUFBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSllVVkZBQURJOUFBQW1LZ0FBRTR4TUdWdGMyTnlhWEIwWlc0eE1XMWxiVzl5ZVY5MmFXVjNTV2hGUlFBQXlQUUFBTUNvQUFCT01UQmxiWE5qY21sd2RHVnVNVEZ0WlcxdmNubGZkbWxsZDBselJVVUFBTWowQUFEb3FBQUFUakV3WlcxelkzSnBjSFJsYmpFeGJXVnRiM0o1WDNacFpYZEpkRVZGQUFESTlBQUFFS2tBQUU0eE1HVnRjMk55YVhCMFpXNHhNVzFsYlc5eWVWOTJhV1YzU1dsRlJRQUF5UFFBQURpcEFBQk9NVEJsYlhOamNtbHdkR1Z1TVRGdFpXMXZjbmxmZG1sbGQwbHFSVVVBQU1qMEFBQmdxUUFBVGpFd1pXMXpZM0pwY0hSbGJqRXhiV1Z0YjNKNVgzWnBaWGRKYkVWRkFBREk5QUFBaUtrQUFFNHhNR1Z0YzJOeWFYQjBaVzR4TVcxbGJXOXllVjkyYVdWM1NXMUZSUUFBeVBRQUFMQ3BBQUJPTVRCbGJYTmpjbWx3ZEdWdU1URnRaVzF2Y25sZmRtbGxkMGxtUlVVQUFNajBBQURZcVFBQVRqRXdaVzF6WTNKcGNIUmxiakV4YldWdGIzSjVYM1pwWlhkSlpFVkZBQURJOUFBQUFLb0FRYkRVQWd0WEdSSkVPd0kvTEVjVVBUTXdDaHNHUmt0Rk53OUpEbzRYQTBBZFBHa3JOaDlLTFJ3QklDVXBJUWdNRlJZaUxoQTRQZ3MwTVJoa2RIVjJMMEVKZnprUkkwTXlRb21LaXdVRUppZ25EU29lTll3SEdraVRFNVNWQUVHUTFRSUxwQTVKYkd4bFoyRnNJR0o1ZEdVZ2MyVnhkV1Z1WTJVQVJHOXRZV2x1SUdWeWNtOXlBRkpsYzNWc2RDQnViM1FnY21Wd2NtVnpaVzUwWVdKc1pRQk9iM1FnWVNCMGRIa0FVR1Z5YldsemMybHZiaUJrWlc1cFpXUUFUM0JsY21GMGFXOXVJRzV2ZENCd1pYSnRhWFIwWldRQVRtOGdjM1ZqYUNCbWFXeGxJRzl5SUdScGNtVmpkRzl5ZVFCT2J5QnpkV05vSUhCeWIyTmxjM01BUm1sc1pTQmxlR2x6ZEhNQVZtRnNkV1VnZEc5dklHeGhjbWRsSUdadmNpQmtZWFJoSUhSNWNHVUFUbThnYzNCaFkyVWdiR1ZtZENCdmJpQmtaWFpwWTJVQVQzVjBJRzltSUcxbGJXOXllUUJTWlhOdmRYSmpaU0JpZFhONUFFbHVkR1Z5Y25Wd2RHVmtJSE41YzNSbGJTQmpZV3hzQUZKbGMyOTFjbU5sSUhSbGJYQnZjbUZ5YVd4NUlIVnVZWFpoYVd4aFlteGxBRWx1ZG1Gc2FXUWdjMlZsYXdCRGNtOXpjeTFrWlhacFkyVWdiR2x1YXdCU1pXRmtMVzl1YkhrZ1ptbHNaU0J6ZVhOMFpXMEFSR2x5WldOMGIzSjVJRzV2ZENCbGJYQjBlUUJEYjI1dVpXTjBhVzl1SUhKbGMyVjBJR0o1SUhCbFpYSUFUM0JsY21GMGFXOXVJSFJwYldWa0lHOTFkQUJEYjI1dVpXTjBhVzl1SUhKbFpuVnpaV1FBU0c5emRDQnBjeUJrYjNkdUFFaHZjM1FnYVhNZ2RXNXlaV0ZqYUdGaWJHVUFRV1JrY21WemN5QnBiaUIxYzJVQVFuSnZhMlZ1SUhCcGNHVUFTUzlQSUdWeWNtOXlBRTV2SUhOMVkyZ2daR1YyYVdObElHOXlJR0ZrWkhKbGMzTUFRbXh2WTJzZ1pHVjJhV05sSUhKbGNYVnBjbVZrQUU1dklITjFZMmdnWkdWMmFXTmxBRTV2ZENCaElHUnBjbVZqZEc5eWVRQkpjeUJoSUdScGNtVmpkRzl5ZVFCVVpYaDBJR1pwYkdVZ1luVnplUUJGZUdWaklHWnZjbTFoZENCbGNuSnZjZ0JKYm5aaGJHbGtJR0Z5WjNWdFpXNTBBRUZ5WjNWdFpXNTBJR3hwYzNRZ2RHOXZJR3h2Ym1jQVUzbHRZbTlzYVdNZ2JHbHVheUJzYjI5d0FFWnBiR1Z1WVcxbElIUnZieUJzYjI1bkFGUnZieUJ0WVc1NUlHOXdaVzRnWm1sc1pYTWdhVzRnYzNsemRHVnRBRTV2SUdacGJHVWdaR1Z6WTNKcGNIUnZjbk1nWVhaaGFXeGhZbXhsQUVKaFpDQm1hV3hsSUdSbGMyTnlhWEIwYjNJQVRtOGdZMmhwYkdRZ2NISnZZMlZ6Y3dCQ1lXUWdZV1JrY21WemN3QkdhV3hsSUhSdmJ5QnNZWEpuWlFCVWIyOGdiV0Z1ZVNCc2FXNXJjd0JPYnlCc2IyTnJjeUJoZG1GcGJHRmliR1VBVW1WemIzVnlZMlVnWkdWaFpHeHZZMnNnZDI5MWJHUWdiMk5qZFhJQVUzUmhkR1VnYm05MElISmxZMjkyWlhKaFlteGxBRkJ5WlhacGIzVnpJRzkzYm1WeUlHUnBaV1FBVDNCbGNtRjBhVzl1SUdOaGJtTmxiR1ZrQUVaMWJtTjBhVzl1SUc1dmRDQnBiWEJzWlcxbGJuUmxaQUJPYnlCdFpYTnpZV2RsSUc5bUlHUmxjMmx5WldRZ2RIbHdaUUJKWkdWdWRHbG1hV1Z5SUhKbGJXOTJaV1FBUkdWMmFXTmxJRzV2ZENCaElITjBjbVZoYlFCT2J5QmtZWFJoSUdGMllXbHNZV0pzWlFCRVpYWnBZMlVnZEdsdFpXOTFkQUJQZFhRZ2IyWWdjM1J5WldGdGN5QnlaWE52ZFhKalpYTUFUR2x1YXlCb1lYTWdZbVZsYmlCelpYWmxjbVZrQUZCeWIzUnZZMjlzSUdWeWNtOXlBRUpoWkNCdFpYTnpZV2RsQUVacGJHVWdaR1Z6WTNKcGNIUnZjaUJwYmlCaVlXUWdjM1JoZEdVQVRtOTBJR0VnYzI5amEyVjBBRVJsYzNScGJtRjBhVzl1SUdGa1pISmxjM01nY21WeGRXbHlaV1FBVFdWemMyRm5aU0IwYjI4Z2JHRnlaMlVBVUhKdmRHOWpiMndnZDNKdmJtY2dkSGx3WlNCbWIzSWdjMjlqYTJWMEFGQnliM1J2WTI5c0lHNXZkQ0JoZG1GcGJHRmliR1VBVUhKdmRHOWpiMndnYm05MElITjFjSEJ2Y25SbFpBQlRiMk5yWlhRZ2RIbHdaU0J1YjNRZ2MzVndjRzl5ZEdWa0FFNXZkQ0J6ZFhCd2IzSjBaV1FBVUhKdmRHOWpiMndnWm1GdGFXeDVJRzV2ZENCemRYQndiM0owWldRQVFXUmtjbVZ6Y3lCbVlXMXBiSGtnYm05MElITjFjSEJ2Y25SbFpDQmllU0J3Y205MGIyTnZiQUJCWkdSeVpYTnpJRzV2ZENCaGRtRnBiR0ZpYkdVQVRtVjBkMjl5YXlCcGN5QmtiM2R1QUU1bGRIZHZjbXNnZFc1eVpXRmphR0ZpYkdVQVEyOXVibVZqZEdsdmJpQnlaWE5sZENCaWVTQnVaWFIzYjNKckFFTnZibTVsWTNScGIyNGdZV0p2Y25SbFpBQk9ieUJpZFdabVpYSWdjM0JoWTJVZ1lYWmhhV3hoWW14bEFGTnZZMnRsZENCcGN5QmpiMjV1WldOMFpXUUFVMjlqYTJWMElHNXZkQ0JqYjI1dVpXTjBaV1FBUTJGdWJtOTBJSE5sYm1RZ1lXWjBaWElnYzI5amEyVjBJSE5vZFhSa2IzZHVBRTl3WlhKaGRHbHZiaUJoYkhKbFlXUjVJR2x1SUhCeWIyZHlaWE56QUU5d1pYSmhkR2x2YmlCcGJpQndjbTluY21WemN3QlRkR0ZzWlNCbWFXeGxJR2hoYm1Sc1pRQlNaVzF2ZEdVZ1NTOVBJR1Z5Y205eUFGRjFiM1JoSUdWNFkyVmxaR1ZrQUU1dklHMWxaR2wxYlNCbWIzVnVaQUJYY205dVp5QnRaV1JwZFcwZ2RIbHdaUUJPYnlCbGNuSnZjaUJwYm1admNtMWhkR2x2YmdBQUFBQ0FQd0FBd0Q4QUFBQUEzTS9STlFBQUFBQUF3QlUvQUVIQTR3SUwxeFVEQUFBQUJBQUFBQVFBQUFBR0FBQUFnL21pQUVST2JnRDhLUlVBMFZjbkFOMDA5UUJpMjhBQVBKbVZBRUdRUXdCalVmNEF1OTZyQUxkaHhRQTZiaVFBMGsxQ0FFa0c0QUFKNmk0QUhKTFJBT3NkL2dBcHNSd0E2RDZuQVBVMWdnQkV1eTRBbk9tRUFMUW1jQUJCZmw4QTFwRTVBRk9ET1FDYzlEa0FpMStFQUNqNXZRRDRIenNBM3YrWEFBK1lCUUFSTCs4QUNscUxBRzBmYlFEUGZqWUFDY3NuQUVaUHR3Q2VaajhBTGVwZkFMb25kUURsNjhjQVBYdnhBUGM1QndDU1Vvb0ErMnZxQUIreFh3QUlYWTBBTUFOV0FIdjhSZ0R3cTJzQUlMelBBRGIwbWdEanFSMEFYbUdSQUFnYjVnQ0ZtV1VBb0JSZkFJMUFhQUNBMlA4QUozTk5BQVlHTVFES1ZoVUF5YWh6QUh2aVlBQnJqTUFBR2NSSEFNMW53d0FKNk53QVdZTXFBSXQyeEFDbUhKWUFSSy9kQUJsWDBRQ2xQZ1VBQlFmL0FETitQd0RDTXVnQW1FL2VBTHQ5TWdBbVBjTUFIbXZ2QUovNFhnQTFIem9BZi9MS0FQR0hIUUI4a0NFQWFpUjhBTlZ1K2dBd0xYY0FGVHREQUxVVXhnRERHWjBBcmNUQ0FDeE5RUUFNQUYwQWhuMUdBT054TFFDYnhwb0FNMklBQUxUU2ZBQzBwNWNBTjFYVkFOYys5Z0NqRUJnQVRYYjhBR1NkS2dCdzE2c0FZM3o0QUhxd1Z3QVhGZWNBd0VsV0FEdlcyUUNuaERnQUpDUExBTmFLZHdCYVZDTUFBQis1QVBFS0d3QVp6dDhBbnpIL0FHWWVhZ0NaVjJFQXJQdEhBSDUvMkFBaVpiY0FNdWlKQU9hL1lBRHZ4TTBBYkRZSkFGMC8xQUFXM3RjQVdEdmVBTjZia2dEU0lpZ0FLSWJvQU9KWVRRREd5aklBQ09NV0FPQjl5d0FYd0ZBQTh4Mm5BQmpnV3dBdUV6UUFneEppQUlOSUFRRDFqbHNBcmJCL0FCN3A4Z0JJU2tNQUVHZlRBS3JkMkFDdVgwSUFhbUhPQUFvb3BBRFRtYlFBQnFieUFGeDNmd0Nqd29NQVlUeUlBSXB6ZUFDdmpGb0FiOWU5QUMybVl3RDB2OHNBallIdkFDYkJad0JWeWtVQXl0azJBQ2lvMGdEQ1lZMEFFc2wzQUFRbUZBQVNScHNBeEZuRUFNakZSQUJOc3BFQUFCZnpBTlJEclFBcFNlVUEvZFVRQUFDKy9BQWVsTXdBY003dUFCTSs5UURzOFlBQXMrZkRBTWY0S0FDVEJaUUF3WEUrQUM0SnN3QUxSZk1BaUJLY0FLc2dld0F1dFo4QVI1TENBSHN5THdBTVZXMEFjcWVRQUd2bkh3QXh5NVlBZVJaS0FFRjU0Z0QwMzRrQTZKU1hBT0xtaEFDWk1aY0FpTzFyQUY5Zk5nQzcvUTRBU0pxMEFHZWtiQUJ4Y2tJQWpWMHlBSjhWdUFDODVRa0FqVEVsQVBkME9RQXdCUndBRFF3QkFFc0lhQUFzN2xnQVI2cVFBSFRuQWdDOTFpUUE5MzJtQUc1SWNnQ2ZGdThBanBTbUFMU1I5Z0RSVTFFQXp3cnlBQ0NZTXdEMVMzNEFzbU5vQU4wK1h3QkFYUU1BaFlsL0FGVlNLUUEzWk1BQWJkZ1FBREpJTWdCYlRIVUFUbkhVQUVWVWJnQUxDY0VBS3ZWcEFCUm0xUUFuQjUwQVhRUlFBTFE3MndEcWRzVUFoL2tYQUVscmZRQWRKN29BbG1rcEFNYk1yQUN0RkZRQWtPSnFBSWpaaVFBc2NsQUFCS1MrQUhjSGxBRHpNSEFBQVB3bkFPcHhxQUJtd2trQVpPQTlBSmZkZ3dDalA1Y0FRNVQ5QUEyR2pBQXhRZDRBa2ptZEFOMXdqQUFYdCtjQUNOODdBQlUzS3dCY2dLQUFXb0NUQUJBUmtnQVA2TmdBYklDdkFOdi9Td0E0a0E4QVdSaDJBR0tsRlFCaHk3c0F4NG01QUJCQXZRRFM4Z1FBU1hVbkFPdTI5Z0RiSXJzQUNoU3FBSWttTHdCa2czWUFDVHN6QUE2VUdnQlJPcW9BSGFQQ0FLL3RyZ0JjSmhJQWJjSk5BQzE2bkFEQVZwY0FBeitEQUFudzlnQXJRSXdBYlRHWkFEbTBCd0FNSUJVQTJNTmJBUFdTeEFER3JVc0FUc3FsQUtjM3pRRG1xVFlBcTVLVUFOMUNhQUFaWTk0QWRvenZBR2lMVWdEODJ6Y0FycUdyQU44Vk1RQUFycUVBRFB2YUFHUk5aZ0R0QmJjQUtXVXdBRmRXdndCSC96b0Fhdm01QUhXKzh3QW9rOThBcTRBd0FHYU05Z0FFeXhVQStpSUdBTm5rSFFBOXM2UUFWeHVQQURiTkNRQk9RdWtBRTc2a0FETWp0UUR3cWhvQVQyV29BTkxCcFFBTFB3OEFXM2pOQUNQNWRnQjdpd1FBaVJkeUFNYW1Vd0J2YnVJQTcrc0FBSnRLV0FERTJyY0FxbWE2QUhiUHp3RFJBaDBBc2ZFdEFJeVp3UUREclhjQWhramFBUGRkb0FER2dQUUFyUEF2QU4zc21nQS9YTHdBME41dEFKREhId0FxMjdZQW95VTZBQUN2bWdDdFU1TUF0bGNFQUNrdHRBQkxnSDRBMmdlbkFIYXFEZ0I3V2FFQUZoSXFBTnkzTFFENjVmMEFpZHYrQUltKy9RRGtkbXdBQnFuOEFENkFjQUNGYmhVQS9ZZi9BQ2crQndCaFp6TUFLaGlHQUUyOTZnQ3o1NjhBajIxdUFKVm5PUUF4djFzQWhOZElBRERmRmdESExVTUFKV0UxQU1sd3pnQXd5N2dBdjJ6OUFLUUFvZ0FGYk9RQVd0MmdBQ0Z2UndCaUV0SUF1VnlFQUhCaFNRQnJWdUFBbVZJQkFGQlZOd0FlMWJjQU0vSEVBQk51WHdCZE1PUUFoUzZwQUIyeXd3Q2hNallBQ0xla0FPcXgxQUFXOXlFQWoybmtBQ2YvZHdBTUE0QUFqVUF0QUUvTm9BQWdwWmtBczZMVEFDOWRDZ0MwK1VJQUVkckxBSDIrMEFDYjI4RUFxeGU5QU1xaWdRQUlhbHdBTGxVWEFDY0FWUUIvRlBBQTRRZUdBQlFMWkFDV1FZMEFoNzdlQU5yOUtnQnJKYllBZTRrMEFBWHovZ0M1djU0QWFHcFBBRW9xcUFCUHhGb0FMZmk4QU5kYW1BRDB4NVVBRFUyTkFDQTZwZ0NrVjE4QUZEK3hBSUE0bFFETUlBRUFjZDJHQU1uZXRnQy9ZUFVBVFdVUkFBRUhhd0NNc0t3QXNzRFFBRkZWU0FBZSt3NEFsWExEQUtNR093REFRRFVBQnR4N0FPQkZ6QUJPS2ZvQTFzcklBT2p6UVFCOFpONEFtMlRZQU5tK01RQ2tsOE1BZDFqVUFHbmp4UUR3MmhNQXVqbzhBRVlZUmdCVmRWOEEwcjMxQUc2U3hnQ3NMbDBBRGtUdEFCdytRZ0JoeEljQUtmM3BBT2ZXOHdBaWZNb0FiNUUxQUFqZ3hRRC8xNDBBYm1yaUFMRDl4Z0NUQ01FQWZGMTBBR3V0c2dETmJwMEFQbko3QU1ZUmFnRDN6NmtBS1hQZkFMWEp1Z0MzQUZFQTRySU5BSFM2SkFEbGZXQUFkTmlLQUEwVkxBQ0JHQXdBZm1hVUFBRXBGZ0NmZW5ZQS9mMitBRlpGN3dEWmZqWUE3TmtUQUl1NnVRREVsL3dBTWFnbkFQRnV3d0NVeFRZQTJLaFdBTFNvdFFEUHpBNEFFb2t0QUc5WE5BQXNWb2tBbWM3akFOWWd1UUJyWHFvQVBpcWNBQkZmekFEOUMwb0E0ZlQ3QUk0N2JRRGloaXdBNmRTRUFQeTBxUUR2N3RFQUxqWEpBQzg1WVFBNElVUUFHOW5JQUlIOENnRDdTbW9BTHh6WUFGTzBoQUJPbVl3QVZDTE1BQ3BWM0FEQXh0WUFDeG1XQUJwd3VBQnBsV1FBSmxwZ0FEOVM3Z0IvRVE4QTlMVVJBUHpMOVFBMHZDMEFOTHp1QU9oZHpBRGRYbUFBWjQ2YkFKSXo3d0RKRjdnQVlWaWJBT0ZYdkFCUmc4WUEyRDRRQU4xeFNBQXRITjBBcnhpaEFDRXNSZ0JaODljQTJYcVlBSjVVd0FCUGh2b0FWZ2I4QU9WNXJnQ0pJallBT0swaUFHZVQzQUJWNktvQWdpWTRBTXJubXdCUkRhUUFtVE94QUtuWERnQnBCVWdBWmJMd0FIK0lwd0NJVEpjQStkRTJBQ0dTc3dCN2drb0FtTThoQUVDZjNBRGNSMVVBNFhRNkFHZnJRZ0QrbmQ4QVh0UmZBSHRucEFDNnJIb0FWZmFpQUN1SUl3QkJ1bFVBV1c0SUFDRXFoZ0E1UjRNQWllUG1BT1dlMUFCSiswQUEvMWJwQUJ3UHlnREZXWW9BbFBvckFOUEJ4UUFQeGM4QTIxcXVBRWZGaGdDRlEySUFJWVk3QUN4NWxBQVFZWWNBS2t4N0FJQXNHZ0JEdnhJQWlDYVFBSGc4aVFDb3hPUUE1ZHQ3QU1RNndnQW05T29BOTJlS0FBMlN2d0Jsb3lzQVBaT3hBTDE4Q3dDa1Vkd0FKOTFqQUduaDNRQ2FsQmtBcUNtVkFHak9LQUFKN2JRQVJKOGdBRTZZeWdCd2dtTUFmbndqQUErNU1nQ245WTRBRkZibkFDSHhDQUMxblNvQWIzNU5BS1VaVVFDMSthc0FndC9XQUpiZFlRQVdOZ0lBeERxZkFJT2lvUUJ5N1cwQU9ZMTZBSUs0cVFCck1sd0FSaWRiQUFBMDdRRFNBSGNBL1BSVkFBRlpUUURnY1lBQVFhUDVBZ3RkUVBzaCtUOEFBQUFBTFVSMFBnQUFBSUNZUnZnOEFBQUFZRkhNZURzQUFBQ0FneHZ3T1FBQUFFQWdKWG80QUFBQWdDS0M0ellBQUFBQUhmTnBOUUFBQUFBQUFQQS9BQUFBQUFBQStEOEFBQUFBQUFBQUFBYlF6MFByL1V3K0FFR0wrZ0lMVEVBRHVPSS9PR1B0UHRvUFNUOWVtSHMvMmcvSlAyazNyREZvSVNJenRBOFVNMmdob2pQYkQway8ydzlKditUTEZrRGt5eGJBQUFBQUFBQUFBSURiRDBsQTJ3OUp3SEozWVFCeWQyRUFRZno2QWdzQjlBQkJvL3NDQ3dYLy8vLy8vd0JCNlBzQ0Mxa3RLeUFnSURCWU1IZ0FLRzUxYkd3cEFBQUFBQUFBQUFBUkFBb0FFUkVSQUFBQUFBVUFBQUFBQUFBSkFBQUFBQXNBQUFBQUFBQUFBQkVBRHdvUkVSRURDZ2NBQVFBSkN3c0FBQWtHQ3dBQUN3QUdFUUFBQUJFUkVRQkIwZndDQ3lFTEFBQUFBQUFBQUFBUkFBb0tFUkVSQUFvQUFBSUFDUXNBQUFBSkFBc0FBQXNBUVl2OUFnc0JEQUJCbC8wQ0N4VU1BQUFBQUF3QUFBQUFDUXdBQUFBQUFBd0FBQXdBUWNYOUFnc0JEZ0JCMGYwQ0N4VU5BQUFBQkEwQUFBQUFDUTRBQUFBQUFBNEFBQTRBUWYvOUFnc0JFQUJCaS80Q0N4NFBBQUFBQUE4QUFBQUFDUkFBQUFBQUFCQUFBQkFBQUJJQUFBQVNFaElBUWNMK0Fnc09FZ0FBQUJJU0VnQUFBQUFBQUFrQVFmUCtBZ3NCQ3dCQi8vNENDeFVLQUFBQUFBb0FBQUFBQ1FzQUFBQUFBQXNBQUFzQVFhMy9BZ3NCREFCQnVmOENDNWtGREFBQUFBQU1BQUFBQUFrTUFBQUFBQUFNQUFBTUFBQXdNVEl6TkRVMk56ZzVRVUpEUkVWR0xUQllLekJZSURCWUxUQjRLekI0SURCNEFHbHVaZ0JKVGtZQWJtRnVBRTVCVGdBdUFBQUFBTkQxQUFCbzlnQUFhVzVtYVc1cGRIa0FibUZ1QUFBQUFORjBuZ0JYbmIwcWdIQlNELy8vUGljS0FBQUFaQUFBQU9nREFBQVFKd0FBb0lZQkFFQkNEd0NBbHBnQUFPSDFCUmdBQUFBMUFBQUFjUUFBQUd2Ly8vL08rLy8va3IvLy93QUFBQUFBQUFBQS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vd0FCQWdNRUJRWUhDQW4vLy8vLy8vLy9DZ3NNRFE0UEVCRVNFeFFWRmhjWUdSb2JIQjBlSHlBaElpUC8vLy8vLy84S0N3d05EZzhRRVJJVEZCVVdGeGdaR2hzY0hSNGZJQ0VpSS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzhBQVFJRUJ3TUdCUUFBQUFBQUFBQUNBQURBQXdBQXdBUUFBTUFGQUFEQUJnQUF3QWNBQU1BSUFBREFDUUFBd0FvQUFNQUxBQURBREFBQXdBMEFBTUFPQUFEQUR3QUF3QkFBQU1BUkFBREFFZ0FBd0JNQUFNQVVBQURBRlFBQXdCWUFBTUFYQUFEQUdBQUF3QmtBQU1BYUFBREFHd0FBd0J3QUFNQWRBQURBSGdBQXdCOEFBTUFBQUFDekFRQUF3d0lBQU1NREFBRERCQUFBd3dVQUFNTUdBQUREQndBQXd3Z0FBTU1KQUFERENnQUF3d3NBQU1NTUFBREREUUFBMHc0QUFNTVBBQUREQUFBTXV3RUFETU1DQUF6REF3QU13d1FBRE5OMlpXTjBiM0lBUWVTRUF3dWZEZ0lBQUFBREFBQUFCUUFBQUFjQUFBQUxBQUFBRFFBQUFCRUFBQUFUQUFBQUZ3QUFBQjBBQUFBZkFBQUFKUUFBQUNrQUFBQXJBQUFBTHdBQUFEVUFBQUE3QUFBQVBRQUFBRU1BQUFCSEFBQUFTUUFBQUU4QUFBQlRBQUFBV1FBQUFHRUFBQUJsQUFBQVp3QUFBR3NBQUFCdEFBQUFjUUFBQUg4QUFBQ0RBQUFBaVFBQUFJc0FBQUNWQUFBQWx3QUFBSjBBQUFDakFBQUFwd0FBQUswQUFBQ3pBQUFBdFFBQUFMOEFBQURCQUFBQXhRQUFBTWNBQUFEVEFBQUFBUUFBQUFzQUFBQU5BQUFBRVFBQUFCTUFBQUFYQUFBQUhRQUFBQjhBQUFBbEFBQUFLUUFBQUNzQUFBQXZBQUFBTlFBQUFEc0FBQUE5QUFBQVF3QUFBRWNBQUFCSkFBQUFUd0FBQUZNQUFBQlpBQUFBWVFBQUFHVUFBQUJuQUFBQWF3QUFBRzBBQUFCeEFBQUFlUUFBQUg4QUFBQ0RBQUFBaVFBQUFJc0FBQUNQQUFBQWxRQUFBSmNBQUFDZEFBQUFvd0FBQUtjQUFBQ3BBQUFBclFBQUFMTUFBQUMxQUFBQXV3QUFBTDhBQUFEQkFBQUF4UUFBQU1jQUFBRFJBQUFBWDE5dVpYaDBYM0J5YVcxbElHOTJaWEptYkc5M0FBQUE0UGNBQUFBQUFBQlV4QUFBK3dBQUFQd0FBQUQ5QUFBQS9nQUFBUDhBQUFBQUFRQUFBUUVBQUFJQkFBQURBUUFBQkFFQUFBVUJBQUFHQVFBQUJ3RUFBQWdCQUFCT1UzUXpYMTh5TVRCZlgzTjBaR2x1WW5WbVNXTkZSUUR3OUFBQVBNUUFBUHpIQUFCMWJuTjFjSEJ2Y25SbFpDQnNiMk5oYkdVZ1ptOXlJSE4wWVc1a1lYSmtJR2x1Y0hWMEFBQUFBQUFBQU9ERUFBQUpBUUFBQ2dFQUFBc0JBQUFNQVFBQURRRUFBQTRCQUFBUEFRQUFFQUVBQUJFQkFBQVNBUUFBRXdFQUFCUUJBQUFWQVFBQUZnRUFBRTVUZEROZlh6SXhNRjlmYzNSa2FXNWlkV1pKZDBWRkFQRDBBQURJeEFBQU9NZ0FBQUFBQUFCSXhRQUErd0FBQUJjQkFBQVlBUUFBL2dBQUFQOEFBQUFBQVFBQUdRRUFBQUlCQUFBREFRQUFHZ0VBQUJzQkFBQWNBUUFBSFFFQUFCNEJBQUJPVTNRelgxOHlNVEZmWDNOMFpHOTFkR0oxWmtsalJVVUFBQUFBOFBRQUFDekZBQUQ4eHdBQUFBQUFBTERGQUFBSkFRQUFId0VBQUNBQkFBQU1BUUFBRFFFQUFBNEJBQUFoQVFBQUVBRUFBQkVCQUFBaUFRQUFJd0VBQUNRQkFBQWxBUUFBSmdFQUFFNVRkRE5mWHpJeE1WOWZjM1JrYjNWMFluVm1TWGRGUlFBQUFBRHc5QUFBbE1VQUFEaklBQUFBQUFBQS9NY0FBUHNBQUFBbkFRQUFLQUVBQVA0QUFBRC9BQUFBQUFFQUFBRUJBQUFDQVFBQUF3RUFBQm9CQUFBYkFRQUFIQUVBQUFjQkFBQUlBUUFBQUFBQUFEaklBQUFKQVFBQUtRRUFBQ29CQUFBTUFRQUFEUUVBQUE0QkFBQVBBUUFBRUFFQUFCRUJBQUFpQVFBQUl3RUFBQ1FCQUFBVkFRQUFGZ0VBQUFnQUFBQUFBQUFBY01nQUFDc0JBQUFzQVFBQStQLy8vL2ovLy85d3lBQUFMUUVBQUM0QkFBQkl4Z0FBWE1ZQUFBZ0FBQUFBQUFBQXVNZ0FBQzhCQUFBd0FRQUErUC8vLy9qLy8vKzR5QUFBTVFFQUFESUJBQUI0eGdBQWpNWUFBQVFBQUFBQUFBQUFBTWtBQURNQkFBQTBBUUFBL1AvLy8vei8vLzhBeVFBQU5RRUFBRFlCQUFDb3hnQUF2TVlBQUFRQUFBQUFBQUFBU01rQUFEY0JBQUE0QVFBQS9QLy8vL3ovLy85SXlRQUFPUUVBQURvQkFBRFl4Z0FBN01ZQUFBQUFBQUF3eHdBQU93RUFBRHdCQUFCcGIzTmZZbUZ6WlRvNlkyeGxZWElBVGxOME0xOWZNamhwYjNOZlltRnpaVVVBQUFESTlBQUFITWNBQUFBQUFBQjB4d0FBUFFFQUFENEJBQUJPVTNRelgxOHlPV0poYzJsalgybHZjMGxqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWRlJRQUFBUEQwQUFCSXh3QUFNTWNBQUFBQUFBQzh4d0FBUHdFQUFFQUJBQUJPVTNRelgxOHlPV0poYzJsalgybHZjMGwzVGxOZk1URmphR0Z5WDNSeVlXbDBjMGwzUlVWRlJRQUFBUEQwQUFDUXh3QUFNTWNBQUU1VGRETmZYekl4TldKaGMybGpYM04wY21WaGJXSjFaa2xqVGxOZk1URmphR0Z5WDNSeVlXbDBjMGxqUlVWRlJRQUFBQURJOUFBQXlNY0FBRTVUZEROZlh6SXhOV0poYzJsalgzTjBjbVZoYldKMVprbDNUbE5mTVRGamFHRnlYM1J5WVdsMGMwbDNSVVZGUlFBQUFBREk5QUFBQk1nQUFFNVRkRE5mWHpJeE0ySmhjMmxqWDJsemRISmxZVzFKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVUFBRXoxQUFCQXlBQUFBQUFBQUFFQUFBQjB4d0FBQS9ULy8wNVRkRE5mWHpJeE0ySmhjMmxqWDJsemRISmxZVzFKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVUFBRXoxQUFDSXlBQUFBQUFBQUFFQUFBQzh4d0FBQS9ULy8wNVRkRE5mWHpJeE0ySmhjMmxqWDI5emRISmxZVzFKWTA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KWTBWRlJVVUFBRXoxQUFEUXlBQUFBQUFBQUFFQUFBQjB4d0FBQS9ULy8wNVRkRE5mWHpJeE0ySmhjMmxqWDI5emRISmxZVzFKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVUFBRXoxQUFBWXlRQUFBQUFBQUFFQUFBQzh4d0FBQS9ULy85NFNCSlVBQUFBQS8vLy8vLy8vLy8vLy8vLy9ZTWtBQUJRQUFBQkRMbFZVUmkwNEFFR29rd01MQW5USkFFSEFrd01MQmt4RFgwRk1UQUJCMEpNREMxNU1RMTlEVkZsUVJRQUFBQUJNUTE5T1ZVMUZVa2xEQUFCTVExOVVTVTFGQUFBQUFBQk1RMTlEVDB4TVFWUkZBQUJNUTE5TlQwNUZWRUZTV1FCTVExOU5SVk5UUVVkRlV3Qk1RVTVIQUVNdVZWUkdMVGdBVUU5VFNWZ0FBRERMQUVHd2xnTUwvd0VDQUFJQUFnQUNBQUlBQWdBQ0FBSUFBZ0FESUFJZ0FpQUNJQUlnQWdBQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQWdBQ0FBSUFBZ0FDQUFJQUFnQUNBQUlBQVdBRXdBVEFCTUFFd0FUQUJNQUV3QVRBQk1BRXdBVEFCTUFFd0FUQUJNQUkyQWpZQ05nSTJBallDTmdJMkFqWUNOZ0kyQVRBQk1BRXdBVEFCTUFFd0FUQUNOVUkxUWpWQ05VSTFRalZDTVVJeFFqRkNNVUl4UWpGQ01VSXhRakZDTVVJeFFqRkNNVUl4UWpGQ01VSXhRakZDTVVJeFFUQUJNQUV3QVRBQk1BRXdBaldDTllJMWdqV0NOWUkxZ2pHQ01ZSXhnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZSXhnakdDTVlJeGdqR0NNWUl4Z2pHQ01ZRXdBVEFCTUFFd0FJQVFiQ2FBd3NDUU04QVFjU2VBd3Y1QXdFQUFBQUNBQUFBQXdBQUFBUUFBQUFGQUFBQUJnQUFBQWNBQUFBSUFBQUFDUUFBQUFvQUFBQUxBQUFBREFBQUFBMEFBQUFPQUFBQUR3QUFBQkFBQUFBUkFBQUFFZ0FBQUJNQUFBQVVBQUFBRlFBQUFCWUFBQUFYQUFBQUdBQUFBQmtBQUFBYUFBQUFHd0FBQUJ3QUFBQWRBQUFBSGdBQUFCOEFBQUFnQUFBQUlRQUFBQ0lBQUFBakFBQUFKQUFBQUNVQUFBQW1BQUFBSndBQUFDZ0FBQUFwQUFBQUtnQUFBQ3NBQUFBc0FBQUFMUUFBQUM0QUFBQXZBQUFBTUFBQUFERUFBQUF5QUFBQU13QUFBRFFBQUFBMUFBQUFOZ0FBQURjQUFBQTRBQUFBT1FBQUFEb0FBQUE3QUFBQVBBQUFBRDBBQUFBK0FBQUFQd0FBQUVBQUFBQkJBQUFBUWdBQUFFTUFBQUJFQUFBQVJRQUFBRVlBQUFCSEFBQUFTQUFBQUVrQUFBQktBQUFBU3dBQUFFd0FBQUJOQUFBQVRnQUFBRThBQUFCUUFBQUFVUUFBQUZJQUFBQlRBQUFBVkFBQUFGVUFBQUJXQUFBQVZ3QUFBRmdBQUFCWkFBQUFXZ0FBQUZzQUFBQmNBQUFBWFFBQUFGNEFBQUJmQUFBQVlBQUFBRUVBQUFCQ0FBQUFRd0FBQUVRQUFBQkZBQUFBUmdBQUFFY0FBQUJJQUFBQVNRQUFBRW9BQUFCTEFBQUFUQUFBQUUwQUFBQk9BQUFBVHdBQUFGQUFBQUJSQUFBQVVnQUFBRk1BQUFCVUFBQUFWUUFBQUZZQUFBQlhBQUFBV0FBQUFGa0FBQUJhQUFBQWV3QUFBSHdBQUFCOUFBQUFmZ0FBQUg4QVFjQ21Bd3NDVU5VQVFkU3FBd3Y1QXdFQUFBQUNBQUFBQXdBQUFBUUFBQUFGQUFBQUJnQUFBQWNBQUFBSUFBQUFDUUFBQUFvQUFBQUxBQUFBREFBQUFBMEFBQUFPQUFBQUR3QUFBQkFBQUFBUkFBQUFFZ0FBQUJNQUFBQVVBQUFBRlFBQUFCWUFBQUFYQUFBQUdBQUFBQmtBQUFBYUFBQUFHd0FBQUJ3QUFBQWRBQUFBSGdBQUFCOEFBQUFnQUFBQUlRQUFBQ0lBQUFBakFBQUFKQUFBQUNVQUFBQW1BQUFBSndBQUFDZ0FBQUFwQUFBQUtnQUFBQ3NBQUFBc0FBQUFMUUFBQUM0QUFBQXZBQUFBTUFBQUFERUFBQUF5QUFBQU13QUFBRFFBQUFBMUFBQUFOZ0FBQURjQUFBQTRBQUFBT1FBQUFEb0FBQUE3QUFBQVBBQUFBRDBBQUFBK0FBQUFQd0FBQUVBQUFBQmhBQUFBWWdBQUFHTUFBQUJrQUFBQVpRQUFBR1lBQUFCbkFBQUFhQUFBQUdrQUFBQnFBQUFBYXdBQUFHd0FBQUJ0QUFBQWJnQUFBRzhBQUFCd0FBQUFjUUFBQUhJQUFBQnpBQUFBZEFBQUFIVUFBQUIyQUFBQWR3QUFBSGdBQUFCNUFBQUFlZ0FBQUZzQUFBQmNBQUFBWFFBQUFGNEFBQUJmQUFBQVlBQUFBR0VBQUFCaUFBQUFZd0FBQUdRQUFBQmxBQUFBWmdBQUFHY0FBQUJvQUFBQWFRQUFBR29BQUFCckFBQUFiQUFBQUcwQUFBQnVBQUFBYndBQUFIQUFBQUJ4QUFBQWNnQUFBSE1BQUFCMEFBQUFkUUFBQUhZQUFBQjNBQUFBZUFBQUFIa0FBQUI2QUFBQWV3QUFBSHdBQUFCOUFBQUFmZ0FBQUg4QVFkQ3lBd3ZSQVRBeE1qTTBOVFkzT0RsaFltTmtaV1pCUWtORVJVWjRXQ3N0Y0ZCcFNXNU9BQ1Z3QUd3QWJHd0FBRXdBSlFBQUFBQUFKWEFBQUFBQUpVazZKVTA2SlZNZ0pYQWxTRG9sVFFBQUFBQUFBQUFBSlFBQUFHMEFBQUF2QUFBQUpRQUFBR1FBQUFBdkFBQUFKUUFBQUhrQUFBQWxBQUFBV1FBQUFDMEFBQUFsQUFBQWJRQUFBQzBBQUFBbEFBQUFaQUFBQUNVQUFBQkpBQUFBT2dBQUFDVUFBQUJOQUFBQU9nQUFBQ1VBQUFCVEFBQUFJQUFBQUNVQUFBQndBQUFBQUFBQUFDVUFBQUJJQUFBQU9nQUFBQ1VBQUFCTkFFR3d0QU1MdlFRbEFBQUFTQUFBQURvQUFBQWxBQUFBVFFBQUFEb0FBQUFsQUFBQVV3QUFBQ1ZNWmdBd01USXpORFUyTnpnNUFDVXVNRXhtQUVNQUFBQUFBQUFZM3dBQVV3RUFBRlFCQUFCVkFRQUFBQUFBQUhqZkFBQldBUUFBVndFQUFGVUJBQUJZQVFBQVdRRUFBRm9CQUFCYkFRQUFYQUVBQUYwQkFBQmVBUUFBWHdFQUFBQUFBQURnM2dBQVlBRUFBR0VCQUFCVkFRQUFZZ0VBQUdNQkFBQmtBUUFBWlFFQUFHWUJBQUJuQVFBQWFBRUFBQUFBQUFDdzN3QUFhUUVBQUdvQkFBQlZBUUFBYXdFQUFHd0JBQUJ0QVFBQWJnRUFBRzhCQUFBQUFBQUExTjhBQUhBQkFBQnhBUUFBVlFFQUFISUJBQUJ6QVFBQWRBRUFBSFVCQUFCMkFRQUFkSEoxWlFBQUFBQjBBQUFBY2dBQUFIVUFBQUJsQUFBQUFBQUFBR1poYkhObEFBQUFaZ0FBQUdFQUFBQnNBQUFBY3dBQUFHVUFBQUFBQUFBQUpXMHZKV1F2SlhrQUFBQUFKUUFBQUcwQUFBQXZBQUFBSlFBQUFHUUFBQUF2QUFBQUpRQUFBSGtBQUFBQUFBQUFKVWc2SlUwNkpWTUFBQUFBSlFBQUFFZ0FBQUE2QUFBQUpRQUFBRTBBQUFBNkFBQUFKUUFBQUZNQUFBQUFBQUFBSldFZ0pXSWdKV1FnSlVnNkpVMDZKVk1nSlZrQUFBQUFKUUFBQUdFQUFBQWdBQUFBSlFBQUFHSUFBQUFnQUFBQUpRQUFBR1FBQUFBZ0FBQUFKUUFBQUVnQUFBQTZBQUFBSlFBQUFFMEFBQUE2QUFBQUpRQUFBRk1BQUFBZ0FBQUFKUUFBQUZrQUFBQUFBQUFBSlVrNkpVMDZKVk1nSlhBQUpRQUFBRWtBQUFBNkFBQUFKUUFBQUUwQUFBQTZBQUFBSlFBQUFGTUFBQUFnQUFBQUpRQUFBSEFBUWZpNEF3dVdDYURjQUFCM0FRQUFlQUVBQUZVQkFBQk9VM1F6WDE4eU5teHZZMkZzWlRWbVlXTmxkRVVBQUFEdzlBQUFpTndBQUF6eEFBQUFBQUFBSU4wQUFIY0JBQUI1QVFBQVZRRUFBSG9CQUFCN0FRQUFmQUVBQUgwQkFBQitBUUFBZndFQUFJQUJBQUNCQVFBQWdnRUFBSU1CQUFDRUFRQUFoUUVBQUU1VGRETmZYekkxWTNSNWNHVkpkMFZGQUU1VGRETmZYekl4TUdOMGVYQmxYMkpoYzJWRkFBREk5QUFBQXQwQUFFejFBQUR3M0FBQUFBQUFBQUlBQUFDZzNBQUFBZ0FBQUJqZEFBQUNBQUFBQUFBQUFMVGRBQUIzQVFBQWhnRUFBRlVCQUFDSEFRQUFpQUVBQUlrQkFBQ0tBUUFBaXdFQUFJd0JBQUNOQVFBQVRsTjBNMTlmTWpkamIyUmxZM1owU1dOak1URmZYMjFpYzNSaGRHVmZkRVZGQUU1VGRETmZYekl4TW1OdlpHVmpkblJmWW1GelpVVUFBQUFBeVBRQUFKTGRBQUJNOVFBQWNOMEFBQUFBQUFBQ0FBQUFvTndBQUFJQUFBQ3MzUUFBQWdBQUFBQUFBQUFvM2dBQWR3RUFBSTRCQUFCVkFRQUFqd0VBQUpBQkFBQ1JBUUFBa2dFQUFKTUJBQUNVQVFBQWxRRUFBRTVUZEROZlh6STNZMjlrWldOMmRFbEVjMk14TVY5ZmJXSnpkR0YwWlY5MFJVVUFBRXoxQUFBRTNnQUFBQUFBQUFJQUFBQ2czQUFBQWdBQUFLemRBQUFDQUFBQUFBQUFBSnplQUFCM0FRQUFsZ0VBQUZVQkFBQ1hBUUFBbUFFQUFKa0JBQUNhQVFBQW13RUFBSndCQUFDZEFRQUFUbE4wTTE5Zk1qZGpiMlJsWTNaMFNVUnBZekV4WDE5dFluTjBZWFJsWDNSRlJRQUFUUFVBQUhqZUFBQUFBQUFBQWdBQUFLRGNBQUFDQUFBQXJOMEFBQUlBQUFCT1UzUXpYMTh5TjJOdlpHVmpkblJKZDJNeE1WOWZiV0p6ZEdGMFpWOTBSVVVBQUFCTTlRQUF2TjRBQUFBQUFBQUNBQUFBb053QUFBSUFBQUNzM1FBQUFnQUFBRTVUZEROZlh6STJiRzlqWVd4bE5WOWZhVzF3UlFBQUFQRDBBQUFBM3dBQW9Od0FBRTVUZEROZlh6STNZMjlzYkdGMFpVbGpSVVVBOFBRQUFDVGZBQUNnM0FBQVRsTjBNMTlmTWpkamIyeHNZWFJsU1hkRlJRRHc5QUFBUk44QUFLRGNBQUJPVTNRelgxOHlOV04wZVhCbFNXTkZSUUFBQUV6MUFBQmszd0FBQUFBQUFBSUFBQUNnM0FBQUFnQUFBQmpkQUFBQ0FBQUFUbE4wTTE5Zk1qaHVkVzF3ZFc1amRFbGpSVVVBQUFBQThQUUFBSmpmQUFDZzNBQUFUbE4wTTE5Zk1qaHVkVzF3ZFc1amRFbDNSVVVBQUFBQThQUUFBTHpmQUFDZzNBQUFBQUFBQURqZkFBQ2VBUUFBbndFQUFGVUJBQUNnQVFBQW9RRUFBS0lCQUFBQUFBQUFXTjhBQUtNQkFBQ2tBUUFBVlFFQUFLVUJBQUNtQVFBQXB3RUFBQUFBQUFEMDRBQUFkd0VBQUtnQkFBQlZBUUFBcVFFQUFLb0JBQUNyQVFBQXJBRUFBSzBCQUFDdUFRQUFyd0VBQUxBQkFBQ3hBUUFBc2dFQUFMTUJBQUJPVTNRelgxOHlOMjUxYlY5blpYUkpZMDVUWHpFNWFYTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlVWRkFFNVRkRE5mWHpJNVgxOXVkVzFmWjJWMFNXTkZSUUJPVTNRelgxOHlNVFJmWDI1MWJWOW5aWFJmWW1GelpVVUFBTWowQUFDNjRBQUFUUFVBQUtUZ0FBQUFBQUFBQVFBQUFOVGdBQUFBQUFBQVRQVUFBR0RnQUFBQUFBQUFBZ0FBQUtEY0FBQUNBQUFBM09BQVFaakNBd3ZLQWNqaEFBQjNBUUFBdEFFQUFGVUJBQUMxQVFBQXRnRUFBTGNCQUFDNEFRQUF1UUVBQUxvQkFBQzdBUUFBdkFFQUFMMEJBQUMrQVFBQXZ3RUFBRTVUZEROZlh6STNiblZ0WDJkbGRFbDNUbE5mTVRscGMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNYZE9VMTh4TVdOb1lYSmZkSEpoYVhSelNYZEZSVVZGUlVVQVRsTjBNMTlmTWpsZlgyNTFiVjluWlhSSmQwVkZBQUFBVFBVQUFKamhBQUFBQUFBQUFRQUFBTlRnQUFBQUFBQUFUUFVBQUZUaEFBQUFBQUFBQWdBQUFLRGNBQUFDQUFBQXNPRUFRZXpEQXd2ZUFiRGlBQUIzQVFBQXdBRUFBRlVCQUFEQkFRQUF3Z0VBQU1NQkFBREVBUUFBeFFFQUFNWUJBQURIQVFBQXlBRUFBRTVUZEROZlh6STNiblZ0WDNCMWRFbGpUbE5mTVRsdmMzUnlaV0Z0WW5WbVgybDBaWEpoZEc5eVNXTk9VMTh4TVdOb1lYSmZkSEpoYVhSelNXTkZSVVZGUlVVQVRsTjBNMTlmTWpsZlgyNTFiVjl3ZFhSSlkwVkZBRTVUZEROZlh6SXhORjlmYm5WdFgzQjFkRjlpWVhObFJRQUF5UFFBQUhiaUFBQk05UUFBWU9JQUFBQUFBQUFCQUFBQWtPSUFBQUFBQUFCTTlRQUFIT0lBQUFBQUFBQUNBQUFBb053QUFBSUFBQUNZNGdCQjFNVURDNzRCZU9NQUFIY0JBQURKQVFBQVZRRUFBTW9CQUFETEFRQUF6QUVBQU0wQkFBRE9BUUFBendFQUFOQUJBQURSQVFBQVRsTjBNMTlmTWpkdWRXMWZjSFYwU1hkT1UxOHhPVzl6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVkZSUUJPVTNRelgxOHlPVjlmYm5WdFgzQjFkRWwzUlVVQUFBQk05UUFBU09NQUFBQUFBQUFCQUFBQWtPSUFBQUFBQUFCTTlRQUFCT01BQUFBQUFBQUNBQUFBb053QUFBSUFBQUJnNHdCQm5NY0RDNW9MZU9RQUFOSUJBQURUQVFBQVZRRUFBTlFCQUFEVkFRQUExZ0VBQU5jQkFBRFlBUUFBMlFFQUFOb0JBQUQ0Ly8vL2VPUUFBTnNCQUFEY0FRQUEzUUVBQU40QkFBRGZBUUFBNEFFQUFPRUJBQUJPVTNRelgxOHlPSFJwYldWZloyVjBTV05PVTE4eE9XbHpkSEpsWVcxaWRXWmZhWFJsY21GMGIzSkpZMDVUWHpFeFkyaGhjbDkwY21GcGRITkpZMFZGUlVWRlJRQk9VM1F6WDE4eU9YUnBiV1ZmWW1GelpVVUF5UFFBQURIa0FBQk9VM1F6WDE4eU1qQmZYM1JwYldWZloyVjBYMk5mYzNSdmNtRm5aVWxqUlVVQUFBREk5QUFBVE9RQUFFejFBQURzNHdBQUFBQUFBQU1BQUFDZzNBQUFBZ0FBQUVUa0FBQUNBQUFBY09RQUFBQUlBQUFBQUFBQVpPVUFBT0lCQUFEakFRQUFWUUVBQU9RQkFBRGxBUUFBNWdFQUFPY0JBQURvQVFBQTZRRUFBT29CQUFENC8vLy9aT1VBQU9zQkFBRHNBUUFBN1FFQUFPNEJBQUR2QVFBQThBRUFBUEVCQUFCT1UzUXpYMTh5T0hScGJXVmZaMlYwU1hkT1UxOHhPV2x6ZEhKbFlXMWlkV1pmYVhSbGNtRjBiM0pKZDA1VFh6RXhZMmhoY2w5MGNtRnBkSE5KZDBWRlJVVkZSUUJPVTNRelgxOHlNakJmWDNScGJXVmZaMlYwWDJOZmMzUnZjbUZuWlVsM1JVVUFBTWowQUFBNTVRQUFUUFVBQVBUa0FBQUFBQUFBQXdBQUFLRGNBQUFDQUFBQVJPUUFBQUlBQUFCYzVRQUFBQWdBQUFBQUFBQUk1Z0FBOGdFQUFQTUJBQUJWQVFBQTlBRUFBRTVUZEROZlh6STRkR2x0WlY5d2RYUkpZMDVUWHpFNWIzTjBjbVZoYldKMVpsOXBkR1Z5WVhSdmNrbGpUbE5mTVRGamFHRnlYM1J5WVdsMGMwbGpSVVZGUlVWRkFFNVRkRE5mWHpJeE1GOWZkR2x0WlY5d2RYUkZBQUFBeVBRQUFPbmxBQUJNOVFBQXBPVUFBQUFBQUFBQ0FBQUFvTndBQUFJQUFBQUE1Z0FBQUFnQUFBQUFBQUNJNWdBQTlRRUFBUFlCQUFCVkFRQUE5d0VBQUU1VGRETmZYekk0ZEdsdFpWOXdkWFJKZDA1VFh6RTViM04wY21WaGJXSjFabDlwZEdWeVlYUnZja2wzVGxOZk1URmphR0Z5WDNSeVlXbDBjMGwzUlVWRlJVVkZBQUFBQUV6MUFBQkE1Z0FBQUFBQUFBSUFBQUNnM0FBQUFnQUFBQURtQUFBQUNBQUFBQUFBQUJ6bkFBQjNBUUFBK0FFQUFGVUJBQUQ1QVFBQStnRUFBUHNCQUFEOEFRQUEvUUVBQVA0QkFBRC9BUUFBQUFJQUFBRUNBQUJPVTNRelgxOHlNVEJ0YjI1bGVYQjFibU4wU1dOTVlqQkZSVVVBVGxOME0xOWZNakV3Ylc5dVpYbGZZbUZ6WlVVQUFBQUF5UFFBQVB6bUFBQk05UUFBNE9ZQUFBQUFBQUFDQUFBQW9Od0FBQUlBQUFBVTV3QUFBZ0FBQUFBQUFBQ1E1d0FBZHdFQUFBSUNBQUJWQVFBQUF3SUFBQVFDQUFBRkFnQUFCZ0lBQUFjQ0FBQUlBZ0FBQ1FJQUFBb0NBQUFMQWdBQVRsTjBNMTlmTWpFd2JXOXVaWGx3ZFc1amRFbGpUR0l4UlVWRkFFejFBQUIwNXdBQUFBQUFBQUlBQUFDZzNBQUFBZ0FBQUJUbkFBQUNBQUFBQUFBQUFBVG9BQUIzQVFBQURBSUFBRlVCQUFBTkFnQUFEZ0lBQUE4Q0FBQVFBZ0FBRVFJQUFCSUNBQUFUQWdBQUZBSUFBQlVDQUFCT1UzUXpYMTh5TVRCdGIyNWxlWEIxYm1OMFNYZE1ZakJGUlVVQVRQVUFBT2puQUFBQUFBQUFBZ0FBQUtEY0FBQUNBQUFBRk9jQUFBSUFBQUFBQUFBQWVPZ0FBSGNCQUFBV0FnQUFWUUVBQUJjQ0FBQVlBZ0FBR1FJQUFCb0NBQUFiQWdBQUhBSUFBQjBDQUFBZUFnQUFId0lBQUU1VGRETmZYekl4TUcxdmJtVjVjSFZ1WTNSSmQweGlNVVZGUlFCTTlRQUFYT2dBQUFBQUFBQUNBQUFBb053QUFBSUFBQUFVNXdBQUFnQUFBQUFBQUFBYzZRQUFkd0VBQUNBQ0FBQlZBUUFBSVFJQUFDSUNBQUJPVTNRelgxOHlPVzF2Ym1WNVgyZGxkRWxqVGxOZk1UbHBjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTV05PVTE4eE1XTm9ZWEpmZEhKaGFYUnpTV05GUlVWRlJVVUFUbE4wTTE5Zk1qRXhYMTl0YjI1bGVWOW5aWFJKWTBWRkFBREk5QUFBK3VnQUFFejFBQUMwNkFBQUFBQUFBQUlBQUFDZzNBQUFBZ0FBQUJUcEFFSEEwZ01MbWdIQTZRQUFkd0VBQUNNQ0FBQlZBUUFBSkFJQUFDVUNBQUJPVTNRelgxOHlPVzF2Ym1WNVgyZGxkRWwzVGxOZk1UbHBjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlVWRlJVVUFUbE4wTTE5Zk1qRXhYMTl0YjI1bGVWOW5aWFJKZDBWRkFBREk5QUFBbnVrQUFFejFBQUJZNlFBQUFBQUFBQUlBQUFDZzNBQUFBZ0FBQUxqcEFFSGswd01MbWdGazZnQUFkd0VBQUNZQ0FBQlZBUUFBSndJQUFDZ0NBQUJPVTNRelgxOHlPVzF2Ym1WNVgzQjFkRWxqVGxOZk1UbHZjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTV05PVTE4eE1XTm9ZWEpmZEhKaGFYUnpTV05GUlVWRlJVVUFUbE4wTTE5Zk1qRXhYMTl0YjI1bGVWOXdkWFJKWTBWRkFBREk5QUFBUXVvQUFFejFBQUQ4NlFBQUFBQUFBQUlBQUFDZzNBQUFBZ0FBQUZ6cUFFR0kxUU1MbWdFSTZ3QUFkd0VBQUNrQ0FBQlZBUUFBS2dJQUFDc0NBQUJPVTNRelgxOHlPVzF2Ym1WNVgzQjFkRWwzVGxOZk1UbHZjM1J5WldGdFluVm1YMmwwWlhKaGRHOXlTWGRPVTE4eE1XTm9ZWEpmZEhKaGFYUnpTWGRGUlVWRlJVVUFUbE4wTTE5Zk1qRXhYMTl0YjI1bGVWOXdkWFJKZDBWRkFBREk5QUFBNXVvQUFFejFBQUNnNmdBQUFBQUFBQUlBQUFDZzNBQUFBZ0FBQUFEckFFR3MxZ01MamhXQTZ3QUFkd0VBQUN3Q0FBQlZBUUFBTFFJQUFDNENBQUF2QWdBQVRsTjBNMTlmTWpodFpYTnpZV2RsYzBsalJVVUFUbE4wTTE5Zk1qRXpiV1Z6YzJGblpYTmZZbUZ6WlVVQUFBQUF5UFFBQUYzckFBQk05UUFBU09zQUFBQUFBQUFDQUFBQW9Od0FBQUlBQUFCNDZ3QUFBZ0FBQUFBQUFBRFk2d0FBZHdFQUFEQUNBQUJWQVFBQU1RSUFBRElDQUFBekFnQUFUbE4wTTE5Zk1qaHRaWE56WVdkbGMwbDNSVVVBQUFBQVRQVUFBTURyQUFBQUFBQUFBZ0FBQUtEY0FBQUNBQUFBZU9zQUFBSUFBQUJUZFc1a1lYa0FUVzl1WkdGNUFGUjFaWE5rWVhrQVYyVmtibVZ6WkdGNUFGUm9kWEp6WkdGNUFFWnlhV1JoZVFCVFlYUjFjbVJoZVFCVGRXNEFUVzl1QUZSMVpRQlhaV1FBVkdoMUFFWnlhUUJUWVhRQUFBQUFVd0FBQUhVQUFBQnVBQUFBWkFBQUFHRUFBQUI1QUFBQUFBQUFBRTBBQUFCdkFBQUFiZ0FBQUdRQUFBQmhBQUFBZVFBQUFBQUFBQUJVQUFBQWRRQUFBR1VBQUFCekFBQUFaQUFBQUdFQUFBQjVBQUFBQUFBQUFGY0FBQUJsQUFBQVpBQUFBRzRBQUFCbEFBQUFjd0FBQUdRQUFBQmhBQUFBZVFBQUFBQUFBQUJVQUFBQWFBQUFBSFVBQUFCeUFBQUFjd0FBQUdRQUFBQmhBQUFBZVFBQUFBQUFBQUJHQUFBQWNnQUFBR2tBQUFCa0FBQUFZUUFBQUhrQUFBQUFBQUFBVXdBQUFHRUFBQUIwQUFBQWRRQUFBSElBQUFCa0FBQUFZUUFBQUhrQUFBQUFBQUFBVXdBQUFIVUFBQUJ1QUFBQUFBQUFBRTBBQUFCdkFBQUFiZ0FBQUFBQUFBQlVBQUFBZFFBQUFHVUFBQUFBQUFBQVZ3QUFBR1VBQUFCa0FBQUFBQUFBQUZRQUFBQm9BQUFBZFFBQUFBQUFBQUJHQUFBQWNnQUFBR2tBQUFBQUFBQUFVd0FBQUdFQUFBQjBBQUFBQUFBQUFFcGhiblZoY25rQVJtVmljblZoY25rQVRXRnlZMmdBUVhCeWFXd0FUV0Y1QUVwMWJtVUFTblZzZVFCQmRXZDFjM1FBVTJWd2RHVnRZbVZ5QUU5amRHOWlaWElBVG05MlpXMWlaWElBUkdWalpXMWlaWElBU21GdUFFWmxZZ0JOWVhJQVFYQnlBRXAxYmdCS2RXd0FRWFZuQUZObGNBQlBZM1FBVG05MkFFUmxZd0FBQUVvQUFBQmhBQUFBYmdBQUFIVUFBQUJoQUFBQWNnQUFBSGtBQUFBQUFBQUFSZ0FBQUdVQUFBQmlBQUFBY2dBQUFIVUFBQUJoQUFBQWNnQUFBSGtBQUFBQUFBQUFUUUFBQUdFQUFBQnlBQUFBWXdBQUFHZ0FBQUFBQUFBQVFRQUFBSEFBQUFCeUFBQUFhUUFBQUd3QUFBQUFBQUFBVFFBQUFHRUFBQUI1QUFBQUFBQUFBRW9BQUFCMUFBQUFiZ0FBQUdVQUFBQUFBQUFBU2dBQUFIVUFBQUJzQUFBQWVRQUFBQUFBQUFCQkFBQUFkUUFBQUdjQUFBQjFBQUFBY3dBQUFIUUFBQUFBQUFBQVV3QUFBR1VBQUFCd0FBQUFkQUFBQUdVQUFBQnRBQUFBWWdBQUFHVUFBQUJ5QUFBQUFBQUFBRThBQUFCakFBQUFkQUFBQUc4QUFBQmlBQUFBWlFBQUFISUFBQUFBQUFBQVRnQUFBRzhBQUFCMkFBQUFaUUFBQUcwQUFBQmlBQUFBWlFBQUFISUFBQUFBQUFBQVJBQUFBR1VBQUFCakFBQUFaUUFBQUcwQUFBQmlBQUFBWlFBQUFISUFBQUFBQUFBQVNnQUFBR0VBQUFCdUFBQUFBQUFBQUVZQUFBQmxBQUFBWWdBQUFBQUFBQUJOQUFBQVlRQUFBSElBQUFBQUFBQUFRUUFBQUhBQUFBQnlBQUFBQUFBQUFFb0FBQUIxQUFBQWJnQUFBQUFBQUFCS0FBQUFkUUFBQUd3QUFBQUFBQUFBUVFBQUFIVUFBQUJuQUFBQUFBQUFBRk1BQUFCbEFBQUFjQUFBQUFBQUFBQlBBQUFBWXdBQUFIUUFBQUFBQUFBQVRnQUFBRzhBQUFCMkFBQUFBQUFBQUVRQUFBQmxBQUFBWXdBQUFBQUFBQUJCVFFCUVRRQUFBRUVBQUFCTkFBQUFBQUFBQUZBQUFBQk5BQUFBQUFBQUFHRnNiRzlqWVhSdmNqeFVQam82WVd4c2IyTmhkR1VvYzJsNlpWOTBJRzRwSUNkdUp5QmxlR05sWldSeklHMWhlR2x0ZFcwZ2MzVndjRzl5ZEdWa0lITnBlbVVBQUFBQUFIRGtBQURiQVFBQTNBRUFBTjBCQUFEZUFRQUEzd0VBQU9BQkFBRGhBUUFBQUFBQUFGemxBQURyQVFBQTdBRUFBTzBCQUFEdUFRQUE3d0VBQVBBQkFBRHhBUUFBQUFBQUFBenhBQUFXQUFBQU5BSUFBRFVDQUFCT1UzUXpYMTh5TVRSZlgzTm9ZWEpsWkY5amIzVnVkRVVBQUFBQXlQUUFBUER3QUFBQUFBQUFVUEVBQUJZQUFBQTJBZ0FBTlFJQUFEY0NBQUExQWdBQVRsTjBNMTlmTWpFNVgxOXphR0Z5WldSZmQyVmhhMTlqYjNWdWRFVUFBQUJNOVFBQU1QRUFBQUFBQUFBQkFBQUFEUEVBQUFBQUFBQmlZWE5wWTE5emRISnBibWNBWDE5amVHRmZaM1ZoY21SZllXTnhkV2x5WlNCa1pYUmxZM1JsWkNCeVpXTjFjbk5wZG1VZ2FXNXBkR2xoYkdsNllYUnBiMjRBVUhWeVpTQjJhWEowZFdGc0lHWjFibU4wYVc5dUlHTmhiR3hsWkNFQWMzUmtPanBsZUdObGNIUnBiMjRBQUFBQUFQenhBQUE0QWdBQU9RSUFBRG9DQUFCVGREbGxlR05sY0hScGIyNEFBQUFBeVBRQUFPenhBQUFBQUFBQUtQSUFBQXdBQUFBN0FnQUFQQUlBQUZOME1URnNiMmRwWTE5bGNuSnZjZ0R3OUFBQUdQSUFBUHp4QUFBQUFBQUFYUElBQUF3QUFBQTlBZ0FBUEFJQUFGTjBNVEpzWlc1bmRHaGZaWEp5YjNJQUFBQUE4UFFBQUVqeUFBQW84Z0FBVTNRNWRIbHdaVjlwYm1adkFBQUFBTWowQUFCbzhnQUFUakV3WDE5amVIaGhZbWwyTVRFMlgxOXphR2x0WDNSNWNHVmZhVzVtYjBVQUFBQUE4UFFBQUlEeUFBQjQ4Z0FBVGpFd1gxOWplSGhoWW1sMk1URTNYMTlqYkdGemMxOTBlWEJsWDJsdVptOUZBQUFBOFBRQUFMRHlBQUNrOGdBQVRqRXdYMTlqZUhoaFltbDJNVEUzWDE5d1ltRnpaVjkwZVhCbFgybHVabTlGQUFBQThQUUFBT0R5QUFDazhnQUFUakV3WDE5amVIaGhZbWwyTVRFNVgxOXdiMmx1ZEdWeVgzUjVjR1ZmYVc1bWIwVUE4UFFBQUJEekFBQUU4d0FBVGpFd1gxOWplSGhoWW1sMk1USXdYMTltZFc1amRHbHZibDkwZVhCbFgybHVabTlGQUFBQUFQRDBBQUJBOHdBQXBQSUFBRTR4TUY5ZlkzaDRZV0pwZGpFeU9WOWZjRzlwYm5SbGNsOTBiMTl0WlcxaVpYSmZkSGx3WlY5cGJtWnZSUUFBQVBEMEFBQjA4d0FBQlBNQUFBQUFBQUQwOHdBQVBnSUFBRDhDQUFCQUFnQUFRUUlBQUVJQ0FBQk9NVEJmWDJONGVHRmlhWFl4TWpOZlgyWjFibVJoYldWdWRHRnNYM1I1Y0dWZmFXNW1iMFVBOFBRQUFNenpBQUNrOGdBQWRnQUFBTGp6QUFBQTlBQUFSRzRBQUxqekFBQU05QUFBWWdBQUFManpBQUFZOUFBQVl3QUFBTGp6QUFBazlBQUFhQUFBQUxqekFBQXc5QUFBWVFBQUFManpBQUE4OUFBQWN3QUFBTGp6QUFCSTlBQUFkQUFBQUxqekFBQlU5QUFBYVFBQUFManpBQUJnOUFBQWFnQUFBTGp6QUFCczlBQUFiQUFBQUxqekFBQjQ5QUFBYlFBQUFManpBQUNFOUFBQWVBQUFBTGp6QUFDUTlBQUFlUUFBQUxqekFBQ2M5QUFBWmdBQUFManpBQUNvOUFBQVpBQUFBTGp6QUFDMDlBQUFBQUFBQU5UeUFBQStBZ0FBUXdJQUFFQUNBQUJCQWdBQVJBSUFBRVVDQUFCR0FnQUFSd0lBQUFBQUFBQTQ5UUFBUGdJQUFFZ0NBQUJBQWdBQVFRSUFBRVFDQUFCSkFnQUFTZ0lBQUVzQ0FBQk9NVEJmWDJONGVHRmlhWFl4TWpCZlgzTnBYMk5zWVhOelgzUjVjR1ZmYVc1bWIwVUFBQUFBOFBRQUFCRDFBQURVOGdBQUFBQUFBSlQxQUFBK0FnQUFUQUlBQUVBQ0FBQkJBZ0FBUkFJQUFFMENBQUJPQWdBQVR3SUFBRTR4TUY5ZlkzaDRZV0pwZGpFeU1WOWZkbTFwWDJOc1lYTnpYM1I1Y0dWZmFXNW1iMFVBQUFEdzlBQUFiUFVBQU5UeUFBQUFBQUFBTlBNQUFENENBQUJRQWdBQVFBSUFBRUVDQUFCUkFnQkJ3T3NEQ3hFQkFBQUEvLy8vLy8zLy8vLysvLy8vQlFCQjNPc0RDd0gzQUVIMDZ3TUxEdkVBQUFENEFBQUErUDhBQUFBRUFFR003QU1MQVFFQVFadnNBd3NGQ3YvLy8vOEFRZURzQXdzSjBQVUFBQUFBQUFBRkFFSDA3QU1MQWZNQVFZenRBd3NMOFFBQUFQQUFBQUFBQkFFQVFhVHRBd3NCQWdCQnMrMERDd1gvLy8vLy93QkJwTzhEQ3dMUS93QkI0TzhEQ3dFSkFFSHM3d01MQWZNQVFZRHdBd3NTOGdBQUFBQUFBQUR3QUFBQWFBUUJBQUFFQUVHczhBTUxCUC8vLy84QVFmRHdBd3NEZ0JaUlwiO2lmKCFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpKXt3YXNtQmluYXJ5RmlsZT1sb2NhdGVGaWxlKHdhc21CaW5hcnlGaWxlKX1mdW5jdGlvbiBnZXRCaW5hcnkoZmlsZSl7dHJ5e2lmKGZpbGU9PXdhc21CaW5hcnlGaWxlJiZ3YXNtQmluYXJ5KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkod2FzbUJpbmFyeSl9dmFyIGJpbmFyeT10cnlQYXJzZUFzRGF0YVVSSShmaWxlKTtpZihiaW5hcnkpe3JldHVybiBiaW5hcnl9aWYocmVhZEJpbmFyeSl7cmV0dXJuIHJlYWRCaW5hcnkoZmlsZSl9ZWxzZXt0aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIn19Y2F0Y2goZXJyKXthYm9ydChlcnIpfX1mdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKCl7aWYoIXdhc21CaW5hcnkmJihFTlZJUk9OTUVOVF9JU19XRUJ8fEVOVklST05NRU5UX0lTX1dPUktFUikpe2lmKHR5cGVvZiBmZXRjaD09PVwiZnVuY3Rpb25cIiYmIWlzRmlsZVVSSSh3YXNtQmluYXJ5RmlsZSkpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7aWYoIXJlc3BvbnNlW1wib2tcIl0pe3Rocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIit3YXNtQmluYXJ5RmlsZStcIidcIn1yZXR1cm4gcmVzcG9uc2VbXCJhcnJheUJ1ZmZlclwiXSgpfSkuY2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gZ2V0QmluYXJ5KHdhc21CaW5hcnlGaWxlKX0pfWVsc2V7aWYocmVhZEFzeW5jKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3JlYWRBc3luYyh3YXNtQmluYXJ5RmlsZSxmdW5jdGlvbihyZXNwb25zZSl7cmVzb2x2ZShuZXcgVWludDhBcnJheShyZXNwb25zZSkpfSxyZWplY3QpfSl9fX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBnZXRCaW5hcnkod2FzbUJpbmFyeUZpbGUpfSl9ZnVuY3Rpb24gY3JlYXRlV2FzbSgpe3ZhciBpbmZvPXtcImFcIjphc21MaWJyYXJ5QXJnfTtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXt2YXIgZXhwb3J0cz1pbnN0YW5jZS5leHBvcnRzO01vZHVsZVtcImFzbVwiXT1leHBvcnRzO3dhc21NZW1vcnk9TW9kdWxlW1wiYXNtXCJdW1wiWVwiXTt1cGRhdGVHbG9iYWxCdWZmZXJBbmRWaWV3cyh3YXNtTWVtb3J5LmJ1ZmZlcik7d2FzbVRhYmxlPU1vZHVsZVtcImFzbVwiXVtcImJhXCJdO2FkZE9uSW5pdChNb2R1bGVbXCJhc21cIl1bXCJaXCJdKTtyZW1vdmVSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKX1hZGRSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtmdW5jdGlvbiByZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdChyZXN1bHQpe3JlY2VpdmVJbnN0YW5jZShyZXN1bHRbXCJpbnN0YW5jZVwiXSl9ZnVuY3Rpb24gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlcil7cmV0dXJuIGdldEJpbmFyeVByb21pc2UoKS50aGVuKGZ1bmN0aW9uKGJpbmFyeSl7dmFyIHJlc3VsdD1XZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5hcnksaW5mbyk7cmV0dXJuIHJlc3VsdH0pLnRoZW4ocmVjZWl2ZXIsZnVuY3Rpb24ocmVhc29uKXtlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIityZWFzb24pO2Fib3J0KHJlYXNvbil9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKCl7aWYoIXdhc21CaW5hcnkmJnR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZz09PVwiZnVuY3Rpb25cIiYmIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkmJiFpc0ZpbGVVUkkod2FzbUJpbmFyeUZpbGUpJiZ0eXBlb2YgZmV0Y2g9PT1cImZ1bmN0aW9uXCIpe3JldHVybiBmZXRjaCh3YXNtQmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7dmFyIHJlc3VsdD1XZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhyZXNwb25zZSxpbmZvKTtyZXR1cm4gcmVzdWx0LnRoZW4ocmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQsZnVuY3Rpb24ocmVhc29uKXtlcnIoXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIrcmVhc29uKTtlcnIoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtyZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCl9KX0pfWVsc2V7cmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIocmVjZWl2ZUluc3RhbnRpYXRpb25SZXN1bHQpfX1pZihNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl0pe3RyeXt2YXIgZXhwb3J0cz1Nb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpO3JldHVybiBleHBvcnRzfWNhdGNoKGUpe2VycihcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiK2UpO3JldHVybiBmYWxzZX19aW5zdGFudGlhdGVBc3luYygpLmNhdGNoKHJlYWR5UHJvbWlzZVJlamVjdCk7cmV0dXJue319dmFyIHRlbXBEb3VibGU7dmFyIHRlbXBJNjQ7dmFyIEFTTV9DT05TVFM9ezYzNjA0OmZ1bmN0aW9uKCl7dmFyICRhPWFyZ3VtZW50czt2YXIgaT0wO2lmKCFhcnRvb2xraXRORlRbXCJORlRNYXJrZXJJbmZvXCJdKXthcnRvb2xraXRORlRbXCJORlRNYXJrZXJJbmZvXCJdPXtpZDowLGVycm9yOi0xLGZvdW5kOjAscG9zZTpbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdfX12YXIgbWFya2VySW5mbz1hcnRvb2xraXRORlRbXCJORlRNYXJrZXJJbmZvXCJdO21hcmtlckluZm9bXCJpZFwiXT0kYVtpKytdO21hcmtlckluZm9bXCJlcnJvclwiXT0kYVtpKytdO21hcmtlckluZm9bXCJmb3VuZFwiXT0xO21hcmtlckluZm9bXCJwb3NlXCJdWzBdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bMV09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVsyXT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzNdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bNF09JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVs1XT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzZdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bN109JGFbaSsrXTttYXJrZXJJbmZvW1wicG9zZVwiXVs4XT0kYVtpKytdO21hcmtlckluZm9bXCJwb3NlXCJdWzldPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bMTBdPSRhW2krK107bWFya2VySW5mb1tcInBvc2VcIl1bMTFdPSRhW2krK119LDY0MzEwOmZ1bmN0aW9uKCl7dmFyICRhPWFyZ3VtZW50czt2YXIgaT0wO2lmKCFhcnRvb2xraXRORlRbXCJORlRNYXJrZXJJbmZvXCJdKXthcnRvb2xraXRORlRbXCJORlRNYXJrZXJJbmZvXCJdPXtpZDowLGVycm9yOi0xLGZvdW5kOjAscG9zZTpbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdfX12YXIgbWFya2VySW5mbz1hcnRvb2xraXRORlRbXCJORlRNYXJrZXJJbmZvXCJdO21hcmtlckluZm9bXCJpZFwiXT0kYVtpKytdO21hcmtlckluZm9bXCJlcnJvclwiXT0tMTttYXJrZXJJbmZvW1wiZm91bmRcIl09MDttYXJrZXJJbmZvW1wicG9zZVwiXVswXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzFdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bMl09MDttYXJrZXJJbmZvW1wicG9zZVwiXVszXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzRdPTA7bWFya2VySW5mb1tcInBvc2VcIl1bNV09MDttYXJrZXJJbmZvW1wicG9zZVwiXVs2XT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzddPTA7bWFya2VySW5mb1tcInBvc2VcIl1bOF09MDttYXJrZXJJbmZvW1wicG9zZVwiXVs5XT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzEwXT0wO21hcmtlckluZm9bXCJwb3NlXCJdWzExXT0wfSw2NDkzOTpmdW5jdGlvbigkMCwkMSwkMiwkMywkNCwkNSl7aWYoIWFydG9vbGtpdE5GVFtcImZyYW1lTWFsbG9jXCJdKXthcnRvb2xraXRORlRbXCJmcmFtZU1hbGxvY1wiXT17fX12YXIgZnJhbWVNYWxsb2M9YXJ0b29sa2l0TkZUW1wiZnJhbWVNYWxsb2NcIl07ZnJhbWVNYWxsb2NbXCJmcmFtZXBvaW50ZXJcIl09JDE7ZnJhbWVNYWxsb2NbXCJmcmFtZXNpemVcIl09JDI7ZnJhbWVNYWxsb2NbXCJjYW1lcmFcIl09JDM7ZnJhbWVNYWxsb2NbXCJ0cmFuc2Zvcm1cIl09JDQ7ZnJhbWVNYWxsb2NbXCJ2aWRlb0x1bWFQb2ludGVyXCJdPSQ1fX07ZnVuY3Rpb24gY2FsbFJ1bnRpbWVDYWxsYmFja3MoY2FsbGJhY2tzKXt3aGlsZShjYWxsYmFja3MubGVuZ3RoPjApe3ZhciBjYWxsYmFjaz1jYWxsYmFja3Muc2hpZnQoKTtpZih0eXBlb2YgY2FsbGJhY2s9PVwiZnVuY3Rpb25cIil7Y2FsbGJhY2soTW9kdWxlKTtjb250aW51ZX12YXIgZnVuYz1jYWxsYmFjay5mdW5jO2lmKHR5cGVvZiBmdW5jPT09XCJudW1iZXJcIil7aWYoY2FsbGJhY2suYXJnPT09dW5kZWZpbmVkKXt3YXNtVGFibGUuZ2V0KGZ1bmMpKCl9ZWxzZXt3YXNtVGFibGUuZ2V0KGZ1bmMpKGNhbGxiYWNrLmFyZyl9fWVsc2V7ZnVuYyhjYWxsYmFjay5hcmc9PT11bmRlZmluZWQ/bnVsbDpjYWxsYmFjay5hcmcpfX19dmFyIHJ1bnRpbWVLZWVwYWxpdmVDb3VudGVyPTA7ZnVuY3Rpb24ga2VlcFJ1bnRpbWVBbGl2ZSgpe3JldHVybiBub0V4aXRSdW50aW1lfHxydW50aW1lS2VlcGFsaXZlQ291bnRlcj4wfXZhciBFeGNlcHRpb25JbmZvQXR0cnM9e0RFU1RSVUNUT1JfT0ZGU0VUOjAsUkVGQ09VTlRfT0ZGU0VUOjQsVFlQRV9PRkZTRVQ6OCxDQVVHSFRfT0ZGU0VUOjEyLFJFVEhST1dOX09GRlNFVDoxMyxTSVpFOjE2fTtmdW5jdGlvbiBfX19jeGFfYWxsb2NhdGVfZXhjZXB0aW9uKHNpemUpe3JldHVybiBfbWFsbG9jKHNpemUrRXhjZXB0aW9uSW5mb0F0dHJzLlNJWkUpK0V4Y2VwdGlvbkluZm9BdHRycy5TSVpFfWZ1bmN0aW9uIEV4Y2VwdGlvbkluZm8oZXhjUHRyKXt0aGlzLmV4Y1B0cj1leGNQdHI7dGhpcy5wdHI9ZXhjUHRyLUV4Y2VwdGlvbkluZm9BdHRycy5TSVpFO3RoaXMuc2V0X3R5cGU9ZnVuY3Rpb24odHlwZSl7SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5UWVBFX09GRlNFVD4+Ml09dHlwZX07dGhpcy5nZXRfdHlwZT1mdW5jdGlvbigpe3JldHVybiBIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLlRZUEVfT0ZGU0VUPj4yXX07dGhpcy5zZXRfZGVzdHJ1Y3Rvcj1mdW5jdGlvbihkZXN0cnVjdG9yKXtIRUFQMzJbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLkRFU1RSVUNUT1JfT0ZGU0VUPj4yXT1kZXN0cnVjdG9yfTt0aGlzLmdldF9kZXN0cnVjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuREVTVFJVQ1RPUl9PRkZTRVQ+PjJdfTt0aGlzLnNldF9yZWZjb3VudD1mdW5jdGlvbihyZWZjb3VudCl7SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRUZDT1VOVF9PRkZTRVQ+PjJdPXJlZmNvdW50fTt0aGlzLnNldF9jYXVnaHQ9ZnVuY3Rpb24oY2F1Z2h0KXtjYXVnaHQ9Y2F1Z2h0PzE6MDtIRUFQOFt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuQ0FVR0hUX09GRlNFVD4+MF09Y2F1Z2h0fTt0aGlzLmdldF9jYXVnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrRXhjZXB0aW9uSW5mb0F0dHJzLkNBVUdIVF9PRkZTRVQ+PjBdIT0wfTt0aGlzLnNldF9yZXRocm93bj1mdW5jdGlvbihyZXRocm93bil7cmV0aHJvd249cmV0aHJvd24/MTowO0hFQVA4W3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRVRIUk9XTl9PRkZTRVQ+PjBdPXJldGhyb3dufTt0aGlzLmdldF9yZXRocm93bj1mdW5jdGlvbigpe3JldHVybiBIRUFQOFt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVUSFJPV05fT0ZGU0VUPj4wXSE9MH07dGhpcy5pbml0PWZ1bmN0aW9uKHR5cGUsZGVzdHJ1Y3Rvcil7dGhpcy5zZXRfdHlwZSh0eXBlKTt0aGlzLnNldF9kZXN0cnVjdG9yKGRlc3RydWN0b3IpO3RoaXMuc2V0X3JlZmNvdW50KDApO3RoaXMuc2V0X2NhdWdodChmYWxzZSk7dGhpcy5zZXRfcmV0aHJvd24oZmFsc2UpfTt0aGlzLmFkZF9yZWY9ZnVuY3Rpb24oKXt2YXIgdmFsdWU9SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRUZDT1VOVF9PRkZTRVQ+PjJdO0hFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVGQ09VTlRfT0ZGU0VUPj4yXT12YWx1ZSsxfTt0aGlzLnJlbGVhc2VfcmVmPWZ1bmN0aW9uKCl7dmFyIHByZXY9SEVBUDMyW3RoaXMucHRyK0V4Y2VwdGlvbkluZm9BdHRycy5SRUZDT1VOVF9PRkZTRVQ+PjJdO0hFQVAzMlt0aGlzLnB0citFeGNlcHRpb25JbmZvQXR0cnMuUkVGQ09VTlRfT0ZGU0VUPj4yXT1wcmV2LTE7cmV0dXJuIHByZXY9PT0xfX12YXIgZXhjZXB0aW9uTGFzdD0wO3ZhciB1bmNhdWdodEV4Y2VwdGlvbkNvdW50PTA7ZnVuY3Rpb24gX19fY3hhX3Rocm93KHB0cix0eXBlLGRlc3RydWN0b3Ipe3ZhciBpbmZvPW5ldyBFeGNlcHRpb25JbmZvKHB0cik7aW5mby5pbml0KHR5cGUsZGVzdHJ1Y3Rvcik7ZXhjZXB0aW9uTGFzdD1wdHI7dW5jYXVnaHRFeGNlcHRpb25Db3VudCsrO3Rocm93IHB0cn1mdW5jdGlvbiBfdHpzZXQoKXtpZihfdHpzZXQuY2FsbGVkKXJldHVybjtfdHpzZXQuY2FsbGVkPXRydWU7dmFyIGN1cnJlbnRZZWFyPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKTt2YXIgd2ludGVyPW5ldyBEYXRlKGN1cnJlbnRZZWFyLDAsMSk7dmFyIHN1bW1lcj1uZXcgRGF0ZShjdXJyZW50WWVhciw2LDEpO3ZhciB3aW50ZXJPZmZzZXQ9d2ludGVyLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHN1bW1lck9mZnNldD1zdW1tZXIuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgc3RkVGltZXpvbmVPZmZzZXQ9TWF0aC5tYXgod2ludGVyT2Zmc2V0LHN1bW1lck9mZnNldCk7SEVBUDMyW19fZ2V0X3RpbWV6b25lKCk+PjJdPXN0ZFRpbWV6b25lT2Zmc2V0KjYwO0hFQVAzMltfX2dldF9kYXlsaWdodCgpPj4yXT1OdW1iZXIod2ludGVyT2Zmc2V0IT1zdW1tZXJPZmZzZXQpO2Z1bmN0aW9uIGV4dHJhY3Rab25lKGRhdGUpe3ZhciBtYXRjaD1kYXRlLnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLyk7cmV0dXJuIG1hdGNoP21hdGNoWzFdOlwiR01UXCJ9dmFyIHdpbnRlck5hbWU9ZXh0cmFjdFpvbmUod2ludGVyKTt2YXIgc3VtbWVyTmFtZT1leHRyYWN0Wm9uZShzdW1tZXIpO3ZhciB3aW50ZXJOYW1lUHRyPWFsbG9jYXRlVVRGOCh3aW50ZXJOYW1lKTt2YXIgc3VtbWVyTmFtZVB0cj1hbGxvY2F0ZVVURjgoc3VtbWVyTmFtZSk7aWYoc3VtbWVyT2Zmc2V0PHdpbnRlck9mZnNldCl7SEVBUDMyW19fZ2V0X3R6bmFtZSgpPj4yXT13aW50ZXJOYW1lUHRyO0hFQVAzMltfX2dldF90em5hbWUoKSs0Pj4yXT1zdW1tZXJOYW1lUHRyfWVsc2V7SEVBUDMyW19fZ2V0X3R6bmFtZSgpPj4yXT1zdW1tZXJOYW1lUHRyO0hFQVAzMltfX2dldF90em5hbWUoKSs0Pj4yXT13aW50ZXJOYW1lUHRyfX1mdW5jdGlvbiBfbG9jYWx0aW1lX3IodGltZSx0bVB0cil7X3R6c2V0KCk7dmFyIGRhdGU9bmV3IERhdGUoSEVBUDMyW3RpbWU+PjJdKjFlMyk7SEVBUDMyW3RtUHRyPj4yXT1kYXRlLmdldFNlY29uZHMoKTtIRUFQMzJbdG1QdHIrND4+Ml09ZGF0ZS5nZXRNaW51dGVzKCk7SEVBUDMyW3RtUHRyKzg+PjJdPWRhdGUuZ2V0SG91cnMoKTtIRUFQMzJbdG1QdHIrMTI+PjJdPWRhdGUuZ2V0RGF0ZSgpO0hFQVAzMlt0bVB0cisxNj4+Ml09ZGF0ZS5nZXRNb250aCgpO0hFQVAzMlt0bVB0cisyMD4+Ml09ZGF0ZS5nZXRGdWxsWWVhcigpLTE5MDA7SEVBUDMyW3RtUHRyKzI0Pj4yXT1kYXRlLmdldERheSgpO3ZhciBzdGFydD1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksMCwxKTt2YXIgeWRheT0oZGF0ZS5nZXRUaW1lKCktc3RhcnQuZ2V0VGltZSgpKS8oMWUzKjYwKjYwKjI0KXwwO0hFQVAzMlt0bVB0cisyOD4+Ml09eWRheTtIRUFQMzJbdG1QdHIrMzY+PjJdPS0oZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKjYwKTt2YXIgc3VtbWVyT2Zmc2V0PW5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSw2LDEpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHdpbnRlck9mZnNldD1zdGFydC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBkc3Q9KHN1bW1lck9mZnNldCE9d2ludGVyT2Zmc2V0JiZkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKHdpbnRlck9mZnNldCxzdW1tZXJPZmZzZXQpKXwwO0hFQVAzMlt0bVB0ciszMj4+Ml09ZHN0O3ZhciB6b25lUHRyPUhFQVAzMltfX2dldF90em5hbWUoKSsoZHN0PzQ6MCk+PjJdO0hFQVAzMlt0bVB0cis0MD4+Ml09em9uZVB0cjtyZXR1cm4gdG1QdHJ9ZnVuY3Rpb24gX19fbG9jYWx0aW1lX3IoYTAsYTEpe3JldHVybiBfbG9jYWx0aW1lX3IoYTAsYTEpfWZ1bmN0aW9uIHNldEVyck5vKHZhbHVlKXtIRUFQMzJbX19fZXJybm9fbG9jYXRpb24oKT4+Ml09dmFsdWU7cmV0dXJuIHZhbHVlfXZhciBQQVRIPXtzcGxpdFBhdGg6ZnVuY3Rpb24oZmlsZW5hbWUpe3ZhciBzcGxpdFBhdGhSZT0vXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztyZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSl9LG5vcm1hbGl6ZUFycmF5OmZ1bmN0aW9uKHBhcnRzLGFsbG93QWJvdmVSb290KXt2YXIgdXA9MDtmb3IodmFyIGk9cGFydHMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBsYXN0PXBhcnRzW2ldO2lmKGxhc3Q9PT1cIi5cIil7cGFydHMuc3BsaWNlKGksMSl9ZWxzZSBpZihsYXN0PT09XCIuLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cCsrfWVsc2UgaWYodXApe3BhcnRzLnNwbGljZShpLDEpO3VwLS19fWlmKGFsbG93QWJvdmVSb290KXtmb3IoO3VwO3VwLS0pe3BhcnRzLnVuc2hpZnQoXCIuLlwiKX19cmV0dXJuIHBhcnRzfSxub3JtYWxpemU6ZnVuY3Rpb24ocGF0aCl7dmFyIGlzQWJzb2x1dGU9cGF0aC5jaGFyQXQoMCk9PT1cIi9cIix0cmFpbGluZ1NsYXNoPXBhdGguc3Vic3RyKC0xKT09PVwiL1wiO3BhdGg9UEFUSC5ub3JtYWxpemVBcnJheShwYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIoZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksIWlzQWJzb2x1dGUpLmpvaW4oXCIvXCIpO2lmKCFwYXRoJiYhaXNBYnNvbHV0ZSl7cGF0aD1cIi5cIn1pZihwYXRoJiZ0cmFpbGluZ1NsYXNoKXtwYXRoKz1cIi9cIn1yZXR1cm4oaXNBYnNvbHV0ZT9cIi9cIjpcIlwiKStwYXRofSxkaXJuYW1lOmZ1bmN0aW9uKHBhdGgpe3ZhciByZXN1bHQ9UEFUSC5zcGxpdFBhdGgocGF0aCkscm9vdD1yZXN1bHRbMF0sZGlyPXJlc3VsdFsxXTtpZighcm9vdCYmIWRpcil7cmV0dXJuXCIuXCJ9aWYoZGlyKXtkaXI9ZGlyLnN1YnN0cigwLGRpci5sZW5ndGgtMSl9cmV0dXJuIHJvb3QrZGlyfSxiYXNlbmFtZTpmdW5jdGlvbihwYXRoKXtpZihwYXRoPT09XCIvXCIpcmV0dXJuXCIvXCI7cGF0aD1QQVRILm5vcm1hbGl6ZShwYXRoKTtwYXRoPXBhdGgucmVwbGFjZSgvXFwvJC8sXCJcIik7dmFyIGxhc3RTbGFzaD1wYXRoLmxhc3RJbmRleE9mKFwiL1wiKTtpZihsYXN0U2xhc2g9PT0tMSlyZXR1cm4gcGF0aDtyZXR1cm4gcGF0aC5zdWJzdHIobGFzdFNsYXNoKzEpfSxleHRuYW1lOmZ1bmN0aW9uKHBhdGgpe3JldHVybiBQQVRILnNwbGl0UGF0aChwYXRoKVszXX0sam9pbjpmdW5jdGlvbigpe3ZhciBwYXRocz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7cmV0dXJuIFBBVEgubm9ybWFsaXplKHBhdGhzLmpvaW4oXCIvXCIpKX0sam9pbjI6ZnVuY3Rpb24obCxyKXtyZXR1cm4gUEFUSC5ub3JtYWxpemUobCtcIi9cIityKX19O2Z1bmN0aW9uIGdldFJhbmRvbURldmljZSgpe2lmKHR5cGVvZiBjcnlwdG89PT1cIm9iamVjdFwiJiZ0eXBlb2YgY3J5cHRvW1wiZ2V0UmFuZG9tVmFsdWVzXCJdPT09XCJmdW5jdGlvblwiKXt2YXIgcmFuZG9tQnVmZmVyPW5ldyBVaW50OEFycmF5KDEpO3JldHVybiBmdW5jdGlvbigpe2NyeXB0by5nZXRSYW5kb21WYWx1ZXMocmFuZG9tQnVmZmVyKTtyZXR1cm4gcmFuZG9tQnVmZmVyWzBdfX1lbHNlIGlmKEVOVklST05NRU5UX0lTX05PREUpe3RyeXt2YXIgY3J5cHRvX21vZHVsZT1yZXF1aXJlKFwiY3J5cHRvXCIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBjcnlwdG9fbW9kdWxlW1wicmFuZG9tQnl0ZXNcIl0oMSlbMF19fWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKCl7YWJvcnQoXCJyYW5kb21EZXZpY2VcIil9fXZhciBQQVRIX0ZTPXtyZXNvbHZlOmZ1bmN0aW9uKCl7dmFyIHJlc29sdmVkUGF0aD1cIlwiLHJlc29sdmVkQWJzb2x1dGU9ZmFsc2U7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXJlc29sdmVkQWJzb2x1dGU7aS0tKXt2YXIgcGF0aD1pPj0wP2FyZ3VtZW50c1tpXTpGUy5jd2QoKTtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5nc1wiKX1lbHNlIGlmKCFwYXRoKXtyZXR1cm5cIlwifXJlc29sdmVkUGF0aD1wYXRoK1wiL1wiK3Jlc29sdmVkUGF0aDtyZXNvbHZlZEFic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCJ9cmVzb2x2ZWRQYXRoPVBBVEgubm9ybWFsaXplQXJyYXkocmVzb2x2ZWRQYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIoZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oXCIvXCIpO3JldHVybihyZXNvbHZlZEFic29sdXRlP1wiL1wiOlwiXCIpK3Jlc29sdmVkUGF0aHx8XCIuXCJ9LHJlbGF0aXZlOmZ1bmN0aW9uKGZyb20sdG8pe2Zyb209UEFUSF9GUy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTt0bz1QQVRIX0ZTLnJlc29sdmUodG8pLnN1YnN0cigxKTtmdW5jdGlvbiB0cmltKGFycil7dmFyIHN0YXJ0PTA7Zm9yKDtzdGFydDxhcnIubGVuZ3RoO3N0YXJ0Kyspe2lmKGFycltzdGFydF0hPT1cIlwiKWJyZWFrfXZhciBlbmQ9YXJyLmxlbmd0aC0xO2Zvcig7ZW5kPj0wO2VuZC0tKXtpZihhcnJbZW5kXSE9PVwiXCIpYnJlYWt9aWYoc3RhcnQ+ZW5kKXJldHVybltdO3JldHVybiBhcnIuc2xpY2Uoc3RhcnQsZW5kLXN0YXJ0KzEpfXZhciBmcm9tUGFydHM9dHJpbShmcm9tLnNwbGl0KFwiL1wiKSk7dmFyIHRvUGFydHM9dHJpbSh0by5zcGxpdChcIi9cIikpO3ZhciBsZW5ndGg9TWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCx0b1BhcnRzLmxlbmd0aCk7dmFyIHNhbWVQYXJ0c0xlbmd0aD1sZW5ndGg7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtpZihmcm9tUGFydHNbaV0hPT10b1BhcnRzW2ldKXtzYW1lUGFydHNMZW5ndGg9aTticmVha319dmFyIG91dHB1dFBhcnRzPVtdO2Zvcih2YXIgaT1zYW1lUGFydHNMZW5ndGg7aTxmcm9tUGFydHMubGVuZ3RoO2krKyl7b3V0cHV0UGFydHMucHVzaChcIi4uXCIpfW91dHB1dFBhcnRzPW91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO3JldHVybiBvdXRwdXRQYXJ0cy5qb2luKFwiL1wiKX19O3ZhciBUVFk9e3R0eXM6W10saW5pdDpmdW5jdGlvbigpe30sc2h1dGRvd246ZnVuY3Rpb24oKXt9LHJlZ2lzdGVyOmZ1bmN0aW9uKGRldixvcHMpe1RUWS50dHlzW2Rldl09e2lucHV0OltdLG91dHB1dDpbXSxvcHM6b3BzfTtGUy5yZWdpc3RlckRldmljZShkZXYsVFRZLnN0cmVhbV9vcHMpfSxzdHJlYW1fb3BzOntvcGVuOmZ1bmN0aW9uKHN0cmVhbSl7dmFyIHR0eT1UVFkudHR5c1tzdHJlYW0ubm9kZS5yZGV2XTtpZighdHR5KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9c3RyZWFtLnR0eT10dHk7c3RyZWFtLnNlZWthYmxlPWZhbHNlfSxjbG9zZTpmdW5jdGlvbihzdHJlYW0pe3N0cmVhbS50dHkub3BzLmZsdXNoKHN0cmVhbS50dHkpfSxmbHVzaDpmdW5jdGlvbihzdHJlYW0pe3N0cmVhbS50dHkub3BzLmZsdXNoKHN0cmVhbS50dHkpfSxyZWFkOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3Mpe2lmKCFzdHJlYW0udHR5fHwhc3RyZWFtLnR0eS5vcHMuZ2V0X2NoYXIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYwKX12YXIgYnl0ZXNSZWFkPTA7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXt2YXIgcmVzdWx0O3RyeXtyZXN1bHQ9c3RyZWFtLnR0eS5vcHMuZ2V0X2NoYXIoc3RyZWFtLnR0eSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfWlmKHJlc3VsdD09PXVuZGVmaW5lZCYmYnl0ZXNSZWFkPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNil9aWYocmVzdWx0PT09bnVsbHx8cmVzdWx0PT09dW5kZWZpbmVkKWJyZWFrO2J5dGVzUmVhZCsrO2J1ZmZlcltvZmZzZXQraV09cmVzdWx0fWlmKGJ5dGVzUmVhZCl7c3RyZWFtLm5vZGUudGltZXN0YW1wPURhdGUubm93KCl9cmV0dXJuIGJ5dGVzUmVhZH0sd3JpdGU6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7aWYoIXN0cmVhbS50dHl8fCFzdHJlYW0udHR5Lm9wcy5wdXRfY2hhcil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjApfXRyeXtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe3N0cmVhbS50dHkub3BzLnB1dF9jaGFyKHN0cmVhbS50dHksYnVmZmVyW29mZnNldCtpXSl9fWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX1pZihsZW5ndGgpe3N0cmVhbS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpfXJldHVybiBpfX0sZGVmYXVsdF90dHlfb3BzOntnZXRfY2hhcjpmdW5jdGlvbih0dHkpe2lmKCF0dHkuaW5wdXQubGVuZ3RoKXt2YXIgcmVzdWx0PW51bGw7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIEJVRlNJWkU9MjU2O3ZhciBidWY9QnVmZmVyLmFsbG9jP0J1ZmZlci5hbGxvYyhCVUZTSVpFKTpuZXcgQnVmZmVyKEJVRlNJWkUpO3ZhciBieXRlc1JlYWQ9MDt0cnl7Ynl0ZXNSZWFkPW5vZGVGUy5yZWFkU3luYyhwcm9jZXNzLnN0ZGluLmZkLGJ1ZiwwLEJVRlNJWkUsbnVsbCl9Y2F0Y2goZSl7aWYoZS50b1N0cmluZygpLmluY2x1ZGVzKFwiRU9GXCIpKWJ5dGVzUmVhZD0wO2Vsc2UgdGhyb3cgZX1pZihieXRlc1JlYWQ+MCl7cmVzdWx0PWJ1Zi5zbGljZSgwLGJ5dGVzUmVhZCkudG9TdHJpbmcoXCJ1dGYtOFwiKX1lbHNle3Jlc3VsdD1udWxsfX1lbHNlIGlmKHR5cGVvZiB3aW5kb3chPVwidW5kZWZpbmVkXCImJnR5cGVvZiB3aW5kb3cucHJvbXB0PT1cImZ1bmN0aW9uXCIpe3Jlc3VsdD13aW5kb3cucHJvbXB0KFwiSW5wdXQ6IFwiKTtpZihyZXN1bHQhPT1udWxsKXtyZXN1bHQrPVwiXFxuXCJ9fWVsc2UgaWYodHlwZW9mIHJlYWRsaW5lPT1cImZ1bmN0aW9uXCIpe3Jlc3VsdD1yZWFkbGluZSgpO2lmKHJlc3VsdCE9PW51bGwpe3Jlc3VsdCs9XCJcXG5cIn19aWYoIXJlc3VsdCl7cmV0dXJuIG51bGx9dHR5LmlucHV0PWludEFycmF5RnJvbVN0cmluZyhyZXN1bHQsdHJ1ZSl9cmV0dXJuIHR0eS5pbnB1dC5zaGlmdCgpfSxwdXRfY2hhcjpmdW5jdGlvbih0dHksdmFsKXtpZih2YWw9PT1udWxsfHx2YWw9PT0xMCl7b3V0KFVURjhBcnJheVRvU3RyaW5nKHR0eS5vdXRwdXQsMCkpO3R0eS5vdXRwdXQ9W119ZWxzZXtpZih2YWwhPTApdHR5Lm91dHB1dC5wdXNoKHZhbCl9fSxmbHVzaDpmdW5jdGlvbih0dHkpe2lmKHR0eS5vdXRwdXQmJnR0eS5vdXRwdXQubGVuZ3RoPjApe291dChVVEY4QXJyYXlUb1N0cmluZyh0dHkub3V0cHV0LDApKTt0dHkub3V0cHV0PVtdfX19LGRlZmF1bHRfdHR5MV9vcHM6e3B1dF9jaGFyOmZ1bmN0aW9uKHR0eSx2YWwpe2lmKHZhbD09PW51bGx8fHZhbD09PTEwKXtlcnIoVVRGOEFycmF5VG9TdHJpbmcodHR5Lm91dHB1dCwwKSk7dHR5Lm91dHB1dD1bXX1lbHNle2lmKHZhbCE9MCl0dHkub3V0cHV0LnB1c2godmFsKX19LGZsdXNoOmZ1bmN0aW9uKHR0eSl7aWYodHR5Lm91dHB1dCYmdHR5Lm91dHB1dC5sZW5ndGg+MCl7ZXJyKFVURjhBcnJheVRvU3RyaW5nKHR0eS5vdXRwdXQsMCkpO3R0eS5vdXRwdXQ9W119fX19O2Z1bmN0aW9uIG1tYXBBbGxvYyhzaXplKXt2YXIgYWxpZ25lZFNpemU9YWxpZ25NZW1vcnkoc2l6ZSw2NTUzNik7dmFyIHB0cj1fbWFsbG9jKGFsaWduZWRTaXplKTt3aGlsZShzaXplPGFsaWduZWRTaXplKUhFQVA4W3B0citzaXplKytdPTA7cmV0dXJuIHB0cn12YXIgTUVNRlM9e29wc190YWJsZTpudWxsLG1vdW50OmZ1bmN0aW9uKG1vdW50KXtyZXR1cm4gTUVNRlMuY3JlYXRlTm9kZShudWxsLFwiL1wiLDE2Mzg0fDUxMSwwKX0sY3JlYXRlTm9kZTpmdW5jdGlvbihwYXJlbnQsbmFtZSxtb2RlLGRldil7aWYoRlMuaXNCbGtkZXYobW9kZSl8fEZTLmlzRklGTyhtb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKCFNRU1GUy5vcHNfdGFibGUpe01FTUZTLm9wc190YWJsZT17ZGlyOntub2RlOntnZXRhdHRyOk1FTUZTLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpNRU1GUy5ub2RlX29wcy5zZXRhdHRyLGxvb2t1cDpNRU1GUy5ub2RlX29wcy5sb29rdXAsbWtub2Q6TUVNRlMubm9kZV9vcHMubWtub2QscmVuYW1lOk1FTUZTLm5vZGVfb3BzLnJlbmFtZSx1bmxpbms6TUVNRlMubm9kZV9vcHMudW5saW5rLHJtZGlyOk1FTUZTLm5vZGVfb3BzLnJtZGlyLHJlYWRkaXI6TUVNRlMubm9kZV9vcHMucmVhZGRpcixzeW1saW5rOk1FTUZTLm5vZGVfb3BzLnN5bWxpbmt9LHN0cmVhbTp7bGxzZWVrOk1FTUZTLnN0cmVhbV9vcHMubGxzZWVrfX0sZmlsZTp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOntsbHNlZWs6TUVNRlMuc3RyZWFtX29wcy5sbHNlZWsscmVhZDpNRU1GUy5zdHJlYW1fb3BzLnJlYWQsd3JpdGU6TUVNRlMuc3RyZWFtX29wcy53cml0ZSxhbGxvY2F0ZTpNRU1GUy5zdHJlYW1fb3BzLmFsbG9jYXRlLG1tYXA6TUVNRlMuc3RyZWFtX29wcy5tbWFwLG1zeW5jOk1FTUZTLnN0cmVhbV9vcHMubXN5bmN9fSxsaW5rOntub2RlOntnZXRhdHRyOk1FTUZTLm5vZGVfb3BzLmdldGF0dHIsc2V0YXR0cjpNRU1GUy5ub2RlX29wcy5zZXRhdHRyLHJlYWRsaW5rOk1FTUZTLm5vZGVfb3BzLnJlYWRsaW5rfSxzdHJlYW06e319LGNocmRldjp7bm9kZTp7Z2V0YXR0cjpNRU1GUy5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6TUVNRlMubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOkZTLmNocmRldl9zdHJlYW1fb3BzfX19dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlLGRldik7aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUuZGlyLm5vZGU7bm9kZS5zdHJlYW1fb3BzPU1FTUZTLm9wc190YWJsZS5kaXIuc3RyZWFtO25vZGUuY29udGVudHM9e319ZWxzZSBpZihGUy5pc0ZpbGUobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUuZmlsZS5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUuZmlsZS5zdHJlYW07bm9kZS51c2VkQnl0ZXM9MDtub2RlLmNvbnRlbnRzPW51bGx9ZWxzZSBpZihGUy5pc0xpbmsobm9kZS5tb2RlKSl7bm9kZS5ub2RlX29wcz1NRU1GUy5vcHNfdGFibGUubGluay5ub2RlO25vZGUuc3RyZWFtX29wcz1NRU1GUy5vcHNfdGFibGUubGluay5zdHJlYW19ZWxzZSBpZihGUy5pc0NocmRldihub2RlLm1vZGUpKXtub2RlLm5vZGVfb3BzPU1FTUZTLm9wc190YWJsZS5jaHJkZXYubm9kZTtub2RlLnN0cmVhbV9vcHM9TUVNRlMub3BzX3RhYmxlLmNocmRldi5zdHJlYW19bm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKTtpZihwYXJlbnQpe3BhcmVudC5jb250ZW50c1tuYW1lXT1ub2RlO3BhcmVudC50aW1lc3RhbXA9bm9kZS50aW1lc3RhbXB9cmV0dXJuIG5vZGV9LGdldEZpbGVEYXRhQXNUeXBlZEFycmF5OmZ1bmN0aW9uKG5vZGUpe2lmKCFub2RlLmNvbnRlbnRzKXJldHVybiBuZXcgVWludDhBcnJheSgwKTtpZihub2RlLmNvbnRlbnRzLnN1YmFycmF5KXJldHVybiBub2RlLmNvbnRlbnRzLnN1YmFycmF5KDAsbm9kZS51c2VkQnl0ZXMpO3JldHVybiBuZXcgVWludDhBcnJheShub2RlLmNvbnRlbnRzKX0sZXhwYW5kRmlsZVN0b3JhZ2U6ZnVuY3Rpb24obm9kZSxuZXdDYXBhY2l0eSl7dmFyIHByZXZDYXBhY2l0eT1ub2RlLmNvbnRlbnRzP25vZGUuY29udGVudHMubGVuZ3RoOjA7aWYocHJldkNhcGFjaXR5Pj1uZXdDYXBhY2l0eSlyZXR1cm47dmFyIENBUEFDSVRZX0RPVUJMSU5HX01BWD0xMDI0KjEwMjQ7bmV3Q2FwYWNpdHk9TWF0aC5tYXgobmV3Q2FwYWNpdHkscHJldkNhcGFjaXR5KihwcmV2Q2FwYWNpdHk8Q0FQQUNJVFlfRE9VQkxJTkdfTUFYPzI6MS4xMjUpPj4+MCk7aWYocHJldkNhcGFjaXR5IT0wKW5ld0NhcGFjaXR5PU1hdGgubWF4KG5ld0NhcGFjaXR5LDI1Nik7dmFyIG9sZENvbnRlbnRzPW5vZGUuY29udGVudHM7bm9kZS5jb250ZW50cz1uZXcgVWludDhBcnJheShuZXdDYXBhY2l0eSk7aWYobm9kZS51c2VkQnl0ZXM+MClub2RlLmNvbnRlbnRzLnNldChvbGRDb250ZW50cy5zdWJhcnJheSgwLG5vZGUudXNlZEJ5dGVzKSwwKX0scmVzaXplRmlsZVN0b3JhZ2U6ZnVuY3Rpb24obm9kZSxuZXdTaXplKXtpZihub2RlLnVzZWRCeXRlcz09bmV3U2l6ZSlyZXR1cm47aWYobmV3U2l6ZT09MCl7bm9kZS5jb250ZW50cz1udWxsO25vZGUudXNlZEJ5dGVzPTB9ZWxzZXt2YXIgb2xkQ29udGVudHM9bm9kZS5jb250ZW50cztub2RlLmNvbnRlbnRzPW5ldyBVaW50OEFycmF5KG5ld1NpemUpO2lmKG9sZENvbnRlbnRzKXtub2RlLmNvbnRlbnRzLnNldChvbGRDb250ZW50cy5zdWJhcnJheSgwLE1hdGgubWluKG5ld1NpemUsbm9kZS51c2VkQnl0ZXMpKSl9bm9kZS51c2VkQnl0ZXM9bmV3U2l6ZX19LG5vZGVfb3BzOntnZXRhdHRyOmZ1bmN0aW9uKG5vZGUpe3ZhciBhdHRyPXt9O2F0dHIuZGV2PUZTLmlzQ2hyZGV2KG5vZGUubW9kZSk/bm9kZS5pZDoxO2F0dHIuaW5vPW5vZGUuaWQ7YXR0ci5tb2RlPW5vZGUubW9kZTthdHRyLm5saW5rPTE7YXR0ci51aWQ9MDthdHRyLmdpZD0wO2F0dHIucmRldj1ub2RlLnJkZXY7aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7YXR0ci5zaXplPTQwOTZ9ZWxzZSBpZihGUy5pc0ZpbGUobm9kZS5tb2RlKSl7YXR0ci5zaXplPW5vZGUudXNlZEJ5dGVzfWVsc2UgaWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe2F0dHIuc2l6ZT1ub2RlLmxpbmsubGVuZ3RofWVsc2V7YXR0ci5zaXplPTB9YXR0ci5hdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5tdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5jdGltZT1uZXcgRGF0ZShub2RlLnRpbWVzdGFtcCk7YXR0ci5ibGtzaXplPTQwOTY7YXR0ci5ibG9ja3M9TWF0aC5jZWlsKGF0dHIuc2l6ZS9hdHRyLmJsa3NpemUpO3JldHVybiBhdHRyfSxzZXRhdHRyOmZ1bmN0aW9uKG5vZGUsYXR0cil7aWYoYXR0ci5tb2RlIT09dW5kZWZpbmVkKXtub2RlLm1vZGU9YXR0ci5tb2RlfWlmKGF0dHIudGltZXN0YW1wIT09dW5kZWZpbmVkKXtub2RlLnRpbWVzdGFtcD1hdHRyLnRpbWVzdGFtcH1pZihhdHRyLnNpemUhPT11bmRlZmluZWQpe01FTUZTLnJlc2l6ZUZpbGVTdG9yYWdlKG5vZGUsYXR0ci5zaXplKX19LGxvb2t1cDpmdW5jdGlvbihwYXJlbnQsbmFtZSl7dGhyb3cgRlMuZ2VuZXJpY0Vycm9yc1s0NF19LG1rbm9kOmZ1bmN0aW9uKHBhcmVudCxuYW1lLG1vZGUsZGV2KXtyZXR1cm4gTUVNRlMuY3JlYXRlTm9kZShwYXJlbnQsbmFtZSxtb2RlLGRldil9LHJlbmFtZTpmdW5jdGlvbihvbGRfbm9kZSxuZXdfZGlyLG5ld19uYW1lKXtpZihGUy5pc0RpcihvbGRfbm9kZS5tb2RlKSl7dmFyIG5ld19ub2RlO3RyeXtuZXdfbm9kZT1GUy5sb29rdXBOb2RlKG5ld19kaXIsbmV3X25hbWUpfWNhdGNoKGUpe31pZihuZXdfbm9kZSl7Zm9yKHZhciBpIGluIG5ld19ub2RlLmNvbnRlbnRzKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NSl9fX1kZWxldGUgb2xkX25vZGUucGFyZW50LmNvbnRlbnRzW29sZF9ub2RlLm5hbWVdO29sZF9ub2RlLnBhcmVudC50aW1lc3RhbXA9RGF0ZS5ub3coKTtvbGRfbm9kZS5uYW1lPW5ld19uYW1lO25ld19kaXIuY29udGVudHNbbmV3X25hbWVdPW9sZF9ub2RlO25ld19kaXIudGltZXN0YW1wPW9sZF9ub2RlLnBhcmVudC50aW1lc3RhbXA7b2xkX25vZGUucGFyZW50PW5ld19kaXJ9LHVubGluazpmdW5jdGlvbihwYXJlbnQsbmFtZSl7ZGVsZXRlIHBhcmVudC5jb250ZW50c1tuYW1lXTtwYXJlbnQudGltZXN0YW1wPURhdGUubm93KCl9LHJtZGlyOmZ1bmN0aW9uKHBhcmVudCxuYW1lKXt2YXIgbm9kZT1GUy5sb29rdXBOb2RlKHBhcmVudCxuYW1lKTtmb3IodmFyIGkgaW4gbm9kZS5jb250ZW50cyl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTUpfWRlbGV0ZSBwYXJlbnQuY29udGVudHNbbmFtZV07cGFyZW50LnRpbWVzdGFtcD1EYXRlLm5vdygpfSxyZWFkZGlyOmZ1bmN0aW9uKG5vZGUpe3ZhciBlbnRyaWVzPVtcIi5cIixcIi4uXCJdO2Zvcih2YXIga2V5IGluIG5vZGUuY29udGVudHMpe2lmKCFub2RlLmNvbnRlbnRzLmhhc093blByb3BlcnR5KGtleSkpe2NvbnRpbnVlfWVudHJpZXMucHVzaChrZXkpfXJldHVybiBlbnRyaWVzfSxzeW1saW5rOmZ1bmN0aW9uKHBhcmVudCxuZXduYW1lLG9sZHBhdGgpe3ZhciBub2RlPU1FTUZTLmNyZWF0ZU5vZGUocGFyZW50LG5ld25hbWUsNTExfDQwOTYwLDApO25vZGUubGluaz1vbGRwYXRoO3JldHVybiBub2RlfSxyZWFkbGluazpmdW5jdGlvbihub2RlKXtpZighRlMuaXNMaW5rKG5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gbm9kZS5saW5rfX0sc3RyZWFtX29wczp7cmVhZDpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pe3ZhciBjb250ZW50cz1zdHJlYW0ubm9kZS5jb250ZW50cztpZihwb3NpdGlvbj49c3RyZWFtLm5vZGUudXNlZEJ5dGVzKXJldHVybiAwO3ZhciBzaXplPU1hdGgubWluKHN0cmVhbS5ub2RlLnVzZWRCeXRlcy1wb3NpdGlvbixsZW5ndGgpO2lmKHNpemU+OCYmY29udGVudHMuc3ViYXJyYXkpe2J1ZmZlci5zZXQoY29udGVudHMuc3ViYXJyYXkocG9zaXRpb24scG9zaXRpb24rc2l6ZSksb2Zmc2V0KX1lbHNle2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspYnVmZmVyW29mZnNldCtpXT1jb250ZW50c1twb3NpdGlvbitpXX1yZXR1cm4gc2l6ZX0sd3JpdGU6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uLGNhbk93bil7aWYoYnVmZmVyLmJ1ZmZlcj09PUhFQVA4LmJ1ZmZlcil7Y2FuT3duPWZhbHNlfWlmKCFsZW5ndGgpcmV0dXJuIDA7dmFyIG5vZGU9c3RyZWFtLm5vZGU7bm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKTtpZihidWZmZXIuc3ViYXJyYXkmJighbm9kZS5jb250ZW50c3x8bm9kZS5jb250ZW50cy5zdWJhcnJheSkpe2lmKGNhbk93bil7bm9kZS5jb250ZW50cz1idWZmZXIuc3ViYXJyYXkob2Zmc2V0LG9mZnNldCtsZW5ndGgpO25vZGUudXNlZEJ5dGVzPWxlbmd0aDtyZXR1cm4gbGVuZ3RofWVsc2UgaWYobm9kZS51c2VkQnl0ZXM9PT0wJiZwb3NpdGlvbj09PTApe25vZGUuY29udGVudHM9YnVmZmVyLnNsaWNlKG9mZnNldCxvZmZzZXQrbGVuZ3RoKTtub2RlLnVzZWRCeXRlcz1sZW5ndGg7cmV0dXJuIGxlbmd0aH1lbHNlIGlmKHBvc2l0aW9uK2xlbmd0aDw9bm9kZS51c2VkQnl0ZXMpe25vZGUuY29udGVudHMuc2V0KGJ1ZmZlci5zdWJhcnJheShvZmZzZXQsb2Zmc2V0K2xlbmd0aCkscG9zaXRpb24pO3JldHVybiBsZW5ndGh9fU1FTUZTLmV4cGFuZEZpbGVTdG9yYWdlKG5vZGUscG9zaXRpb24rbGVuZ3RoKTtpZihub2RlLmNvbnRlbnRzLnN1YmFycmF5JiZidWZmZXIuc3ViYXJyYXkpe25vZGUuY29udGVudHMuc2V0KGJ1ZmZlci5zdWJhcnJheShvZmZzZXQsb2Zmc2V0K2xlbmd0aCkscG9zaXRpb24pfWVsc2V7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtub2RlLmNvbnRlbnRzW3Bvc2l0aW9uK2ldPWJ1ZmZlcltvZmZzZXQraV19fW5vZGUudXNlZEJ5dGVzPU1hdGgubWF4KG5vZGUudXNlZEJ5dGVzLHBvc2l0aW9uK2xlbmd0aCk7cmV0dXJuIGxlbmd0aH0sbGxzZWVrOmZ1bmN0aW9uKHN0cmVhbSxvZmZzZXQsd2hlbmNlKXt2YXIgcG9zaXRpb249b2Zmc2V0O2lmKHdoZW5jZT09PTEpe3Bvc2l0aW9uKz1zdHJlYW0ucG9zaXRpb259ZWxzZSBpZih3aGVuY2U9PT0yKXtpZihGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpe3Bvc2l0aW9uKz1zdHJlYW0ubm9kZS51c2VkQnl0ZXN9fWlmKHBvc2l0aW9uPDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gcG9zaXRpb259LGFsbG9jYXRlOmZ1bmN0aW9uKHN0cmVhbSxvZmZzZXQsbGVuZ3RoKXtNRU1GUy5leHBhbmRGaWxlU3RvcmFnZShzdHJlYW0ubm9kZSxvZmZzZXQrbGVuZ3RoKTtzdHJlYW0ubm9kZS51c2VkQnl0ZXM9TWF0aC5tYXgoc3RyZWFtLm5vZGUudXNlZEJ5dGVzLG9mZnNldCtsZW5ndGgpfSxtbWFwOmZ1bmN0aW9uKHN0cmVhbSxhZGRyZXNzLGxlbmd0aCxwb3NpdGlvbixwcm90LGZsYWdzKXtpZihhZGRyZXNzIT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfWlmKCFGUy5pc0ZpbGUoc3RyZWFtLm5vZGUubW9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQzKX12YXIgcHRyO3ZhciBhbGxvY2F0ZWQ7dmFyIGNvbnRlbnRzPXN0cmVhbS5ub2RlLmNvbnRlbnRzO2lmKCEoZmxhZ3MmMikmJmNvbnRlbnRzLmJ1ZmZlcj09PWJ1ZmZlcil7YWxsb2NhdGVkPWZhbHNlO3B0cj1jb250ZW50cy5ieXRlT2Zmc2V0fWVsc2V7aWYocG9zaXRpb24+MHx8cG9zaXRpb24rbGVuZ3RoPGNvbnRlbnRzLmxlbmd0aCl7aWYoY29udGVudHMuc3ViYXJyYXkpe2NvbnRlbnRzPWNvbnRlbnRzLnN1YmFycmF5KHBvc2l0aW9uLHBvc2l0aW9uK2xlbmd0aCl9ZWxzZXtjb250ZW50cz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChjb250ZW50cyxwb3NpdGlvbixwb3NpdGlvbitsZW5ndGgpfX1hbGxvY2F0ZWQ9dHJ1ZTtwdHI9bW1hcEFsbG9jKGxlbmd0aCk7aWYoIXB0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDgpfUhFQVA4LnNldChjb250ZW50cyxwdHIpfXJldHVybntwdHI6cHRyLGFsbG9jYXRlZDphbGxvY2F0ZWR9fSxtc3luYzpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKXtpZighRlMuaXNGaWxlKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9aWYobW1hcEZsYWdzJjIpe3JldHVybiAwfXZhciBieXRlc1dyaXR0ZW49TUVNRlMuc3RyZWFtX29wcy53cml0ZShzdHJlYW0sYnVmZmVyLDAsbGVuZ3RoLG9mZnNldCxmYWxzZSk7cmV0dXJuIDB9fX07dmFyIEZTPXtyb290Om51bGwsbW91bnRzOltdLGRldmljZXM6e30sc3RyZWFtczpbXSxuZXh0SW5vZGU6MSxuYW1lVGFibGU6bnVsbCxjdXJyZW50UGF0aDpcIi9cIixpbml0aWFsaXplZDpmYWxzZSxpZ25vcmVQZXJtaXNzaW9uczp0cnVlLHRyYWNraW5nRGVsZWdhdGU6e30sdHJhY2tpbmc6e29wZW5GbGFnczp7UkVBRDoxLFdSSVRFOjJ9fSxFcnJub0Vycm9yOm51bGwsZ2VuZXJpY0Vycm9yczp7fSxmaWxlc3lzdGVtczpudWxsLHN5bmNGU1JlcXVlc3RzOjAsbG9va3VwUGF0aDpmdW5jdGlvbihwYXRoLG9wdHMpe3BhdGg9UEFUSF9GUy5yZXNvbHZlKEZTLmN3ZCgpLHBhdGgpO29wdHM9b3B0c3x8e307aWYoIXBhdGgpcmV0dXJue3BhdGg6XCJcIixub2RlOm51bGx9O3ZhciBkZWZhdWx0cz17Zm9sbG93X21vdW50OnRydWUscmVjdXJzZV9jb3VudDowfTtmb3IodmFyIGtleSBpbiBkZWZhdWx0cyl7aWYob3B0c1trZXldPT09dW5kZWZpbmVkKXtvcHRzW2tleV09ZGVmYXVsdHNba2V5XX19aWYob3B0cy5yZWN1cnNlX2NvdW50Pjgpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMyKX12YXIgcGFydHM9UEFUSC5ub3JtYWxpemVBcnJheShwYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIoZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksZmFsc2UpO3ZhciBjdXJyZW50PUZTLnJvb3Q7dmFyIGN1cnJlbnRfcGF0aD1cIi9cIjtmb3IodmFyIGk9MDtpPHBhcnRzLmxlbmd0aDtpKyspe3ZhciBpc2xhc3Q9aT09PXBhcnRzLmxlbmd0aC0xO2lmKGlzbGFzdCYmb3B0cy5wYXJlbnQpe2JyZWFrfWN1cnJlbnQ9RlMubG9va3VwTm9kZShjdXJyZW50LHBhcnRzW2ldKTtjdXJyZW50X3BhdGg9UEFUSC5qb2luMihjdXJyZW50X3BhdGgscGFydHNbaV0pO2lmKEZTLmlzTW91bnRwb2ludChjdXJyZW50KSl7aWYoIWlzbGFzdHx8aXNsYXN0JiZvcHRzLmZvbGxvd19tb3VudCl7Y3VycmVudD1jdXJyZW50Lm1vdW50ZWQucm9vdH19aWYoIWlzbGFzdHx8b3B0cy5mb2xsb3cpe3ZhciBjb3VudD0wO3doaWxlKEZTLmlzTGluayhjdXJyZW50Lm1vZGUpKXt2YXIgbGluaz1GUy5yZWFkbGluayhjdXJyZW50X3BhdGgpO2N1cnJlbnRfcGF0aD1QQVRIX0ZTLnJlc29sdmUoUEFUSC5kaXJuYW1lKGN1cnJlbnRfcGF0aCksbGluayk7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKGN1cnJlbnRfcGF0aCx7cmVjdXJzZV9jb3VudDpvcHRzLnJlY3Vyc2VfY291bnR9KTtjdXJyZW50PWxvb2t1cC5ub2RlO2lmKGNvdW50Kys+NDApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDMyKX19fX1yZXR1cm57cGF0aDpjdXJyZW50X3BhdGgsbm9kZTpjdXJyZW50fX0sZ2V0UGF0aDpmdW5jdGlvbihub2RlKXt2YXIgcGF0aDt3aGlsZSh0cnVlKXtpZihGUy5pc1Jvb3Qobm9kZSkpe3ZhciBtb3VudD1ub2RlLm1vdW50Lm1vdW50cG9pbnQ7aWYoIXBhdGgpcmV0dXJuIG1vdW50O3JldHVybiBtb3VudFttb3VudC5sZW5ndGgtMV0hPT1cIi9cIj9tb3VudCtcIi9cIitwYXRoOm1vdW50K3BhdGh9cGF0aD1wYXRoP25vZGUubmFtZStcIi9cIitwYXRoOm5vZGUubmFtZTtub2RlPW5vZGUucGFyZW50fX0saGFzaE5hbWU6ZnVuY3Rpb24ocGFyZW50aWQsbmFtZSl7dmFyIGhhc2g9MDtmb3IodmFyIGk9MDtpPG5hbWUubGVuZ3RoO2krKyl7aGFzaD0oaGFzaDw8NSktaGFzaCtuYW1lLmNoYXJDb2RlQXQoaSl8MH1yZXR1cm4ocGFyZW50aWQraGFzaD4+PjApJUZTLm5hbWVUYWJsZS5sZW5ndGh9LGhhc2hBZGROb2RlOmZ1bmN0aW9uKG5vZGUpe3ZhciBoYXNoPUZTLmhhc2hOYW1lKG5vZGUucGFyZW50LmlkLG5vZGUubmFtZSk7bm9kZS5uYW1lX25leHQ9RlMubmFtZVRhYmxlW2hhc2hdO0ZTLm5hbWVUYWJsZVtoYXNoXT1ub2RlfSxoYXNoUmVtb3ZlTm9kZTpmdW5jdGlvbihub2RlKXt2YXIgaGFzaD1GUy5oYXNoTmFtZShub2RlLnBhcmVudC5pZCxub2RlLm5hbWUpO2lmKEZTLm5hbWVUYWJsZVtoYXNoXT09PW5vZGUpe0ZTLm5hbWVUYWJsZVtoYXNoXT1ub2RlLm5hbWVfbmV4dH1lbHNle3ZhciBjdXJyZW50PUZTLm5hbWVUYWJsZVtoYXNoXTt3aGlsZShjdXJyZW50KXtpZihjdXJyZW50Lm5hbWVfbmV4dD09PW5vZGUpe2N1cnJlbnQubmFtZV9uZXh0PW5vZGUubmFtZV9uZXh0O2JyZWFrfWN1cnJlbnQ9Y3VycmVudC5uYW1lX25leHR9fX0sbG9va3VwTm9kZTpmdW5jdGlvbihwYXJlbnQsbmFtZSl7dmFyIGVyckNvZGU9RlMubWF5TG9va3VwKHBhcmVudCk7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSxwYXJlbnQpfXZhciBoYXNoPUZTLmhhc2hOYW1lKHBhcmVudC5pZCxuYW1lKTtmb3IodmFyIG5vZGU9RlMubmFtZVRhYmxlW2hhc2hdO25vZGU7bm9kZT1ub2RlLm5hbWVfbmV4dCl7dmFyIG5vZGVOYW1lPW5vZGUubmFtZTtpZihub2RlLnBhcmVudC5pZD09PXBhcmVudC5pZCYmbm9kZU5hbWU9PT1uYW1lKXtyZXR1cm4gbm9kZX19cmV0dXJuIEZTLmxvb2t1cChwYXJlbnQsbmFtZSl9LGNyZWF0ZU5vZGU6ZnVuY3Rpb24ocGFyZW50LG5hbWUsbW9kZSxyZGV2KXt2YXIgbm9kZT1uZXcgRlMuRlNOb2RlKHBhcmVudCxuYW1lLG1vZGUscmRldik7RlMuaGFzaEFkZE5vZGUobm9kZSk7cmV0dXJuIG5vZGV9LGRlc3Ryb3lOb2RlOmZ1bmN0aW9uKG5vZGUpe0ZTLmhhc2hSZW1vdmVOb2RlKG5vZGUpfSxpc1Jvb3Q6ZnVuY3Rpb24obm9kZSl7cmV0dXJuIG5vZGU9PT1ub2RlLnBhcmVudH0saXNNb3VudHBvaW50OmZ1bmN0aW9uKG5vZGUpe3JldHVybiEhbm9kZS5tb3VudGVkfSxpc0ZpbGU6ZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09MzI3Njh9LGlzRGlyOmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTE2Mzg0fSxpc0xpbms6ZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09NDA5NjB9LGlzQ2hyZGV2OmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTgxOTJ9LGlzQmxrZGV2OmZ1bmN0aW9uKG1vZGUpe3JldHVybihtb2RlJjYxNDQwKT09PTI0NTc2fSxpc0ZJRk86ZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNjE0NDApPT09NDA5Nn0saXNTb2NrZXQ6ZnVuY3Rpb24obW9kZSl7cmV0dXJuKG1vZGUmNDkxNTIpPT09NDkxNTJ9LGZsYWdNb2Rlczp7XCJyXCI6MCxcInIrXCI6MixcIndcIjo1NzcsXCJ3K1wiOjU3OCxcImFcIjoxMDg5LFwiYStcIjoxMDkwfSxtb2RlU3RyaW5nVG9GbGFnczpmdW5jdGlvbihzdHIpe3ZhciBmbGFncz1GUy5mbGFnTW9kZXNbc3RyXTtpZih0eXBlb2YgZmxhZ3M9PT1cInVuZGVmaW5lZFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGZpbGUgb3BlbiBtb2RlOiBcIitzdHIpfXJldHVybiBmbGFnc30sZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmc6ZnVuY3Rpb24oZmxhZyl7dmFyIHBlcm1zPVtcInJcIixcIndcIixcInJ3XCJdW2ZsYWcmM107aWYoZmxhZyY1MTIpe3Blcm1zKz1cIndcIn1yZXR1cm4gcGVybXN9LG5vZGVQZXJtaXNzaW9uczpmdW5jdGlvbihub2RlLHBlcm1zKXtpZihGUy5pZ25vcmVQZXJtaXNzaW9ucyl7cmV0dXJuIDB9aWYocGVybXMuaW5jbHVkZXMoXCJyXCIpJiYhKG5vZGUubW9kZSYyOTIpKXtyZXR1cm4gMn1lbHNlIGlmKHBlcm1zLmluY2x1ZGVzKFwid1wiKSYmIShub2RlLm1vZGUmMTQ2KSl7cmV0dXJuIDJ9ZWxzZSBpZihwZXJtcy5pbmNsdWRlcyhcInhcIikmJiEobm9kZS5tb2RlJjczKSl7cmV0dXJuIDJ9cmV0dXJuIDB9LG1heUxvb2t1cDpmdW5jdGlvbihkaXIpe3ZhciBlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsXCJ4XCIpO2lmKGVyckNvZGUpcmV0dXJuIGVyckNvZGU7aWYoIWRpci5ub2RlX29wcy5sb29rdXApcmV0dXJuIDI7cmV0dXJuIDB9LG1heUNyZWF0ZTpmdW5jdGlvbihkaXIsbmFtZSl7dHJ5e3ZhciBub2RlPUZTLmxvb2t1cE5vZGUoZGlyLG5hbWUpO3JldHVybiAyMH1jYXRjaChlKXt9cmV0dXJuIEZTLm5vZGVQZXJtaXNzaW9ucyhkaXIsXCJ3eFwiKX0sbWF5RGVsZXRlOmZ1bmN0aW9uKGRpcixuYW1lLGlzZGlyKXt2YXIgbm9kZTt0cnl7bm9kZT1GUy5sb29rdXBOb2RlKGRpcixuYW1lKX1jYXRjaChlKXtyZXR1cm4gZS5lcnJub312YXIgZXJyQ29kZT1GUy5ub2RlUGVybWlzc2lvbnMoZGlyLFwid3hcIik7aWYoZXJyQ29kZSl7cmV0dXJuIGVyckNvZGV9aWYoaXNkaXIpe2lmKCFGUy5pc0Rpcihub2RlLm1vZGUpKXtyZXR1cm4gNTR9aWYoRlMuaXNSb290KG5vZGUpfHxGUy5nZXRQYXRoKG5vZGUpPT09RlMuY3dkKCkpe3JldHVybiAxMH19ZWxzZXtpZihGUy5pc0Rpcihub2RlLm1vZGUpKXtyZXR1cm4gMzF9fXJldHVybiAwfSxtYXlPcGVuOmZ1bmN0aW9uKG5vZGUsZmxhZ3Mpe2lmKCFub2RlKXtyZXR1cm4gNDR9aWYoRlMuaXNMaW5rKG5vZGUubW9kZSkpe3JldHVybiAzMn1lbHNlIGlmKEZTLmlzRGlyKG5vZGUubW9kZSkpe2lmKEZTLmZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nKGZsYWdzKSE9PVwiclwifHxmbGFncyY1MTIpe3JldHVybiAzMX19cmV0dXJuIEZTLm5vZGVQZXJtaXNzaW9ucyhub2RlLEZTLmZsYWdzVG9QZXJtaXNzaW9uU3RyaW5nKGZsYWdzKSl9LE1BWF9PUEVOX0ZEUzo0MDk2LG5leHRmZDpmdW5jdGlvbihmZF9zdGFydCxmZF9lbmQpe2ZkX3N0YXJ0PWZkX3N0YXJ0fHwwO2ZkX2VuZD1mZF9lbmR8fEZTLk1BWF9PUEVOX0ZEUztmb3IodmFyIGZkPWZkX3N0YXJ0O2ZkPD1mZF9lbmQ7ZmQrKyl7aWYoIUZTLnN0cmVhbXNbZmRdKXtyZXR1cm4gZmR9fXRocm93IG5ldyBGUy5FcnJub0Vycm9yKDMzKX0sZ2V0U3RyZWFtOmZ1bmN0aW9uKGZkKXtyZXR1cm4gRlMuc3RyZWFtc1tmZF19LGNyZWF0ZVN0cmVhbTpmdW5jdGlvbihzdHJlYW0sZmRfc3RhcnQsZmRfZW5kKXtpZighRlMuRlNTdHJlYW0pe0ZTLkZTU3RyZWFtPWZ1bmN0aW9uKCl7fTtGUy5GU1N0cmVhbS5wcm90b3R5cGU9e29iamVjdDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZX0sc2V0OmZ1bmN0aW9uKHZhbCl7dGhpcy5ub2RlPXZhbH19LGlzUmVhZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuZmxhZ3MmMjA5NzE1NSkhPT0xfX0saXNXcml0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuZmxhZ3MmMjA5NzE1NSkhPT0wfX0saXNBcHBlbmQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZsYWdzJjEwMjR9fX19dmFyIG5ld1N0cmVhbT1uZXcgRlMuRlNTdHJlYW07Zm9yKHZhciBwIGluIHN0cmVhbSl7bmV3U3RyZWFtW3BdPXN0cmVhbVtwXX1zdHJlYW09bmV3U3RyZWFtO3ZhciBmZD1GUy5uZXh0ZmQoZmRfc3RhcnQsZmRfZW5kKTtzdHJlYW0uZmQ9ZmQ7RlMuc3RyZWFtc1tmZF09c3RyZWFtO3JldHVybiBzdHJlYW19LGNsb3NlU3RyZWFtOmZ1bmN0aW9uKGZkKXtGUy5zdHJlYW1zW2ZkXT1udWxsfSxjaHJkZXZfc3RyZWFtX29wczp7b3BlbjpmdW5jdGlvbihzdHJlYW0pe3ZhciBkZXZpY2U9RlMuZ2V0RGV2aWNlKHN0cmVhbS5ub2RlLnJkZXYpO3N0cmVhbS5zdHJlYW1fb3BzPWRldmljZS5zdHJlYW1fb3BzO2lmKHN0cmVhbS5zdHJlYW1fb3BzLm9wZW4pe3N0cmVhbS5zdHJlYW1fb3BzLm9wZW4oc3RyZWFtKX19LGxsc2VlazpmdW5jdGlvbigpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDcwKX19LG1ham9yOmZ1bmN0aW9uKGRldil7cmV0dXJuIGRldj4+OH0sbWlub3I6ZnVuY3Rpb24oZGV2KXtyZXR1cm4gZGV2JjI1NX0sbWFrZWRldjpmdW5jdGlvbihtYSxtaSl7cmV0dXJuIG1hPDw4fG1pfSxyZWdpc3RlckRldmljZTpmdW5jdGlvbihkZXYsb3BzKXtGUy5kZXZpY2VzW2Rldl09e3N0cmVhbV9vcHM6b3BzfX0sZ2V0RGV2aWNlOmZ1bmN0aW9uKGRldil7cmV0dXJuIEZTLmRldmljZXNbZGV2XX0sZ2V0TW91bnRzOmZ1bmN0aW9uKG1vdW50KXt2YXIgbW91bnRzPVtdO3ZhciBjaGVjaz1bbW91bnRdO3doaWxlKGNoZWNrLmxlbmd0aCl7dmFyIG09Y2hlY2sucG9wKCk7bW91bnRzLnB1c2gobSk7Y2hlY2sucHVzaC5hcHBseShjaGVjayxtLm1vdW50cyl9cmV0dXJuIG1vdW50c30sc3luY2ZzOmZ1bmN0aW9uKHBvcHVsYXRlLGNhbGxiYWNrKXtpZih0eXBlb2YgcG9wdWxhdGU9PT1cImZ1bmN0aW9uXCIpe2NhbGxiYWNrPXBvcHVsYXRlO3BvcHVsYXRlPWZhbHNlfUZTLnN5bmNGU1JlcXVlc3RzKys7aWYoRlMuc3luY0ZTUmVxdWVzdHM+MSl7ZXJyKFwid2FybmluZzogXCIrRlMuc3luY0ZTUmVxdWVzdHMrXCIgRlMuc3luY2ZzIG9wZXJhdGlvbnMgaW4gZmxpZ2h0IGF0IG9uY2UsIHByb2JhYmx5IGp1c3QgZG9pbmcgZXh0cmEgd29ya1wiKX12YXIgbW91bnRzPUZTLmdldE1vdW50cyhGUy5yb290Lm1vdW50KTt2YXIgY29tcGxldGVkPTA7ZnVuY3Rpb24gZG9DYWxsYmFjayhlcnJDb2RlKXtGUy5zeW5jRlNSZXF1ZXN0cy0tO3JldHVybiBjYWxsYmFjayhlcnJDb2RlKX1mdW5jdGlvbiBkb25lKGVyckNvZGUpe2lmKGVyckNvZGUpe2lmKCFkb25lLmVycm9yZWQpe2RvbmUuZXJyb3JlZD10cnVlO3JldHVybiBkb0NhbGxiYWNrKGVyckNvZGUpfXJldHVybn1pZigrK2NvbXBsZXRlZD49bW91bnRzLmxlbmd0aCl7ZG9DYWxsYmFjayhudWxsKX19bW91bnRzLmZvckVhY2goZnVuY3Rpb24obW91bnQpe2lmKCFtb3VudC50eXBlLnN5bmNmcyl7cmV0dXJuIGRvbmUobnVsbCl9bW91bnQudHlwZS5zeW5jZnMobW91bnQscG9wdWxhdGUsZG9uZSl9KX0sbW91bnQ6ZnVuY3Rpb24odHlwZSxvcHRzLG1vdW50cG9pbnQpe3ZhciByb290PW1vdW50cG9pbnQ9PT1cIi9cIjt2YXIgcHNldWRvPSFtb3VudHBvaW50O3ZhciBub2RlO2lmKHJvb3QmJkZTLnJvb3Qpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDEwKX1lbHNlIGlmKCFyb290JiYhcHNldWRvKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgobW91bnRwb2ludCx7Zm9sbG93X21vdW50OmZhbHNlfSk7bW91bnRwb2ludD1sb29rdXAucGF0aDtub2RlPWxvb2t1cC5ub2RlO2lmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfWlmKCFGUy5pc0Rpcihub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9fXZhciBtb3VudD17dHlwZTp0eXBlLG9wdHM6b3B0cyxtb3VudHBvaW50Om1vdW50cG9pbnQsbW91bnRzOltdfTt2YXIgbW91bnRSb290PXR5cGUubW91bnQobW91bnQpO21vdW50Um9vdC5tb3VudD1tb3VudDttb3VudC5yb290PW1vdW50Um9vdDtpZihyb290KXtGUy5yb290PW1vdW50Um9vdH1lbHNlIGlmKG5vZGUpe25vZGUubW91bnRlZD1tb3VudDtpZihub2RlLm1vdW50KXtub2RlLm1vdW50Lm1vdW50cy5wdXNoKG1vdW50KX19cmV0dXJuIG1vdW50Um9vdH0sdW5tb3VudDpmdW5jdGlvbihtb3VudHBvaW50KXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgobW91bnRwb2ludCx7Zm9sbG93X21vdW50OmZhbHNlfSk7aWYoIUZTLmlzTW91bnRwb2ludChsb29rdXAubm9kZSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX12YXIgbm9kZT1sb29rdXAubm9kZTt2YXIgbW91bnQ9bm9kZS5tb3VudGVkO3ZhciBtb3VudHM9RlMuZ2V0TW91bnRzKG1vdW50KTtPYmplY3Qua2V5cyhGUy5uYW1lVGFibGUpLmZvckVhY2goZnVuY3Rpb24oaGFzaCl7dmFyIGN1cnJlbnQ9RlMubmFtZVRhYmxlW2hhc2hdO3doaWxlKGN1cnJlbnQpe3ZhciBuZXh0PWN1cnJlbnQubmFtZV9uZXh0O2lmKG1vdW50cy5pbmNsdWRlcyhjdXJyZW50Lm1vdW50KSl7RlMuZGVzdHJveU5vZGUoY3VycmVudCl9Y3VycmVudD1uZXh0fX0pO25vZGUubW91bnRlZD1udWxsO3ZhciBpZHg9bm9kZS5tb3VudC5tb3VudHMuaW5kZXhPZihtb3VudCk7bm9kZS5tb3VudC5tb3VudHMuc3BsaWNlKGlkeCwxKX0sbG9va3VwOmZ1bmN0aW9uKHBhcmVudCxuYW1lKXtyZXR1cm4gcGFyZW50Lm5vZGVfb3BzLmxvb2t1cChwYXJlbnQsbmFtZSl9LG1rbm9kOmZ1bmN0aW9uKHBhdGgsbW9kZSxkZXYpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtwYXJlbnQ6dHJ1ZX0pO3ZhciBwYXJlbnQ9bG9va3VwLm5vZGU7dmFyIG5hbWU9UEFUSC5iYXNlbmFtZShwYXRoKTtpZighbmFtZXx8bmFtZT09PVwiLlwifHxuYW1lPT09XCIuLlwiKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIGVyckNvZGU9RlMubWF5Q3JlYXRlKHBhcmVudCxuYW1lKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLm1rbm9kKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9cmV0dXJuIHBhcmVudC5ub2RlX29wcy5ta25vZChwYXJlbnQsbmFtZSxtb2RlLGRldil9LGNyZWF0ZTpmdW5jdGlvbihwYXRoLG1vZGUpe21vZGU9bW9kZSE9PXVuZGVmaW5lZD9tb2RlOjQzODttb2RlJj00MDk1O21vZGV8PTMyNzY4O3JldHVybiBGUy5ta25vZChwYXRoLG1vZGUsMCl9LG1rZGlyOmZ1bmN0aW9uKHBhdGgsbW9kZSl7bW9kZT1tb2RlIT09dW5kZWZpbmVkP21vZGU6NTExO21vZGUmPTUxMXw1MTI7bW9kZXw9MTYzODQ7cmV0dXJuIEZTLm1rbm9kKHBhdGgsbW9kZSwwKX0sbWtkaXJUcmVlOmZ1bmN0aW9uKHBhdGgsbW9kZSl7dmFyIGRpcnM9cGF0aC5zcGxpdChcIi9cIik7dmFyIGQ9XCJcIjtmb3IodmFyIGk9MDtpPGRpcnMubGVuZ3RoOysraSl7aWYoIWRpcnNbaV0pY29udGludWU7ZCs9XCIvXCIrZGlyc1tpXTt0cnl7RlMubWtkaXIoZCxtb2RlKX1jYXRjaChlKXtpZihlLmVycm5vIT0yMCl0aHJvdyBlfX19LG1rZGV2OmZ1bmN0aW9uKHBhdGgsbW9kZSxkZXYpe2lmKHR5cGVvZiBkZXY9PT1cInVuZGVmaW5lZFwiKXtkZXY9bW9kZTttb2RlPTQzOH1tb2RlfD04MTkyO3JldHVybiBGUy5ta25vZChwYXRoLG1vZGUsZGV2KX0sc3ltbGluazpmdW5jdGlvbihvbGRwYXRoLG5ld3BhdGgpe2lmKCFQQVRIX0ZTLnJlc29sdmUob2xkcGF0aCkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX12YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgobmV3cGF0aCx7cGFyZW50OnRydWV9KTt2YXIgcGFyZW50PWxvb2t1cC5ub2RlO2lmKCFwYXJlbnQpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDQ0KX12YXIgbmV3bmFtZT1QQVRILmJhc2VuYW1lKG5ld3BhdGgpO3ZhciBlcnJDb2RlPUZTLm1heUNyZWF0ZShwYXJlbnQsbmV3bmFtZSk7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9aWYoIXBhcmVudC5ub2RlX29wcy5zeW1saW5rKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9cmV0dXJuIHBhcmVudC5ub2RlX29wcy5zeW1saW5rKHBhcmVudCxuZXduYW1lLG9sZHBhdGgpfSxyZW5hbWU6ZnVuY3Rpb24ob2xkX3BhdGgsbmV3X3BhdGgpe3ZhciBvbGRfZGlybmFtZT1QQVRILmRpcm5hbWUob2xkX3BhdGgpO3ZhciBuZXdfZGlybmFtZT1QQVRILmRpcm5hbWUobmV3X3BhdGgpO3ZhciBvbGRfbmFtZT1QQVRILmJhc2VuYW1lKG9sZF9wYXRoKTt2YXIgbmV3X25hbWU9UEFUSC5iYXNlbmFtZShuZXdfcGF0aCk7dmFyIGxvb2t1cCxvbGRfZGlyLG5ld19kaXI7bG9va3VwPUZTLmxvb2t1cFBhdGgob2xkX3BhdGgse3BhcmVudDp0cnVlfSk7b2xkX2Rpcj1sb29rdXAubm9kZTtsb29rdXA9RlMubG9va3VwUGF0aChuZXdfcGF0aCx7cGFyZW50OnRydWV9KTtuZXdfZGlyPWxvb2t1cC5ub2RlO2lmKCFvbGRfZGlyfHwhbmV3X2Rpcil0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCk7aWYob2xkX2Rpci5tb3VudCE9PW5ld19kaXIubW91bnQpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDc1KX12YXIgb2xkX25vZGU9RlMubG9va3VwTm9kZShvbGRfZGlyLG9sZF9uYW1lKTt2YXIgcmVsYXRpdmU9UEFUSF9GUy5yZWxhdGl2ZShvbGRfcGF0aCxuZXdfZGlybmFtZSk7aWYocmVsYXRpdmUuY2hhckF0KDApIT09XCIuXCIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZWxhdGl2ZT1QQVRIX0ZTLnJlbGF0aXZlKG5ld19wYXRoLG9sZF9kaXJuYW1lKTtpZihyZWxhdGl2ZS5jaGFyQXQoMCkhPT1cIi5cIil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTUpfXZhciBuZXdfbm9kZTt0cnl7bmV3X25vZGU9RlMubG9va3VwTm9kZShuZXdfZGlyLG5ld19uYW1lKX1jYXRjaChlKXt9aWYob2xkX25vZGU9PT1uZXdfbm9kZSl7cmV0dXJufXZhciBpc2Rpcj1GUy5pc0RpcihvbGRfbm9kZS5tb2RlKTt2YXIgZXJyQ29kZT1GUy5tYXlEZWxldGUob2xkX2RpcixvbGRfbmFtZSxpc2Rpcik7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9ZXJyQ29kZT1uZXdfbm9kZT9GUy5tYXlEZWxldGUobmV3X2RpcixuZXdfbmFtZSxpc2Rpcik6RlMubWF5Q3JlYXRlKG5ld19kaXIsbmV3X25hbWUpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfWlmKCFvbGRfZGlyLm5vZGVfb3BzLnJlbmFtZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzTW91bnRwb2ludChvbGRfbm9kZSl8fG5ld19ub2RlJiZGUy5pc01vdW50cG9pbnQobmV3X25vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMCl9aWYobmV3X2RpciE9PW9sZF9kaXIpe2VyckNvZGU9RlMubm9kZVBlcm1pc3Npb25zKG9sZF9kaXIsXCJ3XCIpO2lmKGVyckNvZGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKGVyckNvZGUpfX10cnl7aWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIndpbGxNb3ZlUGF0aFwiXSl7RlMudHJhY2tpbmdEZWxlZ2F0ZVtcIndpbGxNb3ZlUGF0aFwiXShvbGRfcGF0aCxuZXdfcGF0aCl9fWNhdGNoKGUpe2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ3dpbGxNb3ZlUGF0aCddKCdcIitvbGRfcGF0aCtcIicsICdcIituZXdfcGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX1GUy5oYXNoUmVtb3ZlTm9kZShvbGRfbm9kZSk7dHJ5e29sZF9kaXIubm9kZV9vcHMucmVuYW1lKG9sZF9ub2RlLG5ld19kaXIsbmV3X25hbWUpfWNhdGNoKGUpe3Rocm93IGV9ZmluYWxseXtGUy5oYXNoQWRkTm9kZShvbGRfbm9kZSl9dHJ5e2lmKEZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbk1vdmVQYXRoXCJdKUZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbk1vdmVQYXRoXCJdKG9sZF9wYXRoLG5ld19wYXRoKX1jYXRjaChlKXtlcnIoXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbk1vdmVQYXRoJ10oJ1wiK29sZF9wYXRoK1wiJywgJ1wiK25ld19wYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfX0scm1kaXI6ZnVuY3Rpb24ocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7dmFyIHBhcmVudD1sb29rdXAubm9kZTt2YXIgbmFtZT1QQVRILmJhc2VuYW1lKHBhdGgpO3ZhciBub2RlPUZTLmxvb2t1cE5vZGUocGFyZW50LG5hbWUpO3ZhciBlcnJDb2RlPUZTLm1heURlbGV0ZShwYXJlbnQsbmFtZSx0cnVlKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLnJtZGlyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9aWYoRlMuaXNNb3VudHBvaW50KG5vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMCl9dHJ5e2lmKEZTLnRyYWNraW5nRGVsZWdhdGVbXCJ3aWxsRGVsZXRlUGF0aFwiXSl7RlMudHJhY2tpbmdEZWxlZ2F0ZVtcIndpbGxEZWxldGVQYXRoXCJdKHBhdGgpfX1jYXRjaChlKXtlcnIoXCJGUy50cmFja2luZ0RlbGVnYXRlWyd3aWxsRGVsZXRlUGF0aCddKCdcIitwYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfXBhcmVudC5ub2RlX29wcy5ybWRpcihwYXJlbnQsbmFtZSk7RlMuZGVzdHJveU5vZGUobm9kZSk7dHJ5e2lmKEZTLnRyYWNraW5nRGVsZWdhdGVbXCJvbkRlbGV0ZVBhdGhcIl0pRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uRGVsZXRlUGF0aFwiXShwYXRoKX1jYXRjaChlKXtlcnIoXCJGUy50cmFja2luZ0RlbGVnYXRlWydvbkRlbGV0ZVBhdGgnXSgnXCIrcGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX19LHJlYWRkaXI6ZnVuY3Rpb24ocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7dmFyIG5vZGU9bG9va3VwLm5vZGU7aWYoIW5vZGUubm9kZV9vcHMucmVhZGRpcil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfXJldHVybiBub2RlLm5vZGVfb3BzLnJlYWRkaXIobm9kZSl9LHVubGluazpmdW5jdGlvbihwYXRoKXt2YXIgbG9va3VwPUZTLmxvb2t1cFBhdGgocGF0aCx7cGFyZW50OnRydWV9KTt2YXIgcGFyZW50PWxvb2t1cC5ub2RlO3ZhciBuYW1lPVBBVEguYmFzZW5hbWUocGF0aCk7dmFyIG5vZGU9RlMubG9va3VwTm9kZShwYXJlbnQsbmFtZSk7dmFyIGVyckNvZGU9RlMubWF5RGVsZXRlKHBhcmVudCxuYW1lLGZhbHNlKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1pZighcGFyZW50Lm5vZGVfb3BzLnVubGluayl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfWlmKEZTLmlzTW91bnRwb2ludChub2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMTApfXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wid2lsbERlbGV0ZVBhdGhcIl0pe0ZTLnRyYWNraW5nRGVsZWdhdGVbXCJ3aWxsRGVsZXRlUGF0aFwiXShwYXRoKX19Y2F0Y2goZSl7ZXJyKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnd2lsbERlbGV0ZVBhdGgnXSgnXCIrcGF0aCtcIicpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX1wYXJlbnQubm9kZV9vcHMudW5saW5rKHBhcmVudCxuYW1lKTtGUy5kZXN0cm95Tm9kZShub2RlKTt0cnl7aWYoRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uRGVsZXRlUGF0aFwiXSlGUy50cmFja2luZ0RlbGVnYXRlW1wib25EZWxldGVQYXRoXCJdKHBhdGgpfWNhdGNoKGUpe2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uRGVsZXRlUGF0aCddKCdcIitwYXRoK1wiJykgdGhyZXcgYW4gZXhjZXB0aW9uOiBcIitlLm1lc3NhZ2UpfX0scmVhZGxpbms6ZnVuY3Rpb24ocGF0aCl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgpO3ZhciBsaW5rPWxvb2t1cC5ub2RlO2lmKCFsaW5rKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoIWxpbmsubm9kZV9vcHMucmVhZGxpbmspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1yZXR1cm4gUEFUSF9GUy5yZXNvbHZlKEZTLmdldFBhdGgobGluay5wYXJlbnQpLGxpbmsubm9kZV9vcHMucmVhZGxpbmsobGluaykpfSxzdGF0OmZ1bmN0aW9uKHBhdGgsZG9udEZvbGxvdyl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udEZvbGxvd30pO3ZhciBub2RlPWxvb2t1cC5ub2RlO2lmKCFub2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoIW5vZGUubm9kZV9vcHMuZ2V0YXR0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfXJldHVybiBub2RlLm5vZGVfb3BzLmdldGF0dHIobm9kZSl9LGxzdGF0OmZ1bmN0aW9uKHBhdGgpe3JldHVybiBGUy5zdGF0KHBhdGgsdHJ1ZSl9LGNobW9kOmZ1bmN0aW9uKHBhdGgsbW9kZSxkb250Rm9sbG93KXt2YXIgbm9kZTtpZih0eXBlb2YgcGF0aD09PVwic3RyaW5nXCIpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRGb2xsb3d9KTtub2RlPWxvb2t1cC5ub2RlfWVsc2V7bm9kZT1wYXRofWlmKCFub2RlLm5vZGVfb3BzLnNldGF0dHIpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDYzKX1ub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7bW9kZTptb2RlJjQwOTV8bm9kZS5tb2RlJn40MDk1LHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGxjaG1vZDpmdW5jdGlvbihwYXRoLG1vZGUpe0ZTLmNobW9kKHBhdGgsbW9kZSx0cnVlKX0sZmNobW9kOmZ1bmN0aW9uKGZkLG1vZGUpe3ZhciBzdHJlYW09RlMuZ2V0U3RyZWFtKGZkKTtpZighc3RyZWFtKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1GUy5jaG1vZChzdHJlYW0ubm9kZSxtb2RlKX0sY2hvd246ZnVuY3Rpb24ocGF0aCx1aWQsZ2lkLGRvbnRGb2xsb3cpe3ZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT09XCJzdHJpbmdcIil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzohZG9udEZvbGxvd30pO25vZGU9bG9va3VwLm5vZGV9ZWxzZXtub2RlPXBhdGh9aWYoIW5vZGUubm9kZV9vcHMuc2V0YXR0cil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNjMpfW5vZGUubm9kZV9vcHMuc2V0YXR0cihub2RlLHt0aW1lc3RhbXA6RGF0ZS5ub3coKX0pfSxsY2hvd246ZnVuY3Rpb24ocGF0aCx1aWQsZ2lkKXtGUy5jaG93bihwYXRoLHVpZCxnaWQsdHJ1ZSl9LGZjaG93bjpmdW5jdGlvbihmZCx1aWQsZ2lkKXt2YXIgc3RyZWFtPUZTLmdldFN0cmVhbShmZCk7aWYoIXN0cmVhbSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9RlMuY2hvd24oc3RyZWFtLm5vZGUsdWlkLGdpZCl9LHRydW5jYXRlOmZ1bmN0aW9uKHBhdGgsbGVuKXtpZihsZW48MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXZhciBub2RlO2lmKHR5cGVvZiBwYXRoPT09XCJzdHJpbmdcIil7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7bm9kZT1sb29rdXAubm9kZX1lbHNle25vZGU9cGF0aH1pZighbm9kZS5ub2RlX29wcy5zZXRhdHRyKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig2Myl9aWYoRlMuaXNEaXIobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMzEpfWlmKCFGUy5pc0ZpbGUobm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfXZhciBlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhub2RlLFwid1wiKTtpZihlcnJDb2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcihlcnJDb2RlKX1ub2RlLm5vZGVfb3BzLnNldGF0dHIobm9kZSx7c2l6ZTpsZW4sdGltZXN0YW1wOkRhdGUubm93KCl9KX0sZnRydW5jYXRlOmZ1bmN0aW9uKGZkLGxlbil7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW0oZmQpO2lmKCFzdHJlYW0pe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0wKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9RlMudHJ1bmNhdGUoc3RyZWFtLm5vZGUsbGVuKX0sdXRpbWU6ZnVuY3Rpb24ocGF0aCxhdGltZSxtdGltZSl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7dmFyIG5vZGU9bG9va3VwLm5vZGU7bm9kZS5ub2RlX29wcy5zZXRhdHRyKG5vZGUse3RpbWVzdGFtcDpNYXRoLm1heChhdGltZSxtdGltZSl9KX0sb3BlbjpmdW5jdGlvbihwYXRoLGZsYWdzLG1vZGUsZmRfc3RhcnQsZmRfZW5kKXtpZihwYXRoPT09XCJcIil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfWZsYWdzPXR5cGVvZiBmbGFncz09PVwic3RyaW5nXCI/RlMubW9kZVN0cmluZ1RvRmxhZ3MoZmxhZ3MpOmZsYWdzO21vZGU9dHlwZW9mIG1vZGU9PT1cInVuZGVmaW5lZFwiPzQzODptb2RlO2lmKGZsYWdzJjY0KXttb2RlPW1vZGUmNDA5NXwzMjc2OH1lbHNle21vZGU9MH12YXIgbm9kZTtpZih0eXBlb2YgcGF0aD09PVwib2JqZWN0XCIpe25vZGU9cGF0aH1lbHNle3BhdGg9UEFUSC5ub3JtYWxpemUocGF0aCk7dHJ5e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IShmbGFncyYxMzEwNzIpfSk7bm9kZT1sb29rdXAubm9kZX1jYXRjaChlKXt9fXZhciBjcmVhdGVkPWZhbHNlO2lmKGZsYWdzJjY0KXtpZihub2RlKXtpZihmbGFncyYxMjgpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDIwKX19ZWxzZXtub2RlPUZTLm1rbm9kKHBhdGgsbW9kZSwwKTtjcmVhdGVkPXRydWV9fWlmKCFub2RlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9aWYoRlMuaXNDaHJkZXYobm9kZS5tb2RlKSl7ZmxhZ3MmPX41MTJ9aWYoZmxhZ3MmNjU1MzYmJiFGUy5pc0Rpcihub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig1NCl9aWYoIWNyZWF0ZWQpe3ZhciBlcnJDb2RlPUZTLm1heU9wZW4obm9kZSxmbGFncyk7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9fWlmKGZsYWdzJjUxMil7RlMudHJ1bmNhdGUobm9kZSwwKX1mbGFncyY9figxMjh8NTEyfDEzMTA3Mik7dmFyIHN0cmVhbT1GUy5jcmVhdGVTdHJlYW0oe25vZGU6bm9kZSxwYXRoOkZTLmdldFBhdGgobm9kZSksZmxhZ3M6ZmxhZ3Msc2Vla2FibGU6dHJ1ZSxwb3NpdGlvbjowLHN0cmVhbV9vcHM6bm9kZS5zdHJlYW1fb3BzLHVuZ290dGVuOltdLGVycm9yOmZhbHNlfSxmZF9zdGFydCxmZF9lbmQpO2lmKHN0cmVhbS5zdHJlYW1fb3BzLm9wZW4pe3N0cmVhbS5zdHJlYW1fb3BzLm9wZW4oc3RyZWFtKX1pZihNb2R1bGVbXCJsb2dSZWFkRmlsZXNcIl0mJiEoZmxhZ3MmMSkpe2lmKCFGUy5yZWFkRmlsZXMpRlMucmVhZEZpbGVzPXt9O2lmKCEocGF0aCBpbiBGUy5yZWFkRmlsZXMpKXtGUy5yZWFkRmlsZXNbcGF0aF09MTtlcnIoXCJGUy50cmFja2luZ0RlbGVnYXRlIGVycm9yIG9uIHJlYWQgZmlsZTogXCIrcGF0aCl9fXRyeXtpZihGUy50cmFja2luZ0RlbGVnYXRlW1wib25PcGVuRmlsZVwiXSl7dmFyIHRyYWNraW5nRmxhZ3M9MDtpZigoZmxhZ3MmMjA5NzE1NSkhPT0xKXt0cmFja2luZ0ZsYWdzfD1GUy50cmFja2luZy5vcGVuRmxhZ3MuUkVBRH1pZigoZmxhZ3MmMjA5NzE1NSkhPT0wKXt0cmFja2luZ0ZsYWdzfD1GUy50cmFja2luZy5vcGVuRmxhZ3MuV1JJVEV9RlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uT3BlbkZpbGVcIl0ocGF0aCx0cmFja2luZ0ZsYWdzKX19Y2F0Y2goZSl7ZXJyKFwiRlMudHJhY2tpbmdEZWxlZ2F0ZVsnb25PcGVuRmlsZSddKCdcIitwYXRoK1wiJywgZmxhZ3MpIHRocmV3IGFuIGV4Y2VwdGlvbjogXCIrZS5tZXNzYWdlKX1yZXR1cm4gc3RyZWFtfSxjbG9zZTpmdW5jdGlvbihzdHJlYW0pe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKHN0cmVhbS5nZXRkZW50cylzdHJlYW0uZ2V0ZGVudHM9bnVsbDt0cnl7aWYoc3RyZWFtLnN0cmVhbV9vcHMuY2xvc2Upe3N0cmVhbS5zdHJlYW1fb3BzLmNsb3NlKHN0cmVhbSl9fWNhdGNoKGUpe3Rocm93IGV9ZmluYWxseXtGUy5jbG9zZVN0cmVhbShzdHJlYW0uZmQpfXN0cmVhbS5mZD1udWxsfSxpc0Nsb3NlZDpmdW5jdGlvbihzdHJlYW0pe3JldHVybiBzdHJlYW0uZmQ9PT1udWxsfSxsbHNlZWs6ZnVuY3Rpb24oc3RyZWFtLG9mZnNldCx3aGVuY2Upe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKCFzdHJlYW0uc2Vla2FibGV8fCFzdHJlYW0uc3RyZWFtX29wcy5sbHNlZWspe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDcwKX1pZih3aGVuY2UhPTAmJndoZW5jZSE9MSYmd2hlbmNlIT0yKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9c3RyZWFtLnBvc2l0aW9uPXN0cmVhbS5zdHJlYW1fb3BzLmxsc2VlayhzdHJlYW0sb2Zmc2V0LHdoZW5jZSk7c3RyZWFtLnVuZ290dGVuPVtdO3JldHVybiBzdHJlYW0ucG9zaXRpb259LHJlYWQ6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXtpZihsZW5ndGg8MHx8cG9zaXRpb248MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjgpfWlmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKChzdHJlYW0uZmxhZ3MmMjA5NzE1NSk9PT0xKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KX1pZihGUy5pc0RpcihzdHJlYW0ubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMzEpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5yZWFkKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9dmFyIHNlZWtpbmc9dHlwZW9mIHBvc2l0aW9uIT09XCJ1bmRlZmluZWRcIjtpZighc2Vla2luZyl7cG9zaXRpb249c3RyZWFtLnBvc2l0aW9ufWVsc2UgaWYoIXN0cmVhbS5zZWVrYWJsZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNzApfXZhciBieXRlc1JlYWQ9c3RyZWFtLnN0cmVhbV9vcHMucmVhZChzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zaXRpb24pO2lmKCFzZWVraW5nKXN0cmVhbS5wb3NpdGlvbis9Ynl0ZXNSZWFkO3JldHVybiBieXRlc1JlYWR9LHdyaXRlOmZ1bmN0aW9uKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbixjYW5Pd24pe2lmKGxlbmd0aDwwfHxwb3NpdGlvbjwwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9aWYoRlMuaXNDbG9zZWQoc3RyZWFtKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKEZTLmlzRGlyKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigzMSl9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLndyaXRlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigyOCl9aWYoc3RyZWFtLnNlZWthYmxlJiZzdHJlYW0uZmxhZ3MmMTAyNCl7RlMubGxzZWVrKHN0cmVhbSwwLDIpfXZhciBzZWVraW5nPXR5cGVvZiBwb3NpdGlvbiE9PVwidW5kZWZpbmVkXCI7aWYoIXNlZWtpbmcpe3Bvc2l0aW9uPXN0cmVhbS5wb3NpdGlvbn1lbHNlIGlmKCFzdHJlYW0uc2Vla2FibGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDcwKX12YXIgYnl0ZXNXcml0dGVuPXN0cmVhbS5zdHJlYW1fb3BzLndyaXRlKHN0cmVhbSxidWZmZXIsb2Zmc2V0LGxlbmd0aCxwb3NpdGlvbixjYW5Pd24pO2lmKCFzZWVraW5nKXN0cmVhbS5wb3NpdGlvbis9Ynl0ZXNXcml0dGVuO3RyeXtpZihzdHJlYW0ucGF0aCYmRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uV3JpdGVUb0ZpbGVcIl0pRlMudHJhY2tpbmdEZWxlZ2F0ZVtcIm9uV3JpdGVUb0ZpbGVcIl0oc3RyZWFtLnBhdGgpfWNhdGNoKGUpe2VycihcIkZTLnRyYWNraW5nRGVsZWdhdGVbJ29uV3JpdGVUb0ZpbGUnXSgnXCIrc3RyZWFtLnBhdGgrXCInKSB0aHJldyBhbiBleGNlcHRpb246IFwiK2UubWVzc2FnZSl9cmV0dXJuIGJ5dGVzV3JpdHRlbn0sYWxsb2NhdGU6ZnVuY3Rpb24oc3RyZWFtLG9mZnNldCxsZW5ndGgpe2lmKEZTLmlzQ2xvc2VkKHN0cmVhbSkpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpfWlmKG9mZnNldDwwfHxsZW5ndGg8PTApe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI4KX1pZigoc3RyZWFtLmZsYWdzJjIwOTcxNTUpPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCl9aWYoIUZTLmlzRmlsZShzdHJlYW0ubm9kZS5tb2RlKSYmIUZTLmlzRGlyKHN0cmVhbS5ub2RlLm1vZGUpKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9aWYoIXN0cmVhbS5zdHJlYW1fb3BzLmFsbG9jYXRlKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcigxMzgpfXN0cmVhbS5zdHJlYW1fb3BzLmFsbG9jYXRlKHN0cmVhbSxvZmZzZXQsbGVuZ3RoKX0sbW1hcDpmdW5jdGlvbihzdHJlYW0sYWRkcmVzcyxsZW5ndGgscG9zaXRpb24scHJvdCxmbGFncyl7aWYoKHByb3QmMikhPT0wJiYoZmxhZ3MmMik9PT0wJiYoc3RyZWFtLmZsYWdzJjIwOTcxNTUpIT09Mil7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMil9aWYoKHN0cmVhbS5mbGFncyYyMDk3MTU1KT09PTEpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDIpfWlmKCFzdHJlYW0uc3RyZWFtX29wcy5tbWFwKXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0Myl9cmV0dXJuIHN0cmVhbS5zdHJlYW1fb3BzLm1tYXAoc3RyZWFtLGFkZHJlc3MsbGVuZ3RoLHBvc2l0aW9uLHByb3QsZmxhZ3MpfSxtc3luYzpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKXtpZighc3RyZWFtfHwhc3RyZWFtLnN0cmVhbV9vcHMubXN5bmMpe3JldHVybiAwfXJldHVybiBzdHJlYW0uc3RyZWFtX29wcy5tc3luYyhzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgsbW1hcEZsYWdzKX0sbXVubWFwOmZ1bmN0aW9uKHN0cmVhbSl7cmV0dXJuIDB9LGlvY3RsOmZ1bmN0aW9uKHN0cmVhbSxjbWQsYXJnKXtpZighc3RyZWFtLnN0cmVhbV9vcHMuaW9jdGwpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDU5KX1yZXR1cm4gc3RyZWFtLnN0cmVhbV9vcHMuaW9jdGwoc3RyZWFtLGNtZCxhcmcpfSxyZWFkRmlsZTpmdW5jdGlvbihwYXRoLG9wdHMpe29wdHM9b3B0c3x8e307b3B0cy5mbGFncz1vcHRzLmZsYWdzfHwwO29wdHMuZW5jb2Rpbmc9b3B0cy5lbmNvZGluZ3x8XCJiaW5hcnlcIjtpZihvcHRzLmVuY29kaW5nIT09XCJ1dGY4XCImJm9wdHMuZW5jb2RpbmchPT1cImJpbmFyeVwiKXt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW5jb2RpbmcgdHlwZSBcIicrb3B0cy5lbmNvZGluZysnXCInKX12YXIgcmV0O3ZhciBzdHJlYW09RlMub3BlbihwYXRoLG9wdHMuZmxhZ3MpO3ZhciBzdGF0PUZTLnN0YXQocGF0aCk7dmFyIGxlbmd0aD1zdGF0LnNpemU7dmFyIGJ1Zj1uZXcgVWludDhBcnJheShsZW5ndGgpO0ZTLnJlYWQoc3RyZWFtLGJ1ZiwwLGxlbmd0aCwwKTtpZihvcHRzLmVuY29kaW5nPT09XCJ1dGY4XCIpe3JldD1VVEY4QXJyYXlUb1N0cmluZyhidWYsMCl9ZWxzZSBpZihvcHRzLmVuY29kaW5nPT09XCJiaW5hcnlcIil7cmV0PWJ1Zn1GUy5jbG9zZShzdHJlYW0pO3JldHVybiByZXR9LHdyaXRlRmlsZTpmdW5jdGlvbihwYXRoLGRhdGEsb3B0cyl7b3B0cz1vcHRzfHx7fTtvcHRzLmZsYWdzPW9wdHMuZmxhZ3N8fDU3Nzt2YXIgc3RyZWFtPUZTLm9wZW4ocGF0aCxvcHRzLmZsYWdzLG9wdHMubW9kZSk7aWYodHlwZW9mIGRhdGE9PT1cInN0cmluZ1wiKXt2YXIgYnVmPW5ldyBVaW50OEFycmF5KGxlbmd0aEJ5dGVzVVRGOChkYXRhKSsxKTt2YXIgYWN0dWFsTnVtQnl0ZXM9c3RyaW5nVG9VVEY4QXJyYXkoZGF0YSxidWYsMCxidWYubGVuZ3RoKTtGUy53cml0ZShzdHJlYW0sYnVmLDAsYWN0dWFsTnVtQnl0ZXMsdW5kZWZpbmVkLG9wdHMuY2FuT3duKX1lbHNlIGlmKEFycmF5QnVmZmVyLmlzVmlldyhkYXRhKSl7RlMud3JpdGUoc3RyZWFtLGRhdGEsMCxkYXRhLmJ5dGVMZW5ndGgsdW5kZWZpbmVkLG9wdHMuY2FuT3duKX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZVwiKX1GUy5jbG9zZShzdHJlYW0pfSxjd2Q6ZnVuY3Rpb24oKXtyZXR1cm4gRlMuY3VycmVudFBhdGh9LGNoZGlyOmZ1bmN0aW9uKHBhdGgpe3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6dHJ1ZX0pO2lmKGxvb2t1cC5ub2RlPT09bnVsbCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNDQpfWlmKCFGUy5pc0Rpcihsb29rdXAubm9kZS5tb2RlKSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNTQpfXZhciBlcnJDb2RlPUZTLm5vZGVQZXJtaXNzaW9ucyhsb29rdXAubm9kZSxcInhcIik7aWYoZXJyQ29kZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoZXJyQ29kZSl9RlMuY3VycmVudFBhdGg9bG9va3VwLnBhdGh9LGNyZWF0ZURlZmF1bHREaXJlY3RvcmllczpmdW5jdGlvbigpe0ZTLm1rZGlyKFwiL3RtcFwiKTtGUy5ta2RpcihcIi9ob21lXCIpO0ZTLm1rZGlyKFwiL2hvbWUvd2ViX3VzZXJcIil9LGNyZWF0ZURlZmF1bHREZXZpY2VzOmZ1bmN0aW9uKCl7RlMubWtkaXIoXCIvZGV2XCIpO0ZTLnJlZ2lzdGVyRGV2aWNlKEZTLm1ha2VkZXYoMSwzKSx7cmVhZDpmdW5jdGlvbigpe3JldHVybiAwfSx3cml0ZTpmdW5jdGlvbihzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW5ndGgscG9zKXtyZXR1cm4gbGVuZ3RofX0pO0ZTLm1rZGV2KFwiL2Rldi9udWxsXCIsRlMubWFrZWRldigxLDMpKTtUVFkucmVnaXN0ZXIoRlMubWFrZWRldig1LDApLFRUWS5kZWZhdWx0X3R0eV9vcHMpO1RUWS5yZWdpc3RlcihGUy5tYWtlZGV2KDYsMCksVFRZLmRlZmF1bHRfdHR5MV9vcHMpO0ZTLm1rZGV2KFwiL2Rldi90dHlcIixGUy5tYWtlZGV2KDUsMCkpO0ZTLm1rZGV2KFwiL2Rldi90dHkxXCIsRlMubWFrZWRldig2LDApKTt2YXIgcmFuZG9tX2RldmljZT1nZXRSYW5kb21EZXZpY2UoKTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJyYW5kb21cIixyYW5kb21fZGV2aWNlKTtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJ1cmFuZG9tXCIscmFuZG9tX2RldmljZSk7RlMubWtkaXIoXCIvZGV2L3NobVwiKTtGUy5ta2RpcihcIi9kZXYvc2htL3RtcFwiKX0sY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzOmZ1bmN0aW9uKCl7RlMubWtkaXIoXCIvcHJvY1wiKTt2YXIgcHJvY19zZWxmPUZTLm1rZGlyKFwiL3Byb2Mvc2VsZlwiKTtGUy5ta2RpcihcIi9wcm9jL3NlbGYvZmRcIik7RlMubW91bnQoe21vdW50OmZ1bmN0aW9uKCl7dmFyIG5vZGU9RlMuY3JlYXRlTm9kZShwcm9jX3NlbGYsXCJmZFwiLDE2Mzg0fDUxMSw3Myk7bm9kZS5ub2RlX29wcz17bG9va3VwOmZ1bmN0aW9uKHBhcmVudCxuYW1lKXt2YXIgZmQ9K25hbWU7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW0oZmQpO2lmKCFzdHJlYW0pdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCk7dmFyIHJldD17cGFyZW50Om51bGwsbW91bnQ6e21vdW50cG9pbnQ6XCJmYWtlXCJ9LG5vZGVfb3BzOntyZWFkbGluazpmdW5jdGlvbigpe3JldHVybiBzdHJlYW0ucGF0aH19fTtyZXQucGFyZW50PXJldDtyZXR1cm4gcmV0fX07cmV0dXJuIG5vZGV9fSx7fSxcIi9wcm9jL3NlbGYvZmRcIil9LGNyZWF0ZVN0YW5kYXJkU3RyZWFtczpmdW5jdGlvbigpe2lmKE1vZHVsZVtcInN0ZGluXCJdKXtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJzdGRpblwiLE1vZHVsZVtcInN0ZGluXCJdKX1lbHNle0ZTLnN5bWxpbmsoXCIvZGV2L3R0eVwiLFwiL2Rldi9zdGRpblwiKX1pZihNb2R1bGVbXCJzdGRvdXRcIl0pe0ZTLmNyZWF0ZURldmljZShcIi9kZXZcIixcInN0ZG91dFwiLG51bGwsTW9kdWxlW1wic3Rkb3V0XCJdKX1lbHNle0ZTLnN5bWxpbmsoXCIvZGV2L3R0eVwiLFwiL2Rldi9zdGRvdXRcIil9aWYoTW9kdWxlW1wic3RkZXJyXCJdKXtGUy5jcmVhdGVEZXZpY2UoXCIvZGV2XCIsXCJzdGRlcnJcIixudWxsLE1vZHVsZVtcInN0ZGVyclwiXSl9ZWxzZXtGUy5zeW1saW5rKFwiL2Rldi90dHkxXCIsXCIvZGV2L3N0ZGVyclwiKX12YXIgc3RkaW49RlMub3BlbihcIi9kZXYvc3RkaW5cIiwwKTt2YXIgc3Rkb3V0PUZTLm9wZW4oXCIvZGV2L3N0ZG91dFwiLDEpO3ZhciBzdGRlcnI9RlMub3BlbihcIi9kZXYvc3RkZXJyXCIsMSl9LGVuc3VyZUVycm5vRXJyb3I6ZnVuY3Rpb24oKXtpZihGUy5FcnJub0Vycm9yKXJldHVybjtGUy5FcnJub0Vycm9yPWZ1bmN0aW9uIEVycm5vRXJyb3IoZXJybm8sbm9kZSl7dGhpcy5ub2RlPW5vZGU7dGhpcy5zZXRFcnJubz1mdW5jdGlvbihlcnJubyl7dGhpcy5lcnJubz1lcnJub307dGhpcy5zZXRFcnJubyhlcnJubyk7dGhpcy5tZXNzYWdlPVwiRlMgZXJyb3JcIn07RlMuRXJybm9FcnJvci5wcm90b3R5cGU9bmV3IEVycm9yO0ZTLkVycm5vRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPUZTLkVycm5vRXJyb3I7WzQ0XS5mb3JFYWNoKGZ1bmN0aW9uKGNvZGUpe0ZTLmdlbmVyaWNFcnJvcnNbY29kZV09bmV3IEZTLkVycm5vRXJyb3IoY29kZSk7RlMuZ2VuZXJpY0Vycm9yc1tjb2RlXS5zdGFjaz1cIjxnZW5lcmljIGVycm9yLCBubyBzdGFjaz5cIn0pfSxzdGF0aWNJbml0OmZ1bmN0aW9uKCl7RlMuZW5zdXJlRXJybm9FcnJvcigpO0ZTLm5hbWVUYWJsZT1uZXcgQXJyYXkoNDA5Nik7RlMubW91bnQoTUVNRlMse30sXCIvXCIpO0ZTLmNyZWF0ZURlZmF1bHREaXJlY3RvcmllcygpO0ZTLmNyZWF0ZURlZmF1bHREZXZpY2VzKCk7RlMuY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzKCk7RlMuZmlsZXN5c3RlbXM9e1wiTUVNRlNcIjpNRU1GU319LGluaXQ6ZnVuY3Rpb24oaW5wdXQsb3V0cHV0LGVycm9yKXtGUy5pbml0LmluaXRpYWxpemVkPXRydWU7RlMuZW5zdXJlRXJybm9FcnJvcigpO01vZHVsZVtcInN0ZGluXCJdPWlucHV0fHxNb2R1bGVbXCJzdGRpblwiXTtNb2R1bGVbXCJzdGRvdXRcIl09b3V0cHV0fHxNb2R1bGVbXCJzdGRvdXRcIl07TW9kdWxlW1wic3RkZXJyXCJdPWVycm9yfHxNb2R1bGVbXCJzdGRlcnJcIl07RlMuY3JlYXRlU3RhbmRhcmRTdHJlYW1zKCl9LHF1aXQ6ZnVuY3Rpb24oKXtGUy5pbml0LmluaXRpYWxpemVkPWZhbHNlO3ZhciBmZmx1c2g9TW9kdWxlW1wiX2ZmbHVzaFwiXTtpZihmZmx1c2gpZmZsdXNoKDApO2Zvcih2YXIgaT0wO2k8RlMuc3RyZWFtcy5sZW5ndGg7aSsrKXt2YXIgc3RyZWFtPUZTLnN0cmVhbXNbaV07aWYoIXN0cmVhbSl7Y29udGludWV9RlMuY2xvc2Uoc3RyZWFtKX19LGdldE1vZGU6ZnVuY3Rpb24oY2FuUmVhZCxjYW5Xcml0ZSl7dmFyIG1vZGU9MDtpZihjYW5SZWFkKW1vZGV8PTI5Mnw3MztpZihjYW5Xcml0ZSltb2RlfD0xNDY7cmV0dXJuIG1vZGV9LGZpbmRPYmplY3Q6ZnVuY3Rpb24ocGF0aCxkb250UmVzb2x2ZUxhc3RMaW5rKXt2YXIgcmV0PUZTLmFuYWx5emVQYXRoKHBhdGgsZG9udFJlc29sdmVMYXN0TGluayk7aWYocmV0LmV4aXN0cyl7cmV0dXJuIHJldC5vYmplY3R9ZWxzZXtyZXR1cm4gbnVsbH19LGFuYWx5emVQYXRoOmZ1bmN0aW9uKHBhdGgsZG9udFJlc29sdmVMYXN0TGluayl7dHJ5e3ZhciBsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRSZXNvbHZlTGFzdExpbmt9KTtwYXRoPWxvb2t1cC5wYXRofWNhdGNoKGUpe312YXIgcmV0PXtpc1Jvb3Q6ZmFsc2UsZXhpc3RzOmZhbHNlLGVycm9yOjAsbmFtZTpudWxsLHBhdGg6bnVsbCxvYmplY3Q6bnVsbCxwYXJlbnRFeGlzdHM6ZmFsc2UscGFyZW50UGF0aDpudWxsLHBhcmVudE9iamVjdDpudWxsfTt0cnl7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse3BhcmVudDp0cnVlfSk7cmV0LnBhcmVudEV4aXN0cz10cnVlO3JldC5wYXJlbnRQYXRoPWxvb2t1cC5wYXRoO3JldC5wYXJlbnRPYmplY3Q9bG9va3VwLm5vZGU7cmV0Lm5hbWU9UEFUSC5iYXNlbmFtZShwYXRoKTtsb29rdXA9RlMubG9va3VwUGF0aChwYXRoLHtmb2xsb3c6IWRvbnRSZXNvbHZlTGFzdExpbmt9KTtyZXQuZXhpc3RzPXRydWU7cmV0LnBhdGg9bG9va3VwLnBhdGg7cmV0Lm9iamVjdD1sb29rdXAubm9kZTtyZXQubmFtZT1sb29rdXAubm9kZS5uYW1lO3JldC5pc1Jvb3Q9bG9va3VwLnBhdGg9PT1cIi9cIn1jYXRjaChlKXtyZXQuZXJyb3I9ZS5lcnJub31yZXR1cm4gcmV0fSxjcmVhdGVQYXRoOmZ1bmN0aW9uKHBhcmVudCxwYXRoLGNhblJlYWQsY2FuV3JpdGUpe3BhcmVudD10eXBlb2YgcGFyZW50PT09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpO3ZhciBwYXJ0cz1wYXRoLnNwbGl0KFwiL1wiKS5yZXZlcnNlKCk7d2hpbGUocGFydHMubGVuZ3RoKXt2YXIgcGFydD1wYXJ0cy5wb3AoKTtpZighcGFydCljb250aW51ZTt2YXIgY3VycmVudD1QQVRILmpvaW4yKHBhcmVudCxwYXJ0KTt0cnl7RlMubWtkaXIoY3VycmVudCl9Y2F0Y2goZSl7fXBhcmVudD1jdXJyZW50fXJldHVybiBjdXJyZW50fSxjcmVhdGVGaWxlOmZ1bmN0aW9uKHBhcmVudCxuYW1lLHByb3BlcnRpZXMsY2FuUmVhZCxjYW5Xcml0ZSl7dmFyIHBhdGg9UEFUSC5qb2luMih0eXBlb2YgcGFyZW50PT09XCJzdHJpbmdcIj9wYXJlbnQ6RlMuZ2V0UGF0aChwYXJlbnQpLG5hbWUpO3ZhciBtb2RlPUZTLmdldE1vZGUoY2FuUmVhZCxjYW5Xcml0ZSk7cmV0dXJuIEZTLmNyZWF0ZShwYXRoLG1vZGUpfSxjcmVhdGVEYXRhRmlsZTpmdW5jdGlvbihwYXJlbnQsbmFtZSxkYXRhLGNhblJlYWQsY2FuV3JpdGUsY2FuT3duKXt2YXIgcGF0aD1uYW1lP1BBVEguam9pbjIodHlwZW9mIHBhcmVudD09PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTpwYXJlbnQ7dmFyIG1vZGU9RlMuZ2V0TW9kZShjYW5SZWFkLGNhbldyaXRlKTt2YXIgbm9kZT1GUy5jcmVhdGUocGF0aCxtb2RlKTtpZihkYXRhKXtpZih0eXBlb2YgZGF0YT09PVwic3RyaW5nXCIpe3ZhciBhcnI9bmV3IEFycmF5KGRhdGEubGVuZ3RoKTtmb3IodmFyIGk9MCxsZW49ZGF0YS5sZW5ndGg7aTxsZW47KytpKWFycltpXT1kYXRhLmNoYXJDb2RlQXQoaSk7ZGF0YT1hcnJ9RlMuY2htb2Qobm9kZSxtb2RlfDE0Nik7dmFyIHN0cmVhbT1GUy5vcGVuKG5vZGUsNTc3KTtGUy53cml0ZShzdHJlYW0sZGF0YSwwLGRhdGEubGVuZ3RoLDAsY2FuT3duKTtGUy5jbG9zZShzdHJlYW0pO0ZTLmNobW9kKG5vZGUsbW9kZSl9cmV0dXJuIG5vZGV9LGNyZWF0ZURldmljZTpmdW5jdGlvbihwYXJlbnQsbmFtZSxpbnB1dCxvdXRwdXQpe3ZhciBwYXRoPVBBVEguam9pbjIodHlwZW9mIHBhcmVudD09PVwic3RyaW5nXCI/cGFyZW50OkZTLmdldFBhdGgocGFyZW50KSxuYW1lKTt2YXIgbW9kZT1GUy5nZXRNb2RlKCEhaW5wdXQsISFvdXRwdXQpO2lmKCFGUy5jcmVhdGVEZXZpY2UubWFqb3IpRlMuY3JlYXRlRGV2aWNlLm1ham9yPTY0O3ZhciBkZXY9RlMubWFrZWRldihGUy5jcmVhdGVEZXZpY2UubWFqb3IrKywwKTtGUy5yZWdpc3RlckRldmljZShkZXYse29wZW46ZnVuY3Rpb24oc3RyZWFtKXtzdHJlYW0uc2Vla2FibGU9ZmFsc2V9LGNsb3NlOmZ1bmN0aW9uKHN0cmVhbSl7aWYob3V0cHV0JiZvdXRwdXQuYnVmZmVyJiZvdXRwdXQuYnVmZmVyLmxlbmd0aCl7b3V0cHV0KDEwKX19LHJlYWQ6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7dmFyIGJ5dGVzUmVhZD0wO2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krKyl7dmFyIHJlc3VsdDt0cnl7cmVzdWx0PWlucHV0KCl9Y2F0Y2goZSl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoMjkpfWlmKHJlc3VsdD09PXVuZGVmaW5lZCYmYnl0ZXNSZWFkPT09MCl7dGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoNil9aWYocmVzdWx0PT09bnVsbHx8cmVzdWx0PT09dW5kZWZpbmVkKWJyZWFrO2J5dGVzUmVhZCsrO2J1ZmZlcltvZmZzZXQraV09cmVzdWx0fWlmKGJ5dGVzUmVhZCl7c3RyZWFtLm5vZGUudGltZXN0YW1wPURhdGUubm93KCl9cmV0dXJuIGJ5dGVzUmVhZH0sd3JpdGU6ZnVuY3Rpb24oc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvcyl7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXt0cnl7b3V0cHV0KGJ1ZmZlcltvZmZzZXQraV0pfWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX19aWYobGVuZ3RoKXtzdHJlYW0ubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKX1yZXR1cm4gaX19KTtyZXR1cm4gRlMubWtkZXYocGF0aCxtb2RlLGRldil9LGZvcmNlTG9hZEZpbGU6ZnVuY3Rpb24ob2JqKXtpZihvYmouaXNEZXZpY2V8fG9iai5pc0ZvbGRlcnx8b2JqLmxpbmt8fG9iai5jb250ZW50cylyZXR1cm4gdHJ1ZTtpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QhPT1cInVuZGVmaW5lZFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJMYXp5IGxvYWRpbmcgc2hvdWxkIGhhdmUgYmVlbiBwZXJmb3JtZWQgKGNvbnRlbnRzIHNldCkgaW4gY3JlYXRlTGF6eUZpbGUsIGJ1dCBpdCB3YXMgbm90LiBMYXp5IGxvYWRpbmcgb25seSB3b3JrcyBpbiB3ZWIgd29ya2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjIG9uIHRoZSBtYWluIHRocmVhZC5cIil9ZWxzZSBpZihyZWFkXyl7dHJ5e29iai5jb250ZW50cz1pbnRBcnJheUZyb21TdHJpbmcocmVhZF8ob2JqLnVybCksdHJ1ZSk7b2JqLnVzZWRCeXRlcz1vYmouY29udGVudHMubGVuZ3RofWNhdGNoKGUpe3Rocm93IG5ldyBGUy5FcnJub0Vycm9yKDI5KX19ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCB3aXRob3V0IHJlYWQoKSBvciBYTUxIdHRwUmVxdWVzdC5cIil9fSxjcmVhdGVMYXp5RmlsZTpmdW5jdGlvbihwYXJlbnQsbmFtZSx1cmwsY2FuUmVhZCxjYW5Xcml0ZSl7ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXkoKXt0aGlzLmxlbmd0aEtub3duPWZhbHNlO3RoaXMuY2h1bmtzPVtdfUxhenlVaW50OEFycmF5LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfZ2V0KGlkeCl7aWYoaWR4PnRoaXMubGVuZ3RoLTF8fGlkeDwwKXtyZXR1cm4gdW5kZWZpbmVkfXZhciBjaHVua09mZnNldD1pZHgldGhpcy5jaHVua1NpemU7dmFyIGNodW5rTnVtPWlkeC90aGlzLmNodW5rU2l6ZXwwO3JldHVybiB0aGlzLmdldHRlcihjaHVua051bSlbY2h1bmtPZmZzZXRdfTtMYXp5VWludDhBcnJheS5wcm90b3R5cGUuc2V0RGF0YUdldHRlcj1mdW5jdGlvbiBMYXp5VWludDhBcnJheV9zZXREYXRhR2V0dGVyKGdldHRlcil7dGhpcy5nZXR0ZXI9Z2V0dGVyfTtMYXp5VWludDhBcnJheS5wcm90b3R5cGUuY2FjaGVMZW5ndGg9ZnVuY3Rpb24gTGF6eVVpbnQ4QXJyYXlfY2FjaGVMZW5ndGgoKXt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkhFQURcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO2lmKCEoeGhyLnN0YXR1cz49MjAwJiZ4aHIuc3RhdHVzPDMwMHx8eGhyLnN0YXR1cz09PTMwNCkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgbG9hZCBcIit1cmwrXCIuIFN0YXR1czogXCIreGhyLnN0YXR1cyk7dmFyIGRhdGFsZW5ndGg9TnVtYmVyKHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtbGVuZ3RoXCIpKTt2YXIgaGVhZGVyO3ZhciBoYXNCeXRlU2VydmluZz0oaGVhZGVyPXhoci5nZXRSZXNwb25zZUhlYWRlcihcIkFjY2VwdC1SYW5nZXNcIikpJiZoZWFkZXI9PT1cImJ5dGVzXCI7dmFyIHVzZXNHemlwPShoZWFkZXI9eGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSkmJmhlYWRlcj09PVwiZ3ppcFwiO3ZhciBjaHVua1NpemU9MTAyNCoxMDI0O2lmKCFoYXNCeXRlU2VydmluZyljaHVua1NpemU9ZGF0YWxlbmd0aDt2YXIgZG9YSFI9ZnVuY3Rpb24oZnJvbSx0byl7aWYoZnJvbT50byl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJhbmdlIChcIitmcm9tK1wiLCBcIit0bytcIikgb3Igbm8gYnl0ZXMgcmVxdWVzdGVkIVwiKTtpZih0bz5kYXRhbGVuZ3RoLTEpdGhyb3cgbmV3IEVycm9yKFwib25seSBcIitkYXRhbGVuZ3RoK1wiIGJ5dGVzIGF2YWlsYWJsZSEgcHJvZ3JhbW1lciBlcnJvciFcIik7dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO2lmKGRhdGFsZW5ndGghPT1jaHVua1NpemUpeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrZnJvbStcIi1cIit0byk7aWYodHlwZW9mIFVpbnQ4QXJyYXkhPVwidW5kZWZpbmVkXCIpeGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7aWYoeGhyLm92ZXJyaWRlTWltZVR5cGUpe3hoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKX14aHIuc2VuZChudWxsKTtpZighKHhoci5zdGF0dXM+PTIwMCYmeGhyLnN0YXR1czwzMDB8fHhoci5zdGF0dXM9PT0zMDQpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGxvYWQgXCIrdXJsK1wiLiBTdGF0dXM6IFwiK3hoci5zdGF0dXMpO2lmKHhoci5yZXNwb25zZSE9PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZXx8W10pfWVsc2V7cmV0dXJuIGludEFycmF5RnJvbVN0cmluZyh4aHIucmVzcG9uc2VUZXh0fHxcIlwiLHRydWUpfX07dmFyIGxhenlBcnJheT10aGlzO2xhenlBcnJheS5zZXREYXRhR2V0dGVyKGZ1bmN0aW9uKGNodW5rTnVtKXt2YXIgc3RhcnQ9Y2h1bmtOdW0qY2h1bmtTaXplO3ZhciBlbmQ9KGNodW5rTnVtKzEpKmNodW5rU2l6ZS0xO2VuZD1NYXRoLm1pbihlbmQsZGF0YWxlbmd0aC0xKTtpZih0eXBlb2YgbGF6eUFycmF5LmNodW5rc1tjaHVua051bV09PT1cInVuZGVmaW5lZFwiKXtsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT1kb1hIUihzdGFydCxlbmQpfWlmKHR5cGVvZiBsYXp5QXJyYXkuY2h1bmtzW2NodW5rTnVtXT09PVwidW5kZWZpbmVkXCIpdGhyb3cgbmV3IEVycm9yKFwiZG9YSFIgZmFpbGVkIVwiKTtyZXR1cm4gbGF6eUFycmF5LmNodW5rc1tjaHVua051bV19KTtpZih1c2VzR3ppcHx8IWRhdGFsZW5ndGgpe2NodW5rU2l6ZT1kYXRhbGVuZ3RoPTE7ZGF0YWxlbmd0aD10aGlzLmdldHRlcigwKS5sZW5ndGg7Y2h1bmtTaXplPWRhdGFsZW5ndGg7b3V0KFwiTGF6eUZpbGVzIG9uIGd6aXAgZm9yY2VzIGRvd25sb2FkIG9mIHRoZSB3aG9sZSBmaWxlIHdoZW4gbGVuZ3RoIGlzIGFjY2Vzc2VkXCIpfXRoaXMuX2xlbmd0aD1kYXRhbGVuZ3RoO3RoaXMuX2NodW5rU2l6ZT1jaHVua1NpemU7dGhpcy5sZW5ndGhLbm93bj10cnVlfTtpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QhPT1cInVuZGVmaW5lZFwiKXtpZighRU5WSVJPTk1FTlRfSVNfV09SS0VSKXRocm93XCJDYW5ub3QgZG8gc3luY2hyb25vdXMgYmluYXJ5IFhIUnMgb3V0c2lkZSB3ZWJ3b3JrZXJzIGluIG1vZGVybiBicm93c2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjXCI7dmFyIGxhenlBcnJheT1uZXcgTGF6eVVpbnQ4QXJyYXk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMobGF6eUFycmF5LHtsZW5ndGg6e2dldDpmdW5jdGlvbigpe2lmKCF0aGlzLmxlbmd0aEtub3duKXt0aGlzLmNhY2hlTGVuZ3RoKCl9cmV0dXJuIHRoaXMuX2xlbmd0aH19LGNodW5rU2l6ZTp7Z2V0OmZ1bmN0aW9uKCl7aWYoIXRoaXMubGVuZ3RoS25vd24pe3RoaXMuY2FjaGVMZW5ndGgoKX1yZXR1cm4gdGhpcy5fY2h1bmtTaXplfX19KTt2YXIgcHJvcGVydGllcz17aXNEZXZpY2U6ZmFsc2UsY29udGVudHM6bGF6eUFycmF5fX1lbHNle3ZhciBwcm9wZXJ0aWVzPXtpc0RldmljZTpmYWxzZSx1cmw6dXJsfX12YXIgbm9kZT1GUy5jcmVhdGVGaWxlKHBhcmVudCxuYW1lLHByb3BlcnRpZXMsY2FuUmVhZCxjYW5Xcml0ZSk7aWYocHJvcGVydGllcy5jb250ZW50cyl7bm9kZS5jb250ZW50cz1wcm9wZXJ0aWVzLmNvbnRlbnRzfWVsc2UgaWYocHJvcGVydGllcy51cmwpe25vZGUuY29udGVudHM9bnVsbDtub2RlLnVybD1wcm9wZXJ0aWVzLnVybH1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhub2RlLHt1c2VkQnl0ZXM6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRlbnRzLmxlbmd0aH19fSk7dmFyIHN0cmVhbV9vcHM9e307dmFyIGtleXM9T2JqZWN0LmtleXMobm9kZS5zdHJlYW1fb3BzKTtrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KXt2YXIgZm49bm9kZS5zdHJlYW1fb3BzW2tleV07c3RyZWFtX29wc1trZXldPWZ1bmN0aW9uIGZvcmNlTG9hZExhenlGaWxlKCl7RlMuZm9yY2VMb2FkRmlsZShub2RlKTtyZXR1cm4gZm4uYXBwbHkobnVsbCxhcmd1bWVudHMpfX0pO3N0cmVhbV9vcHMucmVhZD1mdW5jdGlvbiBzdHJlYW1fb3BzX3JlYWQoc3RyZWFtLGJ1ZmZlcixvZmZzZXQsbGVuZ3RoLHBvc2l0aW9uKXtGUy5mb3JjZUxvYWRGaWxlKG5vZGUpO3ZhciBjb250ZW50cz1zdHJlYW0ubm9kZS5jb250ZW50cztpZihwb3NpdGlvbj49Y29udGVudHMubGVuZ3RoKXJldHVybiAwO3ZhciBzaXplPU1hdGgubWluKGNvbnRlbnRzLmxlbmd0aC1wb3NpdGlvbixsZW5ndGgpO2lmKGNvbnRlbnRzLnNsaWNlKXtmb3IodmFyIGk9MDtpPHNpemU7aSsrKXtidWZmZXJbb2Zmc2V0K2ldPWNvbnRlbnRzW3Bvc2l0aW9uK2ldfX1lbHNle2Zvcih2YXIgaT0wO2k8c2l6ZTtpKyspe2J1ZmZlcltvZmZzZXQraV09Y29udGVudHMuZ2V0KHBvc2l0aW9uK2kpfX1yZXR1cm4gc2l6ZX07bm9kZS5zdHJlYW1fb3BzPXN0cmVhbV9vcHM7cmV0dXJuIG5vZGV9LGNyZWF0ZVByZWxvYWRlZEZpbGU6ZnVuY3Rpb24ocGFyZW50LG5hbWUsdXJsLGNhblJlYWQsY2FuV3JpdGUsb25sb2FkLG9uZXJyb3IsZG9udENyZWF0ZUZpbGUsY2FuT3duLHByZUZpbmlzaCl7QnJvd3Nlci5pbml0KCk7dmFyIGZ1bGxuYW1lPW5hbWU/UEFUSF9GUy5yZXNvbHZlKFBBVEguam9pbjIocGFyZW50LG5hbWUpKTpwYXJlbnQ7dmFyIGRlcD1nZXRVbmlxdWVSdW5EZXBlbmRlbmN5KFwiY3AgXCIrZnVsbG5hbWUpO2Z1bmN0aW9uIHByb2Nlc3NEYXRhKGJ5dGVBcnJheSl7ZnVuY3Rpb24gZmluaXNoKGJ5dGVBcnJheSl7aWYocHJlRmluaXNoKXByZUZpbmlzaCgpO2lmKCFkb250Q3JlYXRlRmlsZSl7RlMuY3JlYXRlRGF0YUZpbGUocGFyZW50LG5hbWUsYnl0ZUFycmF5LGNhblJlYWQsY2FuV3JpdGUsY2FuT3duKX1pZihvbmxvYWQpb25sb2FkKCk7cmVtb3ZlUnVuRGVwZW5kZW5jeShkZXApfXZhciBoYW5kbGVkPWZhbHNlO01vZHVsZVtcInByZWxvYWRQbHVnaW5zXCJdLmZvckVhY2goZnVuY3Rpb24ocGx1Z2luKXtpZihoYW5kbGVkKXJldHVybjtpZihwbHVnaW5bXCJjYW5IYW5kbGVcIl0oZnVsbG5hbWUpKXtwbHVnaW5bXCJoYW5kbGVcIl0oYnl0ZUFycmF5LGZ1bGxuYW1lLGZpbmlzaCxmdW5jdGlvbigpe2lmKG9uZXJyb3Ipb25lcnJvcigpO3JlbW92ZVJ1bkRlcGVuZGVuY3koZGVwKX0pO2hhbmRsZWQ9dHJ1ZX19KTtpZighaGFuZGxlZClmaW5pc2goYnl0ZUFycmF5KX1hZGRSdW5EZXBlbmRlbmN5KGRlcCk7aWYodHlwZW9mIHVybD09XCJzdHJpbmdcIil7QnJvd3Nlci5hc3luY0xvYWQodXJsLGZ1bmN0aW9uKGJ5dGVBcnJheSl7cHJvY2Vzc0RhdGEoYnl0ZUFycmF5KX0sb25lcnJvcil9ZWxzZXtwcm9jZXNzRGF0YSh1cmwpfX0saW5kZXhlZERCOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5pbmRleGVkREJ8fHdpbmRvdy5tb3pJbmRleGVkREJ8fHdpbmRvdy53ZWJraXRJbmRleGVkREJ8fHdpbmRvdy5tc0luZGV4ZWREQn0sREJfTkFNRTpmdW5jdGlvbigpe3JldHVyblwiRU1fRlNfXCIrd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSxEQl9WRVJTSU9OOjIwLERCX1NUT1JFX05BTUU6XCJGSUxFX0RBVEFcIixzYXZlRmlsZXNUb0RCOmZ1bmN0aW9uKHBhdGhzLG9ubG9hZCxvbmVycm9yKXtvbmxvYWQ9b25sb2FkfHxmdW5jdGlvbigpe307b25lcnJvcj1vbmVycm9yfHxmdW5jdGlvbigpe307dmFyIGluZGV4ZWREQj1GUy5pbmRleGVkREIoKTt0cnl7dmFyIG9wZW5SZXF1ZXN0PWluZGV4ZWREQi5vcGVuKEZTLkRCX05BTUUoKSxGUy5EQl9WRVJTSU9OKX1jYXRjaChlKXtyZXR1cm4gb25lcnJvcihlKX1vcGVuUmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24gb3BlblJlcXVlc3Rfb251cGdyYWRlbmVlZGVkKCl7b3V0KFwiY3JlYXRpbmcgZGJcIik7dmFyIGRiPW9wZW5SZXF1ZXN0LnJlc3VsdDtkYi5jcmVhdGVPYmplY3RTdG9yZShGUy5EQl9TVE9SRV9OQU1FKX07b3BlblJlcXVlc3Qub25zdWNjZXNzPWZ1bmN0aW9uIG9wZW5SZXF1ZXN0X29uc3VjY2Vzcygpe3ZhciBkYj1vcGVuUmVxdWVzdC5yZXN1bHQ7dmFyIHRyYW5zYWN0aW9uPWRiLnRyYW5zYWN0aW9uKFtGUy5EQl9TVE9SRV9OQU1FXSxcInJlYWR3cml0ZVwiKTt2YXIgZmlsZXM9dHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoRlMuREJfU1RPUkVfTkFNRSk7dmFyIG9rPTAsZmFpbD0wLHRvdGFsPXBhdGhzLmxlbmd0aDtmdW5jdGlvbiBmaW5pc2goKXtpZihmYWlsPT0wKW9ubG9hZCgpO2Vsc2Ugb25lcnJvcigpfXBhdGhzLmZvckVhY2goZnVuY3Rpb24ocGF0aCl7dmFyIHB1dFJlcXVlc3Q9ZmlsZXMucHV0KEZTLmFuYWx5emVQYXRoKHBhdGgpLm9iamVjdC5jb250ZW50cyxwYXRoKTtwdXRSZXF1ZXN0Lm9uc3VjY2Vzcz1mdW5jdGlvbiBwdXRSZXF1ZXN0X29uc3VjY2Vzcygpe29rKys7aWYob2srZmFpbD09dG90YWwpZmluaXNoKCl9O3B1dFJlcXVlc3Qub25lcnJvcj1mdW5jdGlvbiBwdXRSZXF1ZXN0X29uZXJyb3IoKXtmYWlsKys7aWYob2srZmFpbD09dG90YWwpZmluaXNoKCl9fSk7dHJhbnNhY3Rpb24ub25lcnJvcj1vbmVycm9yfTtvcGVuUmVxdWVzdC5vbmVycm9yPW9uZXJyb3J9LGxvYWRGaWxlc0Zyb21EQjpmdW5jdGlvbihwYXRocyxvbmxvYWQsb25lcnJvcil7b25sb2FkPW9ubG9hZHx8ZnVuY3Rpb24oKXt9O29uZXJyb3I9b25lcnJvcnx8ZnVuY3Rpb24oKXt9O3ZhciBpbmRleGVkREI9RlMuaW5kZXhlZERCKCk7dHJ5e3ZhciBvcGVuUmVxdWVzdD1pbmRleGVkREIub3BlbihGUy5EQl9OQU1FKCksRlMuREJfVkVSU0lPTil9Y2F0Y2goZSl7cmV0dXJuIG9uZXJyb3IoZSl9b3BlblJlcXVlc3Qub251cGdyYWRlbmVlZGVkPW9uZXJyb3I7b3BlblJlcXVlc3Qub25zdWNjZXNzPWZ1bmN0aW9uIG9wZW5SZXF1ZXN0X29uc3VjY2Vzcygpe3ZhciBkYj1vcGVuUmVxdWVzdC5yZXN1bHQ7dHJ5e3ZhciB0cmFuc2FjdGlvbj1kYi50cmFuc2FjdGlvbihbRlMuREJfU1RPUkVfTkFNRV0sXCJyZWFkb25seVwiKX1jYXRjaChlKXtvbmVycm9yKGUpO3JldHVybn12YXIgZmlsZXM9dHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoRlMuREJfU1RPUkVfTkFNRSk7dmFyIG9rPTAsZmFpbD0wLHRvdGFsPXBhdGhzLmxlbmd0aDtmdW5jdGlvbiBmaW5pc2goKXtpZihmYWlsPT0wKW9ubG9hZCgpO2Vsc2Ugb25lcnJvcigpfXBhdGhzLmZvckVhY2goZnVuY3Rpb24ocGF0aCl7dmFyIGdldFJlcXVlc3Q9ZmlsZXMuZ2V0KHBhdGgpO2dldFJlcXVlc3Qub25zdWNjZXNzPWZ1bmN0aW9uIGdldFJlcXVlc3Rfb25zdWNjZXNzKCl7aWYoRlMuYW5hbHl6ZVBhdGgocGF0aCkuZXhpc3RzKXtGUy51bmxpbmsocGF0aCl9RlMuY3JlYXRlRGF0YUZpbGUoUEFUSC5kaXJuYW1lKHBhdGgpLFBBVEguYmFzZW5hbWUocGF0aCksZ2V0UmVxdWVzdC5yZXN1bHQsdHJ1ZSx0cnVlLHRydWUpO29rKys7aWYob2srZmFpbD09dG90YWwpZmluaXNoKCl9O2dldFJlcXVlc3Qub25lcnJvcj1mdW5jdGlvbiBnZXRSZXF1ZXN0X29uZXJyb3IoKXtmYWlsKys7aWYob2srZmFpbD09dG90YWwpZmluaXNoKCl9fSk7dHJhbnNhY3Rpb24ub25lcnJvcj1vbmVycm9yfTtvcGVuUmVxdWVzdC5vbmVycm9yPW9uZXJyb3J9fTt2YXIgU1lTQ0FMTFM9e21hcHBpbmdzOnt9LERFRkFVTFRfUE9MTE1BU0s6NSx1bWFzazo1MTEsY2FsY3VsYXRlQXQ6ZnVuY3Rpb24oZGlyZmQscGF0aCxhbGxvd0VtcHR5KXtpZihwYXRoWzBdPT09XCIvXCIpe3JldHVybiBwYXRofXZhciBkaXI7aWYoZGlyZmQ9PT0tMTAwKXtkaXI9RlMuY3dkKCl9ZWxzZXt2YXIgZGlyc3RyZWFtPUZTLmdldFN0cmVhbShkaXJmZCk7aWYoIWRpcnN0cmVhbSl0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KTtkaXI9ZGlyc3RyZWFtLnBhdGh9aWYocGF0aC5sZW5ndGg9PTApe2lmKCFhbGxvd0VtcHR5KXt0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig0NCl9cmV0dXJuIGRpcn1yZXR1cm4gUEFUSC5qb2luMihkaXIscGF0aCl9LGRvU3RhdDpmdW5jdGlvbihmdW5jLHBhdGgsYnVmKXt0cnl7dmFyIHN0YXQ9ZnVuYyhwYXRoKX1jYXRjaChlKXtpZihlJiZlLm5vZGUmJlBBVEgubm9ybWFsaXplKHBhdGgpIT09UEFUSC5ub3JtYWxpemUoRlMuZ2V0UGF0aChlLm5vZGUpKSl7cmV0dXJuLTU0fXRocm93IGV9SEVBUDMyW2J1Zj4+Ml09c3RhdC5kZXY7SEVBUDMyW2J1Zis0Pj4yXT0wO0hFQVAzMltidWYrOD4+Ml09c3RhdC5pbm87SEVBUDMyW2J1ZisxMj4+Ml09c3RhdC5tb2RlO0hFQVAzMltidWYrMTY+PjJdPXN0YXQubmxpbms7SEVBUDMyW2J1ZisyMD4+Ml09c3RhdC51aWQ7SEVBUDMyW2J1ZisyND4+Ml09c3RhdC5naWQ7SEVBUDMyW2J1ZisyOD4+Ml09c3RhdC5yZGV2O0hFQVAzMltidWYrMzI+PjJdPTA7dGVtcEk2ND1bc3RhdC5zaXplPj4+MCwodGVtcERvdWJsZT1zdGF0LnNpemUsK01hdGguYWJzKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8oTWF0aC5taW4oK01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KSw0Mjk0OTY3Mjk1KXwwKT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW2J1Zis0MD4+Ml09dGVtcEk2NFswXSxIRUFQMzJbYnVmKzQ0Pj4yXT10ZW1wSTY0WzFdO0hFQVAzMltidWYrNDg+PjJdPTQwOTY7SEVBUDMyW2J1Zis1Mj4+Ml09c3RhdC5ibG9ja3M7SEVBUDMyW2J1Zis1Nj4+Ml09c3RhdC5hdGltZS5nZXRUaW1lKCkvMWUzfDA7SEVBUDMyW2J1Zis2MD4+Ml09MDtIRUFQMzJbYnVmKzY0Pj4yXT1zdGF0Lm10aW1lLmdldFRpbWUoKS8xZTN8MDtIRUFQMzJbYnVmKzY4Pj4yXT0wO0hFQVAzMltidWYrNzI+PjJdPXN0YXQuY3RpbWUuZ2V0VGltZSgpLzFlM3wwO0hFQVAzMltidWYrNzY+PjJdPTA7dGVtcEk2ND1bc3RhdC5pbm8+Pj4wLCh0ZW1wRG91YmxlPXN0YXQuaW5vLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/KE1hdGgubWluKCtNYXRoLmZsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5NiksNDI5NDk2NzI5NSl8MCk+Pj4wOn5+K01hdGguY2VpbCgodGVtcERvdWJsZS0rKH5+dGVtcERvdWJsZT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEhFQVAzMltidWYrODA+PjJdPXRlbXBJNjRbMF0sSEVBUDMyW2J1Zis4ND4+Ml09dGVtcEk2NFsxXTtyZXR1cm4gMH0sZG9Nc3luYzpmdW5jdGlvbihhZGRyLHN0cmVhbSxsZW4sZmxhZ3Msb2Zmc2V0KXt2YXIgYnVmZmVyPUhFQVBVOC5zbGljZShhZGRyLGFkZHIrbGVuKTtGUy5tc3luYyhzdHJlYW0sYnVmZmVyLG9mZnNldCxsZW4sZmxhZ3MpfSxkb01rZGlyOmZ1bmN0aW9uKHBhdGgsbW9kZSl7cGF0aD1QQVRILm5vcm1hbGl6ZShwYXRoKTtpZihwYXRoW3BhdGgubGVuZ3RoLTFdPT09XCIvXCIpcGF0aD1wYXRoLnN1YnN0cigwLHBhdGgubGVuZ3RoLTEpO0ZTLm1rZGlyKHBhdGgsbW9kZSwwKTtyZXR1cm4gMH0sZG9Na25vZDpmdW5jdGlvbihwYXRoLG1vZGUsZGV2KXtzd2l0Y2gobW9kZSY2MTQ0MCl7Y2FzZSAzMjc2ODpjYXNlIDgxOTI6Y2FzZSAyNDU3NjpjYXNlIDQwOTY6Y2FzZSA0OTE1MjpicmVhaztkZWZhdWx0OnJldHVybi0yOH1GUy5ta25vZChwYXRoLG1vZGUsZGV2KTtyZXR1cm4gMH0sZG9SZWFkbGluazpmdW5jdGlvbihwYXRoLGJ1ZixidWZzaXplKXtpZihidWZzaXplPD0wKXJldHVybi0yODt2YXIgcmV0PUZTLnJlYWRsaW5rKHBhdGgpO3ZhciBsZW49TWF0aC5taW4oYnVmc2l6ZSxsZW5ndGhCeXRlc1VURjgocmV0KSk7dmFyIGVuZENoYXI9SEVBUDhbYnVmK2xlbl07c3RyaW5nVG9VVEY4KHJldCxidWYsYnVmc2l6ZSsxKTtIRUFQOFtidWYrbGVuXT1lbmRDaGFyO3JldHVybiBsZW59LGRvQWNjZXNzOmZ1bmN0aW9uKHBhdGgsYW1vZGUpe2lmKGFtb2RlJn43KXtyZXR1cm4tMjh9dmFyIG5vZGU7dmFyIGxvb2t1cD1GUy5sb29rdXBQYXRoKHBhdGgse2ZvbGxvdzp0cnVlfSk7bm9kZT1sb29rdXAubm9kZTtpZighbm9kZSl7cmV0dXJuLTQ0fXZhciBwZXJtcz1cIlwiO2lmKGFtb2RlJjQpcGVybXMrPVwiclwiO2lmKGFtb2RlJjIpcGVybXMrPVwid1wiO2lmKGFtb2RlJjEpcGVybXMrPVwieFwiO2lmKHBlcm1zJiZGUy5ub2RlUGVybWlzc2lvbnMobm9kZSxwZXJtcykpe3JldHVybi0yfXJldHVybiAwfSxkb0R1cDpmdW5jdGlvbihwYXRoLGZsYWdzLHN1Z2dlc3RGRCl7dmFyIHN1Z2dlc3Q9RlMuZ2V0U3RyZWFtKHN1Z2dlc3RGRCk7aWYoc3VnZ2VzdClGUy5jbG9zZShzdWdnZXN0KTtyZXR1cm4gRlMub3BlbihwYXRoLGZsYWdzLDAsc3VnZ2VzdEZELHN1Z2dlc3RGRCkuZmR9LGRvUmVhZHY6ZnVuY3Rpb24oc3RyZWFtLGlvdixpb3ZjbnQsb2Zmc2V0KXt2YXIgcmV0PTA7Zm9yKHZhciBpPTA7aTxpb3ZjbnQ7aSsrKXt2YXIgcHRyPUhFQVAzMltpb3YraSo4Pj4yXTt2YXIgbGVuPUhFQVAzMltpb3YrKGkqOCs0KT4+Ml07dmFyIGN1cnI9RlMucmVhZChzdHJlYW0sSEVBUDgscHRyLGxlbixvZmZzZXQpO2lmKGN1cnI8MClyZXR1cm4tMTtyZXQrPWN1cnI7aWYoY3VycjxsZW4pYnJlYWt9cmV0dXJuIHJldH0sZG9Xcml0ZXY6ZnVuY3Rpb24oc3RyZWFtLGlvdixpb3ZjbnQsb2Zmc2V0KXt2YXIgcmV0PTA7Zm9yKHZhciBpPTA7aTxpb3ZjbnQ7aSsrKXt2YXIgcHRyPUhFQVAzMltpb3YraSo4Pj4yXTt2YXIgbGVuPUhFQVAzMltpb3YrKGkqOCs0KT4+Ml07dmFyIGN1cnI9RlMud3JpdGUoc3RyZWFtLEhFQVA4LHB0cixsZW4sb2Zmc2V0KTtpZihjdXJyPDApcmV0dXJuLTE7cmV0Kz1jdXJyfXJldHVybiByZXR9LHZhcmFyZ3M6dW5kZWZpbmVkLGdldDpmdW5jdGlvbigpe1NZU0NBTExTLnZhcmFyZ3MrPTQ7dmFyIHJldD1IRUFQMzJbU1lTQ0FMTFMudmFyYXJncy00Pj4yXTtyZXR1cm4gcmV0fSxnZXRTdHI6ZnVuY3Rpb24ocHRyKXt2YXIgcmV0PVVURjhUb1N0cmluZyhwdHIpO3JldHVybiByZXR9LGdldFN0cmVhbUZyb21GRDpmdW5jdGlvbihmZCl7dmFyIHN0cmVhbT1GUy5nZXRTdHJlYW0oZmQpO2lmKCFzdHJlYW0pdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoOCk7cmV0dXJuIHN0cmVhbX0sZ2V0NjQ6ZnVuY3Rpb24obG93LGhpZ2gpe3JldHVybiBsb3d9fTtmdW5jdGlvbiBfX19zeXNfZmNudGw2NChmZCxjbWQsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7c3dpdGNoKGNtZCl7Y2FzZSAwOnt2YXIgYXJnPVNZU0NBTExTLmdldCgpO2lmKGFyZzwwKXtyZXR1cm4tMjh9dmFyIG5ld1N0cmVhbTtuZXdTdHJlYW09RlMub3BlbihzdHJlYW0ucGF0aCxzdHJlYW0uZmxhZ3MsMCxhcmcpO3JldHVybiBuZXdTdHJlYW0uZmR9Y2FzZSAxOmNhc2UgMjpyZXR1cm4gMDtjYXNlIDM6cmV0dXJuIHN0cmVhbS5mbGFncztjYXNlIDQ6e3ZhciBhcmc9U1lTQ0FMTFMuZ2V0KCk7c3RyZWFtLmZsYWdzfD1hcmc7cmV0dXJuIDB9Y2FzZSAxMjp7dmFyIGFyZz1TWVNDQUxMUy5nZXQoKTt2YXIgb2Zmc2V0PTA7SEVBUDE2W2FyZytvZmZzZXQ+PjFdPTI7cmV0dXJuIDB9Y2FzZSAxMzpjYXNlIDE0OnJldHVybiAwO2Nhc2UgMTY6Y2FzZSA4OnJldHVybi0yODtjYXNlIDk6c2V0RXJyTm8oMjgpO3JldHVybi0xO2RlZmF1bHQ6e3JldHVybi0yOH19fWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybi1lLmVycm5vfX1mdW5jdGlvbiBfX19zeXNfaW9jdGwoZmQsb3AsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3RyeXt2YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7c3dpdGNoKG9wKXtjYXNlIDIxNTA5OmNhc2UgMjE1MDU6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4gMH1jYXNlIDIxNTEwOmNhc2UgMjE1MTE6Y2FzZSAyMTUxMjpjYXNlIDIxNTA2OmNhc2UgMjE1MDc6Y2FzZSAyMTUwODp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybiAwfWNhc2UgMjE1MTk6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTt2YXIgYXJncD1TWVNDQUxMUy5nZXQoKTtIRUFQMzJbYXJncD4+Ml09MDtyZXR1cm4gMH1jYXNlIDIxNTIwOntpZighc3RyZWFtLnR0eSlyZXR1cm4tNTk7cmV0dXJuLTI4fWNhc2UgMjE1MzE6e3ZhciBhcmdwPVNZU0NBTExTLmdldCgpO3JldHVybiBGUy5pb2N0bChzdHJlYW0sb3AsYXJncCl9Y2FzZSAyMTUyMzp7aWYoIXN0cmVhbS50dHkpcmV0dXJuLTU5O3JldHVybiAwfWNhc2UgMjE1MjQ6e2lmKCFzdHJlYW0udHR5KXJldHVybi01OTtyZXR1cm4gMH1kZWZhdWx0OmFib3J0KFwiYmFkIGlvY3RsIHN5c2NhbGwgXCIrb3ApfX1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4tZS5lcnJub319ZnVuY3Rpb24gX19fc3lzX29wZW4ocGF0aCxmbGFncyx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7dHJ5e3ZhciBwYXRobmFtZT1TWVNDQUxMUy5nZXRTdHIocGF0aCk7dmFyIG1vZGU9dmFyYXJncz9TWVNDQUxMUy5nZXQoKTowO3ZhciBzdHJlYW09RlMub3BlbihwYXRobmFtZSxmbGFncyxtb2RlKTtyZXR1cm4gc3RyZWFtLmZkfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybi1lLmVycm5vfX12YXIgc3RydWN0UmVnaXN0cmF0aW9ucz17fTtmdW5jdGlvbiBydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyl7d2hpbGUoZGVzdHJ1Y3RvcnMubGVuZ3RoKXt2YXIgcHRyPWRlc3RydWN0b3JzLnBvcCgpO3ZhciBkZWw9ZGVzdHJ1Y3RvcnMucG9wKCk7ZGVsKHB0cil9fWZ1bmN0aW9uIHNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKEhFQVBVMzJbcG9pbnRlcj4+Ml0pfXZhciBhd2FpdGluZ0RlcGVuZGVuY2llcz17fTt2YXIgcmVnaXN0ZXJlZFR5cGVzPXt9O3ZhciB0eXBlRGVwZW5kZW5jaWVzPXt9O3ZhciBjaGFyXzA9NDg7dmFyIGNoYXJfOT01NztmdW5jdGlvbiBtYWtlTGVnYWxGdW5jdGlvbk5hbWUobmFtZSl7aWYodW5kZWZpbmVkPT09bmFtZSl7cmV0dXJuXCJfdW5rbm93blwifW5hbWU9bmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2csXCIkXCIpO3ZhciBmPW5hbWUuY2hhckNvZGVBdCgwKTtpZihmPj1jaGFyXzAmJmY8PWNoYXJfOSl7cmV0dXJuXCJfXCIrbmFtZX1lbHNle3JldHVybiBuYW1lfX1mdW5jdGlvbiBjcmVhdGVOYW1lZEZ1bmN0aW9uKG5hbWUsYm9keSl7bmFtZT1tYWtlTGVnYWxGdW5jdGlvbk5hbWUobmFtZSk7cmV0dXJuIG5ldyBGdW5jdGlvbihcImJvZHlcIixcInJldHVybiBmdW5jdGlvbiBcIituYW1lK1wiKCkge1xcblwiKycgICAgXCJ1c2Ugc3RyaWN0XCI7JytcIiAgICByZXR1cm4gYm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblwiK1wifTtcXG5cIikoYm9keSl9ZnVuY3Rpb24gZXh0ZW5kRXJyb3IoYmFzZUVycm9yVHlwZSxlcnJvck5hbWUpe3ZhciBlcnJvckNsYXNzPWNyZWF0ZU5hbWVkRnVuY3Rpb24oZXJyb3JOYW1lLGZ1bmN0aW9uKG1lc3NhZ2Upe3RoaXMubmFtZT1lcnJvck5hbWU7dGhpcy5tZXNzYWdlPW1lc3NhZ2U7dmFyIHN0YWNrPW5ldyBFcnJvcihtZXNzYWdlKS5zdGFjaztpZihzdGFjayE9PXVuZGVmaW5lZCl7dGhpcy5zdGFjaz10aGlzLnRvU3RyaW5nKCkrXCJcXG5cIitzdGFjay5yZXBsYWNlKC9eRXJyb3IoOlteXFxuXSopP1xcbi8sXCJcIil9fSk7ZXJyb3JDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShiYXNlRXJyb3JUeXBlLnByb3RvdHlwZSk7ZXJyb3JDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3I9ZXJyb3JDbGFzcztlcnJvckNsYXNzLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMubWVzc2FnZT09PXVuZGVmaW5lZCl7cmV0dXJuIHRoaXMubmFtZX1lbHNle3JldHVybiB0aGlzLm5hbWUrXCI6IFwiK3RoaXMubWVzc2FnZX19O3JldHVybiBlcnJvckNsYXNzfXZhciBJbnRlcm5hbEVycm9yPXVuZGVmaW5lZDtmdW5jdGlvbiB0aHJvd0ludGVybmFsRXJyb3IobWVzc2FnZSl7dGhyb3cgbmV3IEludGVybmFsRXJyb3IobWVzc2FnZSl9ZnVuY3Rpb24gd2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQobXlUeXBlcyxkZXBlbmRlbnRUeXBlcyxnZXRUeXBlQ29udmVydGVycyl7bXlUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpe3R5cGVEZXBlbmRlbmNpZXNbdHlwZV09ZGVwZW5kZW50VHlwZXN9KTtmdW5jdGlvbiBvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKXt2YXIgbXlUeXBlQ29udmVydGVycz1nZXRUeXBlQ29udmVydGVycyh0eXBlQ29udmVydGVycyk7aWYobXlUeXBlQ29udmVydGVycy5sZW5ndGghPT1teVR5cGVzLmxlbmd0aCl7dGhyb3dJbnRlcm5hbEVycm9yKFwiTWlzbWF0Y2hlZCB0eXBlIGNvbnZlcnRlciBjb3VudFwiKX1mb3IodmFyIGk9MDtpPG15VHlwZXMubGVuZ3RoOysraSl7cmVnaXN0ZXJUeXBlKG15VHlwZXNbaV0sbXlUeXBlQ29udmVydGVyc1tpXSl9fXZhciB0eXBlQ29udmVydGVycz1uZXcgQXJyYXkoZGVwZW5kZW50VHlwZXMubGVuZ3RoKTt2YXIgdW5yZWdpc3RlcmVkVHlwZXM9W107dmFyIHJlZ2lzdGVyZWQ9MDtkZXBlbmRlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGR0LGkpe2lmKHJlZ2lzdGVyZWRUeXBlcy5oYXNPd25Qcm9wZXJ0eShkdCkpe3R5cGVDb252ZXJ0ZXJzW2ldPXJlZ2lzdGVyZWRUeXBlc1tkdF19ZWxzZXt1bnJlZ2lzdGVyZWRUeXBlcy5wdXNoKGR0KTtpZighYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoZHQpKXthd2FpdGluZ0RlcGVuZGVuY2llc1tkdF09W119YXdhaXRpbmdEZXBlbmRlbmNpZXNbZHRdLnB1c2goZnVuY3Rpb24oKXt0eXBlQ29udmVydGVyc1tpXT1yZWdpc3RlcmVkVHlwZXNbZHRdOysrcmVnaXN0ZXJlZDtpZihyZWdpc3RlcmVkPT09dW5yZWdpc3RlcmVkVHlwZXMubGVuZ3RoKXtvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKX19KX19KTtpZigwPT09dW5yZWdpc3RlcmVkVHlwZXMubGVuZ3RoKXtvbkNvbXBsZXRlKHR5cGVDb252ZXJ0ZXJzKX19ZnVuY3Rpb24gX19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0KHN0cnVjdFR5cGUpe3ZhciByZWc9c3RydWN0UmVnaXN0cmF0aW9uc1tzdHJ1Y3RUeXBlXTtkZWxldGUgc3RydWN0UmVnaXN0cmF0aW9uc1tzdHJ1Y3RUeXBlXTt2YXIgcmF3Q29uc3RydWN0b3I9cmVnLnJhd0NvbnN0cnVjdG9yO3ZhciByYXdEZXN0cnVjdG9yPXJlZy5yYXdEZXN0cnVjdG9yO3ZhciBmaWVsZFJlY29yZHM9cmVnLmZpZWxkczt2YXIgZmllbGRUeXBlcz1maWVsZFJlY29yZHMubWFwKGZ1bmN0aW9uKGZpZWxkKXtyZXR1cm4gZmllbGQuZ2V0dGVyUmV0dXJuVHlwZX0pLmNvbmNhdChmaWVsZFJlY29yZHMubWFwKGZ1bmN0aW9uKGZpZWxkKXtyZXR1cm4gZmllbGQuc2V0dGVyQXJndW1lbnRUeXBlfSkpO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtzdHJ1Y3RUeXBlXSxmaWVsZFR5cGVzLGZ1bmN0aW9uKGZpZWxkVHlwZXMpe3ZhciBmaWVsZHM9e307ZmllbGRSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQsaSl7dmFyIGZpZWxkTmFtZT1maWVsZC5maWVsZE5hbWU7dmFyIGdldHRlclJldHVyblR5cGU9ZmllbGRUeXBlc1tpXTt2YXIgZ2V0dGVyPWZpZWxkLmdldHRlcjt2YXIgZ2V0dGVyQ29udGV4dD1maWVsZC5nZXR0ZXJDb250ZXh0O3ZhciBzZXR0ZXJBcmd1bWVudFR5cGU9ZmllbGRUeXBlc1tpK2ZpZWxkUmVjb3Jkcy5sZW5ndGhdO3ZhciBzZXR0ZXI9ZmllbGQuc2V0dGVyO3ZhciBzZXR0ZXJDb250ZXh0PWZpZWxkLnNldHRlckNvbnRleHQ7ZmllbGRzW2ZpZWxkTmFtZV09e3JlYWQ6ZnVuY3Rpb24ocHRyKXtyZXR1cm4gZ2V0dGVyUmV0dXJuVHlwZVtcImZyb21XaXJlVHlwZVwiXShnZXR0ZXIoZ2V0dGVyQ29udGV4dCxwdHIpKX0sd3JpdGU6ZnVuY3Rpb24ocHRyLG8pe3ZhciBkZXN0cnVjdG9ycz1bXTtzZXR0ZXIoc2V0dGVyQ29udGV4dCxwdHIsc2V0dGVyQXJndW1lbnRUeXBlW1widG9XaXJlVHlwZVwiXShkZXN0cnVjdG9ycyxvKSk7cnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpfX19KTtyZXR1cm5be25hbWU6cmVnLm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbihwdHIpe3ZhciBydj17fTtmb3IodmFyIGkgaW4gZmllbGRzKXtydltpXT1maWVsZHNbaV0ucmVhZChwdHIpfXJhd0Rlc3RydWN0b3IocHRyKTtyZXR1cm4gcnZ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe2Zvcih2YXIgZmllbGROYW1lIGluIGZpZWxkcyl7aWYoIShmaWVsZE5hbWUgaW4gbykpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ01pc3NpbmcgZmllbGQ6ICBcIicrZmllbGROYW1lKydcIicpfX12YXIgcHRyPXJhd0NvbnN0cnVjdG9yKCk7Zm9yKGZpZWxkTmFtZSBpbiBmaWVsZHMpe2ZpZWxkc1tmaWVsZE5hbWVdLndyaXRlKHB0cixvW2ZpZWxkTmFtZV0pfWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChyYXdEZXN0cnVjdG9yLHB0cil9cmV0dXJuIHB0cn0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOnNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyLGRlc3RydWN0b3JGdW5jdGlvbjpyYXdEZXN0cnVjdG9yfV19KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2Upe31mdW5jdGlvbiBnZXRTaGlmdEZyb21TaXplKHNpemUpe3N3aXRjaChzaXplKXtjYXNlIDE6cmV0dXJuIDA7Y2FzZSAyOnJldHVybiAxO2Nhc2UgNDpyZXR1cm4gMjtjYXNlIDg6cmV0dXJuIDM7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biB0eXBlIHNpemU6IFwiK3NpemUpfX1mdW5jdGlvbiBlbWJpbmRfaW5pdF9jaGFyQ29kZXMoKXt2YXIgY29kZXM9bmV3IEFycmF5KDI1Nik7Zm9yKHZhciBpPTA7aTwyNTY7KytpKXtjb2Rlc1tpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGkpfWVtYmluZF9jaGFyQ29kZXM9Y29kZXN9dmFyIGVtYmluZF9jaGFyQ29kZXM9dW5kZWZpbmVkO2Z1bmN0aW9uIHJlYWRMYXRpbjFTdHJpbmcocHRyKXt2YXIgcmV0PVwiXCI7dmFyIGM9cHRyO3doaWxlKEhFQVBVOFtjXSl7cmV0Kz1lbWJpbmRfY2hhckNvZGVzW0hFQVBVOFtjKytdXX1yZXR1cm4gcmV0fXZhciBCaW5kaW5nRXJyb3I9dW5kZWZpbmVkO2Z1bmN0aW9uIHRocm93QmluZGluZ0Vycm9yKG1lc3NhZ2Upe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IobWVzc2FnZSl9ZnVuY3Rpb24gcmVnaXN0ZXJUeXBlKHJhd1R5cGUscmVnaXN0ZXJlZEluc3RhbmNlLG9wdGlvbnMpe29wdGlvbnM9b3B0aW9uc3x8e307aWYoIShcImFyZ1BhY2tBZHZhbmNlXCJpbiByZWdpc3RlcmVkSW5zdGFuY2UpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVnaXN0ZXJUeXBlIHJlZ2lzdGVyZWRJbnN0YW5jZSByZXF1aXJlcyBhcmdQYWNrQWR2YW5jZVwiKX12YXIgbmFtZT1yZWdpc3RlcmVkSW5zdGFuY2UubmFtZTtpZighcmF3VHlwZSl7dGhyb3dCaW5kaW5nRXJyb3IoJ3R5cGUgXCInK25hbWUrJ1wiIG11c3QgaGF2ZSBhIHBvc2l0aXZlIGludGVnZXIgdHlwZWlkIHBvaW50ZXInKX1pZihyZWdpc3RlcmVkVHlwZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpe2lmKG9wdGlvbnMuaWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9ucyl7cmV0dXJufWVsc2V7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnXCIrbmFtZStcIicgdHdpY2VcIil9fXJlZ2lzdGVyZWRUeXBlc1tyYXdUeXBlXT1yZWdpc3RlcmVkSW5zdGFuY2U7ZGVsZXRlIHR5cGVEZXBlbmRlbmNpZXNbcmF3VHlwZV07aWYoYXdhaXRpbmdEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkocmF3VHlwZSkpe3ZhciBjYWxsYmFja3M9YXdhaXRpbmdEZXBlbmRlbmNpZXNbcmF3VHlwZV07ZGVsZXRlIGF3YWl0aW5nRGVwZW5kZW5jaWVzW3Jhd1R5cGVdO2NhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNiKXtjYigpfSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Jvb2wocmF3VHlwZSxuYW1lLHNpemUsdHJ1ZVZhbHVlLGZhbHNlVmFsdWUpe3ZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24od3Qpe3JldHVybiEhd3R9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLG8pe3JldHVybiBvP3RydWVWYWx1ZTpmYWxzZVZhbHVlfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6ZnVuY3Rpb24ocG9pbnRlcil7dmFyIGhlYXA7aWYoc2l6ZT09PTEpe2hlYXA9SEVBUDh9ZWxzZSBpZihzaXplPT09Mil7aGVhcD1IRUFQMTZ9ZWxzZSBpZihzaXplPT09NCl7aGVhcD1IRUFQMzJ9ZWxzZXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBib29sZWFuIHR5cGUgc2l6ZTogXCIrbmFtZSl9cmV0dXJuIHRoaXNbXCJmcm9tV2lyZVR5cGVcIl0oaGVhcFtwb2ludGVyPj5zaGlmdF0pfSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIENsYXNzSGFuZGxlX2lzQWxpYXNPZihvdGhlcil7aWYoISh0aGlzIGluc3RhbmNlb2YgQ2xhc3NIYW5kbGUpKXtyZXR1cm4gZmFsc2V9aWYoIShvdGhlciBpbnN0YW5jZW9mIENsYXNzSGFuZGxlKSl7cmV0dXJuIGZhbHNlfXZhciBsZWZ0Q2xhc3M9dGhpcy4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgbGVmdD10aGlzLiQkLnB0cjt2YXIgcmlnaHRDbGFzcz1vdGhlci4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgcmlnaHQ9b3RoZXIuJCQucHRyO3doaWxlKGxlZnRDbGFzcy5iYXNlQ2xhc3Mpe2xlZnQ9bGVmdENsYXNzLnVwY2FzdChsZWZ0KTtsZWZ0Q2xhc3M9bGVmdENsYXNzLmJhc2VDbGFzc313aGlsZShyaWdodENsYXNzLmJhc2VDbGFzcyl7cmlnaHQ9cmlnaHRDbGFzcy51cGNhc3QocmlnaHQpO3JpZ2h0Q2xhc3M9cmlnaHRDbGFzcy5iYXNlQ2xhc3N9cmV0dXJuIGxlZnRDbGFzcz09PXJpZ2h0Q2xhc3MmJmxlZnQ9PT1yaWdodH1mdW5jdGlvbiBzaGFsbG93Q29weUludGVybmFsUG9pbnRlcihvKXtyZXR1cm57Y291bnQ6by5jb3VudCxkZWxldGVTY2hlZHVsZWQ6by5kZWxldGVTY2hlZHVsZWQscHJlc2VydmVQb2ludGVyT25EZWxldGU6by5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSxwdHI6by5wdHIscHRyVHlwZTpvLnB0clR5cGUsc21hcnRQdHI6by5zbWFydFB0cixzbWFydFB0clR5cGU6by5zbWFydFB0clR5cGV9fWZ1bmN0aW9uIHRocm93SW5zdGFuY2VBbHJlYWR5RGVsZXRlZChvYmope2Z1bmN0aW9uIGdldEluc3RhbmNlVHlwZU5hbWUoaGFuZGxlKXtyZXR1cm4gaGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzLm5hbWV9dGhyb3dCaW5kaW5nRXJyb3IoZ2V0SW5zdGFuY2VUeXBlTmFtZShvYmopK1wiIGluc3RhbmNlIGFscmVhZHkgZGVsZXRlZFwiKX12YXIgZmluYWxpemF0aW9uR3JvdXA9ZmFsc2U7ZnVuY3Rpb24gZGV0YWNoRmluYWxpemVyKGhhbmRsZSl7fWZ1bmN0aW9uIHJ1bkRlc3RydWN0b3IoJCQpe2lmKCQkLnNtYXJ0UHRyKXskJC5zbWFydFB0clR5cGUucmF3RGVzdHJ1Y3RvcigkJC5zbWFydFB0cil9ZWxzZXskJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcy5yYXdEZXN0cnVjdG9yKCQkLnB0cil9fWZ1bmN0aW9uIHJlbGVhc2VDbGFzc0hhbmRsZSgkJCl7JCQuY291bnQudmFsdWUtPTE7dmFyIHRvRGVsZXRlPTA9PT0kJC5jb3VudC52YWx1ZTtpZih0b0RlbGV0ZSl7cnVuRGVzdHJ1Y3RvcigkJCl9fWZ1bmN0aW9uIGF0dGFjaEZpbmFsaXplcihoYW5kbGUpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgRmluYWxpemF0aW9uR3JvdXApe2F0dGFjaEZpbmFsaXplcj1mdW5jdGlvbihoYW5kbGUpe3JldHVybiBoYW5kbGV9O3JldHVybiBoYW5kbGV9ZmluYWxpemF0aW9uR3JvdXA9bmV3IEZpbmFsaXphdGlvbkdyb3VwKGZ1bmN0aW9uKGl0ZXIpe2Zvcih2YXIgcmVzdWx0PWl0ZXIubmV4dCgpOyFyZXN1bHQuZG9uZTtyZXN1bHQ9aXRlci5uZXh0KCkpe3ZhciAkJD1yZXN1bHQudmFsdWU7aWYoISQkLnB0cil7Y29uc29sZS53YXJuKFwib2JqZWN0IGFscmVhZHkgZGVsZXRlZDogXCIrJCQucHRyKX1lbHNle3JlbGVhc2VDbGFzc0hhbmRsZSgkJCl9fX0pO2F0dGFjaEZpbmFsaXplcj1mdW5jdGlvbihoYW5kbGUpe2ZpbmFsaXphdGlvbkdyb3VwLnJlZ2lzdGVyKGhhbmRsZSxoYW5kbGUuJCQsaGFuZGxlLiQkKTtyZXR1cm4gaGFuZGxlfTtkZXRhY2hGaW5hbGl6ZXI9ZnVuY3Rpb24oaGFuZGxlKXtmaW5hbGl6YXRpb25Hcm91cC51bnJlZ2lzdGVyKGhhbmRsZS4kJCl9O3JldHVybiBhdHRhY2hGaW5hbGl6ZXIoaGFuZGxlKX1mdW5jdGlvbiBDbGFzc0hhbmRsZV9jbG9uZSgpe2lmKCF0aGlzLiQkLnB0cil7dGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpfWlmKHRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3RoaXMuJCQuY291bnQudmFsdWUrPTE7cmV0dXJuIHRoaXN9ZWxzZXt2YXIgY2xvbmU9YXR0YWNoRmluYWxpemVyKE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLHskJDp7dmFsdWU6c2hhbGxvd0NvcHlJbnRlcm5hbFBvaW50ZXIodGhpcy4kJCl9fSkpO2Nsb25lLiQkLmNvdW50LnZhbHVlKz0xO2Nsb25lLiQkLmRlbGV0ZVNjaGVkdWxlZD1mYWxzZTtyZXR1cm4gY2xvbmV9fWZ1bmN0aW9uIENsYXNzSGFuZGxlX2RlbGV0ZSgpe2lmKCF0aGlzLiQkLnB0cil7dGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpfWlmKHRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkJiYhdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uXCIpfWRldGFjaEZpbmFsaXplcih0aGlzKTtyZWxlYXNlQ2xhc3NIYW5kbGUodGhpcy4kJCk7aWYoIXRoaXMuJCQucHJlc2VydmVQb2ludGVyT25EZWxldGUpe3RoaXMuJCQuc21hcnRQdHI9dW5kZWZpbmVkO3RoaXMuJCQucHRyPXVuZGVmaW5lZH19ZnVuY3Rpb24gQ2xhc3NIYW5kbGVfaXNEZWxldGVkKCl7cmV0dXJuIXRoaXMuJCQucHRyfXZhciBkZWxheUZ1bmN0aW9uPXVuZGVmaW5lZDt2YXIgZGVsZXRpb25RdWV1ZT1bXTtmdW5jdGlvbiBmbHVzaFBlbmRpbmdEZWxldGVzKCl7d2hpbGUoZGVsZXRpb25RdWV1ZS5sZW5ndGgpe3ZhciBvYmo9ZGVsZXRpb25RdWV1ZS5wb3AoKTtvYmouJCQuZGVsZXRlU2NoZWR1bGVkPWZhbHNlO29ialtcImRlbGV0ZVwiXSgpfX1mdW5jdGlvbiBDbGFzc0hhbmRsZV9kZWxldGVMYXRlcigpe2lmKCF0aGlzLiQkLnB0cil7dGhyb3dJbnN0YW5jZUFscmVhZHlEZWxldGVkKHRoaXMpfWlmKHRoaXMuJCQuZGVsZXRlU2NoZWR1bGVkJiYhdGhpcy4kJC5wcmVzZXJ2ZVBvaW50ZXJPbkRlbGV0ZSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJPYmplY3QgYWxyZWFkeSBzY2hlZHVsZWQgZm9yIGRlbGV0aW9uXCIpfWRlbGV0aW9uUXVldWUucHVzaCh0aGlzKTtpZihkZWxldGlvblF1ZXVlLmxlbmd0aD09PTEmJmRlbGF5RnVuY3Rpb24pe2RlbGF5RnVuY3Rpb24oZmx1c2hQZW5kaW5nRGVsZXRlcyl9dGhpcy4kJC5kZWxldGVTY2hlZHVsZWQ9dHJ1ZTtyZXR1cm4gdGhpc31mdW5jdGlvbiBpbml0X0NsYXNzSGFuZGxlKCl7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiaXNBbGlhc09mXCJdPUNsYXNzSGFuZGxlX2lzQWxpYXNPZjtDbGFzc0hhbmRsZS5wcm90b3R5cGVbXCJjbG9uZVwiXT1DbGFzc0hhbmRsZV9jbG9uZTtDbGFzc0hhbmRsZS5wcm90b3R5cGVbXCJkZWxldGVcIl09Q2xhc3NIYW5kbGVfZGVsZXRlO0NsYXNzSGFuZGxlLnByb3RvdHlwZVtcImlzRGVsZXRlZFwiXT1DbGFzc0hhbmRsZV9pc0RlbGV0ZWQ7Q2xhc3NIYW5kbGUucHJvdG90eXBlW1wiZGVsZXRlTGF0ZXJcIl09Q2xhc3NIYW5kbGVfZGVsZXRlTGF0ZXJ9ZnVuY3Rpb24gQ2xhc3NIYW5kbGUoKXt9dmFyIHJlZ2lzdGVyZWRQb2ludGVycz17fTtmdW5jdGlvbiBlbnN1cmVPdmVybG9hZFRhYmxlKHByb3RvLG1ldGhvZE5hbWUsaHVtYW5OYW1lKXtpZih1bmRlZmluZWQ9PT1wcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlKXt2YXIgcHJldkZ1bmM9cHJvdG9bbWV0aG9kTmFtZV07cHJvdG9bbWV0aG9kTmFtZV09ZnVuY3Rpb24oKXtpZighcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZS5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHMubGVuZ3RoKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJGdW5jdGlvbiAnXCIraHVtYW5OYW1lK1wiJyBjYWxsZWQgd2l0aCBhbiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMgKFwiK2FyZ3VtZW50cy5sZW5ndGgrXCIpIC0gZXhwZWN0cyBvbmUgb2YgKFwiK3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGUrXCIpIVwiKX1yZXR1cm4gcHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVthcmd1bWVudHMubGVuZ3RoXS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGU9W107cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZVtwcmV2RnVuYy5hcmdDb3VudF09cHJldkZ1bmN9fWZ1bmN0aW9uIGV4cG9zZVB1YmxpY1N5bWJvbChuYW1lLHZhbHVlLG51bUFyZ3VtZW50cyl7aWYoTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKXtpZih1bmRlZmluZWQ9PT1udW1Bcmd1bWVudHN8fHVuZGVmaW5lZCE9PU1vZHVsZVtuYW1lXS5vdmVybG9hZFRhYmxlJiZ1bmRlZmluZWQhPT1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCByZWdpc3RlciBwdWJsaWMgbmFtZSAnXCIrbmFtZStcIicgdHdpY2VcIil9ZW5zdXJlT3ZlcmxvYWRUYWJsZShNb2R1bGUsbmFtZSxuYW1lKTtpZihNb2R1bGUuaGFzT3duUHJvcGVydHkobnVtQXJndW1lbnRzKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgb3ZlcmxvYWRzIG9mIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzIChcIitudW1Bcmd1bWVudHMrXCIpIVwiKX1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdPXZhbHVlfWVsc2V7TW9kdWxlW25hbWVdPXZhbHVlO2lmKHVuZGVmaW5lZCE9PW51bUFyZ3VtZW50cyl7TW9kdWxlW25hbWVdLm51bUFyZ3VtZW50cz1udW1Bcmd1bWVudHN9fX1mdW5jdGlvbiBSZWdpc3RlcmVkQ2xhc3MobmFtZSxjb25zdHJ1Y3RvcixpbnN0YW5jZVByb3RvdHlwZSxyYXdEZXN0cnVjdG9yLGJhc2VDbGFzcyxnZXRBY3R1YWxUeXBlLHVwY2FzdCxkb3duY2FzdCl7dGhpcy5uYW1lPW5hbWU7dGhpcy5jb25zdHJ1Y3Rvcj1jb25zdHJ1Y3Rvcjt0aGlzLmluc3RhbmNlUHJvdG90eXBlPWluc3RhbmNlUHJvdG90eXBlO3RoaXMucmF3RGVzdHJ1Y3Rvcj1yYXdEZXN0cnVjdG9yO3RoaXMuYmFzZUNsYXNzPWJhc2VDbGFzczt0aGlzLmdldEFjdHVhbFR5cGU9Z2V0QWN0dWFsVHlwZTt0aGlzLnVwY2FzdD11cGNhc3Q7dGhpcy5kb3duY2FzdD1kb3duY2FzdDt0aGlzLnB1cmVWaXJ0dWFsRnVuY3Rpb25zPVtdfWZ1bmN0aW9uIHVwY2FzdFBvaW50ZXIocHRyLHB0ckNsYXNzLGRlc2lyZWRDbGFzcyl7d2hpbGUocHRyQ2xhc3MhPT1kZXNpcmVkQ2xhc3Mpe2lmKCFwdHJDbGFzcy51cGNhc3Qpe3Rocm93QmluZGluZ0Vycm9yKFwiRXhwZWN0ZWQgbnVsbCBvciBpbnN0YW5jZSBvZiBcIitkZXNpcmVkQ2xhc3MubmFtZStcIiwgZ290IGFuIGluc3RhbmNlIG9mIFwiK3B0ckNsYXNzLm5hbWUpfXB0cj1wdHJDbGFzcy51cGNhc3QocHRyKTtwdHJDbGFzcz1wdHJDbGFzcy5iYXNlQ2xhc3N9cmV0dXJuIHB0cn1mdW5jdGlvbiBjb25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycyxoYW5kbGUpe2lmKGhhbmRsZT09PW51bGwpe2lmKHRoaXMuaXNSZWZlcmVuY2Upe3Rocm93QmluZGluZ0Vycm9yKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIit0aGlzLm5hbWUpfXJldHVybiAwfWlmKCFoYW5kbGUuJCQpe3Rocm93QmluZGluZ0Vycm9yKCdDYW5ub3QgcGFzcyBcIicrX2VtYmluZF9yZXByKGhhbmRsZSkrJ1wiIGFzIGEgJyt0aGlzLm5hbWUpfWlmKCFoYW5kbGUuJCQucHRyKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlIFwiK3RoaXMubmFtZSl9dmFyIGhhbmRsZUNsYXNzPWhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzczt2YXIgcHRyPXVwY2FzdFBvaW50ZXIoaGFuZGxlLiQkLnB0cixoYW5kbGVDbGFzcyx0aGlzLnJlZ2lzdGVyZWRDbGFzcyk7cmV0dXJuIHB0cn1mdW5jdGlvbiBnZW5lcmljUG9pbnRlclRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsaGFuZGxlKXt2YXIgcHRyO2lmKGhhbmRsZT09PW51bGwpe2lmKHRoaXMuaXNSZWZlcmVuY2Upe3Rocm93QmluZGluZ0Vycm9yKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIit0aGlzLm5hbWUpfWlmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3B0cj10aGlzLnJhd0NvbnN0cnVjdG9yKCk7aWYoZGVzdHJ1Y3RvcnMhPT1udWxsKXtkZXN0cnVjdG9ycy5wdXNoKHRoaXMucmF3RGVzdHJ1Y3RvcixwdHIpfXJldHVybiBwdHJ9ZWxzZXtyZXR1cm4gMH19aWYoIWhhbmRsZS4kJCl7dGhyb3dCaW5kaW5nRXJyb3IoJ0Nhbm5vdCBwYXNzIFwiJytfZW1iaW5kX3JlcHIoaGFuZGxlKSsnXCIgYXMgYSAnK3RoaXMubmFtZSl9aWYoIWhhbmRsZS4kJC5wdHIpe3Rocm93QmluZGluZ0Vycm9yKFwiQ2Fubm90IHBhc3MgZGVsZXRlZCBvYmplY3QgYXMgYSBwb2ludGVyIG9mIHR5cGUgXCIrdGhpcy5uYW1lKX1pZighdGhpcy5pc0NvbnN0JiZoYW5kbGUuJCQucHRyVHlwZS5pc0NvbnN0KXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGFyZ3VtZW50IG9mIHR5cGUgXCIrKGhhbmRsZS4kJC5zbWFydFB0clR5cGU/aGFuZGxlLiQkLnNtYXJ0UHRyVHlwZS5uYW1lOmhhbmRsZS4kJC5wdHJUeXBlLm5hbWUpK1wiIHRvIHBhcmFtZXRlciB0eXBlIFwiK3RoaXMubmFtZSl9dmFyIGhhbmRsZUNsYXNzPWhhbmRsZS4kJC5wdHJUeXBlLnJlZ2lzdGVyZWRDbGFzcztwdHI9dXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLGhhbmRsZUNsYXNzLHRoaXMucmVnaXN0ZXJlZENsYXNzKTtpZih0aGlzLmlzU21hcnRQb2ludGVyKXtpZih1bmRlZmluZWQ9PT1oYW5kbGUuJCQuc21hcnRQdHIpe3Rocm93QmluZGluZ0Vycm9yKFwiUGFzc2luZyByYXcgcG9pbnRlciB0byBzbWFydCBwb2ludGVyIGlzIGlsbGVnYWxcIil9c3dpdGNoKHRoaXMuc2hhcmluZ1BvbGljeSl7Y2FzZSAwOmlmKGhhbmRsZS4kJC5zbWFydFB0clR5cGU9PT10aGlzKXtwdHI9aGFuZGxlLiQkLnNtYXJ0UHRyfWVsc2V7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlIFwiKyhoYW5kbGUuJCQuc21hcnRQdHJUeXBlP2hhbmRsZS4kJC5zbWFydFB0clR5cGUubmFtZTpoYW5kbGUuJCQucHRyVHlwZS5uYW1lKStcIiB0byBwYXJhbWV0ZXIgdHlwZSBcIit0aGlzLm5hbWUpfWJyZWFrO2Nhc2UgMTpwdHI9aGFuZGxlLiQkLnNtYXJ0UHRyO2JyZWFrO2Nhc2UgMjppZihoYW5kbGUuJCQuc21hcnRQdHJUeXBlPT09dGhpcyl7cHRyPWhhbmRsZS4kJC5zbWFydFB0cn1lbHNle3ZhciBjbG9uZWRIYW5kbGU9aGFuZGxlW1wiY2xvbmVcIl0oKTtwdHI9dGhpcy5yYXdTaGFyZShwdHIsX19lbXZhbF9yZWdpc3RlcihmdW5jdGlvbigpe2Nsb25lZEhhbmRsZVtcImRlbGV0ZVwiXSgpfSkpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaCh0aGlzLnJhd0Rlc3RydWN0b3IscHRyKX19YnJlYWs7ZGVmYXVsdDp0aHJvd0JpbmRpbmdFcnJvcihcIlVuc3VwcG9ydGluZyBzaGFyaW5nIHBvbGljeVwiKX19cmV0dXJuIHB0cn1mdW5jdGlvbiBub25Db25zdE5vU21hcnRQdHJSYXdQb2ludGVyVG9XaXJlVHlwZShkZXN0cnVjdG9ycyxoYW5kbGUpe2lmKGhhbmRsZT09PW51bGwpe2lmKHRoaXMuaXNSZWZlcmVuY2Upe3Rocm93QmluZGluZ0Vycm9yKFwibnVsbCBpcyBub3QgYSB2YWxpZCBcIit0aGlzLm5hbWUpfXJldHVybiAwfWlmKCFoYW5kbGUuJCQpe3Rocm93QmluZGluZ0Vycm9yKCdDYW5ub3QgcGFzcyBcIicrX2VtYmluZF9yZXByKGhhbmRsZSkrJ1wiIGFzIGEgJyt0aGlzLm5hbWUpfWlmKCFoYW5kbGUuJCQucHRyKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlIFwiK3RoaXMubmFtZSl9aWYoaGFuZGxlLiQkLnB0clR5cGUuaXNDb25zdCl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlIFwiK2hhbmRsZS4kJC5wdHJUeXBlLm5hbWUrXCIgdG8gcGFyYW1ldGVyIHR5cGUgXCIrdGhpcy5uYW1lKX12YXIgaGFuZGxlQ2xhc3M9aGFuZGxlLiQkLnB0clR5cGUucmVnaXN0ZXJlZENsYXNzO3ZhciBwdHI9dXBjYXN0UG9pbnRlcihoYW5kbGUuJCQucHRyLGhhbmRsZUNsYXNzLHRoaXMucmVnaXN0ZXJlZENsYXNzKTtyZXR1cm4gcHRyfWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2dldFBvaW50ZWUocHRyKXtpZih0aGlzLnJhd0dldFBvaW50ZWUpe3B0cj10aGlzLnJhd0dldFBvaW50ZWUocHRyKX1yZXR1cm4gcHRyfWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2Rlc3RydWN0b3IocHRyKXtpZih0aGlzLnJhd0Rlc3RydWN0b3Ipe3RoaXMucmF3RGVzdHJ1Y3RvcihwdHIpfX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcl9kZWxldGVPYmplY3QoaGFuZGxlKXtpZihoYW5kbGUhPT1udWxsKXtoYW5kbGVbXCJkZWxldGVcIl0oKX19ZnVuY3Rpb24gZG93bmNhc3RQb2ludGVyKHB0cixwdHJDbGFzcyxkZXNpcmVkQ2xhc3Mpe2lmKHB0ckNsYXNzPT09ZGVzaXJlZENsYXNzKXtyZXR1cm4gcHRyfWlmKHVuZGVmaW5lZD09PWRlc2lyZWRDbGFzcy5iYXNlQ2xhc3Mpe3JldHVybiBudWxsfXZhciBydj1kb3duY2FzdFBvaW50ZXIocHRyLHB0ckNsYXNzLGRlc2lyZWRDbGFzcy5iYXNlQ2xhc3MpO2lmKHJ2PT09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIGRlc2lyZWRDbGFzcy5kb3duY2FzdChydil9ZnVuY3Rpb24gZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudCgpe3JldHVybiBPYmplY3Qua2V5cyhyZWdpc3RlcmVkSW5zdGFuY2VzKS5sZW5ndGh9ZnVuY3Rpb24gZ2V0TGl2ZUluaGVyaXRlZEluc3RhbmNlcygpe3ZhciBydj1bXTtmb3IodmFyIGsgaW4gcmVnaXN0ZXJlZEluc3RhbmNlcyl7aWYocmVnaXN0ZXJlZEluc3RhbmNlcy5oYXNPd25Qcm9wZXJ0eShrKSl7cnYucHVzaChyZWdpc3RlcmVkSW5zdGFuY2VzW2tdKX19cmV0dXJuIHJ2fWZ1bmN0aW9uIHNldERlbGF5RnVuY3Rpb24oZm4pe2RlbGF5RnVuY3Rpb249Zm47aWYoZGVsZXRpb25RdWV1ZS5sZW5ndGgmJmRlbGF5RnVuY3Rpb24pe2RlbGF5RnVuY3Rpb24oZmx1c2hQZW5kaW5nRGVsZXRlcyl9fWZ1bmN0aW9uIGluaXRfZW1iaW5kKCl7TW9kdWxlW1wiZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudFwiXT1nZXRJbmhlcml0ZWRJbnN0YW5jZUNvdW50O01vZHVsZVtcImdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXNcIl09Z2V0TGl2ZUluaGVyaXRlZEluc3RhbmNlcztNb2R1bGVbXCJmbHVzaFBlbmRpbmdEZWxldGVzXCJdPWZsdXNoUGVuZGluZ0RlbGV0ZXM7TW9kdWxlW1wic2V0RGVsYXlGdW5jdGlvblwiXT1zZXREZWxheUZ1bmN0aW9ufXZhciByZWdpc3RlcmVkSW5zdGFuY2VzPXt9O2Z1bmN0aW9uIGdldEJhc2VzdFBvaW50ZXIoY2xhc3NfLHB0cil7aWYocHRyPT09dW5kZWZpbmVkKXt0aHJvd0JpbmRpbmdFcnJvcihcInB0ciBzaG91bGQgbm90IGJlIHVuZGVmaW5lZFwiKX13aGlsZShjbGFzc18uYmFzZUNsYXNzKXtwdHI9Y2xhc3NfLnVwY2FzdChwdHIpO2NsYXNzXz1jbGFzc18uYmFzZUNsYXNzfXJldHVybiBwdHJ9ZnVuY3Rpb24gZ2V0SW5oZXJpdGVkSW5zdGFuY2UoY2xhc3NfLHB0cil7cHRyPWdldEJhc2VzdFBvaW50ZXIoY2xhc3NfLHB0cik7cmV0dXJuIHJlZ2lzdGVyZWRJbnN0YW5jZXNbcHRyXX1mdW5jdGlvbiBtYWtlQ2xhc3NIYW5kbGUocHJvdG90eXBlLHJlY29yZCl7aWYoIXJlY29yZC5wdHJUeXBlfHwhcmVjb3JkLnB0cil7dGhyb3dJbnRlcm5hbEVycm9yKFwibWFrZUNsYXNzSGFuZGxlIHJlcXVpcmVzIHB0ciBhbmQgcHRyVHlwZVwiKX12YXIgaGFzU21hcnRQdHJUeXBlPSEhcmVjb3JkLnNtYXJ0UHRyVHlwZTt2YXIgaGFzU21hcnRQdHI9ISFyZWNvcmQuc21hcnRQdHI7aWYoaGFzU21hcnRQdHJUeXBlIT09aGFzU21hcnRQdHIpe3Rocm93SW50ZXJuYWxFcnJvcihcIkJvdGggc21hcnRQdHJUeXBlIGFuZCBzbWFydFB0ciBtdXN0IGJlIHNwZWNpZmllZFwiKX1yZWNvcmQuY291bnQ9e3ZhbHVlOjF9O3JldHVybiBhdHRhY2hGaW5hbGl6ZXIoT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUseyQkOnt2YWx1ZTpyZWNvcmR9fSkpfWZ1bmN0aW9uIFJlZ2lzdGVyZWRQb2ludGVyX2Zyb21XaXJlVHlwZShwdHIpe3ZhciByYXdQb2ludGVyPXRoaXMuZ2V0UG9pbnRlZShwdHIpO2lmKCFyYXdQb2ludGVyKXt0aGlzLmRlc3RydWN0b3IocHRyKTtyZXR1cm4gbnVsbH12YXIgcmVnaXN0ZXJlZEluc3RhbmNlPWdldEluaGVyaXRlZEluc3RhbmNlKHRoaXMucmVnaXN0ZXJlZENsYXNzLHJhd1BvaW50ZXIpO2lmKHVuZGVmaW5lZCE9PXJlZ2lzdGVyZWRJbnN0YW5jZSl7aWYoMD09PXJlZ2lzdGVyZWRJbnN0YW5jZS4kJC5jb3VudC52YWx1ZSl7cmVnaXN0ZXJlZEluc3RhbmNlLiQkLnB0cj1yYXdQb2ludGVyO3JlZ2lzdGVyZWRJbnN0YW5jZS4kJC5zbWFydFB0cj1wdHI7cmV0dXJuIHJlZ2lzdGVyZWRJbnN0YW5jZVtcImNsb25lXCJdKCl9ZWxzZXt2YXIgcnY9cmVnaXN0ZXJlZEluc3RhbmNlW1wiY2xvbmVcIl0oKTt0aGlzLmRlc3RydWN0b3IocHRyKTtyZXR1cm4gcnZ9fWZ1bmN0aW9uIG1ha2VEZWZhdWx0SGFuZGxlKCl7aWYodGhpcy5pc1NtYXJ0UG9pbnRlcil7cmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0aGlzLnBvaW50ZWVUeXBlLHB0cjpyYXdQb2ludGVyLHNtYXJ0UHRyVHlwZTp0aGlzLHNtYXJ0UHRyOnB0cn0pfWVsc2V7cmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0aGlzLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0aGlzLHB0cjpwdHJ9KX19dmFyIGFjdHVhbFR5cGU9dGhpcy5yZWdpc3RlcmVkQ2xhc3MuZ2V0QWN0dWFsVHlwZShyYXdQb2ludGVyKTt2YXIgcmVnaXN0ZXJlZFBvaW50ZXJSZWNvcmQ9cmVnaXN0ZXJlZFBvaW50ZXJzW2FjdHVhbFR5cGVdO2lmKCFyZWdpc3RlcmVkUG9pbnRlclJlY29yZCl7cmV0dXJuIG1ha2VEZWZhdWx0SGFuZGxlLmNhbGwodGhpcyl9dmFyIHRvVHlwZTtpZih0aGlzLmlzQ29uc3Qpe3RvVHlwZT1yZWdpc3RlcmVkUG9pbnRlclJlY29yZC5jb25zdFBvaW50ZXJUeXBlfWVsc2V7dG9UeXBlPXJlZ2lzdGVyZWRQb2ludGVyUmVjb3JkLnBvaW50ZXJUeXBlfXZhciBkcD1kb3duY2FzdFBvaW50ZXIocmF3UG9pbnRlcix0aGlzLnJlZ2lzdGVyZWRDbGFzcyx0b1R5cGUucmVnaXN0ZXJlZENsYXNzKTtpZihkcD09PW51bGwpe3JldHVybiBtYWtlRGVmYXVsdEhhbmRsZS5jYWxsKHRoaXMpfWlmKHRoaXMuaXNTbWFydFBvaW50ZXIpe3JldHVybiBtYWtlQ2xhc3NIYW5kbGUodG9UeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZSx7cHRyVHlwZTp0b1R5cGUscHRyOmRwLHNtYXJ0UHRyVHlwZTp0aGlzLHNtYXJ0UHRyOnB0cn0pfWVsc2V7cmV0dXJuIG1ha2VDbGFzc0hhbmRsZSh0b1R5cGUucmVnaXN0ZXJlZENsYXNzLmluc3RhbmNlUHJvdG90eXBlLHtwdHJUeXBlOnRvVHlwZSxwdHI6ZHB9KX19ZnVuY3Rpb24gaW5pdF9SZWdpc3RlcmVkUG9pbnRlcigpe1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZS5nZXRQb2ludGVlPVJlZ2lzdGVyZWRQb2ludGVyX2dldFBvaW50ZWU7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlLmRlc3RydWN0b3I9UmVnaXN0ZXJlZFBvaW50ZXJfZGVzdHJ1Y3RvcjtSZWdpc3RlcmVkUG9pbnRlci5wcm90b3R5cGVbXCJhcmdQYWNrQWR2YW5jZVwiXT04O1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVtcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCJdPXNpbXBsZVJlYWRWYWx1ZUZyb21Qb2ludGVyO1JlZ2lzdGVyZWRQb2ludGVyLnByb3RvdHlwZVtcImRlbGV0ZU9iamVjdFwiXT1SZWdpc3RlcmVkUG9pbnRlcl9kZWxldGVPYmplY3Q7UmVnaXN0ZXJlZFBvaW50ZXIucHJvdG90eXBlW1wiZnJvbVdpcmVUeXBlXCJdPVJlZ2lzdGVyZWRQb2ludGVyX2Zyb21XaXJlVHlwZX1mdW5jdGlvbiBSZWdpc3RlcmVkUG9pbnRlcihuYW1lLHJlZ2lzdGVyZWRDbGFzcyxpc1JlZmVyZW5jZSxpc0NvbnN0LGlzU21hcnRQb2ludGVyLHBvaW50ZWVUeXBlLHNoYXJpbmdQb2xpY3kscmF3R2V0UG9pbnRlZSxyYXdDb25zdHJ1Y3RvcixyYXdTaGFyZSxyYXdEZXN0cnVjdG9yKXt0aGlzLm5hbWU9bmFtZTt0aGlzLnJlZ2lzdGVyZWRDbGFzcz1yZWdpc3RlcmVkQ2xhc3M7dGhpcy5pc1JlZmVyZW5jZT1pc1JlZmVyZW5jZTt0aGlzLmlzQ29uc3Q9aXNDb25zdDt0aGlzLmlzU21hcnRQb2ludGVyPWlzU21hcnRQb2ludGVyO3RoaXMucG9pbnRlZVR5cGU9cG9pbnRlZVR5cGU7dGhpcy5zaGFyaW5nUG9saWN5PXNoYXJpbmdQb2xpY3k7dGhpcy5yYXdHZXRQb2ludGVlPXJhd0dldFBvaW50ZWU7dGhpcy5yYXdDb25zdHJ1Y3Rvcj1yYXdDb25zdHJ1Y3Rvcjt0aGlzLnJhd1NoYXJlPXJhd1NoYXJlO3RoaXMucmF3RGVzdHJ1Y3Rvcj1yYXdEZXN0cnVjdG9yO2lmKCFpc1NtYXJ0UG9pbnRlciYmcmVnaXN0ZXJlZENsYXNzLmJhc2VDbGFzcz09PXVuZGVmaW5lZCl7aWYoaXNDb25zdCl7dGhpc1tcInRvV2lyZVR5cGVcIl09Y29uc3ROb1NtYXJ0UHRyUmF3UG9pbnRlclRvV2lyZVR5cGU7dGhpcy5kZXN0cnVjdG9yRnVuY3Rpb249bnVsbH1lbHNle3RoaXNbXCJ0b1dpcmVUeXBlXCJdPW5vbkNvbnN0Tm9TbWFydFB0clJhd1BvaW50ZXJUb1dpcmVUeXBlO3RoaXMuZGVzdHJ1Y3RvckZ1bmN0aW9uPW51bGx9fWVsc2V7dGhpc1tcInRvV2lyZVR5cGVcIl09Z2VuZXJpY1BvaW50ZXJUb1dpcmVUeXBlfX1mdW5jdGlvbiByZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsdmFsdWUsbnVtQXJndW1lbnRzKXtpZighTW9kdWxlLmhhc093blByb3BlcnR5KG5hbWUpKXt0aHJvd0ludGVybmFsRXJyb3IoXCJSZXBsYWNpbmcgbm9uZXhpc3RhbnQgcHVibGljIHN5bWJvbFwiKX1pZih1bmRlZmluZWQhPT1Nb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZSYmdW5kZWZpbmVkIT09bnVtQXJndW1lbnRzKXtNb2R1bGVbbmFtZV0ub3ZlcmxvYWRUYWJsZVtudW1Bcmd1bWVudHNdPXZhbHVlfWVsc2V7TW9kdWxlW25hbWVdPXZhbHVlO01vZHVsZVtuYW1lXS5hcmdDb3VudD1udW1Bcmd1bWVudHN9fWZ1bmN0aW9uIGR5bkNhbGxMZWdhY3koc2lnLHB0cixhcmdzKXt2YXIgZj1Nb2R1bGVbXCJkeW5DYWxsX1wiK3NpZ107cmV0dXJuIGFyZ3MmJmFyZ3MubGVuZ3RoP2YuYXBwbHkobnVsbCxbcHRyXS5jb25jYXQoYXJncykpOmYuY2FsbChudWxsLHB0cil9ZnVuY3Rpb24gZHluQ2FsbChzaWcscHRyLGFyZ3Mpe2lmKHNpZy5pbmNsdWRlcyhcImpcIikpe3JldHVybiBkeW5DYWxsTGVnYWN5KHNpZyxwdHIsYXJncyl9cmV0dXJuIHdhc21UYWJsZS5nZXQocHRyKS5hcHBseShudWxsLGFyZ3MpfWZ1bmN0aW9uIGdldER5bkNhbGxlcihzaWcscHRyKXt2YXIgYXJnQ2FjaGU9W107cmV0dXJuIGZ1bmN0aW9uKCl7YXJnQ2FjaGUubGVuZ3RoPWFyZ3VtZW50cy5sZW5ndGg7Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnQ2FjaGVbaV09YXJndW1lbnRzW2ldfXJldHVybiBkeW5DYWxsKHNpZyxwdHIsYXJnQ2FjaGUpfX1mdW5jdGlvbiBlbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihzaWduYXR1cmUscmF3RnVuY3Rpb24pe3NpZ25hdHVyZT1yZWFkTGF0aW4xU3RyaW5nKHNpZ25hdHVyZSk7ZnVuY3Rpb24gbWFrZUR5bkNhbGxlcigpe2lmKHNpZ25hdHVyZS5pbmNsdWRlcyhcImpcIikpe3JldHVybiBnZXREeW5DYWxsZXIoc2lnbmF0dXJlLHJhd0Z1bmN0aW9uKX1yZXR1cm4gd2FzbVRhYmxlLmdldChyYXdGdW5jdGlvbil9dmFyIGZwPW1ha2VEeW5DYWxsZXIoKTtpZih0eXBlb2YgZnAhPT1cImZ1bmN0aW9uXCIpe3Rocm93QmluZGluZ0Vycm9yKFwidW5rbm93biBmdW5jdGlvbiBwb2ludGVyIHdpdGggc2lnbmF0dXJlIFwiK3NpZ25hdHVyZStcIjogXCIrcmF3RnVuY3Rpb24pfXJldHVybiBmcH12YXIgVW5ib3VuZFR5cGVFcnJvcj11bmRlZmluZWQ7ZnVuY3Rpb24gZ2V0VHlwZU5hbWUodHlwZSl7dmFyIHB0cj1fX19nZXRUeXBlTmFtZSh0eXBlKTt2YXIgcnY9cmVhZExhdGluMVN0cmluZyhwdHIpO19mcmVlKHB0cik7cmV0dXJuIHJ2fWZ1bmN0aW9uIHRocm93VW5ib3VuZFR5cGVFcnJvcihtZXNzYWdlLHR5cGVzKXt2YXIgdW5ib3VuZFR5cGVzPVtdO3ZhciBzZWVuPXt9O2Z1bmN0aW9uIHZpc2l0KHR5cGUpe2lmKHNlZW5bdHlwZV0pe3JldHVybn1pZihyZWdpc3RlcmVkVHlwZXNbdHlwZV0pe3JldHVybn1pZih0eXBlRGVwZW5kZW5jaWVzW3R5cGVdKXt0eXBlRGVwZW5kZW5jaWVzW3R5cGVdLmZvckVhY2godmlzaXQpO3JldHVybn11bmJvdW5kVHlwZXMucHVzaCh0eXBlKTtzZWVuW3R5cGVdPXRydWV9dHlwZXMuZm9yRWFjaCh2aXNpdCk7dGhyb3cgbmV3IFVuYm91bmRUeXBlRXJyb3IobWVzc2FnZStcIjogXCIrdW5ib3VuZFR5cGVzLm1hcChnZXRUeXBlTmFtZSkuam9pbihbXCIsIFwiXSkpfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzKHJhd1R5cGUscmF3UG9pbnRlclR5cGUscmF3Q29uc3RQb2ludGVyVHlwZSxiYXNlQ2xhc3NSYXdUeXBlLGdldEFjdHVhbFR5cGVTaWduYXR1cmUsZ2V0QWN0dWFsVHlwZSx1cGNhc3RTaWduYXR1cmUsdXBjYXN0LGRvd25jYXN0U2lnbmF0dXJlLGRvd25jYXN0LG5hbWUsZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7Z2V0QWN0dWFsVHlwZT1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihnZXRBY3R1YWxUeXBlU2lnbmF0dXJlLGdldEFjdHVhbFR5cGUpO2lmKHVwY2FzdCl7dXBjYXN0PWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHVwY2FzdFNpZ25hdHVyZSx1cGNhc3QpfWlmKGRvd25jYXN0KXtkb3duY2FzdD1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkb3duY2FzdFNpZ25hdHVyZSxkb3duY2FzdCl9cmF3RGVzdHJ1Y3Rvcj1lbWJpbmRfX3JlcXVpcmVGdW5jdGlvbihkZXN0cnVjdG9yU2lnbmF0dXJlLHJhd0Rlc3RydWN0b3IpO3ZhciBsZWdhbEZ1bmN0aW9uTmFtZT1tYWtlTGVnYWxGdW5jdGlvbk5hbWUobmFtZSk7ZXhwb3NlUHVibGljU3ltYm9sKGxlZ2FsRnVuY3Rpb25OYW1lLGZ1bmN0aW9uKCl7dGhyb3dVbmJvdW5kVHlwZUVycm9yKFwiQ2Fubm90IGNvbnN0cnVjdCBcIituYW1lK1wiIGR1ZSB0byB1bmJvdW5kIHR5cGVzXCIsW2Jhc2VDbGFzc1Jhd1R5cGVdKX0pO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtyYXdUeXBlLHJhd1BvaW50ZXJUeXBlLHJhd0NvbnN0UG9pbnRlclR5cGVdLGJhc2VDbGFzc1Jhd1R5cGU/W2Jhc2VDbGFzc1Jhd1R5cGVdOltdLGZ1bmN0aW9uKGJhc2Upe2Jhc2U9YmFzZVswXTt2YXIgYmFzZUNsYXNzO3ZhciBiYXNlUHJvdG90eXBlO2lmKGJhc2VDbGFzc1Jhd1R5cGUpe2Jhc2VDbGFzcz1iYXNlLnJlZ2lzdGVyZWRDbGFzcztiYXNlUHJvdG90eXBlPWJhc2VDbGFzcy5pbnN0YW5jZVByb3RvdHlwZX1lbHNle2Jhc2VQcm90b3R5cGU9Q2xhc3NIYW5kbGUucHJvdG90eXBlfXZhciBjb25zdHJ1Y3Rvcj1jcmVhdGVOYW1lZEZ1bmN0aW9uKGxlZ2FsRnVuY3Rpb25OYW1lLGZ1bmN0aW9uKCl7aWYoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpIT09aW5zdGFuY2VQcm90b3R5cGUpe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IoXCJVc2UgJ25ldycgdG8gY29uc3RydWN0IFwiK25hbWUpfWlmKHVuZGVmaW5lZD09PXJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5KXt0aHJvdyBuZXcgQmluZGluZ0Vycm9yKG5hbWUrXCIgaGFzIG5vIGFjY2Vzc2libGUgY29uc3RydWN0b3JcIil9dmFyIGJvZHk9cmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJndW1lbnRzLmxlbmd0aF07aWYodW5kZWZpbmVkPT09Ym9keSl7dGhyb3cgbmV3IEJpbmRpbmdFcnJvcihcIlRyaWVkIHRvIGludm9rZSBjdG9yIG9mIFwiK25hbWUrXCIgd2l0aCBpbnZhbGlkIG51bWJlciBvZiBwYXJhbWV0ZXJzIChcIithcmd1bWVudHMubGVuZ3RoK1wiKSAtIGV4cGVjdGVkIChcIitPYmplY3Qua2V5cyhyZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keSkudG9TdHJpbmcoKStcIikgcGFyYW1ldGVycyBpbnN0ZWFkIVwiKX1yZXR1cm4gYm9keS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KTt2YXIgaW5zdGFuY2VQcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShiYXNlUHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6Y29uc3RydWN0b3J9fSk7Y29uc3RydWN0b3IucHJvdG90eXBlPWluc3RhbmNlUHJvdG90eXBlO3ZhciByZWdpc3RlcmVkQ2xhc3M9bmV3IFJlZ2lzdGVyZWRDbGFzcyhuYW1lLGNvbnN0cnVjdG9yLGluc3RhbmNlUHJvdG90eXBlLHJhd0Rlc3RydWN0b3IsYmFzZUNsYXNzLGdldEFjdHVhbFR5cGUsdXBjYXN0LGRvd25jYXN0KTt2YXIgcmVmZXJlbmNlQ29udmVydGVyPW5ldyBSZWdpc3RlcmVkUG9pbnRlcihuYW1lLHJlZ2lzdGVyZWRDbGFzcyx0cnVlLGZhbHNlLGZhbHNlKTt2YXIgcG9pbnRlckNvbnZlcnRlcj1uZXcgUmVnaXN0ZXJlZFBvaW50ZXIobmFtZStcIipcIixyZWdpc3RlcmVkQ2xhc3MsZmFsc2UsZmFsc2UsZmFsc2UpO3ZhciBjb25zdFBvaW50ZXJDb252ZXJ0ZXI9bmV3IFJlZ2lzdGVyZWRQb2ludGVyKG5hbWUrXCIgY29uc3QqXCIscmVnaXN0ZXJlZENsYXNzLGZhbHNlLHRydWUsZmFsc2UpO3JlZ2lzdGVyZWRQb2ludGVyc1tyYXdUeXBlXT17cG9pbnRlclR5cGU6cG9pbnRlckNvbnZlcnRlcixjb25zdFBvaW50ZXJUeXBlOmNvbnN0UG9pbnRlckNvbnZlcnRlcn07cmVwbGFjZVB1YmxpY1N5bWJvbChsZWdhbEZ1bmN0aW9uTmFtZSxjb25zdHJ1Y3Rvcik7cmV0dXJuW3JlZmVyZW5jZUNvbnZlcnRlcixwb2ludGVyQ29udmVydGVyLGNvbnN0UG9pbnRlckNvbnZlcnRlcl19KX1mdW5jdGlvbiBoZWFwMzJWZWN0b3JUb0FycmF5KGNvdW50LGZpcnN0RWxlbWVudCl7dmFyIGFycmF5PVtdO2Zvcih2YXIgaT0wO2k8Y291bnQ7aSsrKXthcnJheS5wdXNoKEhFQVAzMlsoZmlyc3RFbGVtZW50Pj4yKStpXSl9cmV0dXJuIGFycmF5fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yKHJhd0NsYXNzVHlwZSxhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIsaW52b2tlclNpZ25hdHVyZSxpbnZva2VyLHJhd0NvbnN0cnVjdG9yKXthc3NlcnQoYXJnQ291bnQ+MCk7dmFyIHJhd0FyZ1R5cGVzPWhlYXAzMlZlY3RvclRvQXJyYXkoYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyKTtpbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGludm9rZXJTaWduYXR1cmUsaW52b2tlcik7dmFyIGFyZ3M9W3Jhd0NvbnN0cnVjdG9yXTt2YXIgZGVzdHJ1Y3RvcnM9W107d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3Jhd0NsYXNzVHlwZV0sZnVuY3Rpb24oY2xhc3NUeXBlKXtjbGFzc1R5cGU9Y2xhc3NUeXBlWzBdO3ZhciBodW1hbk5hbWU9XCJjb25zdHJ1Y3RvciBcIitjbGFzc1R5cGUubmFtZTtpZih1bmRlZmluZWQ9PT1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHkpe2NsYXNzVHlwZS5yZWdpc3RlcmVkQ2xhc3MuY29uc3RydWN0b3JfYm9keT1bXX1pZih1bmRlZmluZWQhPT1jbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQtMV0pe3Rocm93IG5ldyBCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcmVnaXN0ZXIgbXVsdGlwbGUgY29uc3RydWN0b3JzIHdpdGggaWRlbnRpY2FsIG51bWJlciBvZiBwYXJhbWV0ZXJzIChcIisoYXJnQ291bnQtMSkrXCIpIGZvciBjbGFzcyAnXCIrY2xhc3NUeXBlLm5hbWUrXCInISBPdmVybG9hZCByZXNvbHV0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHBlcmZvcm1lZCB1c2luZyB0aGUgcGFyYW1ldGVyIGNvdW50LCBub3QgYWN0dWFsIHR5cGUgaW5mbyFcIil9Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5jb25zdHJ1Y3Rvcl9ib2R5W2FyZ0NvdW50LTFdPWZ1bmN0aW9uIHVuYm91bmRUeXBlSGFuZGxlcigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgXCIrY2xhc3NUeXBlLm5hbWUrXCIgZHVlIHRvIHVuYm91bmQgdHlwZXNcIixyYXdBcmdUeXBlcyl9O3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLHJhd0FyZ1R5cGVzLGZ1bmN0aW9uKGFyZ1R5cGVzKXtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLmNvbnN0cnVjdG9yX2JvZHlbYXJnQ291bnQtMV09ZnVuY3Rpb24gY29uc3RydWN0b3JfYm9keSgpe2lmKGFyZ3VtZW50cy5sZW5ndGghPT1hcmdDb3VudC0xKXt0aHJvd0JpbmRpbmdFcnJvcihodW1hbk5hbWUrXCIgY2FsbGVkIHdpdGggXCIrYXJndW1lbnRzLmxlbmd0aCtcIiBhcmd1bWVudHMsIGV4cGVjdGVkIFwiKyhhcmdDb3VudC0xKSl9ZGVzdHJ1Y3RvcnMubGVuZ3RoPTA7YXJncy5sZW5ndGg9YXJnQ291bnQ7Zm9yKHZhciBpPTE7aTxhcmdDb3VudDsrK2kpe2FyZ3NbaV09YXJnVHlwZXNbaV1bXCJ0b1dpcmVUeXBlXCJdKGRlc3RydWN0b3JzLGFyZ3VtZW50c1tpLTFdKX12YXIgcHRyPWludm9rZXIuYXBwbHkobnVsbCxhcmdzKTtydW5EZXN0cnVjdG9ycyhkZXN0cnVjdG9ycyk7cmV0dXJuIGFyZ1R5cGVzWzBdW1wiZnJvbVdpcmVUeXBlXCJdKHB0cil9O3JldHVybltdfSk7cmV0dXJuW119KX1mdW5jdGlvbiBuZXdfKGNvbnN0cnVjdG9yLGFyZ3VtZW50TGlzdCl7aWYoIShjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ld18gY2FsbGVkIHdpdGggY29uc3RydWN0b3IgdHlwZSBcIit0eXBlb2YgY29uc3RydWN0b3IrXCIgd2hpY2ggaXMgbm90IGEgZnVuY3Rpb25cIil9dmFyIGR1bW15PWNyZWF0ZU5hbWVkRnVuY3Rpb24oY29uc3RydWN0b3IubmFtZXx8XCJ1bmtub3duRnVuY3Rpb25OYW1lXCIsZnVuY3Rpb24oKXt9KTtkdW1teS5wcm90b3R5cGU9Y29uc3RydWN0b3IucHJvdG90eXBlO3ZhciBvYmo9bmV3IGR1bW15O3ZhciByPWNvbnN0cnVjdG9yLmFwcGx5KG9iaixhcmd1bWVudExpc3QpO3JldHVybiByIGluc3RhbmNlb2YgT2JqZWN0P3I6b2JqfWZ1bmN0aW9uIGNyYWZ0SW52b2tlckZ1bmN0aW9uKGh1bWFuTmFtZSxhcmdUeXBlcyxjbGFzc1R5cGUsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyl7dmFyIGFyZ0NvdW50PWFyZ1R5cGVzLmxlbmd0aDtpZihhcmdDb3VudDwyKXt0aHJvd0JpbmRpbmdFcnJvcihcImFyZ1R5cGVzIGFycmF5IHNpemUgbWlzbWF0Y2ghIE11c3QgYXQgbGVhc3QgZ2V0IHJldHVybiB2YWx1ZSBhbmQgJ3RoaXMnIHR5cGVzIVwiKX12YXIgaXNDbGFzc01ldGhvZEZ1bmM9YXJnVHlwZXNbMV0hPT1udWxsJiZjbGFzc1R5cGUhPT1udWxsO3ZhciBuZWVkc0Rlc3RydWN0b3JTdGFjaz1mYWxzZTtmb3IodmFyIGk9MTtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe2lmKGFyZ1R5cGVzW2ldIT09bnVsbCYmYXJnVHlwZXNbaV0uZGVzdHJ1Y3RvckZ1bmN0aW9uPT09dW5kZWZpbmVkKXtuZWVkc0Rlc3RydWN0b3JTdGFjaz10cnVlO2JyZWFrfX12YXIgcmV0dXJucz1hcmdUeXBlc1swXS5uYW1lIT09XCJ2b2lkXCI7dmFyIGFyZ3NMaXN0PVwiXCI7dmFyIGFyZ3NMaXN0V2lyZWQ9XCJcIjtmb3IodmFyIGk9MDtpPGFyZ0NvdW50LTI7KytpKXthcmdzTGlzdCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2k7YXJnc0xpc3RXaXJlZCs9KGkhPT0wP1wiLCBcIjpcIlwiKStcImFyZ1wiK2krXCJXaXJlZFwifXZhciBpbnZva2VyRm5Cb2R5PVwicmV0dXJuIGZ1bmN0aW9uIFwiK21ha2VMZWdhbEZ1bmN0aW9uTmFtZShodW1hbk5hbWUpK1wiKFwiK2FyZ3NMaXN0K1wiKSB7XFxuXCIrXCJpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gXCIrKGFyZ0NvdW50LTIpK1wiKSB7XFxuXCIrXCJ0aHJvd0JpbmRpbmdFcnJvcignZnVuY3Rpb24gXCIraHVtYW5OYW1lK1wiIGNhbGxlZCB3aXRoICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMsIGV4cGVjdGVkIFwiKyhhcmdDb3VudC0yKStcIiBhcmdzIScpO1xcblwiK1wifVxcblwiO2lmKG5lZWRzRGVzdHJ1Y3RvclN0YWNrKXtpbnZva2VyRm5Cb2R5Kz1cInZhciBkZXN0cnVjdG9ycyA9IFtdO1xcblwifXZhciBkdG9yU3RhY2s9bmVlZHNEZXN0cnVjdG9yU3RhY2s/XCJkZXN0cnVjdG9yc1wiOlwibnVsbFwiO3ZhciBhcmdzMT1bXCJ0aHJvd0JpbmRpbmdFcnJvclwiLFwiaW52b2tlclwiLFwiZm5cIixcInJ1bkRlc3RydWN0b3JzXCIsXCJyZXRUeXBlXCIsXCJjbGFzc1BhcmFtXCJdO3ZhciBhcmdzMj1bdGhyb3dCaW5kaW5nRXJyb3IsY3BwSW52b2tlckZ1bmMsY3BwVGFyZ2V0RnVuYyxydW5EZXN0cnVjdG9ycyxhcmdUeXBlc1swXSxhcmdUeXBlc1sxXV07aWYoaXNDbGFzc01ldGhvZEZ1bmMpe2ludm9rZXJGbkJvZHkrPVwidmFyIHRoaXNXaXJlZCA9IGNsYXNzUGFyYW0udG9XaXJlVHlwZShcIitkdG9yU3RhY2srXCIsIHRoaXMpO1xcblwifWZvcih2YXIgaT0wO2k8YXJnQ291bnQtMjsrK2kpe2ludm9rZXJGbkJvZHkrPVwidmFyIGFyZ1wiK2krXCJXaXJlZCA9IGFyZ1R5cGVcIitpK1wiLnRvV2lyZVR5cGUoXCIrZHRvclN0YWNrK1wiLCBhcmdcIitpK1wiKTsgLy8gXCIrYXJnVHlwZXNbaSsyXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChcImFyZ1R5cGVcIitpKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2krMl0pfWlmKGlzQ2xhc3NNZXRob2RGdW5jKXthcmdzTGlzdFdpcmVkPVwidGhpc1dpcmVkXCIrKGFyZ3NMaXN0V2lyZWQubGVuZ3RoPjA/XCIsIFwiOlwiXCIpK2FyZ3NMaXN0V2lyZWR9aW52b2tlckZuQm9keSs9KHJldHVybnM/XCJ2YXIgcnYgPSBcIjpcIlwiKStcImludm9rZXIoZm5cIisoYXJnc0xpc3RXaXJlZC5sZW5ndGg+MD9cIiwgXCI6XCJcIikrYXJnc0xpc3RXaXJlZCtcIik7XFxuXCI7aWYobmVlZHNEZXN0cnVjdG9yU3RhY2spe2ludm9rZXJGbkJvZHkrPVwicnVuRGVzdHJ1Y3RvcnMoZGVzdHJ1Y3RvcnMpO1xcblwifWVsc2V7Zm9yKHZhciBpPWlzQ2xhc3NNZXRob2RGdW5jPzE6MjtpPGFyZ1R5cGVzLmxlbmd0aDsrK2kpe3ZhciBwYXJhbU5hbWU9aT09PTE/XCJ0aGlzV2lyZWRcIjpcImFyZ1wiKyhpLTIpK1wiV2lyZWRcIjtpZihhcmdUeXBlc1tpXS5kZXN0cnVjdG9yRnVuY3Rpb24hPT1udWxsKXtpbnZva2VyRm5Cb2R5Kz1wYXJhbU5hbWUrXCJfZHRvcihcIitwYXJhbU5hbWUrXCIpOyAvLyBcIithcmdUeXBlc1tpXS5uYW1lK1wiXFxuXCI7YXJnczEucHVzaChwYXJhbU5hbWUrXCJfZHRvclwiKTthcmdzMi5wdXNoKGFyZ1R5cGVzW2ldLmRlc3RydWN0b3JGdW5jdGlvbil9fX1pZihyZXR1cm5zKXtpbnZva2VyRm5Cb2R5Kz1cInZhciByZXQgPSByZXRUeXBlLmZyb21XaXJlVHlwZShydik7XFxuXCIrXCJyZXR1cm4gcmV0O1xcblwifWVsc2V7fWludm9rZXJGbkJvZHkrPVwifVxcblwiO2FyZ3MxLnB1c2goaW52b2tlckZuQm9keSk7dmFyIGludm9rZXJGdW5jdGlvbj1uZXdfKEZ1bmN0aW9uLGFyZ3MxKS5hcHBseShudWxsLGFyZ3MyKTtyZXR1cm4gaW52b2tlckZ1bmN0aW9ufWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uKHJhd0NsYXNzVHlwZSxtZXRob2ROYW1lLGFyZ0NvdW50LHJhd0FyZ1R5cGVzQWRkcixpbnZva2VyU2lnbmF0dXJlLHJhd0ludm9rZXIsY29udGV4dCxpc1B1cmVWaXJ0dWFsKXt2YXIgcmF3QXJnVHlwZXM9aGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIpO21ldGhvZE5hbWU9cmVhZExhdGluMVN0cmluZyhtZXRob2ROYW1lKTtyYXdJbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKGludm9rZXJTaWduYXR1cmUscmF3SW52b2tlcik7d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10sW3Jhd0NsYXNzVHlwZV0sZnVuY3Rpb24oY2xhc3NUeXBlKXtjbGFzc1R5cGU9Y2xhc3NUeXBlWzBdO3ZhciBodW1hbk5hbWU9Y2xhc3NUeXBlLm5hbWUrXCIuXCIrbWV0aG9kTmFtZTtpZihpc1B1cmVWaXJ0dWFsKXtjbGFzc1R5cGUucmVnaXN0ZXJlZENsYXNzLnB1cmVWaXJ0dWFsRnVuY3Rpb25zLnB1c2gobWV0aG9kTmFtZSl9ZnVuY3Rpb24gdW5ib3VuZFR5cGVzSGFuZGxlcigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIFwiK2h1bWFuTmFtZStcIiBkdWUgdG8gdW5ib3VuZCB0eXBlc1wiLHJhd0FyZ1R5cGVzKX12YXIgcHJvdG89Y2xhc3NUeXBlLnJlZ2lzdGVyZWRDbGFzcy5pbnN0YW5jZVByb3RvdHlwZTt2YXIgbWV0aG9kPXByb3RvW21ldGhvZE5hbWVdO2lmKHVuZGVmaW5lZD09PW1ldGhvZHx8dW5kZWZpbmVkPT09bWV0aG9kLm92ZXJsb2FkVGFibGUmJm1ldGhvZC5jbGFzc05hbWUhPT1jbGFzc1R5cGUubmFtZSYmbWV0aG9kLmFyZ0NvdW50PT09YXJnQ291bnQtMil7dW5ib3VuZFR5cGVzSGFuZGxlci5hcmdDb3VudD1hcmdDb3VudC0yO3VuYm91bmRUeXBlc0hhbmRsZXIuY2xhc3NOYW1lPWNsYXNzVHlwZS5uYW1lO3Byb3RvW21ldGhvZE5hbWVdPXVuYm91bmRUeXBlc0hhbmRsZXJ9ZWxzZXtlbnN1cmVPdmVybG9hZFRhYmxlKHByb3RvLG1ldGhvZE5hbWUsaHVtYW5OYW1lKTtwcm90b1ttZXRob2ROYW1lXS5vdmVybG9hZFRhYmxlW2FyZ0NvdW50LTJdPXVuYm91bmRUeXBlc0hhbmRsZXJ9d2hlbkRlcGVuZGVudFR5cGVzQXJlUmVzb2x2ZWQoW10scmF3QXJnVHlwZXMsZnVuY3Rpb24oYXJnVHlwZXMpe3ZhciBtZW1iZXJGdW5jdGlvbj1jcmFmdEludm9rZXJGdW5jdGlvbihodW1hbk5hbWUsYXJnVHlwZXMsY2xhc3NUeXBlLHJhd0ludm9rZXIsY29udGV4dCk7aWYodW5kZWZpbmVkPT09cHJvdG9bbWV0aG9kTmFtZV0ub3ZlcmxvYWRUYWJsZSl7bWVtYmVyRnVuY3Rpb24uYXJnQ291bnQ9YXJnQ291bnQtMjtwcm90b1ttZXRob2ROYW1lXT1tZW1iZXJGdW5jdGlvbn1lbHNle3Byb3RvW21ldGhvZE5hbWVdLm92ZXJsb2FkVGFibGVbYXJnQ291bnQtMl09bWVtYmVyRnVuY3Rpb259cmV0dXJuW119KTtyZXR1cm5bXX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2NvbnN0YW50KG5hbWUsdHlwZSx2YWx1ZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLFt0eXBlXSxmdW5jdGlvbih0eXBlKXt0eXBlPXR5cGVbMF07TW9kdWxlW25hbWVdPXR5cGVbXCJmcm9tV2lyZVR5cGVcIl0odmFsdWUpO3JldHVybltdfSl9dmFyIGVtdmFsX2ZyZWVfbGlzdD1bXTt2YXIgZW12YWxfaGFuZGxlX2FycmF5PVt7fSx7dmFsdWU6dW5kZWZpbmVkfSx7dmFsdWU6bnVsbH0se3ZhbHVlOnRydWV9LHt2YWx1ZTpmYWxzZX1dO2Z1bmN0aW9uIF9fZW12YWxfZGVjcmVmKGhhbmRsZSl7aWYoaGFuZGxlPjQmJjA9PT0tLWVtdmFsX2hhbmRsZV9hcnJheVtoYW5kbGVdLnJlZmNvdW50KXtlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXT11bmRlZmluZWQ7ZW12YWxfZnJlZV9saXN0LnB1c2goaGFuZGxlKX19ZnVuY3Rpb24gY291bnRfZW12YWxfaGFuZGxlcygpe3ZhciBjb3VudD0wO2Zvcih2YXIgaT01O2k8ZW12YWxfaGFuZGxlX2FycmF5Lmxlbmd0aDsrK2kpe2lmKGVtdmFsX2hhbmRsZV9hcnJheVtpXSE9PXVuZGVmaW5lZCl7Kytjb3VudH19cmV0dXJuIGNvdW50fWZ1bmN0aW9uIGdldF9maXJzdF9lbXZhbCgpe2Zvcih2YXIgaT01O2k8ZW12YWxfaGFuZGxlX2FycmF5Lmxlbmd0aDsrK2kpe2lmKGVtdmFsX2hhbmRsZV9hcnJheVtpXSE9PXVuZGVmaW5lZCl7cmV0dXJuIGVtdmFsX2hhbmRsZV9hcnJheVtpXX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gaW5pdF9lbXZhbCgpe01vZHVsZVtcImNvdW50X2VtdmFsX2hhbmRsZXNcIl09Y291bnRfZW12YWxfaGFuZGxlcztNb2R1bGVbXCJnZXRfZmlyc3RfZW12YWxcIl09Z2V0X2ZpcnN0X2VtdmFsfWZ1bmN0aW9uIF9fZW12YWxfcmVnaXN0ZXIodmFsdWUpe3N3aXRjaCh2YWx1ZSl7Y2FzZSB1bmRlZmluZWQ6e3JldHVybiAxfWNhc2UgbnVsbDp7cmV0dXJuIDJ9Y2FzZSB0cnVlOntyZXR1cm4gM31jYXNlIGZhbHNlOntyZXR1cm4gNH1kZWZhdWx0Ont2YXIgaGFuZGxlPWVtdmFsX2ZyZWVfbGlzdC5sZW5ndGg/ZW12YWxfZnJlZV9saXN0LnBvcCgpOmVtdmFsX2hhbmRsZV9hcnJheS5sZW5ndGg7ZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV09e3JlZmNvdW50OjEsdmFsdWU6dmFsdWV9O3JldHVybiBoYW5kbGV9fX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9lbXZhbChyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyZWdpc3RlclR5cGUocmF3VHlwZSx7bmFtZTpuYW1lLFwiZnJvbVdpcmVUeXBlXCI6ZnVuY3Rpb24oaGFuZGxlKXt2YXIgcnY9ZW12YWxfaGFuZGxlX2FycmF5W2hhbmRsZV0udmFsdWU7X19lbXZhbF9kZWNyZWYoaGFuZGxlKTtyZXR1cm4gcnZ9LFwidG9XaXJlVHlwZVwiOmZ1bmN0aW9uKGRlc3RydWN0b3JzLHZhbHVlKXtyZXR1cm4gX19lbXZhbF9yZWdpc3Rlcih2YWx1ZSl9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIF9lbWJpbmRfcmVwcih2KXtpZih2PT09bnVsbCl7cmV0dXJuXCJudWxsXCJ9dmFyIHQ9dHlwZW9mIHY7aWYodD09PVwib2JqZWN0XCJ8fHQ9PT1cImFycmF5XCJ8fHQ9PT1cImZ1bmN0aW9uXCIpe3JldHVybiB2LnRvU3RyaW5nKCl9ZWxzZXtyZXR1cm5cIlwiK3Z9fWZ1bmN0aW9uIGZsb2F0UmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaGlmdCl7c3dpdGNoKHNoaWZ0KXtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHBvaW50ZXIpe3JldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKEhFQVBGMzJbcG9pbnRlcj4+Ml0pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHBvaW50ZXIpe3JldHVybiB0aGlzW1wiZnJvbVdpcmVUeXBlXCJdKEhFQVBGNjRbcG9pbnRlcj4+M10pfTtkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGZsb2F0IHR5cGU6IFwiK25hbWUpfX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9mbG9hdChyYXdUeXBlLG5hbWUsc2l6ZSl7dmFyIHNoaWZ0PWdldFNoaWZ0RnJvbVNpemUoc2l6ZSk7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodHlwZW9mIHZhbHVlIT09XCJudW1iZXJcIiYmdHlwZW9mIHZhbHVlIT09XCJib29sZWFuXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IFwiJytfZW1iaW5kX3JlcHIodmFsdWUpKydcIiB0byAnK3RoaXMubmFtZSl9cmV0dXJuIHZhbHVlfSxcImFyZ1BhY2tBZHZhbmNlXCI6OCxcInJlYWRWYWx1ZUZyb21Qb2ludGVyXCI6ZmxvYXRSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0KSxkZXN0cnVjdG9yRnVuY3Rpb246bnVsbH0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uKG5hbWUsYXJnQ291bnQscmF3QXJnVHlwZXNBZGRyLHNpZ25hdHVyZSxyYXdJbnZva2VyLGZuKXt2YXIgYXJnVHlwZXM9aGVhcDMyVmVjdG9yVG9BcnJheShhcmdDb3VudCxyYXdBcmdUeXBlc0FkZHIpO25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtyYXdJbnZva2VyPWVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNpZ25hdHVyZSxyYXdJbnZva2VyKTtleHBvc2VQdWJsaWNTeW1ib2wobmFtZSxmdW5jdGlvbigpe3Rocm93VW5ib3VuZFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIFwiK25hbWUrXCIgZHVlIHRvIHVuYm91bmQgdHlwZXNcIixhcmdUeXBlcyl9LGFyZ0NvdW50LTEpO3doZW5EZXBlbmRlbnRUeXBlc0FyZVJlc29sdmVkKFtdLGFyZ1R5cGVzLGZ1bmN0aW9uKGFyZ1R5cGVzKXt2YXIgaW52b2tlckFyZ3NBcnJheT1bYXJnVHlwZXNbMF0sbnVsbF0uY29uY2F0KGFyZ1R5cGVzLnNsaWNlKDEpKTtyZXBsYWNlUHVibGljU3ltYm9sKG5hbWUsY3JhZnRJbnZva2VyRnVuY3Rpb24obmFtZSxpbnZva2VyQXJnc0FycmF5LG51bGwscmF3SW52b2tlcixmbiksYXJnQ291bnQtMSk7cmV0dXJuW119KX1mdW5jdGlvbiBpbnRlZ2VyUmVhZFZhbHVlRnJvbVBvaW50ZXIobmFtZSxzaGlmdCxzaWduZWQpe3N3aXRjaChzaGlmdCl7Y2FzZSAwOnJldHVybiBzaWduZWQ/ZnVuY3Rpb24gcmVhZFM4RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVA4W3BvaW50ZXJdfTpmdW5jdGlvbiByZWFkVThGcm9tUG9pbnRlcihwb2ludGVyKXtyZXR1cm4gSEVBUFU4W3BvaW50ZXJdfTtjYXNlIDE6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzE2RnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVAxNltwb2ludGVyPj4xXX06ZnVuY3Rpb24gcmVhZFUxNkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBIRUFQVTE2W3BvaW50ZXI+PjFdfTtjYXNlIDI6cmV0dXJuIHNpZ25lZD9mdW5jdGlvbiByZWFkUzMyRnJvbVBvaW50ZXIocG9pbnRlcil7cmV0dXJuIEhFQVAzMltwb2ludGVyPj4yXX06ZnVuY3Rpb24gcmVhZFUzMkZyb21Qb2ludGVyKHBvaW50ZXIpe3JldHVybiBIRUFQVTMyW3BvaW50ZXI+PjJdfTtkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGludGVnZXIgdHlwZTogXCIrbmFtZSl9fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIocHJpbWl0aXZlVHlwZSxuYW1lLHNpemUsbWluUmFuZ2UsbWF4UmFuZ2Upe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTtpZihtYXhSYW5nZT09PS0xKXttYXhSYW5nZT00Mjk0OTY3Mjk1fXZhciBzaGlmdD1nZXRTaGlmdEZyb21TaXplKHNpemUpO3ZhciBmcm9tV2lyZVR5cGU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiB2YWx1ZX07aWYobWluUmFuZ2U9PT0wKXt2YXIgYml0c2hpZnQ9MzItOCpzaXplO2Zyb21XaXJlVHlwZT1mdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHZhbHVlPDxiaXRzaGlmdD4+PmJpdHNoaWZ0fX12YXIgaXNVbnNpZ25lZFR5cGU9bmFtZS5pbmNsdWRlcyhcInVuc2lnbmVkXCIpO3JlZ2lzdGVyVHlwZShwcmltaXRpdmVUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpmcm9tV2lyZVR5cGUsXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsdmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCImJnR5cGVvZiB2YWx1ZSE9PVwiYm9vbGVhblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgdG8gJyt0aGlzLm5hbWUpfWlmKHZhbHVlPG1pblJhbmdlfHx2YWx1ZT5tYXhSYW5nZSl7dGhyb3cgbmV3IFR5cGVFcnJvcignUGFzc2luZyBhIG51bWJlciBcIicrX2VtYmluZF9yZXByKHZhbHVlKSsnXCIgZnJvbSBKUyBzaWRlIHRvIEMvQysrIHNpZGUgdG8gYW4gYXJndW1lbnQgb2YgdHlwZSBcIicrbmFtZSsnXCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFsnK21pblJhbmdlK1wiLCBcIittYXhSYW5nZStcIl0hXCIpfXJldHVybiBpc1Vuc2lnbmVkVHlwZT92YWx1ZT4+PjA6dmFsdWV8MH0sXCJhcmdQYWNrQWR2YW5jZVwiOjgsXCJyZWFkVmFsdWVGcm9tUG9pbnRlclwiOmludGVnZXJSZWFkVmFsdWVGcm9tUG9pbnRlcihuYW1lLHNoaWZ0LG1pblJhbmdlIT09MCksZGVzdHJ1Y3RvckZ1bmN0aW9uOm51bGx9KX1mdW5jdGlvbiBfX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyhyYXdUeXBlLGRhdGFUeXBlSW5kZXgsbmFtZSl7dmFyIHR5cGVNYXBwaW5nPVtJbnQ4QXJyYXksVWludDhBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheV07dmFyIFRBPXR5cGVNYXBwaW5nW2RhdGFUeXBlSW5kZXhdO2Z1bmN0aW9uIGRlY29kZU1lbW9yeVZpZXcoaGFuZGxlKXtoYW5kbGU9aGFuZGxlPj4yO3ZhciBoZWFwPUhFQVBVMzI7dmFyIHNpemU9aGVhcFtoYW5kbGVdO3ZhciBkYXRhPWhlYXBbaGFuZGxlKzFdO3JldHVybiBuZXcgVEEoYnVmZmVyLGRhdGEsc2l6ZSl9bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3JlZ2lzdGVyVHlwZShyYXdUeXBlLHtuYW1lOm5hbWUsXCJmcm9tV2lyZVR5cGVcIjpkZWNvZGVNZW1vcnlWaWV3LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpkZWNvZGVNZW1vcnlWaWV3fSx7aWdub3JlRHVwbGljYXRlUmVnaXN0cmF0aW9uczp0cnVlfSl9ZnVuY3Rpb24gX19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZyhyYXdUeXBlLG5hbWUpe25hbWU9cmVhZExhdGluMVN0cmluZyhuYW1lKTt2YXIgc3RkU3RyaW5nSXNVVEY4PW5hbWU9PT1cInN0ZDo6c3RyaW5nXCI7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBzdHI7aWYoc3RkU3RyaW5nSXNVVEY4KXt2YXIgZGVjb2RlU3RhcnRQdHI9dmFsdWUrNDtmb3IodmFyIGk9MDtpPD1sZW5ndGg7KytpKXt2YXIgY3VycmVudEJ5dGVQdHI9dmFsdWUrNCtpO2lmKGk9PWxlbmd0aHx8SEVBUFU4W2N1cnJlbnRCeXRlUHRyXT09MCl7dmFyIG1heFJlYWQ9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9VVRGOFRvU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWQpO2lmKHN0cj09PXVuZGVmaW5lZCl7c3RyPXN0cmluZ1NlZ21lbnR9ZWxzZXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoMCk7c3RyKz1zdHJpbmdTZWdtZW50fWRlY29kZVN0YXJ0UHRyPWN1cnJlbnRCeXRlUHRyKzF9fX1lbHNle3ZhciBhPW5ldyBBcnJheShsZW5ndGgpO2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7YVtpXT1TdHJpbmcuZnJvbUNoYXJDb2RlKEhFQVBVOFt2YWx1ZSs0K2ldKX1zdHI9YS5qb2luKFwiXCIpfV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7dmFsdWU9bmV3IFVpbnQ4QXJyYXkodmFsdWUpfXZhciBnZXRMZW5ndGg7dmFyIHZhbHVlSXNPZlR5cGVTdHJpbmc9dHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIjtpZighKHZhbHVlSXNPZlR5cGVTdHJpbmd8fHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8dmFsdWUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpKXt0aHJvd0JpbmRpbmdFcnJvcihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIil9aWYoc3RkU3RyaW5nSXNVVEY4JiZ2YWx1ZUlzT2ZUeXBlU3RyaW5nKXtnZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gbGVuZ3RoQnl0ZXNVVEY4KHZhbHVlKX19ZWxzZXtnZXRMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdmFsdWUubGVuZ3RofX12YXIgbGVuZ3RoPWdldExlbmd0aCgpO3ZhciBwdHI9X21hbGxvYyg0K2xlbmd0aCsxKTtIRUFQVTMyW3B0cj4+Ml09bGVuZ3RoO2lmKHN0ZFN0cmluZ0lzVVRGOCYmdmFsdWVJc09mVHlwZVN0cmluZyl7c3RyaW5nVG9VVEY4KHZhbHVlLHB0cis0LGxlbmd0aCsxKX1lbHNle2lmKHZhbHVlSXNPZlR5cGVTdHJpbmcpe2Zvcih2YXIgaT0wO2k8bGVuZ3RoOysraSl7dmFyIGNoYXJDb2RlPXZhbHVlLmNoYXJDb2RlQXQoaSk7aWYoY2hhckNvZGU+MjU1KXtfZnJlZShwdHIpO3Rocm93QmluZGluZ0Vycm9yKFwiU3RyaW5nIGhhcyBVVEYtMTYgY29kZSB1bml0cyB0aGF0IGRvIG5vdCBmaXQgaW4gOCBiaXRzXCIpfUhFQVBVOFtwdHIrNCtpXT1jaGFyQ29kZX19ZWxzZXtmb3IodmFyIGk9MDtpPGxlbmd0aDsrK2kpe0hFQVBVOFtwdHIrNCtpXT12YWx1ZVtpXX19fWlmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nKHJhd1R5cGUsY2hhclNpemUsbmFtZSl7bmFtZT1yZWFkTGF0aW4xU3RyaW5nKG5hbWUpO3ZhciBkZWNvZGVTdHJpbmcsZW5jb2RlU3RyaW5nLGdldEhlYXAsbGVuZ3RoQnl0ZXNVVEYsc2hpZnQ7aWYoY2hhclNpemU9PT0yKXtkZWNvZGVTdHJpbmc9VVRGMTZUb1N0cmluZztlbmNvZGVTdHJpbmc9c3RyaW5nVG9VVEYxNjtsZW5ndGhCeXRlc1VURj1sZW5ndGhCeXRlc1VURjE2O2dldEhlYXA9ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUFUxNn07c2hpZnQ9MX1lbHNlIGlmKGNoYXJTaXplPT09NCl7ZGVjb2RlU3RyaW5nPVVURjMyVG9TdHJpbmc7ZW5jb2RlU3RyaW5nPXN0cmluZ1RvVVRGMzI7bGVuZ3RoQnl0ZXNVVEY9bGVuZ3RoQnl0ZXNVVEYzMjtnZXRIZWFwPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVBVMzJ9O3NoaWZ0PTJ9cmVnaXN0ZXJUeXBlKHJhd1R5cGUse25hbWU6bmFtZSxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKHZhbHVlKXt2YXIgbGVuZ3RoPUhFQVBVMzJbdmFsdWU+PjJdO3ZhciBIRUFQPWdldEhlYXAoKTt2YXIgc3RyO3ZhciBkZWNvZGVTdGFydFB0cj12YWx1ZSs0O2Zvcih2YXIgaT0wO2k8PWxlbmd0aDsrK2kpe3ZhciBjdXJyZW50Qnl0ZVB0cj12YWx1ZSs0K2kqY2hhclNpemU7aWYoaT09bGVuZ3RofHxIRUFQW2N1cnJlbnRCeXRlUHRyPj5zaGlmdF09PTApe3ZhciBtYXhSZWFkQnl0ZXM9Y3VycmVudEJ5dGVQdHItZGVjb2RlU3RhcnRQdHI7dmFyIHN0cmluZ1NlZ21lbnQ9ZGVjb2RlU3RyaW5nKGRlY29kZVN0YXJ0UHRyLG1heFJlYWRCeXRlcyk7aWYoc3RyPT09dW5kZWZpbmVkKXtzdHI9c3RyaW5nU2VnbWVudH1lbHNle3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKTtzdHIrPXN0cmluZ1NlZ21lbnR9ZGVjb2RlU3RhcnRQdHI9Y3VycmVudEJ5dGVQdHIrY2hhclNpemV9fV9mcmVlKHZhbHVlKTtyZXR1cm4gc3RyfSxcInRvV2lyZVR5cGVcIjpmdW5jdGlvbihkZXN0cnVjdG9ycyx2YWx1ZSl7aWYoISh0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKSl7dGhyb3dCaW5kaW5nRXJyb3IoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSBcIituYW1lKX12YXIgbGVuZ3RoPWxlbmd0aEJ5dGVzVVRGKHZhbHVlKTt2YXIgcHRyPV9tYWxsb2MoNCtsZW5ndGgrY2hhclNpemUpO0hFQVBVMzJbcHRyPj4yXT1sZW5ndGg+PnNoaWZ0O2VuY29kZVN0cmluZyh2YWx1ZSxwdHIrNCxsZW5ndGgrY2hhclNpemUpO2lmKGRlc3RydWN0b3JzIT09bnVsbCl7ZGVzdHJ1Y3RvcnMucHVzaChfZnJlZSxwdHIpfXJldHVybiBwdHJ9LFwiYXJnUGFja0FkdmFuY2VcIjo4LFwicmVhZFZhbHVlRnJvbVBvaW50ZXJcIjpzaW1wbGVSZWFkVmFsdWVGcm9tUG9pbnRlcixkZXN0cnVjdG9yRnVuY3Rpb246ZnVuY3Rpb24ocHRyKXtfZnJlZShwdHIpfX0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdChyYXdUeXBlLG5hbWUsY29uc3RydWN0b3JTaWduYXR1cmUscmF3Q29uc3RydWN0b3IsZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKXtzdHJ1Y3RSZWdpc3RyYXRpb25zW3Jhd1R5cGVdPXtuYW1lOnJlYWRMYXRpbjFTdHJpbmcobmFtZSkscmF3Q29uc3RydWN0b3I6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oY29uc3RydWN0b3JTaWduYXR1cmUscmF3Q29uc3RydWN0b3IpLHJhd0Rlc3RydWN0b3I6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZGVzdHJ1Y3RvclNpZ25hdHVyZSxyYXdEZXN0cnVjdG9yKSxmaWVsZHM6W119fWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZChzdHJ1Y3RUeXBlLGZpZWxkTmFtZSxnZXR0ZXJSZXR1cm5UeXBlLGdldHRlclNpZ25hdHVyZSxnZXR0ZXIsZ2V0dGVyQ29udGV4dCxzZXR0ZXJBcmd1bWVudFR5cGUsc2V0dGVyU2lnbmF0dXJlLHNldHRlcixzZXR0ZXJDb250ZXh0KXtzdHJ1Y3RSZWdpc3RyYXRpb25zW3N0cnVjdFR5cGVdLmZpZWxkcy5wdXNoKHtmaWVsZE5hbWU6cmVhZExhdGluMVN0cmluZyhmaWVsZE5hbWUpLGdldHRlclJldHVyblR5cGU6Z2V0dGVyUmV0dXJuVHlwZSxnZXR0ZXI6ZW1iaW5kX19yZXF1aXJlRnVuY3Rpb24oZ2V0dGVyU2lnbmF0dXJlLGdldHRlciksZ2V0dGVyQ29udGV4dDpnZXR0ZXJDb250ZXh0LHNldHRlckFyZ3VtZW50VHlwZTpzZXR0ZXJBcmd1bWVudFR5cGUsc2V0dGVyOmVtYmluZF9fcmVxdWlyZUZ1bmN0aW9uKHNldHRlclNpZ25hdHVyZSxzZXR0ZXIpLHNldHRlckNvbnRleHQ6c2V0dGVyQ29udGV4dH0pfWZ1bmN0aW9uIF9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQocmF3VHlwZSxuYW1lKXtuYW1lPXJlYWRMYXRpbjFTdHJpbmcobmFtZSk7cmVnaXN0ZXJUeXBlKHJhd1R5cGUse2lzVm9pZDp0cnVlLG5hbWU6bmFtZSxcImFyZ1BhY2tBZHZhbmNlXCI6MCxcImZyb21XaXJlVHlwZVwiOmZ1bmN0aW9uKCl7cmV0dXJuIHVuZGVmaW5lZH0sXCJ0b1dpcmVUeXBlXCI6ZnVuY3Rpb24oZGVzdHJ1Y3RvcnMsbyl7cmV0dXJuIHVuZGVmaW5lZH19KX1mdW5jdGlvbiBfX2VtdmFsX2luY3JlZihoYW5kbGUpe2lmKGhhbmRsZT40KXtlbXZhbF9oYW5kbGVfYXJyYXlbaGFuZGxlXS5yZWZjb3VudCs9MX19ZnVuY3Rpb24gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKHJhd1R5cGUsaHVtYW5OYW1lKXt2YXIgaW1wbD1yZWdpc3RlcmVkVHlwZXNbcmF3VHlwZV07aWYodW5kZWZpbmVkPT09aW1wbCl7dGhyb3dCaW5kaW5nRXJyb3IoaHVtYW5OYW1lK1wiIGhhcyB1bmtub3duIHR5cGUgXCIrZ2V0VHlwZU5hbWUocmF3VHlwZSkpfXJldHVybiBpbXBsfWZ1bmN0aW9uIF9fZW12YWxfdGFrZV92YWx1ZSh0eXBlLGFyZ3Ype3R5cGU9cmVxdWlyZVJlZ2lzdGVyZWRUeXBlKHR5cGUsXCJfZW12YWxfdGFrZV92YWx1ZVwiKTt2YXIgdj10eXBlW1wicmVhZFZhbHVlRnJvbVBvaW50ZXJcIl0oYXJndik7cmV0dXJuIF9fZW12YWxfcmVnaXN0ZXIodil9ZnVuY3Rpb24gX2Fib3J0KCl7YWJvcnQoKX12YXIgcmVhZEFzbUNvbnN0QXJnc0FycmF5PVtdO2Z1bmN0aW9uIHJlYWRBc21Db25zdEFyZ3Moc2lnUHRyLGJ1Zil7cmVhZEFzbUNvbnN0QXJnc0FycmF5Lmxlbmd0aD0wO3ZhciBjaDtidWY+Pj0yO3doaWxlKGNoPUhFQVBVOFtzaWdQdHIrK10pe3ZhciBkb3VibGU9Y2g8MTA1O2lmKGRvdWJsZSYmYnVmJjEpYnVmKys7cmVhZEFzbUNvbnN0QXJnc0FycmF5LnB1c2goZG91YmxlP0hFQVBGNjRbYnVmKys+PjFdOkhFQVAzMltidWZdKTsrK2J1Zn1yZXR1cm4gcmVhZEFzbUNvbnN0QXJnc0FycmF5fWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2FzbV9jb25zdF9pbnQoY29kZSxzaWdQdHIsYXJnYnVmKXt2YXIgYXJncz1yZWFkQXNtQ29uc3RBcmdzKHNpZ1B0cixhcmdidWYpO3JldHVybiBBU01fQ09OU1RTW2NvZGVdLmFwcGx5KG51bGwsYXJncyl9ZnVuY3Rpb24gX2xvbmdqbXAoZW52LHZhbHVlKXtfc2V0VGhyZXcoZW52LHZhbHVlfHwxKTt0aHJvd1wibG9uZ2ptcFwifWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2xvbmdqbXAoYTAsYTEpe3JldHVybiBfbG9uZ2ptcChhMCxhMSl9ZnVuY3Rpb24gZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihzaXplKXt0cnl7d2FzbU1lbW9yeS5ncm93KHNpemUtYnVmZmVyLmJ5dGVMZW5ndGgrNjU1MzU+Pj4xNik7dXBkYXRlR2xvYmFsQnVmZmVyQW5kVmlld3Mod2FzbU1lbW9yeS5idWZmZXIpO3JldHVybiAxfWNhdGNoKGUpe319ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAocmVxdWVzdGVkU2l6ZSl7dmFyIG9sZFNpemU9SEVBUFU4Lmxlbmd0aDtyZXF1ZXN0ZWRTaXplPXJlcXVlc3RlZFNpemU+Pj4wO3ZhciBtYXhIZWFwU2l6ZT0yMTQ3NDgzNjQ4O2lmKHJlcXVlc3RlZFNpemU+bWF4SGVhcFNpemUpe3JldHVybiBmYWxzZX1mb3IodmFyIGN1dERvd249MTtjdXREb3duPD00O2N1dERvd24qPTIpe3ZhciBvdmVyR3Jvd25IZWFwU2l6ZT1vbGRTaXplKigxKy4yL2N1dERvd24pO292ZXJHcm93bkhlYXBTaXplPU1hdGgubWluKG92ZXJHcm93bkhlYXBTaXplLHJlcXVlc3RlZFNpemUrMTAwNjYzMjk2KTt2YXIgbmV3U2l6ZT1NYXRoLm1pbihtYXhIZWFwU2l6ZSxhbGlnblVwKE1hdGgubWF4KHJlcXVlc3RlZFNpemUsb3Zlckdyb3duSGVhcFNpemUpLDY1NTM2KSk7dmFyIHJlcGxhY2VtZW50PWVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIobmV3U2l6ZSk7aWYocmVwbGFjZW1lbnQpe3JldHVybiB0cnVlfX1yZXR1cm4gZmFsc2V9dmFyIEVOVj17fTtmdW5jdGlvbiBnZXRFeGVjdXRhYmxlTmFtZSgpe3JldHVybiB0aGlzUHJvZ3JhbXx8XCIuL3RoaXMucHJvZ3JhbVwifWZ1bmN0aW9uIGdldEVudlN0cmluZ3MoKXtpZighZ2V0RW52U3RyaW5ncy5zdHJpbmdzKXt2YXIgbGFuZz0odHlwZW9mIG5hdmlnYXRvcj09PVwib2JqZWN0XCImJm5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFwiX1wiKStcIi5VVEYtOFwiO3ZhciBlbnY9e1wiVVNFUlwiOlwid2ViX3VzZXJcIixcIkxPR05BTUVcIjpcIndlYl91c2VyXCIsXCJQQVRIXCI6XCIvXCIsXCJQV0RcIjpcIi9cIixcIkhPTUVcIjpcIi9ob21lL3dlYl91c2VyXCIsXCJMQU5HXCI6bGFuZyxcIl9cIjpnZXRFeGVjdXRhYmxlTmFtZSgpfTtmb3IodmFyIHggaW4gRU5WKXtlbnZbeF09RU5WW3hdfXZhciBzdHJpbmdzPVtdO2Zvcih2YXIgeCBpbiBlbnYpe3N0cmluZ3MucHVzaCh4K1wiPVwiK2Vudlt4XSl9Z2V0RW52U3RyaW5ncy5zdHJpbmdzPXN0cmluZ3N9cmV0dXJuIGdldEVudlN0cmluZ3Muc3RyaW5nc31mdW5jdGlvbiBfZW52aXJvbl9nZXQoX19lbnZpcm9uLGVudmlyb25fYnVmKXt0cnl7dmFyIGJ1ZlNpemU9MDtnZXRFbnZTdHJpbmdzKCkuZm9yRWFjaChmdW5jdGlvbihzdHJpbmcsaSl7dmFyIHB0cj1lbnZpcm9uX2J1ZitidWZTaXplO0hFQVAzMltfX2Vudmlyb24raSo0Pj4yXT1wdHI7d3JpdGVBc2NpaVRvTWVtb3J5KHN0cmluZyxwdHIpO2J1ZlNpemUrPXN0cmluZy5sZW5ndGgrMX0pO3JldHVybiAwfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZW52aXJvbl9zaXplc19nZXQocGVudmlyb25fY291bnQscGVudmlyb25fYnVmX3NpemUpe3RyeXt2YXIgc3RyaW5ncz1nZXRFbnZTdHJpbmdzKCk7SEVBUDMyW3BlbnZpcm9uX2NvdW50Pj4yXT1zdHJpbmdzLmxlbmd0aDt2YXIgYnVmU2l6ZT0wO3N0cmluZ3MuZm9yRWFjaChmdW5jdGlvbihzdHJpbmcpe2J1ZlNpemUrPXN0cmluZy5sZW5ndGgrMX0pO0hFQVAzMltwZW52aXJvbl9idWZfc2l6ZT4+Ml09YnVmU2l6ZTtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4gZS5lcnJub319ZnVuY3Rpb24gX2V4aXQoc3RhdHVzKXtleGl0KHN0YXR1cyl9ZnVuY3Rpb24gX2ZkX2Nsb3NlKGZkKXt0cnl7dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO0ZTLmNsb3NlKHN0cmVhbSk7cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuIGUuZXJybm99fWZ1bmN0aW9uIF9mZF9yZWFkKGZkLGlvdixpb3ZjbnQscG51bSl7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTt2YXIgbnVtPVNZU0NBTExTLmRvUmVhZHYoc3RyZWFtLGlvdixpb3ZjbnQpO0hFQVAzMltwbnVtPj4yXT1udW07cmV0dXJuIDB9Y2F0Y2goZSl7aWYodHlwZW9mIEZTPT09XCJ1bmRlZmluZWRcInx8IShlIGluc3RhbmNlb2YgRlMuRXJybm9FcnJvcikpYWJvcnQoZSk7cmV0dXJuIGUuZXJybm99fWZ1bmN0aW9uIF9mZF9zZWVrKGZkLG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gsd2hlbmNlLG5ld09mZnNldCl7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTt2YXIgSElHSF9PRkZTRVQ9NDI5NDk2NzI5Njt2YXIgb2Zmc2V0PW9mZnNldF9oaWdoKkhJR0hfT0ZGU0VUKyhvZmZzZXRfbG93Pj4+MCk7dmFyIERPVUJMRV9MSU1JVD05MDA3MTk5MjU0NzQwOTkyO2lmKG9mZnNldDw9LURPVUJMRV9MSU1JVHx8b2Zmc2V0Pj1ET1VCTEVfTElNSVQpe3JldHVybi02MX1GUy5sbHNlZWsoc3RyZWFtLG9mZnNldCx3aGVuY2UpO3RlbXBJNjQ9W3N0cmVhbS5wb3NpdGlvbj4+PjAsKHRlbXBEb3VibGU9c3RyZWFtLnBvc2l0aW9uLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/KE1hdGgubWluKCtNYXRoLmZsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5NiksNDI5NDk2NzI5NSl8MCk+Pj4wOn5+K01hdGguY2VpbCgodGVtcERvdWJsZS0rKH5+dGVtcERvdWJsZT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEhFQVAzMltuZXdPZmZzZXQ+PjJdPXRlbXBJNjRbMF0sSEVBUDMyW25ld09mZnNldCs0Pj4yXT10ZW1wSTY0WzFdO2lmKHN0cmVhbS5nZXRkZW50cyYmb2Zmc2V0PT09MCYmd2hlbmNlPT09MClzdHJlYW0uZ2V0ZGVudHM9bnVsbDtyZXR1cm4gMH1jYXRjaChlKXtpZih0eXBlb2YgRlM9PT1cInVuZGVmaW5lZFwifHwhKGUgaW5zdGFuY2VvZiBGUy5FcnJub0Vycm9yKSlhYm9ydChlKTtyZXR1cm4gZS5lcnJub319ZnVuY3Rpb24gX2ZkX3dyaXRlKGZkLGlvdixpb3ZjbnQscG51bSl7dHJ5e3ZhciBzdHJlYW09U1lTQ0FMTFMuZ2V0U3RyZWFtRnJvbUZEKGZkKTt2YXIgbnVtPVNZU0NBTExTLmRvV3JpdGV2KHN0cmVhbSxpb3YsaW92Y250KTtIRUFQMzJbcG51bT4+Ml09bnVtO3JldHVybiAwfWNhdGNoKGUpe2lmKHR5cGVvZiBGUz09PVwidW5kZWZpbmVkXCJ8fCEoZSBpbnN0YW5jZW9mIEZTLkVycm5vRXJyb3IpKWFib3J0KGUpO3JldHVybiBlLmVycm5vfX1mdW5jdGlvbiBfZ2V0VGVtcFJldDAoKXtyZXR1cm4gZ2V0VGVtcFJldDAoKX1mdW5jdGlvbiBfZ2V0dGltZW9mZGF5KHB0cil7dmFyIG5vdz1EYXRlLm5vdygpO0hFQVAzMltwdHI+PjJdPW5vdy8xZTN8MDtIRUFQMzJbcHRyKzQ+PjJdPW5vdyUxZTMqMWUzfDA7cmV0dXJuIDB9ZnVuY3Rpb24gX3NldFRlbXBSZXQwKHZhbCl7c2V0VGVtcFJldDAodmFsKX1mdW5jdGlvbiBfX2lzTGVhcFllYXIoeWVhcil7cmV0dXJuIHllYXIlND09PTAmJih5ZWFyJTEwMCE9PTB8fHllYXIlNDAwPT09MCl9ZnVuY3Rpb24gX19hcnJheVN1bShhcnJheSxpbmRleCl7dmFyIHN1bT0wO2Zvcih2YXIgaT0wO2k8PWluZGV4O3N1bSs9YXJyYXlbaSsrXSl7fXJldHVybiBzdW19dmFyIF9fTU9OVEhfREFZU19MRUFQPVszMSwyOSwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07dmFyIF9fTU9OVEhfREFZU19SRUdVTEFSPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gX19hZGREYXlzKGRhdGUsZGF5cyl7dmFyIG5ld0RhdGU9bmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO3doaWxlKGRheXM+MCl7dmFyIGxlYXA9X19pc0xlYXBZZWFyKG5ld0RhdGUuZ2V0RnVsbFllYXIoKSk7dmFyIGN1cnJlbnRNb250aD1uZXdEYXRlLmdldE1vbnRoKCk7dmFyIGRheXNJbkN1cnJlbnRNb250aD0obGVhcD9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUilbY3VycmVudE1vbnRoXTtpZihkYXlzPmRheXNJbkN1cnJlbnRNb250aC1uZXdEYXRlLmdldERhdGUoKSl7ZGF5cy09ZGF5c0luQ3VycmVudE1vbnRoLW5ld0RhdGUuZ2V0RGF0ZSgpKzE7bmV3RGF0ZS5zZXREYXRlKDEpO2lmKGN1cnJlbnRNb250aDwxMSl7bmV3RGF0ZS5zZXRNb250aChjdXJyZW50TW9udGgrMSl9ZWxzZXtuZXdEYXRlLnNldE1vbnRoKDApO25ld0RhdGUuc2V0RnVsbFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpKzEpfX1lbHNle25ld0RhdGUuc2V0RGF0ZShuZXdEYXRlLmdldERhdGUoKStkYXlzKTtyZXR1cm4gbmV3RGF0ZX19cmV0dXJuIG5ld0RhdGV9ZnVuY3Rpb24gX3N0cmZ0aW1lKHMsbWF4c2l6ZSxmb3JtYXQsdG0pe3ZhciB0bV96b25lPUhFQVAzMlt0bSs0MD4+Ml07dmFyIGRhdGU9e3RtX3NlYzpIRUFQMzJbdG0+PjJdLHRtX21pbjpIRUFQMzJbdG0rND4+Ml0sdG1faG91cjpIRUFQMzJbdG0rOD4+Ml0sdG1fbWRheTpIRUFQMzJbdG0rMTI+PjJdLHRtX21vbjpIRUFQMzJbdG0rMTY+PjJdLHRtX3llYXI6SEVBUDMyW3RtKzIwPj4yXSx0bV93ZGF5OkhFQVAzMlt0bSsyND4+Ml0sdG1feWRheTpIRUFQMzJbdG0rMjg+PjJdLHRtX2lzZHN0OkhFQVAzMlt0bSszMj4+Ml0sdG1fZ210b2ZmOkhFQVAzMlt0bSszNj4+Ml0sdG1fem9uZTp0bV96b25lP1VURjhUb1N0cmluZyh0bV96b25lKTpcIlwifTt2YXIgcGF0dGVybj1VVEY4VG9TdHJpbmcoZm9ybWF0KTt2YXIgRVhQQU5TSU9OX1JVTEVTXzE9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcIiVYXCI6XCIlSDolTTolU1wiLFwiJUVjXCI6XCIlY1wiLFwiJUVDXCI6XCIlQ1wiLFwiJUV4XCI6XCIlbS8lZC8leVwiLFwiJUVYXCI6XCIlSDolTTolU1wiLFwiJUV5XCI6XCIleVwiLFwiJUVZXCI6XCIlWVwiLFwiJU9kXCI6XCIlZFwiLFwiJU9lXCI6XCIlZVwiLFwiJU9IXCI6XCIlSFwiLFwiJU9JXCI6XCIlSVwiLFwiJU9tXCI6XCIlbVwiLFwiJU9NXCI6XCIlTVwiLFwiJU9TXCI6XCIlU1wiLFwiJU91XCI6XCIldVwiLFwiJU9VXCI6XCIlVVwiLFwiJU9WXCI6XCIlVlwiLFwiJU93XCI6XCIld1wiLFwiJU9XXCI6XCIlV1wiLFwiJU95XCI6XCIleVwifTtmb3IodmFyIHJ1bGUgaW4gRVhQQU5TSU9OX1JVTEVTXzEpe3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSxcImdcIiksRVhQQU5TSU9OX1JVTEVTXzFbcnVsZV0pfXZhciBXRUVLREFZUz1bXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXTt2YXIgTU9OVEhTPVtcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXTtmdW5jdGlvbiBsZWFkaW5nU29tZXRoaW5nKHZhbHVlLGRpZ2l0cyxjaGFyYWN0ZXIpe3ZhciBzdHI9dHlwZW9mIHZhbHVlPT09XCJudW1iZXJcIj92YWx1ZS50b1N0cmluZygpOnZhbHVlfHxcIlwiO3doaWxlKHN0ci5sZW5ndGg8ZGlnaXRzKXtzdHI9Y2hhcmFjdGVyWzBdK3N0cn1yZXR1cm4gc3RyfWZ1bmN0aW9uIGxlYWRpbmdOdWxscyh2YWx1ZSxkaWdpdHMpe3JldHVybiBsZWFkaW5nU29tZXRoaW5nKHZhbHVlLGRpZ2l0cyxcIjBcIil9ZnVuY3Rpb24gY29tcGFyZUJ5RGF5KGRhdGUxLGRhdGUyKXtmdW5jdGlvbiBzZ24odmFsdWUpe3JldHVybiB2YWx1ZTwwPy0xOnZhbHVlPjA/MTowfXZhciBjb21wYXJlO2lmKChjb21wYXJlPXNnbihkYXRlMS5nZXRGdWxsWWVhcigpLWRhdGUyLmdldEZ1bGxZZWFyKCkpKT09PTApe2lmKChjb21wYXJlPXNnbihkYXRlMS5nZXRNb250aCgpLWRhdGUyLmdldE1vbnRoKCkpKT09PTApe2NvbXBhcmU9c2duKGRhdGUxLmdldERhdGUoKS1kYXRlMi5nZXREYXRlKCkpfX1yZXR1cm4gY29tcGFyZX1mdW5jdGlvbiBnZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoKXtzd2l0Y2goamFuRm91cnRoLmdldERheSgpKXtjYXNlIDA6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gamFuRm91cnRoO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksMCwzKTtjYXNlIDM6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLDAsMik7Y2FzZSA0OnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwwLDEpO2Nhc2UgNTpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKS0xLDExLDMwKX19ZnVuY3Rpb24gZ2V0V2Vla0Jhc2VkWWVhcihkYXRlKXt2YXIgdGhpc0RhdGU9X19hZGREYXlzKG5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAwLDAsMSksZGF0ZS50bV95ZGF5KTt2YXIgamFuRm91cnRoVGhpc1llYXI9bmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSwwLDQpO3ZhciBqYW5Gb3VydGhOZXh0WWVhcj1uZXcgRGF0ZSh0aGlzRGF0ZS5nZXRGdWxsWWVhcigpKzEsMCw0KTt2YXIgZmlyc3RXZWVrU3RhcnRUaGlzWWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoVGhpc1llYXIpO3ZhciBmaXJzdFdlZWtTdGFydE5leHRZZWFyPWdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGhOZXh0WWVhcik7aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0VGhpc1llYXIsdGhpc0RhdGUpPD0wKXtpZihjb21wYXJlQnlEYXkoZmlyc3RXZWVrU3RhcnROZXh0WWVhcix0aGlzRGF0ZSk8PTApe3JldHVybiB0aGlzRGF0ZS5nZXRGdWxsWWVhcigpKzF9ZWxzZXtyZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKX19ZWxzZXtyZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKS0xfX12YXIgRVhQQU5TSU9OX1JVTEVTXzI9e1wiJWFcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XS5zdWJzdHJpbmcoMCwzKX0sXCIlQVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBXRUVLREFZU1tkYXRlLnRtX3dkYXldfSxcIiViXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl0uc3Vic3RyaW5nKDAsMyl9LFwiJUJcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gTU9OVEhTW2RhdGUudG1fbW9uXX0sXCIlQ1wiOmZ1bmN0aW9uKGRhdGUpe3ZhciB5ZWFyPWRhdGUudG1feWVhcisxOTAwO3JldHVybiBsZWFkaW5nTnVsbHMoeWVhci8xMDB8MCwyKX0sXCIlZFwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5LDIpfSxcIiVlXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdTb21ldGhpbmcoZGF0ZS50bV9tZGF5LDIsXCIgXCIpfSxcIiVnXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMil9LFwiJUdcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZ2V0V2Vla0Jhc2VkWWVhcihkYXRlKX0sXCIlSFwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9ob3VyLDIpfSxcIiVJXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIHR3ZWx2ZUhvdXI9ZGF0ZS50bV9ob3VyO2lmKHR3ZWx2ZUhvdXI9PTApdHdlbHZlSG91cj0xMjtlbHNlIGlmKHR3ZWx2ZUhvdXI+MTIpdHdlbHZlSG91ci09MTI7cmV0dXJuIGxlYWRpbmdOdWxscyh0d2VsdmVIb3VyLDIpfSxcIiVqXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21kYXkrX19hcnJheVN1bShfX2lzTGVhcFllYXIoZGF0ZS50bV95ZWFyKzE5MDApP19fTU9OVEhfREFZU19MRUFQOl9fTU9OVEhfREFZU19SRUdVTEFSLGRhdGUudG1fbW9uLTEpLDMpfSxcIiVtXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21vbisxLDIpfSxcIiVNXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21pbiwyKX0sXCIlblwiOmZ1bmN0aW9uKCl7cmV0dXJuXCJcXG5cIn0sXCIlcFwiOmZ1bmN0aW9uKGRhdGUpe2lmKGRhdGUudG1faG91cj49MCYmZGF0ZS50bV9ob3VyPDEyKXtyZXR1cm5cIkFNXCJ9ZWxzZXtyZXR1cm5cIlBNXCJ9fSxcIiVTXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX3NlYywyKX0sXCIldFwiOmZ1bmN0aW9uKCl7cmV0dXJuXCJcXHRcIn0sXCIldVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3dkYXl8fDd9LFwiJVVcIjpmdW5jdGlvbihkYXRlKXt2YXIgamFuRmlyc3Q9bmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDAsMCwxKTt2YXIgZmlyc3RTdW5kYXk9amFuRmlyc3QuZ2V0RGF5KCk9PT0wP2phbkZpcnN0Ol9fYWRkRGF5cyhqYW5GaXJzdCw3LWphbkZpcnN0LmdldERheSgpKTt2YXIgZW5kRGF0ZT1uZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCxkYXRlLnRtX21vbixkYXRlLnRtX21kYXkpO2lmKGNvbXBhcmVCeURheShmaXJzdFN1bmRheSxlbmREYXRlKTwwKXt2YXIgZmVicnVhcnlGaXJzdFVudGlsRW5kTW9udGg9X19hcnJheVN1bShfX2lzTGVhcFllYXIoZW5kRGF0ZS5nZXRGdWxsWWVhcigpKT9fX01PTlRIX0RBWVNfTEVBUDpfX01PTlRIX0RBWVNfUkVHVUxBUixlbmREYXRlLmdldE1vbnRoKCktMSktMzE7dmFyIGZpcnN0U3VuZGF5VW50aWxFbmRKYW51YXJ5PTMxLWZpcnN0U3VuZGF5LmdldERhdGUoKTt2YXIgZGF5cz1maXJzdFN1bmRheVVudGlsRW5kSmFudWFyeStmZWJydWFyeUZpcnN0VW50aWxFbmRNb250aCtlbmREYXRlLmdldERhdGUoKTtyZXR1cm4gbGVhZGluZ051bGxzKE1hdGguY2VpbChkYXlzLzcpLDIpfXJldHVybiBjb21wYXJlQnlEYXkoZmlyc3RTdW5kYXksamFuRmlyc3QpPT09MD9cIjAxXCI6XCIwMFwifSxcIiVWXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGphbkZvdXJ0aFRoaXNZZWFyPW5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAwLDAsNCk7dmFyIGphbkZvdXJ0aE5leHRZZWFyPW5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAxLDAsNCk7dmFyIGZpcnN0V2Vla1N0YXJ0VGhpc1llYXI9Z2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aFRoaXNZZWFyKTt2YXIgZmlyc3RXZWVrU3RhcnROZXh0WWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoTmV4dFllYXIpO3ZhciBlbmREYXRlPV9fYWRkRGF5cyhuZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCwwLDEpLGRhdGUudG1feWRheSk7aWYoY29tcGFyZUJ5RGF5KGVuZERhdGUsZmlyc3RXZWVrU3RhcnRUaGlzWWVhcik8MCl7cmV0dXJuXCI1M1wifWlmKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydE5leHRZZWFyLGVuZERhdGUpPD0wKXtyZXR1cm5cIjAxXCJ9dmFyIGRheXNEaWZmZXJlbmNlO2lmKGZpcnN0V2Vla1N0YXJ0VGhpc1llYXIuZ2V0RnVsbFllYXIoKTxkYXRlLnRtX3llYXIrMTkwMCl7ZGF5c0RpZmZlcmVuY2U9ZGF0ZS50bV95ZGF5KzMyLWZpcnN0V2Vla1N0YXJ0VGhpc1llYXIuZ2V0RGF0ZSgpfWVsc2V7ZGF5c0RpZmZlcmVuY2U9ZGF0ZS50bV95ZGF5KzEtZmlyc3RXZWVrU3RhcnRUaGlzWWVhci5nZXREYXRlKCl9cmV0dXJuIGxlYWRpbmdOdWxscyhNYXRoLmNlaWwoZGF5c0RpZmZlcmVuY2UvNyksMil9LFwiJXdcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV93ZGF5fSxcIiVXXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGphbkZpcnN0PW5ldyBEYXRlKGRhdGUudG1feWVhciwwLDEpO3ZhciBmaXJzdE1vbmRheT1qYW5GaXJzdC5nZXREYXkoKT09PTE/amFuRmlyc3Q6X19hZGREYXlzKGphbkZpcnN0LGphbkZpcnN0LmdldERheSgpPT09MD8xOjctamFuRmlyc3QuZ2V0RGF5KCkrMSk7dmFyIGVuZERhdGU9bmV3IERhdGUoZGF0ZS50bV95ZWFyKzE5MDAsZGF0ZS50bV9tb24sZGF0ZS50bV9tZGF5KTtpZihjb21wYXJlQnlEYXkoZmlyc3RNb25kYXksZW5kRGF0ZSk8MCl7dmFyIGZlYnJ1YXJ5Rmlyc3RVbnRpbEVuZE1vbnRoPV9fYXJyYXlTdW0oX19pc0xlYXBZZWFyKGVuZERhdGUuZ2V0RnVsbFllYXIoKSk/X19NT05USF9EQVlTX0xFQVA6X19NT05USF9EQVlTX1JFR1VMQVIsZW5kRGF0ZS5nZXRNb250aCgpLTEpLTMxO3ZhciBmaXJzdE1vbmRheVVudGlsRW5kSmFudWFyeT0zMS1maXJzdE1vbmRheS5nZXREYXRlKCk7dmFyIGRheXM9Zmlyc3RNb25kYXlVbnRpbEVuZEphbnVhcnkrZmVicnVhcnlGaXJzdFVudGlsRW5kTW9udGgrZW5kRGF0ZS5nZXREYXRlKCk7cmV0dXJuIGxlYWRpbmdOdWxscyhNYXRoLmNlaWwoZGF5cy83KSwyKX1yZXR1cm4gY29tcGFyZUJ5RGF5KGZpcnN0TW9uZGF5LGphbkZpcnN0KT09PTA/XCIwMVwiOlwiMDBcIn0sXCIleVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybihkYXRlLnRtX3llYXIrMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMil9LFwiJVlcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV95ZWFyKzE5MDB9LFwiJXpcIjpmdW5jdGlvbihkYXRlKXt2YXIgb2ZmPWRhdGUudG1fZ210b2ZmO3ZhciBhaGVhZD1vZmY+PTA7b2ZmPU1hdGguYWJzKG9mZikvNjA7b2ZmPW9mZi82MCoxMDArb2ZmJTYwO3JldHVybihhaGVhZD9cIitcIjpcIi1cIikrU3RyaW5nKFwiMDAwMFwiK29mZikuc2xpY2UoLTQpfSxcIiVaXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGRhdGUudG1fem9uZX0sXCIlJVwiOmZ1bmN0aW9uKCl7cmV0dXJuXCIlXCJ9fTtmb3IodmFyIHJ1bGUgaW4gRVhQQU5TSU9OX1JVTEVTXzIpe2lmKHBhdHRlcm4uaW5jbHVkZXMocnVsZSkpe3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSxcImdcIiksRVhQQU5TSU9OX1JVTEVTXzJbcnVsZV0oZGF0ZSkpfX12YXIgYnl0ZXM9aW50QXJyYXlGcm9tU3RyaW5nKHBhdHRlcm4sZmFsc2UpO2lmKGJ5dGVzLmxlbmd0aD5tYXhzaXplKXtyZXR1cm4gMH13cml0ZUFycmF5VG9NZW1vcnkoYnl0ZXMscyk7cmV0dXJuIGJ5dGVzLmxlbmd0aC0xfWZ1bmN0aW9uIF9zdHJmdGltZV9sKHMsbWF4c2l6ZSxmb3JtYXQsdG0pe3JldHVybiBfc3RyZnRpbWUocyxtYXhzaXplLGZvcm1hdCx0bSl9ZnVuY3Rpb24gX3RpbWUocHRyKXt2YXIgcmV0PURhdGUubm93KCkvMWUzfDA7aWYocHRyKXtIRUFQMzJbcHRyPj4yXT1yZXR9cmV0dXJuIHJldH12YXIgRlNOb2RlPWZ1bmN0aW9uKHBhcmVudCxuYW1lLG1vZGUscmRldil7aWYoIXBhcmVudCl7cGFyZW50PXRoaXN9dGhpcy5wYXJlbnQ9cGFyZW50O3RoaXMubW91bnQ9cGFyZW50Lm1vdW50O3RoaXMubW91bnRlZD1udWxsO3RoaXMuaWQ9RlMubmV4dElub2RlKys7dGhpcy5uYW1lPW5hbWU7dGhpcy5tb2RlPW1vZGU7dGhpcy5ub2RlX29wcz17fTt0aGlzLnN0cmVhbV9vcHM9e307dGhpcy5yZGV2PXJkZXZ9O3ZhciByZWFkTW9kZT0yOTJ8NzM7dmFyIHdyaXRlTW9kZT0xNDY7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRlNOb2RlLnByb3RvdHlwZSx7cmVhZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMubW9kZSZyZWFkTW9kZSk9PT1yZWFkTW9kZX0sc2V0OmZ1bmN0aW9uKHZhbCl7dmFsP3RoaXMubW9kZXw9cmVhZE1vZGU6dGhpcy5tb2RlJj1+cmVhZE1vZGV9fSx3cml0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMubW9kZSZ3cml0ZU1vZGUpPT09d3JpdGVNb2RlfSxzZXQ6ZnVuY3Rpb24odmFsKXt2YWw/dGhpcy5tb2RlfD13cml0ZU1vZGU6dGhpcy5tb2RlJj1+d3JpdGVNb2RlfX0saXNGb2xkZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiBGUy5pc0Rpcih0aGlzLm1vZGUpfX0saXNEZXZpY2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBGUy5pc0NocmRldih0aGlzLm1vZGUpfX19KTtGUy5GU05vZGU9RlNOb2RlO0ZTLnN0YXRpY0luaXQoKTtJbnRlcm5hbEVycm9yPU1vZHVsZVtcIkludGVybmFsRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJJbnRlcm5hbEVycm9yXCIpO2VtYmluZF9pbml0X2NoYXJDb2RlcygpO0JpbmRpbmdFcnJvcj1Nb2R1bGVbXCJCaW5kaW5nRXJyb3JcIl09ZXh0ZW5kRXJyb3IoRXJyb3IsXCJCaW5kaW5nRXJyb3JcIik7aW5pdF9DbGFzc0hhbmRsZSgpO2luaXRfUmVnaXN0ZXJlZFBvaW50ZXIoKTtpbml0X2VtYmluZCgpO1VuYm91bmRUeXBlRXJyb3I9TW9kdWxlW1wiVW5ib3VuZFR5cGVFcnJvclwiXT1leHRlbmRFcnJvcihFcnJvcixcIlVuYm91bmRUeXBlRXJyb3JcIik7aW5pdF9lbXZhbCgpO3ZhciBBU1NFUlRJT05TPWZhbHNlO2Z1bmN0aW9uIGludEFycmF5RnJvbVN0cmluZyhzdHJpbmd5LGRvbnRBZGROdWxsLGxlbmd0aCl7dmFyIGxlbj1sZW5ndGg+MD9sZW5ndGg6bGVuZ3RoQnl0ZXNVVEY4KHN0cmluZ3kpKzE7dmFyIHU4YXJyYXk9bmV3IEFycmF5KGxlbik7dmFyIG51bUJ5dGVzV3JpdHRlbj1zdHJpbmdUb1VURjhBcnJheShzdHJpbmd5LHU4YXJyYXksMCx1OGFycmF5Lmxlbmd0aCk7aWYoZG9udEFkZE51bGwpdThhcnJheS5sZW5ndGg9bnVtQnl0ZXNXcml0dGVuO3JldHVybiB1OGFycmF5fWZ1bmN0aW9uIGludEFycmF5VG9TdHJpbmcoYXJyYXkpe3ZhciByZXQ9W107Zm9yKHZhciBpPTA7aTxhcnJheS5sZW5ndGg7aSsrKXt2YXIgY2hyPWFycmF5W2ldO2lmKGNocj4yNTUpe2lmKEFTU0VSVElPTlMpe2Fzc2VydChmYWxzZSxcIkNoYXJhY3RlciBjb2RlIFwiK2NocitcIiAoXCIrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpK1wiKSAgYXQgb2Zmc2V0IFwiK2krXCIgbm90IGluIDB4MDAtMHhGRi5cIil9Y2hyJj0yNTV9cmV0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpKX1yZXR1cm4gcmV0LmpvaW4oXCJcIil9dmFyIGRlY29kZUJhc2U2ND10eXBlb2YgYXRvYj09PVwiZnVuY3Rpb25cIj9hdG9iOmZ1bmN0aW9uKGlucHV0KXt2YXIga2V5U3RyPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjt2YXIgb3V0cHV0PVwiXCI7dmFyIGNocjEsY2hyMixjaHIzO3ZhciBlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9aW5wdXQucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csXCJcIik7ZG97ZW5jMT1rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jMj1rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jMz1rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jND1rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7Y2hyMT1lbmMxPDwyfGVuYzI+PjQ7Y2hyMj0oZW5jMiYxNSk8PDR8ZW5jMz4+MjtjaHIzPShlbmMzJjMpPDw2fGVuYzQ7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjEpO2lmKGVuYzMhPT02NCl7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpfWlmKGVuYzQhPT02NCl7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjMpfX13aGlsZShpPGlucHV0Lmxlbmd0aCk7cmV0dXJuIG91dHB1dH07ZnVuY3Rpb24gaW50QXJyYXlGcm9tQmFzZTY0KHMpe2lmKHR5cGVvZiBFTlZJUk9OTUVOVF9JU19OT0RFPT09XCJib29sZWFuXCImJkVOVklST05NRU5UX0lTX05PREUpe3ZhciBidWY7dHJ5e2J1Zj1CdWZmZXIuZnJvbShzLFwiYmFzZTY0XCIpfWNhdGNoKF8pe2J1Zj1uZXcgQnVmZmVyKHMsXCJiYXNlNjRcIil9cmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZltcImJ1ZmZlclwiXSxidWZbXCJieXRlT2Zmc2V0XCJdLGJ1ZltcImJ5dGVMZW5ndGhcIl0pfXRyeXt2YXIgZGVjb2RlZD1kZWNvZGVCYXNlNjQocyk7dmFyIGJ5dGVzPW5ldyBVaW50OEFycmF5KGRlY29kZWQubGVuZ3RoKTtmb3IodmFyIGk9MDtpPGRlY29kZWQubGVuZ3RoOysraSl7Ynl0ZXNbaV09ZGVjb2RlZC5jaGFyQ29kZUF0KGkpfXJldHVybiBieXRlc31jYXRjaChfKXt0aHJvdyBuZXcgRXJyb3IoXCJDb252ZXJ0aW5nIGJhc2U2NCBzdHJpbmcgdG8gYnl0ZXMgZmFpbGVkLlwiKX19ZnVuY3Rpb24gdHJ5UGFyc2VBc0RhdGFVUkkoZmlsZW5hbWUpe2lmKCFpc0RhdGFVUkkoZmlsZW5hbWUpKXtyZXR1cm59cmV0dXJuIGludEFycmF5RnJvbUJhc2U2NChmaWxlbmFtZS5zbGljZShkYXRhVVJJUHJlZml4Lmxlbmd0aCkpfXZhciBhc21MaWJyYXJ5QXJnPXtcImpcIjpfX19jeGFfYWxsb2NhdGVfZXhjZXB0aW9uLFwiaVwiOl9fX2N4YV90aHJvdyxcIktcIjpfX19sb2NhbHRpbWVfcixcInFcIjpfX19zeXNfZmNudGw2NCxcIk1cIjpfX19zeXNfaW9jdGwsXCJOXCI6X19fc3lzX29wZW4sXCJUXCI6X19lbWJpbmRfZmluYWxpemVfdmFsdWVfb2JqZWN0LFwiRlwiOl9fZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludCxcIlBcIjpfX2VtYmluZF9yZWdpc3Rlcl9ib29sLFwieFwiOl9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzLFwidlwiOl9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NvbnN0cnVjdG9yLFwiZ1wiOl9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uLFwid1wiOl9fZW1iaW5kX3JlZ2lzdGVyX2NvbnN0YW50LFwiT1wiOl9fZW1iaW5kX3JlZ2lzdGVyX2VtdmFsLFwic1wiOl9fZW1iaW5kX3JlZ2lzdGVyX2Zsb2F0LFwiZlwiOl9fZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uLFwiaFwiOl9fZW1iaW5kX3JlZ2lzdGVyX2ludGVnZXIsXCJlXCI6X19lbWJpbmRfcmVnaXN0ZXJfbWVtb3J5X3ZpZXcsXCJ0XCI6X19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZyxcIm5cIjpfX2VtYmluZF9yZWdpc3Rlcl9zdGRfd3N0cmluZyxcIlZcIjpfX2VtYmluZF9yZWdpc3Rlcl92YWx1ZV9vYmplY3QsXCJVXCI6X19lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkLFwiUVwiOl9fZW1iaW5kX3JlZ2lzdGVyX3ZvaWQsXCJSXCI6X19lbXZhbF9kZWNyZWYsXCJTXCI6X19lbXZhbF9pbmNyZWYsXCJ1XCI6X19lbXZhbF90YWtlX3ZhbHVlLFwiYVwiOl9hYm9ydCxcIm9cIjpfZW1zY3JpcHRlbl9hc21fY29uc3RfaW50LFwia1wiOl9lbXNjcmlwdGVuX2xvbmdqbXAsXCJHXCI6X2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAsXCJJXCI6X2Vudmlyb25fZ2V0LFwiSlwiOl9lbnZpcm9uX3NpemVzX2dldCxcImJcIjpfZXhpdCxcInJcIjpfZmRfY2xvc2UsXCJMXCI6X2ZkX3JlYWQsXCJFXCI6X2ZkX3NlZWssXCJwXCI6X2ZkX3dyaXRlLFwiZFwiOl9nZXRUZW1wUmV0MCxcInlcIjpfZ2V0dGltZW9mZGF5LFwiQVwiOmludm9rZV9paSxcIkJcIjppbnZva2VfaWlpLFwiWFwiOmludm9rZV9paWlpLFwibFwiOmludm9rZV92aSxcIkNcIjppbnZva2VfdmlpLFwiRFwiOmludm9rZV92aWlpLFwibVwiOmludm9rZV92aWlpaSxcImNcIjpfc2V0VGVtcFJldDAsXCJXXCI6X3N0cmZ0aW1lLFwiSFwiOl9zdHJmdGltZV9sLFwielwiOl90aW1lfTt2YXIgYXNtPWNyZWF0ZVdhc20oKTt2YXIgX19fd2FzbV9jYWxsX2N0b3JzPU1vZHVsZVtcIl9fX3dhc21fY2FsbF9jdG9yc1wiXT1mdW5jdGlvbigpe3JldHVybihfX193YXNtX2NhbGxfY3RvcnM9TW9kdWxlW1wiX19fd2FzbV9jYWxsX2N0b3JzXCJdPU1vZHVsZVtcImFzbVwiXVtcIlpcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiX1wiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2ZyZWU9TW9kdWxlW1wiX2ZyZWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiJFwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX19fZXJybm9fbG9jYXRpb249TW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZXJybm9fbG9jYXRpb249TW9kdWxlW1wiX19fZXJybm9fbG9jYXRpb25cIl09TW9kdWxlW1wiYXNtXCJdW1wiYWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2dldFR5cGVOYW1lPU1vZHVsZVtcIl9fX2dldFR5cGVOYW1lXCJdPU1vZHVsZVtcImFzbVwiXVtcImNhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzPU1vZHVsZVtcIl9fX2VtYmluZF9yZWdpc3Rlcl9uYXRpdmVfYW5kX2J1aWx0aW5fdHlwZXNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX19fZW1iaW5kX3JlZ2lzdGVyX25hdGl2ZV9hbmRfYnVpbHRpbl90eXBlcz1Nb2R1bGVbXCJfX19lbWJpbmRfcmVnaXN0ZXJfbmF0aXZlX2FuZF9idWlsdGluX3R5cGVzXCJdPU1vZHVsZVtcImFzbVwiXVtcImRhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2dldF90em5hbWU9TW9kdWxlW1wiX19nZXRfdHpuYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fZ2V0X3R6bmFtZT1Nb2R1bGVbXCJfX2dldF90em5hbWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiZWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fZ2V0X2RheWxpZ2h0PU1vZHVsZVtcIl9fZ2V0X2RheWxpZ2h0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9fZ2V0X2RheWxpZ2h0PU1vZHVsZVtcIl9fZ2V0X2RheWxpZ2h0XCJdPU1vZHVsZVtcImFzbVwiXVtcImZhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX2dldF90aW1lem9uZT1Nb2R1bGVbXCJfX2dldF90aW1lem9uZVwiXT1mdW5jdGlvbigpe3JldHVybihfX2dldF90aW1lem9uZT1Nb2R1bGVbXCJfX2dldF90aW1lem9uZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJnYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgc3RhY2tTYXZlPU1vZHVsZVtcInN0YWNrU2F2ZVwiXT1mdW5jdGlvbigpe3JldHVybihzdGFja1NhdmU9TW9kdWxlW1wic3RhY2tTYXZlXCJdPU1vZHVsZVtcImFzbVwiXVtcImhhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja1Jlc3RvcmU9TW9kdWxlW1wic3RhY2tSZXN0b3JlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKHN0YWNrUmVzdG9yZT1Nb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09TW9kdWxlW1wiYXNtXCJdW1wiaWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9zZXRUaHJldz1Nb2R1bGVbXCJfc2V0VGhyZXdcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX3NldFRocmV3PU1vZHVsZVtcIl9zZXRUaHJld1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJqYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9qaWppPU1vZHVsZVtcImR5bkNhbGxfamlqaVwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX2ppamk9TW9kdWxlW1wiZHluQ2FsbF9qaWppXCJdPU1vZHVsZVtcImFzbVwiXVtcImthXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBkeW5DYWxsX3ZpaWppaT1Nb2R1bGVbXCJkeW5DYWxsX3ZpaWppaVwiXT1mdW5jdGlvbigpe3JldHVybihkeW5DYWxsX3ZpaWppaT1Nb2R1bGVbXCJkeW5DYWxsX3ZpaWppaVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJsYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9paWlpaWo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9paWlpaWo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWpcIl09TW9kdWxlW1wiYXNtXCJdW1wibWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIGR5bkNhbGxfaWlpaWlqaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpampcIl09ZnVuY3Rpb24oKXtyZXR1cm4oZHluQ2FsbF9paWlpaWpqPU1vZHVsZVtcImR5bkNhbGxfaWlpaWlqalwiXT1Nb2R1bGVbXCJhc21cIl1bXCJuYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgZHluQ2FsbF9paWlpaWlqaj1Nb2R1bGVbXCJkeW5DYWxsX2lpaWlpaWpqXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKGR5bkNhbGxfaWlpaWlpamo9TW9kdWxlW1wiZHluQ2FsbF9paWlpaWlqalwiXT1Nb2R1bGVbXCJhc21cIl1bXCJvYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtmdW5jdGlvbiBpbnZva2VfaWkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7cmV0dXJuIHdhc21UYWJsZS5nZXQoaW5kZXgpKGExKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmkoaW5kZXgsYTEpe3ZhciBzcD1zdGFja1NhdmUoKTt0cnl7d2FzbVRhYmxlLmdldChpbmRleCkoYTEpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fWZ1bmN0aW9uIGludm9rZV92aWlpKGluZGV4LGExLGEyLGEzKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfdmlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyKX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpKGluZGV4LGExLGEyKXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3JldHVybiB3YXNtVGFibGUuZ2V0KGluZGV4KShhMSxhMil9Y2F0Y2goZSl7c3RhY2tSZXN0b3JlKHNwKTtpZihlIT09ZSswJiZlIT09XCJsb25nam1wXCIpdGhyb3cgZTtfc2V0VGhyZXcoMSwwKX19ZnVuY3Rpb24gaW52b2tlX3ZpaWlpKGluZGV4LGExLGEyLGEzLGE0KXt2YXIgc3A9c3RhY2tTYXZlKCk7dHJ5e3dhc21UYWJsZS5nZXQoaW5kZXgpKGExLGEyLGEzLGE0KX1jYXRjaChlKXtzdGFja1Jlc3RvcmUoc3ApO2lmKGUhPT1lKzAmJmUhPT1cImxvbmdqbXBcIil0aHJvdyBlO19zZXRUaHJldygxLDApfX1mdW5jdGlvbiBpbnZva2VfaWlpaShpbmRleCxhMSxhMixhMyl7dmFyIHNwPXN0YWNrU2F2ZSgpO3RyeXtyZXR1cm4gd2FzbVRhYmxlLmdldChpbmRleCkoYTEsYTIsYTMpfWNhdGNoKGUpe3N0YWNrUmVzdG9yZShzcCk7aWYoZSE9PWUrMCYmZSE9PVwibG9uZ2ptcFwiKXRocm93IGU7X3NldFRocmV3KDEsMCl9fU1vZHVsZVtcIkZTXCJdPUZTO3ZhciBjYWxsZWRSdW47ZnVuY3Rpb24gRXhpdFN0YXR1cyhzdGF0dXMpe3RoaXMubmFtZT1cIkV4aXRTdGF0dXNcIjt0aGlzLm1lc3NhZ2U9XCJQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KFwiK3N0YXR1cytcIilcIjt0aGlzLnN0YXR1cz1zdGF0dXN9ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFjYWxsZWRSdW4pcnVuKCk7aWYoIWNhbGxlZFJ1bilkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyfTtmdW5jdGlvbiBydW4oYXJncyl7YXJncz1hcmdzfHxhcmd1bWVudHNfO2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59cHJlUnVuKCk7aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1mdW5jdGlvbiBkb1J1bigpe2lmKGNhbGxlZFJ1bilyZXR1cm47Y2FsbGVkUnVuPXRydWU7TW9kdWxlW1wiY2FsbGVkUnVuXCJdPXRydWU7aWYoQUJPUlQpcmV0dXJuO2luaXRSdW50aW1lKCk7cmVhZHlQcm9taXNlUmVzb2x2ZShNb2R1bGUpO2lmKE1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKU1vZHVsZVtcIm9uUnVudGltZUluaXRpYWxpemVkXCJdKCk7cG9zdFJ1bigpfWlmKE1vZHVsZVtcInNldFN0YXR1c1wiXSl7TW9kdWxlW1wic2V0U3RhdHVzXCJdKFwiUnVubmluZy4uLlwiKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlwiKX0sMSk7ZG9SdW4oKX0sMSl9ZWxzZXtkb1J1bigpfX1Nb2R1bGVbXCJydW5cIl09cnVuO2Z1bmN0aW9uIGV4aXQoc3RhdHVzLGltcGxpY2l0KXtFWElUU1RBVFVTPXN0YXR1cztpZihpbXBsaWNpdCYma2VlcFJ1bnRpbWVBbGl2ZSgpJiZzdGF0dXM9PT0wKXtyZXR1cm59aWYoa2VlcFJ1bnRpbWVBbGl2ZSgpKXt9ZWxzZXtleGl0UnVudGltZSgpO2lmKE1vZHVsZVtcIm9uRXhpdFwiXSlNb2R1bGVbXCJvbkV4aXRcIl0oc3RhdHVzKTtBQk9SVD10cnVlfXF1aXRfKHN0YXR1cyxuZXcgRXhpdFN0YXR1cyhzdGF0dXMpKX1pZihNb2R1bGVbXCJwcmVJbml0XCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicHJlSW5pdFwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZUluaXRcIl09W01vZHVsZVtcInByZUluaXRcIl1dO3doaWxlKE1vZHVsZVtcInByZUluaXRcIl0ubGVuZ3RoPjApe01vZHVsZVtcInByZUluaXRcIl0ucG9wKCkoKX19cnVuKCk7XG5cblxuICByZXR1cm4gTW9kdWxlLnJlYWR5XG59XG4pO1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IE1vZHVsZTsiLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgY29uZmlnLnRyYW5zaXRpb25hbCAmJiBjb25maWcudHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyAnRVRJTUVET1VUJyA6ICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDoge1xuICAgIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG4gIH0sXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGtnID0gcmVxdWlyZSgnLi8uLi8uLi9wYWNrYWdlLmpzb24nKTtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcbnZhciBjdXJyZW50VmVyQXJyID0gcGtnLnZlcnNpb24uc3BsaXQoJy4nKTtcblxuLyoqXG4gKiBDb21wYXJlIHBhY2thZ2UgdmVyc2lvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IHRoYW5WZXJzaW9uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNPbGRlclZlcnNpb24odmVyc2lvbiwgdGhhblZlcnNpb24pIHtcbiAgdmFyIHBrZ1ZlcnNpb25BcnIgPSB0aGFuVmVyc2lvbiA/IHRoYW5WZXJzaW9uLnNwbGl0KCcuJykgOiBjdXJyZW50VmVyQXJyO1xuICB2YXIgZGVzdFZlciA9IHZlcnNpb24uc3BsaXQoJy4nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICBpZiAocGtnVmVyc2lvbkFycltpXSA+IGRlc3RWZXJbaV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGtnVmVyc2lvbkFycltpXSA8IGRlc3RWZXJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIHZhciBpc0RlcHJlY2F0ZWQgPSB2ZXJzaW9uICYmIGlzT2xkZXJWZXJzaW9uKHZlcnNpb24pO1xuXG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBwa2cudmVyc2lvbiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCBpbiAnICsgdmVyc2lvbikpO1xuICAgIH1cblxuICAgIGlmIChpc0RlcHJlY2F0ZWQgJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzT2xkZXJWZXJzaW9uOiBpc09sZGVyVmVyc2lvbixcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsIi8qXG4gKiAgQVJDb250cm9sbGVyTkZULnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IEFSVG9vbGtpdE5GVCBmcm9tICcuL0FSVG9vbGtpdE5GVCdcblxuaW50ZXJmYWNlIE9wdGlvbnMge1xuICBjYW52YXM6IG51bGwsXG4gIG9yaWVudGF0aW9uOiBzdHJpbmcsXG59XG5cbmludGVyZmFjZSBJbWFnZU9iaiB7XG4gIHZpZGVvV2lkdGg6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgdmlkZW9IZWlnaHQ6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIGRhdGE6IFVpbnQ4Q2xhbXBlZEFycmF5LFxufVxuXG5pbnRlcmZhY2UgZGVsZWdhdGVNZXRob2RzIHtcbiAgICBzZXR1cDoge1xuICAgICAgICAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbWVyYUlkOiBudW1iZXIpOiBudW1iZXJcbiAgICB9XG4gICAgc2V0dXBBUjI6IHtcbiAgICAgIChpZDogbnVtYmVyKTogdm9pZFxuICAgIH1cbiAgICBzZXREZWJ1Z01vZGU6ICAoaWQ6IG51bWJlciwgbW9kZTogYm9vbGVhbikgPT4gbnVtYmVyO1xuICAgIGdldERlYnVnTW9kZTogKGlkOiBudW1iZXIpID0+IGJvb2xlYW47XG4gICAgZ2V0UHJvY2Vzc2luZ0ltYWdlOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIHNldExvZ0xldmVsOiAobW9kZTogYm9vbGVhbikgPT4gbnVtYmVyO1xuICAgIGdldExvZ0xldmVsOiAoKSA9PiBudW1iZXI7XG4gICAgZnJhbWVNYWxsb2M6IHtcbiAgICAgICBmcmFtZXBvaW50ZXI6IG51bWJlcjtcbiAgICAgICBmcmFtZXNpemU6IG51bWJlcjtcbiAgICAgICB2aWRlb0x1bWFQb2ludGVyOiBudW1iZXI7XG4gICAgICAgY2FtZXJhOiBudW1iZXI7XG4gICAgICAgdHJhbnNmb3JtOiBudW1iZXJcbiAgICB9XG4gICAgaW5zdGFuY2U6IHtcbiAgICAgIEhFQVBVODoge1xuICAgICAgICBidWZmZXI6IFVpbnQ4QXJyYXlcbiAgICAgIH07XG4gICAgfVxuICAgIE5GVE1hcmtlckluZm86IHtcbiAgICAgIGVycm9yOiBudW1iZXI7XG4gICAgICBmb3VuZDogbnVtYmVyO1xuICAgICAgaWQ6IG51bWJlcixcbiAgICAgIHBvc2U6IEZsb2F0NjRBcnJheTtcbiAgICB9O1xuICAgIGxvYWRDYW1lcmE6IChjYW1lcmFQYXJhbTogc3RyaW5nKSA9PiBQcm9taXNlPG51bWJlcj47XG4gICAgc2V0UHJvamVjdGlvbk5lYXJQbGFuZToge1xuICAgICAgKGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIH1cbiAgICBnZXRQcm9qZWN0aW9uTmVhclBsYW5lOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIHNldFByb2plY3Rpb25GYXJQbGFuZTogKGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gICAgZ2V0UHJvamVjdGlvbkZhclBsYW5lOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIHNldFRocmVzaG9sZE1vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBnZXRUaHJlc2hvbGRNb2RlOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIHNldFRocmVzaG9sZDogKGlkOiBudW1iZXIsIHRocmVzaG9sZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZ2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIGFkZE5GVE1hcmtlcnM6IChhcklkOiBudW1iZXIsIHVybHM6IEFycmF5PHN0cmluZz4sIGNhbGxiYWNrOiAoZmlsZW5hbWU6IGFueSkgPT4gdm9pZCwgb25FcnJvcjI6ICggZXJyb3JOdW1iZXI6IGFueSkgPT4gdm9pZCkgPT4gW3tpZDogbnVtYmVyfV07XG4gICAgZGV0ZWN0TWFya2VyOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIGRldGVjdE5GVE1hcmtlcjogKGFySWQ6IG51bWJlcikgPT4gdm9pZDtcbiAgICBnZXRORlRNYXJrZXI6IChpZDogbnVtYmVyLCBtYXJrZXJJbmRleDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZ2V0TkZURGF0YTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBzZXRJbWFnZVByb2NNb2RlOiAoaWQ6IG51bWJlciwgbW9kZTogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZ2V0SW1hZ2VQcm9jTW9kZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQVJDb250cm9sbGVyTkZUIHtcbiAgLy8gcHJpdmF0ZSBkZWNsYXJhdGlvbnNcbiAgcHJpdmF0ZSBvcHRpb25zID0ge30gYXMgT3B0aW9ucztcbiAgcHJpdmF0ZSBpZDogbnVtYmVyO1xuICBwcml2YXRlIHdpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgaGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgaW1hZ2U6IGFueTtcbiAgcHJpdmF0ZSBvcmllbnRhdGlvbjogc3RyaW5nO1xuICBwcml2YXRlIGNhbWVyYVBhcmFtOiBzdHJpbmc7XG4gIHByaXZhdGUgY2FtZXJhSWQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBjYW1lcmFMb2FkZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgYXJ0b29sa2l0TkZUOiBkZWxlZ2F0ZU1ldGhvZHM7XG4gIHByaXZhdGUgbGlzdGVuZXJzOiBvYmplY3Q7XG4gIHByaXZhdGUgbmZ0TWFya2Vyczogb2JqZWN0O1xuICBwcml2YXRlIHRyYW5zZm9ybV9tYXQ6IEZsb2F0NjRBcnJheTtcbiAgcHJpdmF0ZSBtYXJrZXJfdHJhbnNmb3JtX21hdDogRmxvYXQ2NEFycmF5O1xuICBwcml2YXRlIHRyYW5zZm9ybUdMX1JIOiBGbG9hdDY0QXJyYXk7XG4gIHByaXZhdGUgdmlkZW9XaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIHZpZGVvSGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgdmlkZW9TaXplOiBudW1iZXI7XG4gIHByaXZhdGUgZnJhbWVwb2ludGVyOiBudW1iZXI7XG4gIHByaXZhdGUgZnJhbWVzaXplOiBudW1iZXI7XG4gIHByaXZhdGUgZGF0YUhlYXA6IFVpbnQ4QXJyYXk7XG4gIHByaXZhdGUgdmlkZW9MdW1hOiBVaW50OEFycmF5O1xuICBwcml2YXRlIGNhbWVyYV9tYXQ6IEZsb2F0NjRBcnJheTtcbiAgcHJpdmF0ZSB2aWRlb0x1bWFQb2ludGVyOiBudW1iZXI7XG4gIHByaXZhdGUgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgcHJpdmF0ZSBuZnRNYXJrZXJGb3VuZDogYm9vbGVhbjsvLyA9IGZhbHNlXG4gIHByaXZhdGUgbmZ0TWFya2VyRm91bmRUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgbmZ0TWFya2VyQ291bnQ6IG51bWJlcjsvLyA9IDBcbiAgcHJpdmF0ZSBkZWZhdWx0TWFya2VyV2lkdGg6IG51bWJlcjtcblxuICBwcml2YXRlIF9id3BvaW50ZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIEFSQ29udHJvbGxlck5GVCBjb25zdHJ1Y3Rvci4gSXQgaGFzIDQgcGFyYW1zIChzZWUgYWJvdmUpLlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBpbml0aWFsaXplZDpcbiAgICogb3B0aW9ucywgaWQsIHdpZHRoLCBoZWlnaHQsIGltYWdlLCBvcmllbnRhdGlvbiwgY2FtZXJhUGFyYW0sIGNhbWVyYUlkLFxuICAgKiBjYW1lcmFMb2FkZWQsIGFydG9vbGtpdE5GVCwgbGlzdGVuZXJzLCBuZnRNYXJrZXJzLCB0cmFuc2Zvcm1fbWF0LFxuICAgKiB0cmFuc2Zvcm1HTF9SSCwgbWFya2VyX3RyYW5zZm9ybV9tYXQsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0LCB2aWRlb1NpemUsXG4gICAqIGZyYW1lcG9pbnRlciwgZnJhbWVzaXplLCBkYXRhSGVhcCwgdmlkZW9MdW1hLCBjYW1lcmFfbWF0LCB2aWRlb0x1bWFQb2ludGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYW1lcmFQYXJhbVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjYW1lcmFQYXJhbTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KSB7XG4gICAgLy8gcmVhZCBzZXR0aW5nc1xuICAgIHRoaXMub3B0aW9ucyA9IHsuLi57XG4gICAgICAgIGNhbnZhczogbnVsbCxcbiAgICAgICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnXG4gICAgICB9LC4uLm9wdGlvbnN9O1xuXG4gICAgLy8gbm8gcG9pbnQgaW4gaW5pdGlhbGl6aW5nIGEgbWVtYmVyIGFzIFwidW5kZWZpbmVkXCJcbiAgICAvLyByZXBsYWNlZCBpdCB3aXRoIC0xXG4gICAgdGhpcy5pZCA9IC0xXG5cbiAgICB0aGlzLndpZHRoID0gd2lkdGhcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodFxuXG4gICAgLy8gaG9sZHMgYW4gaW1hZ2UgaW4gY2FzZSB0aGUgaW5zdGFuY2Ugd2FzIGluaXRpYWxpemVkIHdpdGggYW4gaW1hZ2VcbiAgICB0aGlzLmltYWdlXG5cbiAgICAvLyBkZWZhdWx0IGNhbWVyYSBvcmllbnRhdGlvblxuICAgIHRoaXMub3JpZW50YXRpb24gPSB0aGlzLm9wdGlvbnMub3JpZW50YXRpb25cblxuICAgIC8vIHRoaXMgaXMgYSByZXBsYWNlbWVudCBmb3IgQVJDYW1lcmFQYXJhbVxuICAgIHRoaXMuY2FtZXJhUGFyYW0gPSBjYW1lcmFQYXJhbVxuICAgIHRoaXMuY2FtZXJhSWQgPSAtMVxuICAgIHRoaXMuY2FtZXJhTG9hZGVkID0gZmFsc2VcblxuICAgIC8vIHRvb2xraXQgaW5zdGFuY2VcbiAgICB0aGlzLmFydG9vbGtpdE5GVFxuXG4gICAgLy8gdG8gcmVnaXN0ZXIgb2JzZXJ2ZXJzIGFzIGV2ZW50IGxpc3RlbmVyc1xuICAgIHRoaXMubGlzdGVuZXJzID0ge31cblxuICAgIHRoaXMubmZ0TWFya2VycyA9IHt9XG5cbiAgICB0aGlzLnRyYW5zZm9ybV9tYXQgPSBuZXcgRmxvYXQ2NEFycmF5KDE2KVxuICAgIHRoaXMudHJhbnNmb3JtR0xfUkggPSBuZXcgRmxvYXQ2NEFycmF5KDE2KVxuICAgIHRoaXMubWFya2VyX3RyYW5zZm9ybV9tYXQgPSBudWxsXG5cbiAgICB0aGlzLnZpZGVvV2lkdGggPSB3aWR0aFxuICAgIHRoaXMudmlkZW9IZWlnaHQgPSBoZWlnaHRcbiAgICB0aGlzLnZpZGVvU2l6ZSA9IHRoaXMudmlkZW9XaWR0aCAqIHRoaXMudmlkZW9IZWlnaHRcblxuICAgIHRoaXMuZnJhbWVwb2ludGVyID0gbnVsbFxuICAgIHRoaXMuZnJhbWVzaXplID0gbnVsbFxuICAgIHRoaXMuZGF0YUhlYXAgPSBudWxsXG4gICAgdGhpcy52aWRlb0x1bWEgPSBudWxsXG4gICAgdGhpcy5jYW1lcmFfbWF0ID0gbnVsbFxuICAgIHRoaXMudmlkZW9MdW1hUG9pbnRlciA9IG51bGxcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2FudmFzKSB7XG4gICAgICAvLyBpbiBjYXNlIHlvdSB1c2UgTm9kZS5qcywgY3JlYXRlIGEgY2FudmFzIHdpdGggbm9kZS1jYW52YXNcbiAgICAgIHRoaXMuY2FudmFzID0gdGhpcy5vcHRpb25zLmNhbnZhc1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gdHJ5IGNyZWF0aW5nIGEgY2FudmFzIGZyb20gZG9jdW1lbnRcbiAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnRcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoXG4gICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHRcbiAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ05vIGNhbnZhcyBhdmFpbGFibGUnKVxuICAgIH1cblxuICAgIC8vIHRoaXMgaXMgdG8gd29ya2Fyb3VuZCB0aGUgaW50cm9kdWN0aW9uIG9mIFwic2VsZlwiIHZhcmlhYmxlXG4gICAgdGhpcy5uZnRNYXJrZXJGb3VuZCA9IGZhbHNlXG4gICAgdGhpcy5uZnRNYXJrZXJGb3VuZFRpbWUgPSAwXG4gICAgdGhpcy5uZnRNYXJrZXJDb3VudCA9IDBcblxuICAgIHRoaXMuX2J3cG9pbnRlciA9IG51bGxcbiAgICB0aGlzLmRlZmF1bHRNYXJrZXJXaWR0aCA9IDFcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBpbml0V2l0aERpbWVuc2lvbnMgKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjYW1lcmFQYXJhbTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KSB7XG4gICAgLy8gZGlyZWN0bHkgaW5pdCB3aXRoIGdpdmVuIHdpZHRoIC8gaGVpZ2h0XG4gICAgY29uc3QgYXJDb250cm9sbGVyTkZUID0gbmV3IEFSQ29udHJvbGxlck5GVCh3aWR0aCwgaGVpZ2h0LCBjYW1lcmFQYXJhbSwgb3B0aW9ucylcbiAgICByZXR1cm4gYXdhaXQgYXJDb250cm9sbGVyTkZULl9pbml0aWFsaXplKClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBpbml0V2l0aEltYWdlIChpbWFnZTogSW1hZ2VPYmosIGNhbWVyYVBhcmFtOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpIHtcbiAgICBjb25zdCB3aWR0aCA9IGltYWdlLnZpZGVvV2lkdGggfHwgaW1hZ2Uud2lkdGhcbiAgICBjb25zdCBoZWlnaHQgPSBpbWFnZS52aWRlb0hlaWdodCB8fCBpbWFnZS5oZWlnaHRcbiAgICBjb25zdCBhckNvbnRyb2xsZXJORlQgPSBuZXcgQVJDb250cm9sbGVyTkZUKHdpZHRoLCBoZWlnaHQsIGNhbWVyYVBhcmFtLCBvcHRpb25zKVxuICAgIGFyQ29udHJvbGxlck5GVC5pbWFnZSA9IGltYWdlXG4gICAgcmV0dXJuIGF3YWl0IGFyQ29udHJvbGxlck5GVC5faW5pdGlhbGl6ZSgpXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBvbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IG1ldGhvZCBpbnNpZGUgQVJDb250cm9sbGVyTkZULiBJdCBkZXRlY3QgdGhlIG1hcmtlclxuICAgKiBhbmQgZGlzcGF0Y2ggaW50ZXJuYWxseSB3aXRoIHRoZSBnZXRORlRNYXJrZXIgZXZlbnQgbGlzdGVuZXIgdGhlIE5GVE1hcmtlckluZm9cbiAgICogc3RydWN0IG9iamVjdCBvZiB0aGUgdHJhY2tlZCBORlQgTWFya2Vycy5cbiAgICogQHBhcmFtIHtpbWFnZX0gaW1hZ2Ugb3IgaW1hZ2UgZGF0YVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcHJvY2VzcyAoaW1hZ2U6IEltYWdlT2JqKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuZGV0ZWN0TWFya2VyKGltYWdlKVxuICAgIGlmIChyZXN1bHQgIT0gMCkge1xuICAgICAgY29uc29sZS5lcnJvcignW0FSQ29udHJvbGxlck5GVF0nLCAnZGV0ZWN0TWFya2VyIGVycm9yOicsIHJlc3VsdClcbiAgICB9XG5cbiAgICBsZXQgaywgb1xuXG4gICAgLy8gZ2V0IE5GVCBtYXJrZXJzXG4gICAgZm9yIChrIGluIHRoaXMubmZ0TWFya2Vycykge1xuICAgICAgbyA9IHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1trXVxuICAgICAgby5pblByZXZpb3VzID0gby5pbkN1cnJlbnRcbiAgICAgIG8uaW5DdXJyZW50ID0gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBkZXRlY3QgTkZUIG1hcmtlcnNcbiAgICBsZXQgbmZ0TWFya2VyQ291bnQgPSB0aGlzLm5mdE1hcmtlckNvdW50XG4gICAgdGhpcy5kZXRlY3RORlRNYXJrZXIoKVxuXG4gICAgLy8gaW4gbXNcbiAgICBjb25zdCBNQVJLRVJfTE9TVF9USU1FID0gMjAwXG4gICAgLy9jb25zb2xlLmxvZyhuZnRNYXJrZXJDb3VudCk7XG4gICAgXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5mdE1hcmtlckNvdW50OyBpKyspIHtcbiAgICAgIFxuICAgICAgbGV0IG5mdE1hcmtlckluZm8gPSB0aGlzLmdldE5GVE1hcmtlcihpKVxuICAgICAgXG4gICAgICBsZXQgbWFya2VyVHlwZSA9IEFSVG9vbGtpdE5GVC5ORlRfTUFSS0VSXG5cbiAgICAgIGlmIChuZnRNYXJrZXJJbmZvLmZvdW5kKSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLm5mdE1hcmtlckZvdW5kID0gaVxuICAgICAgICB0aGlzLm5mdE1hcmtlckZvdW5kVGltZSA9IERhdGUubm93KClcblxuICAgICAgICBsZXQgdmlzaWJsZSA9IHRoaXMudHJhY2tORlRNYXJrZXJJZChpKVxuICAgICAgICB2aXNpYmxlLm1hdHJpeC5zZXQobmZ0TWFya2VySW5mby5wb3NlKVxuICAgICAgICB2aXNpYmxlLmluQ3VycmVudCA9IHRydWVcbiAgICAgICAgdGhpcy50cmFuc01hdFRvR0xNYXQodmlzaWJsZS5tYXRyaXgsIHRoaXMudHJhbnNmb3JtX21hdClcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1HTF9SSCA9IHRoaXMuYXJnbENhbWVyYVZpZXdSSGYodGhpcy50cmFuc2Zvcm1fbWF0KVxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIG5hbWU6ICdnZXRORlRNYXJrZXInLFxuICAgICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIHR5cGU6IG1hcmtlclR5cGUsXG4gICAgICAgICAgICBtYXJrZXI6IG5mdE1hcmtlckluZm8sXG4gICAgICAgICAgICBtYXRyaXg6IHRoaXMudHJhbnNmb3JtX21hdCxcbiAgICAgICAgICAgIG1hdHJpeEdMX1JIOiB0aGlzLnRyYW5zZm9ybUdMX1JIXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICB9IGVsc2UgaWYgKHNlbGYubmZ0TWFya2VyRm91bmQgPT09IGkpIHtcbiAgICAgICAgLy8gZm9yIG5vdyB0aGlzIG1hcmtlciBmb3VuZC9sb3N0IGV2ZW50cyBoYW5kbGluZyBpcyBmb3Igb25lIG1hcmtlciBhdCBhIHRpbWVcbiAgICAgICAgaWYgKChEYXRlLm5vdygpIC0gdGhpcy5uZnRNYXJrZXJGb3VuZFRpbWUpID4gTUFSS0VSX0xPU1RfVElNRSkge1xuICAgICAgICAgIHRoaXMubmZ0TWFya2VyRm91bmQgPSBmYWxzZVxuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBuYW1lOiAnbG9zdE5GVE1hcmtlcicsXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICB0eXBlOiBtYXJrZXJUeXBlLFxuICAgICAgICAgICAgICBtYXJrZXI6IG5mdE1hcmtlckluZm8sXG4gICAgICAgICAgICAgIG1hdHJpeDogdGhpcy50cmFuc2Zvcm1fbWF0LFxuICAgICAgICAgICAgICBtYXRyaXhHTF9SSDogdGhpcy50cmFuc2Zvcm1HTF9SSFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyppZiAodGhpcy5fYndwb2ludGVyKSB7XG4gICAgICB0aGlzLmRlYnVnRHJhdygpXG4gICAgfSovXG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0cyB0aGUgTkZUIG1hcmtlcnMgaW4gdGhlIHByb2Nlc3MoKSBmdW5jdGlvbixcbiAgICogd2l0aCB0aGUgZ2l2ZW4gdHJhY2tlZCBpZC5cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGRldGVjdE5GVE1hcmtlciAoKSB7XG4gICAgdGhpcy5hcnRvb2xraXRORlQuZGV0ZWN0TkZUTWFya2VyKHRoaXMuaWQpXG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gTkZUIG1hcmtlciBJRCB0byB0aGUgaW5kZXggb2YgdHJhY2tlZCBJRHMuXG4gICAqIFNldHMgdGhlIG1hcmtlcldpZHRoIGZvciB0aGUgcGF0dGVybiBtYXJrZXIgdG8gbWFya2VyV2lkdGguXG4gICAqIFVzZWQgYnkgcHJvY2VzcygpIHRvIGltcGxlbWVudCBjb250aW51b3VzIHRyYWNraW5nLFxuICAgKiBrZWVwaW5nIHRyYWNrIG9mIHRoZSBtYXJrZXIncyB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICogYW5kIGN1c3RvbWl6YWJsZSBtYXJrZXIgd2lkdGhzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaWQgSUQgb2YgdGhlIE5GVCBtYXJrZXIgdG8gdHJhY2suXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXJrZXJXaWR0aCBUaGUgd2lkdGggb2YgdGhlIG1hcmtlciB0byB0cmFjay5cbiAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbWFya2VyIHRyYWNraW5nIG9iamVjdC5cbiAgICovXG4gIHRyYWNrTkZUTWFya2VySWQgKGlkOiBudW1iZXIsIG1hcmtlcldpZHRoPzogbnVtYmVyKSB7XG4gICAgbGV0IG9iaiA9IHRoaXMuY29udmVydGVyKCkubmZ0TWFya2Vyc1tpZF1cbiAgICBpZiAoIW9iaikge1xuICAgICAgdGhpcy5jb252ZXJ0ZXIoKS5uZnRNYXJrZXJzW2lkXSA9IG9iaiA9IHtcbiAgICAgICAgaW5QcmV2aW91czogZmFsc2UsXG4gICAgICAgIGluQ3VycmVudDogZmFsc2UsXG4gICAgICAgIG1hdHJpeDogbmV3IEZsb2F0NjRBcnJheSgxMiksXG4gICAgICAgIG1hdHJpeEdMX1JIOiBuZXcgRmxvYXQ2NEFycmF5KDEyKSxcbiAgICAgICAgbWFya2VyV2lkdGg6IG1hcmtlcldpZHRoIHx8IHRoaXMuZGVmYXVsdE1hcmtlcldpZHRoXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtYXJrZXJXaWR0aCkge1xuICAgICAgb2JqLm1hcmtlcldpZHRoID0gbWFya2VyV2lkdGhcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIC8vIG1hcmtlciBkZXRlY3Rpb24gcm91dGluZXNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBjb3JlIEFSVG9vbEtpdCBtYXJrZXIgZGV0ZWN0aW9uIGZ1bmN0aW9uLiBJdCBjYWxscyB0aHJvdWdoIHRvIGEgc2V0IG9mXG4gICAqIGludGVybmFsIGZ1bmN0aW9ucyB0byBwZXJmb3JtIHRoZSBrZXkgbWFya2VyIGRldGVjdGlvbiBzdGVwcyBvZiBiaW5hcml6YXRpb24gYW5kXG4gICAqIGxhYmVsbGluZywgY29udG91ciBleHRyYWN0aW9uLCBhbmQgdGVtcGxhdGUgbWF0Y2hpbmcgYW5kL29yIG1hdHJpeCBjb2RlIGV4dHJhY3Rpb24uXG4gICAqIFR5cGljYWxseSwgdGhlIHJlc3VsdGluZyBzZXQgb2YgZGV0ZWN0ZWQgbWFya2VycyBpcyByZXRyaWV2ZWQgYnkgY2FsbGluZyBhckdldE1hcmtlck51bVxuICAgKiB0byBnZXQgdGhlIG51bWJlciBvZiBtYXJrZXJzIGRldGVjdGVkIGFuZCBhckdldE1hcmtlciB0byBnZXQgYW4gYXJyYXkgb2YgQVJNYXJrZXJJbmZvXG4gICAqIHN0cnVjdHVyZXMgd2l0aCBpbmZvcm1hdGlvbiBvbiBlYWNoIGRldGVjdGVkIG1hcmtlciwgZm9sbG93ZWQgYnkgYSBzdGVwIGluIHdoaWNoXG4gICAqIGRldGVjdGVkIG1hcmtlcnMgYXJlIHBvc3NpYmx5IGV4YW1pbmVkIGZvciBzb21lIG1lYXN1cmUgb2YgZ29vZG5lc3Mgb2YgbWF0Y2ggKGUuZy4gYnlcbiAgICogZXhhbWluaW5nIHRoZSBtYXRjaCBjb25maWRlbmNlIHZhbHVlKSBhbmQgcG9zZSBleHRyYWN0aW9uLlxuICAgKiBAcGFyYW0ge2ltYWdlfSBJbWFnZSB0byBiZSBwcm9jZXNzZWQgdG8gZGV0ZWN0IG1hcmtlcnMuXG4gICAqIEByZXR1cm4ge251bWJlcn0gMCBpZiB0aGUgZnVuY3Rpb24gcHJvY2VlZGVkIHdpdGhvdXQgZXJyb3IsIG9yIGEgdmFsdWUgbGVzcyB0aGFuIDAgaW4gY2FzZSBvZiBlcnJvci5cbiAgICogQSByZXN1bHQgb2YgMCBkb2VzIG5vdCBob3dldmVyLCBpbXBseSBhbnkgbWFya2VycyB3ZXJlIGRldGVjdGVkLlxuICAgKi9cbiAgZGV0ZWN0TWFya2VyIChpbWFnZTogYW55KSB7XG4gICAgaWYgKHRoaXMuX2NvcHlJbWFnZVRvSGVhcChpbWFnZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5kZXRlY3RNYXJrZXIodGhpcy5pZClcbiAgICB9XG4gICAgcmV0dXJuIC05OVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIE5GVCBtYXJrZXIgaW5mbyBzdHJ1Y3QgZm9yIHRoZSBnaXZlbiBORlQgbWFya2VyIGluZGV4IGluIGRldGVjdGVkIG1hcmtlcnMuXG4gICAqIFRoZSByZXR1cm5lZCBvYmplY3QgaXMgdGhlIGdsb2JhbCBhcnRvb2xraXRORlQuTkZUTWFya2VySW5mbyBvYmplY3QgYW5kIHdpbGwgYmUgb3ZlcndyaXR0ZW5cbiAgICogYnkgc3Vic2VxdWVudCBjYWxscy5cbiAgICogUmV0dXJucyB1bmRlZmluZWQgaWYgbm8gbWFya2VyIHdhcyBmb3VuZC5cbiAgICogQSBtYXJrZXJJbmRleCBvZiAtMSBpcyB1c2VkIHRvIGFjY2VzcyB0aGUgZ2xvYmFsIGN1c3RvbSBtYXJrZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXJrZXJJbmRleCBUaGUgaW5kZXggb2YgdGhlIE5GVCBtYXJrZXIgdG8gcXVlcnkuXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIE5GVG1hcmtlckluZm8gc3RydWN0LlxuICAgKi9cbiAgZ2V0TkZUTWFya2VyIChtYXJrZXJJbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKDAgPT09IHRoaXMuYXJ0b29sa2l0TkZULmdldE5GVE1hcmtlcih0aGlzLmlkLCBtYXJrZXJJbmRleCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5ORlRNYXJrZXJJbmZvO1xuICAgIH1cbiAgfTtcblxuICBnZXRORlREYXRhIChpZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldE5GVERhdGEoaWQpO1xuICB9XG5cbiAgLy8gZXZlbnQgaGFuZGxpbmdcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciBvbiB0aGlzIEFSQ29udHJvbGxlck5GVCBmb3IgdGhlIG5hbWVkIGV2ZW50LCBjYWxsaW5nIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgKiB3aGVuZXZlciB0aGF0IGV2ZW50IGlzIGRpc3BhdGNoZWQuXG4gICAqIFBvc3NpYmxlIGV2ZW50cyBhcmU6XG4gICAqIC0gZ2V0TWFya2VyIC0gZGlzcGF0Y2hlZCB3aGVuZXZlciBwcm9jZXNzKCkgZmluZHMgYSBzcXVhcmUgbWFya2VyXG4gICAqIC0gZ2V0TXVsdGlNYXJrZXIgLSBkaXNwYXRjaGVkIHdoZW5ldmVyIHByb2Nlc3MoKSBmaW5kcyBhIHZpc2libGUgcmVnaXN0ZXJlZCBtdWx0aW1hcmtlclxuICAgKiAtIGdldE11bHRpTWFya2VyU3ViIC0gZGlzcGF0Y2hlZCBieSBwcm9jZXNzKCkgZm9yIGVhY2ggbWFya2VyIGluIGEgdmlzaWJsZSBtdWx0aW1hcmtlclxuICAgKiAtIGxvYWQgLSBkaXNwYXRjaGVkIHdoZW4gdGhlIEFSQ29udHJvbGxlck5GVCBpcyByZWFkeSB0byB1c2UgKHVzZWZ1bCBpZiBwYXNzaW5nIGluIGEgY2FtZXJhIFVSTCBpbiB0aGUgY29uc3RydWN0b3IpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiB0by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGFuIGV2ZW50IHdpdGggdGhlIGdpdmVuIG5hbWUgaXMgZGlzcGF0Y2hlZC5cbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIobmFtZTogc3RyaW5nLCBjYWxsYmFjazogb2JqZWN0KSB7XG4gICAgaWYoIXRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIG5hbWVkIGV2ZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBldmVudCB0byBzdG9wIGxpc3RlbmluZyB0by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlIGZyb20gdGhlIGxpc3RlbmVycyBvZiB0aGUgbmFtZWQgZXZlbnQuXG4gICAqL1xuICByZW1vdmVFdmVudExpc3RlbmVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IG9iamVjdCkge1xuICAgIGlmKHRoaXMuY29udmVydGVyKCkubGlzdGVuZXJzW25hbWVdKSB7XG4gICAgICBsZXQgaW5kZXggPSB0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tuYW1lXS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgIGlmKGluZGV4ID4gLTEpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXIoKS5saXN0ZW5lcnNbbmFtZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgdGhlIGdpdmVuIGV2ZW50IHRvIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycyBvbiBldmVudC5uYW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgdG8gZGlzcGF0Y2guXG4gICAqL1xuICBkaXNwYXRjaEV2ZW50KGV2ZW50OiB7IG5hbWU6IHN0cmluZzsgdGFyZ2V0OiBhbnk7IGRhdGE/OiBvYmplY3QgfSkge1xuICAgIGxldCBsaXN0ZW5lcnMgPSB0aGlzLmNvbnZlcnRlcigpLmxpc3RlbmVyc1tldmVudC5uYW1lXTtcbiAgICBpZihsaXN0ZW5lcnMpIHtcbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBkZWJ1ZyBzdHVmZlxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvKipcblx0ICogU2V0cyB1cCBhIGRlYnVnIGNhbnZhcyBmb3IgdGhlIEFSIGRldGVjdGlvbi5cbiAgICogRHJhd3MgYSByZWQgbWFya2VyIG9uIHRvcCBvZiBlYWNoIGRldGVjdGVkIHNxdWFyZSBpbiB0aGUgaW1hZ2UuXG5cdCAqIFRoZSBkZWJ1ZyBjYW52YXMgaXMgYWRkZWQgdG8gZG9jdW1lbnQuYm9keS5cblx0ICovXG4gIGRlYnVnU2V0dXAoKSB7XG5cbiAgICBpZih0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmxvZygnZGVidWdTZXR1cCgpIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIEJyb3dzZXIgZW52aXJvbm1lbnRzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XG5cbiAgICB0aGlzLnNldERlYnVnTW9kZSh0cnVlKTtcbiAgICB0aGlzLl9id3BvaW50ZXIgPSB0aGlzLmdldFByb2Nlc3NpbmdJbWFnZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gM3g0IG1hcmtlciB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggaW4gdGhlIDEyLWVsZW1lbnQgdHJhbnNNYXQgYXJyYXlcbiAgICogaW50byBhIDR4NCBXZWJHTCBtYXRyaXggYW5kIHdyaXRlcyB0aGUgcmVzdWx0IGludG8gdGhlIDE2LWVsZW1lbnQgZ2xNYXQgYXJyYXkuXG4gICAqIElmIHNjYWxlIHBhcmFtZXRlciBpcyBnaXZlbiwgc2NhbGVzIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIGdsTWF0IGJ5IHRoZSBzY2FsZSBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSB0cmFuc01hdCBUaGUgM3g0IG1hcmtlciB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBnbE1hdCBUaGUgNHg0IEdMIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlIFRoZSBzY2FsZSBmb3IgdGhlIHRyYW5zZm9ybS5cbiAgICovXG4gIHRyYW5zTWF0VG9HTE1hdCAodHJhbnNNYXQ6IEZsb2F0NjRBcnJheSwgZ2xNYXQ6IEZsb2F0NjRBcnJheSwgc2NhbGU/OiBudW1iZXIsKSB7XG4gICAgaWYgKGdsTWF0ID09IHVuZGVmaW5lZCkge1xuICAgICAgZ2xNYXQgPSBuZXcgRmxvYXQ2NEFycmF5KDE2KVxuICAgIH1cblxuICAgIGdsTWF0WzAgKyAwICogNF0gPSB0cmFuc01hdFswXSAvLyBSMUMxXG4gICAgZ2xNYXRbMCArIDEgKiA0XSA9IHRyYW5zTWF0WzFdIC8vIFIxQzJcbiAgICBnbE1hdFswICsgMiAqIDRdID0gdHJhbnNNYXRbMl1cbiAgICBnbE1hdFswICsgMyAqIDRdID0gdHJhbnNNYXRbM11cbiAgICBnbE1hdFsxICsgMCAqIDRdID0gdHJhbnNNYXRbNF0gLy8gUjJcbiAgICBnbE1hdFsxICsgMSAqIDRdID0gdHJhbnNNYXRbNV1cbiAgICBnbE1hdFsxICsgMiAqIDRdID0gdHJhbnNNYXRbNl1cbiAgICBnbE1hdFsxICsgMyAqIDRdID0gdHJhbnNNYXRbN11cbiAgICBnbE1hdFsyICsgMCAqIDRdID0gdHJhbnNNYXRbOF0gLy8gUjNcbiAgICBnbE1hdFsyICsgMSAqIDRdID0gdHJhbnNNYXRbOV1cbiAgICBnbE1hdFsyICsgMiAqIDRdID0gdHJhbnNNYXRbMTBdXG4gICAgZ2xNYXRbMiArIDMgKiA0XSA9IHRyYW5zTWF0WzExXVxuICAgIGdsTWF0WzMgKyAwICogNF0gPSAwLjBcbiAgICBnbE1hdFszICsgMSAqIDRdID0gMC4wXG4gICAgZ2xNYXRbMyArIDIgKiA0XSA9IDAuMFxuICAgIGdsTWF0WzMgKyAzICogNF0gPSAxLjBcblxuICAgIGlmIChzY2FsZSAhPSB1bmRlZmluZWQgJiYgc2NhbGUgIT09IDAuMCkge1xuICAgICAgZ2xNYXRbMTJdICo9IHNjYWxlXG4gICAgICBnbE1hdFsxM10gKj0gc2NhbGVcbiAgICAgIGdsTWF0WzE0XSAqPSBzY2FsZVxuICAgIH1cbiAgICByZXR1cm4gZ2xNYXRcbiAgfTtcblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGdpdmVuIDR4NCBvcGVuR0wgbWF0cml4IGluIHRoZSAxNi1lbGVtZW50IHRyYW5zTWF0IGFycmF5XG4gICAqIGludG8gYSA0eDQgT3BlbkdMIFJpZ2h0LUhhbmQtVmlldyBtYXRyaXggYW5kIHdyaXRlcyB0aGUgcmVzdWx0IGludG8gdGhlIDE2LWVsZW1lbnQgZ2xNYXQgYXJyYXkuXG4gICAqIElmIHNjYWxlIHBhcmFtZXRlciBpcyBnaXZlbiwgc2NhbGVzIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIGdsTWF0IGJ5IHRoZSBzY2FsZSBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBnbE1hdHJpeCBUaGUgNHg0IG1hcmtlciB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG4gICAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBbZ2xSaE1hdHJpeF0gVGhlIDR4NCBHTCByaWdodCBoYW5kIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZV0gVGhlIHNjYWxlIGZvciB0aGUgdHJhbnNmb3JtLlxuICAgKi9cbiAgYXJnbENhbWVyYVZpZXdSSGYgKGdsTWF0cml4OiBGbG9hdDY0QXJyYXksIGdsUmhNYXRyaXg/OiBGbG9hdDY0QXJyYXksIHNjYWxlPzogbnVtYmVyKSB7XG4gICAgbGV0IG1fbW9kZWx2aWV3XG4gICAgaWYgKGdsUmhNYXRyaXggPT0gdW5kZWZpbmVkKSB7IG1fbW9kZWx2aWV3ID0gbmV3IEZsb2F0NjRBcnJheSgxNikgfSBlbHNlIHsgbV9tb2RlbHZpZXcgPSBnbFJoTWF0cml4IH1cblxuICAgIC8vIHhcbiAgICBtX21vZGVsdmlld1swXSA9IGdsTWF0cml4WzBdXG4gICAgbV9tb2RlbHZpZXdbNF0gPSBnbE1hdHJpeFs0XVxuICAgIG1fbW9kZWx2aWV3WzhdID0gZ2xNYXRyaXhbOF1cbiAgICBtX21vZGVsdmlld1sxMl0gPSBnbE1hdHJpeFsxMl1cbiAgICAvLyB5XG4gICAgbV9tb2RlbHZpZXdbMV0gPSAtZ2xNYXRyaXhbMV1cbiAgICBtX21vZGVsdmlld1s1XSA9IC1nbE1hdHJpeFs1XVxuICAgIG1fbW9kZWx2aWV3WzldID0gLWdsTWF0cml4WzldXG4gICAgbV9tb2RlbHZpZXdbMTNdID0gLWdsTWF0cml4WzEzXVxuICAgIC8vIHpcbiAgICBtX21vZGVsdmlld1syXSA9IC1nbE1hdHJpeFsyXVxuICAgIG1fbW9kZWx2aWV3WzZdID0gLWdsTWF0cml4WzZdXG4gICAgbV9tb2RlbHZpZXdbMTBdID0gLWdsTWF0cml4WzEwXVxuICAgIG1fbW9kZWx2aWV3WzE0XSA9IC1nbE1hdHJpeFsxNF1cblxuICAgIC8vIDAgMCAwIDFcbiAgICBtX21vZGVsdmlld1szXSA9IDBcbiAgICBtX21vZGVsdmlld1s3XSA9IDBcbiAgICBtX21vZGVsdmlld1sxMV0gPSAwXG4gICAgbV9tb2RlbHZpZXdbMTVdID0gMVxuXG4gICAgaWYgKHNjYWxlICE9IHVuZGVmaW5lZCAmJiBzY2FsZSAhPT0gMC4wKSB7XG4gICAgICBtX21vZGVsdmlld1sxMl0gKj0gc2NhbGVcbiAgICAgIG1fbW9kZWx2aWV3WzEzXSAqPSBzY2FsZVxuICAgICAgbV9tb2RlbHZpZXdbMTRdICo9IHNjYWxlXG4gICAgfVxuXG4gICAgZ2xSaE1hdHJpeCA9IG1fbW9kZWx2aWV3XG5cbiAgICByZXR1cm4gZ2xSaE1hdHJpeFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIDE2LWVsZW1lbnQgV2ViR0wgdHJhbnNmb3JtYXRpb24gbWF0cml4IHVzZWQgYnkgQVJDb250cm9sbGVyTkZULnByb2Nlc3MgdG9cbiAgICogcGFzcyBtYXJrZXIgV2ViR0wgbWF0cmljZXMgdG8gZXZlbnQgbGlzdGVuZXJzLlxuICAgKiBVbmlxdWUgdG8gZWFjaCBBUkNvbnRyb2xsZXJORlQuXG4gICAqIEByZXR1cm4ge0Zsb2F0NjRBcnJheX0gVGhlIDE2LWVsZW1lbnQgV2ViR0wgdHJhbnNmb3JtYXRpb24gbWF0cml4IHVzZWQgYnkgdGhlIEFSQ29udHJvbGxlck5GVC5cbiAgICovXG4gICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCAoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtX21hdFxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCBjb21wdXRlZCBmcm9tIGNhbWVyYSBwYXJhbWV0ZXJzIGZvciB0aGUgQVJDb250cm9sbGVyTkZULlxuICAgKiBAcmV0dXJuIHtGbG9hdDY0QXJyYXl9IFRoZSAxNi1lbGVtZW50IFdlYkdMIGNhbWVyYSBtYXRyaXggZm9yIHRoZSBBUkNvbnRyb2xsZXJORlQgY2FtZXJhIHBhcmFtZXRlcnMuXG4gICAqL1xuICAgZ2V0Q2FtZXJhTWF0cml4ICgpIHtcbiAgICByZXR1cm4gdGhpcy5jYW1lcmFfbWF0XG4gIH07XG5cbiAgLy8gU2V0dGVyIC8gR2V0dGVyIFByb3hpZXNcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgZGVidWcgbW9kZSBpbiB0aGUgdHJhY2tlci4gV2hlbiBlbmFibGVkLCBhIGJsYWNrIGFuZCB3aGl0ZSBkZWJ1Z1xuICAgKiBpbWFnZSBpcyBnZW5lcmF0ZWQgZHVyaW5nIG1hcmtlciBkZXRlY3Rpb24uIFRoZSBkZWJ1ZyBpbWFnZSBpcyB1c2VmdWwgZm9yIHZpc3VhbGlzaW5nXG4gICAqIHRoZSBiaW5hcml6YXRpb24gcHJvY2VzcyBhbmQgY2hvb3NpbmcgYSB0aHJlc2hvbGQgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbW9kZSB0cnVlIHRvIGVuYWJsZSBkZWJ1ZyBtb2RlLCBmYWxzZSB0byBkaXNhYmxlIGRlYnVnIG1vZGVcbiAgICogQHNlZSBnZXREZWJ1Z01vZGUoKVxuICAgKi9cbiAgc2V0RGVidWdNb2RlKG1vZGU6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0RGVidWdNb2RlKHRoaXMuaWQsIG1vZGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgZGVidWcgbW9kZSBpcyBjdXJyZW50bHkgZW5hYmxlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSB3aGVuIGRlYnVnIG1vZGUgaXMgZW5hYmxlZCwgZmFsc2Ugd2hlbiBkZWJ1ZyBtb2RlIGlzIGRpc2FibGVkXG4gICAqIEBzZWUgIHNldERlYnVnTW9kZSgpXG4gICAqL1xuICBnZXREZWJ1Z01vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldERlYnVnTW9kZSh0aGlzLmlkKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRW1zY3JpcHRlbiBIRUFQIG9mZnNldCB0byB0aGUgZGVidWcgcHJvY2Vzc2luZyBpbWFnZSB1c2VkIGJ5IEFSVG9vbEtpdC5cbiAgICogQHJldHVybiB7bnVtYmVyfSBIRUFQIG9mZnNldCB0byB0aGUgZGVidWcgcHJvY2Vzc2luZyBpbWFnZS5cbiAgICovXG4gIGdldFByb2Nlc3NpbmdJbWFnZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFByb2Nlc3NpbmdJbWFnZSh0aGlzLmlkKVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsb2dnaW5nIGxldmVsIHRvIHVzZSBieSBBUlRvb2xLaXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtb2RlIHR5cGUgZm9yIHRoZSBsb2cgbGV2ZWwuXG4gICAqL1xuICBzZXRMb2dMZXZlbCAobW9kZTogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRMb2dMZXZlbChtb2RlKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgbG9nZ2luZyBsZXZlbCB1c2VkIGJ5IEFSVG9vbEtpdC5cbiAgICogQHJldHVybiB7bnVtYmVyfSByZXR1cm4gdGhlIGxvZyBsZXZlbCBpbiB1c2UuXG4gICAqL1xuICBnZXRMb2dMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldExvZ0xldmVsKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBuZWFyIHBsYW5lIG9mIHRoZSBjYW1lcmEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmVcbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgIHNldFByb2plY3Rpb25OZWFyUGxhbmUgKHZhbHVlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuc2V0UHJvamVjdGlvbk5lYXJQbGFuZSh0aGlzLmlkLCB2YWx1ZSlcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIG5lYXIgcGxhbmUgb2YgdGhlIGNhbWVyYSB3aXRoIHRoZSBnaXZlIGlkLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSB2YWx1ZSBvZiB0aGUgbmVhciBwbGFuZS5cbiAgICovXG4gIGdldFByb2plY3Rpb25OZWFyUGxhbmUgKCkge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRQcm9qZWN0aW9uTmVhclBsYW5lKHRoaXMuaWQpXG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBmYXIgcGxhbmUgb2YgdGhlIGNhbWVyYS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgZmFyIHBsYW5lXG4gICAqIEByZXR1cm4ge251bWJlcn0gMCAodm9pZClcbiAgICovXG4gIHNldFByb2plY3Rpb25GYXJQbGFuZSAodmFsdWU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRQcm9qZWN0aW9uRmFyUGxhbmUodGhpcy5pZCwgdmFsdWUpXG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIG9mIHRoZSBmYXIgcGxhbmUgb2YgdGhlIGNhbWVyYSB3aXRoIHRoZSBnaXZlIGlkLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSB2YWx1ZSBvZiB0aGUgZmFyIHBsYW5lLlxuICAgKi9cbiAgZ2V0UHJvamVjdGlvbkZhclBsYW5lICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnRvb2xraXRORlQuZ2V0UHJvamVjdGlvbkZhclBsYW5lKHRoaXMuaWQpXG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGFiZWxpbmcgdGhyZXNob2xkIG1vZGUgKGF1dG8vbWFudWFsKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vZGUgQW4gaW50ZWdlciBzcGVjaWZ5aW5nIHRoZSBtb2RlLiBPbmUgb2Y6XG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX01BTlVBTCxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19NRURJQU4sXG4gICAqIEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVSxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRSxcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19CUkFDS0VUSU5HXG4gICAqL1xuICBzZXRUaHJlc2hvbGRNb2RlKG1vZGU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRUaHJlc2hvbGRNb2RlKHRoaXMuaWQsIG1vZGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IHRocmVzaG9sZCBtb2RlIHVzZWQgZm9yIGltYWdlIGJpbmFyaXphdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCB0aHJlc2hvbGQgbW9kZVxuICAgKiBAc2VlIGdldFZpZGVvVGhyZXNob2xkTW9kZSgpXG4gICAqL1xuICBnZXRUaHJlc2hvbGRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRUaHJlc2hvbGRNb2RlKHRoaXMuaWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGxhYmVsaW5nIHRocmVzaG9sZC5cbiAgICogVGhpcyBmdW5jdGlvbiBmb3JjZXMgc2V0cyB0aGUgdGhyZXNob2xkIHZhbHVlLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBBUl9ERUZBVUxUX0xBQkVMSU5HX1RIUkVTSCB3aGljaCBpcyAxMDAuXG4gICAqIFRoZSBjdXJyZW50IHRocmVzaG9sZCBtb2RlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGlzIGNhbGwuXG4gICAqIFR5cGljYWxseSwgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHdoZW4gbGFiZWxpbmcgdGhyZXNob2xkIG1vZGVcbiAgICogaXMgQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfTUFOVUFMLlxuICAgKiBUaGUgdGhyZXNob2xkIHZhbHVlIGlzIG5vdCByZWxldmFudCBpZiB0aHJlc2hvbGQgbW9kZSBpc1xuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFLlxuICAgKiBCYWNrZ3JvdW5kOiBUaGUgbGFiZWxpbmcgdGhyZXNob2xkIGlzIHRoZSB2YWx1ZSB3aGljaFxuICAgKiB0aGUgQVIgbGlicmFyeSB1c2VzIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBibGFjayBhbmQgd2hpdGVcbiAgICogcG9ydGlvbnMgb2YgYW4gQVJUb29sS2l0IG1hcmtlci4gU2luY2UgdGhlIGFjdHVhbCBicmlnaHRuZXNzLFxuICAgKiBjb250cmFzdCwgYW5kIGdhbW1hIG9mIGluY29taW5nIGltYWdlcyBjYW4gdmFyeSBzaWduZmljYW50bHlcbiAgICogYmV0d2VlbiBkaWZmZXJlbnQgY2FtZXJhcyBhbmQgbGlnaHRpbmcgY29uZGl0aW9ucywgdGhpc1xuICAgKiB2YWx1ZSB0eXBpY2FsbHkgbmVlZHMgdG8gYmUgYWRqdXN0ZWQgZHluYW1pY2FsbHkgdG8gYVxuICAgKiBzdWl0YWJsZSBtaWRwb2ludCBiZXR3ZWVuIHRoZSBvYnNlcnZlZCB2YWx1ZXMgZm9yIGJsYWNrXG4gICAqIGFuZCB3aGl0ZSBwb3J0aW9ucyBvZiB0aGUgbWFya2VycyBpbiB0aGUgaW1hZ2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aHJlc2hvbGQgQW4gaW50ZWdlciBpbiB0aGUgcmFuZ2UgWzAsMjU1XSAoaW5jbHVzaXZlKS5cbiAgICovXG4gIHNldFRocmVzaG9sZCh0aHJlc2hvbGQ6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRUaHJlc2hvbGQodGhpcy5pZCwgdGhyZXNob2xkKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGxhYmVsaW5nIHRocmVzaG9sZC5cbiAgICogVGhpcyBmdW5jdGlvbiBxdWVyaWVzIHRoZSBjdXJyZW50IGxhYmVsaW5nIHRocmVzaG9sZC4gRm9yLFxuICAgKiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTiwgQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19PVFNVLFxuICAgKiBhbmQgQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19CUkFDS0VUSU5HXG4gICAqIHRoZSB0aHJlc2hvbGQgdmFsdWUgaXMgb25seSB2YWxpZCB1bnRpbCB0aGUgbmV4dCBhdXRvLXVwZGF0ZS5cbiAgICogVGhlIGN1cnJlbnQgdGhyZXNob2xkIG1vZGUgaXMgbm90IGFmZmVjdGVkIGJ5IHRoaXMgY2FsbC5cbiAgICogVGhlIHRocmVzaG9sZCB2YWx1ZSBpcyBub3QgcmVsZXZhbnQgaWYgdGhyZXNob2xkIG1vZGUgaXNcbiAgICogQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRS5cbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCB0aHJlc2hvbGQgdmFsdWUuXG4gICAqL1xuICBnZXRUaHJlc2hvbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJ0b29sa2l0TkZULmdldFRocmVzaG9sZCh0aGlzLmlkKTtcbiAgfTtcblxuICAvKipcbiAgICogTG9hZHMgYW4gTkZUIG1hcmtlciBmcm9tIHRoZSBnaXZlbiBVUkwgb3IgZGF0YSBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybE9yRGF0YSAtIFRoZSBVUkwgcHJlZml4IG9yIGRhdGEgb2YgdGhlIE5GVCBtYXJrZXJzIHRvIGxvYWQuXG4gICovXG4gICBhc3luYyBsb2FkTkZUTWFya2VyICh1cmxPckRhdGE6IHN0cmluZywgb25TdWNjZXNzOiAoaWRzOiBudW1iZXIpID0+IHZvaWQsIG9uRXJyb3I6ICgpID0+IHZvaWQpIHtcbiAgICBsZXQgbmZ0ID0gYXdhaXQgdGhpcy5hcnRvb2xraXRORlQuYWRkTkZUTWFya2Vycyh0aGlzLmlkLCBbdXJsT3JEYXRhXSwgIChpZHM6IGFueSkgPT4ge1xuICAgICAgdGhpcy5uZnRNYXJrZXJDb3VudCArPSBpZHMubGVuZ3RoO1xuICAgICAgb25TdWNjZXNzKGlkcyk7XG4gICAgfSwgb25FcnJvcikgIFxuICAgIHJldHVybiBuZnRcbiAgfTtcblxuICAvKipcbiAgICogTG9hZHMgYW4gYXJyYXkgb2YgTkZUIG1hcmtlcnMgZnJvbSB0aGUgZ2l2ZW4gVVJMcyBvciBkYXRhIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsT3JEYXRhIC0gVGhlIGFycmF5IG9mIFVSTHMgcHJlZml4IG9yIGRhdGEgb2YgdGhlIE5GVCBtYXJrZXJzIHRvIGxvYWQuXG4gICovXG4gICBhc3luYyBsb2FkTkZUTWFya2VycyAodXJsT3JEYXRhOiBBcnJheTxzdHJpbmc+LCBvblN1Y2Nlc3M6IChpZHM6IG51bWJlcikgPT4gdm9pZCwgb25FcnJvcjogKCkgPT4gdm9pZCkge1xuICAgIGxldCBuZnQgPSBhd2FpdCB0aGlzLmFydG9vbGtpdE5GVC5hZGRORlRNYXJrZXJzKHRoaXMuaWQsIHVybE9yRGF0YSwgKGlkczogYW55KSA9PiB7XG4gICAgICB0aGlzLm5mdE1hcmtlckNvdW50ICs9IGlkcy5sZW5ndGg7XG4gICAgICBvblN1Y2Nlc3MoaWRzKTtcbiAgICB9LCBvbkVycm9yKSBcbiAgICByZXR1cm4gbmZ0XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaW1hZ2UgcHJvY2Vzc2luZyBtb2RlLlxuICAgKiBXaGVuIHRoZSBpbWFnZSBwcm9jZXNzaW5nIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBhbGwgcGl4ZWxzIGluIGVhY2ggaW5jb21pbmcgaW1hZ2VcbiAgICogdG8gbG9jYXRlIG1hcmtlcnMuIFdoZW4gdGhlIG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GSUVMRF9JTUFHRSxcbiAgICogQVJUb29sS2l0IHByb2Nlc3NlcyBwaXhlbHMgaW4gb25seSBldmVyeSBzZWNvbmQgcGl4ZWwgcm93IGFuZFxuICAgKiBjb2x1bW4uIFRoaXMgaXMgdXNlZnVsIGJvdGggZm9yIGhhbmRsaW5nIGltYWdlcyBmcm9tIGludGVybGFjZWRcbiAgICogdmlkZW8gc291cmNlcyAod2hlcmUgYWx0ZXJuYXRlIGxpbmVzIGFyZSBhc3NlbWJsZWQgZnJvbSBhbHRlcm5hdGVcbiAgICogZmllbGRzIGFuZCB0aHVzIGhhdmUgb25lIGZpZWxkIHRpbWUtZGlmZmVyZW5jZSwgcmVzdWx0aW5nIGluIGFcbiAgICogXCJjb21iXCIgZWZmZWN0KSBzdWNoIGFzIERpZ2l0YWwgVmlkZW8gY2FtZXJhcy5cbiAgICogVGhlIGVmZmVjdGl2ZSByZWR1Y3Rpb24gYnkgNzUlIGluIHRoZSBwaXhlbHMgcHJvY2Vzc2VkIGFsc29cbiAgICogaGFzIHV0aWxpdHkgaW4gYWNjZWxlcmF0aW5nIHRyYWNraW5nIGJ5IGVmZmVjdGl2ZWx5IHJlZHVjaW5nXG4gICAqIHRoZSBpbWFnZSBzaXplIHRvIG9uZSBxdWFydGVyIHNpemUsIGF0IHRoZSBjb3N0IG9mIHBvc2UgYWNjdXJhY2N5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbW9kZVxuICAgKiBPcHRpb25zIGZvciB0aGlzIGZpZWxkIGFyZTpcbiAgICogQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRVxuICAgKiBBUl9JTUFHRV9QUk9DX0ZJRUxEX0lNQUdFXG4gICAqIFRoZSBkZWZhdWx0IG1vZGUgaXMgQVJfSU1BR0VfUFJPQ19GUkFNRV9JTUFHRS5cbiAgICovXG4gIHNldEltYWdlUHJvY01vZGUgKG1vZGU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5zZXRJbWFnZVByb2NNb2RlKHRoaXMuaWQsIG1vZGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGltYWdlIHByb2Nlc3NpbmcgbW9kZS5cbiAgICogU2VlIGFyU2V0SW1hZ2VQcm9jTW9kZSgpIGZvciBhIGNvbXBsZXRlIGRlc2NyaXB0aW9uLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IGltYWdlIHByb2Nlc3NpbmcgbW9kZS5cbiAgICovXG4gIGdldEltYWdlUHJvY01vZGUgKCkge1xuICAgIHJldHVybiB0aGlzLmFydG9vbGtpdE5GVC5nZXRJbWFnZVByb2NNb2RlKHRoaXMuaWQpO1xuICB9O1xuXG4gIC8vIHByaXZhdGUgYWNjZXNzb3JzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFVzZWQgaW50ZXJuYWxseSBieSBBUkNvbnRyb2xsZXJORlQsIGl0IHBlcm1pdCB0byBhZGQgbWV0aG9kcyB0byB0aGlzLlxuICAgKiBAcmV0dXJuIHthbnl9IEFSQ29udHJvbGxlck5GVFxuICAgKi9cbiAgcHJpdmF0ZSBjb252ZXJ0ZXIoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGluaXQgdGhlIEFSQ29udHJvbGxlck5GVCB3aXRoIHRoZSBuZWNlc3NhcnkgcGFybWV0ZXJzIGFuZCB2YXJpYWJsZXMuXG4gICAqIERvbid0IGNhbGwgZGlyZWN0bHkgdGhpcyBidXQgaW5zdGVhZCBpbnN0YW50aWF0ZSBhIG5ldyBBUkNvbnRyb2xsZXJORlQuXG4gICAqIEByZXR1cm4ge0FSQ29udHJvbGxlck5GVH0gVGhlIGluaXRpYWxpemVkIEFSQ29udHJvbGxlck5GVCBpbnN0YW5jZVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBfaW5pdGlhbGl6ZSAoKSB7XG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgdG9vbGtpdFxuICAgIHRoaXMuYXJ0b29sa2l0TkZUID0gYXdhaXQgbmV3IEFSVG9vbGtpdE5GVCgpLmluaXQoKTtcbiAgICBjb25zb2xlLmxvZygnW0FSQ29udHJvbGxlck5GVF0nLCAnQVJUb29sa2l0TkZUIGluaXRpYWxpemVkJyk7XG5cbiAgICAvLyBsb2FkIHRoZSBjYW1lcmFcbiAgICB0aGlzLmNhbWVyYUlkID0gYXdhaXQgdGhpcy5hcnRvb2xraXRORlQubG9hZENhbWVyYSh0aGlzLmNhbWVyYVBhcmFtKVxuICAgIGNvbnNvbGUubG9nKCdbQVJDb250cm9sbGVyTkZUXScsICdDYW1lcmEgcGFyYW1zIGxvYWRlZCB3aXRoIElEJywgdGhpcy5jYW1lcmFJZClcblxuICAgIC8vIHNldHVwXG4gICAgdGhpcy5pZCA9IHRoaXMuYXJ0b29sa2l0TkZULnNldHVwKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNhbWVyYUlkKTtcbiAgICBjb25zb2xlLmxvZygnW0FSQ29udHJvbGxlck5GVF0nLCAnR290IElEIGZyb20gc2V0dXAnLCB0aGlzLmlkKTtcblxuICAgIHRoaXMuX2luaXRORlQoKTtcblxuICAgIGNvbnN0IHBhcmFtczogZGVsZWdhdGVNZXRob2RzWydmcmFtZU1hbGxvYyddID0gdGhpcy5hcnRvb2xraXRORlQuZnJhbWVNYWxsb2M7XG4gICAgdGhpcy5mcmFtZXBvaW50ZXIgPSBwYXJhbXMuZnJhbWVwb2ludGVyO1xuICAgIHRoaXMuZnJhbWVzaXplID0gcGFyYW1zLmZyYW1lc2l6ZTtcbiAgICB0aGlzLnZpZGVvTHVtYVBvaW50ZXIgPSBwYXJhbXMudmlkZW9MdW1hUG9pbnRlcjtcblxuICAgIHRoaXMuZGF0YUhlYXAgPSBuZXcgVWludDhBcnJheSh0aGlzLmFydG9vbGtpdE5GVC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLCB0aGlzLmZyYW1lcG9pbnRlciwgdGhpcy5mcmFtZXNpemUpO1xuICAgIHRoaXMudmlkZW9MdW1hID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5hcnRvb2xraXRORlQuaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlciwgdGhpcy52aWRlb0x1bWFQb2ludGVyLCB0aGlzLmZyYW1lc2l6ZSAvIDQpO1xuXG4gICAgdGhpcy5jYW1lcmFfbWF0ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmFydG9vbGtpdE5GVC5pbnN0YW5jZS5IRUFQVTguYnVmZmVyLCBwYXJhbXMuY2FtZXJhLCAxNik7XG4gICAgdGhpcy5tYXJrZXJfdHJhbnNmb3JtX21hdCA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5hcnRvb2xraXRORlQuaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlciwgcGFyYW1zLnRyYW5zZm9ybSwgMTIpO1xuXG4gICAgdGhpcy5zZXRQcm9qZWN0aW9uTmVhclBsYW5lKDAuMSk7XG4gICAgdGhpcy5zZXRQcm9qZWN0aW9uRmFyUGxhbmUoMTAwMCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIG5hbWU6ICdsb2FkJyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzXG4gICAgICB9KVxuICAgIH0sIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIG5lY2Vzc2FyeSBrcG0gaGFuZGxlIGZvciBORlQgYW5kIHRoZSBzZXR0aW5ncyBmb3IgdGhlIENQVS5cbiAgICogQHJldHVybiB7bnVtYmVyfSAwICh2b2lkKVxuICAgKi9cbiAgcHJpdmF0ZSBfaW5pdE5GVCAoKSB7XG4gICAgdGhpcy5hcnRvb2xraXRORlQuc2V0dXBBUjIodGhpcy5pZClcbiAgfTtcblxuICAvKipcbiAgICogQ29weSB0aGUgSW1hZ2UgZGF0YSB0byB0aGUgSEVBUCBmb3IgdGhlIGRlYnVnU2V0dXAgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge251bWJlcn0gMCAodm9pZClcbiAgICovXG4gIHByaXZhdGUgX2NvcHlJbWFnZVRvSGVhcCAoc291cmNlSW1hZ2U6IEltYWdlT2JqKSB7XG4gICAgaWYgKCFzb3VyY2VJbWFnZSkge1xuICAgIC8vIGRlZmF1bHQgdG8gcHJlbG9hZGVkIGltYWdlXG4gICAgICBzb3VyY2VJbWFnZSA9IHRoaXMuaW1hZ2VcbiAgICB9XG5cbiAgICAvLyB0aGlzIGlzIG9mIHR5cGUgVWludDhDbGFtcGVkQXJyYXk6XG4gICAgLy8gVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHR5cGVkIGFycmF5IHJlcHJlc2VudHMgYW4gYXJyYXkgb2YgOC1iaXQgdW5zaWduZWRcbiAgICAvLyBpbnRlZ2VycyBjbGFtcGVkIHRvIDAtMjU1XG4gICAgLy8gQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9VaW50OENsYW1wZWRBcnJheVxuICAgIGxldCBkYXRhOiBVaW50OENsYW1wZWRBcnJheTtcblxuICAgIGlmIChzb3VyY2VJbWFnZS5kYXRhKSB7XG4gICAgICAvLyBkaXJlY3RseSB1c2Ugc291cmNlIGltYWdlXG4gICAgICBkYXRhID0gc291cmNlSW1hZ2UuZGF0YVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN0eC5zYXZlKClcblxuICAgICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICdwb3J0cmFpdCcpIHtcbiAgICAgICAgdGhpcy5jdHgudHJhbnNsYXRlKHRoaXMuY2FudmFzLndpZHRoLCAwKVxuICAgICAgICB0aGlzLmN0eC5yb3RhdGUoTWF0aC5QSSAvIDIpXG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2Uoc291cmNlSW1hZ2UsIDAsIDAsIHRoaXMuY2FudmFzLmhlaWdodCwgdGhpcy5jYW52YXMud2lkdGgpIC8vIGRyYXcgdmlkZW9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2Uoc291cmNlSW1hZ2UsIDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpIC8vIGRyYXcgdmlkZW9cbiAgICAgIH1cblxuICAgICAgdGhpcy5jdHgucmVzdG9yZSgpXG5cbiAgICAgIGxldCBpbWFnZURhdGEgPSB0aGlzLmN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodClcbiAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YVxuICAgIH1cblxuICAgIC8vIEhlcmUgd2UgaGF2ZSBhY2Nlc3MgdG8gdGhlIHVubW9kaWZpZWQgdmlkZW8gaW1hZ2UuIFdlIG5vdyBuZWVkIHRvIGFkZCB0aGUgdmlkZW9MdW1hIGNoYW5lbCB0byBiZSBhYmxlIHRvIHNlcnZlIHRoZSB1bmRlcmx5aW5nIEFSVEsgQVBJXG4gICAgaWYgKHRoaXMudmlkZW9MdW1hKSB7XG4gICAgICBsZXQgcSA9IDBcblxuICAgICAgLy8gQ3JlYXRlIGx1bWEgZnJvbSB2aWRlbyBkYXRhIGFzc3VtaW5nIFBpeGVsZm9ybWF0IEFSX1BJWEVMX0ZPUk1BVF9SR0JBXG4gICAgICAvLyBzZWUgKEFSVG9vbEtpdEpTLmNwcCBMOiA0MylcbiAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgdGhpcy52aWRlb1NpemU7IHArKykgeyAgICAgIFxuICAgICAgICBsZXQgciA9IGRhdGFbcSArIDBdLCBnID0gZGF0YVtxICsgMV0sIGIgPSBkYXRhW3EgKyAyXTtcbiAgICAgICAgLy8gQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTk2MjQxLzU4NDM2NDIgICAgXG4gICAgICAgIHRoaXMudmlkZW9MdW1hW3BdID0gKHIgKyByICsgciArIGIgKyBnICsgZyArIGcgKyBnKSA+PiAzXG4gICAgICAgIHEgKz0gNFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGFIZWFwKSB7XG4gICAgICB0aGlzLmRhdGFIZWFwLnNldChkYXRhKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcbn1cbiIsIi8qXG4gKiAgQVJUb29sa2l0TkZULnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IE1vZHVsZUxvYWRlciBmcm9tICcuL01vZHVsZUxvYWRlcidcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJ1xuXG5jb25zdCBVTktOT1dOX01BUktFUiA9IC0xXG5jb25zdCBORlRfTUFSS0VSID0gMFxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBOb2RlSlMge1xuICAgIGludGVyZmFjZSBHbG9iYWwge1xuICAgICAgIGFydG9vbGtpdE5GVDogYW55O1xuICAgIH1cbiAgfVxuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBhcnRvb2xraXRORlQ6IGFueTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgcnVudGltZUluc3RhbmNlZCB7XG4gIGluc3RhbmNlOiBhbnk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFSVG9vbGtpdE5GVCB7XG4gIHN0YXRpYyBnZXQgVU5LTk9XTl9NQVJLRVIgKCkgeyByZXR1cm4gVU5LTk9XTl9NQVJLRVIgfVxuICBzdGF0aWMgZ2V0IE5GVF9NQVJLRVIgKCkgeyByZXR1cm4gTkZUX01BUktFUiB9XG5cbiAgcHVibGljIGluc3RhbmNlOiBhbnk7XG4gIHByaXZhdGUgbWFya2VyTkZUQ291bnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBjYW1lcmFDb3VudDogbnVtYmVyO1xuICBwcml2YXRlIHZlcnNpb246IHN0cmluZztcbiAgcHVibGljIHNldHVwOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNhbWVyYUlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHRlYXJkb3duOiAoKSA9PiB2b2lkO1xuICBwdWJsaWMgc2V0dXBBUjI6IChpZDogbnVtYmVyKSA9PiB2b2lkO1xuICBwdWJsaWMgc2V0RGVidWdNb2RlOiAoaWQ6IG51bWJlciwgbW9kZTogYm9vbGVhbikgPT4gbnVtYmVyO1xuICBwdWJsaWMgZ2V0RGVidWdNb2RlOiAoaWQ6IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgcHVibGljIGdldFByb2Nlc3NpbmdJbWFnZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGRldGVjdE1hcmtlcjogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGRldGVjdE5GVE1hcmtlcjogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldE5GVE1hcmtlcjogKGlkOiBudW1iZXIsIG1hcmtlckluZGV4OiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldE5GVERhdGE6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBzZXRMb2dMZXZlbDogKG1vZGU6IGJvb2xlYW4pID0+IG51bWJlcjtcbiAgcHVibGljIGdldExvZ0xldmVsOiAoKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBmcmFtZU1hbGxvYzoge1xuICAgIGZyYW1lcG9pbnRlcjogbnVtYmVyO1xuICAgIGZyYW1lc2l6ZTogbnVtYmVyO1xuICAgIHZpZGVvTHVtYVBvaW50ZXI6IG51bWJlcjtcbiAgICBjYW1lcmE6IG51bWJlcjtcbiAgICB0cmFuc2Zvcm06IG51bWJlclxuICB9XG4gIHB1YmxpYyAgTkZUTWFya2VySW5mbzoge1xuICAgIGVycm9yOiBudW1iZXI7XG4gICAgZm91bmQ6IG51bWJlcjtcbiAgICBpZDogbnVtYmVyLFxuICAgIHBvc2U6IEZsb2F0NjRBcnJheTtcbiAgfTtcbiAgcHVibGljIHNldFByb2plY3Rpb25OZWFyUGxhbmU6IChpZDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBwdWJsaWMgZ2V0UHJvamVjdGlvbk5lYXJQbGFuZTogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHNldFByb2plY3Rpb25GYXJQbGFuZTogKGlkOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gIHB1YmxpYyBnZXRQcm9qZWN0aW9uRmFyUGxhbmU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBzZXRUaHJlc2hvbGRNb2RlOiAoaWQ6IG51bWJlciwgbW9kZTogbnVtYmVyKSA9PiBudW1iZXI7XG4gIHB1YmxpYyBnZXRUaHJlc2hvbGRNb2RlOiAoaWQ6IG51bWJlcikgPT4gbnVtYmVyO1xuICBwdWJsaWMgc2V0VGhyZXNob2xkOiAoaWQ6IG51bWJlciwgdGhyZXNob2xkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldFRocmVzaG9sZDogKGlkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIHNldEltYWdlUHJvY01vZGU6IChpZDogbnVtYmVyLCBtb2RlOiBudW1iZXIpID0+IG51bWJlcjtcbiAgcHVibGljIGdldEltYWdlUHJvY01vZGU6IChpZDogbnVtYmVyKSA9PiBudW1iZXI7XG5cblxuICAvLyBjb25zdHJ1Y3Rpb25cbiAgLyoqXG4gICAqIFRoZSBBUlRvb2xraXRORlQgY29uc3RydWN0b3IuIEl0IGhhcyBubyBhcmd1bWVudHMuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIGluaXRpYWxpemVkOlxuICAgKiAtIGluc3RhbmNlXG4gICAqIC0gbWFya2VyTkZUQ291bnRcbiAgICogLSBjYW1lcmFDb3VudFxuICAgKiAtIHZlcnNpb25cbiAgICogQSBtZXNzYWdlIGlzIGRpc3BsYXllZCBpbiB0aGUgYnJvd3NlciBjb25zb2xlIGR1cmluZyB0aGUgaW50aXRpYWxpemF0aW9uLCBmb3IgZXhhbXBsZTpcbiAgICogXCJBUlRvb2xraXRORlQgMC45LjFcIlxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8vIHJlZmVyZW5jZSB0byBXQVNNIG1vZHVsZVxuICAgIHRoaXMuaW5zdGFuY2VcbiAgICB0aGlzLm1hcmtlck5GVENvdW50ID0gMFxuICAgIHRoaXMuY2FtZXJhQ291bnQgPSAwXG4gICAgdGhpcy52ZXJzaW9uID0gJzAuOS4xJ1xuICAgIGNvbnNvbGUuaW5mbygnQVJUb29sa2l0TkZUICcsIHRoaXMudmVyc2lvbilcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGluaXRpYWxpemF0aW9uXG4gIC8qKlxuICAgKiBJbml0IHRoZSBjbGFzcyBpbmplY3RpbmcgdGhlIFdhc20gTW9kdWxlLCBsaW5rIHRoZSBpbnN0YW5jZWQgbWV0aG9kcyBhbmRcbiAgICogY3JlYXRlIGEgZ2xvYmFsIGFydG9vbGtpdE5GVCB2YXJpYWJsZS5cbiAgICogQHJldHVybiB7b2JqZWN0fSB0aGUgdGhpcyBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBhc3luYyBpbml0ICgpIHtcbiAgICAgY29uc3QgcnVudGltZTogcnVudGltZUluc3RhbmNlZCA9IGF3YWl0IE1vZHVsZUxvYWRlci5pbml0LmNhdGNoKChlcnI6IHN0cmluZykgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgfSkudGhlbigocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICByZXR1cm4gcmVzb2x2ZTtcbiAgICB9KVxuXG4gICAgdGhpcy5pbnN0YW5jZSA9IHJ1bnRpbWUuaW5zdGFuY2U7XG5cbiAgICB0aGlzLl9kZWNvcmF0ZSgpXG5cbiAgICBsZXQgc2NvcGUgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93IDogZ2xvYmFsXG4gICAgc2NvcGUuYXJ0b29sa2l0TkZUID0gdGhpc1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIHByaXZhdGUgbWV0aG9kc1xuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IHRvIGxpbmsgdGhlIGluc3RhbmNlIGluIHRoZSBNb2R1bGVMb2FkZXIgdG8gdGhlXG4gICAqIEFSVG9vbGtpdE5GVCBpbnRlcm5hbCBtZXRob2RzLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcHJpdmF0ZSBfZGVjb3JhdGUgKCkge1xuICAgIC8vIGFkZCBkZWxlZ2F0ZSBtZXRob2RzXG4gICAgW1xuICAgICAgJ3NldHVwJyxcbiAgICAgICd0ZWFyZG93bicsXG5cbiAgICAgICdzZXR1cEFSMicsXG5cbiAgICAgICdzZXRMb2dMZXZlbCcsXG4gICAgICAnZ2V0TG9nTGV2ZWwnLFxuXG4gICAgICAnc2V0RGVidWdNb2RlJyxcbiAgICAgICdnZXREZWJ1Z01vZGUnLFxuXG4gICAgICAnZ2V0UHJvY2Vzc2luZ0ltYWdlJyxcblxuICAgICAgJ2RldGVjdE1hcmtlcicsXG4gICAgICAnZGV0ZWN0TkZUTWFya2VyJyxcbiAgICAgICdnZXRORlRNYXJrZXInLFxuICAgICAgJ2dldE5GVERhdGEnLFxuXG4gICAgICAnZnJhbWVNYWxsb2MnLFxuICAgICAgJ05GVE1hcmtlckluZm8nLFxuXG4gICAgICAnc2V0UHJvamVjdGlvbk5lYXJQbGFuZScsXG4gICAgICAnZ2V0UHJvamVjdGlvbk5lYXJQbGFuZScsXG5cbiAgICAgICdzZXRQcm9qZWN0aW9uRmFyUGxhbmUnLFxuICAgICAgJ2dldFByb2plY3Rpb25GYXJQbGFuZScsXG5cbiAgICAgICdzZXRUaHJlc2hvbGRNb2RlJyxcbiAgICAgICdnZXRUaHJlc2hvbGRNb2RlJyxcblxuICAgICAgJ3NldFRocmVzaG9sZCcsXG4gICAgICAnZ2V0VGhyZXNob2xkJyxcblxuICAgICAgJ3NldEltYWdlUHJvY01vZGUnLFxuICAgICAgJ2dldEltYWdlUHJvY01vZGUnLFxuXG4gICAgICAnU3RyaW5nTGlzdCdcbiAgICBdLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgIHRoaXMuY29udmVydGVyKClbbWV0aG9kXSA9IHRoaXMuaW5zdGFuY2VbbWV0aG9kXVxuICAgIH0pXG5cbiAgICAvLyBleHBvc2UgY29uc3RhbnRzXG4gICAgZm9yIChjb25zdCBjbyBpbiB0aGlzLmluc3RhbmNlKSB7XG4gICAgICBpZiAoY28ubWF0Y2goL15BUi8pKSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyKClbY29dID0gdGhpcy5pbnN0YW5jZVtjb11cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBpbnRlcm5hbGx5IHRvIGNvbnZlcnQgYW5kIGluamVjdCBjb2RlLlxuICAgKiBAcmV0dXJuIHt0aGlzfSB0aGUgdGhpcyBvYmplY3RcbiAgICovXG4gIHByaXZhdGUgY29udmVydGVyKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBwdWJsaWMgYWNjZXNzb3JzXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogTG9hZCB0aGUgY2FtZXJhLCB0aGlzIGlzIGFuIGltcG9ydGFudCBhbmQgcmVxdWlyZWQgc3RlcCwgSW50ZXJuYWxseSBmaWxsXG4gICAqIHRoZSBBUlBhcmFtIHN0cnVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybE9yRGF0YTogdGhlIGNhbWVyYSBwYXJhbWV0ZXIsIHVzdWFsbHkgYSBwYXRoIHRvIGEgLmRhdCBmaWxlXG4gICAqIEByZXR1cm4ge251bWJlcn0gYSBudW1iZXIsIHRoZSBpbnRlcm5hbCBpZC5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBsb2FkQ2FtZXJhICh1cmxPckRhdGE6IGFueSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gJy9jYW1lcmFfcGFyYW1fJyArIHRoaXMuY2FtZXJhQ291bnQrK1xuXG4gICAgbGV0IGRhdGFcblxuICAgIGlmICh1cmxPckRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAvLyBhc3N1bWUgcHJlbG9hZGVkIGNhbWVyYSBwYXJhbXNcbiAgICAgIGRhdGEgPSB1cmxPckRhdGFcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmV0Y2ggZGF0YSB2aWEgSFRUUFxuICAgICAgdHJ5IHsgZGF0YSA9IGF3YWl0IFV0aWxzLmZldGNoUmVtb3RlRGF0YSh1cmxPckRhdGEpIH0gY2F0Y2ggKGVycm9yKSB7IHRocm93IGVycm9yIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZURhdGFGaWxlKGRhdGEsIHRhcmdldClcblxuICAgIC8vIHJldHVybiB0aGUgaW50ZXJuYWwgbWFya2VyIElEXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuX2xvYWRDYW1lcmEodGFyZ2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgdGhlIE5GVCBNYXJrZXJzICguZnNldCwgLmlzZXQgYW5kIC5mc2V0MykgaW4gdGhlIGNvZGUsIE11c3QgYmUgcHJvdmlkZWRcbiAgICogdGhlIHVybCBvZiB0aGUgZmlsZSB3aXRob3V0IHRoZSBleHRlbnNpb24uIElmIGZhaWxzIHRvIGxvYWQgaXQgcmFpc2UgYW4gZXJyb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhcklkIGludGVybmFsIGlkXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gdXJscyAgYXJyYXkgb2YgdXJscyBvZiB0aGUgZGVzY3JpcHRvcnMgZmlsZXMgd2l0aG91dCBleHRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIHJldHJpZXZlIHRoZSBpZHMuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uRXJyb3IyIHRoZSBlcnJvciBjYWxsYmFjay5cbiAgICovXG4gIHB1YmxpYyBhZGRORlRNYXJrZXJzKGFySWQ6IG51bWJlciwgdXJsczogQXJyYXk8c3RyaW5nPiwgY2FsbGJhY2s6IChmaWxlbmFtZTogYW55KSA9PiB2b2lkLCBvbkVycm9yMjogKCBlcnJvck51bWJlcjogYW55KSA9PiB2b2lkKTogW3tpZDogbnVtYmVyfV0ge1xuICAgIHZhciBwcmVmaXhlczogYW55ID0gW107XG4gICAgdmFyIHBlbmRpbmcgPSB1cmxzLmxlbmd0aCAqIDM7XG4gICAgdmFyIG9uU3VjY2VzcyA9IChmaWxlbmFtZTogYW55KSA9PiB7XG4gICAgICAgIHBlbmRpbmcgLT0gMTtcbiAgICAgICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHZlYyA9IG5ldyB0aGlzLmluc3RhbmNlLlN0cmluZ0xpc3QoKTtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlcklkcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlYy5wdXNoX2JhY2socHJlZml4ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJldCA9IHRoaXMuaW5zdGFuY2UuX2FkZE5GVE1hcmtlcnMoYXJJZCwgdmVjKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0LnNpemUoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VySWRzLnB1c2gocmV0LmdldChpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWRkIG5mdCBtYXJrZXIgaWRzOiBcIiwgbWFya2VySWRzKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobWFya2VySWRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgb25FcnJvciA9ICggZmlsZW5hbWU6IGFueSwgZXJyb3JOdW1iZXI/OiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gbG9hZDogXCIsIGZpbGVuYW1lKTtcbiAgICAgICAgb25FcnJvcjIoZXJyb3JOdW1iZXIpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdXJsID0gdXJsc1tpXTtcbiAgICAgICAgdmFyIHByZWZpeCA9ICcvbWFya2VyTkZUXycgKyB0aGlzLm1hcmtlck5GVENvdW50O1xuICAgICAgICBwcmVmaXhlcy5wdXNoKHByZWZpeCk7XG4gICAgICAgIHZhciBmaWxlbmFtZTEgPSBwcmVmaXggKyAnLmZzZXQnO1xuICAgICAgICB2YXIgZmlsZW5hbWUyID0gcHJlZml4ICsgJy5pc2V0JztcbiAgICAgICAgdmFyIGZpbGVuYW1lMyA9IHByZWZpeCArICcuZnNldDMnO1xuXG4gICAgICAgIHRoaXMuYWpheCh1cmwgKyAnLmZzZXQnLCBmaWxlbmFtZTEsIG9uU3VjY2Vzcy5iaW5kKGZpbGVuYW1lMSksIG9uRXJyb3IuYmluZChmaWxlbmFtZTEpKTtcbiAgICAgICAgdGhpcy5hamF4KHVybCArICcuaXNldCcsIGZpbGVuYW1lMiwgb25TdWNjZXNzLmJpbmQoZmlsZW5hbWUyKSwgb25FcnJvci5iaW5kKGZpbGVuYW1lMikpO1xuICAgICAgICB0aGlzLmFqYXgodXJsICsgJy5mc2V0MycsIGZpbGVuYW1lMywgb25TdWNjZXNzLmJpbmQoZmlsZW5hbWUzKSwgb25FcnJvci5iaW5kKGZpbGVuYW1lMykpO1xuICAgICAgICB0aGlzLm1hcmtlck5GVENvdW50ICs9IDE7XG4gICAgfVxuICAgIGxldCBJZHM6IGFueSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgKytpKSB7XG4gICAgICBJZHMucHVzaChpKVxuICAgIH1cblxuICAgIHJldHVybiBJZHNcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGltcGxlbWVudGF0aW9uXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgYnkgTG9hZENhbWVyYSBtZXRob2RcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHByaXZhdGUgX3N0b3JlRGF0YUZpbGUgKGRhdGE6IFVpbnQ4QXJyYXksIHRhcmdldDogc3RyaW5nKSB7XG4gICAgLy8gRlMgaXMgcHJvdmlkZWQgYnkgZW1zY3JpcHRlblxuICAgIC8vIE5vdGU6IHZhbGlkIGRhdGEgbXVzdCBiZSBpbiBiaW5hcnkgZm9ybWF0IGVuY29kZWQgYXMgVWludDhBcnJheVxuICAgIHRoaXMuaW5zdGFuY2UuRlMud3JpdGVGaWxlKHRhcmdldCwgZGF0YSwge1xuICAgICAgZW5jb2Rpbmc6ICdiaW5hcnknXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGludGVybmFsbHkgYnkgdGhlIGFkZE5GVE1hcmtlcnMgbWV0aG9kXG4gICAqIEBwYXJhbSB1cmwgdXJsIG9mIHRoZSBtYXJrZXIuXG4gICAqIEBwYXJhbSB0YXJnZXQgdGhlIHRhcmdldCBvZiB0aGUgbWFya2VyLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgY2FsbGJhY2sgIHRvIGdldCB0aGUgYmluYXJ5IGRhdGEuXG4gICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrIHRoZSBlcnJvciBjYWxsYmFjay5cbiAgICovXG4gIHByaXZhdGUgYWpheCh1cmw6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcsIGNhbGxiYWNrOiAoYnl0ZUFycmF5OiBVaW50OEFycmF5KSA9PiB2b2lkLCBlcnJvckNhbGxiYWNrOiAobWVzc2FnZTogYW55KSA9PiB2b2lkKSB7XG4gICAgdmFyIG9SZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgb1JlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICBvUmVxLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7IC8vIGJsb2IgYXJyYXlidWZmZXJcbiAgICAgICAgY29uc3Qgd3JpdGVCeXRlQXJyYXlUb0ZTID0gKHRhcmdldDogc3RyaW5nLCBieXRlQXJyYXk6IFVpbnQ4QXJyYXksIGNhbGxiYWNrOiAoYnl0ZUFycmF5OiBVaW50OEFycmF5KSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5GUy53cml0ZUZpbGUodGFyZ2V0LCBieXRlQXJyYXksIHsgZW5jb2Rpbmc6ICdiaW5hcnknIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKGJ5dGVBcnJheSk7XG4gICAgICAgIH1cblxuICAgICAgICBvUmVxLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWZmZXIgPSBvUmVxLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIHZhciBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgd3JpdGVCeXRlQXJyYXlUb0ZTKHRhcmdldCwgYnl0ZUFycmF5LCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKHRoaXMuc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBvUmVxLnNlbmQoKTtcbiAgfVxufVxuIiwiLypcbiAqICBNb2R1bGVMb2FkZXIudHNcbiAqICBKU0FSVG9vbEtpdE5GVFxuICpcbiAqICBUaGlzIGZpbGUgaXMgcGFydCBvZiBKU0FSVG9vbEtpdE5GVCAtIFdlYkFSS2l0LlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqICBKU0FSVG9vbEtpdE5GVCBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqICBhbG9uZyB3aXRoIEpTQVJUb29sS2l0TkZULiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqICBBcyBhIHNwZWNpYWwgZXhjZXB0aW9uLCB0aGUgY29weXJpZ2h0IGhvbGRlcnMgb2YgdGhpcyBsaWJyYXJ5IGdpdmUgeW91XG4gKiAgcGVybWlzc2lvbiB0byBsaW5rIHRoaXMgbGlicmFyeSB3aXRoIGluZGVwZW5kZW50IG1vZHVsZXMgdG8gcHJvZHVjZSBhblxuICogIGV4ZWN1dGFibGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGxpY2Vuc2UgdGVybXMgb2YgdGhlc2UgaW5kZXBlbmRlbnQgbW9kdWxlcywgYW5kIHRvXG4gKiAgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgcmVzdWx0aW5nIGV4ZWN1dGFibGUgdW5kZXIgdGVybXMgb2YgeW91ciBjaG9pY2UsXG4gKiAgcHJvdmlkZWQgdGhhdCB5b3UgYWxzbyBtZWV0LCBmb3IgZWFjaCBsaW5rZWQgaW5kZXBlbmRlbnQgbW9kdWxlLCB0aGUgdGVybXMgYW5kXG4gKiAgY29uZGl0aW9ucyBvZiB0aGUgbGljZW5zZSBvZiB0aGF0IG1vZHVsZS4gQW4gaW5kZXBlbmRlbnQgbW9kdWxlIGlzIGEgbW9kdWxlXG4gKiAgd2hpY2ggaXMgbmVpdGhlciBkZXJpdmVkIGZyb20gbm9yIGJhc2VkIG9uIHRoaXMgbGlicmFyeS4gSWYgeW91IG1vZGlmeSB0aGlzXG4gKiAgbGlicmFyeSwgeW91IG1heSBleHRlbmQgdGhpcyBleGNlcHRpb24gdG8geW91ciB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LCBidXQgeW91XG4gKiAgYXJlIG5vdCBvYmxpZ2F0ZWQgdG8gZG8gc28uIElmIHlvdSBkbyBub3Qgd2lzaCB0byBkbyBzbywgZGVsZXRlIHRoaXMgZXhjZXB0aW9uXG4gKiAgc3RhdGVtZW50IGZyb20geW91ciB2ZXJzaW9uLlxuICpcbiAqICBDb3B5cmlnaHQgMjAyMCBXZWJBUktpdC5cbiAqXG4gKiAgQXV0aG9yKHMpOiBXYWx0ZXIgUGVyZGFuIEBrYWx3YWx0IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWx3YWx0XG4gKlxuICovXG5pbXBvcnQgTW9kdWxlIGZyb20gJy4uL2J1aWxkL2FydG9vbGtpdE5GVF9FUzZfd2FzbSdcblxuY29uc3QgTW9kdWxlTG9hZGVyID0ge1xuICBpbml0OiBuZXcgUHJvbWlzZTxvYmplY3Q+KHJlc29sdmUgPT4ge1xuICAgICAgTW9kdWxlKHtcbiAgICAgICAgb25SdW50aW1lSW5pdGlhbGl6ZWQgKCkge1xuICAgICAgICAgIC8vIG5lZWQgdG8gd3JhcCB0aGlzIGluIGFuIG9iamVjdFxuICAgICAgICAgIC8vIG90aGVyd2lzZSBpdCB3aWxsIGNhdXNlIENocm9tZSB0byBjcmFzaFxuICAgICAgICAgIHJlc29sdmUoeyBpbnN0YW5jZTogdGhpcyB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kdWxlTG9hZGVyXG4iLCIvKlxuICogIFV0aWxzLnRzXG4gKiAgSlNBUlRvb2xLaXRORlRcbiAqXG4gKiAgVGhpcyBmaWxlIGlzIHBhcnQgb2YgSlNBUlRvb2xLaXRORlQgLSBXZWJBUktpdC5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiAgSlNBUlRvb2xLaXRORlQgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiAgYWxvbmcgd2l0aCBKU0FSVG9vbEtpdE5GVC4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiAgQXMgYSBzcGVjaWFsIGV4Y2VwdGlvbiwgdGhlIGNvcHlyaWdodCBob2xkZXJzIG9mIHRoaXMgbGlicmFyeSBnaXZlIHlvdVxuICogIHBlcm1pc3Npb24gdG8gbGluayB0aGlzIGxpYnJhcnkgd2l0aCBpbmRlcGVuZGVudCBtb2R1bGVzIHRvIHByb2R1Y2UgYW5cbiAqICBleGVjdXRhYmxlLCByZWdhcmRsZXNzIG9mIHRoZSBsaWNlbnNlIHRlcm1zIG9mIHRoZXNlIGluZGVwZW5kZW50IG1vZHVsZXMsIGFuZCB0b1xuICogIGNvcHkgYW5kIGRpc3RyaWJ1dGUgdGhlIHJlc3VsdGluZyBleGVjdXRhYmxlIHVuZGVyIHRlcm1zIG9mIHlvdXIgY2hvaWNlLFxuICogIHByb3ZpZGVkIHRoYXQgeW91IGFsc28gbWVldCwgZm9yIGVhY2ggbGlua2VkIGluZGVwZW5kZW50IG1vZHVsZSwgdGhlIHRlcm1zIGFuZFxuICogIGNvbmRpdGlvbnMgb2YgdGhlIGxpY2Vuc2Ugb2YgdGhhdCBtb2R1bGUuIEFuIGluZGVwZW5kZW50IG1vZHVsZSBpcyBhIG1vZHVsZVxuICogIHdoaWNoIGlzIG5laXRoZXIgZGVyaXZlZCBmcm9tIG5vciBiYXNlZCBvbiB0aGlzIGxpYnJhcnkuIElmIHlvdSBtb2RpZnkgdGhpc1xuICogIGxpYnJhcnksIHlvdSBtYXkgZXh0ZW5kIHRoaXMgZXhjZXB0aW9uIHRvIHlvdXIgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSwgYnV0IHlvdVxuICogIGFyZSBub3Qgb2JsaWdhdGVkIHRvIGRvIHNvLiBJZiB5b3UgZG8gbm90IHdpc2ggdG8gZG8gc28sIGRlbGV0ZSB0aGlzIGV4Y2VwdGlvblxuICogIHN0YXRlbWVudCBmcm9tIHlvdXIgdmVyc2lvbi5cbiAqXG4gKiAgQ29weXJpZ2h0IDIwMjAgV2ViQVJLaXQuXG4gKlxuICogIEF1dGhvcihzKTogV2FsdGVyIFBlcmRhbiBAa2Fsd2FsdCBodHRwczovL2dpdGh1Yi5jb20va2Fsd2FsdFxuICpcbiAqL1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XG4gIHN0YXRpYyBhc3luYyBmZXRjaFJlbW90ZURhdGEgKHVybDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSBhd2FpdCBheGlvcy5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KVxuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3BvbnNlLmRhdGEpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZldGNoUmVtb3RlRGF0YUNhbGxiYWNrICh1cmw6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgYXhpb3MuZ2V0KHVybCwgeyByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicgfSlcbiAgICAgIC50aGVuKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShyZXNwb25zZS5kYXRhKVxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHN0cmluZzJVaW50OERhdGEgKHN0cmluZzogc3RyaW5nKSB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHN0cmluZy5sZW5ndGgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweGZmXG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLypcbiAqICBpbmRleC50c1xuICogIEpTQVJUb29sS2l0TkZUXG4gKlxuICogIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIEpTQVJUb29sS2l0TkZUIC0gV2ViQVJLaXQuXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogIEpTQVJUb29sS2l0TkZUIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogIGFsb25nIHdpdGggSlNBUlRvb2xLaXRORlQuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogIEFzIGEgc3BlY2lhbCBleGNlcHRpb24sIHRoZSBjb3B5cmlnaHQgaG9sZGVycyBvZiB0aGlzIGxpYnJhcnkgZ2l2ZSB5b3VcbiAqICBwZXJtaXNzaW9uIHRvIGxpbmsgdGhpcyBsaWJyYXJ5IHdpdGggaW5kZXBlbmRlbnQgbW9kdWxlcyB0byBwcm9kdWNlIGFuXG4gKiAgZXhlY3V0YWJsZSwgcmVnYXJkbGVzcyBvZiB0aGUgbGljZW5zZSB0ZXJtcyBvZiB0aGVzZSBpbmRlcGVuZGVudCBtb2R1bGVzLCBhbmQgdG9cbiAqICBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSByZXN1bHRpbmcgZXhlY3V0YWJsZSB1bmRlciB0ZXJtcyBvZiB5b3VyIGNob2ljZSxcbiAqICBwcm92aWRlZCB0aGF0IHlvdSBhbHNvIG1lZXQsIGZvciBlYWNoIGxpbmtlZCBpbmRlcGVuZGVudCBtb2R1bGUsIHRoZSB0ZXJtcyBhbmRcbiAqICBjb25kaXRpb25zIG9mIHRoZSBsaWNlbnNlIG9mIHRoYXQgbW9kdWxlLiBBbiBpbmRlcGVuZGVudCBtb2R1bGUgaXMgYSBtb2R1bGVcbiAqICB3aGljaCBpcyBuZWl0aGVyIGRlcml2ZWQgZnJvbSBub3IgYmFzZWQgb24gdGhpcyBsaWJyYXJ5LiBJZiB5b3UgbW9kaWZ5IHRoaXNcbiAqICBsaWJyYXJ5LCB5b3UgbWF5IGV4dGVuZCB0aGlzIGV4Y2VwdGlvbiB0byB5b3VyIHZlcnNpb24gb2YgdGhlIGxpYnJhcnksIGJ1dCB5b3VcbiAqICBhcmUgbm90IG9ibGlnYXRlZCB0byBkbyBzby4gSWYgeW91IGRvIG5vdCB3aXNoIHRvIGRvIHNvLCBkZWxldGUgdGhpcyBleGNlcHRpb25cbiAqICBzdGF0ZW1lbnQgZnJvbSB5b3VyIHZlcnNpb24uXG4gKlxuICogIENvcHlyaWdodCAyMDIwIFdlYkFSS2l0LlxuICpcbiAqICBBdXRob3Iocyk6IFdhbHRlciBQZXJkYW4gQGthbHdhbHQgaHR0cHM6Ly9naXRodWIuY29tL2thbHdhbHRcbiAqXG4gKi9cbmltcG9ydCBBUlRvb2xraXRORlQgZnJvbSAnLi9BUlRvb2xraXRORlQnXG5pbXBvcnQgQVJDb250cm9sbGVyTkZUIGZyb20gJy4vQVJDb250cm9sbGVyTkZUJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEFSVG9vbGtpdE5GVCwgQVJDb250cm9sbGVyTkZUXG59XG4iXSwic291cmNlUm9vdCI6IiJ9